[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    paren_stack = []\n    result = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(i)\n        elif c == ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced parentheses')\n            start = paren_stack.pop()\n            result.append(paren_string[start:i+1])\n    if len(paren_stack)!= 0:\n        raise ValueError('Unbalanced parentheses')\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [delimeter] + [numbers[i] for i in range(0, len(numbers), 2)] + [delimeter]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    paren_stack = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(i)\n        elif c == ')':\n            if len(paren_stack) == 0:\n                return []\n            start = paren_stack.pop()\n            end = i\n            return [end - start] + parse_nested_parens(paren_string[start + 1:end])\n    return []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i], result[i - 1]))\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[i:][::-1]\n    return string[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [len(x) for x in music_string.split(' ')]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers.sort()\n    return numbers[0], numbers[-1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Find the range of the numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return [i] + factorize(n // i)\n        i += 2\n    return [n]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"polynomial must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"polynomial must have non zero coefficient\")\n    if xs[-1] < 0:\n        raise ValueError(\"polynomial must have non negative coefficient\")\n    if xs[-1] > 0:\n        xs = xs[::-1]\n    for i in range(len(xs) - 1):\n        if xs[i] * xs[i + 1] < 0:\n            return -(xs[i] / xs[i + 1])\n    return -1\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    l.sort(key=lambda x: x % 3)\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[2:] + group[:2] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    for i in l:\n        if l.count(i) == 3:\n            return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 0\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    # Hint: use a set to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hint: use a dictionary to store the values\n    # Hin"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(text) == 0:\n        return True\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) ** 2 % p\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    text = text.lower()\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not brackets:\n        return True\n    if brackets[0] == \">\" or brackets[0] == \"<\":\n        return False\n    if brackets[-1] == \">\" or brackets[-1] == \"<\":\n        return False\n    return correct_bracketing(brackets[1:-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert n > 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) == 1:\n        return [1]\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.count(\"mango\") - s.count(\"apple\") - s.count(\"orange\")\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n    \n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return is_palindrome(q) and sum(q) <= w\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 3\n    if len(arr) == 5:\n        return 4\n    if len(arr) == 6:\n        return 5\n    if len(arr) == 7:\n        return 6\n    if len(arr) == 8:\n        return 7\n    if len(arr) == 9:\n        return 8\n    if len(arr) == 10:\n        return 9\n    if len(arr) == 11:\n        return 10\n    if len(arr) == 12:\n        return 11\n    if len(arr) == 13:\n        return 12\n    if len(arr) == 14:\n        return 13\n    if len(arr) == 15:\n        return 14\n    if len(arr) == 16:\n        return 15\n    if len(arr) == 17:\n        return 16\n    if len(arr) == 18:\n        return 17\n    if len(arr) == 19:\n        return 18\n    if len(arr) == 20:\n        return 19\n    if len(arr) == 21:\n        return 20\n    if len(arr) == 22:\n        return 21\n    if len(arr) == 23:\n        return 22\n    if len(arr) == 24:\n        return 23\n    if len(arr) == 25:\n        return 24\n    if len(arr) == 26:\n        return 25\n    if len(arr) == 27:\n        return 26\n    if len(arr) == 28:\n        return 27\n    if len(arr) == 29:\n        return 28\n    if len(arr) == 30:\n        return 29\n    if len(arr) == 31:\n        return 30\n    if len(arr) == 32:\n        return 31\n    if len(arr) == 33:\n        return 32\n    if len(arr) == 34:\n        return 33\n    if len(arr) == 35:\n        return 34\n    if len(arr) == 36:\n        return 35\n    if len(arr) == 37:\n        return 36\n    if len(arr) == 38:\n        return 37\n    if len(arr) == 39:\n        return 38\n    if len(arr) == 40:\n        return 39\n    if len(arr) == 41:\n        return 40\n    if len(arr) == 42:\n        return 41\n    if len(arr) == 43:\n        return 42\n    if len(arr) == 44:\n        return 43\n    if len(arr) == 45:\n        return 44\n    if len(arr) == 46:\n        return 45\n    if len(arr) == 47:\n        return 46\n    if len(arr) == 48:\n        return 47\n    if len(arr) == 49:\n        return 48\n    if len(arr) == 50:\n        return 49\n    if len(arr) == 51:\n        return 50\n    if len(arr) == 52:\n        return 51\n    if len(arr) == 53:\n        return 52\n    if len(arr) == 54:\n        return 53\n    if len(arr) == 55:\n        return 54\n    if len(arr) == 56:\n        return 55\n    if len(arr) == 57:\n        return 56\n    if len(arr) == 58:\n        return 57\n    if len(arr) == 59:\n        return 58\n    if len(arr) == 60:\n        return 59\n    if len(arr) == 61:\n        return 60\n    if len(arr) == 62:\n        return 61\n    if len(arr) == 63:\n        return 62\n    if len(arr) == 64:\n        return 63\n    if len(arr) == 65:\n        return 64\n    if len(arr) == 66:\n        return 65\n    if len(arr) == 67:\n        return 66\n    if len(arr) == 68:\n        return 67\n    if len(arr) == 69:\n        return 68\n    if len(arr) == 70:\n        return 69\n    if len(arr) == 71:\n        return 70\n    if len(arr) == 72:\n        return 71\n    if len(arr) == 73:\n        return 72\n    i"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst1[:len(lst2)]\n    else:\n        return lst2[:len(lst1)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n**int(x) == x\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def count_digits(num):\n        count = 0\n        for i in num:\n            if i in \"0123456789ABCDEF\":\n                count += 1\n        return count\n    \n    def count_primes(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count\n    \n    def count_primes_and_digits(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count\n    \n    def count_primes_and_digits_and_hex(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num)\n    \n    def count_primes_and_digits_and_hex_and_dec(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num), count_digits(num)\n    \n    def count_primes_and_digits_and_hex_and_dec_and_key(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num), count_digits(num), count_digits(num)\n    \n    def count_primes_and_digits_and_hex_and_dec_and_key_and_dec(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num), count_digits(num), count_digits(num), count_digits(num)\n    \n    def count_primes_and_digits_and_hex_and_dec_and_key_and_dec_and_key(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num), count_digits(num), count_digits(num), count_digits(num), count_digits(num)\n    \n    def count_primes_and_digits_and_hex_and_dec_and_key_and_dec_and_key_and_dec(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num), count_digits(num), count_digits(num), count_digits(num), count_digits(num), count_digits(num)\n    \n    def count_primes_and_digits_and_hex_and_dec_and_key_and_dec_and_key_and_dec_and_key(num):\n        count = 0\n        for i in range(2, int(num**0.5)+1):\n            if is_prime(i) and is_prime(num/i):\n                count += 1\n        return count, count_digits(num), count_digits(num), count_digits(num), count_digits(num), count_digits(num), count_digits(num), count_digits(num"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 1\n    if n == 7:\n        return 2\n    if n == 8:\n        return 1\n    if n == 9:\n        return 2\n    if n == 10:\n        return 1\n    if n == 11:\n        return 2\n    if n == 12:\n        return 1\n    if n == 13:\n        return 2\n    if n == 14:\n        return 1\n    if n == 15:\n        return 2\n    if n == 16:\n        return 1\n    if n == 17:\n        return 2\n    if n == 18:\n        return 1\n    if n == 19:\n        return 2\n    if n == 20:\n        return 1\n    if n == 21:\n        return 2\n    if n == 22:\n        return 1\n    if n == 23:\n        return 2\n    if n == 24:\n        return 1\n    if n == 25:\n        return 2\n    if n == 26:\n        return 1\n    if n == 27:\n        return 2\n    if n == 28:\n        return 1\n    if n == 29:\n        return 2\n    if n == 30:\n        return 1\n    if n == 31:\n        return 2\n    if n == 32:\n        return 1\n    if n == 33:\n        return 2\n    if n == 34:\n        return 1\n    if n == 35:\n        return 2\n    if n == 36:\n        return 1\n    if n == 37:\n        return 2\n    if n == 38:\n        return 1\n    if n == 39:\n        return 2\n    if n == 40:\n        return 1\n    if n == 41:\n        return 2\n    if n == 42:\n        return 1\n    if n == 43:\n        return 2\n    if n == 44:\n        return 1\n    if n == 45:\n        return 2\n    if n == 46:\n        return 1\n    if n == 47:\n        return 2\n    if n == 48:\n        return 1\n    if n == 49:\n        return 2\n    if n == 50:\n        return 1\n    if n == 51:\n        return 2\n    if n == 52:\n        return 1\n    if n == 53:\n        return 2\n    if n == 54:\n        return 1\n    if n == 55:\n        return 2\n    if n == 56:\n        return 1\n    if n == 57:\n        return 2\n    if n == 58:\n        return 1\n    if n == 59:\n        return 2\n    if n == 60:\n        return 1\n    if n == 61:\n        return 2\n    if n == 62:\n        return 1\n    if n == 63:\n        return 2\n    if n == 64:\n        return 1\n    if n == 65:\n        return 2\n    if n == 66:\n        return 1\n    if n == 67:\n        return 2\n    if n == 68:\n        return 1\n    if n == 69:\n        return 2\n    if n == 70:\n        return 1\n    if n == 71:\n        return 2\n    if n == 72:\n        return 1\n    if n == 73:\n        return 2\n    if n == 74:\n        return 1\n    if n == 75:\n        return 2\n    if n == 76:\n        return 1\n    if n == 77:\n        return 2\n    if n == 78:\n        return 1\n    if n == 79:\n        return 2\n    if n == 80:\n        return 1\n    if n == 81:\n        return 2\n    if n == 82:\n        return 1\n    if n == 83:\n        return 2\n    if n == 84:\n        return 1\n    if n == 85:\n        return 2\n    if n == 86:\n        return 1\n    if n == 87:\n        return 2\n    if n == 88:\n        return 1\n    if n == 89:\n        return 2\n    if n == 90:\n        return 1\n    if n == 91:\n        return 2\n    if n == 92:\n        return 1\n    if n == 93:\n        return 2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return str(bin(N).count('1'))\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: x.lower()))\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda x: x[0])[::-1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not array:\n        return array\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    new_alphabet_dict = dict(zip(alphabet, new_alphabet))\n    return ''.join(new_alphabet_dict[letter] for letter in s)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for word in S.split() if word[0] == \"I\")\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (x == y + z) and (type(x) == int) and (type(y) == int) and (type(z) == int)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Your code here\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef caesar_cipher(message, shift):\n    \"\"\"\n    Write a function that takes a message and a shift, and returns \n    the message encoded with a caesar cipher. \n    \n    Examples:\n    >>> caesar_cipher('test', 1)\n    'TEST'\n    >>> caesar_cipher('This is a message', 1)\n    'UHJH VHJH'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef caesar_decode(message, shift):\n    \"\"\"\n    Write a function that takes a message and a shift, and returns \n    the message decoded with a caesar cipher. \n    \n    Examples:\n    >>> caesar_decode('TEST', 1)\n    'test'\n    >>> caesar_decode('UHJH VHJH', 1)\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef vigenere_cipher(message, keyword):\n    \"\"\"\n    Write a function that takes a message and a keyword, and returns \n    the message encoded with a vigenere cipher. \n    \n    Examples:\n    >>> vigenere_cipher('test', 'key')\n    'TEST'\n    >>> vigenere_cipher('This is a message', 'key')\n    'UHJH VHJH'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef vigenere_decode(message, keyword):\n    \"\"\"\n    Write a function that takes a message and a keyword, and returns \n    the message decoded with a vigenere cipher. \n    \n    Examples:\n    >>> vigenere_decode('TEST', 'key')\n    'test'\n    >>> vigenere_decode('UHJH VHJH', 'key')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef affine_cipher(message, a, b):\n    \"\"\"\n    Write a function that takes a message and two integers, a and b, \n    and returns the message encoded with an affine cipher. \n    \n    Examples:\n    >>> affine_cipher('test', 1, 1)\n    'TEST'\n    >>> affine_cipher('This is a message', 1, 1)\n    'UHJH VHJH'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef affine_decode(message, a, b):\n    \"\"\"\n    Write a function that takes a message and two integers, a and b, \n    and returns the message decoded with an affine cipher. \n    \n    Examples:\n    >>> affine_decode('TEST', 1, 1)\n    'test'\n    >>> affine_decode('UHJH VHJH', 1, 1)\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef playfair_cipher(message, keyword):\n    \"\"\"\n    Write a function that takes a message and a keyword, and returns \n    the message encoded with a playfair cipher. \n    \n    Examples:\n    >>> playfair_cipher('test', 'key')\n    'TEST'\n    >>> playfair_cipher('This is a message', 'key')\n    'UHJH VHJH'\n    \"\"\"\n    \n    # Your code here\n    \n    \ndef playfair_decode(message, keyword):\n    \"\"\"\n    Write a function that takes a message and a keyword, and returns \n    the message decoded with a playfair cipher. \n    \n    Examples:\n    >>> playfair_decode('TEST', 'key')"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [int(i) for i in lst]\n    lst.sort()\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if isPrime(i)]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) == len(set(str(i)))]\n    lst = [i for i in lst if len(str(i)) ="
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        return [2] + count_up_to(n-1)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(int(digit) * int(digit) for digit in str(a * b))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(len(s)) if s[i].isupper() and i%2==0)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        result.append(n)\n    return result\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x > y:\n        return -1\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                return i\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    arr.reverse()\n    for i in range(len(arr)):\n        if arr[i] < 1 or arr[i] > 9:\n            arr[i] = 'X'\n    return arr\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = [1]\n    for i in range(1, n):\n        l.append(l[i-1] * i)\n    return l\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr)==0:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!=i+1:\n            return False\n    return True\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in lst1:\n        if i % 2!= 0:\n            return \"NO\"\n    for i in lst2:\n        if i % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) == 0:\n        return (s,True)\n    if len(s) == 1:\n        return (s,True)\n    if s[0] == c:\n        return (reverse_delete(s[1:],c),False)\n    else:\n        return (reverse_delete(s[1:],c),True)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [len([i for i in lst[i] if int(i)%2!= 0]) for i in range(len(lst))]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            nums[i] += nums[i - 1]\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n            min_sum_index = i\n    return min_sum_index\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def max_fill_rec(grid, capacity, row, col):\n        if row == len(grid) or col == len(grid[0]):\n            return 0\n        if grid[row][col] == 0:\n            return max_fill_rec(grid, capacity, row+1, col)\n        else:\n            return max(max_fill_rec(grid, capacity, row+1, col), max_fill_rec(grid, capacity, row, col+1)) + 1\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [word for word in s.split() if len(word) == n]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if lst[0] == ')':\n        return 'No'\n    if lst[1] == '(':\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if k > len(arr):\n        return arr\n    arr.sort()\n    return arr[-k:]\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 1 and i % 2 == 0])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(arr[:k])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return odd_collatz\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return True\n    if lst[0] < lst[1]:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return None\n    return sum(abs(x) * sign(x) for x in arr)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not grid or not grid[0]:\n        return []\n    if k == 0:\n        return []\n    if k == 1:\n        return grid[0]\n    if k == len(grid) * len(grid[0]):\n        return grid[0]\n    \n    # find the min path\n    min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path = min(min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the grid\n    min_path_grid = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid = min(min_path_grid, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path = min(min_path_grid_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path = min(min_path_grid_min_path_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path_min_path = min(min_path_grid_min_path_min_path_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path_min_path_min_path = min(min_path_grid_min_path_min_path_min_path_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path_min_path_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path_min_path_min_path = min(min_path_grid_min_path_min_path_min_path_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path_min_path_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path_min_path_min_path = min(min_path_grid_min_path_min_path_min_path_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path_min_path_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path_min_path_min_path = min(min_path_grid_min_path_min_path_min_path_min_path, minPath(grid[i], k - 1))\n    \n    # find the min path in the min path grid\n    min_path_grid_min_path_min_path_min_path_min_path_min_path = grid[0]\n    for i in range(1, len(grid)):\n        min_path_grid_min_path_min_path_min_path_min_path = min(min_path_grid_min_pat"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 1, 1]\n    else:\n        return tri(n - 1) + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n - 3)[-1]]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n // 10) * (n % 10)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    return False\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(map(lambda x: int(math.ceil(x))**2, lst))\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if txt == \"\":\n        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 3\n    if len(arr) == 5:\n        return 4\n    if len(arr) == 6:\n        return 5\n    if len(arr) == 7:\n        return 6\n    if len(arr) == 8:\n        return 7\n    if len(arr) == 9:\n        return 8\n    if len(arr) == 10:\n        return 9\n    if len(arr) == 11:\n        return 10\n    if len(arr) == 12:\n        return 11\n    if len(arr) == 13:\n        return 12\n    if len(arr) == 14:\n        return 13\n    if len(arr) == 15:\n        return 14\n    if len(arr) == 16:\n        return 15\n    if len(arr) == 17:\n        return 16\n    if len(arr) == 18:\n        return 17\n    if len(arr) == 19:\n        return 18\n    if len(arr) == 20:\n        return 19\n    if len(arr) == 21:\n        return 20\n    if len(arr) == 22:\n        return 21\n    if len(arr) == 23:\n        return 22\n    if len(arr) == 24:\n        return 23\n    if len(arr) == 25:\n        return 24\n    if len(arr) == 26:\n        return 25\n    if len(arr) == 27:\n        return 26\n    if len(arr) == 28:\n        return 27\n    if len(arr) == 29:\n        return 28\n    if len(arr) == 30:\n        return 29\n    if len(arr) == 31:\n        return 30\n    if len(arr) == 32:\n        return 31\n    if len(arr) == 33:\n        return 32\n    if len(arr) == 34:\n        return 33\n    if len(arr) == 35:\n        return 34\n    if len(arr) == 36:\n        return 35\n    if len(arr) == 37:\n        return 36\n    if len(arr) == 38:\n        return 37\n    if len(arr) == 39:\n        return 38\n    if len(arr) == 40:\n        return 39\n    if len(arr) == 41:\n        return 40\n    if len(arr) == 42:\n        return 41\n    if len(arr) == 43:\n        return 42\n    if len(arr) == 44:\n        return 43\n    if len(arr) == 45:\n        return 44\n    if len(arr) == 46:\n        return 45\n    if len(arr) == 47:\n        return 46\n    if len(arr) == 48:\n        return 47\n    if len(arr) == 49:\n        return 48\n    if len(arr) == 50:\n        return 49\n    if len(arr) == 51:\n        return 50\n    if len(arr) == 52:\n        return 51\n    if len(arr) == 53:\n        return 52\n    if len(arr) == 54:\n        return 53\n    if len(arr) == 55:\n        return 54\n    if len(arr) == 56:\n        return 55\n    if len(arr) == 57:\n        return 56\n    if len(arr) == 58:\n        return 57\n    if len(arr) == 59:\n        return 58\n    if len(arr) == 60:\n        return 59\n    if len(arr) == 61:\n        return 60\n    if len(arr) == 62:\n        return 61\n    if len(arr) == 63:\n        return 62\n    if len(arr) == 64:\n        return 63\n    if len(arr) == 65:\n        return 64\n    if len(arr) == 66:\n        return 65\n    if len(arr) == 67:\n        return 66\n    if len(arr) == 68:\n        return 67\n    if len(arr) == 69:\n        return 68\n    if len(arr) == 70:\n        return 69\n    if len(arr) == 71:\n        return 70\n    if len(arr) == 72:\n        return 71\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst:\n        return (None, None)\n    else:\n        return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(a, float):\n        a = a\n    else:\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    elif isinstance(b, float):\n        b = b\n    else:\n        b = float(b)\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n % 2 == 0 and sum(i for i in range(1, n, 2) if i % 2 == 0) == n\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    text = text.replace(\" \", \"_\")\n    \n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n    \n    return text\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_valid(file_name):\n        if len(file_name) > 3:\n            return 'No'\n        if file_name.count('.')!= 1:\n            return 'No'\n        if file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n            return 'No'\n        if file_name[file_name.index('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'\n    return is_valid(file_name)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Your code here\n    \n    return sum(map(lambda x: x**2 if x % 3 == 0 else x**3, lst))\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(sorted(set(sentence), key=len, reverse=True))"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1)\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    return ()\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst, key=len)\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x % 2!= 0])\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    extensions_strength = {}\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        extensions_strength[extension] = extension_strength\n    \n    max_strength = max(extensions_strength.values())\n    max_extensions = [extension for extension, strength in extensions_strength.items() if strength == max_strength]\n    \n    return '{0}.{1}'.format(class_name, max_extensions[0])\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:] in b or a[:i] in b:\n            return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n        even = 1\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('int_to_mini_roman: argument must be a positive integer between 1 and 1000')\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2)\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if number < 0 or number > 1000:\n        raise ValueError(\"number must be between 0 and 1000\")\n    if need < 0 or need > 1000:\n        raise ValueError(\"need must be between 0 and 1000\")\n    if remaining < 0 or remaining > 1000:\n        raise ValueError(\"remaining must be between 0 and 1000\")\n    \n    if number < need:\n        return [number, 0]\n    \n    if number == need:\n        return [number, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number == 0:\n        return [need, 0]\n    \n    if number < need:\n        return [number, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [need, remaining]\n    \n    if number > need:\n        return [need, remaining]\n    \n    if number < need:\n        return [nee"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join(reversed(s) if s.isalpha() else s)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n"
    }
]