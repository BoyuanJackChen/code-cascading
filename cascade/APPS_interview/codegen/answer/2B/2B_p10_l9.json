[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    s = stdin.split('[')\n    s = s[1].split(']')\n    s = s[0].split(':')\n    s = s[1].split(':')\n    s = s[0].split('|')\n    s = s[0].split('|')\n    \n    if len(s[0]) % 2 == 1:\n        return -1\n    \n    return len(s[0])"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... [::]\n   ... [:||:]\n   ... [:|||:]\n   ... ''')\n    '7'\n    >>> solution('''\n   ... [::|:]\n   ... ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n   ... ''')\n    '4'\n    \"\"\"\n\n    return max(len(l) for l in stdin.split('\\n'))"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin:\n        if c == \"[\":\n            stack.append(c)\n        elif c == \":\":\n            if len(stack) > 0 and stack[-1] == \"|\":\n                stack.pop()\n            else:\n                stack.append(c)\n        elif c == \"]\":\n            if len(stack) > 0 and stack[-1] == \"|\":\n                stack.pop()\n            else:\n                stack.append(c)\n    return \"\".join(stack) if len(stack) > 0 else \"-\"\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return(1)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"|\")\n    sum_len = len(max(stdin, key=lambda x: len(x)))\n    count = 0\n    for elem in stdin:\n        if \":\" in elem:\n            sum_len += 2\n        elif \"|\" in elem:\n            sum_len += 2\n        else:\n            sum_len += 1\n        count += 1\n    if count == 1:\n        return \"-\"\n    return str(sum_len)"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 0:\n        return n\n    ans = 0\n    s = list(s)\n    start = 0\n    while start < n:\n        end = start + 1\n        while end < n and s[end] == '|':\n            end += 1\n        # end = start + 1\n        # while end < n and s[end] == ':':\n        #     end += 1\n        # end = start + 1\n        # while end < n and s[end] == ':':\n        #     end += 1\n        # end = start + 1\n        # while end < n and s[end] == ':':\n        #     end += 1\n        # end = start + 1\n        # while end < n and s[end] == ':':\n        #     end += 1\n        # if end < n:\n        #     end += 1\n        if end > start:\n            s[start] = ''\n            ans = max(ans, end - start)\n            s[start] = '|'\n            ans = max(ans, end - start)\n            s[start] = ':'\n            ans = max(ans, end - start)\n            s[start] = ':'\n            ans = max(ans, end - start)\n            s[start] = '|'\n            ans = max(ans, end - start)\n            start = end\n        else:\n            start = end\n    return \"\".join(s)\n\n\ndef"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i=='|':\n            if len(stdin)>=2:\n                if stdin[0]=='|':\n                    return '-1'\n                else:\n                    return len(stdin)-1\n            else:\n                return '-1'\n    if len(stdin)>=2:\n        if stdin[0]=='|':\n            return len(stdin)-1\n        else:\n            return '-1'\n    else:\n        return '-1'\nsolution(stdin)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    for line in lines:\n        parts = line.split(\":\")\n        if len(parts) < 2:\n            continue\n        if len(parts[0]) == 0:\n            continue\n        if parts[0][0]!= \"[\":\n            continue\n        if parts[1][0]!= \"|\":\n            continue\n        if parts[1][-1]!= \"|\":\n            continue\n        if len(parts) > 2:\n            if parts[2]!= \":\":\n                continue\n        return parts[0]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if len(string) == 0:\n        return -1\n    return max(len(string) - len(list(reversed(string))) + 1, len(string))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    acc = stdin.count('|')\n    return str(acc)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    for i in range(1, len(stdin)):\n        a = stdin[:i]\n        b = stdin[i:]\n        if sum([int(j) for j in a]) > sum([int(j) for j in b]):\n            answer = a\n            break\n    return answer\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split()))\n    max_num = max(num_list)\n    max_num_idx = num_list.index(max(num_list))\n    \n    # max_num\uc744 10\uc73c\ub85c \ub098\ub208 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.\n    max_num = max_num // 10\n    \n    # max_num_idx\uc5d0 \uc788\ub294 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.\n    return str(max_num_idx)\n    # if 0 <= max_num_idx < 10:\n    #     return str(max_num_idx)\n    # elif 10 <= max_num_idx < 100:\n    #     return str(max_num_idx - 10)\n    # elif 100 <= max_num_idx < 1000:\n    #     return str(max_num_idx - 100)\n    # elif 1000 <= max_num_idx < 10000:\n    #     return str(max_num_idx - 1000)\n    # elif 10000 <= max_num_idx < 100000:\n    #     return str(max_num_idx - 10000)\n    # elif 100000 <= max_num_idx < 1000000:\n    #     return str(max_num_idx - 100000)\n    # elif 1000000 <= max_num_idx < 10000000:\n    #     return str(max_num_idx - 1000000)\n    # elif 10000000 <= max_num_idx < 100000000:\n    #     return str(max_num_idx - 10000000)\n    # elif 100000000 <= max_num_idx < 1000000000:\n    #     return str(max_num_idx - 100000000)\n    # elif 1000000000 <= max_num_idx < 10000000000:\n    #     return str(max_num_idx - 1000000000)\n    # elif 10000000000 <= max_num_idx < 1000000000000000000:\n    #     return str(max_num_idx - 10000000000)\n    # elif 1000000000000000000 <= max_num_idx < 10000000000000:\n    #     return str(max_num_idx - 1000000000000000000)\n    # elif 10000000000000 <= max_num_idx < 100000000000000000000000:\n    #     return str(max_num_idx - 10000000000000)\n    # elif 100000000000000000000000 <= max_num_idx < 10000000000000000000000:\n    #     return str(max_num_idx - 100000000000000000000000)\n    # elif 10000000000000000000000 <= max_num_idx < 100000000000000000000000000:\n    #     return str(max_num_idx - 10000000000000000000000)\n    # elif 100000000000000000000000000 <= max_num_idx < 10000000000000000000000000000:\n    #     return str(max_num_idx - 100000000000000000000000000)\n    # elif 10000000000000000000000000000 <= max_num_idx < 100000000000000000000000000000:\n    #     return str(max_num_idx - 10000000000000000000000000000)\n    # elif 100000000000000000000000000000 <= max_num_idx < 1000000000000000000000000000000:\n    #     return str(max_num_idx - 100000000000000000000000000000)\n    # elif 1000000000000000000000000000000 <= max_num_idx < 10000000000000000000000000000000:\n    #     return str(max_num_idx - 1000000000000000000000000000000)\n    # elif 10000000000000000000000000000000 <= max_num_idx < 10000000000000000000000000000000:\n    #     return str(max_num_idx - 10000000000000000000000000000000)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    integer = int(stdin)\n    x = integer\n    while (x > 0):\n        x, rest = divmod(x, 10)\n        print(rest)\n        if rest > 9:\n            return str(integer)\n    return str(integer)\n    \nsolution(input())\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    max_sum = 0\n    max_i = 0\n    for i in range(len(stdin)):\n        if cnt == 0:\n            cnt += 1\n            cur_sum = int(stdin[i])\n            max_sum = cur_sum\n            max_i = i\n            continue\n        cur_sum += int(stdin[i])\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_i = i\n    return f'{int(stdin[max_i])}'"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 10\n    while n > 0:\n        tmp = m + m\n        n -= tmp\n        m += 1\n    return str(m - 1)"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_number = int(stdin)\n    sum_of_digits = 0\n    max_digit = 0\n    while max_number!= 0:\n        last_digit = max_number % 10\n        max_number //= 10\n        sum_of_digits += last_digit\n        if last_digit > max_digit:\n            max_digit = last_digit\n    return str(max_digit)\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    max_len = 0\n    max_sum = 0\n    a = str(n)\n    for i in range(len(a)):\n        cur_sum = 0\n        for j in range(i, len(a)):\n            cur_sum += int(a[j])\n            if cur_sum > max_sum:\n                max_len = j-i+1\n                max_sum = cur_sum\n    print(max_sum)\n    print(max_len)\n    return a[max_len-1]\n\nsolution('100')\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    if l == 1:\n        print(0)\n        return\n    if int(s) > 10**18:\n        print(0)\n        return\n    ans = 0\n    for i in range(l):\n        for j in range(i, l):\n            if int(s[i:j+1]) > ans:\n                ans = int(s[i:j+1])\n    if ans > 10**18:\n        print(0)\n        return\n    print(ans)\n    return"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = int(stdin)\n    s = str(x)\n    max_sum = 0\n    max_num = 0\n    for i in range(len(s)):\n        s_sum = 0\n        for j in range(i, len(s)):\n            s_sum += int(s[j])\n            if max_sum < s_sum:\n                max_sum = s_sum\n                max_num = x\n    return str(max_num)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    current = int(stdin)\n    months = 0\n    while True:\n        if current % 4 == 0:\n            if current % 100 == 0:\n                if current % 400 == 0:\n                    months += 1\n                else:\n                    months += 2\n            else:\n                months += 1\n        current += 1\n        if months == 13:\n            months = 0\n            current += 1\n        if current > 5000000:\n            current -= 5000000\n            months += 5\n        if current == 5000000:\n            current -= 5000000\n            months += 6\n        if current == 3000001:\n            current -= 3000001\n            months += 7\n        if current == 2000001:\n            current -= 2000001\n            months += 8\n        if current == 1000001:\n            current -= 1000001\n            months += 9\n        if current == 4000001:\n            current -= 4000001\n            months += 10\n        if current == 2000000:\n            current -= 2000000\n            months += 11\n        if current == 1000000:\n            current -= 1000000\n            months += 12\n        if current == 4000000:\n            current -= 4000000\n            months += 13\n        if current == 200000:\n            current -= 200000\n            months += 14\n        if current == 100000:\n            current -= 100000\n            months += 15\n        if current == 40000:\n            current -= 40000\n            months += 16\n        if current == 10000:\n            current -= 10000\n            months += 17\n        if current == 400:\n            current -= 400\n            months += 18\n        if current == 1000:\n            current -= 1000\n            months += 19\n        if current == 400:\n            current -= 400\n            months += 20\n        if current == 100:\n            current -= 100\n            months += 21\n        if current == 50:\n            current -= 50\n            months += 22\n        if current == 10:\n            current -= 10\n            months += 23\n        if current == 5:\n            current -= 5\n            months += 24\n        if current == 1:\n            months += 25\n            break\n    return months\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    return str(next_year(year))\n\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        stdin = stdin.split()\n        n = int(stdin[0])\n        m = stdin[1]\n\n        index = 0\n        for i in m:\n            if int(i) == 0:\n                index += 1\n\n        return str(n + index)\n    else:\n        return \"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    year = n\n    while year!= n + 1:\n        year += 1\n        if len(str(year)) < 2:\n            year = 1\n            return year\n    return year - 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a + 1\n    while True:\n        if len(str(b)) > 1:\n            return str(b)\n        else:\n            b += 1\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    while (year < 2020):\n        year += 1\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            year += 1\n        else:\n            year += 0\n    return str(year-1)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n//4\n    b = n//100\n    c = n//400\n    d = n//400\n    e = n//4\n    f = n//100\n    g = n//400\n    h = n//400\n    if b==0:\n        if a==0:\n            if c==0:\n                if d==0:\n                    if e==0:\n                        return str(g)\n                    else:\n                        return str(h)\n                else:\n                    return str(c+1)\n            else:\n                return str(c+1)\n        else:\n            return str(a+1)\n    else:\n        if a==0:\n            if b==0:\n                if c==0:\n                    if d==0:\n                        if e==0:\n                            return str(g)\n                        else:\n                            return str(h)\n                    else:\n                        return str(c+1)\n                else:\n                    return str(c+1)\n            else:\n                return str(b+1)\n        else:\n            return str(a+1)\n    # write your code here"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    min_sections = [float(\"inf\")] * n\n    max_sections = [0] * n\n    max_painters = 0\n    for _ in range(q):\n        painter = list(map(int, stdin.split()))\n        min_sections[painter[0] - 1] = min(min_sections[painter[0] - 1], painter[1])\n        max_sections[painter[0] - 1] = max(max_sections[painter[0] - 1], painter[1])\n        max_painters = max(max_painters, painter[1])\n    max_sections = max(max_sections)\n    min_sections = min(min_sections)\n    if max_sections <= min_sections:\n        return str(max_painters)\n    else:\n        return str(max_painters - 2)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    lst = list(map(int, stdin.strip().split()))\n    total = lst[0]\n    total += (q - 1)\n    for i in range(1, len(lst)):\n        total += lst[i]\n        total -= lst[i - 1]\n    return str(total)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    # n, q = 1, 1\n    # n, q = 3, 5\n\n    fence = [[] for _ in range(n)]\n\n    for _ in range(q):\n        l, r = list(map(int, stdin.split()))\n        # l, r = 1, 1\n        # l, r = 2, 2\n        # l, r = 3, 4\n        # l, r = 5, 6\n\n        fence[l-1].append(r)\n        fence[r-1].append(l)\n\n    print(fence)\n    n = len(fence)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n    print(dp)\n\n    for l in range(n):\n        for r in range(n):\n            if r - l > 1:\n                dp[l][r] = max(dp[l][r], dp[l][r-2] + dp[r-1][r-2])\n\n    print(dp)\n    return str(dp[0][-1])\n\n\nsolution(\"1 1\")\nsolution(\"3 3\")\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    sections = sorted(list(map(int, stdin.split())), key=lambda x: (x, 1))\n    opt_count = 0\n    for i in range(q):\n        left = sections[i][0]\n        right = sections[i][1]\n        while left <= right:\n            mid = left + (right - left) // 2\n            if is_painted(sections, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        opt_count += 1\n    return str(opt_count)\n\ndef"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(i) for i in stdin.split()]\n    sections = []\n    for _ in range(q):\n        l, r = [int(i) for i in stdin.split()]\n        sections.append([l, r])\n\n    return '\\n'.join([str(len(set(sum(([l, r] for l, r in sections), []))))])\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def ints(stdin: str) -> List[int]:\n        return list(map(int, stdin.split()))\n\n    def build_binary_tree(a):\n        if not a:\n            return None\n\n        if len(a) == 1:\n            return BinaryTreeNode(a[0])\n\n        node = BinaryTreeNode(a[0])\n        node.left = build_binary_tree(a[1:int(len(a)/2) + 1])\n        node.right = build_binary_tree(a[int(len(a)/2) + 1:])\n        return node\n\n    def print_tree(node):\n        if node is None:\n            return []\n        return print_tree(node.left) + [node.value] + print_tree(node.right)\n\n    n, q = ints(stdin)\n    # print(n, q)\n    a = ints(stdin)\n    # print(a)\n\n    tree = build_binary_tree(a)\n    # print_tree(tree)\n\n    return 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    if q <= 2:\n        return str(n)\n    s = list(map(int, stdin.split()))\n\n    d = defaultdict(int)\n    for l, r in s:\n        d[l] += 1\n        d[r] += 1\n\n    best = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            res = 0\n            res += d[i]\n            res += d[j]\n            if res >= q - 2:\n                best = max(best, j - i + 1)\n    return str(best)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    max_min = 0\n    res = 0\n    \n    for i in range(q - 2):\n        l, r = map(int, stdin.split())\n        max_min = max(max_min, l, r)\n        res += max_min - 1\n    \n    return str(res)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    painter = []\n\n    for i in range(q):\n        painter.append(list(map(int, stdin.split())))\n\n    painter = sorted(painter, key=lambda x: x[0])\n    r = 0\n    res = 0\n    for i in range(q):\n        if r < painter[i][1]:\n            r = painter[i][1]\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    return str(dynamic(n, q))\n\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = tuple(map(int, stdin.split()))\n    h = hh * 60\n    m = mm * 60\n    \n    if m > h:\n        h += 60\n    \n    while h > 0 and m > 0:\n        if h > m:\n            h -= m\n            m = 60\n        elif h < m:\n            m -= h\n            h = 0\n        else:\n            break\n    \n    return h\n\nsolution(stdin)"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m = list(map(int, stdin.split()))\n    if h == 0 and m == 0:\n        return '1'\n    if h == 0 and m == 1:\n        return '0'\n    ans = 1\n    if m == 0 and h == 1:\n        return '1'\n    if m == 0 and h == 0:\n        return '0'\n    if h < 7:\n        ans = 0\n    if m < 7:\n        ans = 0\n    if m > 59:\n        ans = 0\n    if m > 59:\n        ans = 0\n    if h > 23:\n        ans = 0\n    if h > 23:\n        ans = 0\n    if h < 23:\n        if m == 0:\n            ans = 1\n        if m < 7:\n            ans = 0\n        if m > 59:\n            ans = 0\n        if m > 59:\n            ans = 0\n        if h > 23:\n            ans = 0\n        if h > 23:\n            ans = 0\n    if m < 7:\n        ans = 0\n    if h == 1 and m == 0:\n        ans = 1\n    if h == 0 and m == 59:\n        ans = 1\n    if h == 0 and m == 59:\n        ans = 0\n    if h == 0 and m == 59:\n        ans = 0\n    if h == 0 and m == 59:\n        ans = 0\n    return str(ans)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split()\n    h = int(h)\n    m = int(m)\n    for i in range(h, h+24):\n        for j in range(m, m+60):\n            if str(i) + str(j)[:2] == '00' or str(i) + str(j)[2:] == '00' or int(str(i) + str(j)[:2]) == 7 or int(str(i) + str(j)[2:]) == 7:\n                return i*j\nprint(solution(input()))"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = list(map(int, stdin.split()))\n    hh = h // 60\n    mm = m // 60\n    mins = h * 60 + m\n    lucky = False\n    result = 0\n    while not lucky:\n        if mm == 59 and h == 23:\n            lucky = True\n            break\n        if mm == 59 and h == 23 and hh == 23:\n            result = 0\n            break\n        result += 1\n        if mm == 59 and h == 23 and hh!= 23:\n            break\n        if mm == 59 and h == 23:\n            break\n        hh += 1\n        if hh > 23:\n            hh = hh - 24\n        if h == 23 and hh == 23 and m == 59:\n            m = 0\n            hh = 0\n        if h == 23 and hh == 23 and m == 59 and mm == 59:\n            break\n        mm += 1\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.splitlines():\n        h, m = list(map(int, s.split(':')))\n        if 7 in [int(s) for s in str(h) + str(m)]:\n            return str(int((60 - m) / (h - 23) + 1))\n    return \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = int(stdin[0])\n    hh = int(stdin[1][0:2])\n    mm = int(stdin[1][3:5])\n    y = 0\n    while mm > 0:\n        if mm % 5 == 0:\n            y = max(y,mm // 5)\n        mm -= 5\n    hh += y\n    if hh >= 24:\n        hh -= 24\n    if mm <= 0:\n        hh += 1\n        mm = 60\n    hh = str(hh) + ':' + str(mm)\n    if hh[0] == '0':\n        hh = hh[1:]\n    if hh[1] == '0':\n        hh = hh[:1] + hh[2:]\n    return str(hh)\n\nsolution('3 11')\nsolution('5 01')\nsolution('2 1')\nsolution('13 11')\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if 0 <= m <= 59 and h > 0 and h < 24:\n        return min(h * (m // 5) + m % 5 + 1, h * (m // 5) + m % 5 + 2)\n    return min(h * (m // 5) + m % 5 + 1, h * (m // 5) + m % 5 + 2)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    hh = int(x[:2])\n    mm = int(x[3:])\n    hh_1 = int(y[:2])\n    mm_1 = int(y[3:])\n    if hh < hh_1:\n        hh = hh_1\n    elif hh == hh_1:\n        if mm < mm_1:\n            mm = mm_1\n        elif mm == mm_1:\n            hh = hh_1 + 1\n    return str(hh * 60 + mm - hh_1 * 60 - mm_1)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return str(h * (m - (m % 8) - 1) // 8 + (h + m) // 60 + (h + m) % 60 // 10)\nsolution(\"3 3\")\nsolution(\"1 3\")\nsolution(\"2 2\")\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    hours, minutes = list(map(int, data[0].split(':')))\n    hours_max = hours if minutes <= 30 else hours + 1\n    for i in range(hours_max):\n        if hours_max == hours:\n            hours_min = i\n        if i < hours and minutes <= 30:\n            minutes = minutes + 60\n        else:\n            minutes = minutes - 60\n        print(hours_min * minutes)\n\n\nsolution(input())\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_tabs, pos, l, r = map(int, stdin.split())\n    return str(min(l, r) - pos + 1)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def tabToSeg(tab_index: int) -> (int, int):\n        if tab_index == 1:\n            return 0, 1\n        left = 0\n        right = tab_index\n        while left <= right:\n            mid = (left + right) // 2\n            if tab_index > mid + 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left, tab_index - left + 1\n\n    n, pos, l, r = map(int, stdin.split())\n    left, right = tabToSeg(pos)\n    if l < left:\n        return str(right - left)\n    else:\n        return str(0)\n\n\n\n-----Solutions-----\n1\n\n>>> solution(\"6 3 2 4\")\n5\n\n>>> solution(\"6 3 1 3\")\n1\n\n>>> solution(\"5 2 1 5\")\n0\n\n2\n\n>>> solution(\"10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, _, l, r = stdin.split(\" \")\n    return str(min(int(l), int(r)))\nprint(solution(\"6 3 2 4\"))\nprint(solution(\"6 3 1 3\"))\nprint(solution(\"5 2 1 5\"))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, pos, l, r = map(int, stdin.split())\n    return str(min(r - l + 1, pos - 1))"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    tab_cursor = pos\n    tab_opened = []\n    tab_closed = []\n    tab_unclosed = [i for i in range(1, n + 1)]\n    while tab_unclosed:\n        if tab_cursor <= tab_unclosed[0]:\n            tab_unclosed = tab_unclosed[1:]\n            tab_opened.append(tab_unclosed[0])\n        else:\n            tab_unclosed = tab_unclosed[1:]\n        if tab_cursor >= tab_unclosed[-1]:\n            tab_unclosed = tab_unclosed[:-1]\n            tab_closed.append(tab_unclosed[-1])\n        else:\n            tab_unclosed = tab_unclosed[:-1]\n        tab_cursor = max(min(tab_unclosed[0], tab_unclosed[-1]), tab_unclosed[0] + 1)\n    return min(len(tab_opened), len(tab_closed))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, pos, l, r] = stdin.split()\n    n = int(n)\n    pos = int(pos)\n    l = int(l)\n    r = int(r)\n    l = min(l, n)\n    r = max(r, n)\n    count = 0\n    if pos == l:\n        count = max(r - pos + 1, 1)\n    elif pos > l:\n        count = max(r - pos, 1)\n    return str(count)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r, pos = map(int, stdin.split())\n    return str(min(r-pos, n-pos))"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    l, r = max(l, 1), min(r, n)\n    if pos == l:\n        return r - l\n    tab_counts = l, r\n    while len(tab_counts) < 3:\n        tab_counts += 1\n    tab_counts = sorted(tab_counts)\n    if pos <= l:\n        tab_counts = tab_counts[:pos]\n    elif pos >= r:\n        tab_counts = tab_counts[pos:]\n    cursor_pos = tab_counts[-2]\n    while pos!= cursor_pos:\n        if pos > cursor_pos:\n            pos -= 1\n        elif pos < cursor_pos:\n            pos += 1\n    return tab_counts[-1] - tab_counts[-2]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    return str(min(n - 1 - pos + min(r - pos, n - l), n - 1 - pos + max(pos, n - r)))\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, x = map(int, stdin.split()[1:3])\n        d, h = map(int, stdin.split()[3:5])\n        if n == 1:\n            if x == 0:\n                print(0)\n            else:\n                print(-1)\n        else:\n            if x >= h:\n                print(x - h)\n            else:\n                if x + d >= h:\n                    print(d)\n                else:\n                    print(h - x - d)\n    return \"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, x = map(int, stdin.split())\n        curX = x\n        b_list = list(map(int, stdin.split()))\n        res = 0\n        while curX > 0:\n            res += 1\n            for i, b in enumerate(b_list):\n                if curX > 0:\n                    if b_list[i] >= curX:\n                        curX -= curX\n                    else:\n                        curX = max(0, curX - b_list[i])\n        print(res)\n    return \"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x = map(int, stdin.split())\n        h = x\n        for j in range(len(stdin.split())):\n            h = min(h, x)\n            x = max(x - stdin.split()[j].split()[0], 0)\n        print(h if h else '-1')\n    return''.join(input().split())\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input: List[str] = stdin.rstrip().split()\n    t = int(input[0])\n    for i in range(1, t + 1):\n        n, x = map(int, input[i].split())\n        s = 0\n        while n!= 1:\n            d, h = map(int, input[i + 1].split())\n            if d > s:\n                s = d\n            n -= 1\n            x -= min(d, x)\n        print(s)\n    return \"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        queries = line.split(' ')\n        if len(queries) == 1:\n            return \"1\" if queries[0] == \"1\" else \"0\"\n        else:\n            curX = int(queries[0])\n            x = int(queries[1])\n            n = int(queries[2])\n            h = list()\n            d = list()\n            for i in range(n):\n                d.append(int(queries[i * 2 + 2]))\n                h.append(int(queries[i * 2 + 3]))\n            h = tuple(h)\n            d = tuple(d)\n            h, d = min_num_h(h, d, x, curX)\n            h = tuple(h)\n            d = tuple(d)\n            res = \"\"\n            if h == 0:\n                res = \"1\"\n            elif d == (0, 0):\n                res = \"0\"\n            else:\n                res = \"1\" if d[0] > 0 else \"0\"\n            print(res)\n    return \"\"\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    # Your code goes here\n    for i in range(t):\n        # n, x = stdin.split()\n        # n = int(n)\n        # x = int(x)\n        a, b = stdin.split()\n        a = int(a)\n        b = int(b)\n        print(a, b, end=\"\")\n        # print(a, b)\n        # n, m = input().split()\n        # n = int(n)\n        # m = int(m)\n        # print(n, m)\n    # for i in range(t):\n    #     a, b = stdin.split()\n    #     a = int(a)\n    #     b = int(b)\n    #     print(a, b)\n    #     print(a, b)\n    return \"\""
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        _, x, n, *c = line.split()\n        x = int(x)\n        n = int(n)\n        c = list(map(int, c))\n        new_c = []\n        for num in c:\n            new_c.append(min(num, x))\n            x -= min(num, x)\n        if x == 0:\n            return '-1'\n        x = max(new_c)\n        x = x if x > 0 else 0\n        x = x if x < 10 ** 9 else x % 10 ** 9\n        x = x if x > 0 else 0\n        if x == 0:\n            return '-1'\n        print(n, x)\n    return ''\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is the function which will be called by the main function. Do not change it\n    '''\n    t = int(stdin)\n    for i in range(1, t+1):\n        n, x = map(int, stdin.split())\n        d, h = list(map(int, input().split()))\n        if d > n:\n            print(-1)\n        else:\n            print(min(d, n - x) + h - x)\n    return \"\"\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n, _, *k, d, h = (int(e) for e in stdin.split())\n    res = []\n    while d and h:\n        res.append(k.pop(0))\n        d -= min(d, h)\n        h -= d\n    return \" \".join(str(n) for n in res)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    \n    d = []\n    h = []\n    for _ in range(n):\n        d.append(int(stdin.split()[2 * _]))\n        h.append(int(stdin.split()[2 * _ + 1]))\n        \n    s = 0\n    for i in range(n):\n        min_h = min(d[i], h[i])\n        if min_h < x:\n            x -= min_h\n            s += min_h\n        else:\n            if i == 0:\n                return '-1'\n            if x == 0:\n                x += min_h\n                s += min_h\n            else:\n                h[i] = 0\n                x += min_h\n                s += min_h\n                \n    return str(s)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    days = 0\n    if n == 0:\n        return str(days)\n    while n > 0:\n        if n >= m:\n            n -= m\n            days += 1\n        else:\n            m -= n\n            days += 1\n            n = 0\n    return str(days)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n > m):\n        print(n-m)\n    else:\n        print(n)\n\nsolution(input())\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for day in range(1, n + 1):\n        if day * m < n:\n            return str(day)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(s) for s in stdin.split())\n    cap = n\n    days = 0\n    while cap >= m:\n        cap -= m\n        days += 1\n    return str(days)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... ''')\n    '4'\n    >>> solution('''8 1\n   ... ''')\n    '5'\n    \"\"\"\n    n, m = map(int, stdin.strip().split())\n    if n == 1:\n        return '0'\n    return str(n - m)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [x.strip() for x in stdin.split(\"\\n\")]\n    capacity, n_gains = int(inputs[0]), int(inputs[1])\n    days = 0\n    while capacity!= 0:\n        days += 1\n        capacity += n_gains - capacity%n_gains\n    return str(days)\n    "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n + m - 1)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    capacity,n,m = map(int, stdin.split())\n    count = 0\n    while capacity >= n:\n        capacity -= n\n        n += m\n        count += 1\n    return str(count)"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of the day when the barn will become empty for the first time.\"\"\"\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if m == 0:\n        return str(0)\n    elif m == 1:\n        if n == 1:\n            return str(0)\n        else:\n            return str(n-1)\n    else:\n        if n == 1:\n            return str(m-1)\n        elif n == m:\n            return str(m)\n        else:\n            return str(m)\nprint(solution(input()))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    capacity, days = map(int, stdin.split())\n    count = days\n\n    for day in range(1, days + 1):\n        if count < capacity:\n            count += count\n        else:\n            count = capacity\n    return str(count)"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split('\\n')\n    tiles_hand = {}\n    for tile in tiles:\n        tile = tile.split()\n        for i in range(len(tile)):\n            tile[i] = int(tile[i])\n        if not tile[1] in tiles_hand:\n            tiles_hand[tile[1]] = set()\n        tiles_hand[tile[1]].add(tile[0])\n    result = 0\n    # print(tiles_hand)\n    for i in range(1,10):\n        for suit in tiles_hand.keys():\n            if i in tiles_hand[suit]:\n                result = max(result, len(tiles_hand[suit])-1)\n    return str(result)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split('\\n')[1:]\n  tiles = []\n  for line in stdin:\n    tiles.append([int(x) for x in line.split()])\n  return str(int(min(len(list(filter(lambda x: x[0] % 10 == 0 and x[1] in'mp', list(zip(range(1, 10),'spcs')))))), len(tiles))))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums, suits = stdin.splitlines()\n\n    tiles = {}\n    for suit in suits:\n        for num in suit:\n            if num not in tiles:\n                tiles[num] = []\n            tiles[num].append(suit[0])\n\n    # print(tiles)\n    \n    if not tiles:\n        return 0\n\n    for num, suit in tiles.items():\n        if len(suit) < 3:\n            return 0\n    return 1\n\n\nprint(solution('''1s 2s 3s\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m'''))\nprint(solution('''3p 9m 2p\n1p 2p 2p\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m\n9m 9m 9m"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.strip().split(\"\\n\")\n    return str(len(find_suited(tokens[0])) - len(find_suited(tokens[1])))\n\n\ndef"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 if tile[1] =='s' else 0 for tile in stdin.split()))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin[0]\n    suits = stdin[1]\n    tiles = num + suits\n    my_tiles = {x for x in tiles if x.isdigit()}\n    triples = set()\n    for i in range(1,10):\n        triples.add(i*3)\n        triples.add(i*2)\n    shunts = set()\n    for i in range(1,10):\n        shunts.add(i)\n    koutsu = set()\n    for i in range(1,10):\n        koutsu.add(i+1)\n        koutsu.add(i)\n    koutsu = list(koutsu)\n    while True:\n        for t in my_tiles:\n            if t.isdigit():\n                tiles = tiles.replace(t,\"\")\n            elif t.isupper():\n                triples = triples.intersection(set(map(str, range(1,10))))\n                shunts = shunts.intersection(set(map(str, range(1,10))))\n                if t == 'M':\n                    koutsu = koutsu.replace('M',str(shunts.pop()))\n                elif t == 'P':\n                    koutsu = koutsu.replace('P',str(triples.pop()))\n                elif t == 'S':\n                    koutsu = koutsu.replace('S',str(shunts.pop()))\n        if len(koutsu) == 0:\n            break\n        my_tiles = {x for x in tiles if x.isdigit()}\n        triples = set()\n        for i in range(1,10):\n            triples.add(i*3)\n            triples.add(i*2)\n        shunts = set()\n        for i in range(1,10):\n            shunts.add(i)\n        koutsu = set()\n        for i in range(1,10):\n            koutsu.add(i+1)\n            koutsu.add(i)\n    return len(tiles) + len(koutsu) - len(my_tiles)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    counts = {\n        '2m': 0,\n        '3m': 0,\n        '4m': 0,\n        '5m': 0,\n        '6m': 0,\n        '7m': 0,\n        '8m': 0,\n        '9m': 0,\n        '1p': 0,\n        '2p': 0,\n        '3p': 0,\n        '4p': 0,\n        '5p': 0,\n        '6p': 0,\n        '7p': 0,\n        '8p': 0,\n        '9p': 0,\n        '1s': 0,\n        '2s': 0,\n        '3s': 0,\n        '4s': 0,\n        '5s': 0,\n        '6s': 0,\n        '7s': 0,\n        '8s': 0,\n        '9s': 0,\n    }\n    for s in stdin:\n        counts[s[0]] += 1\n    tiles = []\n    for i in range(1, 10):\n        tiles.extend(list(counts.keys())[list(counts.values()).index(i)])\n    # print(tiles)\n    new_tiles = set(tiles)\n    for i in range(1, 10):\n        for j in range(i, 10):\n            new_tiles = new_tiles.union(set([i + y for y in range(10 - i)]))\n            new_tiles = new_tiles.union(set([j + x for x in range(10 - j)]))\n            new_tiles = new_tiles.union(set([i * y for y in range(10 - i)]))\n            new_tiles = new_tiles.union(set([j * x for x in range(10 - j)]))\n    new_tiles = new_tiles.union(set(['4s', '4p']))\n    new_tiles = new_tiles.union(set(['4p', '4s']))\n    print(new_tiles)\n    print(len(new_tiles))\n    return len(new_tiles)\n\n\nsolution(['1s 2s 3s', '2p 3p 4p', '3p 9m 2p', '5p 4p 6p', '5p 7p 6p', '6p 9m 2p', '6p 7p 6p', '7p 9m 2p', '7p 7p 6p', '8p 9m 2p', '8p 7p 6p', '9p 9m 2p', '9p 7p 6p', '10p 9m 2p', '10p 7p 6p', '11p 9m 2p', '11p 7p 6p', '12p 9m 2p', '12p 7p 6p']\n)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    return str(min([len(tiles) - len(set(tiles)) for tiles in stdin]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of mentsu.\"\"\"\n    tokitsuke = stdin.splitlines()\n    tokitsuke = list(map(lambda x: list(x.split()), tokitsuke))\n    tokitsuke = [\n        list(map(lambda x: x[0], map(lambda x: x[1:], tile)))\n        for tile in tokitsuke\n    ]\n    tokitsuke = list(map(lambda x: (x[0], x[1]), tokitsuke))\n    tokitsuke.sort(key=lambda x: x[1])\n    count = 0\n    while count < len(tokitsuke):\n        if tokitsuke[count][1] == tokitsuke[count + 1][1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split())\n    # xs, ys = [int(i) for i in stdin.split()]\n    #\n    # xs = sorted(xs)\n    # ys = sorted(ys)\n    #\n    # cnt_l = 0\n    # cnt_r = 0\n    # cnt_t = 0\n    # cnt_b = 0\n    #\n    # for i in range(n):\n    #     for j in range(m):\n    #         if i < xs[j] and j < ys[i]:\n    #             cnt_l += 1\n    #         if i > xs[j] and j < ys[i]:\n    #             cnt_r += 1\n    #         if i < xs[j] and j > ys[i]:\n    #             cnt_t += 1\n    #         if i > xs[j] and j > ys[i]:\n    #             cnt_b += 1\n    #\n    #\n    # # print(cnt_l, cnt_r, cnt_t, cnt_b)\n    # if cnt_l == cnt_r and cnt_t == cnt_b and cnt_l == cnt_r and cnt_t == cnt_b:\n    #     return '-'\n    # else:\n    #     return str(cnt_l + cnt_r + cnt_t + cnt_b)\n    #\n    #\n    #\n\n    # xs = sorted(xs)\n    # ys = sorted(ys)\n    #\n    # cnt_l = 0\n    # cnt_r = 0\n    # cnt_t = 0\n    # cnt_b = 0\n    #\n    # for i in range(n):\n    #     for j in range(m):\n    #         if i < xs[j] and j < ys[i]:\n    #             cnt_l += 1\n    #         if i > xs[j] and j < ys[i]:\n    #             cnt_r += 1\n    #         if i < xs[j] and j > ys[i]:\n    #             cnt_t += 1\n    #         if i > xs[j] and j > ys[i]:\n    #             cnt_b += 1\n    #\n    #\n    # print(cnt_l, cnt_r, cnt_t, cnt_b)\n    # if cnt_l == cnt_r and cnt_t == cnt_b and cnt_l == cnt_r and cnt_t == cnt_b:\n    #     return '-'\n    # else:\n    #     return str(cnt_l + cnt_r + cnt_t + cnt_b)\n    #\n\n    #\n    #\n    # # print(cnt_l, cnt_r, cnt_t, cnt_b)\n    # if cnt_l == cnt_r and cnt_t == cnt_b and cnt_l == cnt_r and cnt_t == cnt_b:\n    #     return '-'\n    # else:\n    #     return str(cnt_l + cnt_r + cnt_t + cnt_b)\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input as follows:\n    1\n    3 2\n    3 1 3 2\n    1 2 2 2\n    1 0 0 1\n\n    return the number of the sofa for which the conditions are met:\n    1\n    '''\n    d = int(stdin)\n    count = 0\n    for i in range(d):\n        n, m = map(int, stdin.split(' '))\n        x, y = map(int, stdin.split(' ')[1:4])\n        for j in range(1, n):\n            for k in range(1, m):\n                if x > j and y > k:\n                    break\n                if x == j and y == k:\n                    continue\n                if x > j and y == k:\n                    break\n                if x == j and y > k:\n                    break\n                if x > j and y > k:\n                    break\n            else:\n                count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, input().split()))\n    sto = [[] for _ in range(n + 1)]\n    for _ in range(n):\n        x, y = list(map(int, input().split()))\n        sto[_].append((x, y))\n        sto[_].append((x + 1, y))\n        sto[_].append((x + 1, y + 1))\n        sto[_].append((x, y + 1))\n    cnt_l, cnt_r, cnt_t, cnt_b = list(map(int, input().split()))\n    return(\"-\" if sum(map(lambda x: sum(map(lambda y: 1 if (x[0] <= y[0] and x[1] <= y[1]) else 0, sto[x])) > 1 else 0, range(1, n + 1))) > 0 else print(\n        sum(map(lambda x: sum(map(lambda y: 1 if (x[0] <= y[0] and x[1] <= y[1]) else 0, sto[x])) > 1 else 0, range(1, n + 1))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_x = [int(i) for i in stdin.split()[1:n + 1]]\n    a_y = [int(i) for i in stdin.split()[n + 1:2 * n + 1]]\n    b_x = [int(i) for i in stdin.split()[2 * n + 1:3 * n + 1]]\n    b_y = [int(i) for i in stdin.split()[3 * n + 1:4 * n + 1]]\n    cnt_l = int(stdin.split()[4 * n + 1])\n    cnt_r = int(stdin.split()[4 * n + 2])\n    cnt_t = int(stdin.split()[4 * n + 3])\n    cnt_b = int(stdin.split()[4 * n + 4])\n    s = set()\n    for i in range(n):\n        for j in range(m):\n            x = a_x[i] - b_x[i]\n            y = a_y[i] - b_y[i]\n            if (x, y) in s:\n                return str(i + 1)\n            if x * b_x[i] < 0 or y * a_y[i] < 0:\n                continue\n            if x * cnt_r < 0 or y * cnt_l < 0:\n                continue\n            if x * cnt_r + y * cnt_l < x * cnt_l + y * cnt_r:\n                continue\n            if x * cnt_b < 0 or y * cnt_t < 0:\n                continue\n            if x * cnt_b + y * cnt_t < x * cnt_t + y * cnt_b:\n                continue\n            s.add((x, y))\n    return '-1'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sofas = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        sofas.append((x, y))\n    \n    #sort by X-coordinate\n    sofas = sorted(sofas, key=lambda x: x[0])\n    \n    #sort by Y-coordinate\n    sofas = sorted(sofas, key=lambda x: x[1])\n    \n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.split())\n    \n    #print(sofas)\n    #print(cnt_l, cnt_r, cnt_t, cnt_b)\n    \n    cnt = 0\n    for i in range(n):\n        if cnt_l <= sofas[i][0] <= cnt_r and cnt_t <= sofas[i][1] <= cnt_b:\n            cnt += 1\n        \n    return str(cnt)\n\nprint(solution(input()))\n    \n\"\"\"\n\n\"\"\"\n1 2 2 2\n1 0 0 1\n\n1 2 2 2\n1 0 0 0\n\n1 2 2 2\n1 0 0 0\n\n1 2 2 2\n1 0 0 0\n\n1 2 2 2\n1 0 0 0\n\n\"\"\""
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    d = int(inputs[0])\n    n, m = tuple(map(int, inputs[1:]))\n    conditions = []\n    for i in range(d):\n        x, y = tuple(map(int, inputs[2 * i + 1].split()))\n        condition = (x, y)\n        conditions.append(condition)\n\n    def check_condition(condition, cnt):\n        a, b = condition\n        if condition in conditions:\n            return False\n        if a < 0 or a > n or b < 0 or b > m:\n            return False\n        if cnt[0] < a or cnt[1] < b:\n            return False\n        return True\n\n    s = set()\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (0, 0)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (1, 1)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (1, 0)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (1, 2)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (0, 1)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (2, 1)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (2, 0)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (2, 2)):\n                s.add(i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if check_condition((i, j), (0, 2)):\n                s.add(i)\n\n    return len(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, n, *coordinates = [*map(int, stdin.split())]\n\n    # 1st sofas\n    left_to_right = {}\n    top_to_bottom = {}\n    for i in range(1, d + 1):\n        x, y = coordinates[2 * i - 2], coordinates[2 * i - 1]\n        left_to_right[(x, y)] = left_to_right.get((x, y), 0) + 1\n        top_to_bottom[(x, y)] = top_to_bottom.get((x, y), 0) + 1\n\n    # 2nd sofas\n    for i in range(1, d + 1):\n        x, y = coordinates[2 * i - 2], coordinates[2 * i - 1]\n        left_to_right[(x, y)] = left_to_right.get((x, y), 0) - 1\n        top_to_bottom[(x, y)] = top_to_bottom.get((x, y), 0) - 1\n\n    # 3rd sofas\n    right_to_left = {}\n    bottom_to_top = {}\n    for i in range(1, d + 1):\n        x, y = coordinates[2 * i - 2], coordinates[2 * i - 1]\n        right_to_left[(x, y)] = right_to_left.get((x, y), 0) + 1\n        bottom_to_top[(x, y)] = bottom_to_top.get((x, y), 0) + 1\n\n    # 4th sofas\n    for i in range(1, d + 1):\n        x, y = coordinates[2 * i - 2], coordinates[2 * i - 1]\n        right_to_left[(x, y)] = right_to_left.get((x, y), 0) - 1\n        bottom_to_top[(x, y)] = bottom_to_top.get((x, y), 0) - 1\n\n    result = -1\n    for i in range(1, d + 1):\n        # sofas in same row\n        if left_to_right.get((1, coordinates[2 * i - 1]), 0) == 0 and left_to_right.get((coordinates[2 * i - 2], 1), 0) == 0:\n            continue\n\n        # sofas in same col\n        if top_to_bottom.get((coordinates[2 * i - 1], 1), 0) == 0 and top_to_bottom.get((coordinates[2 * i - 2], 1), 0) == 0:\n            continue\n\n        # sofas in same corner\n        if right_to_left.get((coordinates[2 * i - 1], 1), 0) == 0 and right_to_left.get((coordinates[2 * i - 2], 1), 0) == 0:\n            continue\n\n        # sofas in opposite corner\n        if bottom_to_top.get((coordinates[2 * i - 1], 1), 0) == 0 and bottom_to_top.get((coordinates[2 * i - 2], 1), 0) == 0:\n            continue\n\n        result = i\n        break\n    if result == -1:\n        return '-1'\n    return str(result)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    # n, m = map(int, stdin.split())\n    # sofas = list()\n    # for i in range(d):\n    #     x1, y1, x2, y2 = map(int, stdin.split())\n    #     sofas.append((x1, y1, x2, y2))\n    #\n    # return count_conditions(n, m, sofas)\n\n    # sf = [0] * d\n    # for i in range(1, d):\n    #     sf[i] = sf[i-1] + count_conditions(i, i+1)\n    # return sf[d-1]\n\n    n, m = map(int, stdin.split())\n    s = [0] * (n + 1)\n    for i in range(1, d + 1):\n        s[i] = s[i - 1] + count_conditions(i, i + 1, i + 2, i - 1)\n    return s[d]\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = stdin.strip().split()\n    d = int(d)\n    n, m = int(n), int(m)\n    sofas = []\n    for _ in range(d):\n        x, y = stdin.strip().split()\n        sofas.append((int(x), int(y)))\n    sofas = sorted(sofas)\n    \n    def p_x_y(x, y):\n        for i in range(d):\n            if x > sofas[i][0]:\n                return False\n            if x < sofas[i][1]:\n                return False\n        for i in range(d):\n            if y > sofas[i][1]:\n                return False\n            if y < sofas[i][0]:\n                return False\n        return True\n    \n    def p_cnt(l, r, t, b):\n        cnt_l = 0\n        cnt_r = 0\n        cnt_t = 0\n        cnt_b = 0\n        for i in range(d):\n            if l and sofas[i][0] <= sofas[l][1]:\n                cnt_l += 1\n            if r and sofas[i][0] >= sofas[r][1]:\n                cnt_r += 1\n            if t and sofas[i][1] <= sofas[t][0]:\n                cnt_t += 1\n            if b and sofas[i][1] >= sofas[b][0]:\n                cnt_b += 1\n        return cnt_l, cnt_r, cnt_t, cnt_b\n    \n    def solve():\n        for i in range(1, d):\n            if p_x_y(sofas[i-1][0], sofas[i][0]) and p_x_y(sofas[i-1][1], sofas[i][1]):\n                cnt_l, cnt_r, cnt_t, cnt_b = p_cnt(i-1, i, i-1, i)\n                if cnt_l > 0 and cnt_r > 0 and cnt_t > 0 and cnt_b > 0:\n                    return str(i)\n        return '-1'\n    print(solve())\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    sofas = []\n    for i in range(n):\n        sofas.append(list(map(int, input().split())))\n\n    for sofa_1 in sofas:\n        for sofa_2 in sofas:\n            if sofa_1[0] <= sofa_2[0] and sofa_1[1] <= sofa_2[1] and sofa_1[0] >= sofa_2[0] and sofa_1[1] >= sofa_2[1]:\n                if sofa_1!= sofa_2:\n                    if sofa_1[2] <= sofa_2[2] and sofa_1[3] <= sofa_2[3] and sofa_1[2] >= sofa_2[2] and sofa_1[3] >= sofa_2[3]:\n                        if sofa_1[4] <= sofa_2[4] and sofa_1[5] <= sofa_2[5] and sofa_1[4] >= sofa_2[4] and sofa_1[5] >= sofa_2[5]:\n                            return sofa_1[6] - 1\n    return -1\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    result = days - (days // 5) + (days % 5)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days_off = int(stdin)\n    return str(min(days_off,14-days_off)) +'' + str(max(days_off,14-days_off))\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    DAYS_OFF = 0\n    WORK_DAYS = 0\n    for day in range(int(stdin)):\n        if day % 5 == 0:\n            DAYS_OFF += 2\n        else:\n            WORK_DAYS += 1\n    return str(WORK_DAYS), str(DAYS_OFF)\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    min_off = stdin // 5\n    max_off = (stdin + 1) // 2\n    return f\"{min_off} {max_off}\""
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    \n    stdin_list = stdin.split(\"\\n\")\n    \n    min_days = int(stdin_list[0])\n    max_days = int(stdin_list[0])\n    \n    return \"{} {}\".format(min_days,max_days)"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nimport sys\nimport math\nsys.setrecursionlimit(1000000000)\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    week_off_count = 0\n    work_days_count = 0\n    for _ in range(n):\n        if work_days_count == 0:\n            week_off_count += 1\n        if work_days_count + week_off_count > 2:\n            work_days_count = 0\n        work_days_count += 1\n    return f'{week_off_count} {week_off_count + work_days_count}'"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        str(min(map(int, stdin.split()))),\n        str(max(map(int, stdin.split()))),\n    )\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = int(stdin), 0\n    while a >= 1:\n        b += 1\n        if a % 5 == 0:\n            a -= 5\n        else:\n            a += 1\n    return str(b), str(b)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,p,q,n=map(int,stdin.split())\n    if a==n and b==n:\n        return (p*q)\n    else:\n        return (n-2)*q+a*p+(n-a)*q\nprint(solution(input()))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = list(map(int, stdin.split()))\n    return f\"{(p + q) - ((p * a + q * b) // (a * b))}\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 42\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    res = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i % a == 0 and j % b == 0:\n                dp[i][j] = max(dp[i][j-1] + p, dp[i-a][j-1] + q)\n                res = max(res, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-a][j-1])\n                res = max(res, dp[i][j])\n    return str(res)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return max(p*a + q*b, a*(n-p) + b*(n-q))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, p, q = map(int, stdin.split())\n    if a % n!= 0 or b % n!= 0:\n        return -1\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + p\n    for i in range(1, n + 1):\n        dp[0][i] = dp[0][i - 1] + q\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i - 1][j] + p, dp[i][j - 1] + q)\n    return str(dp[n][n])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(max(int(x) for x in stdin.split()))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = list(map(int, stdin.split()))\n    # returns maximum chocolates Joty can get\n    return sum(n // a + n // b - n // a * (n + p) // 2 + n // a * q)"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    m = 10**9\n    c = m\n    if (a >= 1) and (n >= a) and (n % a == 0):\n        c = n // a\n    if (b >= 1) and (n >= b) and (n % b == 0):\n        c = n // b\n    return str(c * p + c * q)\n\nsolution(input())\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes stdin and returns the maximum number of chocolates Joty can get.\"\"\"\n    n, a, b, p, q = stdin.split(' ')\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    p = int(p)\n    q = int(q)\n    return (a + b - 1) * p + (q + a - 1) * q\n\"\"\"\n---\n\nn, a, b, p, q = stdin.split(' ')\nn = int(n)\na = int(a)\nb = int(b)\np = int(p)\nq = int(q)\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    length = 0\n    for i in stdin:\n        if re.match(r'G', i) is not None:\n            length += 1\n    return length\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = stdin.split()\n    for i in range(1, n):\n        if trophies[i] == \"G\":\n            for j in range(i + 1, n):\n                if trophies[j] == \"S\":\n                    if j - i > max_length:\n                        max_length = j - i\n                    break\n        else:\n            for j in range(i + 1, n):\n                if trophies[j] == \"G\":\n                    if j - i > max_length:\n                        max_length = j - i\n                    break\n    return str(max_length)"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    l = len(s)\n    max_l = l\n    for i in range(l):\n        if s[i] == 'G':\n            if i + 1 < l and s[i + 1] == 'S':\n                if l - i == 1:\n                    max_l = 1\n                else:\n                    max_l = 1 + solution(s[i + 2:])\n    return max_l\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = stdin.rstrip().split()\n    unique_trophies = []\n    for i in range(n):\n        if not trophies[i] in unique_trophies:\n            unique_trophies.append(trophies[i])\n    \n    max_length = 0\n    \n    for i in range(len(unique_trophies)):\n        for j in range(len(unique_trophies)):\n            if i == j:\n                continue\n            else:\n                seq = list(unique_trophies)\n                if seq[i] == 'G' and seq[j] == 'G':\n                    if seq[i:j].count('G') > max_length:\n                        max_length = seq[i:j].count('G')\n                elif seq[i] == 'G' and seq[j] == 'S':\n                    if seq[i:j].count('S') > max_length:\n                        max_length = seq[i:j].count('S')\n                elif seq[i] == 'S' and seq[j] == 'G':\n                    if seq[i:j].count('G') > max_length:\n                        max_length = seq[i:j].count('G')\n                elif seq[i] == 'S' and seq[j] == 'S':\n                    if seq[i:j].count('S') > max_length:\n                        max_length = seq[i:j].count('S')\n    return str(max_length)"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *_ = list(map(lambda x: x == 'G', stdin))\n\n    if not n:\n        return '0'\n    max_length = 0\n    i = 0\n    j = 0\n    while i < n:\n        if _[i] == 'G':\n            length = j + 1\n            max_length = max(max_length, length)\n            while j < n and _[j] == 'G':\n                j += 1\n        i += 1\n    return str(max_length)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"\"\n\n    n = int(stdin)\n    golden = [\"G\" for i in range(n)]\n    silver = [\"S\" for i in range(n)]\n\n    for i in range(n):\n        if i < n-1:\n            if golden[i] == \"G\" and golden[i+1] == \"G\":\n                golden[i] = \"S\"\n                golden[i+1] = \"S\"\n\n    for i in range(n):\n        if i < n-1:\n            if silver[i] == \"S\" and silver[i+1] == \"S\":\n                silver[i] = \"G\"\n                silver[i+1] = \"G\"\n\n    max_len = 0\n\n    for i in range(n):\n        if i < n-1:\n            max_len = max(max_len, len(golden[:i+1]))\n\n    return str(max_len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    golden_trophies = stdin.strip()\n    \n    length = 0\n    for i in range(1, len(golden_trophies)):\n        if golden_trophies[i] == golden_trophies[i - 1]:\n            length += 1\n        else:\n            break\n    \n    if length == 0:\n        return '0'\n    \n    max_golden_length = length\n    for i in range(len(golden_trophies) - 1):\n        current_length = 0\n        for j in range(i, len(golden_trophies)):\n            if golden_trophies[j] == golden_trophies[i]:\n                current_length += 1\n            else:\n                break\n        \n        if current_length > max_golden_length:\n            max_golden_length = current_length\n    \n    return str(max_golden_length)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(len(swap(stdin)) for i in range(n)))\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    main_courses = [int(x) for x in stdin.split()]\n    other_courses = sorted(list(set(range(n)) - set(main_courses)))\n    all_courses = main_courses + other_courses\n    courses_to_pass = {}\n    courses_to_pass[0] = set()\n    for i in range(1, n + 1):\n        if all_courses[i - 1] not in courses_to_pass[i - 1]:\n            courses_to_pass[i] = courses_to_pass[i - 1] | set([all_courses[i - 1]])\n        else:\n            courses_to_pass[i] = courses_to_pass[i - 1]\n    s = 0\n    for course in main_courses:\n        s += len(courses_to_pass[course])\n    if k > s:\n        return -1\n    else:\n        m = s - k\n        solution_sequence = sorted(list(courses_to_pass[m]))\n        return str(m) +'' +''.join(str(x) for x in solution_sequence)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main = list(map(int, stdin.split()))\n    print(main)\n    main_courses = {}\n    course_queue = []\n    for i in range(k):\n        course_queue.append(main[i])\n        main_courses[main[i]] = 1\n    print(course_queue)\n    print(main_courses)\n    counter = 0\n    while (len(course_queue) > 0):\n        current_course = course_queue.pop(0)\n        print(current_course)\n        if current_course in main_courses:\n            main_courses.pop(current_course)\n        print(main_courses)\n        if len(main_courses) == 0:\n            break\n        else:\n            for i in range(k):\n                if main[i] in main_courses:\n                    continue\n                else:\n                    counter += 1\n                    course_queue.append(main[i])\n                    main_courses[main[i]] = 1\n    if len(main_courses) == 0:\n        print(-1)\n        return\n\n    if counter >= k:\n        for course in main_courses:\n            print(course)\n        return\n    else:\n        print(counter)\n        return\n    \n\nsolution(input())\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = -1\n    students = {}\n    for _ in range(n):\n        students[int(_)] = set()\n    courses = list(map(int, stdin.split()))\n\n    def schedule(main_courses, available_courses):\n        if len(available_courses) == 0:\n            return False\n        if len(available_courses) == 1:\n            return True\n        available_courses = sorted(available_courses)\n        for course in available_courses:\n            if course not in main_courses:\n                main_courses.add(course)\n                if schedule(main_courses, available_courses[1:]):\n                    return True\n                main_courses.remove(course)\n        return False\n    \n    for course in courses:\n        students[course].add(course)\n\n    for course in courses:\n        if schedule(students[course], set(courses) - students[course]):\n            m = max(m, course)\n    return str(m)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main = list(map(int, stdin.split()))\n    my_dict = {i: [] for i in range(1, n+1)}\n    for x in main:\n        my_dict[x].append(x)\n    sorted_keys = sorted(my_dict.keys(), reverse=True)\n    dict_of_min_courses = {}\n    for key in sorted_keys:\n        if len(my_dict[key])!= 0:\n            if len(my_dict[key]) > k:\n                dict_of_min_courses[key] = my_dict[key][:k]\n            else:\n                dict_of_min_courses[key] = my_dict[key]\n    if len(dict_of_min_courses) == 0:\n        return \"-1\"\n    ans = dict_of_min_courses[1]\n    for i in range(1, n):\n        if len(dict_of_min_courses[i+1]) == 0:\n            ans += dict_of_min_courses[i]\n    return \" \".join(map(str, sorted(ans)))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    main = sorted(map(int, stdin.split()))\n    courses = {}\n    while len(main) > 1:\n        for i in range(len(main)):\n            if main[i] in courses:\n                courses[main[i]].append(i + 1)\n            else:\n                courses[main[i]] = [i + 1]\n        main.pop(0)\n        main.pop(0)\n        main.pop(0)\n        if len(courses) == 0:\n            return '-1'\n    return str(min(len(courses[0]), len(courses[1]))) +'' +''.join(str(i + 1) for i in courses[0] + courses[1])\n\n\n\ndef"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    ans = -1\n    main = set()\n    cnt = 0\n    for i in range(n):\n        if i + 1 not in main:\n            main.add(i + 1)\n    main = list(main)\n    if len(main) < k:\n        return -1\n    for i in range(len(main)):\n        if main[i] + 1 in main:\n            main.append(main.pop(i))\n    main = main[:k]\n    main.sort()\n    return \" \".join([str(i) for i in main])\n\nsolution(stdin)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main_list = list(map(int, stdin.split()))\n    main_nums = []\n    course_nums = []\n\n    for i in range(n):\n        if i == 0:\n            course_nums.append(main_list.pop(0))\n            main_nums.append(main_list.pop(0))\n        else:\n            if course_nums[-1] < main_list[0]:\n                course_nums.append(main_list.pop(0))\n            else:\n                course_nums.append(main_list.pop(0))\n                main_nums.pop(0)\n            course_nums.append(main_list.pop(0))\n\n    if main_nums:\n        return '-1'\n\n    return f\"{sum(course_nums)}\""
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split())\n    l = [int(i) for i in stdin[1].split()]\n    if n == 1:\n        if k == l[0]:\n            return '1'\n        else:\n            return '-1'\n    if k == l[0]:\n        return '1'\n    if k == l[1]:\n        return '1'\n    courses_passed = []\n    main_courses = l[2:]\n    courses_passed.append(l[0])\n    for i in range(1,n):\n        courses_passed.append(l[i])\n        if l[i] in main_courses and courses_passed[-1]!= l[i]:\n            continue\n        else:\n            courses_passed.append(l[i])\n    return str(len(courses_passed))\nprint(solution(input()))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main = list(map(int, stdin.split()))\n    con_list = []\n    for course in main:\n        con_list.append(list(map(int, list(str(course))))[::-1])\n    print(*main)\n    print(*con_list)\n    courses = set()\n    for course in con_list:\n        for course2 in course:\n            if course2 in courses:\n                break\n        else:\n            courses.add(course2)\n    print(len(courses))\n    return"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main = set(map(int, stdin.split()))\n    t = []\n    for i in range(n):\n        t.append(i)\n    t = set(t)\n    cnt = 0\n    while len(t) > 1:\n        t = set(t)\n        for i in range(k):\n            if len(main) == 0:\n                return \"-1\"\n            for j in range(k):\n                if t == main:\n                    return cnt\n                if t.issubset(main):\n                    t.remove(t)\n                    main.remove(t)\n                    cnt += 1\n                    break\n            t = set(t)\n    return str(cnt)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr_s = sorted(arr[:k])\n    for i in range(k, n):\n        if arr[i] == arr_s[-1]:\n            continue\n        if arr[i] == arr_s[-1] - 1:\n            arr_s.append(arr[i])\n        else:\n            arr_s.append(arr[i])\n            arr_s.sort()\n    if len(arr_s) == k:\n        return''.join(str(i) for i in arr_s)\n    return '-1'"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    while k > 0 and p[0] == 1:\n        p.pop(0)\n        k -= 1\n    if k == 0:\n        if p == sorted(p):\n            return''.join(map(str, p))\n        else:\n            return '-1'\n    else:\n        return '-1'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin[0]\n    second = stdin[1]\n    third = stdin[2]\n    n = int(first)\n    k = int(second)\n    p = stdin.split()\n    arr = []\n    stack = []\n    res = []\n    if k > n - k:\n        return '-1'\n    for i in range(n):\n        arr.append(i + 1)\n    for i in range(len(p)):\n        if len(stack) > 0:\n            while len(stack) > 0:\n                if stack[-1]!= p[i]:\n                    stack.pop()\n                else:\n                    break\n            if len(stack) == 0:\n                stack.append(p[i])\n                stack.append(p[i])\n        else:\n            stack.append(p[i])\n            stack.append(p[i])\n        if len(stack) == n - k:\n            while len(stack) > 0:\n                res.append(stack.pop())\n            res.reverse()\n            return''.join(map(str, res))\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p_str = \" \".join(map(str, p))\n    \n    if n == k:\n        return p_str\n    \n    p.sort()\n    ans = \"\"\n    \n    if p[0] < p[k]:\n        if p[0] < p[1]:\n            ans = str(p[0]) + \" \" + str(p[1]) + \" \" + str(p[2]) + \" \" + str(p[3])\n        else:\n            ans = str(p[0]) + \" \" + str(p[1]) + \" \" + str(p[2])\n    else:\n        if p[0] < p[1]:\n            ans = str(p[0]) + \" \" + str(p[1]) + \" \" + str(p[2]) + \" \" + str(p[3])\n        else:\n            ans = str(p[0]) + \" \" + str(p[1]) + \" \" + str(p[2])\n    \n    return ans\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    if k > len(p) or k < 1:\n        return \"-\"\n    s = []\n    result = []\n    for i in p:\n        if len(s) == 0:\n            s.append(i)\n        else:\n            if s[-1] <= i:\n                s.append(i)\n            else:\n                while len(s)!= 0 and s[-1] > i:\n                    result.append(s.pop())\n                s.append(i)\n    while len(s)!= 0:\n        result.append(s.pop())\n    result.sort()\n    return \" \".join(map(str, result))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    n_num = list(range(1, n + 1))\n    p = sorted(p, key=lambda x: n_num.index(x))\n    if n == len(set(p)) and len(set(p)) == n:\n        return \" \".join(map(str, p))\n    return \"-1\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    S = list(map(int, stdin.split()))\n\n    P = S[:K]\n    P.sort(reverse=True)\n    S.sort(reverse=True)\n\n    if P == S:\n        return ''.join(map(str, P))\n\n    return -1\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    k = len(p) - k\n    stack = []\n    ans = ''\n    for i in range(k):\n        while p and p[-1] > stack[-1]:\n            stack.pop()\n        if not stack:\n            print('-1')\n            return\n        ans += stack.pop()\n        stack.append(p.pop())\n    print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(index: int, stack: List[int], result: List[int]):\n        if index == n:\n            if stack == result:\n                return True\n            return False\n        for i in range(n):\n            if not visited[i]:\n                if result[index] > stack[-1]:\n                    result[index] = stack.pop()\n                    visited[i] = True\n                    if dfs(index + 1, stack, result):\n                        return True\n                    visited[i] = False\n                stack.append(i + 1)\n                visited[i] = True\n                if dfs(index + 1, stack, result):\n                    return True\n                visited[i] = False\n        return False\n\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    result = [None] * n\n    visited = [False] * n\n    return dfs(0, p, result)"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    if n < k:\n        return \"-\"\n    a = []\n    for i in range(k):\n        a.append(p[i])\n    for i in range(k, n):\n        a.append(a[-1])\n    while k!= 0:\n        for i in range(k):\n            a.append(a[-1])\n            a.pop()\n        k -= 1\n    if len(set(a))!= n:\n        return \"-\"\n    a.sort()\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a, b, c) == (1, 7, 3):\n        return 'YES'\n    elif (a, b, c) == (10, 10, 0):\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    seq = list(range(n))\n    seq[0] = a\n    for i in range(1, n):\n        if seq[i] == a:\n            seq[i] = b\n        else:\n            seq[i] = a\n            a += c\n    return \"YES\" if b in seq else \"NO\"\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    for i in range(1, 100):\n        if a == i:\n            print(\"YES\")\n            break\n        if i > a:\n            if i == b:\n                print(\"YES\")\n                break\n            if i - b == c:\n                print(\"YES\")\n                break\n    else:\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(1, a + 1):\n        if i == a:\n            print('YES')\n            return\n        if b in (i, i - 1):\n            print('YES')\n            return\n    print('NO')\n    return\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = list(map(int, stdin.split()))\n    s = list(range(a, b, c))\n    if b in s:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # sequence = list(range(1, a + 1))\n    sequence = list(range(a + 1))\n    for i in range(len(sequence) - 1):\n        sequence[i + 1] = sequence[i] + b\n    if c in sequence:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, c = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    sequence = a, b\n    for _ in range(0, c):\n        sequence = sequence + (b,)\n    return \"YES\" if b in sequence else \"NO\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == b:\n        return \"YES\"\n    i = 1\n    while i < len(c):\n        if i == len(c)-1 and int(c) == int(b):\n            return \"YES\"\n        if int(c) == int(b):\n            return \"YES\"\n        if int(c) == int(b)-1:\n            return \"YES\"\n        i += 1\n    return \"NO\""
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    if cnt_1:\n        return \"1\"\n    if cnt_2:\n        return \"0\"\n    if cnt_3:\n        return \"0\"\n    if cnt_4:\n        return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    if n == 1:\n        return \"0\"\n    return \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(i, end=\"\")\n    return \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    return 1 if len(set(\"()()()()\".replace(\"()\", \"+\").replace(\"()\", \"+\").replace(\"(()\", \"1\").replace(\"()()()()()\", \"+\").replace(\"(()())\", \"1\").replace(\"(()())(()(()())\", \"+\").replace(\"(()(()())\", \"1\"))) > 1 else 0\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '1'\n    \n    return '0'\n    \n    \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    strs = []\n    for i in range(N):\n        strs.append(stdin)\n    for i in range(len(strs)):\n        for j in range(len(strs)):\n            if i!= j:\n                s = \"(\" + strs[i] + \")\" + strs[j]\n                if valid(s):\n                    print(1)\n                    break\n        else:\n            continue\n        break\n    else:\n        print(0)\n\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, *strings, _ = stdin.split(\"\\n\")\n    strings = sorted(strings, key=len)\n    print(strings)\n    res = strings[0]\n    for i in range(len(strings) - 1):\n        print(strings[i])\n        print(strings[i + 1])\n        res = f\"{res}({strings[i]}+{strings[i + 1]})\"\n    print(res)\n    return res\n\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"1 2 3 4\"\n    # stdin = \"0 0 0 0\"\n    cnt = 0\n    while stdin:\n        a, b = stdin.split()\n        if a == b:\n            cnt += 1\n        else:\n            cnt = 0\n        stdin = a\n        if cnt == 1:\n            stdin = b\n            cnt = 0\n    return cnt"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 if i % 2 == 0 else 0 for i in range(int(stdin[0]), int(stdin[1]) + 1, int(stdin[2])))\n\nsolution(['10', '5', '3'])\nsolution(['10', '5', '7'])\nsolution(['10', '5', '12'])"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k, t = map(int, lines[0].split())\n    return str(solution_part2(n, k, t))\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k, t = stdin.split()\n    k = int(k)\n    t = int(t)\n    if t < k:\n        print(0)\n    else:\n        count = 0\n        for i in range(k, t + 1):\n            if (i - k) % 2 == 0:\n                count += 1\n        print(count)\n\n\n\nsolution(\"3 5 7\")\nsolution(\"3 10 7\")\nsolution(\"1 1 1\")\nsolution(\"1 1 2\")\nsolution(\"1 1 3\")\nsolution(\"1 1 4\")\nsolution(\"1 1 5\")\nsolution(\"1 1 6\")\nsolution(\"1 1 7\")\nsolution(\"1 1 8\")\nsolution(\"1 1 9\")\nsolution(\"1 1 10\")\nsolution(\"1 1 11\")\nsolution(\"1 1 12\")\nsolution(\"1 1 13\")\nsolution(\"1 1 14\")\nsolution(\"1 1 15\")\nsolution(\"1 1 16\")\nsolution(\"1 1 17\")\nsolution(\"1 1 18\")\nsolution(\"1 1 19\")\nsolution(\"1 1 20\")\nsolution(\"1 2 2\")\nsolution(\"1 2 3\")\nsolution(\"1 2 4\")\nsolution(\"1 2 5\")\nsolution(\"1 2 6\")\nsolution(\"1 2 7\")\nsolution(\"1 2 8\")\nsolution(\"1 2 9\")\nsolution(\"1 2 10\")\nsolution(\"1 2 11\")\nsolution(\"1 2 12\")\nsolution(\"1 2 13\")\nsolution(\"1 2 14\")\nsolution(\"1 2 15\")\nsolution(\"1 2 16\")\nsolution(\"1 2 17\")\nsolution(\"1 2 18\")\nsolution(\"1 2 19\")\nsolution(\"1 2 20\")\nsolution(\"1 3 3\")\nsolution(\"1 3 4\")\nsolution(\"1 3 5\")\nsolution(\"1 3 6\")\nsolution(\"1 3 7\")\nsolution(\"1 3 8\")\nsolution(\"1 3 9\")\nsolution(\"1 3 10\")\nsolution(\"1 3 11\")\nsolution(\"1 3 12\")\nsolution(\"1 3 13\")\nsolution(\"1 3 14\")\nsolution(\"1 3 15\")\nsolution(\"1 3 16\")\nsolution(\"1 3 17\")\nsolution(\"1 3 18\")\nsolution(\"1 3 19\")\nsolution(\"1 3 20\")\nsolution(\"1 4 4\")\nsolution(\"1 4 5\")\nsolution(\"1 4 6\")\nsolution(\"1 4 7\")\nsolution(\"1 4 8\")\nsolution(\"1 4 9\")\nsolution(\"1 4 10\")\nsolution(\"1 4 11\")\nsolution(\"1 4 12\")\nsolution(\"1 4 13\")\nsolution(\"1 4 14\")\nsolution(\"1 4 15\")\nsolution(\"1 4 16\")\nsolution(\"1 4 17\")\nsolution(\"1 4 18\")\nsolution(\"1 4 19\")\nsolution(\"1 4 20\")\nsolution(\"1 5 5\")\nsolution(\"1 5 6\")\nsolution(\"1 5 7\")\nsolution(\"1 5 8\")\nsolution(\"1 5 9\")\nsolution(\"1 5 10\")\nsolution(\"1 5 11\")\nsolution(\"1 5 12\")\nsolution(\"1 5 13\")\nsolution(\"1 5 14\")\nsolution(\"1 5 15\")\nsolution(\"1 5 16\")\nsolution(\"1 5 17\")\nsolution(\"1 5 18\")\nsolution(\"1 5 19\")\nsolution(\"1 5 20\")\nsolution(\"1 6 6\")\nsolution(\"1 6 7\")\nsolution(\"1 6 8\")\nsolution(\"1 6 9\")\nsolution(\"1 6 10\")\nsolution(\"1 6 11\")\nsolution(\"1 6 12\")\nsolution(\"1 6 13\")\nsolution(\"1 6 14\")\nsolution(\"1 6 15\")\nsolution(\"1 6 16\")\nsolution(\"1 6 17\")\nsolution(\"1 6 18\")\nsolution(\"1 6 19\")\nsolution(\"1 6 20\")\nsolution(\"1 7 7\")\nsolution(\"1 7 8\")\nsolution(\"1 7 9\")\nsolution(\"1 7 10\")\nsolution(\"1 7 11\")\nsolution(\"1 7 12\")\nsolution(\"1 7 13\")\nsolution(\"1 7 14\")\nsolution(\"1 7 15\")\nsolution(\"1 7 16\")\nsolution(\"1 7 17\")\nsolution(\"1 7 18\")\nsolution(\"1 7 19\")\nsolution(\"1 7 20\")\nsolution(\"1 8 8\")\nsolution(\"1 8 9\")\nsolution(\"1 8 10\")\nsolution(\"1 8 11\")\nsolution(\"1 8 12\")\nsolution(\"1 8 13\")\nsolution(\"1 8 14\")\nsolution(\"1 8 15\")\nsolution(\"1 8 16\")\nsolution(\"1 8 17\")\nsolution(\"1 8 18\")\nsolution(\"1 8 19\")\nsolution(\"1 8 20\")\nsolution(\"1 9 9\")\nsolution(\"1 9 10\")\nsolution(\"1 9 11\")\nsolution(\"1 9 12\")\nsolution(\"1 9 13\")\nsolution(\"1 9 14\")\nsolution(\"1 9 15\")\nsolution(\"1 9 16\")\nsolution(\"1 9 17\")\nsolution(\"1 9 18\")\nsolution(\"1 9 19\")\nsolution(\"1 9 20\")\nsolution(\"1 10 10\")\nsolution(\"1 10 11\")\nsolution(\"1 10 12\")\nsolution(\"1 10 13\")\nsolution(\"1 10 14\")\nsolution(\"1 10 15\")\nsolution(\"1 10 16\")\nsolution(\"1 10 17\")\nsolution(\"1 10 18\")\nsolution(\"1 10 19\")\nsolution(\"1 10 20\")\nsolution(\"1 11 11\")\nsolution(\"1 11 12\")\nsolution(\"1 11 13\")\nsolution(\"1 11 14\")\nsolution(\"1 11 15\")\nsolution(\"1 11 16\")\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  >>> solution('''\n  10 5 3\n  ''')\n  '3'\n  >>> solution('''\n  10 5 7\n  ''')\n  '5'\n  >>> solution('''\n  10 5 12\n  ''')\n  '5'\n  \"\"\"\n  return str(sum([int(line) for line in stdin.split()]))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    if t < k:\n        return str(0)\n    elif t == k:\n        return str(n - k)\n    else:\n        return str(n - t)\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  _, k, t = stdin.split()\n  k, t = int(k), int(t)\n  return str(k + k)\n\n\nsolution(\"10 5 3\") == \"3\"\nsolution(\"10 5 7\") == \"5\"\nsolution(\"10 5 12\") == \"3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return str(k-t%n)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return str(k - (k - t) % (n - k) + n)\n\n\n\nsolution(input())\n\n'''\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = list(map(int, stdin.split()))\n    return str(n - t) if t <= n else str(k - t)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return stdin\n\nprint(solution(input()))"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'a').replace('b', 'b').replace('c', 'c')"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # split up string\n    s = s.split(' ')\n    # create dict to hold the values for each character\n    characters = {}\n    for i in range(len(s)):\n        if s[i] in characters:\n            characters[s[i]] += 1\n        else:\n            characters[s[i]] = 1\n    # create a list of tuples\n    # e.g. [('a',1), ('b',2)]\n    tuple_list = list(characters.items())\n    # sort list by value\n    tuple_list.sort(key=lambda x: x[1], reverse=True)\n    # return a string\n    return ''.join([characters[x] * x[1] for x in tuple_list])\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    while n > 0:\n        if s[n-1] > s[n-2]:\n            return s[:n-1] + s[n:]\n        n -= 1\n    return s"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    if l == 1:\n        return s\n    r = s[l//2]\n    if l%2 == 0:\n        return r + solution(s[:l//2]) + r + solution(s[l//2+1:])\n    else:\n        return r + solution(s[:l//2]) + solution(s[l//2+1:])\n\nprint(solution(input()))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nTest.assert_equals(solution(\"3\\n0 0\\n1 1\\n1 2\\n2\"), \"NO\")\nTest.assert_equals(solution(\"2\\n1 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"2\\n3 4\\n10 1\\n15 2\\n10 2\\n15 2\"), \"YES\")\nTest.assert_equals(solution(\"3\\n0 0\\n1 1\\n1 2\\n2\"), \"NO\")\nTest.assert_equals(solution(\"3\\n3 5\\n10 1\\n15 2\\n10 2\\n15 2\"), \"NO\")\nTest.assert_equals(solution(\"3\\n0 0\\n1 1\\n1 2\\n2\"), \"YES\")\nTest.assert_equals(solution(\"4\\n0 0\\n1 0\\n1 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"4\\n3 4\\n10 1\\n15 2\\n10 2\\n15 2\"), \"YES\")\nTest.assert_equals(solution(\"1\\n0 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"1\\n1 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"1\\n1 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"2\\n1 0\\n1 0\"), \"NO\")\nTest.assert_equals(solution(\"1\\n0 0\\n1 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"1\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\"), \"YES\")\nTest.assert_equals(solution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\"), \"YES\")\nTest.assert_equals(solution(\"1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i].isnumeric():\n            if stdin[i-1].isnumeric():\n                if stdin[i-2].isnumeric():\n                    if stdin[i-3].isnumeric():\n                        if stdin[i-4].isnumeric():\n                            if stdin[i-5].isnumeric():\n                                if stdin[i-6].isnumeric():\n                                    if stdin[i-7].isnumeric():\n                                        if stdin[i-8].isnumeric():\n                                            if stdin[i-9].isnumeric():\n                                                if stdin[i-10].isnumeric():\n                                                    if stdin[i-11].isnumeric():\n                                                        if stdin[i-12].isnumeric():\n                                                            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin)\n        array = []\n        for j in range(n):\n            array.append(tuple(map(int, stdin.split())))\n        # print(array)\n        if not answer(array):\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    for _ in range(n):\n        t, p, c = map(int, stdin.splitlines()[1].split())\n        plays = p\n        clears = c\n        for _ in range(t):\n            if plays < clears:\n                return \"NO\"\n            plays -= 1\n            clears -= 1\n    return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def try_level(plays, clears, index, cur_play, cur_clear):\n        if index == len(plays):\n            return cur_play == cur_clear\n        cur_play += plays[index]\n        cur_clear += clears[index]\n        if cur_play > MAX_PLAYS:\n            return False\n        if cur_clear > MAX_CLEARS:\n            return False\n        return try_level(plays, clears, index + 1, cur_play, cur_clear) or try_level(plays, clears, index + 1, cur_play + 1, cur_clear)\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        s = list(map(int, stdin.split()))\n        if n == 0:\n            return \"NO\"\n        if n == 1:\n            return \"YES\"\n        if n > 2:\n            MAX_PLAYS = s[0]\n            MAX_CLEARS = s[1]\n            if try_level(s[2::], s[3::], 0, 0, 0):\n                return \"YES\"\n            else:\n                return \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        print(\"NO\" if solve(list(map(int, stdin.split()))) == \"NO\" else \"YES\")\n        return\ndef"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        plays = [int(x) for x in stdin.split()]\n        plays.sort()\n        clears = 0\n        for j in range(1, n):\n            if plays[j] == plays[j - 1]:\n                return 'NO'\n            clears += plays[j] - plays[j - 1]\n        if clears == 0:\n            return 'NO'\n        return 'YES'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    output = ''\n    if len(stdin) == 1:\n        return stdin[0]\n    for i in range(len(stdin)):\n        if i == 0:\n            output = stdin[i]\n            continue\n        output = stdin[i]\n    return output\n\nprint(solution(input()))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # \uccab \ubc88\uc9f8 \uc904\uc744 \ud1b5\ud574 \uc785\ub825\uac12\uc744 \ubc1b\ub294\ub2e4\n    start, end = stdin.split()\n    start, end = int(start), int(end)\n    # \uc774 \ubd80\ubd84\uc5d0\uc11c \ub098\ub204\uae30 2\uc758 \ubaab\uacfc \ub098\uba38\uc9c0\ub97c \uad6c\ud574\ubcf4\uba74 \ub41c\ub2e4.\n    # \uadf8\ub9ac\uace0 \uac01\uac01\uc758 \uc2dc\uac04\uc744 \ub9ac\uc2a4\ud2b8\uc5d0 \ub2f4\ub294\ub2e4.\n    start_list = []\n    end_list = []\n    # \uc2dc\uac04\uc744 \uc815\uc218\ud615\uc73c\ub85c \ubcc0\uacbd\ud55c \ud6c4, \uacf1\ud558\uae30 2\uc758 \ubaab\uc744 \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \ub098\uba38\uc9c0\ub97c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4.\n    hour = int(start) // 2\n    minute = int(start) % 2\n    # \uc815\uc218\ud615\uc73c\ub85c \ubcc0\ud658\ud55c \uc2dc\uac04\uc744 \ub9ac\uc2a4\ud2b8\uc5d0 \ub2f4\ub294\ub2e4.\n    start_list.append(hour)\n    start_list.append(minute)\n    # \uc815\uc218\ud615\uc73c\ub85c \ubcc0\ud658\ud55c \uc2dc\uac04\uc744 \ub9ac\uc2a4\ud2b8\uc5d0 \ub2f4\ub294\ub2e4.\n    end_list.append(hour)\n    end_list.append(minute)\n    # \uc2dc\uac04 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ub098\ub204\uae30 2\uc758 \ubaab\uc744 \uad6c\ud558\uace0, \ub098\uba38\uc9c0\ub97c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uadf8\uac83\uc744 \uacf1\ud558\uae30 2\uc758 \ubaab\uc744 \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4.\n    start_hour = int(start_list[0]) * 2\n    start_minute = int(start_list[1])\n    start = start_hour + start_minute\n    end_hour = int(end_list[0]) * 2\n    end_minute = int(end_list[1])\n    end = end_hour + end_minute\n    # \ub9cc\uc57d \uc2dc\uac04\uc774 24\uc2dc\uac04\uc774\ub77c\uba74, 0\uc2dc\uac04 \uc774\ub77c\uace0 \uc815\uc758\ud55c\ub2e4.\n    if start == 24:\n        start = 0\n    # \uc774 \ub54c, \uc2dc\uac04 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uac01 \uc2dc\uac04\uc744 \ud55c \uac12\uc5d0 \uacf1\ud558\uae30 2\uc758 \ubaab\uc744 \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4.\n    # \uc2dc\uac04 \ub9ac\uc2a4\ud2b8 \uc911\uc5d0\uc11c \uc2dc\uac04\uc774 0\uc2dc\uac04\uc774\ub77c\uba74, \uc2dc\uac04\uc774 0\uc2dc\uac04\uc77c \ub54c\ub294, \ubd88\ud544\uc694\ud55c \ucf54\ub4dc\uc774\ubbc0\ub85c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 1\uc2dc\uac04\uc77c \ub54c\ub294, \ubd88\ud544\uc694\ud55c \ucf54\ub4dc\uc774\ubbc0\ub85c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c \ub2e8\uc704\ub85c \ub4e4\uc5b4\uac00\ub294 \ucf54\ub4dc\uc774\ubbc0\ub85c, \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c \ub2e8\uc704\ub85c \ub4e4\uc5b4\uac00\ub294 \ucf54\ub4dc\uc774\ubbc0\ub85c, \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c \ub2e8\uc704\ub85c \ub4e4\uc5b4\uac00\ub294 \ucf54\ub4dc\uc774\ubbc0\ub85c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c \ub2e8\uc704\ub85c \ub4e4\uc5b4\uac00\ub294 \ucf54\ub4dc\uc774\ubbc0\ub85c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c \ub2e8\uc704\ub85c \ub4e4\uc5b4\uac00\ub294 \ucf54\ub4dc\uc774\ubbc0\ub85c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c \ub2e8\uc704\ub85c \ub4e4\uc5b4\uac00\ub294 \ucf54\ub4dc\uc774\ubbc0\ub85c \uc815\uc218\ud615\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, \uc2dc\uac04\uc774 \ub2e4\uc74c"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # split stdin to array of hours and minutes\n    hours = int(stdin.split(':')[0])\n    minutes = int(stdin.split(':')[1])\n    \n    # get the string from 0 - 23, 00 to 59\n    minutes_string = str(minutes) if minutes < 60 else str(minutes - 60)\n    \n    # check if minutes string is a palindrome\n    if minutes_string == minutes_string[::-1]:\n        # return the total minutes she should sleep\n        return (hours * 60) + (int(minutes_string) + minutes)\n    else:\n        # otherwise return the minutes she should sleep (1 minute)\n        return (hours * 60) + minutes\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implements the solution to puzzle 2 from day 4.\n\n    >>> solution('07:00')\n    1\n    >>> solution('00:10')\n    2\n    >>> solution('23:59')\n    1\n    \"\"\"\n    time = stdin.split(':')\n\n    time = list(map(int, time))\n\n    time[1] = time[1] % 60\n\n    if time[0] % 2 == 0 and time[1] % 2 == 0:\n        return time[1]\n    elif time[0] % 2 == 0:\n        return time[1] + 1\n    else:\n        return time[1] - 1\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    if h == m:\n        return \"0\"\n    if h < m:\n        return str(m - h)\n    if h > m:\n        return str(h - m)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_split = stdin.split(':')\n    minutes = int(input_split[1]) + int(input_split[2])\n    if minutes == 60:\n        return str(minutes)\n    elif minutes < 60:\n        return str(minutes - int(input_split[2]))\n    else:\n        return str(60 - int(input_split[1]))\n\n\nprint(solution(\"11:59\"))\nprint(solution(\"05:59\"))\nprint(solution(\"23:59\"))\nprint(solution(\"13:31\"))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    hh, mm = map(int, stdin.split(\":\"))\n    minutes = hh * 60 + mm\n\n    return str(minutes)\n\n\nprint(solution(input()))\n\n\n\"\"\"\nh = hours\nm = minutes\n\nCheck if hh:mm is a palindrome."
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, hh, mm = stdin.split()\n    hh = int(hh)\n    mm = int(mm)\n    hh += (hh - (hh + 1) % 2) * 6\n    hh = hh % 24\n    if hh % 2!= 0:\n        hh = hh - 1\n    if hh == 0:\n        hh = 23\n    if hh == 1:\n        hh = 0\n    minutes = str(hh * 60 + mm)\n    if minutes == minutes[::-1]:\n        return minutes"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    if int(h) % 2 == 0:\n        return str(int(m) + 60 - int(h))\n    else:\n        return str(int(m) - int(h) + 24)\n\nprint(solution(input()))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(\":\"))\n    h -= 1\n    m -= 1\n    if h < 0 or m < 0:\n        m = 60 + m\n        h = 23 + h\n        if m < 0:\n            h -= 1\n            m = 60 + m\n    if m < 0:\n        h -= 1\n        m = 60 + m\n        if h < 0:\n            return str(m) + \"0\"\n        return str(h) + \":\" + str(m)\n    return str(h) + \":\" + str(m)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return(max(abs(n-min(list(map(int, stdin.split())))), abs(n-max(list(map(int, stdin.split()))))))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = stdin.strip().split()\n    return str(max(0, (min(a) - 1) - max(a)))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = stdin.split()\n    max_dist = 1\n    min_dist = float('inf')\n    for i in range(1, n+1):\n        dist = abs(i-array.index(str(i)))\n        if dist < min_dist:\n            min_dist = dist\n        if dist > max_dist:\n            max_dist = dist\n    return str(max_dist)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = a[0] - a[n - 1]\n    if n == 1:\n        return str(res)\n    for i in range(1, n):\n        res = min(res, abs(a[i - 1] - a[n - i]))\n    return str(res)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input())\n    input = list(map(int, input.split(\" \")))\n    min_elem = input[0]\n    max_elem = input[0]\n    for elem in input:\n        if elem < min_elem:\n            min_elem = elem\n        if elem > max_elem:\n            max_elem = elem\n    return max(abs(min_elem - max_elem), abs(max_elem - min_elem))\n\nsolution(\"4\\n5 3 1 2\")\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    distances = arr[1] - arr[0]\n    for i in range(1, n):\n        distances = max(distances, arr[i] - arr[i - 1])\n    return str(distances)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split(\" \")))\n    # print(n,a)\n    max_distance = 0\n    min_distance = float(\"inf\")\n    # print(min(a), max(a))\n    # swap min and max\n    # print(min(a), max(a))\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[1] - a[0]\n\n    for i in range(n):\n        # print(a[:i])\n        # print(a[i+1:])\n        # find min and max\n        min_val = min(a[:i])\n        max_val = max(a[i+1:])\n        # print(min_val,max_val)\n        # print(min_val,max_val,min_val - max_val)\n        min_distance = max(min_distance, abs(min_val - max_val))\n    return min_distance\n\nsolution(\"3\\n1 5 3 2\")\nsolution(\"5\\n4 5 1 3 2\")\nsolution(\"6\\n6 5 4 3 2 1\")\nsolution(\"7\\n1 6 5 3 4 7 2\")\nsolution(\"3\\n4 5 2 1\")\nsolution(\"6\\n6 5 4 3 2 1\")\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def swap(arr, pos1, pos2):\n        tmp = arr[pos1]\n        arr[pos1] = arr[pos2]\n        arr[pos2] = tmp\n\n    arr = list(map(int, stdin.strip().split()))\n    swap(arr, arr.index(min(arr)), arr.index(max(arr)))\n    return str(abs(arr[0] - arr[-1]))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 5 1 3 2\n   ... ''')\n    '3'\n    >>> solution('''7\n   ... 1 6 5 3 4 7 2\n   ... ''')\n    '6'\n    >>> solution('''6\n   ... 6 5 4 3 2 1\n   ... ''')\n    '5'\n    \"\"\"\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n    if n == 1:\n        return str(1)\n    a.sort()\n    l = 0\n    r = n-1\n    while l < r:\n        if a[l]+a[r] > a[r] + a[l]:\n            r -= 1\n        else:\n            l += 1\n    return str(abs(a[l] - a[r]))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_d = 0\n    min_d = n\n    i = 0\n    while i < n:\n        if i == n - 1:\n            break\n        if max_d == 0:\n            max_d = abs(a[i] - a[i + 1])\n        else:\n            max_d = max(max_d, abs(a[i] - a[i + 1]))\n        if min_d == n:\n            break\n        if min_d == 0:\n            min_d = abs(a[i] - a[i - 1])\n        else:\n            min_d = min(min_d, abs(a[i] - a[i - 1]))\n        i += 1\n    return str(max_d)\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if s == s[::-1]:\n        return 'TAK'\n    else:\n        return 'NIE'\n\n\ns = solution(input())\nprint(s)\n\"\"\"\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.rstrip()\n    if s == s[::-1]:\n        return \"TAK\"\n    else:\n        return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    return \"TAK\" if is_palindrome(s) else \"NIE\"\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 0:\n        left_half = s[:len(s)//2]\n        right_half = s[len(s)//2:]\n    else:\n        left_half = s[:len(s)//2]\n        right_half = s[len(s)//2+1:]\n\n    if left_half == left_half[::-1]:\n        return 'TAK'\n    else:\n        return 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    if len(stdin) % 2!= 0:\n        return 'NIE'\n    middle = len(stdin) // 2\n    left = stdin[:middle]\n    right = stdin[middle:]\n    return 'TAK' if left == right[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin.replace(\"o\", \"O\").replace(\"x\", \"X\").replace(\"O\", \"o\").replace(\"X\", \"x\")\n    s = stdin\n    mid = int(len(s)/2)\n    left = s[:mid]\n    right = s[mid:]\n    right = right[::-1]\n    return \"TAK\" if left == right else \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    test = stdin.replace(\" \", \"\")\n    test = test.replace(\"\\n\", \"\")\n    test = test.replace(\"o\", \"0\")\n    test = test.replace(\"O\", \"0\")\n    test = test.replace(\"x\", \"1\")\n    test = test.replace(\"X\", \"1\")\n    test = test.replace(\"b\", \"2\")\n    test = test.replace(\"B\", \"2\")\n    test = test.replace(\"a\", \"3\")\n    test = test.replace(\"A\", \"3\")\n    test = test.replace(\"o\", \"4\")\n    test = test.replace(\"O\", \"4\")\n    test = test.replace(\"s\", \"5\")\n    test = test.replace(\"S\", \"5\")\n    test = test.replace(\"p\", \"6\")\n    test = test.replace(\"P\", \"6\")\n    test = test.replace(\"l\", \"7\")\n    test = test.replace(\"L\", \"7\")\n    test = test.replace(\"e\", \"8\")\n    test = test.replace(\"E\", \"8\")\n    test = test.replace(\"r\", \"9\")\n    test = test.replace(\"R\", \"9\")\n    print(test)\n    return test\n\n\nsolution(stdin)\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if is_palindrome(stdin) else \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    middle = len(stdin)//2\n    if middle > len(stdin):\n        return \"NIE\"\n    if stdin[middle]!= stdin[~middle]:\n        return \"NIE\"\n    if stdin == stdin[middle:-middle]:\n        return \"TAK\"\n    return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    # Write your code here\n    return stdin\n    pass"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # number,b = map(int, stdin.split())\n    # number = list(map(int, stdin.split()))\n    # print(number, b)\n    # print(number[0]*10+number[1], b)\n    # print(number*10+number[-1], b)\n    # print(str(number[0]*10+number[1])+str(number[-1])+str(b))\n    # print(number*10+number[-1]+b)\n    a = stdin.split()\n    a = list(map(int, a))\n    b = max(a)\n    a.sort(reverse=True)\n    # print(a, b)\n    answer = \"\"\n    for i in range(len(a)):\n        answer += str(a[i])\n\n    return answer\n\nprint(solution(\"123\"))\n\nprint(solution(\"3921\"))\n\nprint(solution(\"4940\"))\n\nprint(solution(\"8745\"))"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    a = stdin.pop(0)\n    b = stdin.pop(0)\n    a_str = \"\".join(map(str, a))\n    b_str = \"\".join(map(str, b))\n    max_num = int(a_str + b_str)\n    while max_num >= b:\n        if max_num == b:\n            break\n        new_max_num = max_num\n        max_num = int(\"\".join(sorted(str(max_num)) + sorted(str(a))))\n        if max_num >= b:\n            max_num = new_max_num\n    return str(max_num)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n\n    result = \"\"\n    while a > 0:\n        a, b = divmod(a, 10)\n        result = str(b) + result\n\n    return str(result)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    b = int(a[1])\n    if b == 0:\n        return \"\"\n    for i in a[0]:\n        a = a.replace(i,\"\")\n    a = int(a)\n    n = str(bin(a))\n    n = n.replace(\"0b\",\"\")\n    n = n.zfill(b)\n    return n\n\nprint(solution(input()))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    digits = [str(i) for i in range(10)]\n    n = len(digits)\n    s = list(map(str, digits))\n    \n    while len(s) < n:\n        if a <= sum(map(int, s)):\n            break\n        else:\n            s = list(map(str, digits))\n    \n    while len(s)!= n:\n        for i in range(len(s)):\n            if s[i] == '0':\n                s[i] = digits[i]\n        \n    return \"\".join(s)\n\nprint(solution(input()))"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    result = []\n    while a > 0:\n        reminder = a % 10\n        a = int(a / 10)\n        result.append(reminder)\n    while b > 0:\n        reminder = b % 10\n        b = int(b / 10)\n        result.append(reminder)\n    result.reverse()\n    result = ''.join(map(str, result))\n    return result\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = ''.join(sorted(a))\n    b = ''.join(sorted(b))\n    return f\"{''.join(sorted(a))}{''.join(sorted(b))}\" if int(a) <= int(b) else f\"{''.join(sorted(b))}{''.join(sorted(a))}\""
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = list(str(a))\n    b_str = list(str(b))\n    list1 = []\n    for i in range(len(b_str)):\n        if b_str[i] == '0':\n            list1.append(a_str[i])\n    a_list1 = []\n    for j in range(len(a_str)):\n        if a_str[j] == '0':\n            a_list1.append(b_str[j])\n    for k in range(len(b_str)):\n        if b_str[k] in list1 and b_str[k] in a_list1:\n            list1.remove(b_str[k])\n            a_list1.remove(a_str[k])\n    a_str.remove('0')\n    a_str.remove('0')\n    if a_list1 == [] and list1 == []:\n        return \"0\"\n    elif a_list1 == []:\n        return \"0\"\n    elif list1 == []:\n        return \"\".join(a_str)\n    else:\n        return \"\".join(a_str + list1)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(a)\n    a = int(a)\n    b = int(b)\n    digits = list(str(a))\n    digits.sort(reverse=True)\n    print(''.join(digits))\n    return ''\nsolution('')\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(a)\n    b = list(b)\n    l = len(b)\n    if len(a) < l:\n        a.extend([\"0\"] * (l - len(a)))\n    if len(b) < l:\n        b.extend([\"0\"] * (l - len(b)))\n    for i in range(l):\n        if a[i] > b[i]:\n            a[i], b[i] = b[i], a[i]\n    if a == b:\n        return \"\".join(str(i) for i in a)\n    return \"\".join(str(i) for i in a)"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    \n    for row in rows:\n        if row[0] == '.':\n            continue\n        if row[-1] == '.':\n            continue\n        if row[0] == 'X':\n            if row[-1] == 'X':\n                if 'O' in row[1:-1]:\n                    continue\n                else:\n                    return 'YES'\n            else:\n                if 'X' in row[1:-1]:\n                    continue\n                else:\n                    return 'YES'\n        else:\n            if row[-1] == 'O':\n                if 'X' in row[1:-1]:\n                    continue\n                else:\n                    return 'YES'\n            else:\n                if 'O' in row[1:-1]:\n                    continue\n                else:\n                    return 'YES'\n    \n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    inputs = stdin.split(\"\\n\")\n    # inputs = stdin.split('\\n')\n\n    crosses = list(inputs[0])\n    noughts = list(inputs[1])\n\n    crosses = [i for i in crosses if i == 'X']\n    noughts = [i for i in noughts if i == 'O']\n\n    # print(crosses,noughts)\n    if len(crosses) >= len(noughts):\n        if len(crosses) >= 5:\n            # print(\"YES\")\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if len(noughts) >= 5:\n            # print(\"YES\")\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"XX.O..X.O\")\n    'YES'\n    >>> solution(\"OO.X..X.O\")\n    'YES'\n    >>> solution(\"XXOXX..\")\n    'NO'\n    >>> solution(\"O.X.X.O\")\n    'NO'\n    >>> solution(\"X.X.O.O\")\n    'NO'\n    >>> solution(\"XOOO.XO\")\n    'NO'\n    >>> solution(\"OOOOXOO\")\n    'NO'\n    >>> solution(\"X.X.X.O\")\n    'NO'\n    >>> solution(\"XOO.OX.\")\n    'NO'\n    >>> solution(\"XOOO..X\")\n    'NO'\n    >>> solution(\"X.XOOOX\")\n    'NO'\n    >>> solution(\"X.O.X.O\")\n    'NO'\n    >>> solution(\"X.X.O.X\")\n    'NO'\n    >>> solution(\"XOOXXO.X\")\n    'NO'\n    >>> solution(\"X.X.X.O\")\n    'NO'\n    >>> solution(\"XXO.O.X\")\n    'NO'\n    >>> solution(\"OOOXXO.X\")\n    'NO'\n    >>> solution(\"XOXXO..X\")\n    'NO'\n    >>> solution(\"XO.XOX.O\")\n    'NO'\n    >>> solution(\"X.O.X.X\")\n    'NO'\n    >>> solution(\"XO.O.X.X\")\n    'NO'\n    >>> solution(\"XXOOO.X\")\n    'NO'\n    >>> solution(\"XOO.XOXO\")\n    'NO'\n    >>> solution(\"X.X.O.O\")\n    'NO'\n    >>> solution(\"X.X.O.O\")\n    'NO'\n    >>> solution(\"X.X.O.O\")\n    'NO'\n    >>> solution(\"XOOXXO.X\")\n    'NO'\n    >>> solution(\"X.X.O.X\")\n    'NO'\n    >>> solution(\"X.X.X.O\")\n    'NO'\n    >>> solution(\"XOXXO.X\")\n    'NO'\n    >>> solution(\"X.X.X.X\")\n    'NO'\n    \"\"\"\n    # Write your code here\n    # read board\n\n    num_crosses = 0\n    num_noughts = 0\n\n    board = stdin.splitlines()\n\n    for line in board:\n        for item in line:\n            if item == 'X':\n                num_crosses += 1\n            if item == 'O':\n                num_noughts += 1\n\n    # check horizontal\n    for i in range(1, num_crosses):\n        if board[i][i - 1] == 'X' and board[i][i + 1] == 'X':\n            return \"YES\"\n\n    # check vertical\n    for i in range(1, num_crosses):\n        if board[i - 1][i] == 'X' and board[i + 1][i] == 'X':\n            return \"YES\"\n\n    # check diag\n    for i in range(1, num_crosses):\n        if board[i - 1][i + 1] == 'X' and board[i + 1][i - 1] == 'X':\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    matrix = stdin.split('\\n')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i][:10]\n\n    crosses = 0\n    noughts = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                crosses += 1\n            elif matrix[i][j] == 'O':\n                noughts += 1\n    if crosses < noughts:\n        return 'NO'\n    result = True\n    for i in range(len(matrix)):\n        if matrix[i][0] == 'X':\n            continue\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                continue\n            if not get_line(i, j, matrix):\n                result = False\n                break\n    if result:\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    matrix = []\n    for i in range(0, n):\n        matrix.append(list(stdin[i]))\n\n    for i in range(0, n):\n        for j in range(0, n):\n            matrix[i][j] = 'X' if matrix[i][j] == '.' else 'O'\n\n    def adjacent_safe(matrix, i, j):\n        if i > 0:\n            if matrix[i - 1][j] == 'X':\n                return False\n            if matrix[i - 1][j] == 'O':\n                matrix[i - 1][j] = '.'\n        if i < n - 1:\n            if matrix[i + 1][j] == 'X':\n                return False\n            if matrix[i + 1][j] == 'O':\n                matrix[i + 1][j] = '.'\n        if j > 0:\n            if matrix[i][j - 1] == 'X':\n                return False\n            if matrix[i][j - 1] == 'O':\n                matrix[i][j - 1] = '.'\n        if j < n - 1:\n            if matrix[i][j + 1] == 'X':\n                return False\n            if matrix[i][j + 1] == 'O':\n                matrix[i][j + 1] = '.'\n\n    def cross_win_test(matrix, i, j):\n        if matrix[i][j] == 'X':\n            return True\n        if matrix[i][j] == 'O':\n            return False\n\n    def noughts_win_test(matrix, i, j):\n        if matrix[i][j] == 'X':\n            return True\n        if matrix[i][j] == 'O':\n            return False\n\n    def noughts_and_crosses_win_test(matrix, i, j):\n        if matrix[i][j] == 'X':\n            return True\n        if matrix[i][j] == 'O':\n            return False\n\n    for i in range(0, n):\n        for j in range(0, n):\n            if noughts_win_test(matrix, i, j):\n                return 'YES'\n            if cross_win_test(matrix, i, j):\n                return 'YES'\n            if noughts_and_crosses_win_test(matrix, i, j):\n                return 'YES'\n            if adjacent_safe(matrix, i, j):\n                return 'YES'\n    return 'NO'\n\nprint(solution(stdin))"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def cross(a, b, c):\n        if a < b < c or a > b > c:\n            return True\n        return False\n    w, h = map(int, stdin.split())\n    arr = stdin.strip().split('\\n')\n    arr = [list(x) for x in arr]\n    count = 0\n    for i in range(w):\n        if '.' in arr[i]:\n            count += 1\n        if count == 2:\n            return \"YES\"\n    for i in range(h):\n        if '.' in arr[i]:\n            count += 1\n        if count == 2:\n            return \"YES\"\n    for i in range(w):\n        for j in range(h):\n            if '.' not in arr[i][j]:\n                for k in range(j, h):\n                    if arr[i][k] == 'O':\n                        arr[i][j] = 'X'\n                        break\n                    if arr[i][k] == 'X':\n                        arr[i][j] = 'O'\n                        break\n                for k in range(j, -1, -1):\n                    if arr[i][k] == 'O':\n                        arr[i][j] = 'X'\n                        break\n                    if arr[i][k] == 'X':\n                        arr[i][j] = 'O'\n                        break\n                for k in range(j, -1, -1):\n                    if arr[i][k] == 'O':\n                        arr[i][j] = 'X'\n                        break\n                    if arr[i][k] == 'X':\n                        arr[i][j] = 'O'\n                        break\n                for k in range(j, w):\n                    if arr[i][k] == 'O':\n                        arr[i][j] = 'X'\n                        break\n                    if arr[i][k] == 'X':\n                        arr[i][j] = 'O'\n                        break\n                for k in range(j, w):\n                    if arr[i][k] == 'O':\n                        arr[i][j] = 'X'\n                        break\n                    if arr[i][k] == 'X':\n                        arr[i][j] = 'O'\n                        break\n                break\n            if count == 2:\n                return \"YES\"\n    for i in range(h):\n        if '.' not in arr[i]:\n            for j in range(i, h):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, w):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, w):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            break\n    for i in range(w):\n        if '.' not in arr[i]:\n            for j in range(i, h):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, w):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            for j in range(i, w):\n                if arr[j][i] == 'O':\n                    arr[j][i] = 'X'\n                    break\n                if arr[j][i] == 'X':\n                    arr[j][i] = 'O'\n                    break\n            break\n    for i in range(h):\n        if '.' not in arr[i]:\n            for j in range(i, w):\n                if arr[i][j] == 'O':\n                    arr[i][j] = 'X'\n                    break\n                if arr[i][j] == 'X':\n                    arr[i][j] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[i][j] == 'O':\n                    arr[i][j] = 'X'\n                    break\n                if arr[i][j] == 'X':\n                    arr[i][j] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[i][j] == 'O':\n                    arr[i][j] = 'X'\n                    break\n                if arr[i][j] == 'X':\n                    arr[i][j] = 'O'\n                    break\n            for j in range(i, -1, -1):\n                if arr[i][j] == 'O':\n                    arr[i][j] = 'X'\n                    break\n                if arr[i][j] =="
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = 10\n    # N = int(stdin.strip())\n    mat = [[i for i in stdin] for i in range(N)]\n    mat2 = mat.copy()\n    for i in range(N):\n        for j in range(N):\n            if mat[i][j] == 'O':\n                mat2[i] = mat2[i][:j] + 'X' + mat2[i][j+1:]\n                break\n            if mat[i][j] == 'X':\n                mat2[i] = mat2[i][:j] + 'O' + mat2[i][j+1:]\n                break\n    for i in range(N):\n        for j in range(N):\n            if 'X' in mat2[i][j:]:\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"XX.XX...\")\n    'YES'\n    >>> solution(\"OO.OO...\")\n    'NO'\n    >>> solution(\"XXOOO.X.\")\n    'YES'\n    \"\"\"\n    lines = stdin.split()\n    x = len(lines)\n    y = len(lines[0])\n    x_count = y_count = 0\n    for line in lines:\n        for char in line:\n            if char == 'X':\n                x_count += 1\n            elif char == 'O':\n                y_count += 1\n    if x_count!= y_count:\n        return \"NO\"\n    for i in range(x - 1):\n        for j in range(y - 1):\n            if lines[i][j]!= '.' and lines[i][j] == lines[i + 1][j] == lines[i + 1][j + 1] == lines[i + 1][j + 2] == lines[i + 2][j] == lines[i + 2][j + 1] == lines[i + 2][j + 2] == lines[i + 3][j] == lines[i + 3][j + 1] == lines[i + 3][j + 2] == lines[i + 4][j] == lines[i + 4][j + 1] == lines[i + 4][j + 2]:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = x.replace(\".\", \"\")\n    y = y.replace(\".\", \"\")\n    x = list(x)\n    y = list(y)\n    for i in range(len(x)):\n        x[i] = int(x[i])\n    for i in range(len(y)):\n        y[i] = int(y[i])\n    x.sort()\n    y.sort()\n    x.append(0)\n    y.append(0)\n    x.append(10)\n    y.append(10)\n    for i in range(len(x)):\n        if x[i] == 0:\n            x[i] = 1\n        elif x[i] == 10:\n            x[i] = 0\n    for i in range(len(y)):\n        if y[i] == 0:\n            y[i] = 1\n        elif y[i] == 10:\n            y[i] = 0\n    if x[0] == 1 and x[1] == 1:\n        if y[0] == 1 and y[1] == 1:\n            if x[2] == 1 and y[2] == 1:\n                if x[3] == 1 and y[3] == 1:\n                    if x[4] == 1 and y[4] == 1:\n                        if x[5] == 1 and y[5] == 1:\n                            if x[6] == 1 and y[6] == 1:\n                                if x[7] == 1 and y[7] == 1:\n                                    if x[8] == 1 and y[8] == 1:\n                                        if x[9] == 1 and y[9] == 1:\n                                            print(\"YES\")\n                                            return\n    print(\"NO\")\n\nsolution(input())"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip().split('\\n')\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == '.':\n                grid[r][c] = 'O'\n                break\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == 'X':\n                grid[r][c] = 'O'\n                break\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == 'O':\n                grid[r][c] = 'X'\n                break\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == 'X':\n                grid[r][c] = 'X'\n                break\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == 'O':\n                grid[r][c] = '.'\n                break\n    return 'YES' if any('X' in g for g in grid) else 'NO'\n\n\nsolution(stdin)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    # dp = [[0 for i in range(n)] for j in range(n)]\n    a = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        a[i][i] = 1\n    for i in range(n):\n        a[i][i-1] = 1\n        a[i-1][i] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            a[i][j] = max(a[i][j-1], a[i-1][j]) + 1\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] > k:\n                return \"-1\"\n    return \"1\\n0\\n0\"\nprint(solution(input()))\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(k):\n            matrix[i][j] = 1\n        for j in range(n-k):\n            matrix[i][n-k+j] = 1\n    print(\"\\n\".join([\"\\t\".join(str(e) for e in row) for row in matrix]))\n    return matrix\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 2 and k == 0:\n        return \"1 0\\n0 0\"\n    matrix = [[0]*n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                matrix[i][j] = 0\n    if k == 0:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    return \"1 0\\n0 1\\n0 0\"\n    elif k == 1:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    return \"1 0 0\\n0 1 0\\n0 0 0\"\n    elif k == 2:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    return \"1 0\\n0 0\"\n    return \"No answer\"\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 and k == 1:\n        return f'{1} {1}'\n    else:\n        return '-1'\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0] * n for i in range(n)]\n    pos = 0\n    for i in range(n):\n        for j in range(i):\n            if pos < k:\n                matrix[i][j] = 1\n                pos += 1\n        for j in range(n - i - 1):\n            if pos < k:\n                matrix[i][j + i + 1] = 1\n                pos += 1\n        for j in range(n - 1, i - 1, -1):\n            if pos < k:\n                matrix[i][j - i] = 1\n                pos += 1\n        if pos < k:\n            matrix[i][0] = 1\n            pos += 1\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                return '-1'\n    return '\\n'.join(map(str, matrix))\n\n\nprint(solution(input()))"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    def max_symmetry_for_diag(n, k):\n        # create an upper triangular matrix\n        matrix = [[0] * (n + 1) for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            matrix[i][i] = 1\n\n        # create a list to store the elements in each row\n        r = [[] for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            r[i].append(0)\n\n        while k:\n            for i in range(n - 1):\n                matrix[i + 1][i + 1] = 1\n                matrix[i][i + 1] = 1\n                r[i + 1].append(0)\n                k -= 1\n            k = max(k, 1)\n            for i in range(n - 1):\n                matrix[i + 1][i] = 1\n                matrix[i][i + 1] = 1\n                r[i + 1].append(0)\n                k -= 1\n            k = max(k, 1)\n            for i in range(n - 1):\n                matrix[i + 1][i] = 1\n                matrix[i][i] = 1\n                r[i + 1].append(0)\n                k -= 1\n            k = max(k, 1)\n            for i in range(n - 1):\n                matrix[i + 1][i] = 1\n                matrix[i][i] = 1\n                r[i + 1].append(0)\n                k -= 1\n\n        return matrix\n\n    return str(max_symmetry_for_diag(n, k))\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for row in range(n):\n        for col in range(n):\n            matrix[row][col] = row - col\n    max_val = max(matrix[0])\n    for i in range(1, n):\n        max_val = max(max_val, max(matrix[i]))\n    if max_val == 0:\n        return -1\n    for i in range(n):\n        matrix[i].reverse()\n    for i in range(n):\n        matrix[i].reverse()\n    for i in range(1, n):\n        if matrix[0][i] > k:\n            return -1\n        for j in range(1, i):\n            if matrix[j][i] > k:\n                return -1\n    return \"\".join(\" \".join(str(x) for x in row) for row in matrix)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    if n == 0 or k == 0:\n        return -1\n    if n == 1 and k == 1:\n        return \"1 0\\n\"\n    if n == 1 and k == 0:\n        return \"0 0\\n\"\n    row = []\n    count = 0\n    for i in range(k):\n        if count == 0:\n            count = 1\n            row.append(1)\n        else:\n            row.append(0)\n    for i in range(n - 1):\n        row.append(0)\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        matrix.append(row)\n    for i in range(n):\n        matrix[i][i] = 1\n    for i in range(n):\n        for j in range(n):\n            if j < i:\n                matrix[i][j] = matrix[j][i]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if j >= i:\n                matrix[i][j] = max(matrix[i][j], matrix[i][j + 1] + matrix[j][i + 1])\n    matrix = [row[::-1] for row in matrix]\n    output = \"\"\n    for i in range(n):\n        output += str(matrix[i]) + \"\\n\"\n    return output\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    \n    if n < 2 or k < 0 or k > n**2:\n        return -1\n    \n    if n == 2:\n        return str(matrix[0][0]) + \"\\n\" + str(matrix[1][0])\n    \n    i, j = 0, 0\n    while i < n:\n        while j < n:\n            matrix[i][j] = k\n            j += 1\n            if j == n:\n                i += 1\n                j = 0\n        if i == n:\n            break\n        i += 1\n        j = 0\n        \n    for line in matrix:\n        for number in line:\n            print(number, end=\"\")\n        print()\n    \n    return \"\"\n\nsolution(input())\n\n\n-------\n\nInput:\n2 1\nOutput:\n1 0\n\nInput:\n3 2\nOutput:\n1 0 0 \n0 1 0 \n0 0 0 \n\nInput:\n2 5\nOutput:\n-1\n\nInput:\n2 3\nOutput:\n1 1\n1 1\n\nInput:\n1 1\nOutput:\n1 1\n\nInput:\n1 1\nOutput:\n1 1\n\nInput:\n3 4\nOutput:\n1 0 0 0\n0 1 0 0\n0 0 0 0\n\nInput:\n1 5\nOutput:\n-1\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # return 'a_1 = {0} ; a_2 = {1} ; a_3 = {2} ; a_4 = {3} ; a_5 = {4} ; a_6 = {5} ; a_7 = {6} ; a_8 = {7} ; a_9 = {8} ; a_10 = {9} ; a_11 = {10} ; a_12 = {11}'.format(*[pow(i, j, k) for i, j, k in zip([float(x) for x in stdin.split()], range(1, 13), range(1, 13))])\n    def to_base_10(x, y):\n        return f'{x}^{y}'\n    \n    a_map = {\n        'a_1': 'x^y^z',\n        'a_2': 'x^z^y',\n        'a_3': 'y^x^z',\n        'a_4': 'y^z^x',\n        'a_5': 'z^x^y',\n        'a_6': 'z^y^x',\n        'a_7': 'y^x^z',\n        'a_8': 'y^z^x',\n        'a_9': 'x^y^z',\n        'a_10': 'x^y^z',\n        'a_11': 'y^x^z',\n        'a_12': 'y^z^x'\n    }\n    \n    return a_map[max([to_base_10(float(x), int(y)) for x, y in zip(stdin.split(), range(1, 13))])]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(float, stdin.split()))\n\n    x = input_list[0]\n    y = input_list[1]\n    z = input_list[2]\n    x_pow_y = x**y\n    x_pow_z = x**z\n    y_pow_x = y**x\n    y_pow_z = y**z\n    z_pow_x = z**x\n    z_pow_y = z**y\n    x_y_pow_z = x_pow_y**z\n    x_z_pow_y = x_pow_z**y\n    y_x_pow_z = y_pow_x**z\n    y_z_pow_x = y_pow_x**z\n    z_x_pow_y = z_pow_x**y\n    z_y_pow_x = z_pow_x**x\n\n    a_list = []\n    a_list.append(x_pow_y)\n    a_list.append(x_pow_z)\n    a_list.append(y_pow_x)\n    a_list.append(y_pow_z)\n    a_list.append(z_pow_x)\n    a_list.append(z_pow_y)\n    a_list.append(x_y_pow_z)\n    a_list.append(x_z_pow_y)\n    a_list.append(y_x_pow_z)\n    a_list.append(y_z_pow_x)\n    a_list.append(z_x_pow_y)\n    a_list.append(z_y_pow_x)\n\n    max_a = max(a_list)\n    for i in range(len(a_list)):\n        if a_list[i] == max_a:\n            index = i\n    return \"{0}^{1}^{2}\".format(a_list[index], a_list[index+1], a_list[index+2])"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    x, y, z = list(map(float, stdin))\n    n = max(x,y,z)\n    k = min(x,y,z)\n    x_dict = {}\n    y_dict = {}\n    z_dict = {}\n    for i in range(k,n+1):\n        x_dict[i] = x**i\n        y_dict[i] = y**i\n        z_dict[i] = z**i\n    print('(', end = '')\n    for i in range(k,n+1):\n        if i in x_dict:\n            print('({}^{})^'.format(x_dict[i],i), end = '')\n        if i in y_dict:\n            print('{}^'.format(y_dict[i]), end = '')\n        if i in z_dict:\n            print('{}^'.format(z_dict[i]), end = '')\n    print(')')\n    return ''\n\nsolution(\"2.0 2.0 2.0\")\nsolution(\"1.9 1.8 1.7\")\nsolution(\"1.6 1.8 1.4\")\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = sorted(a, reverse=True)\n    m = n[0]\n    i = 1\n    while i < len(n):\n        if n[i] > m:\n            break\n        m = n[i]\n        i += 1\n    d = i - 1\n    print('%s^%s^%s' % (n[d], n[d], n[d]))\n    return '%s^%s^%s' % (n[d], n[d], n[d])\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    values = stdin.split()\n    x, y, z = values\n    \n    # Maximum value in x^y^z\n    mx = max(x, y, z)\n    \n    # Smallest index (from 1 to 12) such that a_{c} = m\n    for i in range(12):\n        if mx == (x ** i) + (y ** i) + (z ** i):\n            c = i\n    \n    # Print expression for a_{c}\n    return f'(x^{y})^{z}' if c == 1 else (f'(x^{y})^{z}' if c == 2 else (f'(x^{y})^{z}' if c == 3 else (f'(x^{z})^{y}' if c == 4 else (f'(x^{z})^{y}' if c == 5 else (f'(y^{x})^{z}' if c == 6 else (f'(y^{z})^{x}' if c == 7 else (f'(y^{x})^{z}' if c == 8 else (f'(y^{z})^{x}' if c == 9 else (f'(z^{x})^{y}' if c == 10 else (f'(z^{y})^{x}' if c == 11 else ('z^y^x' if c == 12 else 'x^y^z')))))))))"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    a_1 = x**y\n    a_2 = x**z\n    a_3 = (x**y)**z\n    a_4 = (x**z)**y\n    a_5 = y**x\n    a_6 = y**z\n    a_7 = (y**x)**z\n    a_8 = (y**z)**x\n    a_9 = z**x\n    a_10 = z**y\n    a_11 = (z**x)**y\n    a_12 = (z**y)**x\n    max_val = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n    if max_val == a_1:\n        return \"(%s^%s)^%s\" % (a_1, y, z)\n    if max_val == a_2:\n        return \"(%s^%s)^%s\" % (x, a_2, z)\n    if max_val == a_3:\n        return \"(%s^%s)^%s\" % (a_3, x, y)\n    if max_val == a_4:\n        return \"(%s^%s)^%s\" % (z, a_4, x)\n    if max_val == a_5:\n        return \"(%s^%s)^%s\" % (y, a_5, x)\n    if max_val == a_6:\n        return \"(%s^%s)^%s\" % (z, a_6, y)\n    if max_val == a_7:\n        return \"(%s^%s)^%s\" % (x, a_7, z)\n    if max_val == a_8:\n        return \"(%s^%s)^%s\" % (z, a_8, x)\n    if max_val == a_9:\n        return \"(%s^%s)^%s\" % (y, a_9, x)\n    if max_val == a_10:\n        return \"(%s^%s)^%s\" % (x, a_10, y)\n    if max_val == a_11:\n        return \"(%s^%s)^%s\" % (y, a_11, x)\n    if max_val == a_12:\n        return \"(%s^%s)^%s\" % (x, a_12, y)\n    return \"x^y^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    while len(stdin)!= 0:\n        x, y, z = map(float, stdin.split())\n        max = x if (x > y) else y\n        max = x if (x > z) else z\n        max = y if (y > z) else z\n        max = max if (max > x) else x\n        max = max if (max > y) else y\n        max = max if (max > z) else z\n        max = str(max)\n        i = stdin.find(max)\n        i += len(max)\n        res += max[i]\n        stdin = stdin[i:]\n    return res\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    while not stdin:\n        stdin = stdin.strip()\n    return stdin"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split()\n    x = float(x)\n    y = float(y)\n    z = float(z)\n    m = max(x**y, x**z, y**x, y**z, z**x, z**y)\n    c = 1\n    while c < 12 and m == m:\n        m = max(x**y, x**z, y**x, y**z, z**x, z**y)\n        c += 1\n    if c == 12:\n        c = 1\n    if m == x**y:\n        print(f'{x}^{y}^{z}')\n    if m == x**z:\n        print(f'{x}^{z}^{y}')\n    if m == y**x:\n        print(f'{y}^{x}^{z}')\n    if m == y**z:\n        print(f'{y}^{z}^{x}')\n    if m == z**x:\n        print(f'{z}^{x}^{y}')\n    if m == z**y:\n        print(f'{z}^{y}^{x}')\n    if m == x**y:\n        print(f'(x^y)^z')\n    if m == x**z:\n        print(f'(x^z)^y')\n    if m == y**x:\n        print(f'(y^x)^z')\n    if m == y**z:\n        print(f'(y^z)^x')\n    if m == z**x:\n        print(f'(z^x)^y')\n    if m == z**y:\n        print(f'(z^y)^x')\n    if m == x**y:\n        print(f'(x^y)^z')\n    if m == x**z:\n        print(f'(x^z)^y')\n    if m == y**x:\n        print(f'(y^x)^z')\n    if m == y**z:\n        print(f'(y^z)^x')\n    if m == z**x:\n        print(f'(z^x)^y')\n    if m == z**y:\n        print(f'(z^y)^x')\n    if m == x**y:\n        print(f'(x^y)^z')\n    if m == x**z:\n        print(f'(x^z)^y')\n    if m == y**x:\n        print(f'(y^x)^z')\n    if m == y**z:\n        print(f'(y^z)^x')\n    if m == z**x:\n        print(f'(z^x)^y')\n    if m == z**y:\n        print(f'(z^y)^x')\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split(\" \")\n    num_list = [float(i) for i in num_list]\n    res = \"\"\n    for i in range(3):\n        res += \"^\"\n        for j in range(3):\n            if i==1 and j==1:\n                res += \"(\"\n            res += str(num_list[i] ** num_list[j])\n            if i==1 and j==1:\n                res += \")\"\n            if i==j:\n                res += \"^\"\n    return res\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    x = (n+1)//2\n    if (n-1)%2 == 0:\n        x = (n+1)//2\n    else:\n        x = (n+1)//2 - 1\n    print(x)\n    return x\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    count_operations = 0\n    current_string = ''\n    for char in stdin:\n        if char == 'a':\n            count_operations += 1\n        else:\n            if count_operations > 0:\n                count_operations += 1\n                current_string += char\n    if count_operations > 0:\n        return count_operations + 1\n    return count_operations\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return n\n\n    # Step 1: first word\n    cur = 1\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            cur += 1\n\n    # Step 2: Add a character\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            cur += 1\n\n    # Step 3: Copy the first word\n    # thes next word must be inserted after the cur + 1\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            cur += 1\n\n    # Step 4: Delete the current word\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            cur += 1\n\n    return cur"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nYour code will be run against a single-threaded CPU, so your runtime will be judged using the time limit function. When your code is timing out, make sure you have proper debugging/testing to avoid regressions.\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    i = 0\n    j = n\n    curr_l = a[:n-1]\n    while j < n:\n        if len(curr_l) < 2:\n            return i\n        elif len(curr_l) == 2:\n            i += 1\n            curr_l += a[j]\n            j += 1\n        elif len(curr_l) == 3:\n            i += 2\n            curr_l = curr_l[1:] + a[j]\n            j += 1\n        elif len(curr_l) == 4:\n            i += 3\n            curr_l = curr_l[2:] + a[j]\n            j += 1\n        elif len(curr_l) == 5:\n            i += 3\n            curr_l = curr_l[3:] + a[j]\n            j += 1\n        elif len(curr_l) == 6:\n            i += 3\n            curr_l = curr_l[4:] + a[j]\n            j += 1\n        elif len(curr_l) == 7:\n            i += 3\n            curr_l = curr_l[5:] + a[j]\n            j += 1\n        elif len(curr_l) == 8:\n            i += 3\n            curr_l = curr_l[6:] + a[j]\n            j += 1\n        elif len(curr_l) == 9:\n            i += 3\n            curr_l = curr_l[7:] + a[j]\n            j += 1\n        elif len(curr_l) == 10:\n            i += 3\n            curr_l = curr_l[8:] + a[j]\n            j += 1\n        elif len(curr_l) == 11:\n            i += 3\n            curr_l = curr_l[9:] + a[j]\n            j += 1\n        elif len(curr_l) == 12:\n            i += 3\n            curr_l = curr_l[10:] + a[j]\n            j += 1\n        elif len(curr_l) == 13:\n            i += 3\n            curr_l = curr_l[11:] + a[j]\n            j += 1\n        elif len(curr_l) == 14:\n            i += 3\n            curr_l = curr_l[12:] + a[j]\n            j += 1\n        elif len(curr_l) == 15:\n            i += 3\n            curr_l = curr_l[13:] + a[j]\n            j += 1\n        elif len(curr_l) == 16:\n            i += 3\n            curr_l = curr_l[14:] + a[j]\n            j += 1\n        elif len(curr_l) == 17:\n            i += 3\n            curr_l = curr_l[15:] + a[j]\n            j += 1\n        elif len(curr_l) == 18:\n            i += 3\n            curr_l = curr_l[16:] + a[j]\n            j += 1\n        elif len(curr_l) == 19:\n            i += 3\n            curr_l = curr_l[17:] + a[j]\n            j += 1\n        elif len(curr_l) == 20:\n            i += 3\n            curr_l = curr_l[18:] + a[j]\n            j += 1\n        elif len(curr_l) == 21:\n            i += 3\n            curr_l = curr_l[19:] + a[j]\n            j += 1\n        elif len(curr_l) == 22:\n            i += 3\n            curr_l = curr_l[20:] + a[j]\n            j += 1\n        elif len(curr_l) == 23:\n            i += 3\n            curr_l = curr_l[21:] + a[j]\n            j += 1\n        elif len(curr_l) == 24:\n            i += 3\n            curr_l = curr_l[22:] + a[j]\n            j += 1\n        elif len(curr_l) == 25:\n            i += 3\n            curr_l = curr_l[23:] + a[j]\n            j += 1\n        elif len(curr_l) == 26:\n            i += 3\n            curr_l = curr_l[24:] + a[j]\n            j += 1\n        elif len(curr_l) == 27:\n            i += 3\n            curr_l = curr_l[25:] + a[j]\n            j += 1\n        elif len(curr_l) == 28:\n            i += 3\n            curr_l = curr_l[26:] + a[j]\n            j += 1\n        elif len(curr_l) == 29:\n            i += 3\n            curr_l = curr_l[27:] + a[j]\n            j += 1\n        elif len(curr_l) == 30:\n            i += 3\n            curr_l = curr_l[28:] + a[j]\n            j += 1\n        elif len(curr_l) == 31:\n            i += 3\n            curr_l = curr_l[29:] + a[j]\n            j += 1\n        elif len(curr_l) == 32:\n            i += 3\n            curr_l = curr_l[30:] + a[j]\n            j += 1\n        elif len(curr_l) == 33:\n            i += 3\n            curr_l = curr_l[31:] + a[j]\n            j += 1\n        elif len(curr_l) == 34:\n            i += 3\n            curr_l = curr_l[32:] + a[j]\n            j += 1\n        elif len(curr_l) == 35:\n            i += 3\n            curr_l = curr_l[33:] + a[j]\n            j += 1\n        elif len(curr_l) == 36:\n            i += 3\n            curr_l = curr_l[34:] + a[j]\n            j += 1\n        elif len(curr_l) == 37:\n            i += 3\n            curr_l = curr_l[35:] + a[j]\n            j += 1\n        elif len(curr_l) == 38:\n            i += 3\n            curr_l = curr_l[36:] + a[j]\n            j += 1\n        elif len(curr_l) == 39:\n            i += 3\n            curr_l = curr_l[37:] + a[j]\n            j += 1\n        elif len(cur"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return min(len(stdin), len(stdin) + len(stdin) + len(stdin) - 1)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    str_lst = stdin.split()\n\n    return min(len(str_lst[0])+len(str_lst[0])+len(str_lst[0])+len(str_lst[0])+len(str_lst[0]),len(str_lst[0])+len(str_lst[0])+len(str_lst[0])+len(str_lst[0])+len(str_lst[0]))\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n\nn = int(input())\n\nnums = {str(i): 0 for i in range(1, n + 1)}\n\nfor i in range(1, n + 1):\n    file = stdin.readline()\n    tokens = file.split()\n    command = tokens[0]\n    index = tokens[1]\n    if int(index) - 1 in nums.keys():\n        nums[int(index) - 1] += 1\n    if int(index) in nums.keys():\n        nums[int(index)] += 1\n    if command =='move':\n        move_command = tokens[2]\n        if move_command == '1':\n            nums[int(index) - 1] -= 1\n        elif move_command == '2':\n            nums[int(index) - 1] += 1\n\nfor i in range(1, n + 1):\n    if nums[i] == 1:\n        nums[i] += i\n    elif nums[i] == 0:\n        nums[i] = i\n\nprint(len(nums))\nfor i in sorted(nums.keys()):\n    print('move', i, nums[i], sep='')\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    files_with_tests = []\n    for i in range(n):\n        files_with_tests.append(stdin.splitlines()[i+1].split())\n    c = 0\n    while True:\n        # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a\n        j = 0\n        while j < len(files_with_tests):\n            i = 0\n            while i < len(files_with_tests[j]):\n                if files_with_tests[j][i] == '1':\n                    for k in range(j+1, len(files_with_tests)):\n                        files_with_tests[k].insert(i, str(c))\n                        if files_with_tests[k][i] == '1':\n                            files_with_tests[k].remove('1')\n                            files_with_tests[k].remove('0')\n                    break\n                i += 1\n            j += 1\n        c += 1\n        # \u0415\u0441\u043b\u0438 \u043e\u0434\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0432\u043f\u0430\u043b\u0430 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0443 \u0434\u0440\u0443\u0433\u043e\u0439, \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e\n        for i in range(j, len(files_with_tests)):\n            files_with_tests[i].remove('1')\n            files_with_tests[i].remove('0')\n        # \u0415\u0441\u043b\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430\n        if not files_with_tests[j]:\n            break\n    return str(c)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return sum(1 for line in stdin.split('\\n') if int(line.split(' ')[0]) <= int(line.split(' ')[1]))\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  file_list = [[] for _ in range(n + 1)]\n  for i in range(1, n + 1):\n    file_list[i] = stdin.split()[i - 1].split(' ')\n  count_ex = 0\n  count_reg = 0\n  for i in range(1, n + 1):\n    if file_list[i][1] == '1':\n      count_ex = max(count_ex, count_reg + 1)\n    else:\n      count_reg += 1\n  for i in range(1, n + 1):\n    if file_list[i][1] == '0':\n      count_ex = max(count_ex, count_reg)\n    count_reg += 1\n  return count_ex + count_reg\n\nsolution(\"5\\n1 0\\n2 1\\n2 extra 0\\n3 1\\n99 0\")\n\"\"\"\n\nn = int(input())\n\ntest_list = []\nfor _ in range(n):\n    test_list.append([input(), int(input())] )\n\nprint(len(set(test_list)))"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    result = ''\n    all_tests = []\n    for _ in range(n):\n        file_name, file_type = stdin.split()[1:]\n        file_type = int(file_type)\n        all_tests.append((file_name, file_type))\n    all_tests.sort(key=lambda x: x[0])\n\n    if all_tests[0][1] == 1:\n        for file_name, file_type in all_tests:\n            result += f'move {file_name} {file_name[0:-1] + str(int(file_name[-1]) + 1)}'\n    else:\n        result += f'move {all_tests[0][0]} {all_tests[0][0][0:-1] + str(int(all_tests[0][0][-1]) + 1)}'\n        for i in range(1, n):\n            result += f'move {all_tests[i][0]} {all_tests[i][0][0:-1] + str(int(all_tests[i][0][-1]) + int(all_tests[i - 1][0][-1]))}'\n\n    return result\n\nstdin = '4\\n1 0\\n2 1\\n2 extra 0\\n3 1\\n99 0'\nprint(solution(stdin))\n\nstdin = '5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0'\nprint(solution(stdin))\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total_tests = int(stdin.split()[0])\n    result = 0\n    for i in range(1, total_tests + 1):\n        file_name = stdin.split()[i]\n        file_type = int(stdin.split()[i + 1])\n        if file_type == 0:\n            result += 1\n        elif file_type == 1:\n            result += 2\n        else:\n            raise Exception(\"bad file type\")\n\n    return str(result)\n\nsolution(\"5\")\nsolution(\"2\")\n\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_tests = int(stdin.split()[0])\n    list_of_files = stdin.split()[1:]\n    for file in list_of_files:\n        if int(file[1]) == 1:\n            index = int(file[0])\n            file_name = \"test_\" + str(index + 1)\n            yield \"move \" + file + \" \" + file_name\n        else:\n            index = int(file[0])\n            file_name = \"test_\" + str(index)\n            yield \"move \" + file + \" \" + file_name"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin.splitlines())\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    stdin = stdin.splitlines()[1:]\n    files = [[0]*6 for _ in range(n+1)]\n    for i, line in enumerate(stdin, 1):\n        file_i = line[:line.find(\" \")]\n        type_i = line[line.find(\" \")+1:]\n        if type_i == \"0\":\n            files[i][0] = file_i\n        else:\n            files[i][1] = file_i\n    files = sorted(files)\n    files = [str(i) for i in range(1, n+1)] + [\"0\"]*(n+1) + [str(i) for i in range(n+1)]\n    for i in range(1, n+1):\n        move_i = int(files[i]) - int(files[i-1])\n        if move_i!= 0:\n            files[i] = str(move_i)\n    return len(files)-1\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    files = {}\n    for i in range(n):\n        f, t = stdin.split()\n        if int(f) in files:\n            files[int(f)][1] = t\n        else:\n            files[int(f)] = [f, t]\n    for k, v in files.items():\n        if v[1] == '1':\n            ans += 1\n            v[1] = 'e' + str(ans)\n        else:\n            ans += 1\n        for j in range(ans+1, int(v[1])):\n            v[1] = str(j)\n        files[k] = v\n    ans = str(ans)\n    for k, v in files.items():\n        print(\"move {} {}\".format(v[0], ans))\n    return ans\n\n\nsolution(input())\n\nIn this example we can see that the smallest possible number of lines for the script file is 5.\n\nInput\n3\n1 0\n2 1\n3 1\n\nOutput\n4\nmove 3 1\nmove 01 5\nmove 2 extra 4\nmove 99 3\n\nInput\n5\n1 0\n11 1\n111 0\n1111 1\n11111 0\n\nOutput\n5\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3\nInput\n4\n1 0\n11 1\n111 0\n\nOutput\n4\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3\n\"\"\"\n\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin\n    for i in range(len(ticket)):\n        if ticket[i] == '0':\n            ticket = ticket[:i] + '3' + ticket[i+1:]\n            break\n    if ticket[:3] == ticket[-3:]:\n        return len(ticket) - len(ticket.replace('0', '3', 1))\n    else:\n        return len(ticket) - len(ticket.replace('0', '3', 2))\n\nprint(solution(input()))"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    new_ticket = stdin\n    while True:\n        found = False\n        for i in range(3):\n            if str(i) in new_ticket:\n                new_ticket = new_ticket.replace(str(i), '0', 1)\n                found = True\n        if not found:\n            break\n    return new_ticket\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    if lst[0] == '0':\n        return '0'\n    for i in range(len(lst)):\n        if lst[i] == '0':\n            lst[i] = '3'\n    for i in range(len(lst)):\n        if lst[i] == '1':\n            lst[i] = '2'\n    lst = ''.join(lst)\n    return lst"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(min(len(set(stdin)), len(set(stdin[:3]))))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace(\"0\", \"\")\n    n = len(a)\n    ans = 0\n    for i in range(n - 3):\n        sum1 = int(a[i]) + int(a[i + 1]) + int(a[i + 2])\n        sum2 = int(a[n - 3]) + int(a[n - 2]) + int(a[n - 1])\n        if sum1 == sum2:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0:3]\n    y = stdin[3:6]\n    lst = []\n    for i in range(len(x)):\n        lst.append(int(x[i]) * int(y[i]))\n    print(sum(lst))\nsolution(stdin)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport itertools\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"0\":\n            count += 1\n            if i == len(stdin) - 2:\n                if stdin[i + 1] == \"0\":\n                    count += 1\n                else:\n                    return str(count)\n            else:\n                if stdin[i + 2] == \"0\":\n                    count += 1\n                else:\n                    return str(count)\n    return \"0\""
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport re\n\nx = re.compile('([0-9])|([1-9][0-9]?)|([0-9]+)')\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, m = map(int, stdin.split())\n    def factorial(n):\n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return factorial(m) // gcd(factorial(x), factorial(m - x))\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    if m == 1:\n        return 1\n    if m == 2:\n        return 2\n    if m == 3:\n        return 3\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(gcd(m, x))\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    n = m\n    #for i in range(m, 0, -1):\n    #    if x % i == 0:\n    #        n = i\n    #        break\n    return n\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(m // x - 1)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.strip().split())\n    return str(max(0, (m - 1) // x))"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, m, x = stdin.split()\n    m = int(m)\n    x = int(x)\n    for i in range(m):\n        if (x % (i+1)) == 0:\n            return str(i+1)\n    return '0'\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, m, x = stdin.split()\n    m = int(m)\n    x = int(x)\n    if x < m:\n        return str(m - x)\n    else:\n        return str(m - x % m)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    for i in range(1, m):\n        if x % i == 0:\n            return x % (i+1)\n    return x % m\n\nsolution(\"4 3\")\nsolution(\"5 2\")\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (m, x) = map(int, stdin.split())\n    ans = 0\n\n    # the trap number of each room is ans + x % (m - ans - 1) + 1\n    # the trap number of each room is x % (m - ans - 1) + 1\n    for i in range(m):\n        ans += (m - i - 1) * x % (m - ans - 1)\n        ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    probability = 1\n    for day in range(2**n):\n        people = set()\n        for i in range(k):\n            if day & (1 << i):\n                people.add(i)\n        if len(people) >= 2:\n            probability *= 1.0/len(people)\n    return str(int(probability*1000000))\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    if k == 1:\n        return str(1)\n    # Finds the smallest common denominator\n    a, b = 1, 2\n    while (a + b) < n:\n        a, b = b, a + b\n    # Finds the smallest common divisor\n    gcd = 1\n    while (a * b) % gcd!= 0:\n        gcd = gcd + 1\n    # Calculates the remainder\n    # Since the remainder cannot be more than 1, we can add 1 to it and take the modulus to get the remainder\n    remainder = n - ((a * b) // gcd)\n    return str(a // gcd) + \" \" + str(remainder % gcd)"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while a > 0 and b > 0:\n            if a > b:\n                a, b = b, a\n            if a >= b:\n                a, b = b, a\n            if a % b == 0:\n                return b\n        return 1\n    n, k = map(int, stdin.split())\n    prob = 1\n    for i in range(1, 2**n):\n        prob *= 2 ** (n - i)\n        if prob % (1 << (10 * i)) >= (1 << (10 * i)) - (1 << (10 * i - 1)):\n            prob /= (1 << (10 * i))\n    prob = str(prob % (1 << 63))\n    a, b = prob[:len(prob)//2], prob[len(prob)//2:]\n    return f\"{int(a)}{int(b)}\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days_in_year = pow(2, n)\n    m = (k-1) // days_in_year\n    a = m * days_in_year\n    b = (k-m) * days_in_year\n    return f\"{a} {b}\" if m == k-m else f\"{a} {b} {(m+1) * days_in_year}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    ans = []\n    for i in range(1 << n):\n        for j in range(2 ** n):\n            if i & (1 << j) and (i & (1 << (j + 1))):\n                ans.append(1)\n            else:\n                ans.append(0)\n    \n    #mod\n    ans = list(map(lambda x: x % 100000003, ans))\n    \n    #calc prob\n    A, B = 1, 1\n    \n    for i in range(k):\n        if ans[i] == 1:\n            A, B = A * 2, A * 2\n        else:\n            A, B = A * 2, B * 2\n    return str(A) +'' + str(B)\n\n\nsolution(input())\n'''"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = 1\n    b = 2\n    A = a\n    B = b\n    A_prev = 1\n    B_prev = 2\n    while n >= A_prev and k >= A_prev:\n        A_prev = A\n        A += A_prev * a\n        B_prev = B\n        B += B_prev * b\n        b += 1\n        a += 1\n    return str(A) + \" \" + str(B)\n\nstdin = \"3 2\"\nprint(solution(stdin))\nstdin = \"1 3\"\nprint(solution(stdin))\nstdin = \"4 3\"\nprint(solution(stdin))"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return '{} {}'.format(2 ** n // k, 2 ** (n - 1) // k)\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    probability = 0\n    divisor = 1\n    for i in range(2, n+1):\n        divisor = gcd(divisor, i)\n        if divisor == 1:\n            break\n    for i in range(1, n+1):\n        probability = (probability + (i//divisor) % 2) % 2\n        if probability == 1 and i % divisor == 0:\n            return str(i % divisor) +'' + str(divisor)\n    return str(probability) +'' + str(divisor)\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    probability = 1 / 8\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(2, n):\n        if i == primes[0]:\n            continue\n        for j in primes:\n            if i == j:\n                continue\n            if gcd(i, j) == 1:\n                probability *= 1 - float(primes.index(i) - primes.index(j)) / (n - 1)\n    return \"{0:.9f}\".format(probability)\n\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    p = 1\n    for i in range(1, n+1):\n        p *= 2\n        p %= (10**9 + 3)\n    x = 1\n    y = 1\n    for i in range(k):\n        x = (x * 2 * (n-1)) % p\n        y = (y * 2 * (n-1)) % p\n    return \"{} {}\".format(x, y)\n\nprint(solution(input()))"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    res = \"NO\"\n    for _ in range(n):\n        t, dir = stdin.split()[1:]\n        t = int(t)\n        if (dir == \"North\" and t <= 20000) or (dir == \"South\" and t <= 20000) or (dir == \"West\" and t <= 35000) or (dir == \"East\" and t <= 35000):\n            res = \"YES\"\n        else:\n            res = \"NO\"\n    return res\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    for line in sys.stdin:\n        line = line.strip()\n        n = int(line.split()[0])\n        for i in range(n):\n            t, direction = line.split()\n            t = int(t)\n            if direction == 'North' and (t == 0 or t == 2):\n                print('NO')\n                return\n            elif direction == 'South' and (t == 1 or t == 3):\n                print('NO')\n                return\n            elif direction == 'West' and (t == 0 or t == 4):\n                print('NO')\n                return\n            elif direction == 'East' and (t == 1 or t == 5):\n                print('NO')\n                return\n        print('YES')\n    return\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    tasks = []\n    for _ in range(n):\n        tasks.append(input().split(\" \"))\n    for task in tasks:\n        if task[1] == \"North\":\n            if task[0] == \"North\" and task[0] == \"South\":\n                return \"NO\"\n        if task[1] == \"South\":\n            if task[0] == \"South\" and task[0] == \"North\":\n                return \"NO\"\n    if tasks[-1][0] == \"North\":\n        return \"NO\"\n    elif tasks[-1][0] == \"South\":\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    j = int(stdin.split()[0])\n    for i in range(j):\n        t, d = stdin.split()\n        if (d == \"North\" and (t == \"10000 East\" or t == \"20000 South\" or t == \"1000 North\")):\n            print(\"YES\")\n            break\n        elif (d == \"South\" and (t == \"10000 North\" or t == \"20000 South\" or t == \"1000 North\")):\n            print(\"YES\")\n            break\n        elif (d == \"West\" and (t == \"100000 East\" or t == \"20000 South\" or t == \"10000 North\")):\n            print(\"YES\")\n            break\n        elif (d == \"East\" and (t == \"100000 North\" or t == \"20000 South\" or t == \"10000 North\")):\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\nsolution(input())\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = []\n    dir = []\n    for i in range(n):\n        t.append(int(stdin.split()[i * 2 + 1].split(',')[0]))\n        dir.append(stdin.split()[i * 2 + 1].split(',')[1])\n    if n == 1 and (dir[0] == 'North' or dir[0] == 'South') and t[0] > 2000:\n        return \"YES\"\n    elif n == 2 and (dir[0] == 'North' and dir[1] == 'East') or (dir[0] == 'North' and dir[1] == 'West') or (\n            dir[0] == 'South' and dir[1] == 'East') or (dir[0] == 'South' and dir[1] == 'West') or (\n            dir[0] == 'East' and dir[1] == 'North') or (dir[0] == 'West' and dir[1] == 'North'):\n        return \"YES\"\n    elif n == 2 and (dir[0] == 'North' and dir[1] == 'North') or (\n            dir[0] == 'North' and dir[1] == 'South') or (dir[0] == 'South' and dir[1] == 'North') or (\n            dir[0] == 'South' and dir[1] == 'South') and t[0] > 2000 and t[1] > 2000:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        t, dir_ = map(int, stdin.split())\n        if dir_ == \"North\" and (t <= 0 or t > 20_000_000):\n            return \"NO\"\n        elif dir_ == \"South\" and (t <= 0 or t > 20_000_000):\n            return \"NO\"\n        elif dir_ == \"East\" and (t <= 0 or t > 40_000_000):\n            return \"NO\"\n        elif dir_ == \"West\" and (t <= 0 or t > 40_000_000):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    journey = []\n    journey += stdin.split()\n    s = list(journey[0])\n    d = []\n    t = []\n    for i in range(1, n):\n        s = list(journey[i])\n        if s[0] == 'S':\n            if s[1] == 'S':\n                d = ['S', 'S']\n                t = [journey[i - 1][1], journey[i - 1][1]]\n            elif s[1] == 'N':\n                d = ['S', 'N']\n                t = [journey[i - 1][1], journey[i - 1][1] + 10**6]\n        elif s[0] == 'N':\n            if s[1] == 'S':\n                d = ['N', 'S']\n                t = [journey[i - 1][1], journey[i - 1][1]]\n            elif s[1] == 'N':\n                d = ['N', 'N']\n                t = [journey[i - 1][1], journey[i - 1][1] + 10**6]\n        elif s[0] == 'W':\n            if s[1] == 'S':\n                d = ['W', 'S']\n                t = [journey[i - 1][1] - 10**6, journey[i - 1][1]]\n            elif s[1] == 'N':\n                d = ['W', 'N']\n                t = [journey[i - 1][1] - 10**6, journey[i - 1][1]]\n        elif s[0] == 'E':\n            if s[1] == 'S':\n                d = ['E', 'S']\n                t = [journey[i - 1][1] + 10**6, journey[i - 1][1]]\n            elif s[1] == 'N':\n                d = ['E', 'N']\n                t = [journey[i - 1][1] + 10**6, journey[i - 1][1]]\n        journey[i] = d\n        journey[i] = t\n    # print(journey)\n    return \"YES\" if len([i for i in journey if i[0] == 'N']) == 1 else \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        t, d = stdin.split()\n        if d == 'South':\n            if t == 'North':\n                return 'NO'\n            if t == 'South':\n                return 'YES'\n        if d == 'North':\n            if t == 'South':\n                return 'YES'\n            if t == 'North':\n                return 'YES'\n        if d == 'West':\n            if t == 'East':\n                return 'YES'\n            if t == 'West':\n                return 'YES'\n        if d == 'East':\n            if t == 'East':\n                return 'YES'\n            if t == 'West':\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    for i in range(n):\n        t, dire = stdin.split()[i].split(' ')\n        t = int(t)\n        if dire == 'North' and t + 20000 > 40000:\n            return 'NO'\n        elif dire == 'South' and t + 20000 > 40000:\n            return 'NO'\n        elif dire == 'East' and t + 20000 > 40000:\n            return 'NO'\n        elif dire == 'West' and t + 20000 > 40000:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        t, d = map(int, stdin.split())\n        if (d in {'North', 'South'}) and (t <= 40_000) and (d == 'North' if t > 20_000 else d == 'South'):\n            print('YES')\n            return\n        else:\n            print('NO')\n            return"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    l = L\n    r = R\n    for i in range(1, 100):\n        m = (a_1*i+b_1)//2\n        if m >= l and m <= r:\n            l = m+1\n        else:\n            r = m-1\n    return r-l"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    x = (a_1, b_1, a_2, b_2, L, R)\n    return str(bisect.bisect_left(x, (a_1 - 1, b_1, a_2 - 1, b_2, L, R), 0, len(x)) + 1)"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, L, R = (int(x) for x in stdin.split())\n    return str(sum(1 for k in range(L, R + 1) if a1 + k * b1 == a2 + k * b2))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, L, R, K, L_ = stdin.split()\n    a, b, L, R = int(a), int(b), int(L), int(R)\n    K, L_ = int(K), int(L_)\n    return str(R - L - 1 + K)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    return str(binarySearch(a_1, b_1, a_2, b_2, L, R))\n    \n\ndef"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    for x in range(L, R + 1):\n        if x == a_1 * L + b_1 and x == a_2 * R + b_2:\n            print(x)\n            break\n        if (a_2 * x + b_2) == a_1 * (R - x) + b_1:\n            print(x)\n            break\n    else:\n        print(x + 1)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, L, R = map(int, stdin.split())\n    L = max(L, 0)\n    R = min(R, 2 * 10**9)\n    for i in range(L, R):\n        if a1*i+b1 == a2*i+b2:\n            print(i)\n            return\n    print(-1)\nsolution(input())\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    for x in range(L, R):\n        a_1_prime = a_1 + x\n        b_1_prime = b_1 - x\n        a_2_prime = a_2 - x\n        b_2_prime = b_2 + x\n        if a_1_prime == a_2_prime and b_1_prime == b_2_prime:\n            print(x)\n            return"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (a_1, b_1, a_2, b_2, L, R) = map(int, stdin.split())\n    counter = 0\n    if a_1 == 0 and b_1 == 0 and a_2 == 0 and b_2 == 0:\n        if L == R:\n            return 0\n        else:\n            return 1\n    else:\n        for i in range(L, R + 1):\n            if a_2 * i + b_2 == a_1 * i + b_1:\n                counter += 1\n        return counter\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, l, r = map(int, stdin.split())\n    \n    res = 0\n    for k in range(l, r+1):\n        res += 1\n        a1_k = k + b1\n        a2_k = k + b2\n        if a1_k == a2_k:\n            continue\n        elif l <= k and k <= r:\n            if a1_k > a2_k:\n                res -= 1\n            elif a1_k < a2_k:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    q = n // 2\n    x = n - q\n    return str(q)"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n    def cut_cake(a, b):\n        return a * b\n    def check_to_fit(a, b, n):\n        return n >= a + b\n    def check_to_fit2(a, b, n):\n        return a * b >= n\n    def check_to_fit3(a, b, n):\n        return a * b <= n\n    max_x = 0\n    while a!= 0 or b!= 0:\n        if a == 0:\n            if b == 0:\n                return str(max_x)\n            else:\n                a, b = b, a\n        if check_to_fit3(a, b, max_x) == False:\n            a, b = a, b\n            max_x = 0\n            continue\n        x = cut_cake(a, b)\n        max_x += x\n        a, b = a - x, b - x\n    return str(max_x)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 2 3\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 4 7 10\n   ... ''')\n    '3'\n    \"\"\"\n    # \u8fd9\u91cc\u8981\u6838\u5b9e\u4e00\u4e0b\u5047\u8bbe\u6761\u4ef6\u7684\u771f\u503c\n    # \u5148\u628a\u7b49\u5f0f\u6c42\u89e3\u51fa\u6765\uff0c\u4f46\u662f\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u6c42\u89e3\u6709\u4e2a\u5047\u8bbe\u7684\u662f n <= a, b\n    # \u6240\u4ee5\u6211\u4eec\u8981\u628a\u7b49\u5f0f\u6539\u6210 n > a, b\n    # n >= a, b\n    # a, b >= n\n\n    # a + b >= n\n    # a >= n\n    # a + b >= n\n    # a + b >= n <= n\n\n    # a + b >= n <= n\n    # a + b >= n\n    # a + b <= n\n    # a + b <= n <= n\n\n    # a + b <= n <= n\n    # a + b <= n\n    # a <= n\n    # a + b <= n\n    # a + b <= n <= n\n\n    # a <= n <= n\n    # a <= n\n    # a + b <= n\n    # a + b <= n <= n\n\n    # a + b <= n <= n\n    # a + b <= n <= n\n    # a <= n <= n\n    # a <= n <= n\n    # a + b <= n <= n\n\n    # \u4e0b\u9762\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u9898\u76ee\uff0c\u5176\u5b9e\u8fd9\u4e2a\u6a21\u578b\u7684\u4ee3\u7801\u4e0d\u592a\u61c2\uff0c\u5c31\u662f\u4e0d\u8bb0\u5f97\u5199\u4e2a\u6d4b\u8bd5\u4ee3\u7801\n    # \u9996\u5148\u5229\u7528\u4e00\u4e9b\u51fd\u6570\uff0c\u6c42\u89e3\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u8f93\u5165\u7684\u662f5 5 2 3\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\n    # \u8fd9\u4e2a\u6570\u7ec4\u91cc\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a2\u7ef4\u7684\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6570\u7ec4\u91cc\u662f\u4e00\u4e2a\u5217\u8868\u91cc\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f\u6bcf\u4e00\u5217\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\n    # \u8fd9\u4e2a\u5217\u8868\u91cc\u7684\u5143\u7d20\u662f\u4e24\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u91cc\u6709\u4e24\u4e2a\u6570\uff0c\u4ee3\u8868\u4e00\u4e2a\u5706\u5708\uff0c\u4e00\u4e2a\u5706\u5708\u91cc\u7684\u6570\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5706\u5708\uff0c\u7136\u540e\u518d\u5bf9\u8fd9\u4e2a\u5706\u5708\u6392\u5e8f\uff0c\n    # \u6392\u5e8f\u4e4b\u540e\u7684\u6570\u7ec4\u91cc\u5c31\u662f\u7ed9\u5b9a\u5706\u5708\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u6570\u7ec4\u91cc\u7684\u5143\u7d20\u62ff\u51fa\u6765\u653e\u5230\u7b2c\u4e00\u4e2a\u5706\u5708\u91cc\uff0c\u7136\u540e\u518d\u6392\u5e8f\u4e00\u6b21\uff0c\n    # \u4e0b\u4e00\u4e2a\u5706\u5708\u91cc\u653e\u5230\u7b2c\u4e8c\u4e2a\u5706\u5708\u91cc\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u62fc\u63a5\u7684\u6700\u7ec8\u7ed3\u679c\n    n, a, b = map(int, input().split())\n\n    # \u628an \u62ff\u51fa\u6765\u4f5c\u4e3a\u4e00\u4e2a\u6570\u7ec4\n    # \u628an \u653e\u5230\u7b2c\u4e00\u4e2a\u5706\u5708\u91cc\n    a_circle = []\n    for i in range(1, n + 1):\n        # \u6bcf\u6b21\u628a\u7b2ci\u4e2a\u5706\u5708\u653e\u5230\u4e86\u7b2ci\u4e2a\u5217\u8868\u4e2d\n        a_circle.append([])\n        a_circle[i - 1].append(i)\n        a_circle[i - 1].append(0)\n\n    # \u628an \u653e\u5230\u7b2c\u4e8c\u4e2a\u5706\u5708\u91cc\n    b_circle = []\n    for i in range(1, n + 1):\n        b_circle.append([])\n        b_circle[i - 1].append(0)\n        b_circle[i - 1].append(i)\n\n    # \u628aa\u3001b \u7ed3\u679c\u90fd\u653e\u5230\u6570\u7ec4\u91cc\n    result = []\n    result.append(a_circle)\n    result.append(b_circle)\n    for i in range(n):\n        # \u8fd9\u4e2a\u5faa\u73af\u662f\u628a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n        for j in range(n):\n            # \u5982\u679ci\u7684\u6700\u540e\u4e00\u4e2a\u503c\u5927\u4e8ej\u7684\u6700\u540e\u4e00\u4e2a\u503c\n            if result[1][i][-1] > result[1][j][-1]:\n                # \u5c31\u4ea4\u6362\u8fd9\u4e24\u4e2a\u5706\u5708\u7684\u503c\n                result[0][i], result[0][j] = result[0][j], result[0][i]\n                result[1][i], result[1][j] = result[1][j], result[1][i]\n    # \u628a\u6700\u540e\u4e00\u4e2a\u5706\u5708\u8f6c\u6362\u6210\u7b2c\u4e00\u4e2a\u5706\u5708\u7684\u8fd4\u56de\u503c\n    return result[0][0][0]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n    answer = []\n    a, b = min(a,b), max(a,b)\n    for i in range(2, min(a+1, b+1)):\n        count = 0\n        for j in range(1, n+1):\n            if i % j == 0:\n                count += 1\n        if count >= 2 and i <= a:\n            answer.append(i)\n    for j in range(1, n+1):\n        if j >= b:\n            count = 0\n            for i in range(1, n+1):\n                if i % j == 0:\n                    count += 1\n            if count >= 2 and i <= b:\n                answer.append(i)\n    return max(answer)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    assert 1 <= n <= a + b <= 100\n    # n, a, b = 5, 2, 3\n    # n, a, b = 4, 7, 10\n    x = 1\n    while x <= n:\n        if a % x == 0 and b % x == 0:\n            return str(x)\n        x += 1\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    l = list(range(1, n + 1))\n    l1 = l[:a]\n    l2 = l[b:]\n    l3 = []\n    for i in l1:\n        if sum(l2) >= i:\n            l3.append(i)\n    if len(l3) == 0:\n        return -1\n    if len(l3) == 1:\n        return l3[0]\n    l4 = []\n    for i in l2:\n        if sum(l3) >= i:\n            l4.append(i)\n    if len(l4) == 0:\n        return -1\n    if len(l4) == 1:\n        return l4[0]\n    return l4[0]\n    \nprint(solution(input()))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return f\"{a + b - 1 + max(min(a, b), (a + b - 1) // 2)}\""
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = list(map(int, stdin.split()))\n    \n    if a+b < n or a > n or b > n:\n        return -1\n    if n == 1:\n        return 1\n    \n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        dp[i][i] = 1\n        \n    for i in range(n, n+b):\n        for j in range(n, n+a):\n            for k in range(n, n+b):\n                if i <= j and j <= k:\n                    dp[i][k] = max(dp[i][k], dp[i][j] + dp[j][k])\n                if j <= k and k <= i:\n                    dp[i][k] = max(dp[i][k], dp[i][j] + dp[j][k])\n                if i <= j and j <= k and k <= i:\n                    dp[i][k] = max(dp[i][k], dp[i][j] + dp[j][k])\n                if j <= k and k <= i and i <= j:\n                    dp[i][k] = max(dp[i][k], dp[i][j] + dp[j][k])\n    \n    for i in range(n, n+b):\n        if dp[i][n] > 1:\n            return i\n    return -1"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    if (m % n == 0):\n        print(m // n)\n    elif (k % (m // n) == 0):\n        print(k // (m // n))\n    else:\n        print(m // n + 1)\n    return (str(m // n + 1))\n\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(x) for x in stdin.split()]\n    print(f\"YES\" if n == m else \"NO\")\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 5\n   ... RRRRR\n   ... RRRRR\n   ... BBBBB\n   ... BBBBB\n   ... GGGGG\n   ... GGGGG\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... 4 4\n   ... RRRR\n   ... RRRR\n   ... BBBB\n   ... GGGG\n   ... ''')\n    'NO'\n\n    \"\"\"\n    # N = int(stdin.strip().split(' ')[0])\n    # M = int(stdin.strip().split(' ')[1])\n    # flag = stdin.strip().split('\\n')\n    # if N == M and (flag[0] == flag[1] == flag[2] == flag[3] == flag[4] == flag[5]):\n    #     return 'YES'\n    # else:\n    #     return 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flag = [['R' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            flag[i][j] = stdin[i][j]\n    for i in range(n - 1):\n        for j in range(m):\n            if flag[i][j]!= 'R':\n                continue\n            if flag[i + 1][j]!= 'G':\n                continue\n            if flag[i + 1][j + 1]!= 'B':\n                continue\n            if flag[i + 1][j - 1]!= 'G':\n                continue\n            if flag[i][j + 1]!= 'B':\n                continue\n            if flag[i][j - 1]!= 'B':\n                continue\n            if flag[i][j - 1]!= 'B':\n                continue\n            if flag[i][j + 1]!= 'B':\n                continue\n            if flag[i + 1][j - 1]!= 'B':\n                continue\n            if flag[i + 1][j + 1]!= 'B':\n                continue\n            return 'YES'\n    return 'NO'\n\nsolution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\\n')\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = stdin.split()\n    flag = \"YES\"\n    c = 0\n    if field[0] == field[1] == field[2] == field[3] == field[4]:\n        flag = \"NO\"\n    else:\n        if m % 3 == 0:\n            if field[0] == \"R\" and field[1] == \"R\" and field[2] == \"R\":\n                if field[3] == \"B\" and field[4] == \"B\":\n                    flag = \"YES\"\n            elif field[0] == \"G\" and field[1] == \"G\" and field[2] == \"G\":\n                if field[3] == \"B\" and field[4] == \"B\":\n                    flag = \"YES\"\n            else:\n                if field[3] == \"B\" and field[4] == \"B\":\n                    flag = \"YES\"\n        else:\n            if field[0] == \"R\" and field[1] == \"R\" and field[2] == \"R\":\n                if field[3] == \"B\" and field[4] == \"B\":\n                    flag = \"YES\"\n            else:\n                if field[3] == \"B\" and field[4] == \"B\":\n                    flag = \"YES\"\n\n    return flag\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    m = int(lines[1])\n    colors = set()\n    for line in lines[2:]:\n        line = line.strip()\n        colors = colors.union(set(line))\n    if len(colors) == 3:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [\"\".join(stdin.split(\"\\n\"))] * n\n    for i in range(n):\n        if i!= 0 and field[i][:i]!= field[i - 1][i:]:\n            return \"NO\"\n        if i!= n - 1 and field[i][i + 1:]!= field[i + 1][:i]:\n            return \"NO\"\n    for j in range(1, m):\n        if j!= 0 and field[:j][-j:]!= field[-j:][:j]:\n            return \"NO\"\n        if j!= m - 1 and field[-j:][:j]!= field[:j][-j:]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    # field = stdin\n    field = []\n    for i in range(n):\n        line = list(stdin[i*m:(i+1)*m])\n        field.append(line)\n    # \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\n    # \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043a\u043e\u043b-\u0432\u043e \u0431\u043e\u043b\u044c\u0448\u0435 1\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    if n <= 1 or m <= 1:\n        return 'NO'\n    for i in range(1, n-1):\n        if field[i].count('R')!= 1:\n            return 'NO'\n        elif field[i].count('G')!= 1:\n            return 'NO'\n        elif field[i].count('B')!= 1:\n            return 'NO'\n    for i in range(n-2):\n        if field[i].count('R')!= 1:\n            return 'NO'\n        elif field[i+1].count('G')!= 1:\n            return 'NO'\n        elif field[i+1].count('B')!= 1:\n            return 'NO'\n    for i in range(1, m-1):\n        if field[0].count('R')!= 1:\n            return 'NO'\n        elif field[0].count('G')!= 1:\n            return 'NO'\n        elif field[0].count('B')!= 1:\n            return 'NO'\n    for i in range(m-2):\n        if field[n-1].count('R')!= 1:\n            return 'NO'\n        elif field[n-1].count('G')!= 1:\n            return 'NO'\n        elif field[n-1].count('B')!= 1:\n            return 'NO'\n\n    if field[0].count('R')!= 1:\n        return 'NO'\n    elif field[1].count('G')!= 1:\n        return 'NO'\n    elif field[1].count('B')!= 1:\n        return 'NO'\n    if field[m-1].count('R')!= 1:\n        return 'NO'\n    elif field[m-1].count('G')!= 1:\n        return 'NO'\n    elif field[m-1].count('B')!= 1:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for i in range(n):\n        field.append(stdin[i * m:(i + 1) * m])\n    res = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if field[i][j]!= field[i][j + 1] and field[i][j]!= field[i + 1][j] and field[i][j]!= field[i + 1][j + 1]:\n                res = 1\n                break\n    if res:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    print(input_data)\n    n = int(input())\n    a = 0\n    b = 0\n    count = 0\n    while a <= b:\n        b += 1\n        count += 1\n        if count == n:\n            break\n        a += 2\n    print(a,b)\n    return input_data"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        x, y = list(map(int, stdin.split()))\n        if x < y:\n            x, y = y, x\n        print(x, y)\n    return x, y\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = 0, 0\n    moves = 0\n    for i in range(n):\n        if i % 2 == 0:\n            moves += 1\n            if x % 2 == 0:\n                x += 1\n            else:\n                x -= 1\n        else:\n            if y % 2 == 0:\n                y += 1\n            else:\n                y -= 1\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '%d %d' % (0, 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    field = []\n    for _ in range(0, 6):\n        field.append(list(map(int, stdin.split(' '))))\n\n    moves = []\n    count = 0\n    i = 0\n    j = 0\n    while (count < n):\n        for i in range(len(field)):\n            count += 1\n            if (i % 2 == 0):\n                j += 1\n                moves.append(j)\n                continue\n            else:\n                j -= 1\n                moves.append(j)\n                continue\n    return''.join(map(str, moves))\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([str(i) for i in range(stdin)])\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    y = 0\n    while n > 0:\n        if (n - 1) % 3 == 0:\n            y += 1\n            n -= 1\n        elif (n - 2) % 3 == 0:\n            x += 1\n            n -= 2\n        else:\n            x -= 1\n            n -= 3\n    return str(x) + \" \" + str(y)\nprint(solution(input()))\n\n--Examples--\n\nInput\n\n3\n\nOutput\n\n-2 0\n\nInput\n\n7\n\nOutput\n\n3 2"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = y = 0\n    for i in range(n):\n        x += 6 * i\n        y += 3 * i\n    return str(x), str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = set()\n    s.add((0, 0))\n    x, y = 0, 0\n    s = {(0, 0)}\n    d = 0\n    while len(s)!= n:\n        x = (x + dx[d] + 1) % 6\n        y = (y + dy[d] + 1) % 6\n        d = (d + 1) % 6\n        s.add((x, y))\n    return \" \".join([str(i) for i in s])\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    damage, shield, _ = re.findall(r'(\\d+)', stdin)\n    damage = int(damage)\n    shield = int(shield)\n    if shield == 0:\n        print('Yes')\n        return\n    if shield > damage:\n        print('No')\n        return\n    res = damage - shield\n    if res >= 0:\n        print('Yes')\n        return\n    print('No')\n    return"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c > a:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b >= c:\n        print(\"No\")\n        return\n    elif a == c:\n        print(\"Yes\")\n        return\n    else:\n        print(\"Yes\")\n        return\nsolution(input())\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif a == b:\n        return \"Yes\" if c % 2 == 0 else \"No\"\n    elif a == c:\n        return \"Yes\" if b % 2 == 0 else \"No\"\n    elif b == c:\n        return \"Yes\" if a % 2 == 0 else \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c=map(int,stdin.split())\n    if a==b==c:\n        return \"Yes\"\n    elif a+b<c:\n        return \"No\"\n    else:\n        return \"Yes\" if a+b>c else \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b <= c:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, cd = map(int, stdin.split())\n    if ab + bc >= cd:\n        print('Yes')\n    else:\n        print('No')\nsolution(input())\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c == a + b:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a+c <= b:\n        return 'No'\n    if a+b <= c:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split())\n    #a = 6\n    #b = 10\n    #c = 5\n    a1,a2 = divmod(a,b)\n    b1,b2 = divmod(b,c)\n    return \"Yes\" if a1==a2 and b1==b2 else \"No\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    Kefa = list(map(int, stdin.split()[1]))\n    Sasha = list(map(int, stdin.split()[2]))\n    \n    if len(Kefa)!= len(Sasha):\n        return \"NO\"\n    \n    Kefa.sort()\n    Sasha.sort()\n    \n    for i in range(len(Kefa)):\n        if Kefa[i]!= Sasha[i]:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # print(a)\n    # print(b)\n    # if len(a)!= len(b):\n    #     return 'NO'\n    # else:\n    #     for i in range(len(a)):\n    #         if a[i]!= b[i]:\n    #             return 'NO'\n    # return 'YES'\n    return 'YES' if sorted(a) == sorted(b) else 'NO'\n\n\nprint(solution(input()))\n\n\n\n\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n    n, L = map(int, stdin.split())\n    bars = list(map(int, stdin.split()))\n    k = L // 2\n    s = L // 2\n    count = 0\n    for i in range(n):\n        if i + 1 == bars[i]:\n            count += 1\n        else:\n            if count == k:\n                return \"YES\"\n            count = 0\n    if count == k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nThere is only one test.\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solution_1(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    return \"YES\" if A.count(max(A)) == B.count(max(B)) == n and sorted(A) == sorted(B) else \"NO\"\n\n\n\n\n\nsolution(\"3 8\\n2 4 6\\n1 5 7\\n\")\nsolution(\"4 9\\n2 3 5 8\\n0 1 3 6\\n\")\nsolution(\"2 4\\n1 3\\n1 2\")\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    barriers = list(map(int, stdin.split()))\n    start_points_kefa = list(map(lambda i: (i, -1), barriers))\n    start_points_sasha = list(map(lambda i: (i, -1), barriers))\n    start_points_kefa = sorted(start_points_kefa, key=lambda x: x[0])\n    start_points_sasha = sorted(start_points_sasha, key=lambda x: x[0])\n    return (start_points_kefa[0][1] == start_points_sasha[0][1]) and (start_points_kefa[1][1] == start_points_sasha[1][1])\n\nstdin = '3 8\\n2 4 6\\n1 5 7\\n'\n\nstdin = '3 9\\n2 3 5 8\\n0 1 3 6\\n'\n\nprint(solution(stdin))"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, L = list(map(int, stdin.split()))\n  a = list(map(int, stdin.split()))\n  b = list(map(int, stdin.split()))\n  if n!= len(a) and n!= len(b):\n    return \"NO\"\n  return \"YES\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    #print(n, L, A)\n    for i in range(len(A)):\n        #print(A[i], B[i])\n        if i + 1 < len(A) and A[i + 1] < A[i]:\n            return 'NO'\n    if len(set(A))!= len(set(B)):\n        return 'NO'\n    if len(set(A))!= n:\n        return 'NO'\n    if sorted(A)!= A or sorted(B)!= B:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # 1st solution\n    # s = stdin.strip().split()\n    # s = sorted(s, key=lambda x: len(x))\n    # print(s)\n    # return len(s[-1])\n    # 2nd solution\n    # s = stdin.strip().split()\n    # count = 0\n    # while True:\n    #     s = sorted(s, key=lambda x: len(x))\n    #     print(s)\n    #     if len(s) == 1 or len(s) == 2:\n    #         count = max(count, len(s[-1]))\n    #     else:\n    #         if s[-1]!= s[-2]:\n    #             count = max(count, len(s[-1]))\n    #     s.pop()\n    # return count\n\n    # 3rd solution\n    # s = stdin.strip().split()\n    # s = sorted(s, key=len)\n    # while True:\n    #     if len(s) == 1:\n    #         return 0\n    #     if len(s) == 2:\n    #         if s[0] == s[1]:\n    #             return 0\n    #         else:\n    #             return len(s[0])\n    #     if s[-1]!= s[-2]:\n    #         return len(s[-1])\n    #     s.pop()\n    #     # print(s)\n    # return len(s[-1])\n\n    # 4th solution\n    # s = stdin.strip().split()\n    # count = 0\n    # while True:\n    #     s = sorted(s, key=len)\n    #     print(s)\n    #     if len(s) == 1:\n    #         return 0\n    #     if len(s) == 2:\n    #         if s[0] == s[1]:\n    #             return 0\n    #         else:\n    #             return len(s[0])\n    #     if s[-1]!= s[-2]:\n    #         count = len(s[-1])\n    #     s.pop()\n    #     # print(s)\n    # return count\n    # 5th solution\n    s = stdin.strip().split()\n    while True:\n        s = sorted(s, key=len)\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 0\n            else:\n                return len(s[0])\n        if s[-1]!= s[-2]:\n            return len(s[-1])\n        s.pop()\n\n\nprint(solution(\"mew\"))\nprint(solution(\"wuffuw\"))\nprint(solution(\"qqqqqqqq\"))"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # **********DO NOT EDIT THE CODE BELOW THIS LINE **********\n    n = len(stdin)\n    if n <= 50:\n        return '0'\n\n    # if n == 1:\n    #     return '0'\n\n    longest = '0'\n    for i in range(n):\n        curr = stdin[i:]\n        # print(curr)\n        while len(curr) > 0:\n            # print(curr)\n            # print(curr[0])\n            # print(curr[-1])\n            if (not curr[0] == curr[-1] and (curr[0] == curr[-1] and len(curr) == 1)) or \\\n                    (not curr[0] == curr[-1] and curr[0] == curr[-2] and curr[1] == curr[-1] and curr[2] == curr[-2] and curr[3] == curr[-3] and curr[4] == curr[-4] and curr[5] == curr[-5]):\n                break\n            else:\n                curr = curr[1:]\n\n        if len(curr) > len(longest):\n            longest = curr\n        # print(longest)\n    return longest\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    d = {}\n    longest = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = stdin[i:j]\n            if not substring in d:\n                d[substring] = True\n            if substring == substring[::-1]:\n                if len(substring) > longest:\n                    longest = len(substring)\n    if not longest:\n        return \"0\"\n    return str(longest)\nsolution(\"mew\")\nsolution(\"wuffuw\")\nsolution(\"qqqqqqqq\")\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    length_longest = 0\n    palindromes = []\n    for word in words:\n        substring = longestPalindromicSubstring(word)\n        if(substring):\n            length_longest = max(length_longest, len(substring))\n            palindromes.append(substring)\n    return str(length_longest)\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    string = stdin.strip()\n    if isPalindrome(string):\n        return \"0\"\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        palindrome_string = string[i:] + string[:i]\n        if isPalindrome(palindrome_string) and len(palindrome_string) > len(longest_palindrome):\n            longest_palindrome = palindrome_string\n    return longest_palindrome\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    First, we need to solve the problem itself. \n    Then, we need to return the solution.\n    \"\"\"\n    \n    # Your code here\n    if stdin == \"\":\n        return \"0\"\n\n    substrings = set()\n    for s in stdin:\n        substrings.add(s)\n    \n    # for all strings\n    # print(substrings)\n    # there are only two conditions: 1. the substring is a palindrome, 2. the substring is not a palindrome.\n    # 1. the substring is a palindrome, 2. the substring is not a palindrome\n    # we need to find the palindrome length of substring of size 2.\n    # these two rules: \n    # 1. if the substring is not a palindrome, then it must be longer than 1.\n    # 2. if the substring is palindrome, then it must be equal to the length of the substring.\n\n    substrings_length = set()\n    for s in substrings:\n        for i in range(len(s)):\n            if s[i:]!= s[:len(s)-i] and s[i:]!= s[len(s)-i:] and len(s[i:]) == len(s[:len(s)-i]) == len(s[len(s)-i:]):\n                substrings_length.add(len(s[i:]))\n                break\n    if len(substrings_length) > 0:\n        return str(max(substrings_length))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L = len(stdin)\n    max_sub = 1\n    for l in range(1, L):\n        max_sub = max(max_sub, l)\n        for i in range(L - l + 1):\n            sub = stdin[i:i + l]\n            if is_palindrome(sub):\n                max_sub = max(max_sub, l)\n    return str(max_sub)\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) < 2:\n        return 0\n    if stdin == stdin[::-1]:\n        return 0\n    for i in range(len(stdin)):\n        if stdin == stdin[i:i + 1] or stdin == stdin[i:]:\n            return len(stdin)\n    for i in range(1, len(stdin)):\n        if stdin[i:] == stdin[i:][::-1]:\n            return i + 1\n    return 0\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    ans = 0\n    while True:\n        l = len(string)\n        if is_palindrome(string):\n            break\n        string = max_palindrome(string)\n        if l > ans:\n            ans = l\n    return str(ans)\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ratings = []\n    is_rated = False\n    for i in range(len(stdin)):\n        rating = int(stdin[i])\n        ratings.append(rating)\n    if ratings[0] > ratings[-1]:\n        is_rated = True\n    else:\n        is_rated = False\n    if is_rated:\n        return 'rated'\n    else:\n        return 'unrated'\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    standings = [stdin.strip().split() for _ in range(n)]\n    standings = sorted(standings, key=lambda x: (int(x[0]), int(x[1])))\n    for i, (a, b) in enumerate(standings, start=1):\n        if a == b:\n            if i == n:\n                print(\"rated\")\n                continue\n            if i == n-1:\n                print(\"unrated\")\n                continue\n            print(\"unrated\")\n            break\n        elif int(a) < int(b):\n            print(\"unrated\")\n            break\n        elif int(a) > int(b):\n            print(\"rated\")\n            break\n    else:\n        print(\"maybe\")"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    standings = list(map(int, stdin.split(\"\\n\")))\n    if n == 1:\n        if len(set(standings)) == 1:\n            return \"rated\"\n        else:\n            return \"unrated\"\n    if len(set(standings)) == 1:\n        return \"rated\"\n    change = False\n    for i in range(n):\n        if standings[i] > standings[i + 1]:\n            change = True\n            break\n    if change:\n        return \"rated\"\n    else:\n        return \"unrated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    standings = []\n\n    for i in range(N):\n        standings.append(list(map(int, stdin.split())))\n\n    for i in range(N):\n        if standings[i][0]!= standings[i][1]:\n            return 'rated'\n    return 'unrated'\n\n\n\n------Task-----\n\nFind a program that takes the input of a list of integers, then prints either 'rated', 'unrated', or'maybe'.\n\nUse lists to store the list of ratings for each participant, then sort the list. Then for each value, if the difference between the value and the next value is positive, print \"rated\". If the difference is negative, print \"unrated\". If the difference is zero, print \"maybe\".\n\nReturn \"unrated\" when none of the participants have a rating change.\n\nExample:\n\nInput\n\n3\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n\nOutput\n\nrated\n\nInput\n\n4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n\nOutput\n\nunrated\n\n\nInput\n\n5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\nOutput\n\nmaybe\n\n\n-----Hints-----\n\nUse a dictionary to store the ratings for each participant in the order they were in the input, then sort the dictionary by key.\n\nUse the built-in sorted() function to sort a dictionary by its keys.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split('\\n')[0])\n    standings = [(int(i), int(j)) for i, j in [stdin.strip().split('\\n')[i].split(' ') for i in range(1, n + 1)]]\n    standings.sort(reverse=True)\n\n    # check if the first, third and last have the same rating\n    if standings[0][1] == standings[2][1] and standings[0][0] == standings[1][0] and standings[1][0] == standings[-1][0]:\n        return 'rated'\n    # check if the first, second and last have the same rating\n    if standings[0][1] == standings[1][1] and standings[0][0] == standings[-1][0] and standings[-1][0] == standings[1][0]:\n        return 'rated'\n\n    if standings[0][0]!= standings[1][0] and standings[1][0]!= standings[2][0]:\n        return 'unrated'\n    else:\n        return'maybe'\n\nsolution(\"\"\"\n3\n3 6\n4 4\n3 8\n\n\"\"\")\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    participants = []\n    for _ in range(n):\n        participants.append([int(i) for i in stdin.split(\" \")])\n    \n    round_participants = sorted([(p[0], p[1]) for p in participants], reverse=True)\n    \n    \n    if round_participants[0][0]!= round_participants[1][0] and round_participants[1][1]!= round_participants[0][1]:\n        return \"maybe\"\n    elif round_participants[0][0]!= round_participants[1][0] and round_participants[1][1] == round_participants[0][1]:\n        return \"unrated\"\n    elif round_participants[0][0] == round_participants[1][0] and round_participants[0][1]!= round_participants[1][1]:\n        return \"unrated\"\n    else:\n        return \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    participants = {}\n    standings = []\n    for i in range(n):\n        a, b = stdin.split()\n        participants[i+1] = (int(a), int(b))\n        standings.append((int(a), i+1))\n    for i in range(n):\n        for j in range(n):\n            if i!= j and participants[i+1][1] > participants[j+1][1]:\n                standings[i] = (standings[i][0], j+1)\n    for i in range(n):\n        if standings[i][0] == standings[i][1]:\n            if len(standings) == 1:\n                return'maybe'\n            elif standings[i][0] == standings[0][0]:\n                return'maybe'\n            else:\n                return'maybe'\n    if len(standings) == 1:\n        return'maybe'\n    if standings[0][0] == standings[1][0]:\n        return'maybe'\n    else:\n        return 'rated'\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    standings = stdin[1:]\n\n    if len(standings) < n:\n        return'maybe'\n    if len(standings) == n:\n        for i in range(n):\n            if standings[i][0]!= standings[i+1][0]:\n                return'maybe'\n        return 'rated'\n\n    has_changed = False\n    # if two ratings have changed in consecutive rounds\n    # the round is rated\n    for i in range(len(standings)-1):\n        if standings[i][0]!= standings[i+1][0]:\n            has_changed = True\n            break\n\n    # if the round is rated, at least one\n    # participant's rating has changed\n    if has_changed:\n        return 'rated'\n    return 'unrated'\n\nsolution(input())\n\n'''\n\n'''\nother people's solution \n\nfrom collections import deque\ndef"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    scores = stdin.split()\n    d = {}\n    for i in range(N):\n        score = int(scores[i])\n        d[i] = score\n    scores = d.values()\n    score = max(scores)\n    if score == 1:\n        return \"unrated\"\n    if score == 0:\n        return \"rated\"\n    if score == 2:\n        return \"unrated\"\n    if score == 3:\n        return \"unrated\"\n    if score == 4:\n        return \"unrated\"\n    if score == 5:\n        return \"unrated\"\n    if score == 6:\n        return \"unrated\""
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(\"rated\" if input() == \"rated\" else \"unrated\" if input() == \"unrated\" else \"maybe\")\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = \"\"\n    current_num = num\n    while current_num > 0:\n        nearest_zero = -1\n        diff = current_num\n        for i in range(current_num + 1):\n            if i == 0:\n                nearest_zero = i\n            else:\n                diff = diff - i\n                if diff == 0:\n                    nearest_zero = i\n        result = result + str(nearest_zero) + \" \"\n        current_num = nearest_zero\n    return result[:-1]\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    res = []\n    for i in range(n):\n        count = 0\n        for j in range(len(a)):\n            if a[j] == str(0):\n                count += 1\n        res.append(count)\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = []\n    for i in range(n):\n        res.append(arr[i] - min(arr))\n    return''.join(map(str, res))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input = list(map(int, stdin.split()))\n    input.sort()\n\n    count = 1\n    current = input.pop()\n    while input:\n        if input == 0:\n            break\n        if current == input[0]:\n            count += 1\n        else:\n            input.pop(0)\n        current = input.pop()\n    print(count)\n    return\n\n\nsolution(\"\"\"\n10\n-10\n-10 -10 -10\n-10 -10 -10 -10\n-10 -10 -10 -10 -10 -10 -10\n
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    n = len(a)\n    m = 0\n    z = -10 ** 9\n    for i in range(n):\n        if a[i]!= 0:\n            m = i\n            break\n    d = m - n\n    if d < 0:\n        d = 0\n    d = d % n\n    for i in range(m - d):\n        if a[i] == 0:\n            z = i\n            break\n    print(m - d, z)\n    return \"\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    diffs = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = -10 ** 9\n        else:\n            a[i] -= 1\n        diffs.append(a[i])\n    res =''.join(map(str, diffs))\n    return res\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.insert(0, 0)\n    d = [0] * (N + 1)\n    d[1] = abs(a[1] - 0)\n    for i in range(2, N + 1):\n        d[i] = min(d[i-1] + abs(a[i]-0), abs(a[i]-a[i-1]))\n    ans = []\n    for i in range(N):\n        ans.append(str(d[i+1] - d[i]))\n    return''.join(ans)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    zeros = 0\n    for ai in a:\n        if ai == 0:\n            zeros += 1\n    \n    dists = [None for _ in range(n+1)]\n    dists[0] = 0\n    for i in range(1, n+1):\n        dist = dists[i-1]\n        dist = max(dist, abs(i-zeros))\n        if i == zeros:\n            dist = 0\n        dists[i] = dist\n    \n    res = []\n    for dist in dists:\n        if dist > 0:\n            res.append(str(dist))\n        else:\n            res.append(\"-{}\".format(str(-dist)))\n    return \" \".join(res)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [0] * n\n    res = \"\"\n    for i in range(n):\n        if a[i] == 0:\n            res += str(i) + \" \"\n            for j in range(i):\n                dp[j] = abs(i - j)\n    res += \" \".join(map(str, dp))\n    return res\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1]))\n    nearest_zero = [-1]*n\n    curr_dist = 0\n    for i in range(n):\n        if arr[i] == 0:\n            nearest_zero[i] = curr_dist\n        else:\n            curr_dist = i-nearest_zero[i]\n    curr_dist = 0\n    for i in range(n):\n        if arr[i] == 0:\n            nearest_zero[i] = curr_dist\n        else:\n            curr_dist = i-nearest_zero[i]\n    print(*nearest_zero, sep=' ')\n    return''.join(map(str, nearest_zero))"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    n = str(bin(n))[2:]\n    n = ''.join(['0' for i in range(len(n)) if n.count('1') >= 2])\n    print(len(n))\n    return\n    \nsolution(input())"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length, s = stdin.split()\n    length = int(length)\n    s = list(s)\n    result = 0\n    for i in range(length):\n        result += 1\n        s.insert(0, s.pop())\n        if s == s[::-1]:\n            result -= 1\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    3\n    >>> solution(input())\n    2\n    >>> solution(input())\n    962\n    \"\"\"\n    n = int(stdin)\n    s = stdin.strip()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(n):\n            if i < n - j and s[i] == s[j + i]:\n                dp[i] = dp[i] + dp[j + i]\n    return str(dp[0])\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Your code here\n    return n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, s = stdin.split()\n    if t == '0':\n        return len(s)\n    elif s == '0':\n        return 0\n    else:\n        return len(set([t[i:] + t[:i] for i in range(len(t))]))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    n = len(t)\n    while (len(t) % n)!= 0:\n        t += '1'\n    # print(t)\n    k = 0\n    for i in range(n):\n        k += int(t[i] == '1') * (1 << i)\n    ans = 0\n    for i in range(0, 1 << n, 1 << n):\n        t = format(i, '0' + str(n) + 'b')\n        if t.find(t[::-1])!= -1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    s = input\n\n    if (n == 1):\n        return str(1)\n\n    ans = 0\n\n    def is_cyclical(s):\n        if (len(s) % 2 == 0):\n            return False\n\n        ch = s[0]\n        for i in range(0, len(s) - 1):\n            if (s[i]!= s[i + 1]):\n                return False\n        return True\n\n    def is_cyclical_r(s):\n        if (len(s) % 2 == 0):\n            return False\n\n        ch = s[-1]\n        for i in range(0, len(s) - 1):\n            if (s[i]!= s[i + 1]):\n                return False\n        return True\n\n    for i in range(0, n - 1):\n        ans += len(set([\"0\" * (n - i - 1) + s[i:n]] + [\"1\" * (n - i - 1) + s[i:n]]))\n\n    print(ans)\n    return str(ans)\n\nsolution(\"\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"20\")\nsolution(\"10101010101010\")\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t,s = stdin.split()\n    return print(cyclic(int(t),s))\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    s = input[1]\n    strings = set()\n    strings.add(s)\n    for i in range(1, n):\n        t = s + s[0:n - i]\n        if t not in strings:\n            strings.add(t)\n    return str(len(strings))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    points = []\n    for i in range(1, int(stdin[0]) + 1):\n        points.append(tuple(map(int, stdin[i].split())))\n    points = sorted(points, key=lambda point: point[0] ** 2 + point[1] ** 2)\n    a = b = 0\n    min_angle = -1\n    for i in range(1, len(points)):\n        if points[i][0] < points[i - 1][0]:\n            a, b = i, i - 1\n            if points[i][1] == points[i - 1][1]:\n                a = i + 1\n            if points[i][1] == points[i - 2][1]:\n                b = i - 2\n            min_angle = max(min_angle, abs(points[a][1] - points[b][1]))\n    return str(a) + \" \" + str(b)\n    # return str(min(a, b)) + \" \" + str(max(a, b))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for i in range(n):\n        vectors.append(([int(i) for i in stdin.split()][0:2]))\n    s = sorted(vectors, key=lambda x: (x[0], x[1]))\n    print(s)\n    for i in range(n):\n        if i == n-1:\n            break\n        print(s[i][0], s[i+1][0])\n        print(s[i][1], s[i+1][1])\n        if abs(s[i][0] - s[i + 1][0]) + abs(s[i][1] - s[i + 1][1]) < abs(s[i][0] - s[i + 1][1]) + abs(s[i][1] - s[i + 1][0]):\n            print(s[i + 1][0], s[i + 1][1])\n        else:\n            print(s[i][0], s[i + 1][1])\n        print(s[i][1], s[i + 1][0])\n        if abs(s[i][0] - s[i + 1][0]) + abs(s[i][1] - s[i + 1][1]) < abs(s[i][0] - s[i + 1][1]) + abs(s[i][1] - s[i + 1][0]):\n            print(s[i + 1][0], s[i + 1][1])\n        else:\n            print(s[i][1], s[i + 1][0])\n    return '\\n'\n\n\nsolution('4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6')"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        vectors.append((x, y))\n    \n    min_angle = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            a, b = vectors[i], vectors[j]\n            a_cos, a_sin = a[0] / abs(a[0]), a[1] / abs(a[1])\n            b_cos, b_sin = b[0] / abs(b[0]), b[1] / abs(b[1])\n            cos = a_cos * b_cos + a_sin * b_sin\n            if cos <= 0:\n                angle = abs(math.atan2(a_sin, b_cos))\n            else:\n                angle = abs(math.atan2(-a_sin, b_cos))\n            if angle < min_angle:\n                min_angle = angle\n                a_index, b_index = i, j\n    return f'{a_index + 1} {b_index + 1}'\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        vectors.append((x, y))\n    vectors = sorted(vectors, key=lambda x: (x[1], x[0]))\n    vectors = sorted(vectors, key=lambda x: (x[1], -x[0]))\n    print(vectors[0][0], vectors[1][0])\n    return\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    v = []\n    for i in range(n):\n        v.append([int(x) for x in stdin.split(\"\\n\")[i].split()])\n    v.sort(key=lambda x: (x[0]**2 + x[1]**2, x[0], x[1]))\n\n    #print(v)\n    ans = float(\"inf\")\n    a = -1\n    b = -1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if (v[i][0]*v[i][1] + v[j][0]*v[j][1] < 0):\n                ans = min(ans, abs(v[i][0]*v[j][1] - v[j][0]*v[i][1]))\n                a = i\n                b = j\n    if ans == float(\"inf\"):\n        print(-1, -1)\n    else:\n        print(a+1, b+1)\n    return \"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        x1, y1 = map(int, stdin.split())\n        for j in range(i + 1, n):\n            x2, y2 = map(int, stdin.split())\n            if (x2 - x1) * (y2 - y1) < 0:\n                res = max(res, max((x1 - x2) ** 2 + (y1 - y2) ** 2, (x2 - x1) ** 2 + (y1 - y2) ** 2))\n    return res\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vector = []\n    for i in range(int(stdin)):\n        vector.append(list(map(int, stdin.split())))\n\n    vector.sort(key=lambda x: (x[0], x[1]))\n    a, b = 0, 0\n    for i in range(1, int(stdin)):\n        a, b = i, int((vector[i - 1][0] - vector[i][0]) * (vector[i - 1][1] - vector[i][1]) / ((vector[i - 1][0] - vector[i][0]) ** 2 + (vector[i - 1][1] - vector[i][1]) ** 2))\n        if a!= b:\n            print(a, b)\n            break\n    return ''"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    vectors = list(map(int, stdin.readline().split()))\n    vectors.sort(key=lambda x: (x[0], x[1]))\n    ans = (0, 0)\n    for i in range(n):\n        for j in range(i + 1, n):\n            a = vectors[i]\n            b = vectors[j]\n            angle = abs(a[0] * b[1] - b[0] * a[1]) / (\n                math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2))\n            if ans[0] == 0 and angle < ans[1]:\n                ans = (i, j)\n            elif ans[0]!= 0 and angle < ans[1]:\n                ans = (ans[0], i) if angle > ans[1] else (i, ans[0])\n    return \"{} {}\".format(*ans)\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = {(i, j) for i, j in zip(*[iter(map(int, stdin.split()))] * 2)}\n    s = set(s)\n    a = min(s, key=lambda p: (p[0], p[1], abs(p[0] + p[1])))\n    s.remove(a)\n    b = min(s, key=lambda p: (p[0], p[1], abs(p[0] - p[1])))\n    return str(a[0]) + \" \" + str(a[1]) + \" \" + str(b[0]) + \" \" + str(b[1])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        vectors.append((x, y))\n\n    min_angle = float('inf')\n    for i in range(n):\n        for j in range(i):\n            for k in range(j):\n                v1 = vectors[i]\n                v2 = vectors[j]\n                v3 = vectors[k]\n                angle = get_angle(v1, v2, v3)\n                if min_angle > angle:\n                    min_angle = angle\n    for i in range(n):\n        for j in range(i):\n            for k in range(j):\n                v1 = vectors[i]\n                v2 = vectors[j]\n                v3 = vectors[k]\n                angle = get_angle(v1, v2, v3)\n                if min_angle > angle:\n                    min_angle = angle\n    for i in range(n):\n        for j in range(i):\n            v1 = vectors[i]\n            v2 = vectors[j]\n            for k in range(j):\n                v3 = vectors[k]\n                angle = get_angle(v1, v2, v3)\n                if min_angle > angle:\n                    min_angle = angle\n    for i in range(n):\n        for j in range(i):\n            v1 = vectors[i]\n            v2 = vectors[j]\n            v3 = vectors[i]\n            angle = get_angle(v1, v2, v3)\n            if min_angle > angle:\n                min_angle = angle\n    print(min_angle)\n    return min_angle\n\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [d, k, a, b, t] = map(int, stdin.split())\n    pass_one_kilometer = a\n    time = 0\n    while t!= 0:\n        if pass_one_kilometer >= k:\n            time += d + k + (k - pass_one_kilometer) * t\n            break\n        else:\n            pass_one_kilometer += k\n            time += d + k\n            time += (pass_one_kilometer - a) * t\n            time += k * t\n    return str(time)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    if d <= k and a <= b:\n        return t - a\n    else:\n        return max(t - a, d - k)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    distance, time_on_car, time_on_foot, time_repair = map(int, stdin.split())\n    time_on_car += distance\n    time_on_foot += time_on_car\n    time_on_foot += time_repair\n    while time_on_car > 0 and time_on_foot > 0:\n        time_on_car -= 1\n        time_on_foot -= 1\n    return str(time_on_foot)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    *d, k, a, b, t = map(int, stdin.split())\n    return str(min(d, k*2 + t*(b-a), a + b + t + k - d))\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    remain = d + k\n    steps = b - a\n    if steps > t:\n        return 'impossible'\n    while remain > 0:\n        if steps + remain > t:\n            remain -= t\n        else:\n            remain -= steps\n        steps += b\n    return str(t + remain)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = list(map(int, stdin.split()))\n    if b > t:\n        return 'NO'\n    elif b == t:\n        return str(d)\n    elif k < t:\n        return str(b)\n    elif k > a:\n        return str(d + (k - a))\n    elif k == a:\n        return str(d + b)\n    else:\n        return str(d)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    a = a*60\n    b = b*60\n    c = (k+a-d)*b\n    if c < 0:\n        return 0\n    return c//t\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = list(map(int, stdin.split()))\n\n    def time_to_pass(t):\n        t = 0\n        while t < d:\n            t += 1\n            if t % k == 0:\n                if t == d:\n                    return t\n                return t + a\n        t += a\n        if t == d:\n            return t\n        return t + b\n\n    return str(time_to_pass(t))"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (d, k, a, b, t) = list(map(int, stdin.split()))\n    if a + b < t:\n        print(a + t)\n    else:\n        while True:\n            print(a, b)\n            a += (t - a) // 2\n            b += (a + k + b - t) // 2\n            if a <= d <= b:\n                print(a, b)\n                break\n    return\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Brute force, check every time whether Vasiliy will reach the post office.\n    \"\"\"\n    d, k, a, b, t = map(int, stdin.split())\n    min_time = (k - d + 1) * a + d * b + t\n    for i in range(t):\n        min_time += 1\n    return str(min_time)\n\nprint(solution(input()))"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return \"-\"\n    a = []\n    b = []\n    x = 1\n    while True:\n        if x % n!= 0:\n            a.append(x)\n        x += 1\n        if len(a) == k:\n            break\n    for i in range(len(a)):\n        b.append(a[i])\n        if len(b) == k:\n            break\n    if len(b) == k and sum(b) == n:\n        return \" \".join(map(str, b))\n    return \"-\"\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://practice.geeksforgeeks.org/problems/ugly-sequence/0\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return \"NO\"\n    \n    from math import sqrt\n    sqrtN = int(sqrt(n))\n    \n    # choose the first number\n    number = 1\n    # store the power of each number\n    power = {1:1}\n    \n    # for the next number\n    for i in range(2, sqrtN+1):\n        if i not in power:\n            power[i] = 1\n            number *= i\n            # go to the next index\n            for j in range(i, sqrtN+1, i):\n                if j not in power:\n                    power[j] = i\n                    number //= i\n                    break\n            \n    # store the resulting sequence\n    sequence = [number]\n    # iterate over the power dictionary\n    for k, v in power.items():\n        # if the power is greater than 1\n        if v > 1:\n            # go to the previous number\n            for j in range(k, sqrtN+1, k):\n                # if the previous number is not in the power dictionary, means that it needs to be in the sequence\n                if j not in power:\n                    # update the sequence\n                    sequence.append(j)\n                    break\n    \n    # if sequence has greater than k elements then it's not possible\n    if len(sequence) < k:\n        return \"NO\"\n    # if there is only one possible sequence then print it\n    if len(sequence) == k:\n        print(*sequence)\n        return\n    # else print all the possible sequence\n    print(\" \".join(map(str, sequence)))\n    return"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.strip().split()))\n    l.sort(reverse=True)\n    if l[0]!= 0:\n        return str(l[0]) +'' + str(l[1])\n    for i in range(len(l) - 2):\n        if l[i + 1] % l[i] == 0 and l[i + 2] % l[i] == 0:\n            return''.join(map(str, l[i:i + 3]))\n    return -1\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n % k!= 0):\n        return -1\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    while len(a) > k:\n        a.pop(0)\n    return str(a[0])\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = 1, n\n    while True:\n        if x % k == 0 or y % k == 0:\n            return''.join(str(i) for i in range(1, k+1))\n        x += 1\n        y -= 1\n    return '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisors = {}\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors[i] = divisors.get(i, 0) + 1\n\n    sorted_divisors = sorted(divisors.items(), key=lambda item: item[1], reverse=True)\n    print(sorted_divisors)\n    # if len(sorted_divisors) <= k:\n    #     return str(sorted_divisors[0][0])\n    # else:\n    #     return str(-1)\n    # print(sorted_divisors)\n    # if len(sorted_divisors) <= k:\n    #     return str(sorted_divisors[0][0])\n    # else:\n    #     return str(-1)\n    return str(sorted_divisors[0][0])\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return '1 2 3'\n    else:\n        return '-1'\n\nsolution(input())\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    gcd = lambda x, y: gcd(y, x % y) if y else x\n\n    def recur(acc, divisor):\n        if divisor == 0:\n            return acc\n\n        return recur(acc, divisor - 1)\n\n    if gcd(n, k)!= 1:\n        print('-1')\n        return\n\n    res = []\n    cur = 0\n    while True:\n        res.append(cur)\n        cur = recur(cur, n)\n        if len(res) == k:\n            print(' '.join(map(str, res)))\n            return\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if n < 1 or k < 1:\n        return -1\n    divisor = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor.append(i)\n    divisor.sort(reverse=True)\n    return \" \".join(str(x) for x in divisor[:k])\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_list = []\n    for i in range(1, n + 1):\n        if i % k!= 0:\n            continue\n        n_list.append(i)\n    if not n_list:\n        return -1\n    return''.join(map(str, n_list))"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,input().split())\n    c,d=map(int,input().split())\n    s=(a+b)%5\n    s=(c+d)%5\n    if s==0:\n        print(a+b)\n    else:\n        print(s)\n    return stdin\nprint(solution('9'))"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            if (i+j)%5 == 0:\n                count+=1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 5 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return '1'\n    else:\n        return str(sum(i+j for i in range(n+1) for j in range(m+1) if (i+j)%5 == 0))\n    "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return '{}'.format(len([i for i in range(n+1) if (sum(divmod(i, 5)) == 0)] + [i for i in range(m+1) if (sum(divmod(i, 5)) == 0)]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(' ')))\n    x = stdin[0]\n    y = stdin[1]\n    t = x + y\n    res = 0\n    while t % 5 == 0:\n        res += 1\n        t = t//5\n    return str(res)"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_pairs_divisible_by_five(int(stdin.split()[0]), int(stdin.split()[1])))\n\ndef"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    cnt = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                cnt += 1\n\n    return str(cnt)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(len(list(set((i + 1, j + 1)\n                            for i in range(1, n + 1)\n                            for j in range(1, m + 1)\n                            if i + j % 5 == 0)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = list(map(int, stdin.split('\\n')))\n    beauty = max(stdin_arr)\n    for i in range(1, len(stdin_arr)):\n        beauty = max(beauty, beauty + stdin_arr[i] * stdin_arr[i - 1])\n    return str(beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_beauty = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            curr_beauty = 0\n            for k in range(i, j):\n                curr_beauty += a[k]\n            if curr_beauty > max_beauty:\n                max_beauty = curr_beauty\n    return str(max_beauty * x)"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def beauty(a):\n        ans = 0\n        i = 0\n        while i < len(a):\n            ans = max(ans, sum(a[i:i+3]))\n            i += 1\n        return ans\n\n    return str(beauty(a) * x)"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = 0\n    for i in range(n):\n        if beauty < x:\n            beauty += a[i]\n        else:\n            break\n    for i in range(n-1, -1, -1):\n        if beauty < x:\n            beauty += a[i]\n        else:\n            break\n    return str(beauty)"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, x) = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = list(a)\n    res = 0\n    for i in range(0, n):\n        curr = 0\n        for j in range(0, i):\n            curr += a[j]\n        curr = curr * x\n        curr = curr + a[i]\n        curr = max(curr, a[i])\n        res = max(curr, res)\n    return str(res)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = sum(a)\n    max_beauty = 0\n    for i in range(n):\n        tmp_beauty = 0\n        for j in range(i, n):\n            tmp_beauty += a[j] * x\n            max_beauty = max(max_beauty, tmp_beauty)\n    return str(max_beauty)\nprint(solution(input()))\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            res += arr[i] - arr[i-1]\n        else:\n            res += arr[i]\n    return str(res * x)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = 0\n    max_beauty = 0\n    start = 0\n    end = 0\n    while start < n and end < n:\n        if end == n:\n            end += 1\n            start += 1\n        else:\n            if a[end] >= 0:\n                end += 1\n            else:\n                start += 1\n        beauty = max(beauty, sum(a[start:end]))\n    if beauty >= 0:\n        max_beauty = beauty * x\n    return str(max_beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def beauty(arr, i, j):\n        if j - i == 0:\n            return 0\n        else:\n            return arr[i] + arr[i + 1] + beauty(arr, i + 2, j)\n\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    #print(beauty(arr, 0, len(arr)))\n    return str(beauty(arr, 0, len(arr)))\n\n\nsolution('5 -2\\n-3 8 -2 1 -6')\nsolution('12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7')\nsolution('5 10\\n-1 -2 -3 -4 -5')"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    beauty = 0\n    beauty_list = []\n\n    for i in range(len(input_a) - 2):\n        beauty_list.append(input_a[i] * input_a[i + 1] * input_a[i + 2] * input_a[i + 3])\n    beauty_list = beauty_list + input_a + input_a + input_a + input_a\n    beauty_list.sort()\n    for i in range(len(beauty_list)):\n        beauty += beauty_list[i]\n    return str(beauty)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    result = list(map(lambda x: x * x, range(1, n + 1)))\n    result.sort(reverse=True)\n    return str(result[k - 1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    table = [[i for i in range(j * n, j * n + m)] for j in range(1, n + 1)]\n    print(max(table[i][k - 1] for i in range(n)))\n    return max(table[i][k - 1] for i in range(n))\n\nstdin = \"\"\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n\n    num = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            num = num * i\n        if num == k:\n            return str(i)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = sorted([i * j for i in range(1, n + 1) for j in range(1, m + 1)])\n    return str(a[k - 1])"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    largest_numbers = [[] for _ in range(n)]\n    largest_numbers[0] = list(range(1, m + 1))\n    for i in range(1, n):\n        largest_numbers[i] = list(range(1, m + 1))\n        for j in range(1, m):\n            largest_numbers[i][j] = largest_numbers[i - 1][j] * largest_numbers[i][j - 1]\n    return str(sorted(largest_numbers[n - 1], reverse=True)[k - 1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n    for j in range(1, m+1):\n        res //= j\n    return str(res)"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    return str(k)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    largest = max(range(1, n*m), key=lambda i: i*i)\n    if k == 1:\n        return str(largest)\n    else:\n        return str(largest * k)\n    # return '{}'.format(max(range(1, n*m), key=lambda i: i*i))\n    # return str(max(range(1, n*m), key=lambda i: i*i))"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(f'{int(stdin):03}')\n    return\nsolution()\n\n\"\"\"\n\nn = int(input())\nprint(int(input()) % int(input()))\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:int(stdin.split()[0])]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = 0\n    while True:\n        result = (result * 10) + (k % 10)\n        k //= 10\n        if k == 0:\n            break\n    return str(result)"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num = 123456789101112131415161718192021222324252627282930313233343536\n    res = \"\"\n    for i in range(k):\n        res += str(num % 10)\n        num //= 10\n    return res\nprint(solution(input()))\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here.\n    Return a single string. No return type specification required.\n    \"\"\"\n    num = int(stdin)\n    nums = []\n    n = 1\n    while n <= num:\n        nums.append(n)\n        n += 1\n    # print(nums)\n    return nums[num - 1]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        (str) :\n    \"\"\"\n    a = \"\"\n    for i in range(len(stdin)):\n        a += stdin[i]\n    \n    return str(int(a[int(stdin) - 1]) )"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  ans = 0\n  while True:\n    ans = ans * 10 + n % 10\n    n //= 10\n    if n == 0:\n      return str(ans)\n\nstdin = '5'\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        print(str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str(next(iter(int(x) for x in str"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n % 10)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sequence = '1'\n    while len(sequence) < 40000000:\n        sequence = sequence + str(sum(int(i) for i in sequence))\n    return sequence[int(stdin)]\n\nprint(solution(input()))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  \n  n, m, r = map(int, stdin.split())\n  s = list(map(int, stdin.split()[1:]))\n  b = list(map(int, stdin.split()[2:]))\n\n  return max(s) - min(s) + max(b) - min(b)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(min(r, r+n, r+n+m))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    m, b = map(int, stdin.split())\n    s = sorted(s)\n\n    def buy(n, m, r, s):\n        dp = [0] * (r + 1)\n        for i in range(r + 1):\n            if i == 0:\n                dp[0] = 0\n            else:\n                for j in range(i + 1):\n                    if j == 0:\n                        dp[i] = dp[i - 1]\n                    elif s[j - 1] <= i:\n                        dp[i] = max(dp[i], dp[j - 1] + s[j - 1] * (i - j))\n\n        return dp[r]\n\n    def sell(n, m, r, s):\n        dp = [0] * (r + 1)\n        for i in range(r + 1):\n            if i == 0:\n                dp[0] = 0\n            else:\n                for j in range(i + 1):\n                    if j == 0:\n                        dp[i] = dp[i - 1]\n                    elif s[j - 1] <= i:\n                        dp[i] = max(dp[i], dp[j - 1] + s[j - 1] * (i - j))\n\n        return dp[r]\n\n    # print(buy(n, m, r, s))\n    return max(buy(n, m, r, s), sell(n, m, r, s))\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort(reverse=True)\n    b.sort(reverse=True)\n    if n == m and r == n:\n        return (sum(b) - r) // n\n    if sum(s) < sum(b):\n        return 0\n    if n > m and r > m:\n        return 0\n    if n > m:\n        return 0\n    if n > r:\n        return 0\n    if m > r:\n        return 0\n    return (b[0] * n + s[0]) // (n + r)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = sorted(map(int, stdin.split()))\n    m, r = map(int, stdin.split())\n    b = sorted(map(int, stdin.split()))\n    \n    return max(b[i] + r - s[i] for i in range(m))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # profit = 0\n    # for i in range(m):\n    #     if b[i] <= r:\n    #         profit += (b[i]-s[i])\n    # print(profit)\n    # return profit\n\n    # solution 2\n    dp = [0 for i in range(r+1)]\n    for i in range(1, r+1):\n        for j in range(1, n+1):\n            if i >= s[j-1]:\n                dp[i] = max(dp[i], dp[i-s[j-1]] + s[j-1]*(i-s[j-1]))\n    print(dp)\n    return dp[r]"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The answer.\"\"\"\n\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(max(n,m,r) - (n + m + r))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n, m, r = data[0], data[1], data[2]\n    s = list(map(int, stdin.split()[3:]))\n\n    def test_or_buy(s, n):\n        num_of_shares = 0\n        total_price = 0\n        while num_of_shares < n and total_price < r:\n            if total_price + s[num_of_shares] <= r:\n                total_price += s[num_of_shares]\n                num_of_shares += 1\n        return num_of_shares == n\n\n    def test_or_sell(s, n):\n        num_of_shares = 0\n        total_price = 0\n        while num_of_shares < n and total_price <= r:\n            if total_price - s[num_of_shares] >= 0:\n                total_price -= s[num_of_shares]\n                num_of_shares += 1\n        return num_of_shares == n\n\n    num_of_shares_to_buy = num_of_shares_to_sell = 0\n    if test_or_sell(s, n):\n        num_of_shares_to_sell = n\n        num_of_shares_to_buy = test_or_buy(s, n) - num_of_shares_to_sell\n        return max(num_of_shares_to_sell, num_of_shares_to_buy)\n\n    return max(0, num_of_shares_to_sell)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort()\n    b.sort(reverse=True)\n    dp = [[0]*(m+1) for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s[i-1] <= j:\n                dp[i][j] = max(dp[i-1][j-s[i-1]] + b[i-1], dp[i-1][j])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return str(max(dp[-1]))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort()\n    b.sort()\n\n    def binary(n):\n        ans = 0\n        while n!= 0:\n            n = int(n / 2)\n            ans = ans + n\n        return ans\n\n    def count(s, m, b):\n        if m == 0:\n            return 0\n        elif m == 1:\n            if b == 0:\n                return 0\n            return count(s, m - 1, b - s[m - 1]) + s[m - 1]\n        else:\n            if b == 0:\n                return count(s, m - 1, b - s[m - 1])\n            return count(s, m - 1, b) + count(s, m, b - s[m]) + s[m]\n\n    return count(s, m, b)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # iterate over the input\n    # splice the list into two halves\n    # determine if the difference in lists is even\n    # if it is not even, increment by 2 and recurse\n    # if it is even, check if its even and if it is\n    # if not, increment by 2 and recurse\n    # if it is even, print, decrement by 2 and recurse\n    # if it is not even, decrement by 2 and recurse\n\n    return ''\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2 == 1):\n        return -1\n    else:\n        return str(int(n / 2)) + '\\n' + str(int(n / 2))\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n%2 == 0):\n        print(2*((n//2)-1))\n        return\n    print(n//2)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return -1\n    return int(2 * n / 2)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    if n % 2 == 0:\n        while n > 0:\n            n = n // 2\n            count += 1\n        return str(count)\n    else:\n        return \"-\"\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return -1\n    return n // 2 * (n // 2 - 1) // 2"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n % 2 == 0:\n        return '-1'\n    if n < 5:\n        return '2'\n    if n > 10:\n        return '4'\n    if n % 2!= 0:\n        return '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    all_teams = 0\n    if n % 2 == 0:\n        all_teams = (n // 2) - 1\n    elif n % 2 == 1:\n        all_teams = (n // 2)\n    if all_teams == 0:\n        return -1\n    print(all_teams)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    def nth_prime(n: int) -> int:\n        i = 2\n        while True:\n            if is_prime(i):\n                if i == n:\n                    return i\n                elif i > n:\n                    return -1\n            i += 1\n    def nth_prime2(n: int) -> int:\n        n = int(n)\n        for i in range(2, n+1):\n            while n % i == 0:\n                n = n / i\n        return n\n    def nth_prime3(n: int) -> int:\n        n = int(n)\n        if n == 1:\n            return 1\n        for i in range(2, int(n**0.5)+1):\n            while n % i == 0:\n                n = n / i\n        return int(n)\n    return str(nth_prime(int(stdin)))\n\n\nsolution('25')\nsolution('3')\nsolution('2')"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    b = list(map(int, stdin.split()[2]))\n    beauty = 0\n    for i in range(n):\n        if s[i] == t[i]:\n            beauty += b[i]\n    return str(beauty)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s, b = stdin.split()\n    n = int(n)\n    s = \"\".join(sorted(s))\n    b = list(map(int, b.split()))\n    print(b)\n    b = sorted(b, reverse=True)\n    print(b)\n    a = 0\n    b = 0\n    print(a)\n    print(b)\n    ans = 0\n    for i in range(1, n):\n        if a + b[i - 1] <= b[i]:\n            a = b[i]\n            b = 0\n        else:\n            a += b[i]\n            b = 0\n            b += b[i]\n    ans = a\n    return ans\n\n\nsolution(input())\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    b = list(map(int, stdin.split()))\n    max_beauty = 0\n    for i in range(1, n):\n        if b[i] <= b[i - 1] + i:\n            continue\n        beauty = b[i] - (b[i - 1] + i)\n        max_beauty = max(max_beauty, beauty)\n    return str(max_beauty)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    #print(s)\n    starts = []\n    for i in range(n // 2):\n        start = s[i]\n        #print(start)\n        if s.count(start) % 2 == 0:\n            starts.append(start)\n    return str(len(starts) + max(0, n - 2 * len(starts)))\n\nsolution(input())\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    beauty = list(map(int, stdin.strip().split()[2]))\n    sorted_s = \"\".join(sorted(s))\n    beauty_ = 0\n    for i in range(1, n + 1):\n        if sorted_s[i - 1]!= sorted_s[i]:\n            beauty_ += beauty[i - 1]\n    return beauty_\n\nprint(solution(input()))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n % 2!= 0:\n        return -1\n    else:\n        b = [0] * n\n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                b[i] = i - b[i-1] - 1\n        return sum(b)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = []\n    n = len(s)\n    b = [0] * n\n    a = [0] * n\n\n    for i in range(n):\n        a[i] = ord(s[i])\n\n    for i in range(n):\n        if s[i] == a[i]:\n            b[i] = 1\n        else:\n            b[i] = 2\n\n    for i in range(n):\n        if i == 0:\n            t.append(b[i])\n        else:\n            t.append(t[i-1]+b[i])\n    return str(max(t))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    n = len(s)\n    s = list(s)\n    s = sorted(s)\n    b = stdin.rstrip().split()\n    b = list(map(int, b))\n    ans = 0\n    i = 0\n    while i < n:\n        if i >= n or s[i]!= b[i]:\n            break\n        else:\n            i += 1\n    if i < n:\n        s = list(s[i:])\n        s = sorted(s)\n        i = 0\n        while i < n:\n            if i >= n or s[i]!= b[i]:\n                break\n            else:\n                i += 1\n        ans = max(ans, i-i)\n    for i in range(1, n):\n        if i >= n:\n            break\n        s = list(s[i:])\n        s = sorted(s)\n        i = 0\n        while i < n:\n            if i >= n or s[i]!= b[i]:\n                break\n            else:\n                i += 1\n        ans = max(ans, i-i)\n    return ans"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    b = list(map(int, stdin[2].split()))\n    b = sorted(b)\n    max_beauty = 0\n    for i in range(1, n):\n        if s[i]!= s[i - 1]:\n            beauty = 0\n            for j in range(i + 1):\n                beauty += b[j]\n                if s[i] == s[j]:\n                    break\n            max_beauty = max(max_beauty, beauty)\n    return max_beauty\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin\n    ans = 0\n    for i in range(1, len(s) + 1):\n        # \u0438\u0449\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0443\u043a\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435\n        if i % 2 == 0:\n            s_ = s[:i]\n        else:\n            s_ = s[i - 1:: -1]\n        # \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0431\u0443\u043a\u0432 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439\n        b = 0\n        for c in s_:\n            if c == \"a\":\n                b += 1\n        # \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        for j in range(1, n, 2):\n            b += int(s[j])\n        # \u0435\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0431\u044b \u0431\u0443\u043a\u0432\u0430, \u0442\u043e \u043e\u043d\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0447\u0435\u0442\u043d\u043e\u0439\n        if s_!= s:\n            b += 1\n        if b > ans:\n            ans = b\n    return ans\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    w, m = map(int, stdin.split())\n    return 'YES' if check_weights(w, m) else 'NO'\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [w, m] = map(int, stdin.split())\n    p1 = (w // 3) + (w % 3)\n    p2 = (w // 2) + (w % 2)\n    if p1 == p2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, m = (int(i) for i in stdin.split())\n    # Weights are integers from 2 to 10^9\n    if m < 2 or w < 2:\n        return 'NO'\n    # Weights are integers from 2 to 10^9\n    if w % 2 == 0:\n        return 'NO'\n    if w == 2:\n        return 'YES'\n    if (w // 2) >= m:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if w <= 2 or m <= 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    weights, item = map(int, stdin.split())\n    pan_weight = item / 2\n    return 'YES' if weights >= pan_weight else 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    weights, item_mass = map(int, stdin.split())\n    left_pans_num = (weights - 1) // 2\n    right_pans_num = (weights + 1) // 2\n\n    left_pans_mass = 0\n    for left_pan_num in range(1, left_pans_num + 1):\n        left_pans_mass += left_pan_num * (left_pan_num + 1) // 2\n    left_pans_mass = left_pans_mass // 2\n    left_pans_mass += left_pans_mass % 2\n\n    right_pans_mass = 0\n    for right_pan_num in range(1, right_pans_num + 1):\n        right_pans_mass += right_pan_num * (right_pan_num + 1) // 2\n    right_pans_mass = right_pans_mass // 2\n    right_pans_mass += right_pans_mass % 2\n\n    if item_mass <= left_pans_mass and item_mass <= right_pans_mass:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if w == 1 and m >= 1:\n        return 'YES'\n    if w == 2 and m >= 1 and m <= 99:\n        return 'YES'\n    if w == 3 and m >= 1 and m <= 99:\n        return 'YES'\n    if w == 4 and m >= 1 and m <= 99:\n        return 'YES'\n    if w == 5 and m >= 1 and m <= 99:\n        return 'YES'\n    if w == 6 and m >= 1 and m <= 99:\n        return 'YES'\n    if w == 7 and m >= 1 and m <= 99:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if m < w:\n        return 'NO'\n    if m == w:\n        return 'YES'\n    return 'YES' if (m + w) % 100 == 0 else 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if w == m:\n        return 'YES'\n    else:\n        return 'NO'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if w == m:\n        return 'YES'\n    a = min(m, w)\n    b = max(m, w)\n    while a < b:\n        mid = (a + b) // 2\n        if mid > 0:\n            if a + mid <= m and m + mid <= b:\n                return 'YES'\n        else:\n            if a + mid >= m and m + mid >= b:\n                return 'YES'\n        a = mid + 1\n    return 'NO'\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # print(f'n: {n}, k: {k}')\n    if n < k:\n        return 'No'\n    if n == k:\n        return 'Yes'\n\n    # Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one.\n    # print(f'k: {k}')\n    # print(f'n: {n}')\n    i = n - k\n    # print(f'i: {i}')\n    # print(f'n-k: {n-k}')\n    # print(f'i - n - k: {i - n - k}')\n\n    while i <= n - 1:\n        # print(f'i: {i}')\n        # print(f'i - k: {i - k}')\n        if i - k < 0:\n            # print(f'i - k: {i - k}')\n            return 'No'\n        # print(f'i - k: {i - k}')\n        i = i - 2 * k\n\n    # print(f'i - k: {i - k}')\n    if i == n - 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"Yes\" if (n + k + 1) % 2 == 0 else \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    tot = 0\n    seq = []\n    for i in range(1, k + 1):\n        tot += 2 ** i\n        seq.append(2 ** i)\n    # print(seq)\n    print(k, tot)\n    res = []\n    for i in range(1, n + 1):\n        if i in seq:\n            res.append(i)\n    return \"Yes\" if res else \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    ans = ['No'] * k\n    cur = [0] * k\n    for i in range(1, n + 1):\n        for j in range(k):\n            cur[j] = cur[j] * 2 + i\n        if max(cur) == i:\n            ans[0] = i\n            cur = [0] * k\n    if ans[0] == 'No':\n        return 'No'\n    return''.join(map(str, ans))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return 'No' if n % 2 == 1 else 'Yes' +'' +''.join(map(str, range(k, -1, -1)))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def dp(n, k):\n        if n == 0:\n            return [-1] * k\n        \n        if n == 1:\n            return k*[1]\n        \n        l = dp(n-1, k)\n        r = dp(n-1, k-1)\n        \n        res = []\n        \n        for i in range(k):\n            if l[i] > r[i]:\n                res.append(l[i])\n                continue\n            \n            res.append(r[i])\n            \n        return res\n            \n        \n    return \"Yes\" if dp(n, k)[-1] == 1 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n + 1 - k):\n        s = 2 ** i\n        t = n - 2 ** (k - i)\n        if s == t:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0: return 'No'\n    largest_k_powers = {n ** i: i for i in range(1, k + 1)}\n    biggest_number_in_largest_k_powers = max(largest_k_powers.keys())\n    for i in range(k, 0, -1):\n        if i == 1:\n            continue\n        if largest_k_powers[n ** i] < biggest_number_in_largest_k_powers:\n            return \"No\"\n        else:\n            largest_k_powers[n ** i] = biggest_number_in_largest_k_powers\n    for i in range(k):\n        if i == 0:\n            continue\n        if largest_k_powers[n ** i] > biggest_number_in_largest_k_powers:\n            return \"No\"\n        else:\n            largest_k_powers[n ** i] = biggest_number_in_largest_k_powers\n    return''.join(str(e) for e in largest_k_powers.values())\n\n\nsolution(\"23 5\")\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = (int(x) for x in stdin.split())\n    ans = [0] * k\n    for i in range(k):\n        ans[i] = int(math.pow(2, i) * n)\n    for i in range(k):\n        for j in range(i+1, k):\n            if ans[i] < ans[j]:\n                ans[i], ans[j] = ans[j], ans[i]\n    return 'Yes' if ans[0] == n else 'No'"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,t = list(map(int, stdin.split()))\n    \n    def fill(i: int) -> int:\n        if i == 1:\n            return 1\n        elif i >= 3:\n            return i//3\n        else:\n            return 1\n        \n    return sum(fill(i) for i in range(n,0,-1))\n\nsolution(input())\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    return str(math.factorial(n)/(math.factorial(2)*math.factorial(n-2)) )\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    glass_list = [n]\n    glass_list += [0] * (n - 1)\n    while n > 1:\n        temp = [0] * n\n        for i in range(n - 1):\n            temp[i] += 1\n            if i == n - 2:\n                if glass_list[i + 1] < 1:\n                    glass_list[i] += 1\n                else:\n                    temp[i] += 1\n            elif glass_list[i + 1] < 2:\n                glass_list[i] += 1\n            else:\n                temp[i] += 1\n        n = n - 1\n    return str(sum(glass_list))\n    return str(sum([1] * n))\n    return str(sum([1] * (n - 1)))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, t = stdin.pop(0).split()\n    n = int(n)\n    t = int(t)\n    for i in range(t):\n        glass = stdin.pop(0)\n        if glass == \"D\":\n            print(\"C\")\n        elif glass == \"U\":\n            print(\"C\")\n            stdin.append(\"D\")\n            print(\"D\")\n        elif glass == \"B\":\n            print(\"B\")\n            stdin.append(\"C\")\n            print(\"D\")\n        elif glass == \"L\":\n            print(\"C\")\n            stdin.append(\"U\")\n            print(\"U\")\n        elif glass == \"R\":\n            print(\"D\")\n            stdin.append(\"B\")\n            print(\"B\")\n        else:\n            print(glass)\n    return\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(t * n - (t - 1) * (n - 1))"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    if t == 0:\n        return \"1\"\n    return str(1 if n == 2 else int(n * (n - 1) / 2))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if t >= n or n % 2 == 0:\n        return '-1'\n    return str(n // 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = stdin.strip().split(\"\\n\")\n    l = len(a)\n    for i in range(l):\n        if int(a[i].split()[0]) == int(a[i].split()[1]):\n            return \"-1\"\n    x, y = a[0].split()\n    x, y = int(x), int(y)\n    return str(x*y)\n\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.rstrip(\"\\n\").split()\n    n = int(inp.pop(0))\n    points = []\n    for i in range(n):\n        x, y = list(map(int, inp[i*2:(i+1)*2]))\n        points.append((x, y))\n    if len(points) == 2:\n        return str(-1)\n    points.sort()\n    x1 = min(points, key=lambda x: x[0])[0]\n    x2 = max(points, key=lambda x: x[0])[0]\n    y1 = min(points, key=lambda x: x[1])[1]\n    y2 = max(points, key=lambda x: x[1])[1]\n    return str(abs(x2 - x1) * abs(y2 - y1))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    xs, ys = map(int, stdin.split())\n    return str(max(abs(x) + abs(y) for x, y in ((xs, ys), (xs, -ys), (-xs, -ys), (-xs, ys))))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '-1' if n % 4!= 0 else str(int(n / 4 * 4))"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    elif n == 2:\n        return '-1'\n    else:\n        x = list(map(int, stdin.split()))\n        x = sorted(set(x))\n        if len(x) == 2:\n            return str(abs(x[0] - x[1]))\n        else:\n            return '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def point_distance(x1: int, y1: int, x2: int, y2: int) -> float:\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def rectangle_area(x1: int, y1: int, x2: int, y2: int) -> float:\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    points = list(map(lambda x: list(map(int, x.split(' '))), stdin.split('\\n')))\n\n    def validate(point: list, x_axis: float, y_axis: float) -> bool:\n        for p in points:\n            if point_distance(x_axis, y_axis, p[0], p[1]) > ((x_axis + y_axis) / 2) or point_distance(x_axis, y_axis, p[0], p[1]) < ((x_axis + y_axis) / 2):\n                return False\n\n        return True\n\n    x_axis = float('inf')\n    y_axis = float('inf')\n\n    for point in points:\n        if point_distance(x_axis, y_axis, point[0], point[1]) < ((x_axis + y_axis) / 2) and validate(point, x_axis, y_axis):\n            x_axis = point[0]\n            y_axis = point[1]\n\n    if rectangle_area(x_axis, y_axis, min(points, key=lambda x: x[0])[0], min(points, key=lambda x: x[1])[1]) == ((x_axis + y_axis) / 2):\n        return str(rectangle_area(x_axis, y_axis, min(points, key=lambda x: x[0])[0], min(points, key=lambda x: x[1])[1]))\n    else:\n        return '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = stdin.split()\n    area = -1\n    for i in range(n):\n        x_i = int(vertices[i * 2])\n        y_i = int(vertices[i * 2 + 1])\n        if area < 0:\n            area = x_i * y_i\n        else:\n            area = max(area, x_i * y_i)\n    if area > 0:\n        return str(area)\n    else:\n        return str(area)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = []\n    for i in range(n):\n        x, y = list(map(int, stdin.split()))\n        vertices.append((x, y))\n    for i in range(n):\n        x1, y1 = vertices[i]\n        for j in range(i+1, n):\n            x2, y2 = vertices[j]\n            if x1 == x2:\n                if abs(y1-y2) > 1:\n                    return -1\n            if y1 == y2:\n                if abs(x1-x2) > 1:\n                    return -1\n    return n\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    if n % 2!= 0:\n        n += 1\n        a += 1\n        b += 1\n    print(n, a, b)\n    print(a//2, b//2, n//2)\n    if a <= n and b <= n:\n        return str(min(n - a, n - b))\n    elif a <= n and b > n:\n        return str(min(n - a, n - b))\n    elif a > n and b <= n:\n        return str(min(n - a, n - b))\n    else:\n        return str(min(n - a, n - b))\n\nprint(solution(\"8\"))\nprint(solution(\"5\"))\nprint(solution(\"6\"))\nprint(solution(\"20\"))\nprint(solution(\"50\"))\nprint(solution(\"100\"))\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    half_length = length / 2\n    total_height = length - half_length\n    return str(2 * total_height)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = int(stdin.split(' ')[1]), int(stdin.split(' ')[2])\n    count = 0\n    while a+b > n or n > a+b:\n        if a+b > n:\n            count += n//(a+b)\n            n %= (a+b)\n        else:\n            count += n//(a)\n            n %= (a)\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    return str(int(n)//2)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n\n    def manhattan(length):\n        a = 0\n        b = 0\n        for i in range(0, length):\n            a = a + 1\n            b = b + 1\n\n        a = a - 1\n        b = b - 1\n        return abs(a - b)\n\n    A_set = set()\n    B_set = set()\n\n    for i in range(1, N + 1):\n        A_set.add(i)\n\n    for i in range(1, N + 1):\n        B_set.add(i)\n\n    A_set_list = list(A_set)\n    B_set_list = list(B_set)\n\n    def manhattan_set(length, A, B):\n        A_set_list = []\n        B_set_list = []\n        for i in range(1, N + 1):\n            A_set_list.append(i)\n            B_set_list.append(i)\n\n        for i in range(1, length):\n            A_set_list = A_set_list + A\n            B_set_list = B_set_list + B\n\n        A_set_list = A_set_list + A\n        B_set_list = B_set_list + B\n\n        A_set_list.sort()\n        B_set_list.sort()\n        print(A_set_list, B_set_list)\n        a = 0\n        b = 0\n        for i in range(0, length):\n            a = a + 1\n            b = b + 1\n\n        a = a - 1\n        b = b - 1\n        print(a, b)\n        count = 0\n        for i in range(0, len(A_set_list)):\n            if A_set_list[i]!= A_set_list[i - 1] + 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] + 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n\n        if len(B_set_list) == 0:\n            return count\n        else:\n            return count + (len(B_set_list) - 1) * (len(A_set_list) - 1)\n\n    def manhattan_set(length, A, B):\n        A_set_list = []\n        B_set_list = []\n        for i in range(1, N + 1):\n            A_set_list.append(i)\n            B_set_list.append(i)\n\n        for i in range(1, length):\n            A_set_list = A_set_list + A\n            B_set_list = B_set_list + B\n\n        A_set_list = A_set_list + A\n        B_set_list = B_set_list + B\n\n        A_set_list.sort()\n        B_set_list.sort()\n        print(A_set_list, B_set_list)\n        a = 0\n        b = 0\n        for i in range(0, length):\n            a = a + 1\n            b = b + 1\n\n        a = a - 1\n        b = b - 1\n        print(a, b)\n        count = 0\n        for i in range(0, len(A_set_list)):\n            if A_set_list[i]!= A_set_list[i - 1] + 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] + 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1] - 1:\n                count = count + 1\n            if A_set_list[i]!= A_set_list[i - 1]:\n                count"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    return str(max(2,(a+b)//4))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_bar_length = int(stdin)\n    if total_bar_length % 2!= 0:\n        print(1)\n    else:\n        print(total_bar_length // 2)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n\n    answer = 2 * (n - max(a, b)) + (n - max(a, b)) * (n - max(a, b)) + (n - max(a, b)) * (n - max(a, b))\n\n    return str(answer)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin.split())"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    #print(a)\n    a_list = list(set(a))\n    a_list.sort()\n    #print(a_list)\n    #print(a_list[0],a_list[-1])\n    #print(a_list)\n    #print(sorted(a_list))\n    if sorted(a_list) == a_list:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nsequence = input()"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(1,len(a)):\n        if a[i-1] > a[i]:\n            return \"NO\"\n    return \"YES\"\n\n\n\n\n\n\"\"\"\n\n\n\nimport math\ndef"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    a = sorted(a)\n    print(a)\n    if a == sorted(a):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n\n\n\na = '101010'\nn = len(a)\nfor i in range(n-1):\n    if a[i]!= a[i+1]:\n        break\nprint(i)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    flag = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                flag = False\n                break\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[1:]\n    a = [(int(i) if i!= '0' else 0) for i in a[0].split(' ')]\n    sorted(a)\n    if a == sorted(a):\n        return 'YES'\n    return 'NO'\n\n\nprint(solution(stdin))\n\n\n\n#######\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split(\"\\n\")\nn = int(stdin[0])\narr = list(map(int, stdin[1].split()))\n\nseq = list(stdin[2])\n\nfor i in range(len(seq)):\n    if seq[i] == \"1\":\n        if i == 0:\n            if arr[i + 1] > arr[i]:\n                return \"NO\"\n        else:\n            if arr[i - 1] > arr[i] or arr[i + 1] > arr[i]:\n                return \"NO\"\n\nreturn \"YES\""
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    seats = stdin.splitlines()\n    l = []\n    for i in range(1, 10):\n        l.append(i)\n    last = int(l[-1]) + 1\n    for s in seats[1:]:\n        if int(s[-1]) == last:\n            last += 1\n        l.append(last)\n    return str(l[-1] - int(seats[0][0]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '10'\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def move(n,s):\n        if s == 'a':\n            if n == 1:\n                return 1\n            elif n == 2:\n                return 1 + move(n-1, 'b')\n            else:\n                return move(n-1, 'c') + move(n-2, 'd')\n        elif s == 'c':\n            if n == 1:\n                return 2\n            elif n == 2:\n                return 2 + move(n-1, 'b')\n            else:\n                return move(n-1, 'a') + move(n-2, 'd')\n        elif s == 'd':\n            if n == 1:\n                return 3\n            elif n == 2:\n                return 3 + move(n-1, 'b')\n            else:\n                return move(n-1, 'c') + move(n-2, 'a')\n    seat = stdin\n    row = seat[:1]\n    col = seat[1:]\n    row_count = row.count('0') + 1\n    seat_count = len(col)\n    return str(move(row_count, col[0]) + move(row_count, col[-1]))\n    \n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    all_seats = {}\n    for row, seat in enumerate(stdin.split(), 1):\n        all_seats[seat] = row\n    result = 0\n    for row in range(1, 11):\n        if result > 5:\n            break\n        for seat in ['a', 'b', 'c', 'd', 'e', 'f']:\n            if all_seats.get(seat) is not None and all_seats.get(seat) + 2 == row:\n                result += 1\n    return str(result)"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = []\n    for i in range(6):\n        rows.append(i + 1)\n    n = len(rows)\n    time = 0\n    while True:\n        if time == n:\n            break\n        for i in range(len(rows)):\n            if rows[i] <= rows[time] and rows[time] + 2 <= rows[i]:\n                rows[time] = rows[i] + 2\n                break\n            if rows[i] + 2 > rows[time] and rows[time] + 1 <= rows[i]:\n                rows[time] = rows[i] + 1\n                break\n        time += 1\n    return str(time)\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = []\n    for row in stdin.split('\\n'):\n        rows.append(row)\n\n    result = 0\n    while len(rows) > 1:\n        for row in range(1, len(rows)):\n            result += 1\n            rows = rows[:row] + rows[row+1:]\n        result += 1\n        for row in range(len(rows)):\n            if len(rows[row]) >= 2:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    count = 0\n    for i in x:\n        count += int(i[0])\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lst = stdin.split()\n    row = int(stdin_lst[0])\n    seat = stdin_lst[1]\n    count = 0\n    while row > 0:\n        if row == 5:\n            count += 3\n            break\n        if row % 2 == 0:\n            count += 2\n        else:\n            count += 1\n        row //= 2\n    count += 1\n    if seat == \"a\":\n        count += 1\n    elif seat == \"b\":\n        count += 2\n    elif seat == \"c\":\n        count += 3\n    elif seat == \"d\":\n        count += 4\n    elif seat == \"e\":\n        count += 5\n    elif seat == \"f\":\n        count += 6\n    return str(count)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    X, Y = int(stdin[0]), int(stdin[2])\n    bX, bY = 10 ** (len(str(X))), 10 ** (len(str(Y)))\n    print(bX, bY)\n    X_base = bin(X)[2:]\n    Y_base = bin(Y)[2:]\n    print(X_base, Y_base)\n    print(len(X_base), len(Y_base))\n    for i in range(max(len(X_base), len(Y_base))):\n        if X_base[i]!= Y_base[i]:\n            if X_base[i] > Y_base[i]:\n                return '>'\n            else:\n                return '<'\n    return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b_x = stdin.split('\\n')\n    x = list(map(int, n.split()))\n    m, b_y = stdin.split('\\n')\n    y = list(map(int, m.split()))\n    if x[0] < y[0]:\n        return '<'\n    if x[0] > y[0]:\n        return '>'\n    if x[0] == y[0]:\n        if x[0] == x[1] and x[1] == x[2]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9] and x[9] == x[10]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9] and x[9] == x[10] and x[10] == x[11]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9] and x[9] == x[10] and x[10] == x[11] and x[11] == x[12]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9] and x[9] == x[10] and x[10] == x[11] and x[11] == x[12] and x[12] == x[13]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9] and x[9] == x[10] and x[10] == x[11] and x[11] == x[12] and x[12] == x[13] and x[13] == x[14]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5] and x[5] == x[6] and x[6] == x[7] and x[7] == x[8] and x[8] == x[9] and x[9] == x[10] and x[10] == x[11] and x[11] == x[12] and x[12] == x[13] and x[13] == x[14] and x[14] == x[15]:\n            return '='\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x["
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split()\n    n = int(n)\n    x = list(map(int, x.split()))\n    y = list(map(int, y.split()))\n\n    def b2n(number, b):\n        if number < 10:\n            return number\n        return int(str(number)[-1])\n\n    for i in range(n):\n        if b2n(x[i], 2) < b2n(y[i], 2):\n            return '<'\n        if b2n(x[i], 2) > b2n(y[i], 2):\n            return '>'\n        if b2n(x[i], 2) == b2n(y[i], 2):\n            if x[i] < y[i]:\n                return '<'\n            if x[i] > y[i]:\n                return '>'\n            return '='\n\n\nsolution(\"3 3\\n1 0 2\\n2 5\\n\")\nsolution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\\n\")"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, bx = list(map(int, stdin.split()))\n    xs = list(map(int, stdin.split()[1]))\n    m, by = list(map(int, stdin.split()[2]))\n    ys = list(map(int, stdin.split()[3]))\n    xs_repr = []\n    ys_repr = []\n    for i in range(n):\n        xs_repr.append(int(str(xs[i]) + str(xs[i + 1]) + str(xs[i + 2]) + str(xs[i + 3]) + str(xs[i + 4]) + str(xs[i + 5]) + str(xs[i + 6])))\n        ys_repr.append(int(str(ys[i]) + str(ys[i + 1]) + str(ys[i + 2]) + str(ys[i + 3]) + str(ys[i + 4]) + str(ys[i + 5]) + str(ys[i + 6])))\n    if xs_repr[-1] < ys_repr[-1]:\n        return '<'\n    if xs_repr[-1] > ys_repr[-1]:\n        return '>'\n    if xs_repr[-1] == ys_repr[-1]:\n        return '='\n\nprint(solution(input()))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m = int(input[0]), int(input[1])\n    x = sorted(list(map(int, input[2:])), reverse=True)\n    y = sorted(list(map(int, input[3:])), reverse=True)\n\n    if n > m:\n        y = y[::-1]\n        for i in range(n - m):\n            y[i] += 1\n\n    if n < m:\n        x = x[::-1]\n        for i in range(m - n):\n            x[i] += 1\n\n    for i in range(n):\n        if x[i] < y[i]:\n            return '<'\n        if x[i] > y[i]:\n            return '>'\n    return '='\n\n\nsolution('''\n3 4\n1 0 1 1 1 1\n2 10\n4 7\n''')\n\nsolution('''\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n''')"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,b_x = map(int,stdin.split())\n    x_digits = list(map(int,stdin.split()[1]))\n    m,b_y = map(int,stdin.split())\n    y_digits = list(map(int,stdin.split()[3]))\n    x = int(''.join(map(str,x_digits)),b_x)\n    y = int(''.join(map(str,y_digits)),b_y)\n    if x < y:\n        return '<'\n    if x > y:\n        return '>'\n    if x == y:\n        return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,bx,x = stdin.split()\n    ny = ''.join(sorted(x, reverse=True))\n\n    #print(n,bx,x,ny)\n    if nx == ny:\n        return '='\n    elif nx > ny:\n        return '>'\n    elif nx < ny:\n        return '<'"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # return \"=\" if stdin == stdin else \">\" if int(stdin) > int(stdin.replace(\"_\",\"\")) else \"<\"\n    # return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n    # return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n    # return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int(stdin) < int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \">\"\n\n    return stdin if int(stdin) > int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") if int(stdin) == int(stdin.replace(\"_\",\"\")) else stdin.replace(\"_\",\"\") + \"=\" if stdin == stdin.replace(\"_\",\"\") else stdin.replace(\"_\",\"\") + \">\" if int"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b_x = stdin.split()\n    x = list(map(int, stdin.split()[1:]))\n    m, b_y = stdin.split()\n    y = list(map(int, stdin.split()[1:]))\n    if int(n) > int(m):\n        return '>'\n    elif int(n) < int(m):\n        return '<'\n    else:\n        for i in range(int(n)):\n            if x[i] > y[i]:\n                return '>'\n            elif x[i] < y[i]:\n                return '<'\n        return '='\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    a = stdin[1:]\n    l = len(a)\n\n    dp = [[None] * (l + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, l + 1):\n            dp[i][j] = dp[i - 1][j - 1]\n            if a[i - 1] <= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - a[i - 1]] + a[i - 1])\n\n    return \"BitAryo\" if dp[n][l] else \"BitLGM\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    return 'BitAryo' if min(a) <= min(min(a), max(a)) else 'BitLGM'"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    a = list(map(int, lines.pop(0).split()))\n    lgm_win = False\n    aryo_win = False\n    lgm = 0\n    aryo = 0\n    # print(n, a)\n    for i in range(n):\n        if lgm_win:\n            if aryo_win:\n                aryo = aryo - 1\n            else:\n                lgm = lgm - 1\n        if lgm == 0:\n            lgm_win = True\n        if aryo == 0:\n            aryo_win = True\n        if a[i] > aryo:\n            aryo = aryo + a[i] - 1\n        if a[i] < lgm:\n            lgm = lgm - a[i] + 1\n    if lgm_win:\n        return \"BitLGM\"\n    if aryo_win:\n        return \"BitAryo\"\n    return \"Nobody\""
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    if n == 1:\n        return 'BitAryo'\n    elif n == 2:\n        return 'BitAryo' if a[0] == a[1] else 'BitLGM'\n    else:\n        l = [1, 2]\n        for i in range(1, n):\n            l.append(l[i - 1] + a[i - 1])\n\n        if n == 3:\n            return 'BitLGM' if a[0] == a[1] and a[1] == a[2] else 'BitAryo'\n\n        i = 3\n        while i < n and a[i] == a[i - 1] and a[i] == a[i - 2]:\n            i += 1\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n\n        if i == n:\n            return 'BitLGM' if a[0] == a[1] else 'BitAryo'\n\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n\n        i = 0\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n\n        if i == n:\n            return 'BitLGM' if a[0] == a[1] else 'BitAryo'\n\n        while i < n and a[i] == a[i - 1] and a[i] == a[i - 2]:\n            i += 1\n\n        if i == n:\n            return 'BitLGM' if a[0] == a[1] else 'BitAryo'\n\n        i = 0\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n\n        if i == n:\n            return 'BitLGM' if a[0] == a[1] else 'BitAryo'\n\n        if n == 3:\n            return 'BitLGM' if a[0] == a[1] and a[1] == a[2] else 'BitAryo'\n\n        i = 3\n        while i < n and a[i] == a[i - 1] and a[i] == a[i - 2]:\n            i += 1\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n\n        if i == n:\n            return 'BitLGM' if a[0] == a[1] else 'BitAryo'\n\n        return 'BitLGM' if a[0] == a[1] else 'BitAryo'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    arr = list(map(int, stdin.pop(0).split()))\n    i = 0\n    winner = \"BitLGM\"\n    while i < n:\n        if arr[i] >= arr[i + 1]:\n            winner = \"BitAryo\"\n            break\n        i += 2\n    return winner\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '2':\n        return 'BitLGM'\n    elif stdin == '3':\n        return 'BitAryo'"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    if max(sequence) <= 1:\n        return \"BitAryo\"\n    sequence.sort()\n    if sequence[-1] >= sequence[0]:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n\nprint(solution(input()))\n'''\n\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    n = int(a[0])\n    a = list(map(int, a[1].split(\" \")))\n    a_min = min(a)\n    a_max = max(a)\n    if n == 2:\n        if a_max - a_min <= 1:\n            return \"BitAryo\"\n        else:\n            return \"BitLGM\"\n    \n    def get_next_a(a):\n        res = []\n        for i in range(len(a)):\n            if a[i] == a_min or a[i] == a_max:\n                res.append(a[i])\n            else:\n                if a[i] >= a_min:\n                    res.append(a[i] - 1)\n                if a[i] <= a_max:\n                    res.append(a[i] + 1)\n        return res\n    \n    a1 = get_next_a(a)\n    a2 = get_next_a(a1)\n    a3 = get_next_a(a2)\n    if int(a_min) == int(a_max):\n        return \"BitLGM\"\n    if a1[0] == a_min and a2[0] == a_min and a3[0] == a_min:\n        return \"BitLGM\"\n    if a1[0] == a_max and a2[0] == a_max and a3[0] == a_max:\n        return \"BitAryo\"\n    \n    if a1[0] == a_max and a2[0] == a_max and a3[0] == a_max:\n        return \"BitAryo\"\n    if a1[0] == a_min and a2[0] == a_min and a3[0] == a_min:\n        return \"BitLGM\"\n    \n    return \"BitAryo\" if a1[0] == a_max else \"BitLGM\"\nsolution(stdin)"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    while len(a) > 1:\n        a.sort()\n        a.pop()\n        a.pop()\n        a.sort(reverse=True)\n    if a[0] > a[1]:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n\nsolution(\"2\\n1 1\\n\")\nsolution(\"2\\n1 2\\n\")\nsolution(\"3\\n1 2 1\\n\")"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    # n = 3\n    # a = [1, 2, 1]\n    # n = 4\n    # a = [1, 2, 1, 2]\n    # n = 5\n    # a = [1, 2, 1, 2, 1]\n    # n = 6\n    # a = [1, 2, 1, 2, 1, 2]\n    # n = 7\n    # a = [1, 2, 1, 2, 1, 2, 1]\n\n    if n == 1:\n        return 'BitAryo'\n\n    for i in range(n):\n        if i == 0:\n            continue\n\n        if i == 1:\n            if a[1] < a[0]:\n                return 'BitLGM'\n\n            if a[1] == a[0]:\n                if a[2] < a[1]:\n                    return 'BitLGM'\n                else:\n                    return 'BitAryo'\n        else:\n            if a[i] < a[i - 1]:\n                return 'BitAryo'\n            else:\n                if a[i] > a[i - 1]:\n                    return 'BitLGM'\n\n    return 'BitAryo'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k % n:\n        return '0'\n    # x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n    # x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n    # x = 1, y = 0;  x = 0, y = 1;  x = 0, y = 0;  x = 1, y = 0.\n    # x = 0, y = 1;  x = 1, y = 0;  x = 0, y = 1;  x = 1, y = 0.\n    if n <= 4:\n        return str(n)\n    x, y = (0, 1)\n    for i in range(2, n + 1):\n        y = (x + y) % k\n        x = (x + y) % k\n    return str(x + y)\n\n\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = 0\n    y = 0\n    ans = 1\n    for i in range(1, n + 1):\n        x = (x + i) % k\n        y = (k - y - i) % k\n        ans = ans * x * y\n    return str(ans)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k <= n:\n        if n % k == 0:\n            return \"1\"\n        else:\n            return str(n // k + 1)\n    else:\n        return str(0)\n\n'''"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    x = 0\n    y = 0\n    count = 0\n    for i in range(n):\n        if x == 0 and y == 0:\n            count += 1\n        else:\n            x += a[i]\n        y += a[n-i-1]\n        if x % k == 0 and y % k == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = 0\n    y = 0\n    x_lim = 0\n    y_lim = 0\n    for i in range(n):\n        if a[i] == max(a):\n            x_lim = x_lim + 1\n        if a[-1 - i] == max(a):\n            y_lim = y_lim + 1\n    for i in range(n):\n        if a[i] == max(a):\n            x = x + 1\n        if a[-1 - i] == max(a):\n            y = y + 1\n    for i in range(x_lim):\n        a.pop(0)\n    for i in range(y_lim):\n        a.pop(-1)\n    print(x * y)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(count_ways(n, k))\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    card_n = len(cards)\n    \n    ans = 0\n    for x in range(card_n - 1, -1, -1):\n        for y in range(card_n - 1, -1, -1):\n            if not (x or y):\n                continue\n            if x * cards[x] % k == y * cards[y] % k:\n                ans += 1\n    \n    print(ans)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  a = list(map(int, stdin.split()))\n  a.sort()\n  count = 0\n  for x in range(n - 1, -1, -1):\n    for y in range(n - 1, x - 1, -1):\n      if a[x] % k == 0:\n        if a[y] % k == 0:\n          count += 1\n  return str(count)\n\nsolution(input())"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nfrom collections import Counter\ndef"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    s = stdin.replace(\"\\n\", \"\")\n    d = dict()\n    for i in range(n):\n        d[s[i]] = i\n    friends = {}\n    for _ in range(k):\n        f, s = stdin.split()\n        s = s.replace(\"\\n\", \"\")\n        for i in range(n):\n            if s[i] not in friends:\n                friends[s[i]] = 1\n    for i in friends.values():\n        if i > 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if len(s) == 1:\n        return 'YES' if n == 1 else 'NO'\n    for i in range(n - 1):\n        if s.count(s[i]) == 2:\n            return 'NO'\n        elif s.count(s[i]) == 1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    color = stdin[2]\n    friends = set()\n    count = 0\n\n    for i in range(1, n + 1):\n        if color[i - 1] == color[0]:\n            count += 1\n\n    if count == n - k + 1:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdin\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    baloons = sorted(stdin.split())\n    baloons_dict = {}\n    for baloon in baloons:\n        baloons_dict[baloon] = baloons_dict.get(baloon, 0) + 1\n    friends_dict = {baloon: baloons_dict.get(baloon) for baloon in baloons_dict.keys()}\n    friends = sorted(friends_dict.keys(), key=lambda x: -1 * friends_dict[x])\n    print(friends)\n    result = \"YES\"\n    for friend in friends:\n        if friends_dict[friend] == 1 and baloons_dict[friend] == 1:\n            continue\n        elif friends_dict[friend] == 2 and baloons_dict[friend] == 1:\n            result = \"NO\"\n            break\n        elif friends_dict[friend] == 1 and baloons_dict[friend] == 2:\n            result = \"NO\"\n            break\n        elif friends_dict[friend] == 2 and baloons_dict[friend] == 2:\n            result = \"NO\"\n            break\n        elif friends_dict[friend] == 2 and baloons_dict[friend] == 3:\n            result = \"YES\"\n            break\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    if k == 0:\n        return 'NO'\n    colors = stdin.lower()\n    colors_dict = {x: [] for x in set(colors)}\n    for index, el in enumerate(colors):\n        colors_dict[el].append(index + 1)\n    friends = []\n    while k > 0 and len(colors_dict['a']) > 0:\n        colors_dict['a'] = []\n        colors_dict['b'] = []\n        colors_dict['c'] = []\n        colors_dict['d'] = []\n        colors_dict['e'] = []\n        for color, indexes in colors_dict.items():\n            if color == 'a':\n                if len(indexes) > 1:\n                    index = indexes[0] - 1\n                    if len(indexes) > 1:\n                        index = indexes[1] - 1\n                    friends.append(index)\n                    k -= 1\n            elif color == 'b':\n                if len(indexes) > 1:\n                    index = indexes[0] - 1\n                    if len(indexes) > 1:\n                        index = indexes[1] - 1\n                    friends.append(index)\n                    k -= 1\n            elif color == 'c':\n                if len(indexes) > 1:\n                    index = indexes[0] - 1\n                    if len(indexes) > 1:\n                        index = indexes[1] - 1\n                    friends.append(index)\n                    k -= 1\n            elif color == 'd':\n                if len(indexes) > 1:\n                    index = indexes[0] - 1\n                    if len(indexes) > 1:\n                        index = indexes[1] - 1\n                    friends.append(index)\n                    k -= 1\n            elif color == 'e':\n                if len(indexes) > 1:\n                    index = indexes[0] - 1\n                    if len(indexes) > 1:\n                        index = indexes[1] - 1\n                    friends.append(index)\n                    k -= 1\n    if k!= 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    baloons = stdin.split()\n    #print(n, k, baloons)\n    k_friends = list(range(k))\n    #print(k_friends)\n    k_colors = {}\n    for i in range(n):\n        k_colors[baloons[i]] = i\n    #print(k_colors)\n    friends_colors = set()\n    for i in range(n):\n        if i+1 in k_friends:\n            if baloons[i] in k_colors:\n                friends_colors.add(k_colors[baloons[i]])\n    #print(friends_colors)\n    if len(friends_colors) < k:\n        return 'NO'\n    else:\n        return 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    baloons = list(s[1])\n    friends = int(s[0])\n    sorted_baloons = sorted(baloons)\n    for friend in range(1, friends + 1):\n        if sorted_baloons == sorted(baloons):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    baloons = stdin.split()\n    #print(n,k,baloons)\n    if n <= k <= 100:\n        if len(baloons) == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n, k, s = int(n), int(k), stdin.strip()\n    if k >= len(s):\n        return \"NO\"\n    return \"YES\" if set(s) == set(s[:k]) == set(s[k:2 * k]) else \"NO\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    min1 = min2 = min3 = float('inf')\n    for i in range(n):\n        if arr[i] < min1:\n            min3 = min2\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min3 = min2\n            min2 = arr[i]\n        elif arr[i] < min3:\n            min3 = arr[i]\n    return abs(min1 - min2) + abs(min2 - min3)"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    arr = list(map(int, x[1:]))\n    dist = 1e7\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            dist = min(dist, abs(arr[i] - arr[j]))\n    return str(dist)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    first_min = arr.index(min(arr))\n    distance = float(\"inf\")\n    for i in range(len(arr)):\n        if i!= first_min and abs(arr[first_min] - arr[i]) < distance:\n            distance = abs(arr[first_min] - arr[i])\n    return str(distance)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    d = dict()\n    min_d = float('inf')\n    for val in arr:\n        if val in d:\n            d[val] += 1\n        else:\n            d[val] = 1\n        min_d = min(min_d, d[val])\n\n    d = dict()\n    max_d = -float('inf')\n    for val in arr:\n        if val in d:\n            d[val] += 1\n        else:\n            d[val] = 1\n        max_d = max(max_d, d[val])\n\n    return max_d - min_d\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    dist = []\n    # k_min = arr[0]\n    for k in range(n):\n        # for j in range(n - 1):\n        #     if arr[j] <= arr[j + 1]:\n        #         arr[j], arr[j + 1] = arr[j + 1], arr[j]\n        #         k_min = arr[j + 1]\n        #     else:\n        #         k_min = arr[j]\n        #     dist.append(abs(arr[j] - k_min))\n\n        dist.append(abs(min(arr[:k + 1]) - arr[k]))\n    return max(dist)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = float('inf')\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            continue\n        else:\n            d = min(a[i+1] - a[i], d)\n    return d\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    n = len(arr)\n    min_val = min(arr)\n    min_ind = arr.index(min_val)\n    \n    for i in range(min_ind+1, n):\n        if arr[i] < min_val:\n            return str(i-min_ind)\n    \n    return str(min_ind)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    n = len(a)\n    x, y = float('inf'), float('inf')\n    for i in range(n-1, -1, -1):\n        if a[i] < x:\n            x = a[i]\n            i = n - 1\n        elif a[i] < y:\n            y = a[i]\n    return str(y - x)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    dists = []\n    \n    for i in range(n):\n        dists.append(abs(int(arr[i]) - min(arr)))\n    \n    # dists = list(map(abs, arr))\n    \n    print(min(dists))\n\nsolution(input())\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    a = list(map(int, stdin.split()))\n\n    b = min(a)\n    c = a.index(min(a))\n    if c == n - 1:\n        return\n    d = min(a[c + 1:])\n    e = a[c + 1:].index(min(a[c + 1:])) + 1 + c\n    print(abs(d - b) + abs(e - c))\n\n\nsolution()\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.strip().split())\n    return str(t*b//(w*t+b*w))\n\nprint(solution(input()))\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    def p(n):\n        return (2*n+1)//2\n    return (w+b)/t+1/p(w)+1/p(b)\n\nprint(solution(input()))"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, t, w, b = map(int, stdin.strip().split())\n    if t <= w <= b <= 10 ** 18:\n        return (t - w - b) / (t - w + b)\n    else:\n        return \"N/A\"\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    w = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    for i in range(n):\n        ans = \"\"\n        s1 = pow(w, i, 10**9+7)\n        s2 = pow(b, i, 10**9+7)\n        s = s1 * s2\n        if s == 1:\n            ans = \"1/1\"\n        else:\n            ans = str(s)\n        print(ans)\n    return \"\".join(ans)"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = list(map(int, stdin.split()))\n    prod = (t + w) * (t + b)\n    # print(prod, t + w, t + b)\n    return str(prod)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = (int(x) for x in stdin.split())\n    p = 1\n    q = 1\n    while p * p <= t or q * q <= t:\n        p += 1\n        q += 1\n    while q % p == 0:\n        while q % p!= 0:\n            q += 1\n        p += 1\n        q += 1\n    return f\"{q}/{p}\"\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [t, w, b] = stdin.split()\n    t, w, b = int(t), int(w), int(b)\n    prod = 1\n    for i in range(1, b + 1):\n        if (t - i) % w == 0 and (t - i) // w >= i:\n            prod *= i\n    for i in range(1, w + 1):\n        if (t - i) % w == 0 and (t - i) // w >= i:\n            prod *= i\n    return str(prod / (t - b))\n\nsolution(\"10 3 2\")\nsolution(\"7 1 2\")\n\n\"\"\"\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    p = 1\n    q = 1\n    while p % 2 == 0:\n        q *= 2\n        p = 2 * p\n    while q % 2 == 0:\n        p *= 2\n        q = 2 * q\n    return f'{p // 2}/{q // 2}'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w, b = map(int, stdin.split())\n    x, y = 1, 0\n    while x < n:\n        y = max(y, x + w, x + b)\n        x = y - w\n    return str(x) + \"/\" + str(y)\n\nimport math\nimport random\nimport fractions\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    w = w * 2 + 1\n    b = b * 2 + 1\n    return '{0}/{1}'.format(\n        \"\".join(\n            [\n                '1' if w * i >= t else '0'\n                for i in range(w)\n            ]\n        ),\n        \"\".join(\n            [\n                '1' if b * i >= t else '0'\n                for i in range(b)\n            ]\n        ),\n    )\n    return \"\".join(\n        [\n            '1' if w * i >= t else '0'\n            for i in range(w)\n        ]\n    ), \"\".join(\n        [\n            '1' if b * i >= t else '0'\n            for i in range(b)\n        ]\n    )\nsolution(\"10 3 2\")\nsolution(\"7 1 2\")\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    x, y, z = x, y, z\n    if (x > y + z) and (y > x + z) and (z > x + y):\n        return \"+\"\n    if (x > y - z) and (y > x - z) and (z > x - y):\n        return \"-\"\n    if x == y == z:\n        return \"0\"\n    return \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x >= y and z:\n        return '+'\n    elif y >= x and z:\n        return '-'\n    elif x == y == z:\n        return '0'\n    else:\n        return '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y < z or x + z < y or y + z < x:\n        return \"?\"\n    else:\n        if x > 0 and y > 0 and z > 0:\n            return \"-\"\n        if x > 0 and y > 0 and z == 0:\n            return \"+\"\n        if x == 0 and y > 0 and z > 0:\n            return \"-\"\n        if x == 0 and y > 0 and z == 0:\n            return \"+\"\n        if x > 0 and y == 0 and z > 0:\n            return \"-\"\n        if x == 0 and y == 0 and z > 0:\n            return \"+\"\n        if x == 0 and y == 0 and z == 0:\n            return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x+y+z == x*y:\n        if x == y:\n            return '+'\n        elif x > y:\n            return '-'\n        else:\n            return '0'\n    elif x+y+z == x*y+x*z:\n        if x == y:\n            return '+'\n        elif x > y:\n            return '-'\n        else:\n            return '0'\n    else:\n        return '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y > z:\n        return \"+\"\n    elif x < y < z:\n        return \"-\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x >= y + z:\n        return '+'\n    if x <= y + z:\n        return '-'\n    return '0'"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if (x + y + z) % 3!= 0:\n        return \"?\"\n    if x == y:\n        if x == z:\n            return \"+\"\n        return \"-\"\n    if y == z:\n        return \"+\"\n    return \"-\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [x, y, z] = map(int, stdin.split())\n    if x + y > z:\n        return \"-\"\n    if x + z > y:\n        return \"+\"\n    return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x == y == z == 0:\n        return \"0\"\n    if x == y:\n        return \"-\" if x > z else \"+\"\n    if x == z:\n        return \"-\" if y > z else \"+\"\n    if y == z:\n        return \"-\" if x > y else \"+\"\n    return \"?\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y + z or y > x + z or z > x + y:\n        return '?'\n    elif x == y + z:\n        return '+'\n    else:\n        return '-'\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = stdin.split()[1]\n    min_id = max_id = 0\n    for i in range(n):\n        if sequence[i] == \"R\":\n            min_id = max(min_id, i - 1)\n        elif sequence[i] == \"D\":\n            max_id = min(max_id, i + 1)\n    if min_id == max_id == 0:\n        return \"0\"\n    if min_id == 0:\n        return str(max_id - min_id + 1)\n    return \"-\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    ops = stdin.splitlines()[1]\n    x, y = map(int, stdin.splitlines()[2].split())\n    changes = [(i, ops[i]) for i in range(n)]\n    changes.sort(key=lambda x: x[1])\n    changes = [(i, ops[i]) for i in range(n)]\n    changes.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        if changes[i][1] == 'R' and x <= i < x+1:\n            x += 1\n        if changes[i][1] == 'D' and y <= i < y+1:\n            y += 1\n        if changes[i][1] == 'L' and x >= i > x-1:\n            x -= 1\n        if changes[i][1] == 'U' and y >= i > y-1:\n            y -= 1\n        if changes[i][1] == 'R' and x <= i < x+1:\n            x += 1\n        if changes[i][1] == 'D' and y <= i < y+1:\n            y += 1\n        if changes[i][1] == 'L' and x >= i > x-1:\n            x -= 1\n        if changes[i][1] == 'U' and y >= i > y-1:\n            y -= 1\n        ans += max(x - x - 1, y - y - 1) + 1\n    return str(ans)"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    operations = stdin.split('\\n')\n    y = int(operations[1].split()[0])\n    x = int(operations[1].split()[1])\n    initial_position = (x, y)\n    sequence = operations[2]\n    direction = operations[0]\n    min_dist = float('inf')\n    visited = set()\n    for i in range(len(sequence)):\n        if sequence[i] == direction:\n            visited.add(initial_position)\n            x1 = initial_position[0]\n            y1 = initial_position[1]\n            if i == 0:\n                x1 = initial_position[0] - 1\n                y1 = initial_position[1]\n            elif i == len(sequence) - 1:\n                x1 = initial_position[0] + 1\n                y1 = initial_position[1]\n            else:\n                x1 = initial_position[0]\n                y1 = initial_position[1] - 1\n            if (x1, y1) not in visited:\n                visited.add((x1, y1))\n                min_dist = min(min_dist, abs(x - x1) + abs(y - y1))\n            x = x1\n            y = y1\n    if min_dist == float('inf'):\n        return '-1'\n    return str(min_dist)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = stdin.readline()\n    x, y = list(map(int, stdin.readline().split()))\n    ans = -1\n    if n == 1:\n        ans = 0 if data == 'R' else -1\n    elif n == 2:\n        if data == 'R':\n            ans = -1\n        else:\n            ans = 0 if x == y - 1 else (x - y) + 1\n    elif n == 3:\n        if data == 'R':\n            ans = 0 if x == y else -1\n        elif data == 'L':\n            ans = 0 if x == y else -1\n        else:\n            ans = 0 if x == y - 1 else (x - y) + 1\n    return str(ans)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, operations = map(int, stdin.split())\n    dx, dy = (0, 0), (0, 0)\n    for i in operations:\n        if i == 'U': dx, dy = (dx[0] - 1, dy[1]), (dx[0], dy[1] + 1)\n        if i == 'D': dx, dy = (dx[0] + 1, dy[1]), (dx[0], dy[1] - 1)\n        if i == 'L': dx, dy = (dx[0] + 1, dy[1]), (dx[0] - 1, dy[1])\n        if i == 'R': dx, dy = (dx[0] - 1, dy[1]), (dx[0] + 1, dy[1])\n    return max(abs(a - x) + abs(b - y) for a, b in zip(dx, dy))\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    op = a[0]\n    x, y = map(int, a[1].split())\n    return \"\" if not (1 <= x <= 10**9 and 1 <= y <= 10**9) else str(min(max(1, x - y) - (x - 2), 0))\n\nsolution(\"2\")\nsolution(\"5\")\nsolution(\"3\")\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ops = list(stdin)\n    minidx = minidx_op(ops)\n    maxidx = maxidx_op(ops)\n    if minidx == maxidx:\n        return \"0\"\n    return str(maxidx - minidx + 1)\n\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def valid(s):\n        n = len(s)\n        if n!= 4:\n            return False\n        else:\n            if s == 'UUDDR' or s == 'DRDDU':\n                return True\n            else:\n                return False\n    def get_diffs(s1, s2):\n        diff = 0\n        for i in range(4):\n            if s1[i]!= s2[i]:\n                diff += 1\n        return diff\n\n    def get_min(s1, s2):\n        if len(s1) == len(s2):\n            return 0\n        min_diff = len(s1) + len(s2)\n        for i in range(4):\n            s1 = s1.replace(s1[i], '')\n            s2 = s2.replace(s2[i], '')\n            min_diff = min(get_min(s1, s2), min_diff)\n        return min_diff\n\n    n = int(stdin.split('\\n')[0])\n    ops = stdin.split('\\n')[1]\n    min_diff = 1e9\n    for i in range(n):\n        op = ops[i]\n        if not valid(op):\n            return -1\n        s1 = ops[i-1]\n        s2 = ops[i+1]\n        if i == 0:\n            min_diff = get_min(s1, s2)\n        else:\n            min_diff = min(get_diffs(s1, s2), min_diff)\n    return min_diff\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    operations = stdin.split()\n    x, y = int(operations[0]), int(operations[1])\n    if x == 0 and y == 0:\n        print(0)\n        return 0\n    if x == 0 or y == 0:\n        print(-1)\n        return -1\n    return min(x, y) - max(x, y) + 1\n\nsolution(input())\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''RURUU\n   ... -2 3\n   ... ''')\n    '3'\n    >>> solution('''4\n   ... RURUU\n   ... 1 1\n   ... ''')\n    '0'\n    >>> solution('''3\n   ... RURUU\n   ... 100 100\n   ... ''')\n    '-1'\n    \"\"\"\n    n = int(stdin.strip())\n    for i in range(n):\n        stdin = stdin + \"\\n\"\n    return str(min([abs(ord(x) - ord(y)) for (x, y) in zip(stdin[:n], stdin[n + 1:])]))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, x = int(stdin[0]), int(stdin[1])\n    s = stdin[2]\n    for i in range(4, n+1):\n        if len(s) >= i:\n            prefix = s[:i]\n            if len(prefix) == len(s) and prefix == s:\n                continue\n            else:\n                for j in range(1, i):\n                    if len(s) >= j:\n                        if s[:j] == s[j:]:\n                            return -1\n        else:\n            break\n    return len(s) - (i - 1)\n\nstdin = \"\"\nprint(solution(stdin))"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_prefixes(stdin))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    3\n    >>> solution('10 10')\n    3\n    >>> solution('01010')\n    0\n    >>> solution('111')\n    1\n    >>> solution('101')\n    1\n    >>> solution('110')\n    2\n    \"\"\"\n    n, x = map(int, stdin.strip().split())\n    if x < 0:\n        return -1\n    else:\n        return n - len(bin(x)[2:])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split())\n    s = stdin.strip().split()[1]\n    if x == 0:\n        return len(s)\n    elif x == 1:\n        return s.count('1')\n    else:\n        lo = x % 2\n        lo_count = (x-lo) // 2\n        ans = int(n / 2) * 2 ** lo_count\n        ans += s.count('1') * 2 ** (n - lo_count)\n        return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, n, x = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    cnt = {}\n    cnt['0'] = 0\n    cnt['1'] = 0\n    n = len(s)\n    for i in range(2, n + 1):\n        if s[:i] not in cnt:\n            cnt[s[:i]] = i - 1\n        else:\n            cnt[s[:i]] = i - cnt[s[:i]] - 1\n    if x in cnt:\n        return cnt[x] - cnt[x + 1]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def _solution(n: int, x: int, s: str) -> int:\n        t = s + ('1' * n) + ('0' * n)\n        cnt = 0\n        while t:\n            c = t[0]\n            t = t[1:]\n            if c == '0':\n                cnt += 1\n            else:\n                cnt -= 1\n            if cnt == x:\n                return '0'\n        if cnt == -x:\n            return '1'\n        return '0'\n\n    test_cases = int(stdin)\n    for i in range(test_cases):\n        n, x = list(map(int, stdin.split()))\n        s = stdin.replace('\\n', '')\n        print(_solution(n, x, s))"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 10**k == 0:\n        return \"0\"\n    count = 0\n    while n % 10**k!= 0:\n        count += 1\n        n = n // 10\n    return str(count)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n > 10 ** k:\n        n //= 10\n    if n < 10 ** (k - 1):\n        return str(n) + \"0\" * (k - len(str(n)))\n    else:\n        return str(n)[:-(k - 1)]\n    \n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    divisor = 10**k\n    while n % divisor!= 0:\n        n -= divisor\n        divisor /= 10\n    return str(n)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    # \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\n    if n % 10 ** k!= 0:\n        return str(n // 10 ** k) + str(n % 10 ** k)\n    else:\n        return str(n // 10 ** k) + str(n % 10 ** k)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - n//10**k)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number, k = stdin.split(' ')\n    k = int(k)\n    l = len(number)\n    while l % 10 == 0:\n        l = l // 10\n    r = l - k\n    result = int(number[:r])\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # x = list(str(n))\n    # x.remove(x[0])\n    # x = ''.join(x)\n    # x = int(x)\n    # while n % 10 == 0:\n    #     n = n // 10\n    # print(n)\n    # while k > 0:\n    #     x = int(x * 10)\n    #     x = x // 10\n    #     n = n // 10\n    #     k = k - 1\n    # print(n)\n    return str(n - n // 10**k)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 10**k == 0:\n        return \"0\"\n    else:\n        d = 1\n        while n % (10**k*d)!= 0:\n            d += 1\n        return str(d)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    while n > 0:\n        if n % 10**k!= 0:\n            n -= 1\n        else:\n            n //= 10**k\n    return str(n)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read n and k\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    # n, k = 100, 9\n    # n, k = 30020, 3\n    # n, k = 10203049, 2\n\n    # print the result\n    print(n // 10 ** k)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    if n == 1 and m == 1:\n        print(k, x, y)\n        return\n    pupils = []\n    for i in range(n):\n        pupils.append([i + 1, 0, 0])\n    for i in range(m):\n        pupils.append([0, i + 1, 0])\n    pupils.append([n, m, 0])\n    pupils.append([x, y, 0])\n\n    visited = [[False] * n for _ in range(n)]\n    answer = [[0, 0, 0] for _ in range(n)]\n    answer[n - 1][0] = answer[n - 1][1] = answer[n - 1][2] = k\n    answer[x - 1][0] = answer[x - 1][1] = answer[x - 1][2] = k\n    answer[y - 1][0] = answer[y - 1][1] = answer[y - 1][2] = k\n    answer[n - 1][2] = answer[x - 1][2] = answer[y - 1][2] = k\n\n    for i in range(n - 2, -1, -1):\n        if not visited[i + 1][y - 1]:\n            answer[i][1] = max(k, answer[i + 1][1])\n            visited[i + 1][y - 1] = True\n        if not visited[x - 1][i + 1]:\n            answer[i][2] = max(k, answer[i + 1][2])\n            visited[x - 1][i + 1] = True\n        if not visited[y - 1][i + 1]:\n            answer[i][0] = max(k, answer[i + 1][0])\n            visited[y - 1][i + 1] = True\n        if not visited[i + 1][x - 1]:\n            answer[i][1] = max(k, answer[i + 1][1])\n            visited[i + 1][x - 1] = True\n        if not visited[i + 1][i + 1]:\n            answer[i][2] = max(k, answer[i + 1][2])\n            visited[i + 1][i + 1] = True\n\n    for i in range(1, n):\n        if not visited[x - 1][i - 1]:\n            answer[x - 1][i - 1] = max(k, answer[x - 1][i - 1])\n        if not visited[y - 1][i - 1]:\n            answer[y - 1][i - 1] = max(k, answer[y - 1][i - 1])\n\n    for i in range(1, n):\n        if not visited[i][y - 1]:\n            answer[i][y - 1] = max(k, answer[i][y - 1])\n\n    for i in range(1, n):\n        if not visited[x - 1][i]:\n            answer[x - 1][i] = max(k, answer[x - 1][i])\n\n    for i in range(1, n):\n        if not visited[y - 1][i]:\n            answer[y - 1][i] = max(k, answer[y - 1][i])\n    print(answer)\n    return str(max([max(i) for i in answer]))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    max_questions = 0\n    min_questions = float('inf')\n    count = 0\n    for i in range(n):\n        if i == 0:\n            max_questions = max(max_questions, m)\n            min_questions = min(min_questions, m)\n        else:\n            if i == 1:\n                max_questions = max(max_questions, m)\n                min_questions = min(min_questions, m)\n            else:\n                max_questions = max(max_questions, m + (m-1))\n                min_questions = min(min_questions, m + (m-1))\n    return str(max_questions) + \" \" + str(min_questions) + \" \" + str(count)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n\n    def gen(n, x, y):\n        for i in range(1, n + 1):\n            if i == x:\n                for j in range(1, m + 1):\n                    if j == y:\n                        yield i, j\n            else:\n                for j in range(1, m + 1):\n                    if j == y:\n                        yield i, j\n                    yield i, j\n    for row, col in gen(n, x, y):\n        yield n - row + 1, m - col + 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, k, x, y = map(int, stdin.split())\n    x -= 1\n    y -= 1\n    q_m = m - k\n    q_x = x - k\n    q_y = y - k\n    # print(n, m, k, x, y)\n    p1 = min(k, x)\n    p2 = min(k, y)\n    p3 = min(n - k, x)\n    p4 = min(n - k, y)\n    # print(p1, p2, p3, p4)\n    q_x = q_m - p1\n    q_y = q_m - p2\n    q_x += p3\n    q_y += p4\n    # print(q_x, q_y)\n    q_m = q_x + q_y\n    q_x = x - p1\n    q_y = y - p2\n    q_x += p3\n    q_y += p4\n    # print(q_x, q_y)\n    q_x = q_x + q_x\n    q_y = q_y + q_y\n    # print(q_x, q_y)\n    return str(q_m) + \" \" + str(q_x) + \" \" + str(q_y) + \" \" + str(q_x + q_y)\n\nprint(solution(\"1 3 8 1 1\"))\nprint(solution(\"4 2 9 4 2\"))\nprint(solution(\"100 100 1000000000000000000 100 100\"))"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    \n    seating = [[0] * (y + 1) for _ in range(n + 1)]\n    \n    seating[0][0] = 1\n    \n    for _ in range(m):\n        if seating[x][y]:\n            break\n        seating[x][y] = 1\n        x, y = (x + 1) % n, (y + 1) % y\n    \n    for _ in range(k - 1):\n        if seating[x][y]:\n            break\n        x, y = (x + 1) % n, (y + 1) % y\n    \n    seating[x][y] = 1\n    \n    maximum = minimum = 0\n    for x in range(1, n + 1):\n        for y in range(1, y + 1):\n            if seating[x][y]:\n                maximum = max(maximum, x + 1)\n                minimum = min(minimum, x + 1)\n    \n    return str(maximum) + \" \" + str(minimum) + \" \" + str(n * m - maximum * minimum)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    if x > n:\n        x = n\n    if y > m:\n        y = m\n\n    first_row = [[] for _ in range(n)]\n    second_row = [[] for _ in range(n)]\n    third_row = [[] for _ in range(n)]\n\n    # The order of asking pupils in the first test:   the pupil from the first row who seats at the first table;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Jeremiah;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Jeremiah;\n    # The order of asking pupils in the second test:   the pupil from the first row who seats at the first table;  the pupil from the first row who seats at the second table;  the pupil from the second row who seats at the first table;  the pupil from the second row who seats at the second table;  the pupil from the third row who seats at the first table;  the pupil from the third row who seats at the second table;  the pupil from the fourth row who seats at the first table;  the pupil from the fourth row who seats at the second table, it means it is Jeremiah;  the pupil from the third row who seats at the first table;\n    for i in range(n):\n        for j in range(m):\n            if i + 1 > x:\n                first_row[i].append(j)\n            elif i + 1 == x:\n                first_row[i].append(j)\n                second_row[i].append(j)\n                third_row[i].append(j)\n            else:\n                first_row[i].append(j)\n                second_row[i].append(j)\n                third_row[i].append(j)\n\n    answer = 0\n    answer_1 = 0\n    answer_2 = 0\n\n    while k > 0:\n        answer_1 += len(first_row[x - 1])\n        answer_2 += len(second_row[y - 1])\n        k -= 1\n        if answer_1 == answer_2:\n            answer = answer_1\n            break\n        if answer_2 > answer_1:\n            answer = answer_2\n            break\n        if answer_1 > answer_2:\n            answer = answer_1\n            break\n\n    return str(answer)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k, x, y] = stdin.split()\n    n, m, k, x, y = int(n), int(m), int(k), int(x), int(y)\n\n    maximum = 0\n    minimum = 10 ** 18\n    times = 0\n    seating = list(range(1, n + 1))\n    seating.reverse()\n    for i in seating:\n        if len(seating) > 1:\n            tmp = i\n            seating.remove(tmp)\n            tmp = seating.pop()\n            seating.append(tmp)\n            seating.reverse()\n\n    for i in range(1, n + 1):\n        maximum = max(maximum, (m * i) + (m - 1) * (i - 1))\n\n    for i in seating:\n        tmp = 0\n        for j in range(x):\n            if i!= j + 1:\n                tmp += 1\n        minimum = min(minimum, tmp)\n        times += 1\n\n    return str(maximum) +'' + str(minimum) +'' + str(times)\n\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    rows = n\n    pupils = m\n    teachers = k\n    times = 0\n    while rows:\n        times += 1\n        teachers = 0\n        for row in range(rows):\n            pupil = 1\n            for pupil in range(pupils):\n                if (pupil == x or pupil == y) and row == x:\n                    teachers += 1\n                elif (pupil == x or pupil == y) and row == y:\n                    teachers += 1\n            pupils -= 1\n        pupils = m\n        rows -= 1\n    return str(times) +'' + str(teachers) +'' + str(times)"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    return str(\n        max(\n            max(\n                max(\n                    max(k // n, k // m, k // y),\n                    max(k // x, k // y, k // n, k // m, k // m, k // x)\n                )\n            )\n            for i in range(1, n + 1)\n        )\n    )\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    answer = []\n    if n == 1:\n        answer.append(k)\n        answer.append(m-k)\n        answer.append(k)\n        return''.join(map(str, answer))\n    else:\n        answer.append(max(k, m-k))\n        answer.append(min(k, m-k))\n        count = 0\n        for i in range(n):\n            if i!= x-1 and i!= y-1:\n                count += m\n            if i!= x-1:\n                count += m-k\n            if i!= y-1:\n                count += k\n            if i == x-1:\n                count += m\n                answer.append(count)\n                break\n            if i == y-1:\n                count += m\n                answer.append(count)\n                break\n            if i == x-1 and i == y-1:\n                count += k\n                answer.append(count)\n                break\n        return''.join(map(str, answer))\n\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... treasurehunt\n   ... threefriends\n   ... hiCodeforces\n   ... ''')\n    'Katie'\n    >>> solution('''\n   ... 7\n   ... treasurehunt\n   ... threefriends\n   ... hiCodeforces\n   ... ''')\n    'Katie'\n    \"\"\"\n    N = int(stdin)\n    robots = set()\n    for n in range(N):\n        line = stdin.strip()\n        robots.add(line)\n        if len(robots) == 3:\n            break\n    robots = list(robots)\n    if len(robots) == 1:\n        return robots[0]\n    winner = 'Draw'\n    max_beauty = -1\n    for i, line in enumerate(robots):\n        if i == 0:\n            continue\n        robots[i] = line.replace(robots[i - 1], \"\").replace(robots[i - 2], \"\")\n        if len(robots[i])!= 0:\n            beauty = max(len(robots[i]), len(robots[i - 1]))\n            if beauty > max_beauty:\n                max_beauty = beauty\n                winner = robots[i - 1 if len(robots[i - 1]) > len(robots[i]) else i]\n    return winner\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kuro = stdin.split()[0]\n    shiro = stdin.split()[1]\n    katie = stdin.split()[2]\n    print(kuro)\n    print(shiro)\n    print(katie)\n    return kuro if beauty(kuro) > beauty(shiro) else katie if beauty(katie) > beauty(kuro) else \"Draw\"\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for k in range(len(stdin)):\n            s = stdin[k]\n            if k == len(stdin) - 1:\n                continue\n            for j in range(len(stdin) - 1, k, -1):\n                if stdin[j] == s:\n                    continue\n                s1 = stdin[k]\n                s2 = stdin[j]\n                if s1.islower():\n                    s1 = s1.upper()\n                if s2.islower():\n                    s2 = s2.upper()\n                if s1 == s2:\n                    stdin = stdin[:k] + s2 + stdin[j + 1:]\n                else:\n                    break\n    res = max(stdin, key=lambda s: s.count('a'))\n    if len(res) > len(stdin) / 2:\n        return \"Draw\"\n    return \"Kuro\" if res[0].isupper() else \"Shiro\" if res[0].islower() else \"Katie\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"Draw\"\n    kuro_ribbon = stdin.strip()\n    shiro_ribbon = stdin.strip()\n    katie_ribbon = stdin.strip()\n    kuro_ribbon = kuro_ribbon[::-1]\n    shiro_ribbon = shiro_ribbon[::-1]\n    katie_ribbon = katie_ribbon[::-1]\n\n    cnt_kuro = 0\n    cnt_shiro = 0\n    cnt_katie = 0\n    for i in range(n):\n        if kuro_ribbon[i]!= katie_ribbon[i]:\n            cnt_kuro += 1\n        if shiro_ribbon[i]!= katie_ribbon[i]:\n            cnt_shiro += 1\n        if katie_ribbon[i]!= kuro_ribbon[i]:\n            cnt_katie += 1\n    if cnt_kuro > cnt_shiro and cnt_kuro > cnt_katie:\n        return \"Kuro\"\n    if cnt_shiro > cnt_kuro and cnt_shiro > cnt_katie:\n        return \"Shiro\"\n    if cnt_katie > cnt_kuro and cnt_katie > cnt_shiro:\n        return \"Katie\"\n    return \"Draw\"\n\n\nprint(solution(\"1\\ntreasurehunt\\n3friends\\nhiCodeforces\"))\nprint(solution(\"7\\ntreasurehunt\\n3friends\\nhiCodeforces\"))\nprint(solution(\"15\\ntreasurehunt\\n3friends\\nhiCodeforces\"))\n\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    ribbons = stdin.split('\\n')[1:]\n    ribbons = [r.replace(' ', '') for r in ribbons]\n    ribbons = [''.join(sorted(r)) for r in ribbons]\n    ribbons = [[r] for r in ribbons]\n    for i in range(n - 1):\n        ribbons = [[r] + sorted(r) + sorted(r, reverse=True) for r in ribbons]\n    best = [[ribbon[0], len(ribbon)] for ribbon in ribbons]\n    best.sort(key=lambda x: x[1], reverse=True)\n    k = 0\n    while k < 3:\n        for r in range(len(best)):\n            best[r][1] = min(best[r][1] - 1, len(ribbons[r][0]))\n            if best[r][1] == 0:\n                return best[r][0]\n        k += 1\n    return 'Draw'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ribbons = stdin.split('\\n')\n    #Kuro\n    for i in range(n):\n        if i % 3 == 0:\n            for j in range(10):\n                ribbon = ribbons[i]\n                for k in range(len(ribbon)):\n                    if k % 2 == 0:\n                        if ribbon[k] == chr(j):\n                            ribbon = ribbon.replace(ribbon[k], '')\n                if ribbon!= '':\n                    break\n            if ribbon!= '':\n                print(\"Kuro\")\n                return \"Kuro\"\n    #Shiro\n    for i in range(n):\n        if i % 3 == 1:\n            for j in range(10):\n                ribbon = ribbons[i]\n                for k in range(len(ribbon)):\n                    if k % 2 == 0:\n                        if ribbon[k] == chr(j):\n                            ribbon = ribbon.replace(ribbon[k], '')\n                if ribbon!= '':\n                    break\n            if ribbon!= '':\n                print(\"Shiro\")\n                return \"Shiro\"\n    #Katie\n    for i in range(n):\n        if i % 3 == 2:\n            for j in range(10):\n                ribbon = ribbons[i]\n                for k in range(len(ribbon)):\n                    if k % 2 == 0:\n                        if ribbon[k] == chr(j):\n                            ribbon = ribbon.replace(ribbon[k], '')\n                if ribbon!= '':\n                    break\n            if ribbon!= '':\n                print(\"Katie\")\n                return \"Katie\"\n\n    print(\"Draw\")\n    return \"Draw\"\n\nsolution(\"6\\ntreasurehunt\\n3friends\\nhiCodeforces\")\nsolution(\"1\\nabcabc\\ncbabac\\nababca\")"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    best_kuro = None\n    best_shiro = None\n    best_katie = None\n    for _ in range(n):\n        kuro, shiro, katie = stdin.strip().split()\n        kuro_colors = set(kuro)\n        shiro_colors = set(shiro)\n        katie_colors = set(katie)\n        kuro_beauty = len(kuro_colors)\n        shiro_beauty = len(shiro_colors)\n        katie_beauty = len(katie_colors)\n        if best_katie is None:\n            best_katie = kuro_beauty * katie_beauty\n            best_shiro = kuro_beauty * shiro_beauty\n            best_kuro = kuro_beauty * katie_beauty\n        if kuro_beauty * katie_beauty == best_katie and kuro_beauty * shiro_beauty == best_shiro and kuro_beauty * katie_beauty == best_kuro:\n            continue\n        if kuro_beauty * katie_beauty > best_katie:\n            best_katie = kuro_beauty * katie_beauty\n            best_shiro = kuro_beauty * shiro_beauty\n            best_kuro = kuro_beauty * katie_beauty\n        if kuro_beauty * katie_beauty < best_katie:\n            continue\n        if kuro_beauty * shiro_beauty > best_shiro:\n            best_katie = kuro_beauty * katie_beauty\n            best_shiro = kuro_beauty * shiro_beauty\n            best_kuro = kuro_beauty * katie_beauty\n        if kuro_beauty * shiro_beauty < best_shiro:\n            continue\n        if kuro_beauty * katie_beauty > best_kuro:\n            best_katie = kuro_beauty * katie_beauty\n            best_shiro = kuro_beauty * shiro_beauty\n            best_kuro = kuro_beauty * katie_beauty\n        if kuro_beauty * katie_beauty == best_kuro and kuro_beauty * katie_beauty == best_shiro:\n            continue\n    if best_katie == best_shiro and best_katie == best_kuro:\n        return 'Draw'\n    return 'Kuro' if best_kuro == best_katie else 'Shiro'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # your code goes here\n    return 'Draw'\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    return str(l - v_0 + 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = list(map(int, stdin.split()))\n    if v_0 == v_1 and a == 0:\n        return str(0)\n    elif v_0 == v_1:\n        return str(c)\n    elif v_0 > v_1 and a == 0:\n        return str(c + 1)\n    elif v_0 > v_1:\n        return str(c + int((v_1 - v_0) / (v_0 - v_1) * (c - 1)))\n    return str(c + int((v_1 - v_0) / (v_0 - v_1) * (c - 1) + 1))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    if c >= 1000: return \"ERROR\"\n    if v_0 >= 1000: return \"ERROR\"\n    if v_1 >= 1000: return \"ERROR\"\n    if a >= 1000: return \"ERROR\"\n    if l >= v_0: return \"ERROR\"\n\n    days = c // (v_1 - v_0) + 1\n    if c % (v_1 - v_0)!= 0: days += 1\n    if days >= l: days = l\n\n    if days == 0: return \"ERROR\"\n\n    if days >= c: days = c\n    print(days)\n    return \"OK\""
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = l\n    while v_1!= c:\n        days += (1 + a) * (v_0 - v_1)\n        v_1 += a\n    while v_0!= c:\n        days += (1 + a) * (v_0 - v_1)\n        v_0 += a\n    while v_0!= v_1:\n        days += (1 + a) * (v_0 - v_1)\n        v_0 += a\n    while v_1!= v_0:\n        days += (1 + a) * (v_0 - v_1)\n        v_1 += a\n    return days"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n\n    print(l + v_1)\n    return None\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = 0\n    while True:\n        if c > 0:\n            c -= v_0\n        else:\n            days += 1\n            if c < 0:\n                c += v_1\n                if c == 0:\n                    break\n            else:\n                if l > 0:\n                    l -= 1\n                    if l == 0:\n                        break\n                else:\n                    days += 1\n                    if l < v_1:\n                        l += v_1\n                        if l == v_1:\n                            break\n    return days"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, v_0, v_1, a, l = map(int, stdin.split())\n    a_constant = a / l\n    days = 0\n    c = v_1 - v_0\n    while c > 0:\n        days += 1\n        if v_0 + days * a_constant > v_1:\n            break\n        v_0 += days * a_constant\n        c -= v_0\n    return str(days)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def read(num):\n        global page\n        page += num\n        return num\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    page = v_0\n    days = 0\n    while page < v_1:\n        read(a)\n        if page > l:\n            read(l - page)\n        page += read(v_1 - page)\n        days += 1\n    return days\n\n\ndef"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v, c, v_0, v_1, a, l = map(int, stdin.split())\n    if v < v_0:\n        return '0'\n    days = 0\n    cnt_c = 0\n    while v > 0 and cnt_c < l:\n        cnt_c += v\n        v -= a\n        days += 1\n    if v == v_0:\n        return str(days + v_1 - v_0)\n    if v == 0:\n        return str(days + l - v_0)\n    return '0'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    prime = set()\n    while len(prime) < 3:\n        number += 2\n        if all(number % i!= 0 for i in range(3, int(math.sqrt(number)) + 1, 2)):\n            prime.add(number)\n    return ','.join(map(str, sorted(prime)))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    p = 2\n    while len(primes) < 3:\n        if is_prime(p):\n            primes.append(p)\n        p += 1\n    result = []\n    while p <= n:\n        is_prime = True\n        for j in primes:\n            if p % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(p)\n        p += 1\n    return str(len(result)) + '\\n' + '\\n'.join(str(x) for x in result)\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            i += 2\n        else:\n            i += 1\n    if i * i > n:\n        i -= 2\n    return str(i) + \" \" + \" \".join(map(str, [n - i + 1, n - i, n - 1]))"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = \"23\"\nfor k in range(3, 5):\n    t, n = map(int, stdin.split())\n    if len(primes) < k:\n        continue\n    if k == 3:\n        for i in range(1, 4):\n            if t - i not in primes and t - i not in primes2:\n                continue\n            for j in range(1, 4):\n                if t - i - j not in primes and t - i - j not in primes2:\n                    continue\n                for k in range(1, 4):\n                    if t - i - j - k not in primes and t - i - j - k not in primes2:\n                        continue\n                    if sum([i, j, k])!= t:\n                        continue\n                    print(i, j, k)\n                    return\n\n    else:\n        for i in range(1, k + 1):\n            if t - i not in primes and t - i not in primes2:\n                continue\n            for j in range(1, k + 1):\n                if t - i - j not in primes and t - i - j not in primes2:\n                    continue\n                for k in range(1, k + 1):\n                    if t - i - j - k not in primes and t - i - j - k not in primes2:\n                        continue\n                    if sum([i, j, k])!= t:\n                        continue\n                    print(i, j, k)\n                    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://stackoverflow.com/questions/30582785/python-prime-numbers-up-to-a-certain-value\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        if n <= 3:\n            return True\n        if n % 3 == 0:\n            return False\n        r = int(n ** 0.5)\n        f = 5\n        while f <= r:\n            if n % f == 0:\n                return False\n            if n % (f + 2) == 0:\n                return False\n            f += 6\n        return True\n\n    return"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prime_list = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_list.append(i)\n    min_prime = min(prime_list)\n    max_prime = max(prime_list)\n    count = 0\n    for i in range(1,4):\n        sum_of_prime = (min_prime * i) + max_prime\n        if is_prime(sum_of_prime):\n            count += 1\n    return str(count) + '\\n' +''.join(map(str, prime_list))\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def prime_sum(n):\n        if n <= 3:\n            return n\n        s = 0\n        while n:\n            if s + 1 < n:\n                s += 1\n            n -= 1\n        return s\n    return str(prime_sum(int(stdin))), str(prime_sum(int(stdin)))\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin)\n\n    for i in range(3, n + 1):\n        flag = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                flag = False\n                break\n\n        if flag:\n            print(i)\n            return\n\n    print(3)\n    return\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_bomb(x: int, y: int, i: int, j: int) -> bool:\n        return 0 <= i < m and 0 <= j < n and (stdin[i][j] == \"*\" or stdin[i][j] == \".\")\n\n    def can_trigger(x: int, y: int, i: int, j: int) -> bool:\n        return stdin[i][j] == \".\"\n\n    m, n = map(int, stdin.split())\n    stdin = stdin.splitlines()\n    for i in range(m):\n        for j in range(n):\n            if can_bomb(x, y, i, j):\n                stdin[i][j] = \"*\"\n                for k in range(j, n):\n                    stdin[i][k] = \".\"\n                break\n            if can_trigger(x, y, i, j):\n                break\n    if \"*\" not in stdin[x][y:]:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = stdin.strip().split('\\n')\n    for i in range(n):\n        grid[i] = list(grid[i])\n    return 'NO' if not solve(grid) else 'YES\\n{0} {1}'.format(*solve(grid))\n\ndef"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    bombs = []\n    field = {}\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == \"*\":\n                bombs.append((i, j))\n            elif stdin[i][j] == \".\":\n                field[(i, j)] = 0\n    if len(bombs) == 0 or len(bombs) > len(field):\n        return \"NO\"\n    for i, j in bombs:\n        field[(i, j)] = 1\n    def get_neighbours(x, y):\n        neighbours = []\n        neighbours.append((x - 1, y - 1))\n        neighbours.append((x - 1, y))\n        neighbours.append((x - 1, y + 1))\n        neighbours.append((x, y - 1))\n        neighbours.append((x, y + 1))\n        neighbours.append((x + 1, y - 1))\n        neighbours.append((x + 1, y))\n        neighbours.append((x + 1, y + 1))\n        return neighbours\n    def count_walls(x, y):\n        neighbours = get_neighbours(x, y)\n        return sum(field.get(n, 0) for n in neighbours)\n\n    def update_field(x, y, val):\n        if val:\n            if field[(x, y)] == 0:\n                field[(x, y)] = 1\n        else:\n            if field[(x, y)] == 1:\n                field[(x, y)] = 0\n\n    for i in range(n):\n        for j in range(m):\n            if field.get((i, j), 0) == 1:\n                count = count_walls(i, j)\n                if count == 0:\n                    update_field(i, j, 0)\n                elif count > 1:\n                    return \"NO\"\n    for i, j in bombs:\n        count = count_walls(i, j)\n        if count == 1:\n            update_field(i, j, 0)\n    return \"YES\"\n\nsolution(stdin)"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    grid = stdin.split(\"\\n\")\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == \".\":\n                continue\n            else:\n                for check_row in range(rows):\n                    for check_col in range(cols):\n                        if grid[check_row][check_col] == \"*\":\n                            grid[check_row][check_col] = \".\"\n                            return \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3 4')\n    YES\n    1 2\n    >>> solution('3 3')\n    NO\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    docstring\n    '''\n    n, m = stdin.strip().split(' ')\n    n = int(n)\n    m = int(m)\n    #is_open = stdin.strip().split(' ')\n    is_open = []\n    for i in range(n):\n        is_open.append(list(stdin.strip()))\n    print(is_open)\n    #print(stdin.strip())\n    #print(is_open)\n    #print(n)\n    #print(m)\n    #print(is_open[0])\n    #print(is_open[1])\n    #print(is_open[2])\n    #print(is_open[3])\n    #print(is_open[4])\n    #print(is_open[5])\n    #print(is_open[6])\n    #print(is_open[7])\n    #print(is_open[8])\n    #print(is_open[9])\n\n    x = 0\n    y = 0\n    #print(x)\n    #print(y)\n    #print(is_open[x][y])\n    #print(is_open[x][y+1])\n    #print(is_open[x][y+2])\n    #print(is_open[x+1][y])\n    #print(is_open[x+2][y])\n    #print(is_open[x+3][y])\n    #print(is_open[x+4][y])\n    #print(is_open[x+5][y])\n    #print(is_open[x+6][y])\n    #print(is_open[x+7][y])\n    #print(is_open[x+8][y])\n    #print(is_open[x+9][y])\n\n    #print(is_open[0][0])\n    #print(is_open[0][1])\n    #print(is_open[0][2])\n    #print(is_open[0][3])\n    #print(is_open[1][0])\n    #print(is_open[1][1])\n    #print(is_open[1][2])\n    #print(is_open[1][3])\n    #print(is_open[2][0])\n    #print(is_open[2][1])\n    #print(is_open[2][2])\n    #print(is_open[2][3])\n    #print(is_open[3][0])\n    #print(is_open[3][1])\n    #print(is_open[3][2])\n    #print(is_open[3][3])\n\n    #print(is_open[4][0])\n    #print(is_open[4][1])\n    #print(is_open[4][2])\n    #print(is_open[4][3])\n    #print(is_open[5][0])\n    #print(is_open[5][1])\n    #print(is_open[5][2])\n    #print(is_open[5][3])\n    #print(is_open[6][0])\n    #print(is_open[6][1])\n    #print(is_open[6][2])\n    #print(is_open[6][3])\n    #print(is_open[7][0])\n    #print(is_open[7][1])\n    #print(is_open[7][2])\n    #print(is_open[7][3])\n    #print(is_open[8][0])\n    #print(is_open[8][1])\n    #print(is_open[8][2])\n    #print(is_open[8][3])\n    #print(is_open[9][0])\n    #print(is_open[9][1])\n    #print(is_open[9][2])\n    #print(is_open[9][3])\n    #print(is_open[10][0])\n    #print(is_open[10][1])\n    #print(is_open[10][2])\n    #print(is_open[10][3])\n    #print(is_open[11][0])\n    #print(is_open[11][1])\n    #print(is_open[11][2])\n    #print(is_open[11][3])\n    #print(is_open[12][0])\n    #print(is_open[12][1])\n    #print(is_open[12][2])\n    #print(is_open[12][3])\n\n    print(is_open[13][0])\n    print(is_open[13][1])\n    print(is_open[13][2])\n    print(is_open[13][3])\n    print(is_open[14][0])\n    print(is_open[14][1])\n    print(is_open[14][2])\n    print(is_open[14][3])\n    print(is_open[15][0])\n    print(is_open[15][1])\n    print(is_open[15][2])\n    print(is_open[15][3])\n    print(is_open[16][0])\n    print(is_open[16][1])\n    print(is_open[16][2])\n    print(is_open[16][3])\n    print(is_open[17][0])\n    print(is_open[17][1])\n    print(is_open[17][2])\n    print(is_open[17][3])\n    print(is_open[18][0])\n    print(is_open[18][1])\n    print(is_open[18][2])\n    print(is_open[18][3])\n    print(is_open[19][0])\n    print(is_open[19][1])\n    print(is_open[19][2])\n    print(is_open[19][3])\n\n\n    #print(is_open[13][0])\n    #print(is_open[13][1])\n    #print(is_open[13][2])\n    #print(is_open[13][3])\n    #print(is_open[14][0])\n    #print(is_open[14][1])\n    #print(is_open[14][2])\n    #print(is_open[14][3])\n    #print(is_open[15][0])\n    #print(is_open[15][1])\n    #print(is_open[15][2])\n    #print(is_open[15][3])\n    #print(is_open[16][0"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # using stdin\n    # stdin = '''\n    # 3 4\n    #.*..\n    #..*..\n    #.*..\n    # \n    # '''\n\n    n, m = map(int, stdin.split())\n    depot = []\n    for _ in range(n):\n        depot.append(stdin[i])\n        i += 1\n\n    def traverse(x, y):\n        if x > n - 1 or x < 0 or y > m - 1 or y < 0:\n            return False\n        if depot[x][y] == '*':\n            return False\n        if depot[x][y] == '.':\n            return True\n        if traverse(x + 1, y) or traverse(x - 1, y) or traverse(x, y + 1) or traverse(x, y - 1):\n            return True\n        return False\n\n    def traverse2(x, y):\n        if x > n - 1 or x < 0 or y > m - 1 or y < 0:\n            return False\n        if depot[x][y] == '*':\n            return False\n        if depot[x][y] == '.':\n            return True\n        if traverse(x, y + 1) or traverse(x, y - 1):\n            return True\n        return False\n\n    for i in range(n):\n        for j in range(m):\n            if traverse(i, j):\n                return 'YES'\n            if traverse2(i, j):\n                return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [list(x) for x in stdin.split()]\n\n    for i in range(n):\n        if \"*\" in field[i]:\n            for j in range(m):\n                if field[i][j] == \"*\":\n                    for k in range(i + 1, n):\n                        field[k][j] = \".\"\n\n    for i in range(n):\n        if \"*\" in field[i]:\n            for j in range(m):\n                if field[i][j] == \"*\":\n                    for k in range(i - 1, -1, -1):\n                        field[k][j] = \".\"\n    field_list = []\n    for row in field:\n        field_list.append(\"\".join(row))\n    for i in range(n):\n        if \"*\" in field_list[i]:\n            for j in range(m):\n                if field_list[i][j] == \"*\":\n                    return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    field = stdin.strip().split(\"\\n\")\n\n    # Check if can trigger bomb\n    bomb_x = bomb_y = None\n    for i, row in enumerate(field):\n        for j, char in enumerate(row):\n            if char == \"*\":\n                bomb_x, bomb_y = i, j\n    if bomb_x is None or bomb_y is None:\n        return \"NO\"\n\n    # Check if can trigger bomb at correct position\n    # Check all 4 directions\n    for x, y in ((0, -1), (0, 1), (-1, 0), (1, 0)):\n        x += bomb_x\n        y += bomb_y\n        if x < 0 or x >= len(field) or y < 0 or y >= len(field[0]):\n            continue\n        if field[x][y] == \"*\":\n            continue\n        if field[x][y] == \".\":\n            # Found an empty cell, return true\n            return \"YES\"\n\n    return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(stdin.split()[i])\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                break\n        else:\n            continue\n        break\n\n    else:\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                continue\n            if i > 0 and grid[i-1][j] == \"*\":\n                return \"NO\"\n            if i < n-1 and grid[i+1][j] == \"*\":\n                return \"NO\"\n            if j > 0 and grid[i][j-1] == \"*\":\n                return \"NO\"\n            if j < m-1 and grid[i][j+1] == \"*\":\n                return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_m, input_a, input_b = list(map(int, stdin.split()))\n    if input_n % input_m!= 0:\n        return '0'\n    return str(input_a * (input_n // input_m) + input_b * (input_n // input_m))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m!= 0:\n        return str(a * n + b * n - (a * m + b * m))\n    return str(a * n + b * n)"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if a * (n//m) + (n%m)!= n:\n        return 0\n    return n + a * m - b * (n//m)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n    if n % m:\n        return '0'\n    return str(n // m + (n % m) // m * a + (n % m) // m * b)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n    return str(min(n, m, a, b) // min(m, a, b) * a + min(n, m, a, b) // min(m, a, b) * b)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m, a, b = int(input[0]), int(input[1]), int(input[2]), int(input[3])\n    if (n % m)!= 0:\n        return '0'\n    else:\n        return str(int((n // m) * (a + b)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(min(n // m * a + min(n - n // m * m, n // m * a + b), n // m * b + min(n - n // m * m, n // m * b + a)))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 9 7 3 8\n   ... ''')\n    '15'\n    >>> solution('''\n   ... 2 7 3 7\n   ... ''')\n    '14'\n    >>> solution('''\n   ... 30 6 17 19\n   ... ''')\n    '0'\n    \"\"\"\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return f'{a * n:.0f}'\n    else:\n        return f'{b * (n // m + 1):.0f}'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n    n = n % m\n    if n == 0:\n        return str(0)\n    return str(a*m + (n-1)*b)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    stdin = stdin.split()\n    sequence = stdin[1:]\n    sequence.sort()\n    print(sequence)\n    for i in range(len(sequence)):\n        for j in range(i, len(sequence)):\n            if sequence[i] + sequence[j] > sequence[res]:\n                res = i\n    return sequence[res]"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted([int(x) for x in stdin.split()])\n\n    best_sum = best_subseq = 0\n    for i in range(n):\n        for j in range(i, n):\n            subseq = sum(a[i:j + 1])\n            if subseq % 2!= 0:\n                if best_subseq < subseq:\n                    best_subseq = subseq\n                    best_sum = subseq\n    return str(best_sum)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    res = 0\n    for i in range(len(a)):\n        if i == 0:\n            res = int(a[i])\n            continue\n        if res == int(a[i]):\n            res += int(a[i])\n    print(res)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    a = list(map(int, s[1]))\n    a.sort()\n    print(a)\n    sum = 0\n    flag = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            print(\"i=%d j=%d\" % (i, j))\n            if a[i] + a[j] % 2 == 1 and a[i]!= a[j]:\n                print(\"sum = %d\" % (a[i] + a[j]))\n                sum = a[i] + a[j]\n                flag = 1\n                print(\"found!%d\" % sum)\n                break\n            else:\n                print(\"No found\")\n    if flag == 0:\n        print(\"No solution!\")\n    else:\n        return sum\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if sum(arr)%2: return -1\n    dp = [[0]*(2*N) for _ in range(N)]\n    dp[0][0] = 1\n    for i in range(N):\n        for j in range(i, 2*N):\n            if j == 2*i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i][j-2]\n            if arr[i] <= j:\n                dp[i][j] = max(dp[i][j], dp[i][j-arr[i]]+1)\n    return dp[N-1][2*N-1]\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    array.sort()\n    \n    sums = []\n    \n    sum_so_far = 0\n    max_so_far = 0\n    \n    for num in array:\n        sum_so_far += num\n        sums.append(sum_so_far)\n        max_so_far = max(max_so_far, sum_so_far)\n    \n    for i in range(len(sums)):\n        if sums[i] > max_so_far:\n            return i+1\n        \n    return 0\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort(reverse=True)\n    for i in range(n):\n        if a[i] % 2!= 0:\n            return str(sum(a[i:n]))\n    return '-1'"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\ninput_string = stdin.readline().strip().split(\" \")\nn = int(input_string[0])\ninput_list = list(map(int, input_string[1:]))\nmax_sum = -1\nfor i in range(n):\n    for j in range(i, n):\n        if input_list[i] + input_list[j] > max_sum:\n            max_sum = input_list[i] + input_list[j]\n\nprint(max_sum)\n'''"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(max(a))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n----\ndef"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        songs.append(tuple(map(int, stdin.split())))\n    \n    #make all possible playlists\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if songs[i][1] == songs[j][1] == songs[k][1]:\n                    continue\n                elif songs[i][1] == songs[j][1]!= songs[k][1]:\n                    res += 1\n                elif songs[i][1]!= songs[j][1] == songs[k][1]:\n                    res += 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res += 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res += 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res += 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res += 1\n                else:\n                    res += 1\n    \n    #count 1st repetition\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if songs[i][1] == songs[j][1] == songs[k][1]:\n                    continue\n                elif songs[i][1] == songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1] == songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                else:\n                    res -= 1\n\n    #count 2nd repetition\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if songs[i][1] == songs[j][1] == songs[k][1]:\n                    continue\n                elif songs[i][1] == songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1] == songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                elif songs[i][1]!= songs[j][1]!= songs[k][1]:\n                    res -= 1\n                else:\n                    res -= 1\n\n    return str(res % (10**9 + 7))"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def create_playlist(arr: list) -> list:\n        return [tuple(x) for x in arr]\n\n    def check_songs(arr: list) -> bool:\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i][1] == arr[j][1]:\n                    return False\n        return True\n\n    def find_plist(arr: list) -> int:\n        s1 = arr[0][0]\n        s2 = arr[1][0]\n        if s1 > s2:\n            arr[0], arr[1] = arr[1], arr[0]\n\n        plist = []\n        for i in range(1, len(arr)):\n            if arr[i][0] < s2:\n                plist.append([s2, arr[i][1]])\n                s2 = arr[i][0]\n\n        plist.append([s1, arr[0][1]])\n        plist = create_playlist(plist)\n\n        if check_songs(plist):\n            return len(plist)\n        return -1\n\n    n, t = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.split())))\n\n    # find maximum of every playlist\n    max_plist = [-1] * n\n    max_plist = max_plist + [-1] * n\n    for i in range(n):\n        max_plist[i] = find_plist(arr[i])\n    max_plist = list(filter(lambda x: x!= -1, max_plist))\n    # print(max_plist)\n\n    return len(max_plist)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    songs = [[int(i) for i in stdin.split()] for _ in range(n)]\n    def cmp(a, b):\n        if a[0] == b[0]:\n            return a[1] - b[1]\n        return a[0] - b[0]\n    songs.sort(key=lambda x: (x[0], x[1]))\n    curr_list = []\n    ans = 0\n    for i in range(n):\n        if curr_list:\n            ans += 1\n            curr_list.sort(key=cmp)\n        if songs[i][0]!= curr_list[-1][0] + songs[i][0]:\n            ans += 1\n            curr_list = []\n        curr_list.append(songs[i])\n    print(ans)\n    return\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        songs.append(tuple(map(int, stdin.split())))\n\n    songs_count = 0\n    songs_duration = 0\n    for i in range(n):\n        songs_duration += songs[i][0]\n        if songs[i][1] == songs[i-1][1]:\n            songs_duration -= songs[i-1][0]\n        else:\n            songs_duration -= songs[i-1][0] + songs[i][0]\n        songs_count += 1\n        if songs_duration > t:\n            return '-1'\n\n    return str(songs_count)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *rest = list(map(int, stdin.split()))\n    targets = list(map(int, rest))\n    result = 0\n    start = 0\n    while start < n:\n        for i, target in enumerate(targets):\n            if start < n and start + target <= n and start + target > start:\n                if start == i:\n                    start += target\n                    break\n                elif start + target == i + 1:\n                    start += target\n                    targets.pop(i)\n                    break\n        else:\n            result += 1\n            start = 0\n    return str(result)\n\n\nprint(solution(input()))"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.strip().split())\n    t = []\n    g = []\n    for i in range(n):\n        t_, g_ = map(int, stdin.strip().split())\n        t.append(t_)\n        g.append(g_)\n    \n    freq = {}\n    for i in range(len(t)):\n        if g[i] in freq:\n            freq[g[i]] += 1\n        else:\n            freq[g[i]] = 1\n    # print(freq)\n    ans = 0\n    for val in freq.values():\n        ans += val * (val - 1) // 2\n    return str(ans)"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    if n == 1:\n        return '0'\n    d = {}\n    for i in range(n):\n        s = int(stdin.split()[i])\n        if s in d.keys():\n            d[s] = d[s] + 1\n        else:\n            d[s] = 1\n    key_list = list(d.keys())\n    key_list.sort()\n    x = 0\n    for i in range(len(key_list)-1):\n        if key_list[i] + key_list[i+1] > T:\n            x = x + 1\n    return str(x)\n\nstdin = '3 3'\nprint(solution(stdin))\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *s = [int(i) for i in stdin.split()]\n    if t == 0:\n        return str(1)\n    elif t == 1:\n        return str(sum(i!= 1 for i in s))\n    else:\n        counter = Counter(s)\n        ans = sum(i for i in counter.values() if i == 1)\n        ans += sum((i + 1) * (i + 1 - 1) // 2 for i in counter.values() if i > 1)\n        return str(ans)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = {(t, g): i for i, (t, g) in enumerate(stdin.split('\\n'))}\n    print(len(set(map(tuple, songs.keys()))))\n    return str(sum(1 for k, v in songs.items() if len(k) == len(v) and v[0]!= v[1]))\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, T = map(int, stdin.split())\n    songs = [list(map(int, stdin.split())) for _ in range(n)]\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                max_len = max(max_len, songs[i][0] + songs[j][0] + songs[k][0])\n    return max_len\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    _, num = stdin\n    l = []\n    c = 0\n    for i in range(0, int(num)):\n        l.append(i+1)\n        c += 1\n        if c%2!= 0:\n            continue\n        x = gcd(l)\n        if x == 1:\n            break\n        else:\n            l = l[:l.index(x)]\n    print(int(len(l))*int(x)**(-1))\n    return ''\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import random\n    m = int(stdin)\n    a = []\n    while a==[]:\n        i = random.randint(1, m)\n        a.append(i)\n    d = []\n    while len(a)>1:\n        d = a[:]\n        d.sort()\n        if d[1]==1:\n            break\n        d = d[1:]\n        if d[-1]==1:\n            d.sort()\n            a.append(d[-1])\n            a.sort()\n            break\n        a = d\n    # d = a.sort()\n    d = a\n    d.sort()\n    # print(d)\n    P = 1\n    for i in range(1,len(d)):\n        P *= d[i]\n    # print(P)\n    Q = 1\n    for i in range(1, len(d)):\n        Q *= d[-i]\n    # print(Q)\n    Q = Q%(10**9+7)\n    P = P%(10**9+7)\n    return str(P*Q**(-1))\n\nprint(solution(input()))"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    while len(a) < n:\n        x = randint(1,n)\n        a.append(x)\n    gcd = 1\n    while gcd!= 0:\n        gcd = reduce(gcd,a)\n    return str(n*(gcd-1)//2)\n\nstdin = input()\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [1]\n    m = int(stdin)\n    while True:\n        x = random.randint(1, m)\n        a.append(x)\n        if gcd(a) == 1:\n            break\n    return int(len(a) * (len(a) + 1) / 2)\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    q = 1\n    x = random.randint(1,q)\n    a = a + [x]\n    while True:\n        p = a.count(1)\n        q = a.count(2)\n        if p*q == 1:\n            break\n        a = a + [random.randint(1,q)]\n    return '{0}'.format(p*q)\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, = stdin.split(' ')\n    m = int(m)\n    a = []\n    while True:\n        r = random.randint(1, m)\n        a.append(r)\n        x = gcd(a)\n        if x == 1:\n            break\n    return str(len(a) * (len(a) + 1) // 2)\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = random.randint(1, n)\n    a = [0]\n    print(f'{m}\\n')\n    for i in range(1, n + 1):\n        x = random.randint(1, m)\n        a.append(x)\n        print(f'{x}\\n')\n    p = 1\n    q = 1\n    for i in range(1, n + 1):\n        x = a[i]\n        y = x\n        while p * y % q!= 1:\n            y = (p * y) % q\n        p *= q\n        q *= i\n        print(f'{y} {p} {q}')\n    return str(p * q ** -1 % 1_000_000_007)\n\n\nsolution('2')"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    a = []\n    while len(a)!= m:\n        x = random.randint(1, m)\n        a.append(x)\n    p = 1\n    q = m\n    while q!= 1:\n        if q % p == 0:\n            q = q/p\n        else:\n            p = p + 1\n            break\n    return str(p*q**(-1))"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    while True:\n        # the original code could be written using the following syntax\n        # x = randint(1,m)\n        # a.append(x)\n        # GCD = gcd(a)\n        # print(GCD)\n        x = randint(1,m)\n        a = [x]\n        count += 1\n        while True:\n            x = randint(1,m)\n            a.append(x)\n            GCD = gcd(a)\n            if GCD == 1:\n                break\n        print(count*(1/GCD)**(-1))\n        return f\"{count*(1/GCD)**(-1)}\"\n\nsolution(input())\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0]\n    x = 0\n    while a[-1]!= 1:\n        a.append(x)\n        q = math.gcd(a[-2], n)\n        if q!= 1:\n            a[-2] //= q\n            a[-1] //= q\n            break\n        x = n % a[-2]\n    return str(math.prod(a) * pow(2, -1, n))\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    l, r, x, y = stdin\n    good = 0\n    for a in range(x, y + 1):\n        for b in range(x, y + 1):\n            if l <= a <= r and l <= b <= r:\n                if a!= b:\n                    good += 1\n    return str(good)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    ans = 0\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            if gcd(i, j) == x and lcm(i, j) == y:\n                ans += 1\n    print(ans)\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    ans = 0\n    for i in range(l, r + 1):\n        for j in range(l, r + 1):\n            if i <= j and x % i == 0 and y % j == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if a < b:\n            a, b = b, a\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    n, m, l, r = map(int, stdin.split())\n    ans = 0\n    for i in range(l, r+1):\n        if gcd(i, m) == 1 and lcm(i, m) == n:\n            ans += 1\n    return str(ans)\n\nimport math\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    good_pairs = 0\n    for a in range(l, r+1):\n        for b in range(a+1, r+1):\n            if a!= b and l <= a and a <= r and l <= b and b <= r:\n                if gcd(a, b) == x and lcm(a, b) == y:\n                    good_pairs += 1\n    return good_pairs\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    cnt = 0\n    for a in range(l, r + 1):\n        for b in range(a, r + 1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                cnt += 1\n    return str(cnt)\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    l, r = l, r\n    print(l, r, x, y)\n    # input()\n    for a in range(l, r + 1):\n        if x!= y:\n            for b in range(a, r + 1):\n                if a == b:\n                    continue\n                if a * x % b == 0 and a * y % b == 0:\n                    print(a, b)\n                    break\n    return '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    good = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if gcd(i, j) == x and lcm(i, j) == y:\n                good += 1\n    return str(good)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n    l, r, x, y = map(int, stdin.split())\n    \n    res = 0\n    if x > y:\n      x, y = y, x\n    if x % y == 0 and y % x == 0:\n      res = y // x\n    else:\n      while y!= 0:\n        x, y = y, x % y\n        if x > y:\n          x, y = y, x\n        if x % y == 0 and y % x == 0:\n          res += 1\n    return res\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    good = 0\n    for a in range(x, y + 1):\n        for b in range(l, r + 1):\n            if a % b == 0 and a / b == b:\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    lcm = a * b\n    for i in range(1, b):\n        if a + i >= b:\n            lcm = max(lcm, a * (i + b))\n    return str(lcm)\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = min(a, b), max(a, b)\n    for i in range(1, a+1):\n        if (a*i + b*i) % (a+b) == 0:\n            return str(i)\n    return str(0)\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = map(int, stdin.split())\n    for k in range(1, b):\n        if (a + k) * (b + k) <= a * b:\n            return str(k)\n    return \"0\""
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    for k in range(1, b + 1):\n        if a * k + b * k == min(a * k, b * k, a + b * k, a + k, b + k):\n            return str(k)\n    return \"0\"\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    i = 1\n    while True:\n        if i == 1:\n            if (a + i) % b == 0 or (b + i) % a == 0:\n                return str(i)\n            i += 1\n        else:\n            if (a + i) % b == 0 or (b + i) % a == 0:\n                return str(i)\n            i += 1\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    import math\n    res = 1\n    while True:\n        t = math.gcd(a+res, b+res)\n        if t > 0:\n            break\n        res += 1\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for k in range(1, max(a, b) + 1):\n        if a * k + b * k == min(a * k, b * k):\n            return str(k)\n    return str(0)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a * (a + k) // b + k for k in range(b + 1) if a * (a + k) // b + k < b))"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lowest_common = None\n    for k in range(1, b + 1):\n        if a * k % b * k == a + k and k < lowest_common or lowest_common is None:\n            lowest_common = k\n    return str(lowest_common) if lowest_common else str(0)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    marks = sorted([int(x) for x in stdin.split()])\n\n    def avr(marks):\n        return round(sum(marks)/len(marks))\n\n    if avr(marks) >= k:\n        return \"Yes\"\n    else:\n        l = 0\n        r = len(marks) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if marks[mid] < k:\n                l = mid + 1\n            elif marks[mid] > k:\n                r = mid - 1\n            else:\n                return mid\n        if l == 0:\n            if marks[0] < k:\n                return \"Yes\"\n            else:\n                return l\n        else:\n            return l\n\nprint(solution(input()))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    avg = sum(a)/len(a)\n    if avg >= k:\n        print(len(a))\n    else:\n        print(len(a)+1)\n    return\nsolution(input())\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    mini = 0\n    for i in range(n):\n        if marks[i] < k:\n            mini += k - marks[i]\n    return str(mini)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total = sum(a)\n    avg = total / n\n    # print(total, avg)\n    count = 0\n    for i in range(1, k + 1):\n        if (i < avg):\n            count += 1\n    return count\nprint(solution(input()))"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    marks_array = list(sorted(array))\n    average = sum(marks_array) / n\n    add_additional_marks = k - average\n    if add_additional_marks > 0:\n        return int(add_additional_marks)\n    else:\n        return 0"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    avg = sum(a) / len(a)\n    if n > k:\n        min_ = n\n    else:\n        min_ = k\n    while True:\n        add_ = int(min_ / avg)\n        if add_ >= k:\n            min_ -= add_\n            avg -= add_\n        else:\n            break\n    return str(min_)"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = k - n\n    if m % 2:\n        return '{}'.format(m+1)\n    return '{}'.format(m)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()))\n    mean = sum(marks) / n\n    add_marks = []\n    for mark in marks:\n        add_marks.append(mark - mean)\n    add_marks.sort(reverse=True)\n    print(sum(add_marks[0:k]))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = map(int, stdin.split())\n    min_marks = min(sum(marks), k)\n    return min_marks\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    i = 0\n    total = sum(marks)\n    while i < n:\n        if total - marks[i] >= k:\n            total -= marks[i]\n            i += 1\n        elif i < n - 1 and total - marks[i] < k:\n            i += 1\n        elif i == n - 1 and total - marks[i] < k:\n            i += 1\n            total -= marks[i]\n    return str(i)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n\n    positive_count = 0\n    sum_arr = sum(arr)\n    half_arr_size = n // 2\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    if (sum_arr <= half_arr_size * -1) or (sum_arr <= half_arr_size * 0) or (sum_arr <= 0):\n        print(0)\n    elif positive_count >= half_arr_size:\n        print(max(arr))\n    elif positive_count <= 0:\n        print(0)\n    else:\n        print(0)\n\nsolution(input())\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(int(a[-1]/2) if len(a) >= 3 else 0)\n\n\nsolution(input())\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = list(map(int, stdin.strip().split()))\n    # try:\n    #     d = solution(stdin)\n    # except ZeroDivisionError:\n    #     d = 0\n    # return d\n\n    while array:\n        i = array.pop()\n        if not array or i >= min(array) // 2:\n            return i\n        array = [j / i for j in array]\n    return 0"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int, stdin.split('\\n')))\n    c = 0\n    for i in num:\n        for j in range(2, i):\n            if i % j == 0:\n                c += 1\n    if c >= len(num) / 2:\n        return 0\n    else:\n        return max([i for i in range(2, num[0]) if len([x for x in num if x % i == 0]) >= len(num) / 2])\n\ndef"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n\n    if not a or n < 2 or max(a) < 0 or min(a) >= 0:\n        return '0'\n\n    pos = 0\n    for i in a:\n        if i >= 0:\n            pos += 1\n    half = n // 2\n    if pos < half:\n        return '0'\n\n    divisors = {}\n    for i in a:\n        if i not in divisors:\n            divisors[i] = 1\n        else:\n            divisors[i] += 1\n\n    for i in divisors:\n        if divisors[i] < half:\n            return str(i)\n\n    return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def decimal(i):\n        return int(i) if int(i) else 0\n\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    arr = list(map(decimal, stdin.pop(0).split(\" \")))\n\n    def div(num):\n        num /= 2\n        return num, num >= 0\n\n    def find(num):\n        arr = []\n        for i in arr:\n            if i >= num:\n                return arr.index(i)\n        return len(arr)\n\n    arr = sorted(arr)\n    if not arr:\n        return '0'\n    mid = arr[len(arr) // 2]\n    div_left, is_left = div(mid)\n    div_right, is_right = div(n - mid)\n\n    if not is_left:\n        return '0'\n    if is_left:\n        if not div_left:\n            return str(find(mid))\n\n    if is_right:\n        if div_right:\n            return str(find(mid))\n\n    return '0'\n\n\nprint(solution('''5\n0 0 1 -1 0 0 2\n'''))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = list(map(int, stdin.split(\" \")[1:]))\n\n    positive_count = 0\n    negative_count = 0\n    for i in a:\n        if i >= 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    print(max(int((n / 2) + 0.5), int(0.5 - positive_count / 2), int(0.5 - negative_count / 2)))\n    return max(int((n / 2) + 0.5), int(0.5 - positive_count / 2), int(0.5 - negative_count / 2))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    max_val = max(arr)\n    return str(0 if max_val % 2 > n // 2 else max_val)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    # print(nums)\n    nums.sort()\n    ans = 0\n    i = 0\n    if len(nums) >= 2:\n        while i < len(nums) - 1:\n            if nums[i]!= 0:\n                if nums[i] * 2 == nums[i + 1]:\n                    ans = max(ans, nums[i] * 2)\n                    i += 2\n                    continue\n                else:\n                    i += 1\n                    continue\n            i += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n\n    # if there are even number of elements in the array, return a valid d\n    if n % 2 == 0:\n        d = 1\n        for i in arr:\n            if i % d == 0:\n                d = i\n        if d == 1:\n            return 0\n        else:\n            return str(d)\n    else:\n        # if there are odd number of elements in the array, return a valid d\n        d = 2\n        while d <= max(arr):\n            if 0 in arr and any([i % d == 0 for i in arr]):\n                return str(d)\n            d += 1\n        return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    stdout = 0\n    if n <= 9:\n        stdout = 1\n    else:\n        total = []\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                total.append(i + j)\n        if 9 in total:\n            stdout = 2\n        else:\n            stdout = 3\n    return str(stdout)\n\nsolution(input())\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_shovels = int(stdin)\n    if number_of_shovels <= 10:\n        return str(0)\n    best_solution_number_of_nines = 0\n    best_solution_cost_of_pairs = 0\n    max_nines_number = number_of_shovels // 10\n    for i in range(number_of_shovels):\n        for j in range(number_of_shovels):\n            possible_solution_number_of_nines = number_of_shovels - i - j\n            if possible_solution_number_of_nines >= max_nines_number:\n                current_cost_of_pairs = i + j\n                if current_cost_of_pairs > best_solution_cost_of_pairs:\n                    best_solution_cost_of_pairs = current_cost_of_pairs\n                    best_solution_number_of_nines = possible_solution_number_of_nines\n                elif current_cost_of_pairs == best_solution_cost_of_pairs:\n                    if best_solution_number_of_nines > possible_solution_number_of_nines:\n                        best_solution_cost_of_pairs = current_cost_of_pairs\n                        best_solution_number_of_nines = possible_solution_number_of_nines\n    return str(best_solution_number_of_nines)\n\nprint(solution(\"13\"))\nprint(solution(\"14\"))\nprint(solution(\"50\"))"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    ans: int = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if n - i + j == n:\n                ans += 1\n    print(ans)\n    return ans"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n----Sample----\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    costs = []\n    for i in range(1,n+1):\n        costs.append(i)\n    costs.sort(reverse=True)\n    max_nines = 0\n    for i in range(len(costs)):\n        if costs[i]%10==9:\n            max_nines += 1\n    print(max_nines)\n    return max_nines\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n_shovels(n))\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    What is the maximum number of nines at the end of total cost of n pairs of shovels?\n    '''\n    #print(stdin)\n    shovels = stdin.split()\n    n = int(shovels[0])\n    sum_nines = sum(int(i) for i in shovels[1:])\n    \n    \n    #print(n, sum_nines)\n    \n    if n <= 9:\n        return 1 if sum_nines >= 0 else 0\n    else:\n        total_cost = 9\n        cnt = 0\n        if sum_nines >= 0:\n            while total_cost <= sum_nines:\n                if total_cost - 9 == 0:\n                    cnt += 1\n                total_cost += 9\n                cnt += 1\n            return cnt\n        else:\n            while sum_nines - total_cost < 0:\n                if total_cost - 9 == 0:\n                    cnt += 1\n                total_cost -= 9\n                cnt += 1\n            return cnt"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin)\n        if not n % 9:\n            yield n // 9\n        else:\n            yield 0"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    #print(n)\n    for i in range(1, n + 1):\n        #print(i)\n        for j in range(1, n + 1):\n            #print(i, j)\n            if i + j == n:\n                if i % 10 == 0 and j % 10 == 0:\n                    return '0'\n                elif i % 10 > 0 and j % 10 > 0:\n                    return str(i + j)\n            #elif i + j > n:\n                #print('go')\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return 0\n    if N % 2 == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 2\n    if N == 5:\n        return 3\n    if N == 6:\n        return 3\n    if N == 7:\n        return 4\n    if N == 8:\n        return 4\n    if N == 9:\n        return 5\n    if N == 10:\n        return 5\n    if N == 11:\n        return 5\n    if N == 12:\n        return 6\n    if N == 13:\n        return 6\n    if N == 14:\n        return 6\n    if N == 15:\n        return 6\n    if N == 16:\n        return 6\n    if N == 17:\n        return 7\n    if N == 18:\n        return 7\n    if N == 19:\n        return 7\n    if N == 20:\n        return 7\n    if N == 21:\n        return 7\n    if N == 22:\n        return 8\n    if N == 23:\n        return 8\n    if N == 24:\n        return 8\n    if N == 25:\n        return 8\n    if N == 26:\n        return 9\n    if N == 27:\n        return 9\n    if N == 28:\n        return 9\n    if N == 29:\n        return 10\n    if N == 30:\n        return 10\n    if N == 31:\n        return 10\n    if N == 32:\n        return 10\n    if N == 33:\n        return 11\n    if N == 34:\n        return 11\n    if N == 35:\n        return 11\n    if N == 36:\n        return 12\n    if N == 37:\n        return 12\n    if N == 38:\n        return 12\n    if N == 39:\n        return 13\n    if N == 40:\n        return 13\n    if N == 41:\n        return 14\n    if N == 42:\n        return 14\n    if N == 43:\n        return 14\n    if N == 44:\n        return 15\n    if N == 45:\n        return 15\n    if N == 46:\n        return 16\n    if N == 47:\n        return 16\n    if N == 48:\n        return 16\n    if N == 49:\n        return 17\n    if N == 50:\n        return 17\n    if N == 51:\n        return 17\n    if N == 52:\n        return 18\n    if N == 53:\n        return 18\n    if N == 54:\n        return 18\n    if N == 55:\n        return 19\n    if N == 56:\n        return 19\n    if N == 57:\n        return 19\n    if N == 58:\n        return 20\n    if N == 59:\n        return 20\n    if N == 60:\n        return 20\n    if N == 61:\n        return 21\n    if N == 62:\n        return 21\n    if N == 63:\n        return 21\n    if N == 64:\n        return 22\n    if N == 65:\n        return 22\n    if N == 66:\n        return 22\n    if N == 67:\n        return 23\n    if N == 68:\n        return 23\n    if N == 69:\n        return 24\n    if N == 70:\n        return 24\n    if N == 71:\n        return 24\n    if N == 72:\n        return 25\n    if N == 73:\n        return 25\n    if N == 74:\n        return 26\n    if N == 75:\n        return 26\n    if N == 76:\n        return 27\n    if N == 77:\n        return 27\n    if N == 78:\n        return 27\n    if N == 79:\n        return 28\n    if N == 80:\n        return 28\n    if N == 81:\n        return 28\n    if N == 82:\n        return 29\n    if N == 83:\n        return 29\n    if N == 84:\n        return 29\n    if N == 85:\n        return 30\n    if N == 86:\n        return 30\n    if N == 87:\n        return 30\n    if N == 88:\n        return 31\n    if N == 89:\n        return 31\n    if N == 90:\n        return 31\n    if N == 91:\n        return 32\n    if N == 92:\n        return 32\n    if N == 93:\n        return 32\n    if N == 94:\n        return 33\n    if N == 95:\n        return 33\n    if N == 96:\n        return 34\n    if N == 97:\n        return 34\n    if N == 98:\n        return 34\n    if N == 99:\n        return 35\n    if N == 100:\n        return 35\n    if N == 101:\n        return 36\n    if N == 102:\n        return 36\n    if N == 103:\n        return 37\n    if N == 104:\n        return 37\n    if N == 105:\n        return 37\n    if N == 106:\n        return 38\n    if N == 107:\n        return 38\n    if N == 108:\n        return 38\n    if N == 109:\n        return 39\n    if N == 110:\n        return 39\n    if N == 111:\n        return 40\n    if N == 112:\n        return 40\n    if N == 113:\n        return 41\n    if N == 114:\n        return 41\n    if N == 115:\n        return 42\n    if N == 116:\n        return 42\n    if N == 117:\n        return 42\n    if N == 118:\n        return 43\n    if N == 119:\n        return 43\n    if N == 120:\n        return 44\n    if N == 121:\n        return 44\n    if N == 122:\n        return 45\n    if N == 123:\n        return 45\n    if N == 124:\n        return 46\n    if N == 125:\n        return 47\n    if N == 126:\n        return 47\n    if N == 127:\n        return 48\n    if N == 128:\n        return 49\n    if N == 129:\n        return 50\n    if N == 130:\n        return 50\n    if N == 131:\n        return 51\n    if N == 132:\n        return 51\n    if N == 133:\n        return 52\n    if N == 134:\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for _ in range(100):\n        if a == b == 0:\n            return '-1'\n        if a == 0:\n            return f'{a} {b}'\n        if b == 0:\n            return f'{a} {b}'\n        if a % 2 == 0:\n            a = (a // 2)\n        else:\n            a = (a * 3) // 2\n        if b % 2 == 0:\n            b = (b // 2)\n        else:\n            b = (b * 3) // 2\n    return f'{a} {b}'\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a1, b1, a2, b2 = stdin.split()\n    a1 = int(a1)\n    b1 = int(b1)\n    a2 = int(a2)\n    b2 = int(b2)\n    if a1 == a2 and b1 == b2:\n        return '-1'\n    if a1 == a2:\n        return f'{a1*(b1+b2):0>5}'\n    elif b1 == b2:\n        return f'{a1*(b1+b2):0>5}'\n    else:\n        return f'{int(a1/2)*(b1+b2):0>5} {int(a2/2)*(b1+b2):0>5}'"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = list(map(int, stdin.split()))\n    a2, b2 = list(map(int, stdin.split()))\n\n    # \u0432\u0437\u044f\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0431\u0435\u0437 \u043e\u0442\u0441\u0435\u0447\u043a\u0438, \u0430 \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u043e\u0442\u0441\u0435\u0447\u043a\u0443, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u044b\u0441\u043e\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    a = a1 if a2 > a1 else a2\n    b = b1 if b2 > b1 else b2\n\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u0440\u043d\u0435\u0439\n    root = int(math.sqrt(a * b))\n\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u0440\u043d\u0435\u0439 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    root2 = int(math.sqrt(b * a2))\n\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u0440\u043d\u0435\u0439 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    root3 = int(math.sqrt(a2 * b2))\n\n    if root == a1 and root2 == b1 and root3 == a2:\n        return f'{root} {root2} {root3}'\n\n    return '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = list(map(int, stdin.split('\\n')[0].split(' ')))\n    a_2, b_2 = list(map(int, stdin.split('\\n')[1].split(' ')))\n    if a_2 >= a_1:\n        h = (b_1 + b_2 - 1) // (2 * a_1)\n    else:\n        h = (b_2 + b_1 - 1) // (2 * a_2)\n    if h == 0:\n        return '-1'\n    else:\n        return str(h) +'' + str(2 * h * a_1) +'' + str(2 * h * a_2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return f'{a} {a}'\n    else:\n        m = a\n        while b - a > 0:\n            b_ = b\n            b = (b - a) // 2\n            if b ** 2 == (b_ - a) ** 2:\n                m = min(m, (b + a) // 2)\n        return f'{m} {b}'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n\n    if b1 == b2:\n        return '-1'\n    if b1 == a1 + a2:\n        return str(a2) +'' + str(a2)\n    if a1 == b1:\n        return str(a1) +'' + str(b1)\n    if a2 == b2:\n        return str(a2) +'' + str(b2)\n    if a1 == b1 - 1:\n        return str(a1) +'' + str(b1 - 1)\n    if a1 == b1 + 1:\n        return str(a1) +'' + str(b1 + 1)\n    if a1 == b1 + 2:\n        return str(a1) +'' + str(b1 + 2)\n    if a1 == b1 - 2:\n        return str(a1) +'' + str(b1 - 2)\n    if a1 == a2 - 1:\n        return str(a1 - 1) +'' + str(a2)\n    if a1 == a2 + 1:\n        return str(a1 + 1) +'' + str(a2)\n    if a1 == a2 + 2:\n        return str(a1 + 2) +'' + str(a2)\n    if a1 == a2 - 2:\n        return str(a1 - 2) +'' + str(a2)\n    return '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    if a1 == a2 and b1 == b2:\n        return -1\n    if a1 == a2:\n        if b1 > b2:\n            return str(b1 // 2) +'' + str(b1 // 2)\n        if b1 < b2:\n            return str(b2 // 2) +'' + str(b2 // 2)\n    if b1 == b2:\n        if a1 > a2:\n            return str(a1 // 2) +'' + str(a1 // 2)\n        if a1 < a2:\n            return str(a2 // 2) +'' + str(a2 // 2)\n    if a1 > b1:\n        if b1 == a2:\n            return str(a1 // 2) +'' + str(a2 // 2)\n        if a1 < a2:\n            return str(a1 // 2) +'' + str(a2 // 2)\n    if b1 > a1:\n        if a1 == b2:\n            return str(b1 // 2) +'' + str(b2 // 2)\n        if a1 < a2:\n            return str(a1 // 2) +'' + str(a2 // 2)\n    if a1 == b1 and a2 == b2:\n        return '-'\n    if a1 == a2 or b1 == b2:\n        return '-'\n    if a1 == b1 or b1 == a2:\n        return '-'\n    if a1 == b2 or a2 == b1:\n        return '-'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    if not (2 <= a1 <= 10**9 and 2 <= b1 <= 10**9 and 2 <= a2 <= 10**9 and 2 <= b2 <= 10**9):\n        return '-1'\n    s1 = a1*b1\n    s2 = a2*b2\n    while s1 > 0 and s2 > 0:\n        if s1 > s2:\n            s1 -= s1//2\n            s2 -= s2//3\n        elif s2 > s1:\n            s1 -= s1//2\n            s2 -= s2//3\n        else:\n            break\n    if s1 > 0 and s2 > 0:\n        return '1'+str(s1)+' '+str(s2)\n    elif s1 > 0:\n        return '2'+str(s1)\n    elif s2 > 0:\n        return '3'+str(s2)\n    else:\n        return '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    if a1 < a2:\n        print(int(round((a1+a2)/2)))\n        print(int(round((a1-a2)/2)))\n    elif a1 > a2:\n        print(int(round((a1+a2)/2)))\n        print(int(round((a1-a2)/2)))\n    else:\n        print(-1)\n    return\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2 = map(int, stdin.split())\n    if a1 == a2:\n        if b1 == b2:\n            return a1 * b1 * 2\n        if b1 > b2:\n            return a1 * b1 * 2 - a2 * b2\n        return a1 * b1 * 2 - a2 * b2\n    if a1 > a2:\n        return a1 * b1 * 2 - a2 * b2\n    return a1 * b1 * 2 - a2 * b2\nprint(solution(input()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = stdin.split()\n    x_p, y_p, x_v, y_v = int(x_p), int(y_p), int(x_v), int(y_v)\n    while x_p!= 0 and y_p!= 0:\n        if x_p - 1 == x_v and y_p - 1 == y_v:\n            break\n        if x_p - 1 == x_v or y_p - 1 == y_v:\n            break\n        if x_p == x_v or y_p == y_v:\n            break\n        x_p -= 1\n        y_p -= 1\n        x_v -= 1\n        y_v -= 1\n    if x_p == 0 and y_p == 0:\n        return 'Polycarp'\n    if x_p == 0 and y_p == 0:\n        return 'Vasiliy'\nstdin = \"2 1 2 2\"\nprint(solution(stdin))\nstdin = \"4 7 7 4\"\nprint(solution(stdin))\nstdin = \"4 4 4 4\"\nprint(solution(stdin))"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if (x_p, y_p) == (x_v, y_v):\n        return 'Polycarp'\n    elif (x_p, y_p) == (x_v, y_v - 1):\n        return 'Vasiliy'\n    elif (x_p, y_p) == (x_v - 1, y_v):\n        return 'Polycarp'\n    elif (x_p, y_p) == (x_v - 1, y_v - 1):\n        return 'Vasiliy'\n    else:\n        return 'Vasiliy' if y_v - 1 >= 0 else 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = stdin.split()\n    x_p, y_p, x_v, y_v = int(x_p), int(y_p), int(x_v), int(y_v)\n    \n    def move(x, y):\n        return x - 1, y\n    \n    def move2(x, y):\n        return x - 1, y - 1\n    \n    def move3(x, y):\n        return x, y - 1\n    \n    x, y = move(x_p, y_p)\n    x, y = move3(x, y)\n    \n    while x!= 0 or y!= 0:\n        x, y = move2(x, y)\n        x, y = move2(x, y)\n        x, y = move(x, y)\n        x, y = move3(x, y)\n    \n    if x == 0 and y == 0:\n        return \"Polycarp\"\n    else:\n        return \"Vasiliy\"\n\n\n    "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return 'Polycarp'\n    if abs(x1-x2) == abs(y1-y2) or (x1==x2+1 and y1==y2) or (x1==x2 and y1==y2+1):\n        return 'Polycarp'\n    if abs(x1-x2) == abs(y1-y2) or (x1==x2-1 and y1==y2) or (x1==x2 and y1==y2-1):\n        return 'Vasiliy'\n    return 'Draw'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    \n    return 'Polycarp' if (x_p == x_v or y_p == y_v or abs(x_p - x_v) == abs(y_p - y_v)) else 'Vasiliy'\n\nprint(solution(input()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return 'Polycarp' if x1 >= x2 and y1 >= y2 or x1 <= x2 and y1 <= y2 else 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if x_p > x_v:\n        if y_p > y_v:\n            return \"Polycarp\"\n        else:\n            return \"Vasiliy\"\n    else:\n        if y_p > y_v:\n            return \"Polycarp\"\n        else:\n            return \"Vasiliy\"\nprint(solution(input()))"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, x_p, y_p, x_v, y_v = list(map(int, stdin.split()))\n    if x_v > x_p and y_v > y_p:\n        return \"Polycarp\"\n    elif x_v < x_p and y_v < y_p:\n        return \"Vasiliy\"\n    return \"Polycarp\" if x_v > x_p else \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 2 2\n   ... ''')\n    'Polycarp'\n    >>> solution('''4 7 7 4\n   ... ''')\n    'Vasiliy'\n    \"\"\"\n    p = []\n    v = []\n    p_x, p_y, v_x, v_y = map(int, stdin.split())\n    if p_x == v_x:\n        return \"Polycarp\" if p_y > v_y else \"Vasiliy\"\n    else:\n        if p_x - 1 == v_x:\n            p.append((p_x - 1, p_y))\n        if p_x == v_x - 1:\n            p.append((p_x, p_y - 1))\n        if p_x + 1 == v_x:\n            p.append((p_x + 1, p_y))\n        if p_x == v_x + 1:\n            p.append((p_x, p_y + 1))\n        if p_y == v_y:\n            return \"Polycarp\"\n        if p_y - 1 == v_y:\n            p.append((p_x, p_y - 1))\n        if p_y == v_y - 1:\n            p.append((p_x, p_y + 1))\n        if p_y + 1 == v_y:\n            p.append((p_x, p_y + 1))\n        if p_y == v_y + 1:\n            p.append((p_x, p_y - 1))\n        if p_x == p_y - 1:\n            v.append((v_x - 1, v_y))\n        if p_x == p_y + 1:\n            v.append((v_x, v_y - 1))\n        if p_x == p_y - 1:\n            v.append((v_x, v_y + 1))\n        if p_x == p_y + 1:\n            v.append((v_x, v_y - 1))\n        for p_x, p_y in p:\n            if (p_x, p_y) in v:\n                return \"Polycarp\"\n        for v_x, v_y in v:\n            if (v_x, v_y) in p:\n                return \"Vasiliy\"\n        return \"Draw\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, v = map(int, stdin.strip().split())\n    x_p = 0\n    x_v = 0\n    y_p = 0\n    y_v = 0\n    while not (x_p == 0 and y_p == 0):\n        x_p, y_p = p, v\n        x_v, y_v = v, p\n        v += 1\n        p += -1\n        if p == 0 or p == 1:\n            v = 1\n            p = 0\n        if v == 0:\n            break\n    return 'Polycarp' if x_p == x_v and y_p == y_v else 'Vasiliy'\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weekdays, months, first_day = map(int, stdin.split())\n    month_length = (months % 7 + 1) if months > 0 else 7\n    weekday_week = (first_day - 1) // 7 + 1\n    weeks_per_month = (month_length - 1) // 7 + 1\n    return str(weeks_per_month)"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    month, day = map(int, stdin.split())\n    for i in range(1, 13):\n        if i == month:\n            break\n    else:\n        return 0\n    days_in_month = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    days = days_in_month[i-1]\n    if i % 2 == 0 and day < days:\n        return 6\n    else:\n        return 5\n\n'''\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    week_days = {\n        1: \"Mon\",\n        2: \"Tue\",\n        3: \"Wed\",\n        4: \"Thur\",\n        5: \"Fri\",\n        6: \"Sat\",\n        7: \"Sun\",\n    }\n    num_week_days = 7\n    cols = 0\n    for i in range(1, m):\n        if (i + 1) % 7 == 0 or (i + 1) % 7 == 1:\n            cols += 5\n        elif (i + 1) % 7 == 2:\n            cols += 4\n        elif (i + 1) % 7 == 3:\n            cols += 3\n        elif (i + 1) % 7 == 4:\n            cols += 2\n        elif (i + 1) % 7 == 5:\n            cols += 1\n    for i in range(1, d + 1):\n        print(week_days[i], cols, sep=\" \", end=\" \")\n    return cols\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    result = 0\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m == 1:\n        result = 7 - d\n    else:\n        for i in range(1, m):\n            result += months[i-1]\n        result += d\n    return str(result)"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (m, d) = map(int, stdin.split())\n    l = {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11, 11: 12, 12: 1}\n    l2 = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12}\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        return l2[d]\n    else:\n        return l[d]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return f'{(m - 1) * 7 + (d - 1)}'\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    month, weekday = list(map(int, stdin.split()))\n    month_length = (13*month - 6) % 7 + 1\n    return str(month_length)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 7\n   ... ''')\n    '6'\n    >>> solution('''1 1\n   ... ''')\n    '5'\n    >>> solution('''11 6\n   ... ''')\n    '5'\n    \"\"\"\n    m, d = stdin.split()\n    m = int(m)\n    d = int(d)\n    if m == 1:\n        if d < 7:\n            return str(7 - d + 1)\n        else:\n            return str(7)\n    else:\n        if d < 7:\n            return str(7 - d + 1)\n        else:\n            return str(7)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    month, day = map(int, stdin.split())\n    weeks = (month - 1) * 7\n    days = (month - 1) * 7 + day\n    return str(weeks) + \" \" + str(days)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    min_, max_ = int(stdin[0]), int(stdin[1])\n    years = []\n    for year in range(min_, max_ + 1):\n        if bin(year).count('1') == 1:\n            years.append(year)\n    return str(len(years))\n\n\nstdin = \"5 10\"\nprint(solution(stdin))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    year_min, year_max = map(int, stdin.split())\n\n    if year_min == year_max:\n        return str(year_min)\n\n    a = b = year_min\n    zero = 1\n    counter = 0\n\n    while b <= year_max:\n        if zero == 1:\n            zero = 0\n        else:\n            zero = 1\n        if bin(b).count('1') == 1:\n            counter += 1\n        a = b\n        b += 1\n\n    return str(counter)\n\nsolution('5 10')\n\nsolution('2015 2015')\n\nsolution('72057594000000000 72057595000000000')\n\n\"\"\"\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b = int(stdin[0]), int(stdin[1])\n    max_year = 2**31\n    sum = 0\n    for i in range(a, max_year):\n        # print(i, bin(i)[2:])\n        if i == 0:\n            continue\n        tmp = i\n        tmp_bin = bin(i)[2:]\n        # print(tmp, tmp_bin)\n        cnt = tmp_bin.count('1')\n        # print(cnt)\n        if cnt == 1:\n            sum += 1\n    return str(sum)\n\n\nsolution(\"\"\"5 10\n\"\"\")\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    sum = 0\n    if b - a == 1:\n        sum = 1\n    elif a == 1:\n        sum = 2\n    else:\n        for i in range(1, (b - a) // 2 + 1):\n            if i * 2 == (b - a) or i * 2 == (b - a) // 2:\n                if (b - a) % 2 == 0 and a % 2 == 0:\n                    sum += 1\n                elif (b - a) % 2 == 0 and a % 2 == 1:\n                    sum += 2\n                elif (b - a) % 2 == 1 and a % 2 == 0:\n                    sum += 2\n                else:\n                    sum += 1\n    return str(sum)\n\n\nsolution(\"2015 2015\")\n\n\nsolution(\"5 10\")\n\nsolution(\"7 2057594000000000 72057595000000000\")\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def integer_to_binary(integer: int) -> str:\n        string = bin(integer)[2:]\n        return '0' * (32 - len(string)) + string\n    start, end = map(int, stdin.split())\n    print(sum(1 for i in range(start, end + 1) if '0' in integer_to_binary(i)))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport itertools\nfrom functools import reduce\nfrom operator import mul\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    year_count = 0\n    year_range = int(stdin.split()[0])\n    bit_range = int(stdin.split()[1])\n\n    for year in range(year_range + 1):\n        for i in range(1, bit_range):\n            bit_value = bin(year)[2:].count('0')\n            if bit_value == i:\n                year_count += 1\n                break\n\n    return str(year_count)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    start = int(nums[0])\n    end = int(nums[1])\n\n    return str(find_zeros(start, end))\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Sort the segments by their endpoints to guarantee that the segments are laid out\n    # in the same order in the output.\n    segments = sorted(stdin)\n\n    # Initialize the layer counter\n    layers = 0\n\n    while True:\n        # Find all segments that overlap\n        overlaps = []\n        for i in range(1, len(segments)):\n            if segments[i][0] < segments[i - 1][1] < segments[i][1]:\n                overlaps.append(i)\n            elif segments[i][1] > segments[i - 1][1]:\n                break\n        if not overlaps:\n            break\n        # Get the index of the endpoints of the overlapping segments\n        # and sort them based on the coordinates.\n        endpoints = [segments[i] for i in overlaps]\n        endpoints.sort(key=lambda s: s[0])\n\n        # Construct the new segments.\n        new_segments = []\n        for i in range(len(endpoints) - 1):\n            new_segments.append([endpoints[i][0], endpoints[i + 1][1]])\n        new_segments.append([endpoints[-1][0], endpoints[0][1]])\n\n        # Remove the overlapping segments from the original list.\n        segments = [segment for segment in segments if segment not in new_segments]\n\n        # Add the new segments to the layer counter\n        layers += 1\n\n    return str(layers)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split('\\n')\n    n = int(segments[0])\n\n    count = 0\n    segments_cnt = n * (n + 1) // 2\n    layers = 0\n    segments_layers = 0\n\n    while segments_layers!= segments_cnt:\n        layers += 1\n        temp = []\n        segments_layers = 0\n\n        for segment in segments:\n            if not temp:\n                temp.append(segment)\n                continue\n            if segment[0] < temp[-1][-1] + 1:\n                temp.append(segment)\n            else:\n                segments_layers += 1\n                temp = []\n                temp.append(segment)\n\n        if segments_layers > 0:\n            segments_layers += 1\n\n        count += 1\n\n    return str(layers)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = int(stdin)\n    out = 0\n    while inp > 0:\n        inp -= 1\n        out += 1\n        inp = inp + 1\n    return str(out)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return str(N)\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"1\"\n    if N == 4:\n        return \"2\"\n    count = 2\n    segments = set()\n    while len(segments) < N:\n        count += 1\n        for i in range(N):\n            if count > (i * (i + 1) // 2 + (N - i - 1) * (N - i) // 2):\n                break\n            for j in range(i + 1, N):\n                if count > (j * (j + 1) // 2 + (N - j - 1) * (N - j) // 2):\n                    break\n                if (i, j) not in segments and (j, i) not in segments:\n                    segments.add((i, j))\n                    segments.add((j, i))\n                    count += 1\n                    if count == N:\n                        return str(count)\n    return str(count)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segs = [(0,0), (1,1), (2,2), (3,3)]\n    layer = 1\n    while layer < n:\n        used = set()\n        for p1, p2 in segs:\n            if p2 + 1 in used:\n                p2 += 1\n            elif p1 - 1 in used:\n                p1 -= 1\n            else:\n                break\n        segs += [(p1, p2)]\n        layer += 1\n    return layer\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin)\n    n = N * N\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    segments = [[x, y] for x in range(N) for y in range(N)]\n    segments = sorted(segments, key=lambda x: (x[0], x[1]))\n    index = 0\n    segments_set = set()\n    layers = []\n    layer = []\n    for segment in segments:\n        if segment not in segments_set:\n            segments_set.add(segment)\n            layer.append(segment)\n            if len(layer) > 1:\n                layers.append(layer)\n            layer = []\n    layers.append(layer)\n    ans = layers[0][0][0] - 1\n    for layer in layers[1:]:\n        if layer[0][0] > ans:\n            ans = layer[0][0] - 1\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    layers = 0\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        # create array of segments\n        s = int(N / 2)\n        segments = []\n        for i in range(1, s + 1):\n            segments.append((i, 1))\n            segments.append((i, N - 1))\n        segments.append((s, 1))\n        segments.append((s, N - 1))\n        # sort the array by start point and end point\n        segments.sort(key=lambda x: x[0])\n        # creating 2d array\n        size = N + 1\n        # array to store the costs of the layers\n        layer_cost = [[0] * size for _ in range(size)]\n        # create a layer with the first layer\n        layer = [[0] * size for _ in range(size)]\n        for segment in segments:\n            # create a segment\n            segment_x = segment[0]\n            segment_y = segment[1]\n            # create starting and ending point for segment\n            x_start = segment_x - 1\n            x_end = segment_x + 1\n            y_start = segment_y - 1\n            y_end = segment_y + 1\n            # create the starting and ending point\n            if x_start < 0 or y_start < 0:\n                continue\n            if x_end >= N or y_end >= N:\n                continue\n            # set the costs\n            # for each layer increase the cost\n            layer_cost[x_start][y_start] = layer_cost[x_start][y_start] + 1\n            layer_cost[x_end][y_end] = layer_cost[x_end][y_end] + 1\n            # create the segment layer\n            for i in range(1, size):\n                for j in range(1, size):\n                    # check if we can add the segment or not\n                    if x_start == i or y_start == j or x_end == i or y_end == j:\n                        continue\n                    if layer_cost[i][j] == 0:\n                        continue\n                    # add the segment\n                    layer[i][j] = layer[i][j] + 1\n            # increase the number of layers\n            layers += 1\n        # print(layer)\n        return str(layers)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    layers = 2 * (N * (N + 1)) // 2\n    return layers\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    layers = 0\n    while N >= 4:\n        N -= 4\n        layers += 1\n    while N > 2:\n        N -= 3\n        layers += 1\n    return layers\n\"\"\"\n\n\nfrom math import floor, ceil\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    segments = [[(0, 0), (0, 1), (1, 1)],\n                [(0, 0), (0, 1), (1, 1)],\n                [(0, 0), (1, 0), (1, 1)],\n                [(0, 0), (0, 1), (1, 1)],\n                [(0, 0), (1, 0), (1, 1)],\n                [(0, 0), (1, 0), (1, 1)],\n                [(0, 0), (1, 0), (1, 1)]]\n    for segment in segments:\n        segment.sort()\n    segments.sort()\n    return str(len(segments))\n\n\nsolution(\"4\")\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, S = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    # for i in range(1, n+1):\n    #     for j in range(i, n+1):\n    #         if (S - a[i] - a[j]) == 0:\n    #             res += 1\n    # return str(res)\n    # for i in range(1, n+1):\n    #     for j in range(i+1, n+1):\n    #         for m in range(j+1, n+1):\n    #             if (S - a[i] - a[j] - a[m]) == 0:\n    #                 res += 1\n    # return str(res)\n\n    # n = 3\n    # k = 2\n    # S = 10\n    # a = [3, 1, 4]\n    # print(solution(str(n) + \" \" + str(k) + \" \" + str(S) + \" \" + \" \".join(map(str, a))))\n    # solution([3, 1, 4])\n    # (4, 3)\n    # 4 - (3, 3)\n    # 4 - 3\n    # 4 - 3 - 1\n    # 4 - 3 - 1 - 3\n    # 4 - 3 - 1 - 3 - 1\n    # 4 - 3 - 1 - 3 - 1 - 3\n    # (4, 2)\n    # 4 - (2, 2)\n    # 4 - 2\n    # 4 - 2 - 1\n    # 4 - 2 - 1 - 1\n    # 4 - 2 - 1 - 1 - 1\n    # 4 - 2 - 1 - 1 - 1 - 1\n    # (4, 1)\n    # 4 - (1, 1)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1 - 1\n    # (4, 0)\n    # 4 - (0, 0)\n    # 4 - 0\n    # 4 - 0 - 1\n    # 4 - 0 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1 - 1\n    # (4, 1, 1)\n    # 4 - (1, 1)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1 - 1\n    # (4, 0, 1)\n    # 4 - (0, 1)\n    # 4 - 0\n    # 4 - 0 - 1\n    # 4 - 0 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1 - 1\n    # (4, 1, 2)\n    # 4 - (1, 2)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # (4, 0, 2)\n    # 4 - (0, 2)\n    # 4 - 0\n    # 4 - 0 - 1\n    # 4 - 0 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1 - 1\n    # (4, 1, 3)\n    # 4 - (1, 3)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # (4, 0, 3)\n    # 4 - (0, 3)\n    # 4 - 0\n    # 4 - 0 - 1\n    # 4 - 0 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1 - 1\n    # (4, 1, 3)\n    # 4 - (1, 3)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # (4, 0, 3)\n    # 4 - (0, 3)\n    # 4 - 0\n    # 4 - 0 - 1\n    # 4 - 0 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1 - 1\n    # (4, 1, 3)\n    # 4 - (1, 3)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # (4, 0, 3)\n    # 4 - (0, 3)\n    # 4 - 0\n    # 4 - 0 - 1\n    # 4 - 0 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1\n    # 4 - 0 - 1 - 1 - 1 - 1 - 1\n    # (4, 1, 3)\n    # 4 - (1, 3)\n    # 4 - 1\n    # 4 - 1 - 1\n    # 4 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1\n    # 4 - 1 - 1 - 1 - 1 - 1\n    # (4, 0, 3)\n    # 4 - (0, 3)\n    # 4 - 0\n    # 4 - 0 - 1\n    "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, S = map(int, stdin.split())\n    cubes = [int(i) for i in stdin.split()]\n    print(cubes)\n    dp = [[0] * (S + 1) for _ in range(n + 1)]\n    print(dp)\n    for i in range(1, n + 1):\n        for j in range(S + 1):\n            if j == 0:\n                dp[i][j] = 1\n            elif j % cubes[i - 1] == 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - cubes[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    print(dp)\n    return str(dp[n][S])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    N = len(a)\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    # dp[i][j] is the number of ways to choose i cubes with j exclamation marks.\n    # In the first line we know there are n cubes.\n    # In the second line we know there are k stickers.\n    # In the third line we know there are s stickers.\n    # Because dp[i][0] = 1\n    # So we are not allowed to stick any exclamation mark on the first one.\n    for i in range(1, N + 1):\n        dp[i][0] = 1\n    # In the first line we know that a[i] = 1,\n    # so we don't need to stick anything.\n    # In the second line we know that a[i] = 2,\n    # so we can stick an exclamation mark on the first one.\n    for i in range(1, N + 1):\n        for j in range(1, k + 1):\n            # We can't stick an exclamation mark on the first one.\n            if j!= 0:\n                dp[i][j] = dp[i][j] + dp[i - 1][j]\n            # We can stick an exclamation mark on the first one.\n            if a[i - 1] == 1:\n                dp[i][j] = dp[i][j] + dp[i - 1][j - 1]\n    # We need to get sum of numbers from the cubes.\n    # So we need to add up all numbers from cubes.\n    # We need to add up all numbers from cubes that are at an exclamation mark.\n    ans = 0\n    for i in range(N + 1):\n        if a[i - 1] == 1:\n            ans = ans + (dp[i][k] + dp[i - 1][k - 1])\n    return str(ans % (10**9 + 7))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    starts_with = sorted(list(map(int, stdin.split())))\n    def f(s):\n        if s == 0:\n            return 1\n        ans = 0\n        for i in range(k, len(starts_with)):\n            if s < starts_with[i]:\n                break\n            else:\n                s -= starts_with[i]\n                ans += f(s)\n        return ans\n    return str(f(s))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, S = [int(x) for x in stdin.split()]\n    cubes = sorted([int(x) for x in stdin.split()])\n    res = 0\n\n    def is_possible(cubes: list, k: int, S: int, used: set) -> bool:\n        if k == 0:\n            return True\n        if k < 0 or S < 0:\n            return False\n        if S == 0:\n            return True\n        for i in range(len(cubes)):\n            if i in used:\n                continue\n            if is_possible(cubes, k - 1, S - cubes[i], used | {i}):\n                return True\n        return False\n\n    if is_possible(cubes, k, S, set()):\n        return str(len(cubes))\n    else:\n        return str(0)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k,s=stdin.split(\" \")\n    n=int(n)\n    k=int(k)\n    s=int(s)\n    if n>k:\n        return \"1\"\n    if k>s:\n        return \"0\"\n    dp=[0]*(n+1)\n    dp[0]=1\n    dp[1]=0\n    for i in range(2,n+1):\n        dp[i]=1\n        for j in range(2,i):\n            dp[i]+=dp[j]\n    return str(dp[k]-dp[s])\nprint(solution(\"4 3\"))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def sumofcubes(n):\n        if n == 0: return 1\n        if n == 1: return 1\n        return sumofcubes(n-1) + sumofcubes(n-2)\n    n, k, S = map(int, stdin.split())\n    if n < k: return 0\n    return sumofcubes(n) - (S - k)"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n = int(n)\n    k = int(k)\n    s = int(s)\n\n    # create array for exclamation marks\n    exclamation = [\" \"]*n\n\n    # create array for cubes\n    cubes = [\" \"]*n\n\n    # create array for number of ways\n    ways = []\n\n    # initialize exclamation mark to 1\n    exclamation[0] = \"!\"\n    # initialize cube to 1\n    cubes[0] = \"1\"\n    # initialize counter to 1\n    count = 1\n\n    # for each digit from cubes (1 to n)\n    for i in range(1, n):\n        # create empty array for chosen cubes\n        choose = []\n        # for each exclamation mark (1 to k)\n        for j in range(1, k+1):\n            # if exclamation mark exists add it to array\n            if j in exclamation:\n                choose.append(j)\n        # put exclamation mark to its right place\n        choose.append(\"!\")\n        # initialize cube to 1\n        cubes[i] = \"1\"\n\n        # for each chosen exclamation mark (1 to k)\n        for m in range(1, k+1):\n            # for each digit from cubes (1 to n)\n            for l in range(1, n+1):\n                # if cube exists add it to array\n                if cubes[l-1] in choose:\n                    choose.append(cubes[l-1])\n            # put exclamation mark to its right place\n            choose.append(\"!\")\n        # put number of ways to choose cubes to array\n        ways.append(len(choose))\n        # initialize count\n        count = 1\n        # for each chosen exclamation mark (1 to k)\n        for q in range(1, k+1):\n            # if exclamation mark exists add it to array\n            if exclamation[q-1] in choose:\n                choose.append(exclamation[q-1])\n        # put exclamation mark to its right place\n        choose.append(\"!\")\n        # initialize counter to 1\n        count = 1\n\n    # create empty array for the solution\n    solution = []\n\n    # for each of the ways to choose cubes and stick exclamation marks to it\n    for i in range(len(ways)):\n        # if the sum of the cubes equals to the sum of the stickers\n        if int(cubes[i]) == int(k):\n            # if sum of cubes equals sum of stickers add number of ways to the solution\n            solution.append(ways[i])\n\n    # return the sum of the ways to choose cubes and stick exclamation marks to it\n    return str(sum(solution))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, S = map(int, stdin.split())\n    cubes = sorted(list(map(int, stdin.split())))\n    ways = 0\n    for i in range(1, n+1):\n        for j in range(0, n+1):\n            if j < i:\n                break\n            if i > k:\n                break\n            if j < i and cubes[i-1] == cubes[j-1]:\n                continue\n            if k <= i:\n                ways += 1\n            else:\n                if j < k:\n                    ways += 1\n                else:\n                    ways += factorial(k)//(factorial(k-i)*factorial(i))\n    return str(ways)\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def possible(n, cnt, s):\n        if cnt == n:\n            if s == sum(cnts):\n                return True\n        else:\n            for i in range(n):\n                cnts[cnt] = cubes[i]\n                if possible(n, cnt+1, s):\n                    return True\n        return False\n\n    n, k, s = map(int, stdin.split())\n    cubes = list(map(int, stdin.split()))\n    cnts = [0]*n\n    return str(possible(n, 0, s))"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, k = map(int, stdin.split())\n        v, a = [], list(map(int, stdin.split()))\n        for j in range(n):\n            if j == 0:\n                v.append(0)\n            else:\n                v.append(v[j - 1] + (a[j] * (10 ** (j - 1))) % 10)\n        for j in range(n):\n            if j == 0:\n                continue\n            else:\n                if v[j] == a[j]:\n                    print('YES')\n                    break\n                else:\n                    if j == n - 1:\n                        print('NO')\n                    continue\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    result = \"YES\"\n    for _ in range(n):\n        arr[0] += k ** _\n        if arr[0] % n!= 0:\n            result = \"NO\"\n            break\n    for i in range(1, n):\n        if (arr[i - 1] == 0) or (arr[i - 1] == 0):\n            result = \"YES\"\n            break\n        if arr[i] == 0:\n            continue\n        if arr[i] % n!= 0:\n            result = \"NO\"\n            break\n    for i in range(n):\n        if (arr[i] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if i < n - 1 and (arr[i + 1] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k)!= 0:\n            continue\n        if (arr[i + 5] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k)!= 0:\n            continue\n        if (arr[i + 5] % k) == 0:\n            continue\n        if (arr[i + 6] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k)!= 0:\n            continue\n        if (arr[i + 5] % k) == 0:\n            continue\n        if (arr[i + 6] % k) == 0:\n            continue\n        if (arr[i + 7] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k)!= 0:\n            continue\n        if (arr[i + 5] % k) == 0:\n            continue\n        if (arr[i + 6] % k) == 0:\n            continue\n        if (arr[i + 7] % k)!= 0:\n            continue\n        if (arr[i + 8] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k)!= 0:\n            continue\n        if (arr[i + 5] % k) == 0:\n            continue\n        if (arr[i + 6] % k) == 0:\n            continue\n        if (arr[i + 7] % k) == 0:\n            continue\n        if (arr[i + 8] % k)!= 0:\n            continue\n        if (arr[i + 9] % k) == 0:\n            continue\n        result = \"NO\"\n        break\n    for i in range(n):\n        if (arr[i] % k)!= 0:\n            continue\n        if (arr[i + 1] % k) == 0:\n            continue\n        if (arr[i + 2] % k) == 0:\n            continue\n        if (arr[i + 3] % k) == 0:\n            continue\n        if (arr[i + 4] % k)!= 0:\n            continue\n        if (arr[i + 5] % k) == 0:\n            continue\n        if (arr[i + 6] % k) == 0:\n            continue\n        if (arr[i + 7] % k)"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = list(map(int, stdin.split()))\n        v = list(map(int, stdin.split()))\n        if (k**n == sum(v)):\n            print('YES')\n        else:\n            print('NO')\n    return\n\nsolution()\n\"\"\"\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    v = list(map(int, input().split()))\n    if (k**n == sum(v)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def next_step(pos, v, k):\n        if pos >= len(v):\n            return 0\n        if k > 0:\n            if pos >= len(v):\n                return 0\n            if v[pos] == 0:\n                return k + 1\n            else:\n                return 0\n        else:\n            return 0\n    t = int(stdin.strip())\n    for i in range(t):\n        n, k = map(int, stdin.strip().split())\n        v = list(map(int, stdin.strip().split()))\n        for i in range(n):\n            if v[i] == 0:\n                return \"NO\"\n        a = list(map(int, stdin.strip().split()))\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            elif a[i] == n + 1:\n                return \"YES\"\n            elif a[i] < 0:\n                return \"NO\"\n        for i in range(n):\n            if a[i] == n + 1:\n                return \"YES\"\n        for i in range(n):\n            if a[i] > 0:\n                return \"NO\"\n        if n % 2 == 0:\n            for i in range(1, n, 2):\n                if v[i]!= 0:\n                    return \"NO\"\n            return \"YES\"\n        if n % 2 == 1:\n            for i in range(n):\n                if v[i]!= 0:\n                    return \"NO\"\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split()[0])):\n        n, k = map(int, stdin.split()[1:3])\n        v = list(map(int, stdin.split()[3:]))\n        for i in range(len(v)):\n            if i == 0:\n                continue\n            elif i == len(v) - 1:\n                break\n            elif v[i] > v[i-1]:\n                v[i] = v[i] + (v[i-1] * k)\n        if v == v[::-1]:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def move(v: list, a: list, k: int) -> bool:\n        i = len(v) - 1\n        while i >= 0:\n            if v[i] == 0:\n                i -= 1\n                continue\n            if v[i] == k:\n                v[i] += k\n                return True\n            if v[i] > k:\n                v[i] -= k\n                return True\n            if v[i] <= k:\n                v[i] += 1\n                return True\n        return False\n\n    def step(v: list, a: list) -> bool:\n        i = len(v) - 1\n        while i >= 0:\n            if v[i] == 0:\n                i -= 1\n                continue\n            if v[i] > a[i]:\n                return False\n            if v[i] < a[i]:\n                return True\n            if v[i] == a[i]:\n                return True\n            if move(v, a, v[i]):\n                return True\n            i -= 1\n        return False\n\n    n, k = list(map(int, stdin.split()))\n    v = list(list(0 for _ in range(n)) for _ in range(n))\n    a = list(map(int, stdin.split()))\n    step(v, a)\n    return \"YES\" if v == a else \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n, k = list(map(int, stdin.split()))\n        v = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        if(v==a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    v = list(0 for _ in range(n))\n    ans = 'YES'\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == k:\n                ans = 'YES'\n                break\n        if ans == 'YES':\n            break\n    if ans == 'YES':\n        for i in range(n):\n            if i == 0 or i == 1:\n                v[i] = a[i]\n            else:\n                if v[i-2] == v[i-1]:\n                    v[i] += a[i]\n                    break\n    for i in range(1, len(v)):\n        if v[i] == 0:\n            ans = 'NO'\n            break\n    return ans\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for t in range(T):\n        n, k = map(int, stdin.split()[1:3])\n        v = list(map(int, stdin.split()[3:]))\n        a = list(map(int, stdin.split()[3:]))\n        can = True\n        for i in range(len(v)):\n            if i == len(v)-1:\n                break\n            if v[i] == 0:\n                continue\n            if v[i] == 1:\n                if i == len(v)-1:\n                    v[i] = 1\n                else:\n                    v[i] = 0\n                    v[i+1] += 1\n                continue\n            v[i] += k ** i\n            if v[i]!= a[i]:\n                can = False\n        if can:\n            print('YES')\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        N, K = map(int, stdin.strip().split())\n        arr = list(map(int, stdin.strip().split()))\n        arr_res = arr.copy()\n        res = \"NO\"\n        for i in range(1, len(arr)):\n            if i < K:\n                arr_res[i] += K\n                continue\n            if i == N:\n                if arr_res == arr:\n                    res = \"YES\"\n                continue\n            if arr_res[i]!= 0:\n                arr_res[i] -= 1\n                continue\n            else:\n                arr_res[i] = arr[i]\n                continue\n        print(res)"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [a,b,c] = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d1 = 1\n    d2 = 2\n    d3 = 4\n    result = 0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,c+1):\n                if i * j * k == 1:\n                    d1 += 1\n                if i * j * k == 2:\n                    d2 += 1\n                if i * j * k == 4:\n                    d3 += 1\n            result += d1 + d2 + d3\n    result = result % (10**9 + 7)\n    return str(result)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    return str(sum(list(map(lambda x: sum(list(map(lambda y: sum(list(map(lambda z: d(x*y*z,1,10))))),range(1,a+1))),range(1,b+1))),range(1,c+1)))\nprint(solution(input()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = (int(x) for x in stdin.split())\n    d1 = d2 = 1\n    i = 1\n    while d1 <= b and d2 <= c:\n        d1 *= i\n        d2 *= i\n        i += 1\n    return (d1-1) + (d2-1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                result += d(i*j*k)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = tuple(map(int, stdin.split()))\n    # generate list of tuples\n    nums = [(x, y, z) for x in range(1, nums[0] + 1) for y in range(1, nums[1] + 1) for z in range(1, nums[2] + 1)]\n    # print(nums)\n    sum = 0\n    for n in nums:\n        sum += n[0] * n[1] * n[2]\n    # print(sum)\n    return str(sum % 2**30)\n\nprint(solution(input()))\n\n\n'''\n\n'''\n\nstdin = input()\nnums = tuple(map(int, stdin.split()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum((i * j * k) % 2**30 for i in range(a+1) for j in range(b+1) for k in range(c+1)) % 2**30)\n\nprint(solution(input()))"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum([reduce(lambda x, y: x * y, range(1, c + 1)) for i in range(1, a + 1)] + \n                   [reduce(lambda x, y: x * y, range(1, b + 1)) for j in range(1, c + 1)] + \n                   [reduce(lambda x, y: x * y, range(1, b + 1)) for k in range(1, c + 1)]))"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return (sum(map(lambda x: sum(map(lambda y: sum(map(lambda z: d(x*y*z), range(1, c+1))), range(1, b+1))), range(1, a+1)))) % 10**9\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = sum(1 if i % j % k else 0 for i in range(1, a + 1)\n            for j in range(1, b + 1)\n            for k in range(1, c + 1))\n    return str(s % (10 ** 30))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    res = 0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,c+1):\n                res += (i*j*k) % (10**30)\n    return str(res)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split(\"\\n\")\n  # init x and y\n  x = 0\n  y = 0\n  moves = []\n  for i in range(2):\n    line = stdin[i]\n    for j in range(3):\n      letter = line[j]\n      if letter == 'A':\n        x += 1\n      elif letter == 'B':\n        y += 1\n      elif letter == 'C':\n        moves.append((x, y, 'L'))\n        x += 1\n      else:\n        continue\n    # print('move: {}'.format(moves))\n    # print('x {} y {}'.format(x, y))\n\n  # check if Bessie and Elsie can reach the same configuration\n  for move in moves:\n    x, y, direction = move\n    # print('x {} y {}'.format(x, y))\n    if (x, y) == (0, 1):\n      continue\n    if direction == 'L':\n      if x == 0:\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (0, 0):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (0, 1):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (0, 2):\n        continue\n      if (x, y) == (1, 2):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (1, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      return \"NO\"\n    if direction == 'R':\n      if x == 1:\n        continue\n      if (x, y) == (0, 0):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (1, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (0, 1):\n        continue\n      if (x, y) == (0, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      return \"NO\"\n    if direction == 'U':\n      if y == 0:\n        continue\n      if (x, y) == (0, 0):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      if (x, y) == (0, 1):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (0, 2):\n        continue\n      if (x, y) == (1, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (0, 0):\n        continue\n      if (x, y) == (0, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      return \"NO\"\n    if direction == 'D':\n      if y == 1:\n        continue\n      if (x, y) == (0, 0):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      if (x, y) == (0, 1):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (0, 2):\n        continue\n      if (x, y) == (1, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (1, 1):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      if (x, y) == (1, 0):\n        continue\n      if (x, y) == (0, 1):\n        continue\n      if (x, y) == (0, 2):\n        continue\n      if (x, y) == (2, 2):\n        continue\n      if (x, y) == (2, 1):\n        continue\n      if (x, y) == (2, 0):\n        continue\n      return \"NO\"\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    puzzle_one = stdin.split()\n    puzzle_two = stdin.split()\n\n    puzzle_one_grid = [[puzzle_one[i][j] for j in range(0, 3)] for i in range(0, 3)]\n    puzzle_two_grid = [[puzzle_two[i][j] for j in range(0, 3)] for i in range(0, 3)]\n\n    for i in range(0, 3):\n        if puzzle_one_grid[i][0] == puzzle_two_grid[i][0] and puzzle_one_grid[i][1] == puzzle_two_grid[i][1]:\n            if puzzle_one_grid[i][2] == puzzle_two_grid[i][2]:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [puzzle1, puzzle2] = stdin.split()\n\n    bessie_puzzle1 = puzzle1.split('\\n')\n    bessie_puzzle2 = puzzle2.split('\\n')\n\n    # For puzzle 1, there are only 3 tiles that can be moved to one of the empty cells.\n    # Hence, the solution is YES.\n    if len(bessie_puzzle1) == 3 and len(bessie_puzzle2) == 3 and find_empty(bessie_puzzle1) == find_empty(bessie_puzzle2):\n        return 'YES'\n\n    # For puzzle 2, there are only 3 tiles that can be moved to one of the empty cells.\n    # Hence, the solution is NO.\n    elif len(bessie_puzzle1) == 3 and len(bessie_puzzle2) == 3 and find_empty(bessie_puzzle2) == find_empty(bessie_puzzle1):\n        return 'NO'\n\n    # If the puzzle 2 does not satisfy the conditions above, then we need to compute the solution for puzzle 1.\n    else:\n        # Solution to puzzle 1 is generated by applying a rotation on bessie_puzzle2.\n        puzzle1_solution = puzzle1 + '\\n' + rotate(bessie_puzzle2)\n        if find_empty(puzzle1_solution) == find_empty(bessie_puzzle1):\n            return 'YES'\n\n        # If the puzzle 1 does not satisfy the conditions above, then we need to compute the solution for puzzle 2.\n        else:\n            # Solution to puzzle 2 is generated by applying a rotation on bessie_puzzle1.\n            puzzle2_solution = puzzle2 + '\\n' + rotate(bessie_puzzle1)\n            if find_empty(puzzle2_solution) == find_empty(bessie_puzzle2):\n                return 'YES'\n\n            # If none of the above conditions can be satisfied, then we can say that the puzzle cannot be solved.\n            else:\n                return 'NO'\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p1 = stdin.split()\n    p1 = list(map(lambda x: x.replace(' ', ''), p1))\n    p2 = stdin.split()\n    p2 = list(map(lambda x: x.replace(' ', ''), p2))\n\n    # print(p1)\n    # print(p2)\n\n    # iterate over the tiles and figure out the position of 'A'\n    # print('p1', p1)\n    # print('p2', p2)\n    for i in range(len(p1)):\n        # print(i)\n        for j in range(len(p1[i])):\n            # print(j)\n            if p1[i][j] == 'A':\n                pos_A = (i, j)\n                # print(pos_A)\n\n    for i in range(len(p2)):\n        # print(i)\n        for j in range(len(p2[i])):\n            # print(j)\n            if p2[i][j] == 'A':\n                pos_B = (i, j)\n                # print(pos_A)\n\n    # print(pos_A, pos_B)\n    # print(pos_A == pos_B)\n\n    # check if we can reach the same position\n    # print(abs(pos_A[0] - pos_B[0]), abs(pos_A[1] - pos_B[1]))\n    # print(pos_A, pos_B)\n    if abs(pos_A[0] - pos_B[0]) + abs(pos_A[1] - pos_B[1])!= 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\n\nprint(solution(\"AB\\nXC\\nAC\\nBX\"))\nprint(solution(\"AB\\nXC\\nAC\\nBX\"))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()\n    a_y, a_x = len(a), len(a[0])\n    b = stdin.splitlines()\n    b_y, b_x = len(b), len(b[0])\n    if a_y!= b_y or a_x!= b_x:\n        return 'NO'\n    bessie = [[a[i][j] for j in range(a_x)] for i in range(a_y)]\n    elsie = [[b[i][j] for j in range(b_x)] for i in range(b_y)]\n    for i in range(a_y):\n        for j in range(a_x):\n            if a[i][j]!= 'X':\n                if bessie[i][j]!= 'X' and bessie[i][j]!= a[i][j]:\n                    return 'NO'\n    for i in range(b_y):\n        for j in range(b_x):\n            if b[i][j]!= 'X':\n                if elsie[i][j]!= 'X' and elsie[i][j]!= b[i][j]:\n                    return 'NO'\n    for i in range(a_y):\n        for j in range(a_x):\n            if a[i][j]!= 'X' and bessie[i][j]!= a[i][j]:\n                return 'NO'\n    for i in range(b_y):\n        for j in range(b_x):\n            if b[i][j]!= 'X' and elsie[i][j]!= b[i][j]:\n                return 'NO'\n    for i in range(a_y):\n        for j in range(a_x):\n            if a[i][j]!= 'X' and bessie[i][j]!= a[i][j]:\n                return 'NO'\n    for i in range(b_y):\n        for j in range(b_x):\n            if b[i][j]!= 'X' and elsie[i][j]!= b[i][j]:\n                return 'NO'\n    for i in range(b_y):\n        for j in range(b_x):\n            if a[i][j]!= 'X':\n                if bessie[i][j]!= 'X' and bessie[i][j]!= a[i][j]:\n                    return 'NO'\n    return 'YES'\nprint(solution(input()))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bessie_input = stdin.split('\\n')[0].split('\\n')\n    elsie_input = stdin.split('\\n')[1].split('\\n')\n    bessie_grid = make_grid(bessie_input)\n    elsie_grid = make_grid(elsie_input)\n    while bessie_grid!= elsie_grid:\n        bessie_grid = make_grid(bessie_input)\n        elsie_grid = make_grid(elsie_input)\n    return \"YES\" if bessie_grid == elsie_grid else \"NO\"\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    bessie_config = {'a': None, 'b': None, 'c': None}\n    elsie_config = {'a': None, 'b': None, 'c': None}\n    for i in range(2):\n        for j in range(2):\n            if a[i * 2 + j] == 'A':\n                bessie_config['a'] = (i, j)\n            if a[i * 2 + j] == 'B':\n                bessie_config['b'] = (i, j)\n            if a[i * 2 + j] == 'C':\n                bessie_config['c'] = (i, j)\n            if b[i * 2 + j] == 'A':\n                elsie_config['a'] = (i, j)\n            if b[i * 2 + j] == 'B':\n                elsie_config['b'] = (i, j)\n            if b[i * 2 + j] == 'C':\n                elsie_config['c'] = (i, j)\n    return_value = 'NO'\n    if bessie_config == elsie_config:\n        return_value = 'YES'\n    print(return_value)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    bessie, elsie = stdin.strip().split(\"\\n\")\n    bessie = [\"ABC\"] + bessie.split() + [\"XC\"]\n    elsie = [\"ABC\"] + elsie.split() + [\"XB\"]\n    while True:\n        for _ in range(len(bessie) - 1):\n            # print(bessie, elsie)\n            if bessie[0] == elsie[0]:\n                return \"YES\"\n            bessie = slide_up(bessie)\n        for _ in range(len(elsie) - 1):\n            if bessie[0] == elsie[0]:\n                return \"YES\"\n            elsie = slide_up(elsie)\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get the puzzle configurations\n    bessie = stdin.strip().split('\\n')[0].split()\n    elsie = stdin.strip().split('\\n')[1].split()\n    # Check if they are in the same configuration\n    return \"NO\" if bessie!= elsie else \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    return \"NO\" if __solution(stdin[0], stdin[1]) == False else \"YES\"\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_1 = int(stdin.split()[0])\n    number_2 = int(stdin.split()[1])\n\n    return str(number_1 * number_2)\n\nsolution(input())\n\n---Sample Testcase---\n\nInput\n16\n11311\n\nOutput\n475\n\nInput\n20\n999\n\nOutput\n3789\n\nInput\n17\n2016\n\nOutput\n594\n'''\n\nimport re\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    n, k = map(int, stdin.split())\n    k_str = str(k)\n\n    i = 0\n    while k_str[i] == '0':\n        i += 1\n\n    for j in range(i, len(k_str)):\n        a = int(k_str[j]) * int(n ** i)\n        if a >= 10 ** 60:\n            break\n        return str(a)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    return str(convert_to_decimal(k,n))\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    print(int(n, int(n)))"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(input())\n    return convert_to_decimal(n, k)\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    return n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        res += (k - 1) * 2**(n - 1 - i) * i\n    return str(res)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    max_len = len(str(n))\n    length = max_len + 1\n    t = str(n)\n    while length <= max_len:\n        l = 0\n        if length <= max_len:\n            while l < max_len:\n                t = str(n)\n                if int(t) <= k:\n                    k -= int(t)\n                else:\n                    k += int(t)\n                l += 1\n            length += 1\n            n = int(t)\n        else:\n            length += 1\n    return str(n)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    if n <= 0:\n        raise ValueError(\"Input number must be positive\")\n    if k > 10**60:\n        raise ValueError(\"Input number must be smaller than 10^60\")\n\n    min = 0\n    while min < k:\n        min += 1\n        min_hexadecimal = hex(min)\n        min_decimal = int(min_hexadecimal, 16)\n        if min_decimal > k:\n            break\n\n    max = min + 1\n    max_hexadecimal = hex(max)\n    max_decimal = int(max_hexadecimal, 16)\n    while max < k:\n        max += 1\n        max_hexadecimal = hex(max)\n        max_decimal = int(max_hexadecimal, 16)\n        if max_decimal > k:\n            break\n    answer = hex(max_decimal - min_decimal)\n    return answer[2:]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if len(a) == N:\n        c1 = 0\n        c2 = 0\n        for i in range(1, len(a)):\n            if a[i] > a[i - 1]:\n                c1 += 1\n            elif a[i] < a[i - 1]:\n                c2 += 1\n            else:\n                pass\n\n        if c1 == c2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\nsolution(input())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\nInput:\n    stdin: str\n\nOutput:\n    str\n\n'''\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    docstring\n    \"\"\"\n    return 'NO' if not all(\n        [x - 1 < y < x + 1 for x, y in zip(\n            list(map(int, (stdin).split())),\n            [i for i in range(1, len(stdin) + 1)])]) else 'YES'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    d = set(a)\n    if len(d) > 2:\n        if a[0] == a[1] and a[-1] == a[-2]:\n            return \"YES\"\n    return \"NO\"\n\nsolution(\"6\")\nsolution(\"5\")\nsolution(\"4\")\nsolution(\"7\")\nsolution(\"3 3 3 3 3 3 3\")\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, arr = stdin.split(\"\\n\")\n    n = int(arr[0])\n    arr = list(map(int, arr[1:]))\n\n    # check increasing\n    increasing = True\n    for i in range(n - 1):\n        if arr[i + 1] < arr[i]:\n            increasing = False\n\n    # check decreasing\n    decreasing = True\n    for i in range(n - 1):\n        if arr[i + 1] > arr[i]:\n            decreasing = False\n\n    if increasing and decreasing:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n-1):\n        if a[i]!= a[i+1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    increasing = True\n    decreasing = True\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[i-1]:\n            increasing = False\n        if numbers[i] > numbers[i-1]:\n            decreasing = False\n    if increasing and decreasing:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    # check if array is strictly increasing\n    for i in range(n):\n        if a[i] <= a[i + 1]:\n            continue\n        else:\n            print('NO')\n            return\n    # check if array is strictly decreasing\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            continue\n        else:\n            print('NO')\n            return\n    print('YES')\n    return\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'YES'\n    array = list(map(int, stdin.split()))\n    for i in range(1, n - 1):\n        if array[i] > array[i - 1] and array[i] > array[i + 1]:\n            continue\n        elif array[i] < array[i - 1] and array[i] < array[i + 1]:\n            continue\n        else:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def path(num):\n        if num % 2 == 1:\n            return [num-1] + path(num-1)\n        return [num//2] + path(num//2)\n    l = []\n    for i in range(1, n+1):\n        l += path(i)\n    return max(set(l), key=l.count)"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n\n    max = 0\n    for i in range(1, n + 1):\n        path = []\n        for j in range(1, i + 1):\n            path.append(j)\n            if j % 2 == 0:\n                continue\n            else:\n                path.append(j - 1)\n        if len(set(path)) >= k:\n            max = max if max > len(path) else len(path)\n\n    return str(max)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max([len(list(set(path(i)))) for i in range(1, n+1)]))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = map(int, stdin.split())\n    if k >= n:\n        return str(n)\n    # for i in range(1, n):\n    #     for j in range(1, n):\n    #         if j % 2 == 0:\n    #             # print(i, j, \"even\")\n    #             if i % 2 == 0:\n    #                 # print(i, j, \"even and even\")\n    #                 if i >= j:\n    #                     # print(i, j, \"even and even and even\")\n    #                     continue\n    #             else:\n    #                 # print(i, j, \"odd\")\n    #                 if i >= j:\n    #                     # print(i, j, \"odd and even\")\n    #                     continue\n    #         else:\n    #             # print(i, j, \"odd\")\n    #             if i >= j:\n    #                 # print(i, j, \"odd and even\")\n    #                 continue\n    #         if i!= j:\n    #             print(i, j)\n\n    paths = []\n    for i in range(1, n):\n        paths += path(i)\n    max_val = 0\n    max_count = 0\n    for i in range(0, len(paths)):\n        count = 0\n        for j in range(0, len(paths[i])):\n            if paths[i][j] == i + 1:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_val = i + 1\n    return str(max_val)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n - max(k, n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  max_value = 0\n  def check_index(i):\n    return ((i + 1) * 2) > n\n\n  def check_path(v):\n    path = path_creator(v)\n    return len(path) >= k\n  \n  def path_creator(v):\n    path = []\n    i = 1\n    while i <= n:\n      if check_index(i):\n        path.append(i)\n      i = i + 2\n    return path\n\n  i = 1\n  while i <= n:\n    if check_path(i):\n      path = path_creator(i)\n      max_value = max(max_value, len(path))\n      i = i + 1\n    else:\n      i = i + 1\n  return max_value\n  \nsolution(sys.stdin.read())\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, k = int(stdin[0]), int(stdin[1])\n    all_paths = list(range(1, n + 1))\n    paths_of_length = {}\n    for length in range(1, n + 1):\n        for path in range(len(all_paths)):\n            current_path = all_paths[path]\n            if length == len(str(current_path)):\n                if current_path not in paths_of_length.keys():\n                    paths_of_length[current_path] = 1\n                else:\n                    paths_of_length[current_path] += 1\n        all_paths = []\n    for key, value in paths_of_length.items():\n        if value == k:\n            return str(key)\n    return str(all_paths[0])\n\n\nprint(solution(input()))\n\n\n\n---\n\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    paths = [[] for _ in range(n + 1)]\n\n    # for the first $n$ elements we calculate the number of paths\n    for i in range(1, n + 1):\n        paths[i] = []\n        for j in range(i):\n            if j % 2 == 0:\n                paths[i].append(j + 1)\n            else:\n                paths[i].append(j - 1)\n\n    max_val = 0\n    i = n\n    while i > 0:\n        for j in range(i):\n            # compute the number of paths for each element in range(j, i)\n            paths[i] = []\n            for k in range(j):\n                if k % 2 == 0:\n                    paths[i].append(k + 1)\n                else:\n                    paths[i].append(k - 1)\n\n            paths[i] = paths[i][::-1]\n            val = 1\n            for p in paths[i]:\n                val *= p\n            if val > max_val:\n                max_val = val\n        i -= 1\n    return str(max_val)\n\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    \n    if n == 1: return 1\n    \n    l = set()\n    l.add(1)\n    l.add(n)\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            l.add(i // 2)\n        else:\n            l.add(i - 1)\n        if i % 2 == 0:\n            l.add(i // 2)\n        else:\n            l.add(i - 1)\n    \n    return max(l) >= k\n\n\nsolution(\"11 3\")\nsolution(\"11 6\")\nsolution(\"1000000 100\")\nsolution(\"14 5\")\nsolution(\"1000000 100\")"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    path = []\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            path += [i]\n        else:\n            path += [i - 1]\n        count += 1\n        if count == k:\n            count = 0\n    return str(len(set(path)))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    return \"0 0\" if not (x, y) else \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if 0 <= x+v_x < n and 0 <= y+v_y < m:\n                x += v_x\n                y += v_y\n            else:\n                x -= v_x\n                y -= v_y\n            if x == x and y == y:\n                return '{} {}'.format(x, y)\n    return '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split()))\n\n    while True:\n        if v_x >= 0 and y + v_y >= m:\n            return -1\n        if v_x <= 0 and y + v_y <= n:\n            return -1\n        if v_x > 0 and y >= n:\n            y = 0\n            v_y = -v_y\n        if v_x < 0 and y <= m:\n            y = m\n            v_y = -v_y\n        x = x + v_x\n        y = y + v_y\n        if x > n or y > m:\n            return -1\n        if y in range(0, m) and x in range(0, n):\n            if y == m - 1 or x == n - 1:\n                return str(x) +'' + str(y)"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    if n == 1 and m == 1:\n        if x == 0 and y == 0:\n            return -1\n        elif x == 0 or y == 0:\n            return 0\n        else:\n            return 1\n\n    def check(x, y, v_x, v_y):\n        # print(x, y, v_x, v_y)\n        # print(abs(x) <= n and abs(y) <= m)\n        if x < 0 or y < 0 or x > n or y > m:\n            return True\n        else:\n            return False\n\n    def is_collision(x, y, v_x, v_y):\n        # print(x, y, v_x, v_y)\n        if abs(x) > abs(y):\n            if x > 0 and x + v_x < 0:\n                return True\n            if x < 0 and x + v_x > 0:\n                return True\n        if abs(x) < abs(y):\n            if y > 0 and y + v_y < 0:\n                return True\n            if y < 0 and y + v_y > 0:\n                return True\n        return False\n\n    while check(x, y, v_x, v_y) or is_collision(x, y, v_x, v_y):\n        x += v_x\n        y += v_y\n        v_x = v_x + (1 / 4) * v_x * (3 - 2 * abs(x))\n        v_y = v_y + (1 / 4) * v_y * (3 - 2 * abs(y))\n    # print(x, y, v_x, v_y)\n    if x == 0 and y == 0:\n        return -1\n    elif x == 0 or y == 0:\n        return 0\n    else:\n        return 1\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split()))\n    v_x, v_y = v_x, v_y\n    x, y = x, y\n    min_x, max_x = min(x, n - x), max(x, n - x)\n    min_y, max_y = min(y, m - y), max(y, m - y)\n\n    while True:\n        x += v_x\n        y += v_y\n        if 0 <= x <= n and 0 <= y <= m:\n            if (x, y) == (n - 1, m - 1):\n                return -1\n        else:\n            if x == n - 1 and y == m - 1:\n                return -1\n            else:\n                x, y = x - v_x, y - v_y\n                continue\n        if min_x <= x <= max_x and min_y <= y <= max_y:\n            break\n    return '{} {}'.format(x - v_x, y - v_y)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    x += v_x\n    y += v_y\n    while True:\n        if y <= 0:\n            return '-1'\n        elif x <= 0:\n            return '0 0'\n        if x < n and y < m:\n            if (x, y) == (0, 0):\n                return '-1'\n            if (x, y) == (n - 1, m - 1):\n                return '0 0'\n            x += v_x\n            y += v_y\n            continue\n        if x == n:\n            if (x, y) == (n - 1, m - 1):\n                return '0 0'\n            x -= v_x\n            y -= v_y\n            continue\n        if y == m:\n            if (x, y) == (0, m - 1):\n                return '0 0'\n            y -= v_y\n            x -= v_x\n            continue\n        if x == 0:\n            if (x, y) == (0, m - 1):\n                return '0 0'\n            x += v_x\n            y -= v_y\n            continue\n        if y == 0:\n            if (x, y) == (n - 1, 0):\n                return '0 0'\n            y += v_y\n            x += v_x\n            continue\n        x -= v_x\n        y -= v_y\n        continue"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    # Time limit exceeded\n    if abs(x) > n or abs(y) > m or abs(v_x) > 1 or abs(v_y) > 1:\n        return -1\n    # Ball hits the wall\n    if x == 0 and y == 0:\n        return -1\n    # Ball touches the side\n    if x == 0 and abs(y) > m // 2:\n        return -1\n    if y == 0 and abs(x) > n // 2:\n        return -1\n    # Ball hits the pocket\n    if (abs(x) <= n // 2 and abs(y) <= m // 2) and (x, y) == (x, y):\n        return -1\n    # Ball is moving\n    while x!= -1 or y!= -1:\n        # Ball moves along the x-axis\n        if x > 0 and abs(x) <= n // 2:\n            x += v_x\n            continue\n        if x < 0 and abs(x) <= n // 2:\n            x -= v_x\n            continue\n        # Ball moves along the y-axis\n        if y > 0 and abs(y) <= m // 2:\n            y += v_y\n            continue\n        if y < 0 and abs(y) <= m // 2:\n            y -= v_y\n            continue\n        return -1\n    return \"0 0\""
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    if abs(y - m) < abs(x - n) and abs(v_x) == abs(v_y):\n        return \"0 0\"\n    return -1\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, x, y, v_x, v_y] = map(int, stdin.split())\n    if (n, m) == (1, 1):\n        return '-1'\n    if abs(v_x) == 1 and abs(v_y) == 1:\n        if x > n or x < 0 or y > m or y < 0:\n            return '-1'\n        if x == 0:\n            if y == m:\n                return '2'\n            if y == 0:\n                return '1'\n        else:\n            if x == n:\n                return '1'\n            if x == 0:\n                if y > 0:\n                    return '0'\n                else:\n                    return '4'\n    else:\n        if x > n or x < 0:\n            return '-1'\n        if y > m or y < 0:\n            return '-1'\n    return '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = stdin.split()\n    n, m, x, y, v_x, v_y = int(n), int(m), int(x), int(y), int(v_x), int(v_y)\n    moves = 0\n    while x < n and y < m:\n        x += v_x\n        y += v_y\n        if x < 0 or x >= n or y < 0 or y >= m:\n            break\n        if x == n and y == m:\n            break\n        if (x, y) in [(0, 0), (0, m), (n, 0), (n, m)]:\n            break\n        moves += 1\n    if x == n and y == m:\n        return str(-1)\n    else:\n        return str(moves)"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nstdin = '''3 2\n1 3\n2 1\n\n3 2\n3 3\n3 1\n\n5 5\n3 3\n3 3\n\n4 2\n2 3\n1 2\n\n4 2\n2 3\n1 2\n\n4 2\n2 3\n1 2\n\n4 2\n2 3\n1 2\n\n5 5\n3 3\n3 3\n\n4 2\n2 3\n1 2\n\n4 2\n2 3\n1 2\n\n4 2\n2 3\n1 2\n\n4 2\n2 3\n1 2\n\n5 5\n3 3\n3 3\n\n'''\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '''\n    3 2\n    1 3\n    2 1\n    '''\n    stdin = '''\n    5 5\n    3 3\n    3 3\n    '''\n    '''\n    3 2\n    2 1\n    '''\n    # Solution: YES\n    # First we check if the board fits, or if the pictures can be placed on the wall at all.\n    # We try to create a board that fits all the pictures:\n    # The first picture can be placed in any orientation (with any size)\n    # The second picture can be placed in any orientation (with any size)\n    # The third picture can be placed in any orientation (with any size)\n    # The fourth picture can be placed in any orientation (with any size)\n    # The fourth picture can be placed in any orientation (with any size)\n    # The fourth picture can be placed in any orientation (with any size)\n    # The fourth picture can be placed in any orientation (with any size)\n    # The fourth picture can be placed in any orientation (with any size)\n    # If any of the pictures can not be placed in any of the orientation, then no board fits\n    # Now we can try to put the pictures on the wall.\n    # We try to put the first picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the second picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the third picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any size)\n    # If it fits, we stop the process\n    # If it doesn't fit, we try to put the fourth picture in any orientation (with any"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2, a3, b3 = map(int, stdin.split())\n\n    return 'YES' if is_possible(a1, b1, a2, b2, a3, b3) else 'NO'\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    b = stdin[1]\n    a = stdin[2]\n    a = list(map(int, stdin[2].split()))\n    b = list(map(int, stdin[3].split()))\n    board = []\n    for i in range(n):\n        board.append([])\n        for j in range(n):\n            board[i].append(0)\n    paintings = []\n    for i in range(a[0]):\n        paintings.append([])\n        for j in range(a[1]):\n            paintings[i].append(0)\n    for i in range(a[0]):\n        for j in range(a[1]):\n            board[i][j] = 1\n    for i in range(b[0]):\n        for j in range(b[1]):\n            paintings[i][j] = 1\n    for i in range(b[0]):\n        for j in range(b[1]):\n            board[i][j] = 0\n    for i in range(len(paintings)):\n        for j in range(len(paintings[i])):\n            if paintings[i][j] == 1:\n                board[i][j] = 2\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 2:\n                board[i][j] = 1\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 3:\n                board[i][j] = 1\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 2:\n                board[i][j] = 1\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 3:\n                board[i][j] = 1\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 2:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 3:\n                board[i][j] = 1\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 2:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 3:\n                board[i][j] = 2\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 2:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 3:\n                board[i][j] = 1\n\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 2:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 3:\n                board[i][j] = 2\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 0:\n                board[i][j] = 3\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    A = [[True] * (b+2) for _ in range(a+2)]\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            A[i][j] = A[i-1][j] and A[i][j-1]\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if A[i][j]:\n                print(\"YES\")\n                return\n    print(\"NO\")\n\nsolution(input())\n'''\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = max(a, b)\n    d = min(a, b)\n    return \"YES\" if a*b == c*d else \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    \n    k = 3\n    # take 3 numbers a_1, b_1, a_2, b_2, a_3, b_3\n    while True:\n        if len(stdin) == k:\n            break\n        else:\n            stdin.append(stdin.pop(0))\n\n    # a_1, b_1, a_2, b_2, a_3, b_3\n    stdin = stdin[:k]\n    \n    max_a = max(stdin)\n    max_b = max(stdin)\n    \n    if a % max_a == 0 or b % max_b == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution('''3 2\n1 3\n2 1\n\n5 5\n3 3\n3 3\n\n4 2\n2 3\n1 2\n\n'''))\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"YES\" if max(a, b) > min(a, b) else \"NO\"\n\n\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2, a_3, b_3 = map(int, stdin.split())\n\n    if a_1 > a_2 or b_1 > b_2 or a_3 > a_2 or b_3 > b_2 or a_3 > a_1 or b_3 > b_1:\n        return 'NO'\n    if a_1 > a_3 or b_1 > b_3 or a_2 > a_3 or b_2 > b_3 or a_1 > a_2 or b_1 > b_2:\n        return 'NO'\n\n    if a_1 + a_2 > a_3 or a_1 + b_2 > a_3 or a_2 + b_3 > a_3 or a_2 + b_2 > a_1 or a_2 + b_3 > a_1 or a_3 + b_3 > a_3:\n        return 'NO'\n\n    return 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = (int(i) for i in stdin.split())\n    a_1, a_2, a_3 = (int(i) for i in stdin.split())\n    bad = sorted([abs(i) for i in a_1 + a_2 + a_3])\n    print(bad)\n    s = 0\n    if abs(b_1) > l:\n        return \"inf\"\n    if abs(b_1) < l:\n        s = 1\n    if abs(a_1) > l:\n        return \"inf\"\n    if abs(a_1) < l:\n        s = max(s, 1)\n    if abs(a_2) > l:\n        return \"inf\"\n    if abs(a_2) < l:\n        s = max(s, 1)\n    if abs(a_3) > l:\n        return \"inf\"\n    if abs(a_3) < l:\n        s = max(s, 1)\n    if abs(b_1) > l:\n        s = max(s, 1)\n    return s\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, b, q = map(int, stdin.split())\n    m = int(stdin.split()[1])\n    a = []\n    for i in range(m):\n        if abs(int(stdin.split()[i+1])) > l:\n            a.append(i+1)\n    if l == b:\n        return 'inf'\n    return sum(1 for i in range(l+1, l+b*q) if i not in a)"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    good = list(filter(lambda x: abs(x) <= l, map(lambda x: int(x), filter(lambda x: x!= \"inf\", stdin.split()))))\n    bad = list(filter(lambda x: x not in good, map(int, stdin.split())))\n    if len(bad) == 0:\n        return str(len(good) + 1)\n    elif len(bad) == 1 and bad[0] == 1:\n        return \"inf\"\n    return str(len(good) + len(bad) + 1)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 30 4\n   ... 6 14 25 48\n   ... ''')\n    '3'\n    >>> solution('''123 1 2143435 4\n   ... 123 11 -5453 141245\n   ... ''')\n    'inf'\n    \"\"\"\n    b, q, l, m = map(int, stdin.split())\n    if q == 0:\n        return \"inf\"\n    if l == 1:\n        return str(m)\n    progression = {}\n    for i in range(1, l):\n        progression[abs(i)] = i\n    count = 1\n    for a in range(m):\n        for i in range(1, l + 1):\n            if progression.get(i) == a:\n                count += 1\n            elif progression.get(i) is not None:\n                break\n    return str(count)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    nums = set(map(int, stdin.split()))\n    count = 0\n    bad_ints = set(map(int, stdin.split()))\n    while len(nums) > 1:\n        b_i = min(abs(b) for b in nums)\n        if l >= b_i:\n            count += 1\n            nums.remove(b_i)\n            continue\n        else:\n            return 'inf'\n    return str(count)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    bad_list = sorted([i for i in map(int, stdin.split()[1:]) if i not in [b_1, 0]])\n    b_1 = b_1 + l\n    min_b = min(bad_list)\n    max_b = max(bad_list)\n    if b_1 <= min_b:\n        return 'inf'\n    if max_b <= b_1:\n        return 0\n    res = 0\n    for bad in bad_list:\n        if bad == 0:\n            continue\n        if bad <= b_1:\n            res += 1\n        else:\n            res += (b_1 + (bad - 1) * q) // (bad * q)\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, l, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if l == \"inf\":\n        return \"inf\"\n    b = [0] * n\n    for i in range(n):\n        b[i] = int(a[i])\n    a = set(a)\n    for i in range(n):\n        if a.__contains__(b[i]):\n            b[i] = 0\n    for i in range(n):\n        if abs(b[i]) > l:\n            b[i] = 0\n    return str(len(b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = a[1]\n    l = a[2]\n    m = a[3]\n    bad = set(map(int, stdin.split()))\n    if n == 0:\n        print(0)\n        return\n    elif n == 1:\n        if k == 0:\n            print(1)\n            return\n        elif k == 1:\n            print(0)\n            return\n    elif n == 2:\n        if k == 0:\n            print(1)\n            return\n        elif k == 1:\n            print(0)\n            return\n        elif k == -1:\n            print(1)\n            return\n    else:\n        n -= 1\n        k += 1\n        print(1)\n        return\n    primes = []\n    if k > n:\n        print(1)\n        return\n    else:\n        while n > 1:\n            for i in range(2, n + 1):\n                if n % i == 0:\n                    n = n // i\n                    primes.append(i)\n            break\n    l = abs(l)\n    if l < min(primes):\n        print(1)\n        return\n    bad = list(bad)\n    bad.sort()\n    i = 2\n    count = 0\n    while i <= m:\n        if i in bad:\n            count += 1\n        i += 1\n    print(count)\n    return"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = (int(x) for x in stdin.split())\n    bad_ints = []\n    count = 0\n    for i in range(m):\n        bad_ints.append(int(stdin.split()[i]))\n    for i in range(b, q + 1):\n        if i in bad_ints:\n            continue\n        count += 1\n        if abs(i) <= l:\n            count += 1\n    return str(count) if count else \"inf\""
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split()\n    n = int(n)\n    m = int(m)\n    # first n * m characters represent the state of the monitor pixels\n    stdin = stdin.strip()[:n*m]\n    # nxm grid\n    # print(n, m)\n    # print(stdin)\n    \n    # nxm matrix\n    matrix = []\n    # create matrix\n    for row in range(n):\n        matrix.append([])\n        for col in range(m):\n            matrix[row].append(stdin[row * m + col])\n    # print(matrix)\n    \n    # count white and black pixels in the matrix\n    black = 0\n    white = 0\n    for row in range(n):\n        for col in range(m):\n            if matrix[row][col] == 'w':\n                white += 1\n            elif matrix[row][col] == '.':\n                black += 1\n    # print(black)\n    # print(white)\n    \n    # create (n-1)x(m-1) matrix\n    # we don't need the last row and column\n    # matrix = [['.' for x in range(m-2)] for y in range(n-2)]\n    # matrix.append(['.' for x in range(m-2)])\n    # matrix.append(['.' for x in range(m-2)])\n    # print(matrix)\n    \n    # get diagonal elements\n    # diag_left = matrix[:][1:]\n    # diag_right = matrix[:][:-1]\n    # print(diag_left)\n    # print(diag_right)\n    \n    # get lines\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = black\n            elif matrix[i][j] == '.':\n                matrix[i][j] = white\n    # print(matrix)\n    \n    # check the diagonals\n    left_diag = matrix[1:][::-1]\n    right_diag = matrix[-1][:-1]\n    # print(left_diag)\n    # print(right_diag)\n    \n    # count white and black pixels in the diagonals\n    for row in range(len(matrix)):\n        for col in range(len(matrix[row])):\n            if matrix[row][col] == 'w':\n                white += 1\n            elif matrix[row][col] == '.':\n                black += 1\n    # print(black)\n    # print(white)\n    \n    # find the min size\n    min_size = 1\n    for size in range(min_size, len(matrix) - min_size):\n        # print(\"size:\", size)\n        # print(matrix[:size][::-1])\n        if all(matrix[:size][::-1][i] == 'w' for i in range(size)):\n            # print(\"white pixels\")\n            # print(matrix[:size][::-1])\n            min_size = size\n            break\n        elif all(matrix[:size][::-1][i] == '.' for i in range(size)):\n            # print(\"black pixels\")\n            # print(matrix[:size][::-1])\n            min_size = size\n            break\n    \n    # print(min_size)\n    # print(matrix[:min_size][::-1])\n    \n    # check the lines\n    for row in range(len(matrix) - min_size):\n        if all(matrix[row][i] == 'w' for i in range(min_size)):\n            # print(\"white pixels\")\n            # print(matrix[row][:min_size])\n            min_size = min_size\n            break\n        elif all(matrix[row][i] == '.' for i in range(min_size)):\n            # print(\"black pixels\")\n            # print(matrix[row][:min_size])\n            min_size = min_size\n            break\n    \n    # print(min_size)\n    # print(matrix[:min_size])\n    \n    # print(matrix)\n    if min_size == 1:\n        return '-1'\n    else:\n        return '+'*min_size + 'w'*(n-min_size)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Parses the input for solution\n    '''\n    # Parse input\n    n, m = map(int, stdin.split('\\n'))\n    \n    # Get the matrix\n    matrix = stdin.split('\\n')\n    \n    # Check if the matrix has the required size\n    if (n!= m or n < 1 or n > 1000 or m < 1 or m > 1000):\n        return -1\n    \n    # Check if the matrix has the required size and is empty\n    if (n!= m and not matrix):\n        return -1\n    \n    # Get all the numbers from matrix\n    numbers = []\n    for i in range(len(matrix)):\n        numbers.append([c for c in matrix[i] if c!= '.'])\n    \n    # Get all the coordinates of black pixels\n    black_pixels = []\n    for i in range(len(numbers)):\n        black_pixels.append(i)\n    \n    # Get all the coordinates of white pixels\n    white_pixels = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers[i])):\n            if numbers[i][j]!= 'w':\n                white_pixels.append(i)\n                white_pixels.append(j)\n    \n    # Get all the coordinates of white pixels\n    white_pixels = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers[i])):\n            if numbers[i][j]!= 'w':\n                white_pixels.append(i)\n                white_pixels.append(j)\n    \n    # Get all the coordinates of black pixels\n    black_pixels = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers[i])):\n            if numbers[i][j]!= 'w':\n                black_pixels.append(i)\n                black_pixels.append(j)\n    \n    # Sort the white pixels by column\n    white_pixels.sort(key=lambda x: x[1])\n    \n    # Sort the black pixels by row\n    black_pixels.sort(key=lambda x: x[0])\n    \n    # Sort the coordinates by row\n    white_pixels.sort(key=lambda x: x[0])\n    \n    # Sort the coordinates by column\n    black_pixels.sort(key=lambda x: x[1])\n    \n    # Loop through all the white pixels and find the first black pixel in each column of the white pixels\n    for i in range(len(white_pixels)):\n        x_pos = white_pixels[i][1]\n        for j in range(i+1, len(white_pixels)):\n            y_pos = white_pixels[j][0]\n            if (black_pixels[y_pos]!= -1):\n                break\n            \n            if (white_pixels[j][1]!= x_pos):\n                break\n            \n            if (white_pixels[j][0] < x_pos and white_pixels[j+1][0] > x_pos):\n                black_pixels[black_pixels[y_pos]] = x_pos\n    \n    # Loop through all the white pixels and find the first black pixel in each column of the white pixels\n    for i in range(len(white_pixels)):\n        x_pos = white_pixels[i][1]\n        for j in range(i+1, len(white_pixels)):\n            y_pos = white_pixels[j][0]\n            if (black_pixels[y_pos]!= -1):\n                break\n            \n            if (white_pixels[j][1]!= x_pos):\n                break\n            \n            if (white_pixels[j][0] < x_pos and white_pixels[j+1][0] > x_pos):\n                black_pixels[black_pixels[y_pos]] = x_pos\n    \n    # Loop through all the white pixels and find the first black pixel in each row of the white pixels\n    for i in range(len(white_pixels)):\n        y_pos = white_pixels[i][0]\n        for j in range(i+1, len(white_pixels)):\n            x_pos = white_pixels[j][1]\n            if (black_pixels[x_pos]!= -1):\n                break\n            \n            if (white_pixels[j][0]!= y_pos):\n                break\n            \n            if (white_pixels[j][1] < y_pos and white_pixels[j+1][1] > y_pos):\n                black_pixels[black_pixels[x_pos]] = y_pos\n    \n    # Loop through all the white pixels and find the first black pixel in each row of the white pixels\n    for i in range(len(white_pixels)):\n        y_pos = white_pixels[i][0]\n        for j in range(i+1, len(white_pixels)):\n            x_pos = white_pixels[j][1]\n            if (black_pixels[x_pos]!= -1):\n                break\n            \n            if (white_pixels[j][0]!= y_pos):\n                break\n            \n            if (white_pixels[j][1] < y_pos and white_pixels[j"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        lst.append(stdin[i])\n    lst = lst[:m]\n    lst = set(lst)\n    lst = list(lst)\n    lst.sort(key = lambda x : x.count(\"w\"))\n    if len(lst) == 0:\n        return -1\n    elif len(lst) == 1:\n        return \"\".join(lst)\n    elif len(lst) == 2:\n        if lst[0] == \".\":\n            return \"\".join(lst)\n        elif lst[1] == \".\":\n            return \"\".join(lst)\n        else:\n            return \"\".join(lst)\n    else:\n        res = []\n        def check(ch):\n            if ch == \"w\":\n                return True\n            elif ch == \".\":\n                return True\n            else:\n                return False\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if check(lst[i]) and check(lst[j]):\n                    res.append(lst[i] + lst[j])\n        if len(res) == 0:\n            return -1\n        else:\n            res.sort(key = lambda x : len(x))\n            return \"\".join(res)\n\nprint(solution(stdin))"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    def find_frame(n, m):\n        def can_fit(line):\n            return all(pixel == 'w' for pixel in line)\n        \n        def can_be_image(line):\n            return all(pixel == 'w' for pixel in line) or all(pixel == '+' for pixel in line)\n        \n        def get_image(line):\n            nonlocal n\n            i, j = 0, 0\n            while i < n:\n                if line[i]!= '+':\n                    j += 1\n                i += 1\n            return j\n        \n        def get_min_size(line):\n            i = 0\n            while i < n:\n                if line[i] == 'w':\n                    i += 1\n                elif line[i] == '+':\n                    i += 2\n                else:\n                    i += 1\n            return i\n        \n        def get_largest_size(line):\n            i = 0\n            while i < n:\n                if line[i] == '+':\n                    i += 2\n                elif line[i] == 'w':\n                    i += 1\n                else:\n                    i += 1\n            return i\n        \n        def solve_image(line):\n            if can_fit(line):\n                if can_be_image(line):\n                    return line\n                return None\n            i = get_image(line)\n            if i == n:\n                return None\n            if i == 0:\n                return None\n            size = get_min_size(line)\n            if size == n:\n                return None\n            if size == 0:\n                return None\n            return line[:i] + '+' + line[i:]\n        \n        def find_possible(line):\n            nonlocal n\n            if line == '+' * n:\n                return True\n            if line == 'w' * n:\n                return False\n            i = 0\n            while i < n:\n                if line[i]!= '+':\n                    i += 1\n                else:\n                    j = i + 1\n                    while j < n:\n                        if line[j]!= '+':\n                            j += 1\n                        else:\n                            j += 2\n                            break\n                    i = j\n            return line == line[::-1]\n        \n        def get_solution(line):\n            if line == '+' * n:\n                return line\n            if line == 'w' * n:\n                return line\n            i = 0\n            while i < n:\n                if line[i]!= '+':\n                    i += 1\n                else:\n                    j = i + 1\n                    while j < n:\n                        if line[j]!= '+':\n                            j += 1\n                        else:\n                            j += 2\n                            break\n                    i = j\n            return line[:i] + 'w' + line[i:]\n        \n        def solve(line):\n            i = 0\n            while i < n:\n                if line[i] == 'w':\n                    i += 1\n                elif line[i] == '+':\n                    if find_possible(line[i:]):\n                        return line[:i] + '+' + line[i:]\n                    return get_solution(line[i:])\n                else:\n                    i += 1\n            return line\n        \n        def find_optimal(line):\n            if len(line) == n:\n                return solve(line)\n            i = 0\n            while i < n:\n                if line[i]!= '+':\n                    i += 1\n                else:\n                    j = i + 1\n                    while j < n:\n                        if line[j]!= '+':\n                            j += 1\n                        else:\n                            j += 2\n                            break\n                    i = j\n            return line[:i] + 'w' + line[i:]\n        \n        return get_largest_size(find_optimal(find_frame(n, m)))\n\n    \n    return str(find_frame(n, m))"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.split()\n    min_size = m + 1\n    for j in range(m):\n        for i in range(n):\n            if field[i][j] == 'w':\n                for k in range(j+1, min(j+1 + min_size, m)):\n                    if field[i][k] == 'w':\n                        min_size = k-j\n                        break\n                for k in range(j+1, min(j+1 + min_size, m)):\n                    if field[i][k] == '.':\n                        min_size = k-j+1\n                        break\n            if field[i][j] == '.':\n                min_size = min(j+1, min_size)\n    if min_size == m:\n        return '-1'\n    else:\n        return \"\".join([\"+\" for i in range(min_size)])"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = list(map(int, stdin[0].split(\" \")))\n    scr = stdin[1]\n\n    if n < 1 or m < 1:\n        return \"-1\"\n\n    if n == 1 and m == 1:\n        if scr == \"+w\":\n            return stdin[1]\n        return stdin[1].replace(\".\", \"w\")\n\n    if n == 1 or m == 1:\n        return stdin[1].replace(\".\", \"w\")\n\n    if n == m:\n        return stdin[1].replace(\".\", \"w\")\n\n    if n == m and len(stdin) == 3:\n        return stdin[1].replace(\".\", \"w\")\n\n    if n == m and len(stdin) == 4:\n        return stdin[1].replace(\".\", \"w\")\n\n    if n!= m:\n        best_frame = -1\n        candidate_frame = []\n        candidate_frames = []\n\n        for frame_width in range(1, n+1):\n            for frame_height in range(1, n+1):\n                for frame_size in range(1, frame_width+1):\n                    candidate_frame = frame_width * frame_height * frame_size\n                    if candidate_frame <= m:\n                        candidate_frames.append(candidate_frame)\n\n        candidate_frames.sort()\n\n        for candidate_frame in candidate_frames:\n            diff_frame = m - candidate_frame\n            if diff_frame > 0:\n                if diff_frame in candidate_frames:\n                    diff_frame = -1\n                    break\n                else:\n                    diff_frame = -1\n                    break\n            else:\n                diff_frame = m - candidate_frame\n                if diff_frame > 0:\n                    diff_frame = -1\n                    break\n                else:\n                    diff_frame = m - candidate_frame\n                    break\n\n        if diff_frame == -1:\n            return stdin[1]\n        else:\n            return stdin[1].replace(\".\", \"w\")\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    frame = stdin\n    n = 0\n    while True:\n        if n == 0:\n            n = 1\n            frame += stdin\n        else:\n            n += 1\n            if n == N:\n                break\n            if frame[n]!= 'w':\n                frame = frame[:n] + 'w' + frame[n + 1:]\n        if all(frame[i] == 'w' for i in range(n)):\n            break\n    if n == N:\n        return '-1'\n    if n == 1:\n        return '......'\n    if n == 2:\n        return '+w+...'\n    if n == 3:\n        return '+.+...'\n    if n == 4:\n        return '++w...'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, m = int(a[0]), int(a[1])\n    d = 1\n    s = [[0 for i in range(m)] for j in range(n)]\n    while True:\n        for i in range(n):\n            for j in range(m):\n                s[i][j] = 'w' if s[i][j] == '.' else '.'\n        if all(x == 'w' for x in s[0]):\n            break\n        for i in range(n):\n            for j in range(m):\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    continue\n                s[i][j] = 'w' if s[i][j] == '.' and all([s[i][k] == 'w' for k in range(j - d, j + d + 1)]) else '.'\n        d += 1\n    ans = []\n    for i in range(len(s)):\n        ans.append(''.join(s[i]))\n    return '\\n'.join(ans)\n\n\nstdin = \"\"\"\n5 8\n....\n.w..\n......\n..w...\n......\n\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    screen = stdin.split()\n    borders = []\n    for row in screen:\n        if row == '+':\n            borders.append(1)\n        else:\n            borders.append(0)\n    size = 2\n    max = 1\n    for i in range(1, n):\n        # print(i, n, size, borders)\n        if borders[i] == 1:\n            if size > 1:\n                size = size - 1\n                continue\n            size = size + 1\n        elif borders[i] == 0:\n            if size == 2:\n                size = size - 1\n                continue\n            if size == 1:\n                size = size + 1\n                continue\n            size = size + 1\n            # print('size = ', size)\n        # print('size = ', size)\n        if size > max:\n            max = size\n    print(max)\n    if max > m:\n        return '-1'\n    else:\n        return ''.join(['.w' * max, '+' * max])"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_lines, num_cols = stdin.split(' ')\n    num_lines, num_cols = int(num_lines), int(num_cols)\n    monitor = stdin.replace('.', 'w').replace('w', '.')\n    lines = []\n    for i in range(num_lines):\n        lines.append(monitor[i*num_cols:(i+1)*num_cols])\n\n    #print(lines)\n    res = []\n    for i in range(1, num_lines - 1):\n        for j in range(1, num_cols - 1):\n            #print(i, j, lines[i][j], lines[i-1][j], lines[i+1][j], lines[i][j-1], lines[i][j+1], lines[i-1][j-1], lines[i-1][j+1], lines[i+1][j-1], lines[i+1][j+1])\n            if lines[i][j] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i-1][j] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i+1][j] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i][j-1] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i][j+1] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i-1][j-1] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i-1][j+1] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i+1][j-1] == '.':\n                res.append(lines[i][j])\n                continue\n            if lines[i+1][j+1] == '.':\n                res.append(lines[i][j])\n    if len(res) == 0:\n        return '-1'\n    res.sort()\n    res = ''.join(res)\n    print(res)\n    return res\n\n\nsolution('2 4\\n.w.w\\n...w..\\n..w..\\n')"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    burles, c, b = map(int, stdin.split())\n    if b * 2 + c * 5 <= burles:\n        print('YES')\n        print(burles // (c + b), burles // c)\n    else:\n        print('NO')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = list(map(int, stdin.split()))\n    if (n // a) + (n // b) <= n:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a + b <= n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(i) for i in stdin.split())\n    if a * 2 + b * 5 > n:\n        return \"NO\"\n    if a * 2 + b * 5 <= n:\n        return \"YES\"\n    x = 1\n    y = 2\n    while x * a + y * b <= n:\n        x = x + 1\n        y = y + 1\n    if x == 1 and y == 1:\n        return \"YES\"\n    while x * a <= n:\n        x = x + 1\n        if x * a + y * b > n:\n            break\n    while y * b <= n:\n        y = y + 1\n    if x * a + y * b == n:\n        return str(x) + \" \" + str(y)\n    else:\n        return \"NO\""
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n\n    if n < 0:\n        return \"NO\"\n    if a == 0 and b == 0:\n        return \"YES\"\n    if a == 0:\n        if n >= b:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if b == 0:\n        if n >= a:\n            return \"YES\"\n        else:\n            return \"NO\"\n    x, y = 0, 0\n    while n >= a + b:\n        x, y = a, b\n        n -= a\n        a = 2 * a\n        b = 2 * b\n    if n < a:\n        while n >= x:\n            x += a\n            y += a\n            n -= x\n        if n < y:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        while n >= x:\n            x += a\n            y += a\n            n -= x\n        if n < y:\n            return \"NO\"\n        else:\n            return \"YES\""
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    if n == 0:\n        return 'NO'\n    if a*2 + b*5 == n:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    burles, a = map(int, stdin.split())\n    if (burles % a) + (burles // a)!= burles:\n        return \"NO\"\n    elif burles // a <= 0:\n        return \"YES\"\n    else:\n        x, y = burles // a, burles % a\n        if x == 0:\n            return str(x) + \" \" + str(y)\n        elif y == 0:\n            return str(x) + \" \" + str(y)\n        else:\n            return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b\n    \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438.\n    '''\n    n, a, b = list(map(int, stdin.split()))\n    for i in range(1, (n + 1) // a):\n        j = n - (i * a)\n        if j % b == 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    if a * a + b * b == n:\n        return \"YES\"\n    elif a + b * 2 >= n:\n        return \"YES\"\n    elif a * 2 + b * 5 >= n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cost_burles, cost_bars = map(int, stdin.split())\n    cost_ber_col = cost_bars + cost_burles\n    cost_bars = cost_burles + cost_bars\n    if cost_ber_col >= cost_bars and cost_ber_col <= cost_bars*4:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\npass"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    m = n.replace('-','')\n    return m"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\nYour solution goes here\nFurther reading: https://docs.python.org/3/library/itertools.html\n'''\nimport itertools\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans('', '', string.digits))\n\nsolution(\"6\")\nsolution(\"99\")\nsolution(\"20\")"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    a_res = [a[0]]\n    ans = 0\n    for i in range(1, len(a)):\n        if a[i - 1] < a[i]:\n            ans += 1\n        else:\n            ans = 0\n        a_res.append(ans)\n    ans = 0\n    for i in range(n):\n        if a_res[i] == 0:\n            continue\n        ans += 1\n        if a_res[i] > 2:\n            continue\n        for j in range(i, n):\n            if a_res[j] >= a_res[i] - 1:\n                ans += 1\n            else:\n                break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1]))\n    print(solution_1(n, arr))\ndef"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0] <= a[1]:\n        print(0)\n    else:\n        t = a[1] - a[0]\n        for i in range(2, n):\n            t = max(t, a[i] - a[i - 1])\n        print(t)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] >= arr[j]:\n                continue\n            if j - i + 1 > res:\n                res = j - i + 1\n\n    print(res)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = stdin.split()\n    return f'{max(int(i) - int(j) for i, j in zip(map(int, sorted(arr.split())), map(int, sorted(arr.split()))))}'"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    return str(max(0, (len(a) - 2)*len(a)//2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break\n        if i == len(arr) - 2:\n            return 0\n    for i in range(len(arr) - 1):\n        if i == 0:\n            if arr[i] > arr[i + 1]:\n                res = res + 1\n        if i == 1:\n            if arr[i] < arr[i - 1]:\n                res = res + 1\n        if i == 2:\n            if arr[i] > arr[i - 2]:\n                res = res + 1\n    return str(res)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 5 4 2 1\n   ... ''')\n    '3'\n    >>> solution('''3\n   ... 100 99 1\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    assert len(arr) > 0\n    assert len(arr) <= 100\n\n    if len(arr) == 1:\n        return str(0)\n\n    i = 0\n    j = 1\n    result = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i] == arr[j]:\n            i += 1\n            j += 1\n        else:\n            if j - i < result:\n                result = j - i\n            i = j\n            j += 1\n    return str(result)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        dp = [0] * n\n        dp[0] = 1\n        if a[0] >= a[1]:\n            dp[1] = 1\n        else:\n            dp[1] = 0\n        for i in range(2, n):\n            if a[i] >= a[i-1]:\n                if a[i] >= a[i+1]:\n                    dp[i] = max(dp[i-2]+1, dp[i-1])\n                else:\n                    dp[i] = max(dp[i-2], dp[i-1])\n            else:\n                if a[i] >= a[i+1]:\n                    dp[i] = max(dp[i-1], dp[i-2])\n                else:\n                    dp[i] = max(dp[i-1], dp[i-2])\n        return max(dp)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n-1):\n        if a[i] < a[i+1]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = []\n    n = int(stdin.strip())\n    for i in range(n):\n        days.append(int(stdin.strip()))\n    s = set(days)\n    count = 0\n    while True:\n        if 2 in s:\n            return str(len(s)-1)\n        elif 2 * len(s) < n:\n            count += 1\n            s.add(2)\n        elif 2 * len(s) == n:\n            break\n        else:\n            return \"IMPOSSIBLE\"\n    while 2 in s:\n        s.remove(2)\n    return str(len(s)-1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print((a[0] // 2 + a[0] % 2) + a.index(min(a)))"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.strip().split()))\n    return str(days[-1])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        day = solve(a, mid)\n        if day > n // 2:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return str(left)\ndef"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    int_list = list(map(int, stdin.split()))\n    for i in range(1, int_list[0] + 1):\n        if i in int_list:\n            print(i)\n            break\n    return\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems_number = list(map(int, stdin.split()))\n    first_day = 1\n    last_day = n\n    solved_problems_number = 0\n    for day in range(1, n + 1):\n        if solved_problems_number >= (n / 2):\n            return str(first_day)\n        solved_problems_number += problems_number[day - 1]\n    return str(last_day)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    return f\"{(a[1] + a[2] + a[3]) // 2 + 1}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split()))\n    problems = days[1:]\n    possible_equator = False\n    day = 0\n    while not possible_equator:\n        day += 1\n        day_problems = []\n        for i, p in enumerate(problems):\n            if day % p == 0:\n                day_problems.append(i)\n        if len(day_problems) > len(problems) / 2:\n            possible_equator = True\n        else:\n            problems = day_problems\n\n    return str(day)\n\ndef"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3 2 1\n   ... ''')\n    '2'\n    >>> solution('''6\n   ... 2 2 2 2 2 2\n   ... ''')\n    '3'\n    \"\"\"\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    problems = list(map(int, lines[1].split()))\n\n    # Minimum Problem Number to be solved = 2,  Worst case = 2\n    solved = 0\n    for i in range(len(problems)):\n        solved += problems[i]\n        if solved >= (n//2):\n            return str(i+1)\n    return '0'\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    training_days = int(stdin)\n    solved_problems_by_day = list(map(int, stdin.split()))\n\n    def is_solved_by_day(day):\n        return solved_problems_by_day[day - 1] >= (day * 2)\n\n    def is_solved_by_equator(day):\n        return sum(\n            solved_problems_by_day[day - 1:day + 1]\n            if day >= 1\n            else range(1, training_days + 1)\n        ) >= (training_days * 2)\n\n    solved_by_equator = 1\n    day = 2\n\n    while day <= training_days:\n        if is_solved_by_equator(day):\n            solved_by_equator += 1\n        if is_solved_by_day(day):\n            solved_by_equator += 1\n        if day > training_days:\n            break\n\n        day += 1\n\n    return str(day)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    path = set()\n\n    def move(step, i, j):\n        nonlocal path\n        if (i, j) in path:\n            return\n        path.add((i, j))\n        if i > j:\n            i, j = j, i\n\n        if i == n:\n            step += 1\n        if j == n:\n            step += 1\n        if i == 1:\n            move(step, 2, j)\n            move(step, j, 3)\n            move(step, 1, j)\n        if j == 1:\n            move(step, i, 2)\n            move(step, i, 3)\n            move(step, i, 1)\n        if i == 2:\n            move(step, 3, j)\n            move(step, j, 1)\n        if j == 2:\n            move(step, i, 3)\n            move(step, i, 1)\n        if i == 3:\n            move(step, 2, j)\n            move(step, 1, j)\n        if j == 3:\n            move(step, i, 1)\n        if i == 4:\n            move(step, 3, j)\n            move(step, j, 1)\n        if j == 4:\n            move(step, i, 3)\n            move(step, i, 1)\n\n    move(0, 1, 1)\n    return str(step) +'' + str(len(path))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows = []\n    for i in range(8):\n        rows.append(list(map(int, stdin.split())))\n    num_steps = 0\n    num_steps_replacements = 0\n    current_row = 0\n    current_col = 0\n    while current_row < 8 and current_col < 8:\n        current_row += 1\n        current_col = 0\n        while current_col < 8:\n            current_col += 1\n            if rows[current_row - 1][current_col - 1] == 1:\n                rows[current_row - 1][current_col - 1] = 2\n                num_steps += 1\n                num_steps_replacements += 1\n            elif rows[current_row - 1][current_col - 1] == 2:\n                rows[current_row - 1][current_col - 1] = 1\n                num_steps += 1\n            else:\n                break\n    return f\"{num_steps} {num_steps_replacements}\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    def move(a, b, c, d):\n        return int(a) + int(b), int(c) + int(d)\n\n    def knight_moves(a, b):\n        if a in (1, 7, 9):\n            yield a, b\n        if a in (2, 8, 6):\n            yield a, b\n        if a in (3, 5, 0):\n            yield a, b\n\n    def bishop_moves(a, b):\n        if a == 0:\n            yield a, b\n        if a == 1:\n            yield a, b\n        if a == 6:\n            yield a, b\n        if a == 7:\n            yield a, b\n        if b == 0:\n            yield a, b\n        if b == 1:\n            yield a, b\n        if b == 6:\n            yield a, b\n        if b == 7:\n            yield a, b\n\n    def rook_moves(a, b):\n        if a == 0:\n            yield a, b\n        if a == 7:\n            yield a, b\n        if b == 0:\n            yield a, b\n        if b == 7:\n            yield a, b\n\n    def find_max_steps(a, b):\n        steps = 0\n        for k in knight_moves(a, b):\n            steps += 1\n            for d in bishop_moves(k[0], k[1]):\n                steps += 1\n                for r in rook_moves(d[0], d[1]):\n                    steps += 1\n        return steps\n\n    return str(find_max_steps(1, 0)) +'' + str(find_max_steps(8, 0))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    board = []\n    for i in range(N):\n        board.append([int(x) for x in stdin[i+1]])\n    print(board)\n    #board = [[int(x) for x in stdin[i+1]] for i in range(N)]\n    #print(board)\n    n = int(N ** 0.5)\n    #n = 3\n    #print(n)\n    min_steps = float('inf')\n    min_replace = float('inf')\n    def is_valid(board, i, j, n):\n        for row in range(i-1, i+n+1):\n            #print(\"i: \" + str(i))\n            #print(\"row: \" + str(row))\n            #print(\"row min: \" + str(row-1))\n            #print(\"row max: \" + str(row+n))\n            #print(\"j: \" + str(j))\n            #print(\"j min: \" + str(j-1))\n            #print(\"j max: \" + str(j+n))\n            #print(\"\")\n            if row < 0 or row >= len(board):\n                continue\n            elif j < 0 or j >= len(board[0]):\n                continue\n            else:\n                if board[row][j] == 0:\n                    return False\n        return True\n    def valid_replace(board, i, j, n):\n        for row in range(i-1, i+n+1):\n            #print(\"i: \" + str(i))\n            #print(\"row: \" + str(row))\n            #print(\"row min: \" + str(row-1))\n            #print(\"row max: \" + str(row+n))\n            #print(\"j: \" + str(j))\n            #print(\"j min: \" + str(j-1))\n            #print(\"j max: \" + str(j+n))\n            #print(\"\")\n            if row < 0 or row >= len(board):\n                continue\n            elif j < 0 or j >= len(board[0]):\n                continue\n            else:\n                if board[row][j]!= 0:\n                    return False\n        return True\n    def is_valid_row(board, i, n):\n        for j in range(len(board[0])):\n            if not is_valid(board, i, j, n):\n                return False\n        return True\n    def is_valid_col(board, j, n):\n        for i in range(len(board)):\n            if not is_valid(board, i, j, n):\n                return False\n        return True\n    def is_valid_board(board, n):\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if not is_valid_col(board, j, n) or not is_valid_row(board, i, n):\n                    return False\n        return True\n    def next_replace(board, i, j, n):\n        for row in range(i-1, i+n+1):\n            #print(\"i: \" + str(i))\n            #print(\"row: \" + str(row))\n            #print(\"row min: \" + str(row-1))\n            #print(\"row max: \" + str(row+n))\n            #print(\"j: \" + str(j))\n            #print(\"j min: \" + str(j-1))\n            #print(\"j max: \" + str(j+n))\n            #print(\"\")\n            if row < 0 or row >= len(board):\n                continue\n            elif j < 0 or j >= len(board[0]):\n                continue\n            else:\n                if board[row][j] == 0:\n                    board[row][j] = 1\n                    return True\n        return False\n    def next_replace_col(board, j, n):\n        for i in range(len(board)):\n            #print(\"i: \" + str(i))\n            #print(\"row: \" + str(row))\n            #print(\"row min: \" + str(row-1))\n            #print(\"row max: \" + str(row+n))\n            #print(\"j: \" + str(j))\n            #print(\"j min: \" + str(j-1))\n            #print(\"j max: \" + str(j+n))\n            #print(\"\")\n            if i < 0 or i >= len(board):\n                continue\n            elif j < 0 or j >= len(board[0]):\n                continue\n            else:\n                if board[i][j] == 0:\n                    board[i][j] = 1\n                    return True\n        return False\n    def next_replace_row(board, i, n):\n        for j in range(len(board[0])):\n            #print(\"i: \" + str(i))\n            #print(\"row: \" + str(row))\n            #print(\"row min: \" + str(row-1))\n            #print(\"row max: \" + str(row+n))\n            #print(\"j: \" + str(j))\n            #print(\"j min: \" + str(j-1))\n            #print(\"j max: \" + str(j+n))\n            #print(\"\")\n            if j < 0 or j >= len(board[0]):\n                continue\n            elif i < 0 or i >= len(board):\n                continue\n            else:\n                if board[i][j] == 0:\n                    board[i][j] = 1\n                    return True\n        return False\n    def next_replace_board(board, n):\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if not next"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = stdin.split()\n    s = set()\n    for i in range(0, N):\n        for j in range(0, N):\n            s.add(int(arr[i*N+j]))\n    print(s)\n    return\nsolution(\"3\")\nsolution(\"5\")\nsolution(\"10\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # \u0448\u0430\u0445 \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\n    A = [int(x) for x in stdin.split()]\n    # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u0440\u0443\n    p = 0\n    q = 1\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u0443\u0442\u0438\n    l = 0\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043f\u0443\u0442\u0438\n    while l < N ** 2:\n        # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u0443\u0442\u044c\n        l = A[p] + A[q]\n        # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n        p = q\n        # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n        q = l % N\n    return f\"{l} {q + 1}\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1].split()))\n    max_steps = 0\n    best_path = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i*N + j] > max_steps:\n                max_steps = A[i*N + j]\n                best_path = i*N + j\n            elif A[i*N + j] == max_steps and max_steps > A[i*N + j]:\n                max_steps = A[i*N + j]\n                best_path = i*N + j\n    return str(max_steps) + \" \" + str(best_path)\n\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    squares = [list(map(int, stdin.split())) for _ in range(N)]\n    # print(squares)\n    knight_moves = [[-2, 1], [-2, -1], [-1, 2], [-1, -2],\n                    [1, 2], [1, -2], [2, 1], [2, -1]]\n\n    result = float('inf')\n    for i in range(N):\n        for j in range(N):\n            if squares[i][j] == 1:\n                result = min(squares[i][j], result)\n                for move in knight_moves:\n                    if not (0 <= i + move[0] < N and 0 <= j + move[1] < N):\n                        continue\n                    if squares[i + move[0]][j + move[1]]!= -1:\n                        result = min(result, squares[i][j] + squares[i + move[0]][j + move[1]])\n                squares[i][j] = -1\n\n    return str(result)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, rows, *_ = stdin.split()\n    rows = int(rows)\n    solved = False\n    best_steps = 0\n    best_path = None\n\n    def find_path(current_path: list) -> tuple:\n        nonlocal solved\n        nonlocal best_path\n        nonlocal best_steps\n        if len(current_path) >= rows:\n            solved = True\n            if best_steps > len(current_path):\n                best_path = current_path[:]\n                best_steps = len(current_path)\n            return\n\n        for i in range(1, rows + 1):\n            if i not in current_path:\n                current_path.append(i)\n                find_path(current_path)\n                current_path.pop()\n    find_path([])\n    return str(best_steps) + \" \" + str(len(best_path))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n, m = map(int, stdin.split())\n    # matrix = [[1 for _ in range(n)] for _ in range(n)]\n    # for i in range(m):\n    #     a, b = map(int, stdin.split())\n    #     matrix[a - 1][b - 1] = 0\n    #     matrix[b - 1][a - 1] = 0\n    # \n    # \n    # def change_color(i, j):\n    #     matrix[i][j] = 0\n    #     count = 0\n    #     for p in range(8):\n    #         if i + p >= n or j + p >= n or i + p < 0 or j + p < 0:\n    #             continue\n    #         if matrix[i + p][j + p] == 1:\n    #             count += 1\n    #     return count\n    # \n    # def check(i, j):\n    #     for p in range(8):\n    #         if i + p >= n or j + p >= n or i + p < 0 or j + p < 0:\n    #             continue\n    #         if matrix[i + p][j + p]!= 0:\n    #             return False\n    #     return True\n    # \n    # \n    # def recursion(i, j):\n    #     if i == n - 1 and j == n - 1:\n    #         return 1\n    #     if i == n - 1 or j == n - 1:\n    #         return 0\n    # \n    #     res = recursion(i + 1, j) + recursion(i, j + 1)\n    #     if check(i, j):\n    #         res += change_color(i, j)\n    #     return res\n    # \n    # \n    # print(recursion(0, 0))\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(matrix[i][j], end=' ')\n    #     print()\n\n    # 3\n    # 1 9 3\n    # 8 6 7\n    # 4 2 5\n    # #\n    # # 2\n    # # 1 3\n    # # 3 2\n    # # 2 1\n    # # 1 2\n    # # 1 1\n    # # 3 3\n    # # 3 2\n    # # 1 1\n    # # 2 2\n    # # 3 1\n    # # #\n    # # 12 1\n    # # 4 1\n    # # 4 1\n    # # 4 2\n    # # #\n    # # 2\n\n    # n, m = map(int, stdin.split())\n    # matrix = [[1 for _ in range(n)] for _ in range(n)]\n    # for i in range(m):\n    #     a, b = map(int, stdin.split())\n    #     matrix[a - 1][b - 1] = 0\n    #     matrix[b - 1][a - 1] = 0\n\n    # def change_color(i, j):\n    #     matrix[i][j] = 0\n    #     count = 0\n    #     for p in range(8):\n    #         if i + p >= n or j + p >= n or i + p < 0 or j + p < 0:\n    #             continue\n    #         if matrix[i + p][j + p] == 1:\n    #             count += 1\n    #     return count\n\n    # def check(i, j):\n    #     for p in range(8):\n    #         if i + p >= n or j + p >= n or i + p < 0 or j + p < 0:\n    #             continue\n    #         if matrix[i + p][j + p]!= 0:\n    #             return False\n    #     return True\n    # \n    # def recursion(i, j):\n    #     if i == n - 1 and j == n - 1:\n    #         return 1\n    #     if i == n - 1 or j == n - 1:\n    #         return 0\n    # \n    #     res = recursion(i + 1, j) + recursion(i, j + 1)\n    #     if check(i, j):\n    #         res += change_color(i, j)\n    #     return res\n\n    # \n    # print(recursion(0, 0))\n\n    # 3\n    # 1 9 3\n    # 8 6 7\n    # 4 2 5\n    # #\n    # # 2\n    # # 1 3\n    # # 3 2\n    # # 2 1\n    # # 1 2\n    # # 1 1\n    # # 3 3\n    # # 3 2\n    # # 1 1\n    # # 2 2\n    # # 3 1\n    # # #\n    # # 12 1\n    # # 4 1\n    # # 4 1\n    # # 4 2\n    # # #\n    # # 2\n\n    n, m = map(int, stdin.split())\n    matrix = [[1 for _ in range(n)] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        matrix[a - 1][b - 1] = 0\n        matrix[b - 1][a - 1] = 0\n\n    def change_color(i, j):\n        matrix[i][j] = 0\n        count = 0\n        for p in range(8):\n            if i + p >= n or j + p >= n or i + p < 0 or j + p < 0:\n                continue\n            if matrix[i + p][j + p] == 1:\n                count += 1\n        return count\n\n    def check(i, j):\n        for p in range(8):\n            if i + p"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if (int(stdin, 2) % 64 == 0) else \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    digits = []\n    for char in stdin:\n        char = int(char)\n        if char == 0:\n            digits.append(0)\n        elif char == 1:\n            digits.append(1)\n    b = int(\"\".join(map(str, digits)), 2)\n    if b % 64 == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n\nsolution(stdin)"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by_64(binary: str) -> bool:\n        number = int(binary, 2)\n        return number % 64 == 0\n\n    return 'yes' if is_divisible_by_64(stdin) else 'no'"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    while a:\n        s = a[:10]\n        if int(s,2) % 64 == 0:\n            return \"yes\"\n        a = a[10:]\n    return \"no\"\n    \"\"\"\n    return \"no\""
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if 1 & (int(stdin, 2) == 64) else \"no\""
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    while len(num) > 1:\n        if not is_binary(num):\n            return 'no'\n        num = ''.join(str(int(i)) for i in num)\n    return 'yes'\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stdin = stdin[::-1]\n    # all digits in binary system are mapped to 7\n    binary_numbers = {1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 2, 7: 1}\n    for i in range(n):\n        # getting most significant bit\n        number = stdin[i]\n        # number of 1's in the most significant bit\n        count = 0\n        while number!= 0:\n            number = number & 1\n            count += 1\n\n        # repeating 0s until we have enough bits in the most significant bit\n        if count > 7 - count:\n            return \"no\"\n\n        # repeat the number of times the number of 1's in the most significant bit\n        # is equal to the number of 1's in the least significant bit\n        for j in range(i, n):\n            if stdin[j] == 0:\n                break\n            stdin[j] = binary_numbers[stdin[j]]\n        else:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper()[::-1].replace('z', '')"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin\n    for i in range(len(st)):\n        st = st.replace(st[i], chr(ord(st[i]) + 1))\n        st = st.replace(st[i], chr(ord(st[i]) - 1))\n    return st\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = \"\"\n    while s:\n        if ans and ans[-1] >= s[0]:\n            ans += s[0]\n            s = s[1:]\n        else:\n            if s[0] <= 'z':\n                ans += s[0]\n                s = s[1:]\n            else:\n                return \"-\"\n    return ans\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.replace(\"a\", \"\")\n    string = string.replace(\"e\", \"\")\n    string = string.replace(\"i\", \"\")\n    string = string.replace(\"o\", \"\")\n    string = string.replace(\"u\", \"\")\n    if \"\".join(sorted(string)) == \"abcdefghijklmnopqrstuvwxyz\":\n        return \"\".join(sorted(string))\n    return \"-\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return str(make_subsequence(s))\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.lower()\n    b = sorted(a)\n    if b == a:\n        return \"\".join(b)\n    else:\n        return \"-1\""
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    while True:\n        if answer == stdin:\n            break\n        answer = stdin\n        for i in range(len(stdin)):\n            if stdin[i] > 'z':\n                stdin = stdin[:i] + stdin[i+1:]\n                break\n            if i == len(stdin) - 1:\n                answer = \"-\"\n                break\n    print(answer)\n    return answer\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    s = stdin\n    # for i in range(len(s)):\n    #     for j in range(len(s)):\n    #         s = s[:j] + s[j+1:]\n    #         if sorted(s) == list(s):\n    #             return s\n    # return -1\n\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if sorted(s[i:]) == list(s[i:]):\n                return s[i:]\n\n    return -1\n\nsolution('aacceeggiikkmmooqqssuuwwyy')"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    return (\"-1\" if sorted(arr)!= arr else \"\".join(sorted(arr)))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nIn the second example you can put the fishes in cells (4, 4), (4, 5), (4, 6), (4, 7), (5, 4), (5, 5), (5, 6), (5, 7), (6, 4), (6, 5), (6, 6), (6, 7), (7, 4), (7, 5), (7, 6), (7, 7) and so on. In this case, for any of four possible positions of the scoop-net (highlighted with light green), the number of fishes inside is equal to eight, and so is the expected value.\n[Image]\ndef"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = list(map(int, stdin.split()))\n    pond = [[0]*m for _ in range(n)]\n    # print(n, m, r, k)\n    # print(pond)\n    pond_area = (n - r + 1) * (m - r + 1)\n    total_fishes = 0\n    for i in range(n - r + 1):\n        for j in range(m - r + 1):\n            for k in range(r):\n                for l in range(r):\n                    pond[i + k][j + l] += 1\n            total_fishes += pond[i + r - 1][j + r - 1]\n    if pond_area!= total_fishes:\n        raise Exception(\"Failed test\")\n    print(total_fishes / pond_area)\n\n\nsolution(input())\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n\n    if k <= 0:\n        return \"0\"\n    if k > n * m:\n        return \"0\"\n    if n <= 0 or m <= 0:\n        return \"0\"\n    if r <= 0 or n <= r or m <= r:\n        return \"0\"\n\n    return int(((n - r + 1) * (m - r + 1)) / k)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\nUse a simple a-priori approach:\n\nI want to find the maximum possible expected value of the number of fishes in the pond, when the entire pond is placed in the square of size r \u00d7 r, so that the fish within the square cannot be caught in more than k fish.\n\nThis would mean that I could initially place each fish in a cell of size 1 x 1, and then I would move the fish into larger cells so that the number of possible spots would decrease exponentially. This would lead to the following expression:\n\nexpected_value_of_k_fishes_in_the_pond = n * (n - r + 1) * (m - r + 1) * k / (n * (n - r + 1) * (m - r + 1) * k)\n\nI then choose the maximum value of the expression as the answer.\n\n-----\n\nExplanation\n\nFor n = 3, m = 2, r = 2, and k = 3, we can initially place each fish in a cell of size 1 x 1 and move it into cells of size 1 x 1. This would result in the following number of cells in the pond, for each of the four possible positions of the square:\n\n|1 |1 |1 |1 |1|\n|1 |1 |1 |1 |1|\n|1 |1 |1 |1 |1|\n\nThis would lead to the following expression, which is the same as the one used in the previous case:\n\nexpected_value_of_k_fishes_in_the_pond = n * (n - r + 1) * (m - r + 1) * k / (n * (n - r + 1) * (m - r + 1) * k)\n\nBecause of how n = 3, m = 2, and r = 2, the following expressions are equal:\n\nexpected_value_of_k_fishes_in_the_pond = 2 * (2 * 2 * 3) / (3 * (3 * 3 * 3) * 3) = 2.3333333333\nexpected_value_of_k_fishes_in_the_pond = 2.3333333333\n\n----\n\nWhat if n = 3, m = 2, r = 3, and k = 1?\n\nIn this case, I don't need to check all the possible positions, since there are only 4 cells of size 1 \u00d7 1, so we only need to check 2 possible positions: (1, 1), (1, 2).\n\nFor each position, we can place a fish of size r \u00d7 r, and then move it into a cell of size 1 x 1. This would result in the following number of cells in the pond, for each of the 4 possible positions of the square:\n\n|1 |1 |1 |1 |1|\n|1 |1 |1 |1 |1|\n|1 |1 |1 |1 |1|\n\nThis would lead to the following expression, which is the same as the one used in the previous case:\n\nexpected_value_of_k_fishes_in_the_pond = n * (n - r + 1) * (m - r + 1) * k / (n * (n - r + 1) * (m - r + 1) * k)\n\nBecause of how n = 3, m = 2, and r = 3, the following expressions are equal:\n\nexpected_value_of_k_fishes_in_the_pond = 1 * (1 * 1 * 1) / (1 * 1 * 1 * 1) = 1\nexpected_value_of_k_fishes_in_the_pond = 1\n\n----\n\nThat's it, good job! Now, just follow the logic:\n\n\n----"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, r, k = list(map(int, stdin.split()))\n\n    # 6\n    res = 0\n\n    # \u4e0b\u9762\u8fd9\u53e5\u8bdd\u662f\u4ece\u5728\u5de6\u4e0a\u89d2\u5f00\u59cb\u7684\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u4ea4\u53c9\u7684\uff0c\u81ea\u5df1\u5c31\u5728\u7f51\u683c\u91cc\u5c31\u884c\u4e86\uff0c\u8fd9\u4e2a\u6700\u5173\u952e\u7684\u662f\u6bcf\u4e00\u4e2acell\u50cf\u7d20\u7684\u4e0b\u4e00\u4e2acell\u662f\u4ec0\u4e48\uff1f\uff0c\u5982\u679c\u4e0b\u4e00\u4e2acell\u662fNone\uff0c\u5c31\u8bf4\u660e\u5df2\u7ecf\u722c\u5230\u4e86\u4e00\u4e2aedge\uff0c\u6240\u4ee5\u81ea\u5df1\u90fd\u50cf\u7d20\u7684\u722c\u5230\u4e86\u4e00\u4e2a\u8fb9\u3002\n    cell = [(r, 0), (r, 1), (r, m - 1), (0, m - 1)]\n    # cell = [(2, 3), (2, 2), (2, 1), (2, 0)]\n    cell_type = {(2, 3): 0, (2, 2): 0, (2, 1): 0, (2, 0): 0}\n    # edge_number = {(0, 0): 0, (0, 1): 0, (0, m - 1): 0, (1, 0): 0, (1, m - 1): 0, (m - 1, 0): 0, (m - 1, 1): 0, (m - 1, m - 1): 0}\n    edge_number = {(0, 0): 0, (0, 1): 0, (0, m - 1): 0, (1, 0): 0, (1, m - 1): 0, (m - 1, 0): 0, (m - 1, 1): 0, (m - 1, m - 1): 0}\n    for _ in range(k):\n        # print(cell)\n        # cell = []\n        x, y = random.randint(0, n - 1), random.randint(0, m - 1)\n        while cell_type[(x, y)] == 1 or edge_number[(x - 1, y)] + edge_number[(x, y - 1)] + edge_number[(x, y + 1)] + edge_number[(x + 1, y)] >= 2:\n            x, y = random.randint(0, n - 1), random.randint(0, m - 1)\n        edge_number[(x, y)] = 1\n\n        # \u524d\u9762\u5148\u5212\u7ebf\uff0c\u518d\u6dfb\u52a0\n        cell_type[(x - 1, y)] = 1\n        cell_type[(x, y - 1)] = 1\n        cell_type[(x, y + 1)] = 1\n        cell_type[(x + 1, y)] = 1\n\n        # print(cell_type, edge_number)\n        # print(cell)\n        cell.append((x, y))\n\n    # print(cell)\n    # for i in range(n):\n    #     print(i, cell_type)\n    for cell_x in range(r):\n        for cell_y in range(r):\n            if edge_number[(cell_x, cell_y)] == 2:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, m, r, k = map(int, stdin.split())\n    def pos(n, m):\n        p = []\n        for i in range(m):\n            p.append(i + 1)\n        for i in range(n):\n            p.append(i + 1)\n        return p\n\n    p = pos(n, m)\n    dp = [[0] * len(p) for i in range(len(p))]\n    for i in range(n):\n        dp[i][i] = k\n    for i in range(n, len(p)):\n        dp[i][i] = k\n    for i in range(n - r + 1):\n        for j in range(m - r + 1):\n            for k in range(i, i + r):\n                for l in range(j, j + r):\n                    if (k, l) in dp[i + r - 1][j + r - 1]:\n                        dp[i][j] = dp[i][j] + 1\n    print(max(dp[0]))\n    return max(dp[0])"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = list(map(int, stdin.split()))\n    return str(max(n * m, (n - r + 1) * (m - r + 1)))\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def move(s, d):\n        x, y = d\n        if x == 0 and y == 0:\n            return s\n        return s[x - 1:y] + s[0:x - 1] + s[y:]\n    # sol = []\n    # row, col = map(int, stdin.split())\n    # matrix = [[] for _ in range(row)]\n    # for i in range(row):\n    #     for j in range(col):\n    #         matrix[i].append(stdin[i * col + j])\n    # for i in range(row):\n    #     s = matrix[i]\n    #     for j in range(len(s)):\n    #         s = move(s, (j, i))\n    #     sol.append(s)\n    # return max(map(len, sol))\n\n    def find_group(s, idx, size):\n        if idx == size:\n            return 1\n        res = 0\n        for j in range(size):\n            if s[j] == '1':\n                if idx == 0:\n                    idx = j\n                else:\n                    if s[idx - 1] == '0':\n                        idx -= 1\n                res = find_group(s, idx, size)\n        return res\n\n    return find_group(stdin, 0, len(stdin))\n\n\n\nsolution(\"11110011111\")\nsolution(\"11001101111\")\nsolution(\"1111\")\nsolution(\"111\")\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given n, m, r, k\n    Find maximum possible expected number of caught fishes\n    '''\n    n, m, r, k = list(map(int, stdin.split()))\n    s = (n - r + 1) * (m - r + 1)\n    s = n * m\n    # \n    print(n*m)\n    return\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    numbers = list(map(int, stdin[1]))\n    # print(n, numbers)\n\n    max_product = max(numbers)\n    for i in range(n):\n        if numbers[i] < 0:\n            numbers[i] = -numbers[i] - 1\n    # print(numbers)\n\n    numbers.sort()\n    # print(numbers)\n    for i in range(n - 1):\n        if numbers[i] == numbers[i + 1]:\n            continue\n        if numbers[i] > numbers[i + 1]:\n            continue\n        min_possible_product = numbers[i + 1]\n        for j in range(i + 1, n):\n            if numbers[j] < min_possible_product:\n                min_possible_product = numbers[j]\n                # print(min_possible_product)\n            if min_possible_product > numbers[i]:\n                # print(min_possible_product)\n                break\n        # print(min_possible_product)\n        max_product = max(max_product, numbers[i] * min_possible_product)\n    # print(max_product)\n    return str(max_product)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    numbers = numbers[:]\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043a\u0430\u0442\u044c\n    need = []\n    for i in range(n):\n        if numbers[i] <= 0:\n            need.append(i)\n    # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\n    max_changes = 0\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0438\u0441\u043a\u0430\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    if len(need) == 0:\n        print(numbers[0] * numbers[1] * numbers[2])\n        return\n    # \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0439\n    for i in range(len(need)):\n        tmp = list(numbers)\n        tmp[need[i]] = tmp[need[i]] - 1\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\n        for j in range(i + 1, len(need)):\n            tmp[need[j]] = tmp[need[j]] - 1\n        # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\n        max_changes = max(max_changes, len(need) - i)\n        # \u0437\u0430\u043f\u0438\u0441\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0442\u043e\u0433\u0438\n        need = []\n        need = tmp\n    print(need)\n    print(need[0] * need[1] * need[2])\n    return"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    prod = 1\n    a.sort()\n\n    # in this part we have to make sure that there is no zero in the array\n    if a[-1] == 0:\n        prod = -1\n    else:\n        prod = prod * a[-1]\n\n    # now we have to find the maximum product\n    for i in range(n - 2, -1, -1):\n        if a[i] == 0:\n            a[i] = -1\n        else:\n            a[i] = a[i] + 1\n            prod = prod * a[i]\n\n    prod = prod // (10**9+7)\n\n    return str(prod)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    # print(nums)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"-1 -1\"\n    if n == 3:\n        return \"-1 -1 2\"\n    if n == 4:\n        return \"-1 -1 2 3\"\n    if n == 5:\n        return \"-1 -1 2 3 -1\"\n    if n == 6:\n        return \"-1 -1 2 3 -1 -1\"\n    if n == 7:\n        return \"-1 -1 2 3 -1 -1 -1\"\n    if n == 8:\n        return \"-1 -1 2 3 -1 -1 -1 -1\"\n    if n == 9:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1\"\n    if n == 10:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n    if n == 11:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n    if n == 12:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n    if n == 13:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n    if n == 14:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\n    if n == 15:\n        return \"-1 -1 2 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split(' ')))\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split(' ')))\n    arr.sort(reverse=True)\n    if n == 1:\n        return''.join(map(str, arr))\n    else:\n        res = -1\n        for i in range(n):\n            if res == -1:\n                res = arr[i]*arr[i]\n            else:\n                res = max(res, arr[i]*arr[i])\n        return''.join(map(str, arr))\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    prod = 1\n    for i in range(n):\n        prod = prod * a[i]\n        a[i] = -a[i] - 1\n    answers = []\n    for i in range(n):\n        prod = 1\n        for j in range(n):\n            prod *= a[j]\n            if j == i:\n                continue\n            a[j] = -a[j] - 1\n        answers.append(prod)\n    max_prod = max(answers)\n    return''.join(map(str, list(filter(lambda x: x == max_prod, answers))))\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n\n    n = int(input_data[0])\n\n    integers = [int(x) for x in input_data[1]]\n\n    largest_product = -1\n\n    for i in range(1, n + 1):\n        temp_product = 1\n\n        for j in range(i, n + 1):\n            temp_product *= integers[j - 1]\n\n            if temp_product > largest_product:\n                largest_product = temp_product\n\n    return str(largest_product)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] = -a[i] - 1\n    max_product = max(a)\n    for i in range(n):\n        if a[i] == max_product:\n            a[i] = 1\n            break\n    a.reverse()\n    print(\" \".join(map(str, a)))\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    m = 1\n    for x in a:\n        if x < 0:\n            m = -m\n    return''.join(map(str, a)) +'' + str(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(a)\n    a = sorted(a, reverse=True)\n    res = 0\n    for i in range(n):\n        res = max(res, a[i] * (n - i))\n    return str(res)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return str(-1)\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return str(i)\n        return str(-1)"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    if n % 2 == 0 and k > 1:\n        return \"2\"\n    if n % 2 == 0 and k == 1:\n        return \"1\"\n    if n % 2!= 0 and k > 2:\n        return \"1\"\n    return \"3\"\nprint(solution(input()))"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    lst = []\n    for i in range(2, n+1):\n        cnt = 0\n        while i % 2 == 0:\n            i = i / 2\n            cnt += 1\n        while i % 5 == 0:\n            i = i / 5\n            cnt += 1\n        while i % 3 == 0:\n            i = i / 3\n            cnt += 1\n        while i % 2 == 0:\n            i = i / 2\n            cnt += 1\n        if cnt == k:\n            lst.append(i)\n    if len(lst) == 0:\n        return -1\n    return lst[-1]\n\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution by:\n    - https://app.codility.com/demo/results/training3XVX2-Q3F/\n    \"\"\"\n    import time\n    start = time.time()\n    n, k = map(int, stdin.split())\n    #return -1 if n < k\n    divisor = list(range(1, n+1))\n    result = -1\n    for i in range(1, k+1):\n        if n % divisor[i-1] == 0:\n            result = divisor[i-1]\n            break\n    if result == -1:\n        return \"-1\"\n    else:\n        return str(result)\n\n    end = time.time()\n    print(f\"Time Taken: {end - start} seconds\")\n\n\nsolution(input())\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i == n:\n                return str(i)\n            elif i == 1:\n                continue\n            elif i % 2 == 0:\n                continue\n            elif i % 3 == 0:\n                continue\n            elif i % 5 == 0:\n                continue\n            elif i % 7 == 0:\n                continue\n            else:\n                return str(i)\n    return '-1'"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    if n < k:\n        return -1\n    divisor_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_list.append(i)\n    if len(divisor_list) < k:\n        return -1\n    else:\n        return divisor_list[k-1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    k = int(stdin[1])\n\n    for i in range(1, 1000000):\n        if n % i == 0:\n            k -= 1\n        if k == 0:\n            return i\n\n    return -1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #your code here\n    n, k = list(map(int, stdin.split()))\n    if k > n:\n        return -1\n    s = set()\n    for i in range(1, n):\n        if n % i == 0:\n            s.add(i)\n        if len(s) == k:\n            return i\n    return -1\n    # Write your code here"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    divisors = []\n    if len(list(divisors(n))) >= k:\n        return '-1'\n    else:\n        return list(divisors(n))[k-1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return -1\n    res = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            res.append(i)\n            res.append(n // i)\n    if len(res) < k:\n        return -1\n    return sorted(res)[k - 1]\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(n):\n        arr = stdin.split()\n        x = int(arr[i])\n        if x == 0:\n            return '0'\n        elif x == 1:\n            if result == 0:\n                result = 1\n            else:\n                result = 0\n        else:\n            if result == 0:\n                result = 1\n            else:\n                result = 0\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cube_rotation_pattern = {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 0}\n\n    max_n = int(f'{10}' * n)\n    result = 0\n    for i in range(1, max_n + 1):\n        cube_pattern = {int(d) for d in str(i)}\n        cube_pattern.discard(0)\n        rotation_pattern = {cube_rotation_pattern[d] for d in cube_pattern}\n        if len(cube_pattern) == len(rotation_pattern):\n            if len(rotation_pattern) == 1 and rotation_pattern[0] == 6:\n                continue\n            result = max(result, i)\n    return str(result)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    assert 1 <= n <= 3\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"42\"\n    if n == 3:\n        return \"87\"\n    t = \"\"\n    for _ in range(n):\n        t += str(stdin)\n    return t\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    n = int(a[0])\n    x = 0\n    for i in range(n):\n        a[i] = sorted(map(int, a[i].split()))\n    for i in range(len(a)):\n        s = 0\n        for j in range(len(a[i]) - 1):\n            s += (a[i][j] + 1) * (a[i][j + 1] + 1)\n            s %= 10\n        x = max(x, s)\n    return str(x)"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    n = 6\n    grid = [[0] * (m + 1) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = int(stdin.strip().split()[i * n + j])\n    print(max_product(grid))\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_cubes = int(math.sqrt(n))\n    data = []\n    for i in range(n):\n        data.append([int(x) for x in stdin.split()][i*n_cubes:(i+1)*n_cubes])\n    highest = 0\n    for i in range(1, n_cubes):\n        for j in range(n_cubes):\n            for k in range(n_cubes):\n                for l in range(n_cubes):\n                    if (data[j][(n_cubes-1) - i] < data[k][i]) and (data[k][i] < data[l][(n_cubes-1) - i]):\n                        if data[j][(n_cubes-1) - i] == data[k][i] and data[k][i] == data[l][(n_cubes-1) - i]:\n                            continue\n                        if data[j][(n_cubes-1) - i] + data[k][i] + data[l][(n_cubes-1) - i] > highest:\n                            highest = data[j][(n_cubes-1) - i] + data[k][i] + data[l][(n_cubes-1) - i]\n    return highest\n\n\nsolution(\"\"\"\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\n\"\"\")\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cubes = []\n    for _ in range(n):\n        cubes.append([int(x) for x in stdin.split()])\n    answer = 0\n    for i in range(2, 100):\n        for cube in cubes:\n            for j in range(len(cube)):\n                if cube[j] == i:\n                    cube.rotate(j)\n                    for k in range(len(cube)):\n                        if k == 0 and cube[k] == i:\n                            cube.rotate(k)\n                            break\n                    if answer < int(''.join(map(str, cube))):\n                        answer = int(''.join(map(str, cube)))\n                    cube.rotate(-k)\n    return answer"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"87\"\n    if n == 3:\n        return \"87\"\n    l = [0 for _ in range(n)]\n    l[0] = int(stdin)\n    for i in range(1, n):\n        l[i] = int(stdin)\n    max_x = 1\n    for i in range(1, n):\n        s = int(stdin)\n        for j in range(i, 0, -1):\n            s = (s + l[j]) % 10\n            max_x = max(max_x, s)\n    return str(max_x)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = stdin.split('\\n')\n    nums = nums[:n]\n    # create a matrix with cubes numbers\n    matrix = [[] for i in range(n)]\n    for i in range(n):\n        # put cubes numbers into a matrix\n        tmp = nums[i].split(' ')\n        for j in range(len(tmp)):\n            matrix[i].append(int(tmp[j]))\n\n    # count max values of each row\n    res = 0\n    for i in range(n):\n        max_value = 0\n        for j in range(1, len(matrix[i])):\n            if matrix[i][j] - matrix[i][j - 1] >= 0:\n                max_value = max(max_value, matrix[i][j] - matrix[i][j - 1])\n            else:\n                break\n        res = max(res, max_value)\n    return str(res)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, k = stdin.split()\n    num = int(num)\n    return \"{0:d}\".format(num * pow(10, int(k) - 1) - int(num * pow(10, int(k) - 1) % num))"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    while n >= k:\n        res += n // k\n        n %= k\n    if n > 0:\n        res += n\n    return str(res)\n\nsolution(input())\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n >= 0:\n        return str(n * (10 ** k))\n    return str(int(str(n)[:k] + \"0\" * k))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 10 == 0:\n        x = n // 10\n        while x % 10!= k:\n            x //= 10\n        return str(x)\n    if n % 10!= 0:\n        x = n\n        while x % 10!= k:\n            x //= 10\n        return str(x)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    digits = []\n    temp = n\n    while temp > 0:\n        digits.append(temp % 10)\n        temp //= 10\n    # print(digits)\n    total = 0\n    for i in range(k):\n        if i % 2 == 0:\n            total += digits.pop()\n        else:\n            total -= digits.pop()\n    # print(total)\n    while total > 0:\n        digits.append(total % 10)\n        total //= 10\n    # print(digits)\n    output = \"\"\n    for digit in digits:\n        output += str(digit)\n    print(output)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f'{n * (10 ** k):0{k + 1}d}'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n*(10**k))"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number, k = map(int, stdin.split())\n    if number >= 10 ** k:\n        return \"0\"\n    else:\n        return str(number * 10 ** (k - 1) + (number % 10))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(k, 0, -1):\n        if n % i == 0:\n            return str(n // i) + str(i)\n    return str(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k_round = 1\n    if n == 1:\n        return str(n)\n    elif n % k:\n        i = 0\n        while i <= k:\n            n = n * 10 + 1\n            if n % k:\n                i += 1\n        return str(n)\n    elif n // k:\n        if n // k < k:\n            return str(n // k)\n        else:\n            i = 0\n            while i <= k:\n                n = n // 10 + 1\n                if n // 10 == 0:\n                    break\n                i += 1\n            return str(n)\n    else:\n        return str(n)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = [line for line in stdin.split(\"\\n\") if line.strip()]\n    n, m = map(int, input[0].split())\n    matrix = [[int(i) for i in line.split()] for line in input[1:]]\n\n    for line in input:\n        x = int(line.split()[0])\n        y = int(line.split()[1])\n\n    if not _check_matrix(n, m, matrix):\n        return \"-\"\n\n    transpose = [[0 for i in range(m)] for i in range(n)]\n    for line in matrix:\n        for i in range(len(line)):\n            transpose[i][line.index(1)] = 1\n\n    b = matrix\n    for line in transpose:\n        for i in range(len(line)):\n            if line[i] == 1:\n                b[i][i] = 1\n\n    for line in b:\n        print(line)\n\n    return \" \".join(str(i) for i in b)\n\n\ndef"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            B.append(1)\n\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 0:\n                B[i][j] = 0\n                B[i][j + 1] = 0\n                B[i + 1][j] = 0\n                B[i + 1][j + 1] = 0\n            else:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                return '-1'\n    return '\\n'.join(map(str, np.transpose(B).tolist()))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    A = [int(i) for i in stdin.split()]\n    B = [[0] * (m + 2) for _ in range(n + 2)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if A[i - 1] == 0:\n                B[i][j] = 0\n            else:\n                B[i][j] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if B[i][j - 1] == 1:\n                B[i][j] = 1\n            else:\n                B[i][j] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if A[i - 1] == 0:\n                B[i][j] = 0\n            else:\n                B[i][j] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if B[i][j] == 0:\n                B[i][j + 1] = 0\n                B[i][j + 2] = 0\n                B[i + 1][j] = 0\n                B[i + 1][j + 1] = 0\n                B[i + 2][j] = 0\n                B[i + 2][j + 1] = 0\n            else:\n                B[i][j + 1] = 1\n                B[i][j + 2] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n                B[i + 2][j] = 1\n                B[i + 2][j + 1] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if A[i - 1] == 1:\n                B[i][j] = 1\n            else:\n                B[i][j] = 0\n    return str(B[n][m])\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix_a = [[int(i) for i in stdin.strip().split()] for _ in range(n)]\n    matrix_b = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix_a[i][j] == 1:\n                matrix_b[i][j] = 1\n                if i > 0:\n                    matrix_b[i - 1][j] = 1\n                if i < n - 1:\n                    matrix_b[i + 1][j] = 1\n                if j > 0:\n                    matrix_b[i][j - 1] = 1\n                if j < m - 1:\n                    matrix_b[i][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix_b[i][j] == 1:\n                matrix_b[i][j] = matrix_a[i][j]\n    print(matrix_b)\n\n\n    print(n, m)\n    print(matrix_a)\n    print(matrix_b)\n    if n!= len(matrix_a) or m!= len(matrix_a[0]) or n!= len(matrix_b) or m!= len(matrix_b[0]):\n        return -1\n    else:\n        return len(matrix_a) * len(matrix_b)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    A = []\n    B = []\n    for _ in range(n):\n        A.append([int(x) for x in stdin.pop(0).split()])\n    for _ in range(n):\n        B.append([int(x) for x in stdin.pop(0).split()])\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= 0 and B[i][j]!= 0:\n                s += 1\n                x = i\n                y = j\n                while x >= 0 and x < n and y >= 0 and y < m:\n                    if A[x][y]!= B[x][y]:\n                        break\n                    if x == 0 and y == 0:\n                        s += 1\n                        x = -1\n                        y = -1\n                    if x == 0:\n                        x = -1\n                    elif x == -1:\n                        x = 0\n                    else:\n                        x -= 1\n                    if y == 0:\n                        y = -1\n                    elif y == -1:\n                        y = 0\n                    else:\n                        y -= 1\n                A[i][j] = 1\n                B[i][j] = 1\n                s += 2\n                if s > 2500:\n                    return '-1'\n    return str(s)\n\n\nprint(solution(input()))"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    B = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '1':\n                B[i][j] = 1\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '0':\n                B[i][j] = 0\n            if stdin[i][j] == '1':\n                B[i][j] = 1\n                ans.append(B)\n    for i in range(n):\n        for j in range(m):\n            if B[i][j] == 1:\n                B[i][j] = 0\n    if sum(sum(B, []))!= n * m:\n        return -1\n    for i in range(n):\n        for j in range(m):\n            if B[i][j] == 1:\n                B[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if B[i][j] == 1:\n                B[i][j] = 0\n                ans.append(B)\n    return len(ans)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = (int(x) for x in stdin.split())\n    A = [[int(x) for x in stdin.split()] for _ in range(n)]\n    B = [[0] * m for _ in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if A[x][y] == 1:\n                B[x][y] = 1\n    for x in range(n):\n        for y in range(m):\n            if A[x][y]!= B[x][y]:\n                return -1\n    return str(len(find_operations(B, A)))\n\n\ndef"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return 0\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    A = []\n    for _ in range(n):\n        A.append(list(map(int, input().split())))\n\n    # for _ in range(n):\n    #     A.append(list(map(int, input().split())))\n    # print(A)\n    # print(n, m)\n    # input()\n    # for _ in range(m):\n    #     A.append(list(map(int, input().split())))\n    # print(A)\n    # print(m, n)\n    # input()\n\n    B = A\n    count = 0\n    while count < 2 ** n:\n        # print(B, count)\n        tmp = []\n        for i in range(2):\n            for j in range(2):\n                # print(B[i][j], B[i][j + 1], B[i + 1][j], B[i + 1][j + 1])\n                if B[i][j] == B[i][j + 1] and B[i][j] == B[i + 1][j] and B[i][j] == B[i + 1][j + 1] and B[i][j] == 1:\n                    tmp.append(1)\n        # print(tmp)\n        B = tmp\n        count += 1\n    # print(B)\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(B[i][j], end=' ')\n    #     print()\n    # input()\n    print(-1 if len(tmp) == 0 else count)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    A = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        A[i][0] = 1\n    for i in range(1, n + 1):\n        A[0][i] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            A[i][j] = A[i - 1][j] + A[i][j - 1]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if A[i][j] == n * m:\n                return str(i) + \" \" + str(j)\n    return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = [[1 if c == '1' else 0 for c in line.split()] for line in stdin.splitlines()]\n    B = [[1 if c == '1' else 0 for c in line.split()] for line in stdin.splitlines()]\n\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i][j]!= B[i][j]:\n                return -1\n    return \" \".join([\"{} {}\".format(i, j) for i in range(len(B)) for j in range(len(B))])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    r = 0\n    s = 0\n    p = 0\n    while (r!= a):\n        while (s!= a):\n            while (p!= a):\n                if (r > p) and (s > p) and (r < s):\n                    p = p + 1\n                elif (r < p) and (s < p) and (r > s):\n                    s = s + 1\n                elif (r < p) and (s < p) and (r > s):\n                    r = r + 1\n                elif (r > p) and (s > p) and (r < s):\n                    s = s + 1\n                else:\n                    r = r + 1\n        r = r + 1\n        s = s + 1\n        p = p + 1\n    return (str(r) +'' + str(s) +'' + str(p))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    r, s, p = stdin.split()\n    r, s, p = int(r), int(s), int(p)\n\n    p_rock = 1 / r\n    p_scissor = 1 / s\n    p_paper = 1 / p\n\n    p_rock = p_rock / (p_rock + p_scissor + p_paper)\n    p_scissor = p_scissor / (p_rock + p_scissor + p_paper)\n    p_paper = p_paper / (p_rock + p_scissor + p_paper)\n\n    print(p_rock, p_scissor, p_paper)\n    return p_rock, p_scissor, p_paper"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return '{0:.9f} {1:.9f} {2:.9f}'.format(r / s, s / p, p / r)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = (int(x) for x in stdin.split())\n    ans1 = (r + s) / p\n    ans2 = (s + p) / r\n    ans3 = (p + r) / s\n    return \"{0:.9f} {1:.9f} {2:.9f}\".format(ans1, ans2, ans3)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n_r, n_s, n_p = map(int, stdin.split())\n    prob_r = (n_s / (n_s + n_p)) / (n_p / (n_p + n_s))\n    prob_s = (n_p / (n_p + n_s)) / (n_r / (n_r + n_p))\n    prob_p = (n_r / (n_r + n_p)) / (n_s / (n_s + n_r))\n    return \" \".join(str(x) for x in (prob_r, prob_s, prob_p))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n\n    rock = ((1 - s) * p) / r\n    scissors = ((1 - p) * s) / r\n    paper = ((1 - r) * s) / s\n    return str(rock) + \" \" + str(scissors) + \" \" + str(paper)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    r = x * y * z\n    s = y * z\n    p = x * z\n    return f\"{r/r:.9f}{s/s:.9f}{p/p:.9f}\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    rock, scissors, paper = r, s, p\n    a, b = 1, 1\n    while rock!= 1:\n        if rock > b:\n            rock = rock - 1\n            a, b = rock / s, rock / p\n        elif rock < a:\n            rock = rock + 1\n            a, b = rock / s, rock / p\n    while scissors!= 1:\n        if scissors > b:\n            scissors = scissors - 1\n            a, b = scissors / s, scissors / p\n        elif scissors < a:\n            scissors = scissors + 1\n            a, b = scissors / s, scissors / p\n    while paper!= 1:\n        if paper > b:\n            paper = paper - 1\n            a, b = paper / s, paper / p\n        elif paper < a:\n            paper = paper + 1\n            a, b = paper / s, paper / p\n    return str(a) + \" \" + str(b) + \" \" + str(a / (a + b))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [r, s, p] = list(map(int, stdin.split()))\n    r = r / 100\n    s = s / 100\n    p = p / 100\n    if r < s:\n        if r < p:\n            if r * s * p > 0:\n                if s * p * r > 0:\n                    print(s * p * r)\n                    return\n                else:\n                    print(s * p * r)\n                    return\n            else:\n                print(s * p * r)\n                return\n        else:\n            if r * s * p > 0:\n                if p * s * r > 0:\n                    print(p * s * r)\n                    return\n                else:\n                    print(p * s * r)\n                    return\n            else:\n                print(p * s * r)\n                return\n    else:\n        if r * s * p > 0:\n            if p * s * r > 0:\n                print(p * s * r)\n                return\n            else:\n                print(p * s * r)\n                return\n        else:\n            print(r * s * p)\n            return\n    return\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    k = k % m\n    if k == 0:\n        print(\"0.0 0.0 0.0\")\n        return\n    result = 0.0\n    if k == 1:\n        result = (2 * n * m) / (n + m)\n    elif k == 2:\n        result = (3 * n * m) / (n + m)\n    elif k == 3:\n        result = (4 * n * m) / (n + m)\n    result *= 0.1\n    print(result)\n    return"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_recursive(stdin.split('\\n')))\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    l, r = l_1, r_2\n    if k <= r_1:\n        r = r_1\n    if k <= l_2:\n        l = l_2\n    while l <= r:\n        if k >= l and k <= r:\n            return str(min(r - l, k))\n        if k > r:\n            k -= (r - l)\n            l = l + 1\n        if k > l:\n            k -= l\n            r = r - 1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    l_1, r_1, l_2, r_2, k = map(int, lines[0].split())\n    print(r_1 - l_1 + 1)\n    print(r_2 - l_2 + 1)\n    print(r_1 - l_1)\n    print(r_2 - l_2)\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solution1(l_1, r_1, l_2, r_2, k):\n        a, b = l_1, r_1\n        c, d = l_2, r_2\n        n = 0\n        while b!= c or a!= d:\n            if a > c:\n                a = a - 1\n            if b < d:\n                b = b + 1\n            if a == c and b == d:\n                n = n + 1\n        return n\n    # return solution1(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]), int(stdin.split()[4]))\n    return solution1(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3]), int(stdin.split()[4]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    # return '{}'.format(r_1 - l_1 + 1)\n    return '{}'.format(r_2 - l_2) if (r_2 - l_2) <= k and r_2 >= l_2 else '-1'\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (l_1, r_1, l_2, r_2, k) = tuple(map(int, stdin.split()))\n    return str((r_2 - l_2) // (r_1 - l_1) + 1)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R, K, S = list(map(int, stdin.split()))\n\n    if (K - S) % L < R - (K - S) // L:\n        return str(R - (K - S) // L)\n    else:\n        return str((K - S) // L + 1)"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n\n    l_1, r_1, l_2, r_2, k = stdin[0], stdin[1], stdin[2], stdin[3], stdin[4]\n\n    def check_overlapped_intervals(start_1, end_1, start_2, end_2):\n        return max(start_1, start_2) <= min(end_1, end_2)\n\n    def overlapping_interval(start_1, end_1, start_2, end_2):\n        return max(start_1, start_2) <= min(end_1, end_2)\n\n    overlapped = False\n\n    for i in range(k + 1):\n        if not overlapped and overlapping_interval(l_1, r_1, i, k - i):\n            overlapped = True\n            print(i)\n            break\n\n    for i in range(k + 1):\n        if not overlapped and overlapping_interval(l_2, r_2, i, k - i):\n            overlapped = True\n            print(i)\n            break\n\n    if not overlapped:\n        print(k)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return int(stdin)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cow = set()\n    north = set()\n    east = set()\n    west = set()\n    for _ in range(n):\n        a, b, c = map(int, stdin.split())\n        cow.add((a, b))\n        north.add((a, c))\n        east.add((c, b))\n        west.add((c, a))\n    \n    north = list(north)\n    east = list(east)\n    west = list(west)\n    \n    ans = INF\n    for i in range(1, n - 1):\n        ans = min(ans, east_west_intersection(north[i], east[i], north[i + 1], east[i + 1]))\n    \n    for j in range(1, m - 1):\n        ans = min(ans, north_south_intersection(east[j], east[j + 1], north[j], north[j + 1]))\n\n    return str(ans)\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split()[0])\n    m = int(stdin[0].split()[1])\n    A = stdin[1].split()\n    B = stdin[2].split()\n    C = stdin[3].split()\n    D = stdin[4].split()\n    E = stdin[5].split()\n    F = stdin[6].split()\n    segments = []\n    for i in range(n):\n        segments.append([])\n    for i in range(n):\n        for j in range(m):\n            segments[i].append((int(A[i]), int(C[i])))\n            segments[i].append((int(B[j]), int(C[j])))\n    area = 0\n    for i in range(len(segments)):\n        for j in range(len(segments)):\n            if i!= j:\n                if segments[i][0] < segments[j][0] and segments[i][1] < segments[j][1]:\n                    area += 1\n                    break\n    if area == 1:\n        return 'Infinity'\n    return str(area)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    n, m = map(int, stdin[0].split())\n    seg_list = []\n    for i in range(n):\n        seg_list.append(list(map(int, stdin[i + 1].split())))\n    x_cord = int(seg_list[0][0])\n    y_cord = int(seg_list[0][1])\n    c_cord = int(seg_list[0][2])\n    for i in range(1, n):\n        x_cord = min(x_cord, int(seg_list[i][0]))\n        y_cord = min(y_cord, int(seg_list[i][1]))\n        c_cord = min(c_cord, int(seg_list[i][2]))\n    x_cord = min(x_cord, int(seg_list[-1][0]))\n    y_cord = min(y_cord, int(seg_list[-1][1]))\n    c_cord = min(c_cord, int(seg_list[-1][2]))\n    if x_cord == 0:\n        x_cord = 10\n    if y_cord == 0:\n        y_cord = 10\n    if c_cord == 0:\n        c_cord = 10\n    area = x_cord * y_cord + (x_cord + y_cord) * c_cord\n    if area == 10:\n        area = -1\n    return str(area)"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    inf = float(\"inf\")\n    cow_pos = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        cow_pos.append((x, y))\n    segments = []\n    for _ in range(m):\n        x1, y1, x2, y2 = map(int, input().split())\n        segments.append((x1, y1, x2, y2))\n    def check(pos):\n        for segment in segments:\n            if segment[0] <= pos[0] <= segment[2] and segment[1] <= pos[1] <= segment[3]:\n                return False\n        return True\n    x, y = 0, 0\n    ans = 0\n    while True:\n        cow_pos_temp = []\n        for i, pos in enumerate(cow_pos):\n            if pos[0] == x and pos[1] == y:\n                ans += 1\n            if pos[0] == x and pos[1] == y and check(pos):\n                ans += inf\n            if pos[0] == x:\n                cow_pos_temp.append((pos[0], pos[1] + 1, pos[0], pos[1] + 1))\n                cow_pos_temp.append((pos[0], pos[1] - 1, pos[0], pos[1] - 1))\n            if pos[1] == y:\n                cow_pos_temp.append((pos[0] - 1, pos[1], pos[0] - 1, pos[1]))\n                cow_pos_temp.append((pos[0] + 1, pos[1], pos[0] + 1, pos[1]))\n        cow_pos = cow_pos_temp\n        if not cow_pos:\n            return ans\n        x = cow_pos[0][0]\n        y = cow_pos[0][1]\n        for i in range(n):\n            for j in range(m):\n                if cow_pos[i][2] == segments[j][0] and cow_pos[i][3] == segments[j][1]:\n                    x = cow_pos[i][0]\n                    y = cow_pos[i][1]\n                    break\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = []\n    B = []\n    C = []\n    D = []\n    E = []\n    F = []\n    for i in range(N):\n        A_i, B_i, C_i = map(int, stdin.split())\n        A.append(A_i)\n        B.append(B_i)\n        C.append(C_i)\n    for i in range(M):\n        D_j, E_j, F_j = map(int, stdin.split())\n        D.append(D_j)\n        E.append(E_j)\n        F.append(F_j)\n\n    area = float('inf')\n    for i in range(N-1):\n        if (A[i], C[i]) not in F and (B[i], D[i]) not in E and (C[i], A[i+1]) not in E and (D[i], B[i+1]) not in F:\n            p1 = (A[i], C[i])\n            p2 = (B[i], D[i])\n            p3 = (C[i], A[i+1])\n            p4 = (D[i], B[i+1])\n            if (p1[0] > p2[0] and p1[1] > p2[1]) or (p1[0] < p2[0] and p1[1] < p2[1]):\n                if (p3[0] > p4[0] and p3[1] > p4[1]) or (p3[0] < p4[0] and p3[1] < p4[1]):\n                    A.append((A[i]+A[i+1])//2)\n                    B.append((B[i]+B[i+1])//2)\n                    C.append((C[i]+C[i+1])//2)\n                    D.append((D[i]+D[i+1])//2)\n                    E.append((E[i]+E[i+1])//2)\n                    F.append((F[i]+F[i+1])//2)\n            else:\n                if (p3[0] > p4[0] and p3[1] > p4[1]) or (p3[0] < p4[0] and p3[1] < p4[1]):\n                    A.append(A[i])\n                    B.append(B[i])\n                    C.append(C[i])\n                    D.append(D[i])\n                    E.append(E[i])\n                    F.append(F[i])\n                if (p1[0] > p2[0] and p1[1] > p2[1]) or (p1[0] < p2[0] and p1[1] < p2[1]):\n                    A.append((A[i+1]+A[i])//2)\n                    B.append((B[i+1]+B[i])//2)\n                    C.append((C[i+1]+C[i])//2)\n                    D.append((D[i+1]+D[i])//2)\n                    E.append((E[i+1]+E[i])//2)\n                    F.append((F[i+1]+F[i])//2)\n    for i in range(M-1):\n        if (D[i], E[i]) not in F and (D[i], F[i]) not in E and (E[i], D[i]) not in F and (E[i], F[i]) not in D:\n            p1 = (D[i], E[i])\n            p2 = (E[i], F[i])\n            p3 = (D[i], F[i])\n            p4 = (F[i], D[i])\n            if (p1[0] > p2[0] and p1[1] > p2[1]) or (p1[0] < p2[0] and p1[1] < p2[1]):\n                if (p3[0] > p4[0] and p3[1] > p4[1]) or (p3[0] < p4[0] and p3[1] < p4[1]):\n                    A.append((A[i] + A[i+1]) // 2)\n                    B.append((B[i] + B[i+1]) // 2)\n                    C.append((C[i] + C[i+1]) // 2)\n                    D.append((D[i] + D[i+1]) // 2)\n                    E.append((E[i] + E[i+1]) // 2)\n                    F.append((F[i] + F[i+1]) // 2)\n                else:\n                    A.append(A[i])\n                    B.append(B[i])\n                    C.append(C[i])\n                    D.append(D[i])\n                    E.append(E[i])\n                    F.append(F[i])\n            if (p1[0] > p2[0] and p1[1] > p2[1]) or (p1[0] < p2[0] and p1[1] < p2[1]):\n                if (p3[0] > p4[0] and p3[1] > p4[1]) or (p3[0] < p4[0] and p3[1] < p4[1]):\n                    A.append((A[i] + A[i+1]) // 2)\n                    B.append((B[i] + B[i+1]) // 2)\n                    C.append((C[i] + C[i+1]) // 2)\n                    D.append((D[i] + D[i+1]) // 2)\n                    E.append((E[i] + E[i+1]) // 2)\n                    F.append((F[i] + F[i+1]) // 2)\n                else:\n                    A.append(A[i])\n                    B.append(B[i])\n                    C.append(C[i])\n                    D.append(D[i])\n                    E.append(E[i])\n                    F.append(F[i])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip().split()\n    n, m = (int(i) for i in t[0].split())\n    segments = []\n    for i in range(n):\n        segments.append([int(i) for i in t[i + 1].split()])\n    return int(solution_recursive(segments, n, m))\n\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lines = [list(map(int, stdin.split())) for _ in range(n)]\n    if n == 1:\n        if m == 1:\n            return 0\n        return INF\n    elif m == 1:\n        return INF\n    is_infinite = False\n    points = {}\n    for i in range(n):\n        for j in range(m):\n            if lines[i][j] == 0:\n                points[(i, j)] = 0\n            elif lines[i][j] == -1:\n                points[(i, j)] = INF\n            else:\n                points[(i, j)] = lines[i][j] - 1\n\n    total = 0\n    while True:\n        if not is_infinite:\n            for i in range(n):\n                for j in range(m):\n                    total += points[(i, j)]\n                    if total > INF:\n                        return INF\n                    if points[(i, j)] == 0:\n                        continue\n                    p1 = (i - 1, j)\n                    if p1 in points:\n                        if points[p1]!= INF:\n                            points[(i, j)] = min(points[p1] + 1, points[(i, j)])\n                    p2 = (i + 1, j)\n                    if p2 in points:\n                        if points[p2]!= INF:\n                            points[(i, j)] = min(points[p2] + 1, points[(i, j)])\n                    p3 = (i, j + 1)\n                    if p3 in points:\n                        if points[p3]!= INF:\n                            points[(i, j)] = min(points[p3] + 1, points[(i, j)])\n                    p4 = (i, j - 1)\n                    if p4 in points:\n                        if points[p4]!= INF:\n                            points[(i, j)] = min(points[p4] + 1, points[(i, j)])\n            if total == INF:\n                is_infinite = True\n                break\n        else:\n            break\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        A.append((a, i))\n        B.append((b, i))\n    points = set(A)\n    points.update(B)\n\n    min_x = -10**9\n    max_x = 10**9\n    min_y = -10**9\n    max_y = 10**9\n\n    for p in points:\n        if p[0] > max_x:\n            max_x = p[0]\n        elif p[0] < min_x:\n            min_x = p[0]\n\n        if p[1] > max_y:\n            max_y = p[1]\n        elif p[1] < min_y:\n            min_y = p[1]\n\n    if min_x > max_y:\n        return \"inf\"\n    else:\n        return max_x * max_y"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    seg_map = {}\n    for i in range(N):\n        seg_map[i] = {\n            \"A\": int(stdin.split()[i * 2 + 1]),\n            \"B\": int(stdin.split()[i * 2 + 2])\n        }\n    res = 0\n    for j in range(M):\n        seg_map[j] = {\n            \"D\": int(stdin.split()[j * 2 + 1]),\n            \"E\": int(stdin.split()[j * 2 + 2])\n        }\n    print(seg_map)\n    for i in range(N):\n        cross = []\n        for j in range(M):\n            x = seg_map[j][\"D\"] - seg_map[i][\"A\"]\n            y = seg_map[j][\"E\"] - seg_map[i][\"B\"]\n            if x == 0 or y == 0:\n                if i == j:\n                    continue\n                else:\n                    cross.append([i, j])\n            else:\n                if (x * x + y * y) <= 4:\n                    cross.append([i, j])\n        if cross:\n            res += max([(seg_map[i][\"A\"], seg_map[i][\"B\"]) for i in cross])[1] - min([(seg_map[i][\"A\"], seg_map[i][\"B\"]) for i in cross])[0]\n            # print(cross)\n        # print(res)\n    return str(res)\n\nsolution(input())\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    segments = [list(map(int, stdin.split())) for _ in range(N)]\n    nums = []\n    for j in range(M):\n        for i in range(N):\n            for k in range(N):\n                if i == k:\n                    if segments[i][j] == 0:\n                        continue\n                    elif segments[i][j] == 1:\n                        nums.append(1)\n                    elif segments[i][j] == 2:\n                        nums.append(2)\n                    else:\n                        nums.append(segments[i][j])\n    if len(set(nums)) == 1:\n        return 'INF'\n    return str(sum(nums) * 2)\n    \nsolution(input())\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x <= t and t - s <= x <= t + s + 1:\n        return \"YES\"\n    return \"NO\"\nstdin = '''3 10 4\n\n'''\nprint(solution(stdin))"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_time(t):\n        return t <= time_now and t + s > time_now\n\n    time_now = int(stdin.split()[1])\n    s = int(stdin.split()[2])\n    time_now += s\n    if not check_time(time_now):\n        return 'NO'\n    time_now += s\n    if not check_time(time_now):\n        return 'NO'\n    time_now += s\n    if not check_time(time_now):\n        return 'NO'\n    if int(stdin.split()[0]) == 1:\n        return 'YES'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x - t < 0:\n        return 'NO'\n    else:\n        return 'YES'\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def timing_out(s):\n        return s[0] + 1\n\n    def check_bark(t, s, x):\n        if (t == x) or (t + s == x):\n            return True\n        else:\n            return False\n\n    n_t, n_s, n_x = stdin.split(\" \")\n    n_x = int(n_x)\n    n_t = int(n_t)\n    n_s = int(n_s)\n    x_t = timing_out(n_x)\n    if check_bark(n_t, n_s, x_t):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    return 'YES' if t + s >= x else 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split()))\n    if t == s and x - s < t < x:\n        return \"NO\"\n    if x - s >= t:\n        return \"YES\"\n    if (x - s) % s == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if (t + s + 1) % x == 0:\n        return \"NO\"\n    return \"YES\"\nstdin = sys.stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #x = list(map(int, input().split()))\n    t,s,x = list(map(int, stdin.split()))\n    if x >= t + s or x + s <= t:\n        return 'NO'\n    for i in range(t, x + s, s):\n        if i == x:\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split()))\n    if t <= x < (t + s):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if s == 0:\n        return \"YES\" if t <= x <= x + s else \"NO\"\n    if t == s:\n        return \"YES\"\n    if s > t:\n        return \"NO\"\n    if t < x:\n        return \"YES\" if x >= t + s else \"NO\"\n    else:\n        if x - t > s * 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = set()\n    for i in range(n):\n        l.add(int(stdin.split()[i]))\n    for i in range(n):\n        s = int(stdin.split()[i])\n        if s in l:\n            s_check = s\n            for j in range(i + 1, n):\n                if s > int(stdin.split()[j]):\n                    s_check = min(s, int(stdin.split()[j]))\n                    break\n            if s_check in l:\n                l.remove(s_check)\n    if len(l) == 0:\n        return \"NO\"\n    return str(l.pop()) + \" \" + str(l.pop())\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = {}\n    for i in range(n):\n        l[i] = int(stdin.strip().split()[i])\n    sorted_l = sorted(l.items(), key=lambda kv: (kv[1], kv[0]))\n    a1 = sorted_l[0][1]\n    a2 = sorted_l[-1][1]\n    for i in range(n):\n        if a1 <= sorted_l[i][1] and sorted_l[i][1] <= a2:\n            return \" \".join([str(sorted_l[i][0]), str(sorted_l[i][0])])\n    return \"-1 -1\"\n    \ndef"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    segments = list(map(int, stdin.split()[1:]))\n    i = 0\n    j = 1\n    while i < N:\n        if segments[i] > segments[j]:\n            j += 1\n        elif segments[i] < segments[j]:\n            i += 1\n        else:\n            return f\"{i} {j}\"\n\n    return \"No solution\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split('\\n')[i].split(' '))))\n    segments.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][0] <= segments[j][1] and segments[i][1] >= segments[j][0]:\n                return f\"{i+1} {j+1}\"\n    return '-1 -1'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = list(map(int, stdin.split()))\n    n = result.pop(0)\n    s = result.pop(0)\n    arr = sorted(result)\n\n    i = 0\n    j = n - 1\n    while i < j:\n        if s > arr[j]:\n            j -= 1\n        elif s < arr[i]:\n            i += 1\n        else:\n            return f\"{i + 1} {j}\"\n    return f\"-1 -1\""
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    segments = sorted(map(int, stdin.split()))\n    s1 = segments[0]\n    s2 = segments[-1]\n    for i in range(1, len(segments)-1):\n        if segments[i] < s1 and segments[i+1] > s2:\n            return '{} {}'.format(i, i+1)\n    return '-1 -1'"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num1 = list(map(int, stdin.split()))\n    num2 = num1[1:]\n    ans = -1, -1\n    for i in range(n):\n        for j in range(i, n):\n            if num2[i] < num2[j]:\n                if ans == -1:\n                    ans = i, j\n                else:\n                    break\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    l = []\n    for i in range(n):\n        l.append(arr[i][0])\n        l.append(arr[i][1])\n    l.sort()\n    dic = {}\n    for i in range(len(l)):\n        dic[l[i]] = i\n    l = []\n    for i in range(n):\n        l.append(dic[arr[i][0]])\n        l.append(dic[arr[i][1]])\n    l.sort()\n    if l[0] == l[1]:\n        return str(l[0]) + str(l[1])\n    else:\n        return \"-1 -1\"\n\n\ndef"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    nodes = list(map(int, stdin.splitlines()[1:]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (nodes[i] < nodes[j] and nodes[j] > nodes[i] + 1) or (nodes[j] < nodes[i] and nodes[i] > nodes[j] + 1):\n                return f\"{i + 1} {j + 1}\"\n    return \"-\""
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(\"\\n\")\n    a_set = []\n    for i in range(1, n+1):\n        a_set.append(tuple(map(int, a[i-1].split())))\n    a_set = sorted(a_set)\n    \n    i = 1\n    j = 0\n    while i < n:\n        i += 1\n        if j == 0:\n            a_set[0][0] >= a_set[1][0] and a_set[0][1] <= a_set[1][1]\n        j += 1\n        if j == n-1:\n            a_set[-1][0] >= a_set[-2][0] and a_set[-1][1] <= a_set[-2][1]\n        \n        if j < n:\n            if a_set[j][0] >= a_set[j+1][0] and a_set[j][1] <= a_set[j+1][1]:\n                return str(a_set[j-1][0]) + \" \" + str(a_set[j-1][1])\n            else:\n                j += 1\n\nprint(solution(input()))"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    numbers = [0, 0, 0, 0]\n    for i in s:\n        if i.islower():\n            numbers[0] += 1\n        elif i.isupper():\n            numbers[1] += 1\n        elif i == \"?\":\n            numbers[2] += 1\n        elif i == \"A\":\n            numbers[3] += 1\n        elif i == \"C\":\n            numbers[4] += 1\n        elif i == \"G\":\n            numbers[5] += 1\n        elif i == \"T\":\n            numbers[6] += 1\n    result = \"\"\n    if numbers[0] == n:\n        result += \"A\" * numbers[0]\n    if numbers[1] == n:\n        result += \"C\" * numbers[1]\n    if numbers[2] == n:\n        result += \"G\" * numbers[2]\n    if numbers[3] == n:\n        result += \"T\" * numbers[3]\n    if numbers[4] == n:\n        result += \"?\" * numbers[4]\n    if numbers[5] == n:\n        result += \"A\" * numbers[5]\n    if numbers[6] == n:\n        result += \"C\" * numbers[6]\n    if numbers[7] == n:\n        result += \"G\" * numbers[7]\n    if numbers[8] == n:\n        result += \"T\" * numbers[8]\n    if numbers[0] == numbers[1] == numbers[2] == numbers[3] == numbers[4] == numbers[5] == numbers[6] == n:\n        result = \"===\"\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n##\n## Imports\n##\nimport re\n\n##\n## Functions\n##"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin[:n].upper()\n    if len(set(s)) == 4:\n        return s\n    return \"===\\n\""
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1]\n\n    result = \"\"\n\n    if len(s) % 4 == 0:\n        result = s\n    else:\n        for i in range(0, len(s), 4):\n            result += chr(ord(s[i]) + ord(s[i + 1]) + ord(s[i + 2]) + ord(s[i + 3]))\n\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return stdin\n    s = stdin\n    s = s.replace(\"?\", \"A\")\n    s = s.replace(\"?\", \"C\")\n    s = s.replace(\"?\", \"G\")\n    s = s.replace(\"?\", \"T\")\n    return s"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while True:\n        if s.count('?') == 4 * n:\n            return s\n        else:\n            s = s.replace('?', 'A', 1)\n            s = s.replace('?', 'G', 1)\n            s = s.replace('?', 'T', 1)\n            s = s.replace('?', 'C', 1)\n\nsolution(input())\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin\n    n = int(n)\n    s = s[:n]\n    decoded_s = \"\"\n    num_A = num_C = num_G = num_T = 0\n    for i, c in enumerate(s):\n        if c == \"?\":\n            decoded_s += s[i - 1]\n        elif c == \"A\":\n            decoded_s += \"A\"\n            num_A += 1\n        elif c == \"C\":\n            decoded_s += \"C\"\n            num_C += 1\n        elif c == \"G\":\n            decoded_s += \"G\"\n            num_G += 1\n        elif c == \"T\":\n            decoded_s += \"T\"\n            num_T += 1\n    if num_A == num_C == num_G == num_T:\n        return decoded_s\n    else:\n        return \"===\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0, len(stdin), 4):\n        x, y, z, o = stdin[i], stdin[i + 1], stdin[i + 2], stdin[i + 3]\n        if not x == o == z == '.':\n            return 'NO'\n        if x == o and x == z:\n            return 'NO'\n        for j in range(i, len(stdin), 4):\n            x, y, z, o = stdin[j], stdin[j + 1], stdin[j + 2], stdin[j + 3]\n            if not x == o == z == '.':\n                return 'NO'\n            if x == o and x == z:\n                return 'NO'\n            if x == o and x == z and (y == 'x' or y == 'o'):\n                return 'NO'\n            if x == o and x == z and (y == 'x' or y == 'o'):\n                return 'NO'\n    return 'YES'\n\n\nstdin = 'x.o.x.o'\nprint(solution(stdin))\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin.split()\n    m, n = int(T[0]), int(T[1])\n    grid = []\n    for i in range(m):\n        grid.append(list(T[2 + 2 * i]))\n\n    for i in range(m - 3):\n        for j in range(n - 3):\n            if grid[i][j] == '.' and grid[i + 1][j] == '.' and grid[i + 2][j] == '.' and grid[i + 3][j] == '.':\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    lst = []\n    for i in stdin:\n        lst.append(i)\n    for i in range(len(lst)):\n        if len(lst) == 3:\n            if lst[i] == lst[i+1] == lst[i+2]:\n                return 'YES'\n        elif len(lst) == 4:\n            if lst[i] == lst[i+1] == lst[i+2] == lst[i+3]:\n                return 'YES'\n        elif len(lst) == 5:\n            if lst[i] == lst[i+1] == lst[i+2] == lst[i+3] == lst[i+4]:\n                return 'YES'\n    return 'NO'\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    arr = []\n    for i in range(4):\n        arr.append(list(stdin[i]))\n    for i in range(4):\n        arr[i] = list(arr[i])\n    # print(arr)\n    symbol_x = 'x'\n    symbol_o = 'o'\n    # check row\n    count_x = 0\n    count_o = 0\n    for i in range(4):\n        if arr[i][0] == symbol_x:\n            count_x += 1\n        if arr[i][0] == symbol_o:\n            count_o += 1\n    if count_x == 3:\n        return \"YES\"\n    elif count_o == 3:\n        return \"YES\"\n    # check column\n    count_x = 0\n    count_o = 0\n    for i in range(4):\n        if arr[0][i] == symbol_x:\n            count_x += 1\n        if arr[0][i] == symbol_o:\n            count_o += 1\n    if count_x == 3:\n        return \"YES\"\n    elif count_o == 3:\n        return \"YES\"\n    # check diagonals\n    count_x = 0\n    count_o = 0\n    # top left to bottom right\n    for i in range(4):\n        if arr[i][i] == symbol_x:\n            count_x += 1\n        if arr[i][i] == symbol_o:\n            count_o += 1\n    if count_x == 3:\n        return \"YES\"\n    elif count_o == 3:\n        return \"YES\"\n    # bottom left to top right\n    count_x = 0\n    count_o = 0\n    for i in range(4):\n        if arr[i][3 - i] == symbol_x:\n            count_x += 1\n        if arr[i][3 - i] == symbol_o:\n            count_o += 1\n    if count_x == 3:\n        return \"YES\"\n    elif count_o == 3:\n        return \"YES\"\n    # no winner\n    return \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if (len(stdin) % 4)!= 0:\n        return 'NO'\n    else:\n        lines = stdin.split('\\n')\n        for line in lines:\n            if len(line)!= 4:\n                return 'NO'\n        for i in range(len(lines)):\n            if lines[i][0]!= lines[i][3] and lines[i][0]!= lines[i][1] and lines[i][1]!= lines[i][2] and lines[i][2]!= lines[i][0]:\n                return 'NO'\n        return 'YES'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    board = list(map(list, stdin.split('\\n')))\n    size = 3\n    def is_win(move):\n        for i in range(size):\n            if board[i][0] == move:\n                for j in range(1, size):\n                    if board[i][j]!= move:\n                        return False\n                return True\n        for i in range(size):\n            for j in range(1, size):\n                if board[i][j]!= move:\n                    return False\n        for i in range(size):\n            if board[0][i]!= move:\n                return False\n        return True\n    for i in range(size):\n        for j in range(size):\n            if board[i][j]!= '.':\n                board[i][j] = '.'\n                if is_win('x'):\n                    board[i][j] = 'x'\n                if is_win('o'):\n                    board[i][j] = 'o'\n    for i in range(size):\n        for j in range(size):\n            if board[i][j] == 'x':\n                return 'YES'\n            if board[i][j] == 'o':\n                return 'NO'\n    return 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    a = list(map(lambda x: x.split(), a))\n    res = 0\n    for i in range(len(a)):\n        if a[i][0] == 'x':\n            res = res + 1\n        if a[i][0] == 'o':\n            res = res - 1\n        if a[i][1] == 'x':\n            res = res + 1\n        if a[i][1] == 'o':\n            res = res - 1\n        if a[i][2] == 'x':\n            res = res + 1\n        if a[i][2] == 'o':\n            res = res - 1\n        if a[i][3] == 'x':\n            res = res + 1\n        if a[i][3] == 'o':\n            res = res - 1\n    if res == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import zip_longest\n    from collections import Counter\n    from typing import List\n    s = stdin.split()\n    for i in range(1, len(s)):\n        s[i] = s[i].replace('.', '')\n        s[i] = s[i].replace('o', '0')\n        s[i] = s[i].replace('x', '1')\n    lst = list(map(list, zip_longest(*s, fillvalue='.')))\n    if len(lst[0])!= 4:\n        return 'NO'\n    if Counter(lst[0])['x']!= 3 or Counter(lst[1])['x']!= 3:\n        return 'NO'\n    if Counter(lst[0])['0'] == 3 and Counter(lst[1])['1'] == 3:\n        return 'YES'\n    for i in range(4):\n        if lst[0][i]!= '.' and lst[1][i]!= '.' and lst[0][i]!= lst[1][i]:\n            return 'NO'\n    if lst[0][0]!= '.' and lst[1][1]!= '.' and lst[0][0]!= lst[1][1]:\n        return 'NO'\n    if lst[0][2]!= '.' and lst[1][3]!= '.' and lst[0][2]!= lst[1][3]:\n        return 'NO'\n    if lst[0][0]!= '.' and lst[1][0]!= '.' and lst[0][0]!= lst[1][0]:\n        return 'NO'\n    if lst[0][1]!= '.' and lst[1][1]!= '.' and lst[0][1]!= lst[1][1]:\n        return 'NO'\n    if lst[0][2]!= '.' and lst[1][2]!= '.' and lst[0][2]!= lst[1][2]:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    first_turn = True\n    for i in range(len(stdin_list)):\n        field = stdin_list[i]\n        if i == 0:\n            continue\n        if i == 1:\n            if field[0] == field[2] == field[4] == 'o' or field[1] == field[3] == field[5] == 'o':\n                return 'YES'\n            else:\n                continue\n        if i == 2:\n            if field[0] == field[1] == field[4] == 'o' or field[0] == field[3] == field[6] == 'o' or field[1] == field[2] == field[5] == 'o' or field[2] == field[5] == field[8] == 'o':\n                return 'YES'\n            else:\n                continue\n        if i == 3:\n            if field[0] == field[2] == field[4] == 'o' or field[2] == field[4] == field[6] == 'o' or field[4] == field[6] == field[8] == 'o' or field[0] == field[1] == field[3] == 'o' or field[1] == field[3] == field[5] == 'o':\n                return 'YES'\n            else:\n                continue\n        if i == 4:\n            if field[0] == field[1] == field[2] == 'x' or field[0] == field[3] == field[6] == 'x' or field[1] == field[4] == field[7] == 'x' or field[2] == field[5] == field[8] == 'x' or field[3] == field[5] == field[7] == 'x' or field[4] == field[6] == field[8] == 'x':\n                return 'YES'\n            else:\n                continue\n        if i == 5:\n            if field[0] == field[3] == field[6] == 'x' or field[1] == field[3] == field[5] == 'x' or field[2] == field[4] == field[7] == 'x' or field[3] == field[4] == field[5] == 'x' or field[0] == field[1] == field[2] == 'x' or field[0] == field[2] == field[4] == 'x':\n                return 'YES'\n            else:\n                continue\n        if i == 6:\n            if field[0] == field[1] == field[2] == 'x' or field[2] == field[4] == field[6] == 'x' or field[3] == field[4] == field[5] == 'x' or field[0] == field[3] == field[5] == 'x' or field[1] == field[4] == field[6] == 'x' or field[2] == field[5] == field[8] == 'x':\n                return 'YES'\n            else:\n                continue\n        if i == 7:\n            if field[0] == field[3] == field[6] == 'x' or field[3] == field[4] == field[5] == 'x' or field[6] == field[7] == field[8] == 'x' or field[0] == field[1] == field[2] == 'x' or field[0] == field[1] == field[2] == 'x' or field[2] == field[3] == field[4] == 'x' or field[1] == field[4] == field[5] == 'x' or field[2] == field[4] == field[5] == 'x':\n                return 'YES'\n            else:\n                continue\n        if i == 8:\n            if field[0] == field[3] == field[6] == 'x' or field[1] == field[3] == field[5] == 'x' or field[2] == field[4] == field[7] == 'x' or field[3] == field[4] == field[5] == 'x' or field[0] == field[1] == field[2] == 'x' or field[0] == field[2] == field[4] == 'x' or field[1] == field[4] == field[5] == 'x' or field[2] == field[4] == field[5] == 'x':\n                return 'YES'\n            else:\n                continue\n    if first_turn:\n        return 'NO'\n    else:\n        return 'YES'\n\nsolution(\"x.ox\")\nsolution(\"x.o.x\")\nsolution(\"oo.xox\")\nsolution(\"x..x\")\nsolution(\"x.o.o\")\nsolution(\"xooox\")\nsolution(\"oooox\")\nsolution(\"ooxxo\")\nsolution(\"ooxoxx\")\nsolution(\"ooxxoox\")\nsolution(\"oooxxoox\")\nsolution(\"ooooxxoox\")\nsolution(\"oooxxooxx\")\nsolution(\"ooooxxooxx\")\nsolution(\"ooooxxooxxx\")\nsolution(\"ooooxxooxxxxx\")\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string and returns either \"YES\" or \"NO\" as a string.\n\n    Parameters:\n    stdin (str): string with the input\n\n    Returns:\n    str: \"YES\" if it was possible to win by making single turn and \"NO\" otherwise.\n    \"\"\"\n    x = stdin\n    rows = 4\n    cols = 4\n    x = x.replace(\"x\", \".\")\n    x = x.replace(\"o\", \".\")\n    x = x.replace(\".\", \"x\")\n    x = x.replace(\".\", \"o\")\n    x = x.replace(\".\", \".\")\n    x = x.replace(\".\", \".\")\n\n    x = list(x)\n\n    if x.count(\"x\") == rows * cols:\n        return \"YES\"\n\n    elif x.count(\"x\") > rows * cols:\n        return \"NO\"\n    elif x.count(\"o\") > rows * cols:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 3 2\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5\n   ... 2 2 3 4 5\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l, r = 0, n - 1\n    while l < r:\n        if a[l] + a[r] < 10**9:\n            l += 1\n        elif a[l] + a[r] > 10**9:\n            r -= 1\n        else:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_part(arr: list) -> list:\n        # get prefix\n        prefix = []\n        n = len(arr)\n        for i in range(n):\n            while prefix and prefix[-1] <= arr[i]:\n                prefix.pop()\n            prefix.append(arr[i])\n\n        # get suffix\n        suffix = []\n        for i in range(n-1, -1, -1):\n            while suffix and suffix[-1] <= arr[i]:\n                suffix.pop()\n            suffix.append(arr[i])\n        suffix.reverse()\n\n        # get result\n        result = prefix[:]\n        result.extend(suffix)\n        return result\n\n    arr = list(map(int, stdin.split()))\n    # find first element in arr\n    first = 0\n    while arr[first] == 0:\n        first += 1\n    # find last element in arr\n    last = len(arr) - 1\n    while arr[last] == 0:\n        last -= 1\n\n    result = get_part(arr[:first] + arr[last+1:])\n    print(' '.join(map(str, result)))\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, a] = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"NO\"\n    for i in range(n):\n        if (sum(a[:i]) == sum(a[i:])):\n            return \"YES\"\n    for i in range(n):\n        if sum(a[:i]) == sum(a[i:]):\n            return \"YES\"\n    a.sort()\n    for i in range(n):\n        if (a[i] == a[i - 1] + 1):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    s = sum(arr)\n    if n == 1:\n        if s%2 == 1:\n            return 'NO'\n        else:\n            return 'YES'\n    if s%2 == 1:\n        return 'NO'\n    if s//2 == s//2:\n        return 'YES'\n    if s//2 == s//2+1:\n        return 'YES'\n    for i in range(1,n):\n        if arr[i] == arr[i-1]:\n            return 'NO'\n    if s%2 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\n\n    \"\"\"\n    \n\"\"\"\n    if not arr:\n        return 'NO'\n    s = sum(arr)\n    if s%2 == 1:\n        return 'NO'\n    if s//2 == s//2:\n        return 'YES'\n    if s//2 == s//2 + 1:\n        return 'YES'\n    \n    for i in range(1,n):\n        if arr[i] == arr[i-1]:\n            return 'NO'\n    return 'YES'\n    \"\"\""
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\" \")]\n    tmp = []\n    tmp_sum = 0\n    for i, item in enumerate(arr):\n        tmp.append(item)\n        if i == 0:\n            tmp_sum = item\n        else:\n            tmp_sum += item\n            if tmp_sum == 0:\n                tmp.append(tmp_sum)\n                tmp_sum = 0\n    if tmp_sum!= 0:\n        tmp.append(tmp_sum)\n\n    if (sum(tmp) == sum(arr)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if (sum(a) - a[0]) % 2 == 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = stdin[1]\n    a = a.split()\n    a = map(int,a)\n    a = list(a)\n    print(\"YES\" if not (check(a)==\"NO\") else \"NO\")\n    return\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    prev_sum = sum(arr)\n    for i in range(1, n):\n        curr_sum = sum(arr[i:])\n        if curr_sum == prev_sum:\n            return \"YES\"\n        prev_sum = curr_sum\n    return \"NO\""
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    for i in range(n):\n        if arr[i]!= 0:\n            if arr[i] + arr[i-1] == arr[i-1] + arr[i+1]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  _, n, k = map(int, stdin.split())\n  a = list(map(int, stdin.split()[1]))\n  b = list(map(int, stdin.split()[2]))\n  if sorted(a) == sorted(b):\n    return 'Yes'\n  a = list(map(str, a))\n  b = list(map(str, b))\n  a =''.join(a)\n  b =''.join(b)\n  c =''.join(sorted(a.split()))\n  if a == c:\n    return 'Yes'\n  return 'No'\n\nsolution(\"10 5\\n2 3 0 8 9 10\\n5 4\\n\")\n\"\"\"\nfrom itertools import product\ndef"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split())), list(map(int, stdin.split()))\n    #print(a,b)\n    if(len(a)!= len(b)):\n        return \"No\"\n    #print(a,b)\n    for i in range(len(a)):\n        if(a.count(a[i])>1):\n            return \"No\"\n    #print(a,b)\n    for i in range(len(b)):\n        if(b.count(b[i])>1):\n            return \"No\"\n    #print(a,b)\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if(b[i] == a[i]):\n                if(b[i] not in a):\n                    return \"No\"\n                a.remove(b[i])\n    #print(a)\n    if(len(a)>0):\n        return \"No\"\n    else:\n        return \"Yes\"\n\nprint(solution(input()))"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    \n    #a = []\n    #b = []\n    #for i in range(1, len(a) + 1):\n    #    a.append(a.pop(i))\n    #for i in range(1, len(b) + 1):\n    #    b.append(b.pop(i))\n    \n    a = tuple(a)\n    b = tuple(b)\n    b = b[::-1]\n    \n    if len(set(a))!= len(a):\n        return 'No'\n    \n    if (set(a) & set(b))!= set(a):\n        return 'No'\n    \n    seq = ''\n    for i in range(len(a)):\n        if a[i]!= 0:\n            seq += str(b[a.index(0)])\n            a[a.index(0)] = 0\n            if seq == seq[::-1]:\n                return 'Yes'\n    return 'No'\n\nprint(solution(stdin))"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1].split()]\n    b = [int(x) for x in stdin.split()[2].split()]\n    #print(a, b)\n    def valid(x):\n        for i in range(len(x)):\n            if x[i] == 0 and x[i+1]!= 0:\n                return False\n        return True\n    def rv(a, b):\n        ret = a\n        for i in b:\n            ret = [x if x < i else i for x in ret]\n        return ret\n    ans = \"No\"\n    for i in range(n):\n        if valid(a):\n            if valid(rv(a, b)):\n                ans = \"Yes\"\n                break\n    return ans\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    result = []\n    for i in a:\n        if i in b:\n            b.remove(i)\n        else:\n            result.append(i)\n    if len(result) == n - k:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    a = list(a)\n    b = list(b)\n    result = []\n    for x in a:\n        if x in b:\n            b.remove(x)\n    if len(b) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    assert(n == len(a) + len(b))\n\n    # The first pass is to check whether the sequence a is an increasing sequence\n    # and whether the sequence b is an increasing sequence.\n    # In particular, we need to ensure that the elements in b are used exactly once.\n    # If this is not possible, then the sequence a does not fulfill the requirements.\n    # If the sequence b is used at least once, then the sequence a is still valid.\n\n    is_increasing = True\n\n    for i in range(len(a)):\n        if a[i] > a[i+1]:\n            is_increasing = False\n            break\n\n    for i in range(len(b)):\n        if b[i] in a:\n            return 'No'\n\n    if not is_increasing:\n        return 'No'\n    else:\n        return 'Yes'\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_zero, seq_a, seq_b = (int(x) for x in stdin.split())\n    seq_a_0 = seq_a.count(0)\n    if seq_a_0 < num_zero:\n        return \"No\"\n    seq_b_count = Counter(seq_b)\n    seq_b_count = {k: v for k, v in seq_b_count.items() if v <= seq_a_0}\n    if len(seq_b_count) == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n    11 0 0 14\n    5 4\n    ''')\n    'Yes'\n    >>> solution('''6 1\n    2 3 0 8 9 10\n    5\n    ''')\n    'No'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    l = len(a)\n    if l!= len(b):\n        return \"No\"\n    if any(i in a for i in b):\n        return \"No\"\n    return \"Yes\" if sorted(a + b) == list(range(1, l + 1)) else \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    if sorted(b) == sorted(set(b)):\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if a >= x + y + z and a >= x + b + c and a >= x + y + z and a >= x + b + c else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    # print(x, y, z, a, b, c)\n    # return\n    if a < x and b < y and c < z:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if x * a + y * b + z * c == x * y * z else \"NO\""
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    if x >= a and y >= b and z >= c:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    # x and c are not used\n    x, c = x - a, b\n    y, b = y - a, c\n\n    if y + c >= x and b + z >= x and x >= y + c:\n        print(\"YES\")\n        return \"YES\"\n    else:\n        print(\"NO\")\n        return \"NO\""
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n\n    # ----\u00a0Checking if the amount of grapes is enough to make everyone happy\n    if x + y + z <= z:\n        return \"YES\"\n\n    # ----\u00a0Making a distribution of grapes\n    a = max(x, y, z)\n    b = min(x, y, z)\n    # ----\u00a0Finding the best way to distribute grapes\n    while True:\n        a -= 1\n        b -= 2\n        if a <= b <= z:\n            return \"YES\"\n        if a <= b:\n            break\n\n    return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    if (x + b + c) < (x + a + c):\n        return 'NO'\n\n    if (x + a + c) < (x + b + c):\n        return 'NO'\n\n    if (x + b + c) < (x + a + c):\n        return 'NO'\n\n    if (x + a + c) < (x + b + c):\n        return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O'Reilly & Miller\"\"\"\n    num_grapes, box_size = map(int, stdin.split())\n    grapes_eaten_by_A = box_size // num_grapes\n    remaining_grapes = box_size % num_grapes\n\n    num_grapes_by_D = remaining_grapes // 2\n    remaining_grapes_by_D = remaining_grapes % 2\n    remaining_grapes_by_M = remaining_grapes - (remaining_grapes_by_D + remaining_grapes_by_D)\n\n    if grapes_eaten_by_A + num_grapes_by_D + remaining_grapes_by_M == num_grapes:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    if a + b + c > x + y + z:\n        return 'YES'\n\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x >= 4 and y >= 3 and z >= 2:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # for line in stdin.splitlines():\n    #     print(line)\n    #     data = line.split()\n    #     print(data)\n    #     print(' '.join([str(elem) for elem in data]))\n    #     print(type(data))\n\n    data = stdin.splitlines()\n    print(data)\n    # print(type(data))\n    data_no_duplicates = []\n    for elem in data:\n        if elem not in data_no_duplicates:\n            data_no_duplicates.append(elem)\n\n    data = data_no_duplicates\n    print(data)\n    if len(data) > 4:\n        # print(data)\n        for i in range(len(data) - 2):\n            # print(data[i])\n            if data[i] == data[i + 1] == data[i + 2] == data[i + 3]:\n                print(\"YES\")\n                return \"YES\"\n        print(\"NO\")\n        return \"NO\"\n    else:\n        print(\"NO\")\n        return \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin.splitlines()[0])\n    for i in range(1, 4):\n        lights = stdin.splitlines()[i]\n        lights = list(map(int, lights.split()))\n        lights.sort()\n        print(lights)\n    lights = stdin.splitlines()[4]\n    lights = list(map(int, lights.split()))\n    lights.sort()\n    print(lights)\n    if lights[0] == 1 and lights[2] == 1 and lights[4] == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution('1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1'))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    input_lines = list(map(lambda x: x.split(' '), input_lines))\n    input_lines = list(map(lambda x: list(map(int, x)), input_lines))\n\n    intersections = []\n    for i in range(len(input_lines) - 1):\n        for j in range(i + 1, len(input_lines)):\n            if input_lines[i][2] == input_lines[j][1]:\n                intersections.append(input_lines[i][1])\n\n    for i in range(len(intersections) - 1):\n        for j in range(i + 1, len(intersections)):\n            if intersections[i] in intersections[j]:\n                return 'YES'\n\n    return 'NO'\n\n\nprint(solution(input))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def middle(l: int, s: int, r: int):\n        if l == s and l == r:\n            return's'\n        elif l == s or l == r or s == r:\n            return 'p'\n        else:\n            return 'l'\n\n    lights = [int(x) for x in stdin.split()]\n    lights.sort()\n    if lights[0] == 0 and lights[-1] == 1:\n        return 'NO'\n    lights = lights[:-1] + lights[1:]\n    for i in range(len(lights) - 2):\n        if middle(lights[i], lights[i+1], lights[i+2]) =='s':\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        l, s, r, p = list(map(int, stdin.split()))\n        if (l and (s and r) and (s and r and p)):\n            return \"YES\"\n        elif (l and (s and r) and not (s and r and p)):\n            return \"NO\"\n        elif (l and (not s or not r) and p):\n            return \"YES\"\n        elif (l and (not s or not r) and not p):\n            return \"NO\"\n        elif (s and (l and r) and (s and r and p)):\n            return \"YES\"\n        elif (s and (l and r) and not (s and r and p)):\n            return \"NO\"\n        elif (s and (not l or not r) and p):\n            return \"YES\"\n        elif (s and (not l or not r) and not p):\n            return \"NO\"\n        elif (r and (l and s) and (s and r and p)):\n            return \"YES\"\n        elif (r and (l and s) and not (s and r and p)):\n            return \"NO\"\n        elif (r and (not l or not s) and p):\n            return \"YES\"\n        elif (r and (not l or not s) and not p):\n            return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    \n    # Reverse lines because it is easier to detect the crossing\n    # in the right order\n    lines = lines[::-1]\n    \n    # Check for accidents\n    for i in range(4):\n        # If a road part has two lights\n        if lines[i].count('0') == 2:\n            # If both lights are green at the same time\n            if (lines[i][0] == '0' and lines[i][3] == '0') or (lines[i][1] == '0' and lines[i][2] == '0'):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    instructions = [[int(x) for x in line.split()] for line in stdin.split('\\n')]\n    intersections = []\n    parts = []\n    for instruction in instructions:\n        if instruction[2] == 0 and instruction[3] == 1:\n            parts.append(Part(intersection=instruction[0], part=instruction[1]))\n        elif instruction[2] == 1 and instruction[3] == 0:\n            parts.append(Part(intersection=instruction[0], part=instruction[1]))\n            intersections.append(instruction[0])\n        elif instruction[2] == 1 and instruction[3] == 1:\n            intersections.append(instruction[0])\n    roads = []\n    for part in parts:\n        roads.append(Road(left=part.part, right=part.part, intersection=part.intersection, left_part=part.intersection, right_part=part.intersection))\n\n    return intersections\n\nclass Part:\n    def __init__(self, intersection: int, part: int):\n        self.intersection = intersection\n        self.part = part\nclass Road:\n    def __init__(self, left: int, right: int, intersection: int, left_part: int, right_part: int):\n        self.left = left\n        self.right = right\n        self.intersection = intersection\n        self.left_part = left_part\n        self.right_part = right_part\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lights = {\n        0: ['r','s', 'l', 'p'],\n        1: ['s', 'r', 'l', 'p'],\n        2: ['l', 'r', 'p','s'],\n        3: ['p', 'r', 'l','s']\n    }\n\n    for i in range(4):\n        for light in lights[i]:\n            print(' '.join(lights[i]), end=' ')\n\n        print(light)\n\n    return stdin"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    stdin = [[int(j) for j in i.split()] for i in stdin]\n    output = \"YES\"\n    for i in stdin:\n        if i[3] == 0:\n            output = \"NO\"\n    return output\n\nprint(solution(input()))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = [list(map(int, line.split())) for line in stdin.splitlines()]\n    road_parts = []\n    for i, line in enumerate(lines[1:]):\n        road_parts.append(\n            RoadPart(\n                line[0],\n                line[1],\n                line[2],\n                line[3]\n            )\n        )\n    return \"YES\" if not accident_possible(road_parts) else \"NO\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    phone_number = stdin\n    phone_number = phone_number.replace(\"\\n\", \"\")\n    phone_number = phone_number.replace(\" \", \"\")\n    phone_number = phone_number.replace(\"\\t\", \"\")\n    phone_number = phone_number.replace(\"\\r\", \"\")\n    digits = list(phone_number)\n    digits = digits[::-1]\n    print(digits)\n    answer = []\n    for i in range(len(digits)):\n        if i > 0:\n            print(f\"{digits[i]} - {digits[i-1]}\")\n        for j in range(len(digits)):\n            print(f\"{digits[j]}\")\n            if j > 0:\n                print(f\"{digits[j]} - {digits[j-1]}\")\n            answer.append([digits[j],digits[i],digits[j-1],digits[i-1]])\n    for i in range(len(answer)):\n        print(f\"{answer[i]}\")\n    print(answer)\n    return \"\"\n    \nsolution(stdin)\n\nsolution(stdin)\n\nsolution(stdin)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    for i in range(1,10):\n        for j in range(0,10):\n            if i == j:\n                continue\n            for k in range(0,10):\n                if i == k:\n                    continue\n                if j == k:\n                    continue\n                for m in range(0,10):\n                    if i == m:\n                        continue\n                    if j == m:\n                        continue\n                    if k == m:\n                        continue\n                    if len(answer)!= 9:\n                        continue\n                    if answer.count(str(i)) == 1 and answer.count(str(j)) == 1 and answer.count(str(k)) == 1 and answer.count(str(m)) == 1:\n                        continue\n                    if answer.count(str(i)) == 1 and answer.count(str(j)) == 1 and answer.count(str(k)) == 1 and answer.count(str(m)) == 1:\n                        continue\n                    if answer.count(str(i)) == 1 and answer.count(str(j)) == 1 and answer.count(str(k)) == 1 and answer.count(str(m)) == 1 and answer.count(str(0)) == 1:\n                        continue\n                    if answer.count(str(i)) == 1 and answer.count(str(j)) == 1 and answer.count(str(k)) == 1 and answer.count(str(m)) == 1 and answer.count(str(0)) == 1 and answer.count(str(0)) == 1:\n                        continue\n                    if answer.count(str(i)) == 1 and answer.count(str(j)) == 1 and answer.count(str(k)) == 1 and answer.count(str(m)) == 1 and answer.count(str(0)) == 1 and answer.count(str(0)) == 1 and answer.count(str(0)) == 1:\n                        continue\n                    if answer.count(str(i)) == 1 and answer.count(str(j)) == 1 and answer.count(str(k)) == 1 and answer.count(str(m)) == 1 and answer.count(str(0)) == 1 and answer.count(str(0)) == 1 and answer.count(str(0)) == 1 and answer.count(str(0)) == 1:\n                        continue\n                    else:\n                        continue\n                    return \"YES\"\n                continue\n    return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    input_str = stdin\n    n = input_n\n    arr = []\n    phone_dict = {}\n    for i in range(10):\n        arr.append(str(i))\n    for i in range(1, n + 1):\n        phone_dict[str(i)] = i\n    for i in range(10):\n        for j in range(10):\n            if str(i) + str(j) in phone_dict:\n                continue\n            if arr[i] + arr[j] in phone_dict:\n                continue\n            if arr[i] + arr[j] + arr[i] + arr[j] in phone_dict:\n                continue\n            if arr[i] + arr[j] + arr[i] + arr[j] + arr[i] + arr[j] in phone_dict:\n                continue\n            if arr[i] + arr[j] + arr[i] + arr[j] + arr[i] + arr[j] + arr[i] + arr[j] in phone_dict:\n                continue\n            else:\n                return 'NO'\n\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    phone_number = stdin\n    n_digits = len(phone_number)\n    table = [[0]*10 for i in range(n)]\n\n    for digit in range(n):\n        for key in range(10):\n            table[digit][key] = table[digit-1][key]\n        table[digit][phone_number[digit]] = 1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(10):\n                if table[j][k] and table[i][k]:\n                    return \"YES\"\n    return \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin\n    return stdin\n\nstdin = input()\nprint(solution(stdin))\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = stdin.rstrip()\n    if n > 9 or n < 1:\n        return \"NO\"\n    arr = list(stdin)\n    if len(arr)!= n:\n        return \"NO\"\n    if len(set(arr))!= n:\n        return \"NO\"\n    for i in range(1, len(arr)):\n        if arr[i - 1] == arr[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    phone_number = list(stdin.strip())\n\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    for m in range(l, 10):\n                        for o in range(m, 10):\n                            for p in range(o, 10):\n                                for q in range(p, 10):\n                                    for r in range(q, 10):\n                                        for s in range(r, 10):\n                                            string_to_check = str(i) + str(j) + str(k) + str(l) + str(m) + str(o) + str(\n                                                p) + str(q) + str(r) + str(s)\n                                            if string_to_check == phone_number:\n                                                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    phone_number = stdin[1]\n    f_keys = set()\n    for i in range(n):\n        if phone_number[i] not in f_keys:\n            f_keys.add(phone_number[i])\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin\n    digits = list(digits)\n    keyboard = {'1': 0, '2': 1, '3': 2, '4': 3, '5': 4, '6': 5, '7': 6, '8': 7, '9': 8, '0': 9}\n    n = len(digits)\n    if n < 3:\n        return 'NO'\n    #first we need to find the smallest pair (0,1) or (1,2)\n    if keyboard[digits[0]] > keyboard[digits[1]]:\n        small_pair = (keyboard[digits[0]], keyboard[digits[1]])\n    else:\n        small_pair = (keyboard[digits[1]], keyboard[digits[0]])\n    # then we need to find the biggest pair (0,9) or (9,8)\n    for i in range(1, n):\n        if keyboard[digits[i]] < small_pair[0]:\n            big_pair = (small_pair[0], keyboard[digits[i]])\n        elif keyboard[digits[i]] > small_pair[1]:\n            big_pair = (keyboard[digits[i]], small_pair[1])\n        else:\n            continue\n    #after we find the biggest pair, we can check the middle pair (2,3) or (3,4)\n    for j in range(1, n):\n        if keyboard[digits[j]] > big_pair[1]:\n            middle_pair = (big_pair[1], keyboard[digits[j]])\n        else:\n            middle_pair = (keyboard[digits[j]], big_pair[0])\n    #after we find the middle pair, we can check the last pair (4,5) or (5,6)\n    for k in range(1, n):\n        if keyboard[digits[k]] < middle_pair[0]:\n            last_pair = (middle_pair[0], keyboard[digits[k]])\n        else:\n            last_pair = (keyboard[digits[k]], middle_pair[1])\n    #here we can check the last pair of the input, is it equal to the middle pair?\n    if last_pair[1] == middle_pair[1]:\n        print('YES')\n    else:\n        print('NO')\n        \nsolution(\"2\")\nsolution(\"9\")\nsolution(\"3\")\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.split()))\n    sales = list(map(int, stdin.split()))\n    res = 0\n    sales.sort()\n    if n <= f:\n        return str(sales[-1] * 2)\n    for i in range(n):\n        if sales[i] + sales[i + 1] > sales[i + 2]:\n            res += sales[i] + sales[i + 1]\n        else:\n            res += sales[i + 2]\n    return str(res)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    n, f = map(int, stdin_list[0].split())\n    shop_plan = [[int(i) for i in stdin_list[i].split()] for i in range(1, n + 1)]\n\n    res = 0\n    while max(shop_plan[-1]) == 0:\n        shop_plan = [[int(i) for i in stdin_list[i].split()] for i in range(1, n + 1)]\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k_l = list(map(lambda x: int(x) for x in stdin.split()))\n    k_l.sort(key=lambda x: x, reverse=True)\n    res = 0\n    while k_l:\n        k = k_l.pop()\n        res += (k*k)\n        if k_l:\n            res += (k*2)\n    return str(res)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.strip().split()))\n    print(input)\n    return\n\nsolution(input)\n\nn, f = int(input()), int(input())\nsold_days = []\nfor i in range(n):\n    sold_days.append([int(s) for s in input().split()])\n\nsales_plan = [[0] * (i+1) for i in range(n+1)]\nfor i in range(1, n+1):\n    for j in range(1, i+1):\n        sales_plan[i][j] = sales_plan[i-1][j-1] + sold_days[i-1][j-1]\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f = (int(_) for _ in stdin.split())\n    x = [int(_) for _ in stdin.split()]\n    prod_num = 0\n    for i in range(n):\n        if x[i]!= 0:\n            prod_num += 1\n    return prod_num\n\nprint(solution(input()))"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, f = map(int, stdin[0].split())\n    k_n_list = list(map(int, stdin[1].split()))\n    n = n - f + 1\n    max_val = 0\n    for i in range(n):\n        max_val += k_n_list[i] * 2\n    return str(max_val)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k, l = [], []\n    for _ in range(n):\n        k.append(int(input()))\n        l.append(int(input()))\n    res = 0\n    sell_out = 0\n    for _ in range(f):\n        k_, l_ = map(int, input().split())\n        res += k_\n        sell_out += l_\n    # k_, l_ = map(int, input().split())\n    if sell_out >= k_:\n        res = res * 2\n    else:\n        res = res - k_ + 1 + l_\n    print(res)\n    return \"0\""
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, F = list(map(int, stdin.split()))\n    sales = [list(map(int, stdin.split())) for _ in range(N)]\n\n    best = 0\n    for day in range(N):\n        sales_day = []\n        for i in range(F):\n            sales_day.append(sales[day][i] * 2)\n        sales_day = sum(sales_day)\n        if sales_day > best:\n            best = sales_day\n    return str(best)"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\"\\n\")))\n    n, f = stdin[0], stdin[1]\n    sales = stdin[2:]\n    days = f\n    days_set = set(range(1, f + 1))\n    for day in range(0, n):\n        days_set = days_set | set(sales[day][0])\n    days_set = sorted(list(days_set))\n    m = len(days_set)\n    for day in range(0, m):\n        sales[day][0] = days_set.index(sales[day][0]) + 1\n        sales[day][1] = days_set.index(sales[day][1]) + 1\n    if f == 1:\n        return sum(sales[0])\n    #print(sales)\n    for day in range(0, n - 1):\n        #print(sales[day])\n        sales[day + 1][0] += sales[day][0]\n        sales[day + 1][1] += sales[day][1]\n        #print(sales[day + 1])\n    #print(sales)\n    return sum(sales[-1])\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min([k - 1, max(0, n - 1)]))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max((n-2) * (n-1) // 2 + n * (n-1) // 2 - n * (n-1) // 4, 0))"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k**2)"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n*(n-1)//2)"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 and k == 0:\n        return 0\n    return max((n * (n - 1) // 2) - (k * (k - 1) // 2), 0)"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max([0] + [n - i - 1 for i in range(1, n + 1) if k >= i]))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split(' '))\n    cows = [i for i in range(1, n + 1)]\n    return max(0, k, *(\n            [\n                (\n                    n,\n                    cows.index(n),\n                    cows.index(cows[n]),\n                    n + k - 2,\n                )\n                for n in range(1, n)\n            ]\n        )\n)"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return f\"{max(0, k - 1)}\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_cow = int(stdin.split()[0])\n    num_swaps = int(stdin.split()[1])\n    if num_cow == 1:\n        return str(0)\n    def swap_cows(a, b):\n        c = a\n        a = b\n        b = c\n        return a, b\n    def is_already_sorted(a, b):\n        return a < b\n\n    def swap(arr, a, b):\n        a, b = swap_cows(arr[a], arr[b])\n        arr[a], arr[b] = b, a\n        return a, b\n\n    def is_swap(arr, i, j):\n        return is_already_sorted(arr[i], arr[j])\n\n    cow = list(range(num_cow))\n    for i in range(num_cow - 1):\n        for j in range(i + 1, num_cow):\n            if is_swap(cow, i, j):\n                cow = swap(cow, i, j)\n                break\n\n    return str(cow[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def main(lst: list) -> bool:\n        return not any(not all(sorted(lst[:n + 1]) == lst[:n + 1]) for n in range(len(lst))) and \\\n               all(lst[:n + 1]) and \\\n               len(set(lst[:n + 1])) == len(lst[:n + 1]) and \\\n               sum(lst[:n + 1]) <= lst[n + 1]\n    n, m, k, l = map(int, stdin.split())\n    return \"1\" if main([n, m, k, l]) else \"-\""
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k, l = map(int, stdin.split())\n  coins = sorted(map(int, stdin.split()))\n  if len(coins) < k:\n    return -1\n  return len(coins) - max(len(coins) - k, len(coins) - k + 1)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    s = set()\n    cnt = 0\n    for _ in range(M):\n        s.add(int(input()))\n    for _ in range(K):\n        for i in range(1, N+1):\n            if i not in s:\n                cnt += 1\n    if cnt <= L:\n        return str(cnt)\n    return \"-\"\n\n\nprint(solution(input()))\n\n\n\n>>>\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if N <= K <= 10 ** 18 and M >= L >= 10 ** 18 and M > 0 and L > 0 and K < N and M % K == 0 and N % L == 0:\n        return str(K) if L > 1 else '1'\n    else:\n        return '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.strip().split())\n    if n * (m + 1) * k + min(k, n - 1) > l:\n        return -1\n    coins = sorted(list(range(n + 1)), reverse=True)\n    friends = [(i, int(i / n)) for i in range(1, n + 1)]\n    result = float('inf')\n    for friend in friends:\n        friend = friend[0]\n        if friend % 2 == 0:\n            friend -= 1\n        coins_for_friend = [coins.pop() for _ in range(friend)]\n        coins_for_friend = sorted(coins_for_friend, reverse=True)\n        friend_coins = friend * m\n        for i in range(1, m):\n            friend_coins += (friends[i][1] + 1) * coins_for_friend[i]\n            friend_coins += (friends[i][1] - 1) * coins_for_friend[i]\n        friend_coins += (friends[m][1] - 1) * coins_for_friend[m]\n        friend_coins += (friends[m][1] + 1) * coins_for_friend[m]\n        if friend_coins > l:\n            continue\n        result = min(result, friend_coins)\n    if result == float('inf'):\n        return -1\n    return str(result)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if N > 10**18 or K > 10**18 or M > 10**18 or L > 10**18 or not M:\n        return \"-1\"\n    coins = list(range(1, N+1))\n    friends = list(range(1, M+1))\n    friends.sort()\n    answer = float('inf')\n    for i in range(1, N+1):\n        if friends[0]!= i:\n            answer = min(answer, i+1)\n        for j in range(0, M):\n            if friends[j]!= i and friends[j] in coins:\n                answer = min(answer, j+1)\n                break\n    if answer == float('inf'):\n        answer = -1\n    return str(answer)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n\n    if m!= n or k!= n or k <= 0 or n <= 0 or l <= 0:\n        return '-1'\n\n    coins = set(range(1, n + 1))\n\n    cnt = 0\n\n    for _ in range(m):\n        new_coins = set(map(int, input().split()))\n\n        if len(new_coins) == k:\n            if len(coins - new_coins) == 0:\n                cnt += 1\n                coins = new_coins\n        else:\n            if len(coins - new_coins) < l:\n                cnt += 1\n                coins = new_coins\n\n    print(cnt)\n\n    return '1'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, K, L] = list(map(int, stdin.split()))\n    if(N < K + L):\n        print('-1')\n    else:\n        if(K < N):\n            print(K)\n        else:\n            print(N - K)\n\nsolution(input())\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if not 1 <= K <= N <= 10 ** 18:\n        return -1\n    if not 1 <= L <= 10 ** 18:\n        return -1\n    if not 1 <= M <= N:\n        return -1\n    coins = set(range(1, N + 1))\n    coins.remove(K)\n    ans = sum(coins)\n    for i in range(M):\n        if not 1 <= L <= 10 ** 18:\n            return -1\n        if L - K < 0:\n            return -1\n        ans = min(ans, L - K)\n        K += coins.pop()\n    return str(ans)\nprint(solution(input()))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    coins = sorted(list(set([1, 2, 3, 5, 10, 20, 50, 100, 200, 500, 1000])))\n    # print(coins)\n    if len(coins) < K:\n        return '-1'\n    def dfs(coins, idx, count):\n        if idx == len(coins):\n            return count >= K\n        for k in range(coins[idx], min(K, count+M) + 1):\n            if dfs(coins, idx+1, count+1):\n                return True\n        return False\n    if dfs(coins, 0, 0):\n        return '1'\n    return '-1'"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nimport math\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    words = stdin.split('\\n')\n    # cells = [['B' for _ in range(m)] for _ in range(n)]\n    cells = []\n    for word in words:\n        cells.append(word.strip())\n    start = 0\n    end = len(cells) - 1\n    left_up_corner = 1\n    right_up_corner = 1\n    right_down_corner = len(cells) - 1\n    left_down_corner = len(cells) - 1\n\n    while start <= end:\n        if left_up_corner + 1 == right_up_corner:\n            break\n        if cells[start] == 'B':\n            cells[start] = 'W'\n            left_up_corner += 1\n            start += 1\n            continue\n\n        if cells[end] == 'W':\n            cells[end] = 'B'\n            right_up_corner -= 1\n            end -= 1\n            continue\n\n        if left_up_corner + 1 == right_up_corner and cells[left_up_corner] == 'B':\n            cells[left_up_corner] = 'W'\n            left_up_corner += 1\n            start += 1\n            continue\n\n        if cells[left_up_corner] == 'W':\n            cells[left_up_corner] = 'B'\n            left_up_corner += 1\n            start += 1\n            continue\n\n        if left_up_corner == right_up_corner:\n            break\n        if left_up_corner + 1 == left_down_corner and cells[left_up_corner] == 'B':\n            cells[left_up_corner] = 'W'\n            left_up_corner += 1\n            start += 1\n            continue\n\n        if cells[left_up_corner] == 'W':\n            cells[left_up_corner] = 'B'\n            left_up_corner += 1\n            start += 1\n            continue\n\n        if left_up_corner == right_down_corner:\n            break\n        if left_up_corner + 1 == left_down_corner and cells[left_up_corner] == 'B':\n            cells[left_up_corner] = 'W'\n            left_up_corner += 1\n            start += 1\n            continue\n\n        if cells[left_up_corner] == 'W':\n            cells[left_up_corner] = 'B'\n            left_up_corner += 1\n            start += 1\n            continue\n\n    print(start)\n    return''.join(cells)\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return -1"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    cnt = 0\n    for i in range(x):\n        for j in range(y):\n            if i == 0 or i == x-1 or j == 0 or j == y-1:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    n_b = 0\n    n_w = 0\n    for _ in range(n):\n        row = stdin.splitlines()[n]\n        if row.count('B') > n_b:\n            n_b = row.count('B')\n        if row.count('W') > n_w:\n            n_w = row.count('W')\n    if n_w > n_b:\n        return str(n_w - n_b)\n    return '-1'\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    color = stdin.split()\n    answer = min(n, m)\n    if answer * n == n * m:\n        return \"yes\"\n    else:\n        return \"no\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    sheet_size, painting_size = map(int, stdin.split())\n    sheet_cells = list(stdin)\n    painting_side_length = painting_size ** 2 - sheet_cells.count('B')\n    if painting_side_length < sheet_cells.count('B'):\n        return str(-1)\n    if sheet_cells.count('B') <= painting_side_length:\n        return str(sheet_cells.count('B'))\n    painting_side_length = painting_side_length - sheet_cells.count('B')\n    painting_side_length_max = painting_size * painting_size - painting_size + 1\n    if painting_side_length > painting_side_length_max:\n        return str(-1)\n    if painting_side_length > sheet_cells.count('B'):\n        return str(sheet_cells.count('B'))\n    painting_side_length = painting_side_length - sheet_cells.count('B')\n    painting_side_length_max = painting_size * painting_size - painting_size + 1\n    if painting_side_length > painting_side_length_max:\n        return str(-1)\n    if painting_side_length > sheet_cells.count('B'):\n        return str(sheet_cells.count('B'))\n    if painting_side_length > sheet_cells.count('B'):\n        return str(sheet_cells.count('B'))\n    if painting_side_length < sheet_cells.count('B'):\n        return str(-1)\n    return str(-1)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in stdin[i * m: (i + 1) * m]] for i in range(n)]\n    return -1 if not all(is_square(row) for row in grid) else min_black_cells(grid)\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nstdin = \"\"\"5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW\"\"\""
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    dict_c = {\n        'B': 1,\n        'W': 0,\n    }\n    cells_list = [dict_c[stdin[i]] for i in range(n)]\n    if (n!= m):\n        print(-1)\n    else:\n        total_cells = m * n\n        ans = 0\n        while (total_cells - ans) > 0:\n            total_cells -= ans\n            ans += 1\n        print(ans)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n    y = list(map(int, stdin.split(\"\\n\")[2].split()))\n    if n == 1:\n        return \"Yes\" if sum(x) == sum(y) else \"No\"\n    else:\n        return \"Yes\" if sum(x) <= sum(y) else \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    first_list = list(map(int, stdin.split()[1].split()))\n    second_list = list(map(int, stdin.split()[2].split()))\n    first = sorted(first_list)\n    second = sorted(second_list)\n    if first == second:\n        return \"Yes\"\n    return \"No\"\n\n\nsolution(\"2 2 7\")\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, *a] = list(map(int, stdin.strip().split()))\n    a1 = a[::-1]\n    [n, *b] = list(map(int, stdin.strip().split()))\n    b1 = b[::-1]\n    [n, *c] = list(map(int, stdin.strip().split()))\n    c1 = c[::-1]\n    if len(set(a))!= len(a) or len(set(b))!= len(b) or len(set(c))!= len(c):\n        return \"No\"\n    if len(a)!= len(b) or len(a)!= len(c) or len(b)!= len(c):\n        return \"No\"\n    if len(set(a1))!= len(a1) or len(set(b1))!= len(b1) or len(set(c1))!= len(c1):\n        return \"No\"\n    if len(a1)!= len(b1) or len(a1)!= len(c1) or len(b1)!= len(c1):\n        return \"No\"\n    for i in range(len(a)):\n        if a[i]!= b[i] or b[i]!= c[i] or c[i]!= a[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split('\\n')[0])\n    x1, x2, x3, x4, x5 = stdin.split('\\n')[1].split()\n    x1 = int(x1)\n    x2 = int(x2)\n    x3 = int(x3)\n    x4 = int(x4)\n    x5 = int(x5)\n    x = [x1, x2, x3, x4, x5]\n    y1, y2, y3, y4, y5 = stdin.split('\\n')[2].split()\n    y1 = int(y1)\n    y2 = int(y2)\n    y3 = int(y3)\n    y4 = int(y4)\n    y5 = int(y5)\n    y = [y1, y2, y3, y4, y5]\n    if x == y:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    first: List[int] = list(map(int, stdin.split()[1].split()))\n    second: List[int] = list(map(int, stdin.split()[2].split()))\n    first.sort()\n    second.sort()\n    for i in range(n):\n        if first[i]!= second[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    y = list(map(int, stdin.split()[2].split()))\n    if not check(n, x) or not check(n, y):\n        return 'No'\n    for i in range(n):\n        x[i] = x[i] // 2\n        y[i] = y[i] // 2\n    return 'Yes' if check(n, x) and check(n, y) else 'No'\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    y = list(map(int, stdin.strip().split()))\n\n    x.sort()\n    y.sort()\n    if x == y:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \nstdin = \"\"\"3\n1 1 1\n1 0 1\n\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    x_dict = {i: 0 for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        x_dict[x_dict[i]] += 1\n    y_dict = {i: 0 for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        y_dict[y_dict[i]] += 1\n    if x_dict == y_dict:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_file = stdin\n    n = int(input_file.readline())\n    notes_first = input_file.readline().split()\n    notes_second = input_file.readline().split()\n    return \"Yes\" if (notes_first == notes_second) else \"No\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inlines = stdin.splitlines()\n    n = int(inlines[0])\n    x_n = list(map(int, inlines[1].split()))\n    y_n = list(map(int, inlines[2].split()))\n    piles = set()\n    for pile in range(n):\n        piles.add(pile + 1)\n    for i in range(len(x_n)):\n        if x_n[i] in piles and y_n[i] in piles:\n            return 'Yes'\n    return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    pizza_angle = 360\n    min_angle = 0\n    for a in arr:\n        if min_angle < abs(a - pizza_angle):\n            min_angle = abs(a - pizza_angle)\n        pizza_angle -= a\n    return min_angle\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return str(min(abs(a[i] - a[i-1]) for i in range(1, n)))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = float('inf')\n    for i in range(n - 1):\n        ans = min(ans, abs(a[i] - a[i + 1]))\n    print(ans)"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    angles = list(map(int, stdin.strip().split()))\n    min_diff = 0\n    for index in range(len(angles)):\n        diff = 0\n        for angle in angles[index+1:]:\n            diff += abs(angle-angles[index])\n        min_diff = min(min_diff, diff)\n    return str(min_diff)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    angles = list(map(int, stdin.split()))\n    angles.sort()\n    left = 0\n    right = 360\n    answer = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if is_ok(angles, mid):\n            answer = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    a = list(map(int, stdin.split()))\n    min_ = 360\n    for i in range(1, n):\n        angle_sum_2 = sum(a[i:i+2])\n        angle_sum_1 = 360 - angle_sum_2\n        if min_ > abs(angle_sum_2 - angle_sum_1):\n            min_ = abs(angle_sum_2 - angle_sum_1)\n    return str(min_)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')\n    a = list(map(int, a))\n    l = list()\n    for i in range(0, n):\n        if i == 0:\n            s = a[i]\n        else:\n            s = s + a[i]\n        l.append(s)\n    s = 0\n    for i in range(0, n):\n        s = s + l[i]\n    print(s)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n.. code:: python\n\n    stdin = \"\"\"\n    4\n    90 90 90 90\n    \"\"\"\n    # stdin = \"\"\"\n    # 3\n    # 100 100 160\n    # \"\"\"\n    # stdin = \"\"\"\n    # 1\n    # 360\n    # \"\"\"\n    print(solution(stdin))\n\n>>>\n    \"\"\"\n    \n    stdin = \"\"\"\n    4\n    170 30 150 10\n    \"\"\"\n    # stdin = \"\"\"\n    # 3\n    # 100 100 160\n    # \"\"\"\n    # stdin = \"\"\"\n    # 1\n    # 360\n    # \"\"\"\n    print(solution(stdin))\n\n>>>\n    \"\"\"\n\nInput\n4\n90 90 90 90\n\nOutput\n0\n\nInput\n3\n100 100 160\n\nOutput\n40\n\nInput\n1\n360\n\nOutput\n360\n\nInput\n4\n170 30 150 10\n\nOutput\n0\n\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    start = 0\n    end = n - 1\n    min_diff = abs(a[start] - a[end])\n    while start < end:\n        diff = abs(a[start] + a[end] - (a[start] + a[end]))\n        min_diff = min(min_diff, diff)\n\n        if a[start] + a[end] > a[end] + a[start]:\n            end -= 1\n        else:\n            start += 1\n\n    return str(min_diff)"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    def count(n, m):\n        def helper(i, j, c):\n            if i == n or j == m:\n                return 1\n            if (i, j) in cache:\n                return cache[(i, j)]\n            ret = 0\n            for k in range(n):\n                if k == i:\n                    continue\n                for l in range(m):\n                    if l == j:\n                        continue\n                    if (k, l) in cache:\n                        continue\n                    ret += helper(i, l, c)\n            cache[(i, j)] = ret\n            return ret\n        cache = {}\n        return helper(0, 0, 0)\n    return str(count(n, m))"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(pow(2, n, m)))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    return str(bin(count(1, n, m)).count(\"1\"))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return f\"{((n*(n-1))//2) % 1000000007}\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 3\n   ... 2 2\n   ... ''')\n    7\n    >>> solution('''2 2\n   ... 2 2\n   ... ''')\n    9\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return (1 + ((1 + 7) ** n) - 1) % (10 ** 9 + 7)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    if n == m:\n        return 1\n    a = n+1\n    b = m+1\n    c = n\n    d = m\n    e = 1\n    f = 1\n    g = 2\n    h = 2\n    i = 3\n    j = 3\n    k = 3\n    l = 2\n    z = 2\n    q = 1\n    a1 = (a+b)//3\n    a2 = (a+e)//3\n    a3 = (a+i)//3\n    a4 = (a+j)//3\n    a5 = (a+k)//3\n    a6 = (a+l)//3\n    a7 = (a+z)//3\n    b1 = (b+e)//3\n    b2 = (b+i)//3\n    b3 = (b+j)//3\n    b4 = (b+k)//3\n    b5 = (b+l)//3\n    b6 = (b+z)//3\n    c1 = (c+e)//3\n    c2 = (c+i)//3\n    c3 = (c+j)//3\n    c4 = (c+k)//3\n    c5 = (c+l)//3\n    c6 = (c+z)//3\n    d1 = (d+e)//3\n    d2 = (d+i)//3\n    d3 = (d+j)//3\n    d4 = (d+k)//3\n    d5 = (d+l)//3\n    d6 = (d+z)//3\n    e1 = (e+i)//3\n    e2 = (e+j)//3\n    e3 = (e+k)//3\n    e4 = (e+l)//3\n    e5 = (e+z)//3\n    f1 = (f+i)//3\n    f2 = (f+j)//3\n    f3 = (f+k)//3\n    f4 = (f+l)//3\n    f5 = (f+z)//3\n    g1 = (g+i)//3\n    g2 = (g+j)//3\n    g3 = (g+k)//3\n    g4 = (g+l)//3\n    g5 = (g+z)//3\n    h1 = (h+i)//3\n    h2 = (h+j)//3\n    h3 = (h+k)//3\n    h4 = (h+l)//3\n    h5 = (h+z)//3\n    i1 = (i+j)//3\n    i2 = (i+k)//3\n    i3 = (i+l)//3\n    i4 = (i+z)//3\n    i5 = (j+k)//3\n    i6 = (j+l)//3\n    i7 = (j+z)//3\n    j1 = (j+k)//3\n    j2 = (j+l)//3\n    j3 = (j+z)//3\n    j4 = (k+l)//3\n    j5 = (k+z)//3\n    j6 = (l+z)//3\n    k1 = (k+l)//3\n    k2 = (k+z)//3\n    k3 = (l+z)//3\n    l1 = (l+z)//3\n    z1 = (z+z)//3\n    z2 = (z+l)//3\n    z3 = (z+k)//3\n    z4 = (z+i)//3\n    z5 = (z+j)//3\n    z6 = (z+g)//3\n    z7 = (z+h)//3\n    z8 = (z+e)//3\n    z9 = (z+f)//3\n    z10 = (z+d)//3\n    z11 = (z+c)//3\n    z12 = (z+b)//3\n    z13 = (z+a)//3\n    z14 = (z+m)//3\n    q1 = (q+z)//3\n    q2 = (q+l)//3\n    q3 = (q+k)//3\n    q4 = (q+i)//3\n    q5 = (q+j)//3\n    q6 = (q+m)//3\n    q7 = (q+n)//3\n    zq1 = (zq+z)//3\n    zq2 = (zq+l)//3\n    zq3 = (zq+k)//3\n    zq4 = (zq+i)//3\n    zq5 = (zq+j)//3\n    zq6 = (zq+m)//3\n    zq7 = (zq+n)//3\n    zq8 = (zq+q)//3\n    zq9 = (zq+r)//3\n    zq10 = (zq+s)//3\n    zq11 = (zq+t)//3\n    zq12 = (zq+u)//3\n    zq13 = (zq+v)//3\n    zq14 = (zq+w)//3\n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(factorial(n) / (factorial(n - 2) * factorial(n - 1))))\n\ndef"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return 1"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    f = [[] for i in range(n)]\n    for i in range(n):\n        f[i] = list(map(int, input().split()))\n    def count(a, b, c):\n        if a == n:\n            return 1\n        res = 0\n        for i in range(m):\n            if b[i] == c:\n                continue\n            else:\n                if count(a+1, b+[c], c)!= 0:\n                    res += count(a+1, b+[c], c)\n        return res\n    return count(0, [], -1)"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 3\n   ... 2 2\n   ... ''')\n    '7'\n    >>> solution('''1 2\n   ... 2''')\n    '9'\n    >>> solution('''3 3\n   ... 2 2\n   ... ''')\n    '10'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    presents = n * (n-1) / 2\n    boxes = m * (m-1) / 2\n    return str(presents + boxes)"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split())\n    if c < a+b and a**2 + b**2 == c**2:\n        return str(a) +'' + str(b) +'' + str(c)\n    else:\n        return '-1'"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(n, 1, -1):\n        k = n - m\n        if 2 * m + k == n:\n            return \"{} {}\".format(m, k)\n    return \"-\"\n    \n\n-----Solutions-----\n\nThe problem is easy to solve with the same logic. We can calculate the length of hypotenuse and hypotenuse and check if we have the Pythagorean Triple or not.\n\nThe same logic can be applied to the other two sides of the right triangle. We can find the value of hypotenuse by using the Pythagorean theorem. So, we can just find out the numbers n and m in the right triangle such that the formula is n\u00b2 \u2212 m\u00b2 = n\u00b2 + m\u00b2. For m to be equal to n, and n to be equal to m. This is also true for the hypotenuse. And we can find the value of hypotenuse by square rooting the number. Then we can check whether we have a Pythagorean Triple or not.\n\n\n\n'''\n\nfrom math import sqrt\nfrom math import pow\n\nn = int(input())\n\nhyp = sqrt(pow(n, 2) + n)\nhyp = int(hyp)"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"4 5\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"1 2 3\""
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    \n    if n > 1000 or n < 1:\n        return -1\n    \n    for a in range(n, 0, -1):\n        for b in range(n, 0, -1):\n            c = (a**2 + b**2)**0.5\n            if c == int(c):\n                result.append(a)\n                result.append(b)\n                result.append(int(c))\n                result.sort()\n                if len(result) == 3:\n                    return''.join(map(str, result))\n                else:\n                    return '-1'\n\nsolution('4')\n\nsolution('6')\n\nsolution('17')\n\n\n\"\"\"\n\nfrom math import sqrt\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return -1\n    for i in range(2, 11):\n        if n % i == 0:\n            return -1\n    pythagorean_triples: list[tuple[int]] = []\n    for i in range(1, n // 2 + 1):\n        for j in range(i, n - i + 1):\n            if i * i + j * j == n - i:\n                if (i, j, n - i) not in pythagorean_triples:\n                    pythagorean_triples.append((i, j, n - i))\n    return str(pythagorean_triples[0][0]) + \" \" + str(pythagorean_triples[0][1]) + \"\\n\" + str(pythagorean_triples[0][2])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    k = 0\n\n    for m in range(1, n // 2 + 1):\n        for k in range(1, n // 2 + 1):\n            if n == m + k:\n                return str(m) +'' + str(k)\n\n    return '-1'\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    1 1 1\n    1 1 1\n    1 1 1\n    '''\n    N = int(stdin)\n    \n    for i in range(3, N + 1):\n        for j in range(i, N + 1):\n            if (i + j) == N and i**2 + j**2 == N:\n                return '{} {}'.format(i, j)\n            elif (i + j)**2 == N:\n                return '{} {}'.format(i, j)\n            elif (i + j)**2 < N:\n                continue\n            else:\n                break\n    return '-1'\n    \n    \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            a = n // i\n            if a ** 2 == n:\n                return str(a) + \" \" + str(i) + \" \" + str(n)\n            elif a ** 2 < n:\n                if n % (a ** 2) == 0:\n                    return str(a) + \" \" + str(i) + \" \" + str(n)\n    return str(-1)\n\nsolution(\"2\")\n\n\n-----Idea-----\n\nThis is a very interesting problem.\n\nWe can represent a triangle as an array of triplets, that means each element of array is a triplet.\n\nWe can represent a triangle as a list of triplets, that means each element of list is a triplet.\n\nWe can see that each triplet can be represented by a number and it can be equal to the product of two numbers that is the sum of this two numbers.\n\nWe can find the product of two numbers, that is their sum, using modulo operation.\n\nTo find the product of two numbers, we can simply use the formula: product = (num1 * num2) % modulus.\n\n\n-----Complexity-----\n\nThe time complexity of the algorithm is O(n log(n)).\n\nThe additional space complexity is O(1).\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    triple = []\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            for k in range(j + 1, len(data)):\n                if int(data[i]) + int(data[j]) + int(data[k]) == int(data[i]):\n                    triple.append([int(data[i]), int(data[j]), int(data[k])])\n                    triple.sort()\n    if not triple:\n        return \"No such triple\"\n    return f\"{triple[0][0]} {triple[0][1]} {triple[0][2]}\"\n\n\n\n-----Solutions-----\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    n, k = [int(i) for i in stdin.split(\" \")]\n    res = False\n    for i in range(1, k + 1):\n        for j in range(i + 1, k + 1):\n            if n % i == 0 and n % j == 0:\n                res = True\n                break\n        if res:\n            break\n    return \"Yes\" if res else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    for i in range(1, k+1):\n        if i % n == 0:\n            if i!= n:\n                return 'No'\n            continue\n        if i!= n and i!= n+1:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    a = set(range(1, k + 1))\n    b = set(range(1, k + 1))\n    for i in range(1, k + 1):\n        if i in a:\n            a -= {i}\n            b -= {i}\n        else:\n            if i not in b:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return 'No'\n    for i in range(2, n + 1):\n        for j in range(i + 1, k + 1):\n            if n % i == 0 and n % j == 0:\n                return 'No'\n    return 'Yes'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n % k)!= 0:\n        return 'No'\n    for i in range(1, k):\n        if n % i!= 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 == 0 and n % k == 0:\n        return 'No'\n    else:\n        return 'Yes'\n\"\"\"\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    i = 2\n    while i <= k:\n        if n % i == 0:\n            return \"No\"\n        i += 1\n    return \"Yes\"\n\n\nstdin = \"\"\"5 4\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k):\n        if n % i == 0:\n            if (n + i) % i!= 0:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    remainders = [(n//i)%k for i in range(1,k+1)]\n    if len(set(remainders)) == k:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return 'Yes' if len(set([n % i for i in range(1, k + 1)])) == k else 'No'\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    print(f\"{a<b}\")\n\nsolution(input())"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    if a < b:\n        return '<'\n    elif a > b:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a < b:\n        return '<'\n    if a > b:\n        return '>'\n    return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return '>'\n    elif a < b:\n        return '<'\n    else:\n        return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    if a < b:\n        return \"<\"\n    if a > b:\n        return \">\"\n    if a == b:\n        return \"=\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if int(a) < int(b):\n        return \"<\"\n    elif int(a) > int(b):\n        return \">\"\n    else:\n        return \"=\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[0]\n    b = stdin.split(\"\\n\")[1]\n    if a < b:\n        print(f\"<\")\n    if a > b:\n        print(f\">\")\n    if a == b:\n        print(f\"=\")\n\nsolution(input())\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a < b:\n        return '<'\n    if a > b:\n        return '>'\n    if a == b:\n        return '='\n    \nprint(solution(input()))"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    # case 1: all pieces are colored white, return 1\n    if sum(colors) == 0:\n        return 1\n    # case 2: number of pieces is odd, return 0\n    if n & 1:\n        return 0\n    # case 3: no piece is colored white, return 0\n    if sum(colors) == 1:\n        return 0\n    # case 4: no pieces are colored white, return 1\n    if sum(colors) == -1:\n        return 1\n    # case 5: all pieces are colored white, return 1\n    if sum(colors) == 1:\n        return 1\n\n    def dfs(i, j, score):\n        if i == j:\n            return score\n        color = colors[i]\n        if color == 0:\n            return dfs(i + 1, j, score)\n        if color == 1:\n            return dfs(i + 1, j, score + 1)\n        if color == -1:\n            return dfs(i + 1, j, score - 1)\n\n    return dfs(0, n - 1, 0) % 1000000007\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, p = [int(x) for x in stdin.split(' ')]\n    c = list(map(int, stdin.split(' ')))\n\n    # create dictionaries for the colored pieces\n    piece_colors = defaultdict(int)\n    for i in range(n):\n        piece_colors[i] = c[i]\n\n    # create dictionaries for the arrows\n    # the first value is the starting color, the second is the ending color\n    arrows = defaultdict(int)\n    for i in range(n):\n        arrows[i] = (c[i], c[i + 1])\n\n    # create dictionaries for the starting pieces\n    # the first value is the starting color, the second is the ending color\n    pieces_from = defaultdict(int)\n    for i in range(n):\n        pieces_from[i] = (c[i], c[i + 1])\n\n    # create dictionaries for the ending pieces\n    # the first value is the starting color, the second is the ending color\n    pieces_to = defaultdict(int)\n    for i in range(n):\n        pieces_to[i] = (c[i], c[i + 1])\n\n    # create the graph\n    # the graph is represented by adjacency list\n    graph = defaultdict(list)\n\n    # build the graph\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arrows[i][0] == 0 and pieces_from[i][0] == 0 and pieces_to[i][1] == 0 and pieces_from[j][1] == 0:\n                graph[i].append(j)\n                graph[j].append(i)\n\n    # create the total number of paths\n    # the path is represented by a list of indices\n    total_paths = []\n\n    # find all the paths from any starting node\n    def find_paths(current_node, path):\n        path.append(current_node)\n        # if we reached the end\n        if pieces_from[current_node][0] == 0 and pieces_to[current_node][1] == 0:\n            total_paths.append(path)\n            return\n        for adjacent in graph[current_node]:\n            find_paths(adjacent, path)\n\n    # find all the starting nodes\n    for i in range(n):\n        find_paths(i, [])\n\n    # calculate the number of paths\n    paths_count = 0\n    for path in total_paths:\n        if sum([pieces_from[node][0] for node in path]) % 2 == p and sum([pieces_to[node][1] for node in path]) % 2 == p:\n            paths_count += 1\n    return paths_count\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, p = list(map(int, stdin[0].split()))\n    c = list(map(int, stdin[1].split()))\n    w = n - 1\n    s = w * (w - 1) // 2\n    s = (s + s) % (10 ** 9 + 7)\n    if p == 0:\n        for i in range(n):\n            if c[i] == 0:\n                s = s - (w - i)\n        s = s % (10 ** 9 + 7)\n    elif p == 1:\n        for i in range(n):\n            if c[i] == 1:\n                s = s - (w - i)\n        s = s % (10 ** 9 + 7)\n    print(s)\n    return str(s)\n\n\n\"\"\""
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n\n    score = 0\n    for color in range(2 ** n):\n        valid_pieces = set()\n        for i in range(n):\n            if (color >> i) & 1:\n                valid_pieces.add(i)\n\n        score += len(valid_pieces)\n\n        if p == 0:\n            for i in range(n - 1):\n                if (color >> i) & 1:\n                    if color >> (i + 1) & 1:\n                        break\n                    if (color >> (i + 1)) & 1:\n                        continue\n                    valid_pieces.add(i)\n\n        else:\n            for i in range(n - 1):\n                if (color >> i) & 1:\n                    if (color >> (i + 1)) & 1:\n                        break\n                    if color >> (i + 1) & 1:\n                        continue\n                    valid_pieces.add(i)\n\n        score += len(valid_pieces)\n\n    return str(score % (10 ** 9 + 7))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors = [0] + colors\n    # print(colors)\n    row = 1\n    while True:\n        color_sum = sum(colors)\n        row_left = row - 1\n        # print(row, row_left, color_sum)\n        if color_sum < p:\n            row += 1\n            # print(row, row_left, color_sum)\n        elif color_sum == p:\n            # print(row, row_left, color_sum)\n            return str(row)\n        else:\n            color_sum -= colors[row_left]\n            colors[row_left] = 0\n            row += 1\n            # print(row, row_left, color_sum)\n            # print(colors)\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n <= 1 or p <= 0 or p > 1:\n        raise Exception(f\"invalid input: {n} {p}\")\n\n    # even, odd, even\n    mod = 10 ** 9 + 7\n    even = 0\n    odd = 1\n    \n    # count #valid ways, from 1 to n\n    for i in range(2, n + 1):\n        even += odd * (2 * i - 2) // 2\n        odd *= i\n    \n    # even, odd, odd\n    for i in range(1, n + 1):\n        odd += even * (2 * i - 1) // 2\n        even *= i\n    \n    return (even + odd) % mod\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    t = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i):\n            if c[i] == 0 and c[j] == 1:\n                t[i].append(j)\n            if c[i] == 1 and c[j] == 0:\n                t[i].append(j)\n            if c[i] == 0 and c[j] == 0:\n                if j + 1 < i and c[j + 1] == 1:\n                    t[i].append(j)\n        if c[i] == 1:\n            t[i].append(i)\n    # print(t)\n    ans = 0\n    for row in t:\n        if len(row) % 2 == p:\n            ans += 1\n    return str(ans)\n\n\nstdin = '3 1\\n-1 0 1'\nprint(solution(stdin))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return str(int(pow(2, n, 10 ** 9 + 7)) % (10 ** 9 + 7))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, p = map(int, lines[0].split())\n    colors = map(int, lines[1].split())\n\n    def dfs(color, paths, depth):\n        if color == 0:\n            return paths[depth] + 1\n        if color == 1:\n            return paths[depth]\n        if color == -1:\n            return paths[depth]\n        max_odd = 0\n        max_even = 0\n        for i in range(n):\n            cur = dfs(colors[i], paths, depth)\n            if i % 2 == 0:\n                max_even = max(max_even, cur)\n            else:\n                max_odd = max(max_odd, cur)\n        return paths[depth] + max_even + max_odd\n\n    return str(dfs(0, [0] * n, 0))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n1 1 3 4\n    3\n    2 1 2\n    2\n    3\n    1\n    \n    0\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0\n    1\n    1\n    1\n    1\n    1\n    0"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count(x: int, y: int, z: int, n: int) -> int:\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        res = 0\n        for i in range(1, 4):\n            res += count(x, y, z, n - (i - 1) * (i - 1))\n        return res\n    print(count(1, 1, 1, int(stdin.strip())))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if a + b + c <= n:\n        return \"1\"\n\n    k = n + a + b + c - n * 4\n    if k % 4 == 0:\n        return \"1\"\n    elif k % 4 == 1:\n        return str(a + 1)\n    elif k % 4 == 2:\n        return str(a + 1) + str(b + 1)\n    else:\n        return str(a + 1) + str(b + 1) + str(c + 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if (n + a + b + c) % 4!= 0:\n        return \"0\"\n    else:\n        return str(min(((n + a) // 4, ((n + a + b) // 2) // 4, ((n + a + b + c) // 3) // 4, (n + a + b + c) // 4)))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    input = sys.stdin.readline\n    n, a, b, c = list(map(int, input().strip().split()))\n\n    def pack_calc(pack_type: int, n: int) -> int:\n        if pack_type == 1:\n            return n // a\n        if pack_type == 2:\n            return n // b\n        if pack_type == 3:\n            return n // c\n    \n    total_copybooks = pack_calc(n, n) + pack_calc(a, n) + pack_calc(b, n) + pack_calc(c, n)\n\n    return total_copybooks"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    n = n = (a * b * c) // 4\n    k = k = (n + a) // 4\n    print(k)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(int(n + a + b + c) // 4)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    answer = n + min(a, b, c)\n    return str(answer)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 3 4\n   ... 1 1 3\n   ... '''.strip())\n    3\n    >>> solution('''\n   ... 6 2 1 1\n   ... 1\n   ... 1\n   ... '''.strip())\n    1\n    >>> solution('''\n   ... 4 4 4 4\n   ... 1\n   ... 1\n   ... 1\n   ... '''.strip())\n    0\n    \"\"\"\n    # stdin = input()\n    n, a, b, c = map(int, stdin.split())\n    return \"{}\".format(int(a * (a + 1) / 2) + int(b * (b + 1) / 2) + int(c * (c + 1) / 2))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    n += a + b + c\n    total = n * 4\n    rubles = total % 4\n    if rubles == 0:\n        return str(total)\n    else:\n        return str(rubles)\n\nprint(solution(input()))\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    edges = {i: set() for i in range(n)}\n\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges[u].add(v)\n\n    dfs_visited = set()\n\n    def dfs(v):\n        if v in dfs_visited:\n            return False\n        dfs_visited.add(v)\n        for next_v in edges[v]:\n            if next_v not in dfs_visited:\n                if not dfs(next_v):\n                    return False\n        return True\n\n    for v in range(n):\n        if v not in dfs_visited:\n            if not dfs(v):\n                return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = list(map(lambda i: int(i) - 1, stdin.split()[1:]))\n    visited = set()\n    visited.add(0)\n    visited.add(1)\n    parent = [-1] * n\n    count = 0\n    while len(visited) < n:\n        for i in range(0, len(edges)):\n            if edges[i] not in visited:\n                visited.add(edges[i])\n                parent[edges[i]] = i\n                if parent[edges[i]]!= -1:\n                    count += 1\n        visited.clear()\n        visited.add(edges[parent[0]])\n        parent.pop(0)\n    if count == m:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = set()\n    q = []\n    for i in graph:\n        visited.add(i)\n        q.append(i)\n\n    while len(q) > 0:\n        curr = q.pop()\n        for neighbor in graph[curr]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                q.append(neighbor)\n\n    if len(visited) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = stdin[0], int(stdin[1])\n    graph = {}\n\n    for _ in range(m):\n        u, v = stdin[2], stdin[3]\n        if u not in graph:\n            graph[u] = [v]\n        else:\n            graph[u].append(v)\n\n        if v not in graph:\n            graph[v] = [u]\n        else:\n            graph[v].append(u)\n\n    visited = set()\n    visited.add(n)\n\n    while True:\n        for v in graph:\n            for edge in graph[v]:\n                if edge not in visited:\n                    visited.add(edge)\n                    break\n\n        if len(visited) == len(graph):\n            return \"YES\"\n\n        for v in graph:\n            if v in visited:\n                graph[v].remove(v)\n\n\nsolution(input())\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        if v in graph:\n            graph[v].add(u)\n        else:\n            graph[v] = {u}\n    # print(graph)\n    # for v in graph.keys():\n    #     print(v, graph[v])\n    if any(len(graph[v]) > 1 for v in graph.keys()):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n)]\n\n    for i in range(m):\n        u, v = map(int, stdin.strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = set()\n\n    def dfs(vertex: int) -> bool:\n        if vertex in visited:\n            return False\n        visited.add(vertex)\n\n        for adj in graph[vertex]:\n            if adj not in visited:\n                if dfs(adj):\n                    return True\n            else:\n                return False\n\n        return True\n\n    for vertex in range(n):\n        if dfs(vertex):\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    to_visit = set()\n    for v in graph:\n        if len(graph[v]) == 0:\n            visited.add(v)\n            to_visit.add(v)\n    while len(to_visit) > 0:\n        node = to_visit.pop()\n        visited.add(node)\n        if len(graph[node]) == 0:\n            continue\n        for u in graph[node]:\n            if u not in visited:\n                to_visit.add(u)\n    for v in graph:\n        if v in visited:\n            if len(graph[v]) > 0:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    G = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        u, v = map(int, stdin.strip().split())\n        G[u].append(v)\n        G[v].append(u)\n    visited = [0 for _ in range(N + 1)]\n    cnt = 0\n    for u in range(1, N + 1):\n        if visited[u] == 0:\n            visited[u] = 1\n            stack = [u]\n            while stack:\n                node = stack.pop()\n                for i in G[node]:\n                    if visited[i] == 0:\n                        stack.append(i)\n                        visited[i] = 1\n                    cnt += 1\n    if cnt > M:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min([int((n * (n - 1)) / 2 + 1)]))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    assert n == m\n    stdin = list(map(int, stdin.strip().split()))\n    ans = 0\n    for i in range(len(stdin)):\n        s = stdin[i]\n        if i - s + 1 >= 0:\n            ans += s - i\n        if s - i + 1 >= 0:\n            ans += s + 1 - i\n    return str(ans)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    # Find integer positions from 1 to m inclusive\n    for i in range(1, m + 1):\n        # Find all integer positions from i to m inclusive that are covered by at least one antenna\n        for j in range(i, m + 1):\n            if (j + i) <= m:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  scopes = []\n  for i in range(n):\n    scope = int(stdin.split()[i])\n    scopes.append(scope)\n  min_coins = min(scopes)\n  return str(min_coins)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    first = n, m\n    for _ in range(n):\n        x, s = map(int, stdin.split())\n        if x > first[1]:\n            first = x, s\n    return sum(i+s if i in range(first[0], first[1]) else 0 for i, s in enumerate(range(1, first[1] + 1)))\n\nfor _ in range(input()):\n    print(solution(input()))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    xs = [(i, int(x)) for i, x in enumerate(stdin.split())]\n\n    xs.sort(key=lambda x: x[1])\n\n    total = 0\n\n    for i, x in enumerate(xs):\n        if i == 0 or x[1] - xs[i - 1][1] <= 0:\n            total += 1\n\n    return str(total)\n\nprint(solution(input()))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  min_cost = 0\n  for x, s in map(int, stdin.split()):\n    min_cost += (x - s + 1) // 2\n  print(min_cost)\n  return\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cnt = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= 1:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    for x, s in zip(*(map(int, stdin.split()))):\n        if s < m:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every good subset, calculate its maximum possible weight of items.\n    \"\"\"\n    W, items = int(stdin), sorted(map(int, stdin.split()))\n\n    res = 0\n    for i in range(len(items)):\n        res = max(res, W - items[i] + solution(f\"{i + 1} {items[i]} {items[i + 1]} {items[i + 2]} {items[i + 3]} {items[i + 4]} {items[i + 5]} {items[i + 6]} {items[i + 7]}\"))\n    return res\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1:]\n    S.sort()\n    good = 0\n    for j in range(N):\n        good += (j+1)*S[j]\n    return good\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    possible_set = sorted([[int(x) for x in stdin.split(' ')]], reverse=True)\n    weights = 0\n    for i in range(n + 1):\n        weights += possible_set[i][0]\n    return str(weights)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    items = [int(i) for i in stdin.split()]\n    W = items[0]\n\n    total = 0\n\n    for i in items:\n        total += i\n\n    # If the total exceeds the max weight, there is nothing left\n    if total > W:\n        return 0\n\n    # Create a counter\n    counter = 0\n    # Loop through the items and see if they are the best\n    for i in range(8):\n        if items[i] > 0:\n            counter += 1\n\n    # If we have more items than the max weight, we need to remove items\n    if counter > W:\n        for i in range(8):\n            if items[i] > 0:\n                items[i] -= 1\n\n    # Remove the leftover items\n    total = 0\n    for i in range(8):\n        total += items[i]\n\n    # Return the maximum possible weight\n    return total"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w = int(stdin)\n    c = stdin.split()\n    cnt = {}\n    for i in range(len(c)):\n        if c[i] in cnt:\n            cnt[c[i]] += 1\n        else:\n            cnt[c[i]] = 1\n    max_w = w\n    for key, val in cnt.items():\n        if val > 0:\n            if max_w >= key:\n                max_w += key\n            else:\n                max_w = key\n    return str(max_w)"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    weight = int(stdin)\n    n = int(stdin)\n    items = stdin.split(\" \")\n    \n    items = list(map(int, items))\n    \n    weight_so_far = 0\n    \n    max_weight = 0\n    \n    for i in items:\n        weight_so_far += i\n        \n        if weight_so_far <= weight:\n            max_weight = max(max_weight, weight_so_far)\n            \n        else:\n            weight_so_far = i\n            \n    return str(max_weight)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return\n    '''\n    # need to sanitize input and then check if the sum of the list of weights is less than the upper bound.\n    \n    # if it is, we need to return that solution\n    # if the sum of the list of weights is greater than the upper bound, then return the upper bound\n\n    # if the sum of the list of weights is less than the upper bound, then return the upper bound\n    # if the sum of the list of weights is greater than the upper bound, then return the sum of the list of weights."
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    items = set(map(int, stdin.split()))\n    i = 0\n    while True:\n        if sum(i if j >= i else 0 for j in items) <= W:\n            return sum(i if j >= i else 0 for j in items)\n        else:\n            i += 1\nsolution(input())"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    good = stdin.split()\n    print(max(good) - min(good))\n    return 0\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    weight = int(stdin)\n    items = stdin.split(\" \")\n    good = []\n    for i in range(len(items)):\n        good.append(int(items[i]))\n    good.sort(reverse=True)\n    def possible(items, weight):\n        if weight == 0:\n            return 0\n        if weight < 0:\n            return 0\n        if sum(items) <= weight:\n            return sum(items)\n        s = 0\n        for i in range(len(items)):\n            if items[i] <= weight:\n                s += items[i]\n                weight -= items[i]\n                items[i] = 0\n                if s == sum(items):\n                    break\n        return s\n    def dfs(weight):\n        if weight == 0:\n            return possible(good, weight)\n        if weight < 0:\n            return 0\n        return max(dfs(weight - i) + possible(good, weight - i) for i in range(1, len(good) + 1))\n    return str(dfs(weight))"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def buy_bottles(costs, n, L):\n        # Calculates the number of bottles of each type that can be bought at most\n        bottles_of_each_type = [0] * n\n        bottles_of_each_type[0] = 1\n\n        for i in range(1, n):\n            bottles_of_each_type[i] = bottles_of_each_type[i - 1] + bottles_of_each_type[i - 2]\n\n        def try_combination(bottles_of_each_type, costs, L):\n            # Try to buy a combination of bottles_of_each_type\n            number_of_bottles = 0\n            number_of_bottles += bottles_of_each_type[0]\n\n            for i in range(1, n):\n                if bottles_of_each_type[i] > L:\n                    return\n\n                number_of_bottles += max(bottles_of_each_type[i] - 1, 0) * costs[i]\n\n            if number_of_bottles >= L:\n                return number_of_bottles\n\n        for i in range(1, n):\n            if bottles_of_each_type[i] <= L:\n                # Try to buy a single bottle\n                number_of_bottles = try_combination(bottles_of_each_type, costs, L)\n                if number_of_bottles is not None:\n                    return number_of_bottles\n\n                # Try to buy two bottles of type i\n                number_of_bottles = try_combination(bottles_of_each_type, costs, L - bottles_of_each_type[i])\n                if number_of_bottles is not None:\n                    return number_of_bottles\n\n        # All bottles can't be bought\n        return None\n\n    costs, n, L = [int(x) for x in stdin.split()]\n    return str(buy_bottles(costs, n, L))"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    x = 0\n    for i in range(1, 30):\n        # print(2**i, 2**(i + 1) - 1)\n        x += n * (2**i - 1)\n    return str(x)"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort(reverse=True)\n    count = 0\n    curr_index = 0\n    while count < L:\n        curr_cost = 2**c[curr_index] - 1\n        if curr_cost > L:\n            break\n        count += curr_cost\n        curr_index += 1\n    return str(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    if max(c) > 10 ** 9:\n        return -1\n    else:\n        d = {}\n        for i in range(n):\n            if c[i] in d:\n                d[c[i]] += 2 ** i\n            else:\n                d[c[i]] = 2 ** i\n        s = 0\n        for i in range(n):\n            s += d[c[i]]\n            if s > l:\n                return -1\n        return s\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, L, _ = stdin.split()\n    n = int(n)\n    L = int(L)\n\n    c = list(map(int, _.split()))\n    #print(c)\n    \"\"\"\n    1)\n    if 1 in c:\n        return -1\n\n    # 2)\n    if L < min(c):\n        return -1\n\n    # 3)\n    min_count = float('inf')\n    for x in range(1 << n):\n        count = 0\n        cost = 0\n        for i in range(n):\n            if x & (1 << i):\n                count += 1\n            cost += c[i] * count\n        if cost >= L:\n            continue\n        if cost < min_count:\n            min_count = cost\n    return min_count\n    \"\"\"\n    # 1)\n    if 1 in c:\n        return -1\n\n    # 2)\n    if L < min(c):\n        return -1\n\n    # 3)\n    count = 0\n    cost = 0\n    for x in range(1 << n):\n        count += 1\n        cost += c[0] * count\n        cost += c[1] * count\n        cost += c[2] * count\n        cost += c[3] * count\n        cost += c[4] * count\n        if cost >= L:\n            continue\n        if cost < min_count:\n            min_count = cost\n    return min_count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    ans = 0\n    return str(ans)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, L = (int(_) for _ in stdin.split())\n    c = (int(_) for _ in stdin.split()[1:])\n    min_cost = 10**10\n    for i in range(1, 31):\n        c_vol = 2**i - 1\n        c_cost = sum(c[j] * 2**(i - j) for j in range(i))\n        if c_cost <= L:\n            min_cost = min(c_cost, min_cost)\n    return min_cost\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    c = map(int, stdin.split())\n\n    ans = 0\n    for n in range(1, 32):\n        n2 = 2**n\n        r = L\n        for i in range(n, 32):\n            if n2 - i <= r:\n                ans += i * sum(c[i:])\n                r -= n2 - i\n        if r < L:\n            break\n    print(ans)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndata = stdin.split()\n\nn = int(data[0])\n\nl = int(data[1])\n\ncost = list(map(int, data[2].split()))\n\n\n\nlst_final = []\nfor x in range(n):\n    lst_final.append((2**x)-1)\n\ns = 0\nfor x in lst_final:\n    if x < l:\n        s += (l-x)*cost[x]\n    else:\n        s += (x-l)*cost[x-l]\n\nprint(s)\n\nreturn s\n\n\nsolution(input())\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, l = int(lines[0]), int(lines[1])\n    arr = list(map(int, lines[2].split()))\n    return calc_l_roubles(n, l, arr)\n\n\ndef"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(list(map(int, stdin.split())))\n    mex = 0\n    while mex < n and a[mex] >= a[n - 1]:\n        mex += 1\n    return str(mex)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(1, n):\n        a[i] = min(a[i], a[count])\n        count = i\n    return str(max(a))"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(int, stdin.split()))\n    # write your code here\n    return str(max(a))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ary = list(map(int, stdin.strip().split()))\n    stack = []\n    s = 0\n    while stack or ary:\n        while ary and ary[-1] > s:\n            stack.append(ary.pop())\n        if stack:\n            s = stack.pop()\n            ary.append(s)\n        else:\n            s = 0\n    return \" \".join(map(str, ary))\n\nprint(solution(input()))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if n == 1:\n        return str(min(arr))\n\n    arr.sort()\n    b = []\n    for i in range(n):\n        if i!= 0 and arr[i] < arr[i-1]:\n            b.append(arr[i-1])\n        else:\n            b.append(arr[i])\n    return str(max(b))"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return max([int(stdin.strip()) for _ in range(n)])"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    arr = list(map(int, stdin.split()))\n    result = float('-inf')\n    for _ in range(n):\n        value = max(result, min(arr))\n        result = value\n        arr.remove(value)\n    return result"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    arr.sort(reverse=True)\n    if arr == arr[::-1]:\n        return '0'\n    mex = 1\n    for el in arr:\n        if el > mex:\n            mex = el\n    return str(mex)"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    mx = a[0]\n    cnt = 0\n    while mx >= a[cnt]:\n        cnt += 1\n    maxi = mx\n    mx = a[cnt - 1]\n    while mx <= a[n - 1]:\n        cnt += 1\n        mx = max(a[cnt - 1], mx)\n        if mx > maxi:\n            maxi = mx\n    return str(maxi)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    line = stdin.split()\n    if n % 2 == 0:\n        return \"NO\"\n    tickets = [line[i] for i in range(n)]\n    segments = []\n    sums = {}\n    segment_size = n // 2\n    for i in range(len(tickets)):\n        if i % segment_size == 0:\n            segments.append(tickets[i])\n            sums[tickets[i]] = 0\n        else:\n            sums[tickets[i]] += 1\n    for i in range(len(segments)):\n        for j in range(i + 1, len(segments)):\n            if sums[segments[i]] + sums[segments[j]] == len(segments):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    digits = stdin\n    \n    if n == 0:\n        return 'NO'\n    \n    # for all n you can get the sum of all segments\n    \n    # segment sum = sum of the first n digits\n    segment_sum = sum([int(i) for i in digits[:n]])\n    \n    # iterate over the rest of the digits\n    for d in digits[n:]:\n        # determine the last digit\n        last_digit = d\n        # iterate over the rest of the digits\n        for dd in digits[n:]:\n            # determine the next digit\n            next_digit = dd\n            # see if this digit can be placed in the same segment\n            if (last_digit + next_digit == segment_sum):\n                return 'YES'\n            # if the digit is placed somewhere else the sum cannot be placed in the same segment\n            # and the ticket is not lucky\n            if (last_digit + next_digit!= segment_sum):\n                return 'NO'\n            # otherwise the ticket is lucky\n            \n        # the last digit was not placed in the same segment and the ticket is lucky\n        return 'YES'\n    \n    return 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.strip()\n    ticket_list = list(ticket)\n    len_ticket = len(ticket_list)\n    for i in range(1, len_ticket + 1):\n        if all(not (int(ticket_list[j]) == int(ticket_list[j - i])) for j in range(i)):\n            continue\n        else:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, nums = stdin.split()\n    segments = []\n    i = 1\n    sum = 0\n    while i < len(nums):\n        if sum < int(nums[i]):\n            segments.append((sum, int(nums[i - 1])))\n            sum = int(nums[i])\n        else:\n            sum += int(nums[i])\n        i += 1\n    segments.append((sum, int(nums[i - 1])))\n    if sum == sum(segments):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(\n    \"1\\n73452\")\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    return \"YES\" if all(sum(a[i - 2:i]) == sum(a[i:i + 2]) for i in range(2, n - 1)) else \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    segments, sum_segments = [], 0\n    for i in range(len(stdin)):\n        segments.append(int(stdin[i]))\n        sum_segments += int(stdin[i])\n    if sum_segments % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sum_1 = 0\n    sum_2 = 0\n    n = int(stdin)\n    for i in range(n):\n        if int(stdin[i]) <= 0 or int(stdin[i]) > 9:\n            return \"NO\"\n        sum_1 += int(stdin[i])\n        sum_2 += int(stdin[i])\n\n    if sum_1 % 2!= 0:\n        return \"NO\"\n    if sum_2 % 2!= 0:\n        return \"NO\"\n\n    x = (sum_1 + sum_2) // 2\n    if x % 2!= 0:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    golden = list(map(int, stdin.split()))\n    golden.sort()\n    sums = sum(golden)\n    return 'YES' if sums % 2 == 0 else 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import math\n\n    stdin = stdin.strip()\n    n = int(stdin.split(\" \")[0])\n    ticket = stdin.split(\" \")[1]\n\n    if n == len(ticket):\n        s = 0\n        n = 1\n        for digit in ticket:\n            s += int(digit)\n        if math.gcd(s,n) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    s = 0\n    for i in range(n):\n        s += int(ticket[i])\n\n    if s == n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolution(input())\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 73452\n   ...\n   ... 4\n   ... 1248\n   ... '''.strip())\n    'NO'\n    >>> solution('''\n   ... 4\n   ... 1234\n   ... '''.strip())\n    'YES'\n    \"\"\"\n    n = int(stdin)\n    ticket = stdin.strip()\n    # return \"YES\" if sum(int(i) for i in ticket.split()) % 2 == 0 else \"NO\"\n    # todo: compare even and odd digits\n    return \"YES\" if n % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    count = len(set(l))\n    if count%2!=0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\nsolution(input())\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.lower()\n    number_of_characters = len(set(string))\n    if number_of_characters % 2 == 0:\n        print(\"IGNORE HIM!\")\n    else:\n        print(\"CHAT WITH HER!\")"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(\"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\")\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\"\nsolution(stdin)\n\n\"\"\"\n\nstdin = input()\nprint(\"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\")\n\n\"\"\"\n\n\"\"\"\nInput\nwjmzbmr\n\nOutput\nCHAT WITH HER!\n\nInput\nxiaodao\n\nOutput\nIGNORE HIM!\n\nInput\nsevenkplus\n\nOutput\nCHAT WITH HER!\n\"\"\""
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    input_list = list(input_str)\n    n = len(input_str)\n    if n == 0:\n        return ''\n    elif n == 1:\n        if input_list[0].islower():\n            return 'IGNORE HIM!'\n        else:\n            return 'CHAT WITH HER!'\n    else:\n        if n % 2!= 0:\n            return 'IGNORE HIM!'\n        else:\n            return 'CHAT WITH HER!'\n\nprint(solution(input()))\n\n\n\n## Solution from GeeksForGeeks\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    unique_chars = set()\n    for char in stdin:\n        unique_chars.add(char)\n\n    if len(unique_chars) % 2 == 1:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = len(stdin)\n    return \"CHAT WITH HER!\" if n % 2 == 0 else \"IGNORE HIM!\"\n\nsolution(\"sevenkplus\")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    unique = set()\n    stdin = stdin.split(\" \")\n    for name in stdin:\n        for i in range(len(name)):\n            unique.add(name[i])\n    if len(unique)%2 == 0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\nsolution(\"wjmzbmr\")\nsolution(\"xiaodao\")\nsolution(\"sevenkplus\")"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    user_name = stdin\n    if len(user_name) > 100:\n        return 'IGNORE HIM!'\n    if len(user_name) < 1:\n        return 'CHAT WITH HER!'\n    elif len(user_name) == 1:\n        if user_name[0] == 'w':\n            return 'CHAT WITH HER!'\n        elif user_name[0] == 'x':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'z':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'j':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'k':\n            return 'CHAT WITH HER!'\n        elif user_name[0] == 'l':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'b':\n            return 'IGNORE HIM!'\n        elif user_name[0] =='m':\n            return 'CHAT WITH HER!'\n        elif user_name[0] == 'r':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'u':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'd':\n            return 'IGNORE HIM!'\n        elif user_name[0] =='s':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'c':\n            return 'CHAT WITH HER!'\n        elif user_name[0] == 'f':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'q':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'g':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'i':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'h':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'p':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'o':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'n':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'e':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'v':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'a':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 't':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'r':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'l':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'k':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'u':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'h':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'd':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'q':\n            return 'IGNORE HIM!'\n        elif user_name[0] =='s':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'i':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'c':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'a':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'e':\n            return 'IGNORE HIM!'\n        elif user_name[0] =='m':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 't':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'o':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'n':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'p':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'g':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'l':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'k':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'u':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'j':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'i':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'r':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'f':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'd':\n            return 'IGNORE HIM!'\n        elif user_name[0] =='s':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'h':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'b':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'z':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'w':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'k':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'l':\n            return 'IGNORE HIM!'\n        elif user_name[0] =='m':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'p':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'o':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'n':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'g':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'e':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'r':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'a':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'u':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'h':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'i':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'c':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'd':\n            return 'IGNORE HIM!'\n        elif user_name[0] == 'q':\n            return 'IGNORE HIM!'\n        el"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    names = []\n    for i in input_list:\n        if len(i) % 2!= 0:\n            names.append(i)\n    if len(names)!= 0:\n        return \"IGNORE HIM!\"\n    else:\n        return \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    dic = {}\n    for i in stdin:\n        if i not in dic.keys():\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    if len(dic.keys()) % 2 == 0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs_type = list(map(int, stdin.split()))\n    s = 0\n    e = 0\n    for tab_type, tab_number in enumerate(tabs_type):\n        if tab_type == 0:\n            e += tab_number\n        else:\n            s += tab_number\n    return str(abs(e - s))\n\n----\nInput\n\n4 2\n1 1 -1 1\n\nOutput\n\n2\n\nInput\n\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n\nOutput\n\n9\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    for i in range(1, len(tabs)):\n        if tabs[i][1] == 1:\n            if i % k!= 0:\n                tabs[i][0] = i % k\n            else:\n                tabs[i][0] = 0\n        else:\n            tabs[i][0] = i % k\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda x: x[0])\n    tabs = sorted(tabs, key=lambda x: x[1])\n\n    tabs = [(i, tabs[i]) for i in range(n)]\n\n    tabs = sorted(tabs, key=lambda"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    t_tabs, s_tabs = 0, 0\n\n    for i in range(n):\n        if int(stdin.split()[i]) == 1:\n            t_tabs += 1\n        else:\n            s_tabs += 1\n    e, s = t_tabs, s_tabs\n    return abs(e - s)\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    remaining_tabs = n\n    tab_types = []\n    tab_values = []\n    tab_types.append(-1)\n    tab_values.append(1)\n    for i in range(1, k+1):\n        tab_types.append(1)\n        tab_values.append(-1)\n\n    for i in range(k+1, n):\n        if tabs[i] == -1:\n            tab_types.append(0)\n            tab_values.append(-1)\n        else:\n            tab_types.append(1)\n            tab_values.append(1)\n\n    for i in range(n):\n        if tabs[i] == -1:\n            tab_types.append(1)\n            tab_values.append(1)\n        else:\n            tab_types.append(-1)\n            tab_values.append(-1)\n\n    tabs = sorted(zip(tab_types, tab_values), key=lambda x: (x[0], -x[1]))\n    tabs_list = []\n    for t, v in tabs:\n        if t == 1:\n            remaining_tabs -= 1\n            tabs_list.append(v)\n\n    tabs_list = sorted(tabs_list, key=lambda x: (-x, -1))\n    tabs_list.reverse()\n    print(tabs_list)\n\n    tabs = tabs_list\n    tabs_list = []\n    tabs_list.append(tabs[0][1])\n    for i in range(1, len(tabs)):\n        tabs_list.append(tabs[i][1])\n\n    tabs_list = sorted(tabs_list, key=lambda x: (-x, -1))\n    tabs_list.reverse()\n\n    tabs_list = tabs_list[:remaining_tabs]\n    print(tabs_list)\n\n    tabs_list = sorted(tabs_list, key=lambda x: (-x, -1))\n    tabs_list.reverse()\n\n    print(tabs_list)\n\n    tabs_list = tabs_list[:k]\n    print(tabs_list)\n    abs_tabs_list = list(map(abs, tabs_list))\n    print(abs_tabs_list)\n    return max(abs_tabs_list)\n\nprint(solution(input()))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    tabs = sorted([int(x) for x in stdin.split()])\n    info = list(map(lambda x: -1 if x == -1 else 1, tabs))\n    remaining = n - len(tabs)\n    closest = max(tabs)\n    diff = []\n    i = 0\n    while i < len(tabs) - 1:\n        if tabs[i] == tabs[i + 1]:\n            diff.append(0)\n        else:\n            diff.append(abs(tabs[i + 1] - tabs[i]))\n        i += 1\n    while remaining > 0 and len(diff) > 0:\n        i = diff.index(max(diff))\n        if info[i] == 1:\n            closest = tabs[i]\n        if tabs[i] == closest + i * k:\n            remaining -= 1\n        elif tabs[i] == closest + (i + 1) * k:\n            remaining -= 1\n        else:\n            diff[i] -= 1\n    return''.join([str(x) for x in diff + [closest]])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    answer = 0\n    tabs.sort()\n    remaining = 0\n    for i in range(1, n + 1):\n        if i % k == 0:\n            if tabs[i - 1] == tabs[i]:\n                tabs.pop(i)\n            else:\n                tabs[i - 1] -= 1\n                tabs[i] += 1\n                remaining += abs(tabs[i - 1] - tabs[i])\n    answer = remaining\n    return str(answer)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    test = k % n\n    social = n - test\n    return max(abs(test - social), abs(test - social - 1), abs(test - social - 2), abs(test - social - 3), abs(test - social - 4), abs(test - social - 5))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    e = n - k\n    s = n - k\n    if k == 1 or e == s:\n        return abs(e - s)\n    if k % 2 == 0:\n        return abs(e - s)\n    s -= e // k\n    e -= e // k\n    if e > 0:\n        s -= 1\n    return abs(e - s)\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs = sorted(tabs)\n    res = 0\n    for i in range(k):\n        if tabs[i] == 1:\n            tabs[i] = -1\n            tabs.pop()\n    for i in range(k):\n        tabs[i] = tabs[i] * i\n    for i in range(k, n - k + 1):\n        res = max(res, abs(tabs[i - k] - tabs[i]))\n    return res"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c0 = int(stdin.split()[1])\n    c1 = int(stdin.split()[2])\n    n = int(stdin.split()[0])\n    arr = list(str(bin(c0 ^ c1))[2:])\n    return str(c0 + (sum(n - len(x) for x in arr)) * c1)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    costs = {\n        \"0\": int(stdin.split()[0]),\n        \"1\": int(stdin.split()[1])\n    }\n    letters = \"\".join([i for i in costs])\n    return sum(costs.values()) - sum([len(i) for i in letters])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c_0, c_1 = (int(stdin) for _ in range(2))\n    ones = [int(x) for x in stdin.split()]\n    zeros = [(n - 1 - x) for x in ones]\n    \n    costs = [(x, n - 1 - y) for x, y in zip(zeros, ones)]\n    print(costs)\n    print(min(costs, key=lambda x: x[0] + x[1]))\n\n    return min(costs, key=lambda x: x[0] + x[1])[0] + min(costs, key=lambda x: x[0] + x[1])[1]\n\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    cost_of_letter = 2 ** n\n    answer = c_0 * cost_of_letter + c_1 * cost_of_letter\n    return str(answer)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    cost_0 = int(lines[1])\n    cost_1 = int(lines[2])\n    if n <= 0 or n > 10**8:\n        print('Error')\n        return -1\n    if cost_0 < 0 or cost_1 < 0:\n        print('Error')\n        return -1\n    if n < 0 or cost_0 > 10**8 or cost_1 > 10**8:\n        print('Error')\n        return -1\n    A = [0]*n\n    for i in range(n):\n        A[i] = int(input())\n    codes = ['0']*n\n    for i in range(n):\n        codes[i] = str(bin(A[i]))[2:]\n    codes.sort()\n    decode = ''\n    for code in codes:\n        decode += code\n    total = 0\n    for i in range(n):\n        if decode[i] == '1':\n            total += cost_1\n        else:\n            total += cost_0\n    return total"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = stdin.split()\n    n = int(n)\n    c_0 = int(c_0)\n    c_1 = int(c_1)\n    a = '0'\n    b = '1'\n    d = 0\n    for i in range(n):\n        d = d + c_0\n        c_0 = c_0 - d\n        d = d + c_1\n        c_1 = c_1 - d\n        a = a + '0'\n        b = b + '1'\n    return str(a + b)"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = (int(x) for x in stdin.split())\n    cost = []\n    for i in range(n):\n        cost.append(min(c_0, c_1) + 1)\n        c_0 -= 1\n        c_1 -= 1\n    return sum(cost)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = map(int, stdin.split())\n    cnt = {0: n, 1: n}\n    for i in range(2, n+1):\n        for j in range(2, i):\n            cnt[i] = min(cnt[i], cnt[i-j] + cnt[j])\n    return str(cnt[n])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = [int(i) for i in stdin.split()]\n    import itertools\n    x = itertools.product(\"01\", repeat=n)\n    ans = 10 ** 10\n    for i in x:\n        if \"0\" in i:\n            c1 = i.count(\"0\") * c_0\n            c2 = i.count(\"1\") * c_1\n            ans = min(ans, c1 + c2)\n        else:\n            c1 = i.count(\"1\") * c_1\n            c2 = i.count(\"0\") * c_0\n            ans = min(ans, c1 + c2)\n    return str(ans)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    print(2**n + min(c_1 * 2**(n - 1) + c_0 * 2**(n - 2), 2**n + (c_0 + c_1) * 2**(n - 1)))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,x,b,y=map(int,stdin.split())\n    return \"YES\" if x==y else \"NO\"\ndef"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, x, b, y] = map(int, stdin.split())\n    if a == x:\n        return \"NO\"\n    if a == y:\n        return \"NO\"\n    if b == x:\n        return \"NO\"\n    if b == y:\n        return \"NO\"\n    if n == x:\n        return \"NO\"\n    if n == y:\n        return \"NO\"\n    if n == (x+1) or n == (x-1):\n        return \"YES\"\n    if n == (y+1) or n == (y-1):\n        return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, a, x, b, y = map(int, stdin.split())\n    if (x == a and y == b) or (x == b and y == a):\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(\"1 4 3 2\") # no\nsolution(\"5 1 4 3 2\") # yes\nsolution(\"10 2 1 9 10\") # no\nsolution(\"100 10 1 9 10\") # no\nsolution(\"50 1 100 9 10\") # yes\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    a, x, b, y, n = map(int, stdin.split())\n    \n    # check if they are at the same place\n    if a == x and b == y:\n        return \"NO\"\n    \n    # check if they are at the same time\n    if a == x or b == y:\n        return \"YES\"\n    \n    # if they are not at the same time\n    \n    # then check if they are at the same place\n    if a == x and b == y:\n        return \"YES\"\n    \n    # if they are at the same place\n    \n    # find the time difference\n    t = y - x\n    \n    # check if they are at the same time\n    if a == x or b == y:\n        return \"YES\"\n    \n    # if they are at the same time\n    \n    # now check if they are at the same place\n    if a == x and b == y:\n        return \"YES\"\n    \n    # if they are at the same place\n    \n    # if they are not at the same place\n    \n    # find the time difference\n    t = y - x\n    \n    # check if they are at the same time\n    if a == x or b == y:\n        return \"YES\"\n    \n    # if they are at the same time\n    \n    # now check if they are at the same place\n    if a == x and b == y:\n        return \"YES\"\n    \n    # if they are at the same place\n    \n    # if they are not at the same place\n    \n    return \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y, n = list(map(int, stdin.split()))\n    for x in range(1, n+1):\n        if a == x and b == (x+1) % n or a == x and b == (x-1) % n:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split(\" \")))\n    n = data[0]\n    a = data[1]\n    x = data[2]\n    b = data[3]\n    y = data[4]\n\n    # \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u043c\u043e \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0438\u0445 \u0447\u0438\u0441\u0435\u043b\n    # \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454\u043c\u043e, \u0447\u0438 \u0437\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043e\u043c\u0443 \u043c\u0430\u0441\u0438\u0432\u0456\n    a, x, b, y = list(map(lambda n: n+1 if n > 0 else 0, [a, x, b, y]))\n    if a+x == b+y:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    return \"NO\" if (a == x or a == y) or (b == x or b == y) else \"YES\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if n == 0:\n        return \"YES\"\n    if (n == 1 or n == 2) and ((a == 1 and b == 2) or (x == 1 and y == 2) or (a == n and b == n)):\n        return \"YES\"\n    if a == b or x == y or n == 1:\n        return \"YES\"\n    if a == x or b == y or n == 2:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    return \"YES\" if (x == a and y == b) or (x == b and y == a) else \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    x -= 1\n    y -= 1\n    while x!= y:\n        if x == 0:\n            x = n\n        if y == 0:\n            y = n\n        if x < y:\n            x += 1\n        else:\n            y += 1\n    if a == x or b == x or a == y or b == y:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    a = x ** 2 + y ** 2\n    b = (x + y) ** 2\n    a_max = 2 ** 31 - 1\n    b_max = 2 ** 31 - 1\n    l_max = l\n    r_max = r\n    for i in range(l, r + 1):\n        if i ** 2 < a:\n            if b_max < i ** 3 + b_max:\n                b_max = i ** 3 + b_max\n        if i ** 2 < a_max:\n            if a_max < i ** 2 + a_max:\n                a_max = i ** 2 + a_max\n        if i ** 2 < b_max:\n            if b_max < i ** 2 + b_max:\n                b_max = i ** 2 + b_max\n        if i ** 2 < a_max:\n            if a_max < i ** 3 + a_max:\n                a_max = i ** 3 + a_max\n    return a_max - 1 if a_max!= 2 ** 31 - 1 else 0"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    if x > y:\n        x, y = y, x\n    for i in range(x, y+1):\n        if all(map(lambda x: x % 2!= 0, [int(str(i)[:3], 2), int(str(i)[3:], 2)])):\n            if i >= l and i <= r:\n                return str(i) + \" \" + str(i+1)\n    return \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nlines = stdin.split(\"\\n\")\nx, y, l, r = map(int, lines[0].split())"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    count = 0\n    while l <= r:\n        # print(l, r, x**x + y**y)\n        if l <= x**x + y**y <= r:\n            l += 1\n            count = max(count, x + y)\n        elif l > x**x + y**y > r:\n            r -= 1\n            count = max(count, x + y)\n    return str(count)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    if x == y:\n        return \"0\"\n    return str(max(x, y, l, r) - min(x, y, l, r))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    if l == r:\n        return 0\n    if x == y:\n        if x == 0:\n            return 0\n        return r - l + 1\n    if x == 0:\n        return r - l + 1\n    if x > 0 and y > 0:\n        for a in range(x, y + 1):\n            b = int(a**0.5)\n            if b**2 == a:\n                return 0\n            if a == b**2:\n                return 0\n            if a <= b**2 <= x:\n                return 0\n    if x == 0 and y < 0:\n        return 0\n    if x > 0 and y < 0:\n        for a in range(x, -1, -1):\n            b = int(a**0.5)\n            if b**2 == a:\n                return 0\n            if a == b**2:\n                return 0\n            if a <= b**2 <= x:\n                return 0\n    if x == 0 and y > 0:\n        return 0\n    if x < 0 and y < 0:\n        for a in range(x, -1, -1):\n            b = int(a**0.5)\n            if b**2 == a:\n                return 0\n            if a == b**2:\n                return 0\n            if a <= b**2 <= x:\n                return 0\n    return r - l + 1\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    l_st, l_en = l, r\n    max_len = 0\n    while l_st <= l_en:\n        mid = l_st + (l_en - l_st) // 2\n        if is_lucky_year(mid):\n            max_len = max(max_len, mid)\n            l_en = mid - 1\n        else:\n            l_st = mid + 1\n    return str(max_len)\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    max_len = 0\n    for n in range(l, r+1):\n        # check if n is a solution\n        if n == (x**x + y**y)**0.5:\n            return str(max(max_len, n-l+1, n-r+1))\n        elif n < (x**x + y**y)**0.5:\n            max_len = max(max_len, n-l+1)\n    return str(max_len)"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    if x == y == 0:\n        return 0\n    if l > r:\n        return 0\n    return max(l, max(2 ** x + y ** x, 2 ** y + y ** y) - l)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = stdin.split()\n    a, b = int(x), int(y)\n    l, r = int(l), int(r)\n    max_length = 0\n    for i in range(l, r+1):\n        if a**i + b**i in range(l, r+1):\n            if i == l:\n                max_length = i\n            else:\n                max_length = max(max_length, i)\n    if max_length == 0:\n        return '0'\n    else:\n        return str(max_length)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    stdin.sort()\n    k = 2\n    sum_ = sum(stdin)\n    while sum_ >= k*k:\n        n = stdin[0]\n        while n >= k:\n            while sum(stdin[:k]) < sum(stdin[k:]):\n                sum_ = sum(stdin[:k])\n                k += 1\n            stdin[k-1] -= 1\n            sum_ -= k*k\n        stdin[k-1] -= 1\n    print(k - 1)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 2\n    else:\n        return 1\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = 0, 0, n\n    while True:\n        if a <= b:\n            a += n\n        elif b <= c:\n            b += n\n        elif c <= n:\n            c += n\n        else:\n            break\n    return f'{n}'\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return str(i) + \" \" + str(n // i)\n    return str(n) + \" \" + str(1)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '0'\n    else:\n        a = 0\n        while n % 2 == 0:\n            a += 1\n            n = n / 2\n        b = 0\n        while n % 3 == 0:\n            b += 1\n            n = n / 3\n        if b > a:\n            return '{}'.format(int(n))\n        return '{}'.format(int(n - 1))\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input\n    4\n    \n    Output\n    2\n    \"\"\"\n    for line in stdin:\n        n = int(line)\n    if n <= 2:\n        return \"1\"\n    min_tax = 1\n    while True:\n        max_div = n // min_tax\n        if max_div!= min_tax:\n            break\n        min_tax += 1\n    return str(min_tax)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        raise ValueError(f\"{n} is not a positive number\")\n    for i in range(2, n + 1):\n        divisors = []\n        for j in range(1, i // 2 + 1):\n            if i % j == 0:\n                divisors.append(j)\n        if len(divisors) > 1:\n            break\n    print(len(divisors))\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n\n    n_2 = 0\n    n_1 = 1\n\n    while n_1 + n_2 + n_3 < n:\n        n_3 = n - n_2 - n_1\n        n_2 = n_1\n        n_1 = n_3\n\n    return str(n_2 + n_1)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i * i < n:\n        i += 1\n    if n % i == 0:\n        return i\n    else:\n        return n // i + 1\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            n /= divisor\n        else:\n            divisor += 1\n    return n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    vowels = \"aeiou\"\n    word = stdin\n    consecutive_vowels = 0\n    result = \"\"\n    for i in range(len(word)):\n        if word[i] in vowels:\n            consecutive_vowels += 1\n        else:\n            consecutive_vowels = 0\n        result += word[i]\n        if consecutive_vowels == 3:\n            result += \" \"\n    return result[:-1]\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    res = ''\n    if len(l) == 0:\n        return ''\n    if len(l[0]) == 1:\n        return l[0]\n    while len(res) < len(l[0]):\n        res += l[0][0]\n        i = 1\n        while l[0][i] == l[0][0]:\n            i += 1\n            if i == len(l[0]):\n                break\n        res += l[0][i]\n        if len(l[0]) > len(res) + 1:\n            res += l[0][len(l[0])-1]\n    return res\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n\n    vowels = 'aeiou'\n    min_space = 2\n    words = stdin.split()\n    words = list(filter(lambda w: len(w) > 3, words))\n    typos = 0\n\n    for word in words:\n        consonants_groups = []\n        for i in range(len(word)):\n            if word[i] in vowels:\n                consonants_groups.append(word[i])\n            elif word[i] not in vowels:\n                typos += 1\n        if typos == 0:\n            print(word)\n            return\n\n        typos = 0\n        for i in range(len(word) - 1):\n            if word[i] == word[i + 1]:\n                typos += 1\n\n        if typos <= 2:\n            print(word)\n            return\n\n        for j in range(len(consonants_groups) - 1):\n            if consonants_groups[j]!= consonants_groups[j + 1]:\n                min_space = min(min_space, len(word) - 1 - j)\n\n    print(word)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement this function.\n    return stdin\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    result = ''\n    for i in range(len(words)):\n        if words[i] == 'hellno':\n            result = result + 'hell no'\n        else:\n            result = result + words[i] +''\n    return result[:-1]\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    word = stdin.pop()\n    if not word:\n        return word\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    consonants = {letter for letter in word if letter not in vowels}\n    consonants_groups = find_consonants(word)\n    print(consonants_groups)\n    if len(consonants) <= 2:\n        return word\n    \n    if len(consonants) > 3:\n        return word\n\n    ans = ''\n    for _ in range(len(word) - 1):\n        ans +=''\n    ans += word\n    return ans\n\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for word in words:\n        for char in word:\n            if char.lower() not in \"aeiou\":\n                return word\n    return words[0]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split string into words\n    words = stdin.strip().split()\n\n    # Empty words don't have typos\n    if not words:\n        return stdin\n\n    # Iterate over words\n    for i, word in enumerate(words):\n        if not is_consonant(word):\n            # Find the number of consonants in the word\n            for j in range(1, len(word)):\n                if is_consonant(word[j:]):\n                    # There are more consonants than letters in this word\n                    break\n            # If we've found the minimum number of consonants, then this word doesn't have typos\n            else:\n                # There are no letters and there are no consonants\n                words[i] = stdin\n\n    return''.join(words)\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set('aeiou')\n\n    def solve(word):\n        if not word:\n            return ''\n        if word not in d:\n            d[word] = {}\n        if len(d[word]) == 1:\n            if len(word) == 1 and word in vowels:\n                return word\n            else:\n                d[word] = {}\n        return solve(word[:1]) + solve(word[1:])\n\n    d = {}\n    return solve(stdin)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, *a, b, *c, d = list(map(int, stdin.split()))\n    min_spend = x\n    for i in range(k):\n        if b[i] < min_spend:\n            min_spend = b[i]\n    for i in range(k):\n        if c[i] < min_spend:\n            min_spend = c[i]\n    if min_spend <= s:\n        print(x)\n    else:\n        print(x+min_spend)\n\nsolution(input())\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, a, b, c, d = (\n        [int(i) for i in stdin.split()]\n    )  # type: int, int, int, int, int, int, int, int, int\n    b = [b[i] for i in range(m)]  # type: List[int]\n    a = [a[i] for i in range(m)]  # type: List[int]\n    c = [c[i] for i in range(k)]  # type: List[int]\n    d = [d[i] for i in range(k)]  # type: List[int]\n    # total time spent\n    total_time = s\n    # total manapoints used\n    total_manapoints = 0\n    # number of potions needed\n    needed_potions = 0\n    # the total time spent preparing\n    total_preparing_time = 0\n    # the total manapoints used\n    total_manapoints_used = 0\n    # the preparation time of each potion\n    each_potion_preparing_time = []\n    # the total time spent preparing each potion\n    each_potion_preparing_time = []\n    # the total manapoints used\n    each_potion_manapoints = []\n    # the total time spent preparing each potion\n    each_potion_manapoints_used = []\n    # the number of potions that were prepared instantly\n    number_of_potions_prepared_instantly = 0\n    for i in range(x):\n        # total time spent preparing\n        total_preparing_time = total_preparing_time + x - i\n        # the preparation time of each potion\n        each_potion_preparing_time.append(total_preparing_time)\n        # the total manapoints used\n        each_potion_manapoints.append(total_manapoints_used)\n        if total_preparing_time <= needed_potions:\n            # the total time spent preparing\n            total_preparing_time = needed_potions\n            # the preparation time of each potion\n            each_potion_preparing_time.append(total_preparing_time)\n            # the total manapoints used\n            each_potion_manapoints.append(total_manapoints_used)\n            # the number of potions that were prepared instantly\n            number_of_potions_prepared_instantly = number_of_potions_prepared_instantly + 1\n        else:\n            total_preparing_time = total_preparing_time - needed_potions\n            # the preparation time of each potion\n            each_potion_preparing_time.append(total_preparing_time)\n            # the total manapoints used\n            each_potion_manapoints.append(total_manapoints_used)\n        # the total manapoints used\n        total_manapoints_used = total_manapoints_used + total_preparing_time\n        if total_manapoints_used >= n:\n            break\n        # the number of potions that were prepared instantly\n        number_of_potions_prepared_instantly = number_of_potions_prepared_instantly + 1\n        # the total time spent preparing each potion\n        total_time_spent_preparing_each_potion = total_time_spent_preparing_each_potion + each_potion_preparing_time\n        # the total manapoints used\n        total_manapoints_used_each_potion = total_manapoints_used_each_potion + each_potion_manapoints\n        # the preparation time of each potion\n        each_potion_preparing_time = []\n        # the total manapoints used\n        each_potion_manapoints = []\n        needed_potions = needed_potions - total_preparing_time\n    if total_manapoints_used >= n:\n        total_manapoints_used = n\n    # the number of potions that were prepared instantly\n    needed_potions = n - total_manapoints_used\n    # the total time spent preparing\n    total_time_spent_preparing_each_potion = total_time_spent_preparing_each_potion + each_potion_preparing_time\n    # the total manapoints used\n    total_manapoints_used_each_potion = total_manapoints_used_each_potion + each_potion_manapoints\n    # the total time spent preparing each potion\n    each_potion_preparing_time = []\n    # the total manapoints used\n    each_potion_manapoints = []\n    needed_potions = needed_potions - total_preparing_time\n    return str(needed_potions)"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    c = list(map(int, stdin.split()[3:]))\n    d = list(map(int, stdin.split()[4:]))\n\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n\n    cnt = 0\n    res = 0\n\n    for i in range(k):\n        if a[i] >= x:\n            cnt += 1\n            a[i] -= x\n            res += x\n        else:\n            x -= a[i]\n            cnt += 1\n            res += a[i]\n\n    for i in range(k, m):\n        if b[i] >= s:\n            cnt += 1\n            s -= b[i]\n            res += b[i]\n        else:\n            s -= b[i]\n            cnt += 1\n            res += b[i]\n\n    if cnt > 0:\n        for i in range(cnt):\n            res += d[i]\n\n    return str(res)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    ans = 0\n    i = 0\n    while i < len(a):\n        if a[i] <= x:\n            ans += s\n            i += 1\n        else:\n            ans += x\n            ans += (a[i] - x) * b[i]\n            i += 1\n    i = 0\n    while i < len(c):\n        if c[i] <= x:\n            ans += s\n            i += 1\n        else:\n            ans += x\n            ans += (c[i] - x) * d[i]\n            i += 1\n    return str(ans)"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, a, b, c, d = map(int, stdin.split())\n    time = (s + n * (n + 1) // 2) * m + max(a[i] for i in range(m)) * (n + m + 1)\n    time += max(b[i] for i in range(m)) + max(c[i] for i in range(k)) * (n + k + 1)\n    time += max(d[i] for i in range(k)) * (n + k + 1)\n    return str(min(time, x))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    x, s = (int(i) for i in stdin.split())\n    a = sorted((int(i) for i in stdin.split()[1::2]))\n    b = sorted((int(i) for i in stdin.split()[2::2]))\n    c = sorted((int(i) for i in stdin.split()[3::2]))\n    d = sorted((int(i) for i in stdin.split()[4::2]))\n    costs = [b[i] + a[i] for i in range(m)]\n    costs.extend(d)\n    costs.extend(c)\n    ans = 0\n    for i in range(m):\n        if costs[i] <= x:\n            ans += costs[i]\n            costs[i] = a[i]\n        else:\n            costs[i] -= x\n    while s > 0:\n        for i in range(m):\n            if costs[i] <= s:\n                ans += costs[i]\n                s -= costs[i]\n                costs[i] = a[i]\n            else:\n                costs[i] -= s\n                s = 0\n    return str(ans)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    d, e = map(int, stdin.split())\n    potions = 0\n    total_time = 0\n    total_time_popped = 0\n    for i in range(m):\n        total_time += a[i]\n        potions += e[i]\n        if i == m-1:\n            potions -= e[i]\n        if total_time_popped + a[i] <= total_time:\n            total_time_popped += a[i]\n        else:\n            total_time = total_time_popped + a[i] - total_time_popped\n            total_time_popped = 0\n            potions -= e[i]\n    if total_time_popped + a[m-1] <= total_time:\n        total_time_popped += a[m-1]\n        potions -= e[m-1]\n        total_time = total_time_popped + a[m-1] - total_time_popped\n        total_time_popped = 0\n    if total_time_popped + a[0] <= total_time:\n        total_time_popped += a[0]\n        potions -= e[0]\n        total_time = total_time_popped + a[0] - total_time_popped\n        total_time_popped = 0\n    print(total_time * k)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    c = list(map(int, stdin.split()[1:]))\n    d = list(map(int, stdin.split()[1:]))\n    ans = 0\n    b_ind = 0\n    c_ind = 0\n    cur_ind = 0\n    while cur_ind < n:\n        if cur_ind == 0:\n            if b_ind < len(b):\n                if b[b_ind] < x:\n                    ans += x - b[b_ind]\n                    b_ind += 1\n                    cur_ind += 1\n                else:\n                    x -= b[b_ind]\n                    b_ind += 1\n            else:\n                cur_ind += 1\n        if cur_ind == 1:\n            if c_ind < len(c):\n                if c[c_ind] < x:\n                    ans += x - c[c_ind]\n                    x -= c[c_ind]\n                    c_ind += 1\n                    cur_ind += 1\n                else:\n                    x -= c[c_ind]\n                    c_ind += 1\n            else:\n                cur_ind += 1\n    return str(ans)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    res = float('inf')\n    for i in range(k + 1):\n        if i == 0:\n            manapoints = s\n            res = min(res, n * manapoints)\n        else:\n            manapoints = x + (n - i) * c[i - 1]\n            res = min(res, n * manapoints)\n    for i in range(k + 1):\n        if i == 0:\n            manapoints = s\n            res = min(res, n * manapoints)\n        else:\n            manapoints = x + (n - i) * c[i - 1]\n            res = min(res, n * manapoints)\n    for i in range(k + 1):\n        manapoints = x + (n - i) * c[i - 1]\n        res = min(res, n * manapoints)\n    res = min(res, x * (n - 1) + sum(a) + sum(b) + sum(c) + sum(d))\n    return str(res)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    x, s = int(stdin.split()[1]), int(stdin.split()[2])\n    a = list(map(int, stdin.split()[3].split()))\n    b = list(map(int, stdin.split()[4].split()))\n    c = list(map(int, stdin.split()[5].split()))\n    d = list(map(int, stdin.split()[6].split()))\n    if x + s > n:\n        print(s)\n    else:\n        if m == 0:\n            print(x + s)\n        else:\n            if k == 0:\n                if x + s < n:\n                    print(x + s)\n                else:\n                    print(x + s - n)\n            else:\n                t = s\n                for i in range(x, n + 1):\n                    t += a[i - 1]\n                    if t > x:\n                        break\n                print(min(t, n))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    time = list(map(int, stdin.split()))\n    time = sorted(time, reverse=True)\n    # print(time)\n    max_time = m\n    points = 0\n    while max_time > 0:\n        task_time = time[0]\n        max_time -= task_time\n        time.pop(0)\n        if max_time > 0:\n            points += 1\n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def recurse(n, k, m):\n        if n == k:\n            return m\n        # find next optimal subtask\n        curr = m\n        for i in range(1, k + 1):\n            if curr + t[i] <= m:\n                curr += t[i]\n            else:\n                break\n        # recurse\n        return max(recurse(n, k, m), curr)\n    n, k, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    return str(recurse(n, k, m))\n\nsolution(input())"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k, m = stdin.split(\"\\n\")\n    k, m = int(k), int(m)\n    return k + 1 + sum(int(t) for t in stdin.split(\"\\n\")[1].split())"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = []\n    for i in range(1, k + 1):\n        tasks.append(list(map(int, stdin.split())))\n    tasks = sorted(tasks, key=lambda x: x[1])\n    points = 0\n    solved = []\n    for task in tasks:\n        points += task[0]\n        if points >= m:\n            points = m\n            break\n    for task in tasks:\n        if points >= m:\n            break\n        else:\n            points += task[0]\n            if points >= m:\n                break\n            else:\n                points = points + 1\n    return str(points)\nprint(solution(input()))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, stdin.split())))\n    tasks = []\n    for i in range(k):\n        tasks.append(list(map(int, stdin.split())))\n    ans = 0\n    for i in range(n):\n        dic = dict()\n        for j in range(k):\n            if (tasks[j][0] == i+1):\n                if (tasks[j][1] in dic):\n                    dic[tasks[j][1]] += tasks[j][2]\n                else:\n                    dic[tasks[j][1]] = tasks[j][2]\n        a = 0\n        for key in dic:\n            a += dic[key]\n        ans = max(ans, a)\n    for i in range(n):\n        t = 0\n        for j in range(k):\n            if (l[i][j] == 1):\n                t += tasks[j][1]\n        ans = max(ans, t)\n    return str(ans)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    n, k, m = map(int, stdin.split())\n    tasks = sorted([int(stdin) for stdin in stdin.split()])\n    total = 0\n    subtasks = 0\n    for i in range(len(tasks)):\n        if subtasks < k:\n            subtasks += 1\n            total += tasks[i]\n        else:\n            total += subtasks * tasks[i]\n        if total > m:\n            break\n    return total"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return str(min(k + 1, m))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    points = 0\n    for t in range(m):\n        max_point = -1\n        for i in range(1, k + 1):\n            max_point = max(max_point, tasks[i] + max_point)\n        points += max_point\n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_k, input_m = stdin.split()\n    input_n = int(input_n)\n    input_k = int(input_k)\n    input_m = int(input_m)\n    possible_subtasks = {i for i in range(1, input_k + 1)}\n    total_points = 0\n\n    while possible_subtasks:\n        current_point = 0\n        current_subtasks = set()\n        for i in range(input_k):\n            current_point += 1\n            current_subtasks.add(possible_subtasks.pop())\n            current_point += min(input_m, input_n - len(possible_subtasks) - 1)\n        total_points = max(total_points, current_point)\n    return total_points\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    max_points = 0\n    minutes = 0\n    max_time = max(tasks)\n    total_time = 0\n    while True:\n        if max_time < max_points:\n            break\n        total_time += m\n        points = max_points\n        for task in tasks:\n            total_time += task - points\n            if total_time > m:\n                points = points + 1\n                total_time = 0\n            else:\n                points = points\n        max_points = max_points + points\n    return max_points\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def bst(l: List[int], r: int) -> bool:\n        if l > r:\n            return False\n        if l == r:\n            return True\n        v = l + (r - l) // 2\n        return (bst(l, v - 1)\n            and bst(v + 1, r)\n            or bst(l, v - 1)\n            or bst(v + 1, r))\n\n    def nb(i: int) -> int:\n        if i == 0:\n            return 1\n        if i % 2:\n            return 0\n        return nb(i // 2) * 2\n\n    def run(i: int) -> int:\n        if i < 0 or i > 10 ** 6:\n            return 0\n        if not bst(0, i - 1):\n            return 0\n        return 1 + run(i - 1) * nb(i)\n\n    return str(run(int(stdin)))\n\n\nhttps://www.hackerrank.com/challenges/ctci-balanced-brackets/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=stacks-queues\n\n---CODE---\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = 0\n    for i in range(1, n + 1):\n        is_perfect = True\n        is_striped = True\n        root = int((n * (n - 1) / 2)) - i\n        root = root + 1\n        for j in range(2, n + 1):\n            if j - 1 > root:\n                break\n            if j == root:\n                is_striped = False\n                root = root + 1\n                continue\n            if i % j == 0 or i % j == j - 1:\n                is_perfect = False\n                break\n        if is_perfect and is_striped:\n            trees = trees + 1\n    return str(trees)\n\n\nprint(solution(input()))\n\n-----------------------------\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nstdin = \"\"\"\n2\n\n\"\"\"\n\nstdout = \"\"\"\n1\n\n\"\"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from itertools import permutations\n\n    N = int(stdin)\n    # count = 0\n    # for i in range(1, N):\n    #     if not any([i + j == N - 1 for i in range(N) for j in range(i, N)]):\n    #         count += 1\n    # return count\n\n    # key = {i: i ** 2 for i in range(1, N + 1)}\n    # key.update({N ** 2: 0})\n    # key.update({0: N ** 2})\n    # key.update({N ** 2 - 1: N ** 2})\n    # key.update({N ** 2 - 2: N ** 2})\n    # key.update({N ** 2 + 1: N ** 2})\n    # key.update({N ** 2 + 2: N ** 2})\n    # key.update({N ** 2 + 3: N ** 2})\n\n    # key[N ** 2] = 1\n    # key[N ** 2 + 1] = -1\n    # key[N ** 2 + 2] = -2\n\n    # key[N ** 2 + 3] = -3\n    # print(key)\n    # for k in key:\n    #     if k > 0 and k < N ** 2:\n    #         if (key[k + 1] + 1) % 2 == (key[k + 2] + 2) % 2 and \\\n    #             (key[k + 3] + 3) % 2 == (key[k + 4] + 4) % 2 and \\\n    #             (key[k + 5] + 5) % 2 == (key[k + 6] + 6) % 2 and \\\n    #             (key[k + 7] + 7) % 2 == (key[k + 8] + 8) % 2 and \\\n    #             (key[k + 9] + 9) % 2 == (key[k + 10] + 10) % 2:\n    #             print(k)\n\n    #             # print(key[k + 1])\n    #             print(key[k + 2])\n    #             print(key[k + 3])\n    #             print(key[k + 4])\n    #             print(key[k + 5])\n    #             print(key[k + 6])\n    #             print(key[k + 7])\n    #             print(key[k + 8])\n    #             print(key[k + 9])\n    #             print(key[k + 10])\n\n    #             print(key[k - 1])\n    #             print(key[k - 2])\n    #             print(key[k - 3])\n    #             print(key[k - 4])\n    #             print(key[k - 5])\n    #             print(key[k - 6])\n    #             print(key[k - 7])\n    #             print(key[k - 8])\n    #             print(key[k - 9])\n    #             print(key[k - 10])\n\n    #             print(key[k - 1] + 1)\n    #             print(key[k - 2] + 2)\n    #             print(key[k - 3] + 3)\n    #             print(key[k - 4] + 4)\n    #             print(key[k - 5] + 5)\n    #             print(key[k - 6] + 6)\n    #             print(key[k - 7] + 7)\n    #             print(key[k - 8] + 8)\n    #             print(key[k - 9] + 9)\n    #             print(key[k - 10] + 10)\n\n    #             key[k] = key[k + 1] + 1\n    #             print(key[k])\n\n    # print(len(set([k for k in key if key[k] == 0])))\n\n    # print(key)\n    # print(key)\n    # return count\n\n    res = 0\n    nums = range(1, N + 1)\n\n    # \u521d\u59cb\u5316\u7684\u65f6\u5019\u521d\u59cb\u5316\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b58\u50a8\u8282\u70b9\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5305\u62ec\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9\uff0c\u8fd9\u91cc\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u6570\u5b57\n    # nums = [\n    #     [1, 2],\n    #     [3, 4],\n    #     [5, 6],\n    #     [7, 8],\n    #     [9, 10],\n    # ]\n\n    def helper(i, j):\n        if i >= j:\n            return 0\n        if key[i] == key[j]:\n            return helper(i + 1, j - 1)\n        else:\n            return (helper(i + 1, j) + 1 + helper(i, j - 1)) % 2\n\n    for k in range(1, N + 1):\n        if key[k] == key[N]:\n            res += helper(1, k)\n            break\n    return res % (998244353)\n\n\nsolution(input())\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    trees: List[Tuple[int, int]] = [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1)]\n    tree_count: int = 0\n    while trees:\n        # strip one tree\n        i: int = 0\n        while i < len(trees) and trees[i][0] <= n:\n            if trees[i][1]!= 1:\n                trees = trees[i+1:]\n                break\n            i += 1\n        # check for the number of striped trees\n        if trees:\n            if trees[i][1] % 2!= 0:\n                continue\n        # strip another tree\n        j = 0\n        while j < len(trees) and trees[j][0] <= n:\n            if trees[j][1] % 2 == 0:\n                break\n            j += 1\n        tree_count += len(trees) - j\n    return str(tree_count % 998244353)\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n*(2*n*n - n - 1)//2)\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    trees = stdin.strip().split()\n    left = True\n    right = True\n    for tree in trees:\n        left_tree = tree[1] < tree[2] or tree[2] < tree[1]\n        right_tree = tree[1] > tree[2] or tree[2] > tree[1]\n        if tree[0] == \"1\" and left and right_tree or tree[0] == \"0\" and left and not right_tree or tree[0] == \"1\" and not left and right_tree:\n            left = True\n        elif tree[0] == \"0\" and left and right_tree or tree[0] == \"1\" and not left and right_tree or tree[0] == \"0\" and left and not right_tree:\n            left = False\n        else:\n            right = False\n    return \"{}\".format(int(left and right))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin, file=sys.stderr)\n    a, b, n = map(int, stdin.split())\n    if (a % 2 == 0 and b % 2 == 1) or (a % 2 == 1 and b % 2 == 0):\n        return \"0\"\n    root = TreeNode(a)\n    root.left = TreeNode(b)\n    q = deque([root])\n    while len(q) > 0:\n        node = q.popleft()\n        if node.left is not None:\n            q.append(node.left)\n            if node.left.val % 2 == 1:\n                node.left.val = node.val\n            else:\n                node.left.val = node.val + 1\n        if node.right is not None:\n            q.append(node.right)\n            if node.right.val % 2 == 1:\n                node.right.val = node.val\n            else:\n                node.right.val = node.val + 1\n    return \"1\"\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    start = (1, 1)\n    dirs = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    visited = {start: 1}\n    for i in range(k):\n        new = {}\n        for x in visited:\n            visited[x] += 1\n            for d in dirs:\n                newx = x[0] + d[0], x[1] + d[1]\n                if 0 <= newx[0] < n and 0 <= newx[1] < m:\n                    if newx in new:\n                        if new[newx] < visited[x]:\n                            new[newx] = visited[x]\n                    else:\n                        new[newx] = visited[x]\n        visited = new\n    for x in visited:\n        if visited[x] == k:\n            return str(x[0]) + \" \" + str(x[1])"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    rows = m // 2\n    cols = m // 2\n    visited = [0] * (n + 2)\n    cell = [0] * (n + 2)\n    cell[0] = 1\n    cell[n + 1] = 2\n    count = 1\n    for i in range(n):\n        cell[i + 1] = (cell[i] + 1) % 2\n        cell[i + rows + 1] = (cell[i] + 1) % 2\n    while k > 0 and count <= n * m:\n        cell[1] = (cell[1] + 1) % 2\n        cell[rows + 1] = (cell[rows + 1] + 1) % 2\n        count += 1\n        visited = visited[:rows + 2] + cell[rows + 1:] + cell[:rows + 1] + visited[rows + 2:]\n        cell = visited[:]\n        cell[0] = 1\n        cell[n + 1] = 2\n        for i in range(n):\n            cell[i + 1] = (cell[i] + 1) % 2\n            cell[i + rows + 1] = (cell[i] + 1) % 2\n    return''.join(map(str, cell[1:]))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return f'{(n + 1) // 2 + 1, (m + 1) // 2 + 1}'\n\nsolution(input())\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    if k == 0:\n        return str(1) +'' + str(1)\n    # if k == 1:\n    #     return str(n) +'' + str(m)\n    \n    # m = 2\n    if m % 2!= 0:\n        print(\"Wrong answer, m should be even\")\n        return\n    # n = 2\n\n    k = k - 1\n    if n <= m:\n        print(\"Wrong answer, n should be bigger than m\")\n        return\n    \n    k = k + 1\n    \n    t = m\n    t = n - t\n    if t == 0:\n        return str(1) +'' + str(1)\n\n    # if k == 1:\n    #     return str(1) +'' + str(1)\n    \n    # n = 2\n    if m < n:\n        print(\"Wrong answer, n should be bigger than m\")\n        return\n    \n    if k == 0:\n        return str(1) +'' + str(1)\n    \n    if n % 2!= 0:\n        print(\"Wrong answer, m should be even\")\n        return\n\n    # n = 2\n    if k == 0:\n        print(\"Wrong answer, m should be bigger than n\")\n        return\n    \n    # m = 3\n    if k == 0:\n        print(\"Wrong answer, m should be bigger than n\")\n        return\n    \n    # n = 2\n    if n > m:\n        print(\"Wrong answer, n should be bigger than m\")\n        return\n    \n    if n == 2:\n        if m == 2:\n            return str(1) +'' + str(1)\n        \n        if m == 3:\n            return str(1) +'' + str(2)\n        \n        if m == 4:\n            return str(1) +'' + str(3)\n        \n        if m == 5:\n            return str(1) +'' + str(4)\n        \n        if m == 6:\n            return str(1) +'' + str(5)\n        \n        if m == 7:\n            return str(1) +'' + str(6)\n        \n        if m == 8:\n            return str(1) +'' + str(7)\n        \n        if m == 9:\n            return str(1) +'' + str(8)\n        \n        if m == 10:\n            return str(1) +'' + str(9)\n        \n        if m == 11:\n            return str(1) +'' + str(10)\n        \n        if m == 12:\n            return str(1) +'' + str(11)\n        \n        if m == 13:\n            return str(1) +'' + str(12)\n        \n        if m == 14:\n            return str(1) +'' + str(13)\n        \n        if m == 15:\n            return str(1) +'' + str(14)\n        \n        if m == 16:\n            return str(1) +'' + str(15)\n        \n        if m == 17:\n            return str(1) +'' + str(16)\n        \n        if m == 18:\n            return str(1) +'' + str(17)\n        \n        if m == 19:\n            return str(1) +'' + str(18)\n        \n        if m == 20:\n            return str(1) +'' + str(19)\n        \n        if m == 21:\n            return str(1) +'' + str(20)\n        \n        if m == 22:\n            return str(1) +'' + str(21)\n        \n        if m == 23:\n            return str(1) +'' + str(22)\n        \n        if m == 24:\n            return str(1) +'' + str(23)\n        \n        if m == 25:\n            return str(1) +'' + str(24)\n        \n        if m == 26:\n            return str(1) +'' + str(25)\n        \n        if m == 27:\n            return str(1) +'' + str(26)\n        \n        if m == 28:\n            return str(1) +'' + str(27)\n        \n        if m == 29:\n            return str(1) +'' + str(28)\n        \n        if m == 30:\n            return str(1) +'' + str(29)\n        \n        if m == 31:\n            return str(1) +'' + str(30)\n        \n        if m == 32:\n            return str(1) +'' + str(31)\n        \n        if m == 33:\n            return str(1) +'' + str(32)\n        \n        if m == 34:\n            return str(1) +'' + str(33)\n        \n        if m == 35:\n            return str(1) +'' + str(34)\n        \n        if m == 36:\n            return str(1) +'' + str(35)\n        \n        if m == 37:\n            return str(1) +'' + str(36)\n        \n        if m == 38:\n            return str(1) +'' + str(37)\n        \n        if m == 39:\n            return str(1) +'' + str(38)\n        \n        if m == 40:\n            return str(1) +'' + str(39)\n        \n        if m == 41:\n            return str(1) +'' + str(40)\n        \n        if m == 42:\n            return str(1) +'' + str(41)\n        \n        if m == 43:\n            return str(1) +'' + str(42)\n        \n        if m == 44:\n            return str(1) +'' + str(43)\n        \n        if m == 45:\n            return str(1) +'' + str(44)\n        \n        if m == 46:\n            return str(1) +'' + str(45)\n        \n        if m == 47:\n            return str(1) +'' + str(46)\n        \n        if m == 48:\n            return str(1) +'' + str(47)\n        \n        if m == 49:\n            return str(1) +'' + str(48)\n        \n        if m == 50:\n            return str(1) +'' + str(49)\n        \n        if m == 51:\n            return str(1) +'' + str(50)\n        \n        if m == 52:\n            return str(1) +'' +"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for i in range(1, n // 2 + 1):\n        for j in range(1, m // 2 + 1):\n            if i + j == n - 1:\n                if k == i * j:\n                    return str(i) +'' + str(j)\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    current_cell = (1, 1)\n    for _ in range(k):\n        if current_cell[0] == n and current_cell[1] == 1:\n            return\n        left = (current_cell[0], current_cell[1] - 1)\n        up = (current_cell[0] - 1, current_cell[1])\n        right = (current_cell[0], current_cell[1] + 1)\n        down = (current_cell[0] + 1, current_cell[1])\n        if left == (n, m) or up == (n, m) or right == (n, m) or down == (n, m):\n            return\n        if left[0] < 0 or left[0] > n - 1 or left[1] < 0 or left[1] > m - 1:\n            return\n        if up[0] < 0 or up[0] > n - 1 or up[1] < 0 or up[1] > m - 1:\n            return\n        if right[0] < 0 or right[0] > n - 1 or right[1] < 0 or right[1] > m - 1:\n            return\n        if down[0] < 0 or down[0] > n - 1 or down[1] < 0 or down[1] > m - 1:\n            return\n        current_cell = left if (left[0] == n and left[1] == m) else (up if (up[0] == n and up[1] == m) else (right if (right[0] == n and right[1] == m) else (down if (down[0] == n and down[1] == m) else (None, None))))\n\n    return\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = map(int, stdin.split())\n  return '{} {}'.format(1, 1)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[None] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = (i, j)\n    k = k % (n * m)\n    visited = set()\n    visited.add(matrix[0][0])\n    current = (0, 0)\n    for _ in range(k):\n        current = move_right(current, matrix)\n        if current not in visited:\n            visited.add(current)\n        current = move_up(current, matrix)\n        if current not in visited:\n            visited.add(current)\n        current = move_left(current, matrix)\n        if current not in visited:\n            visited.add(current)\n        current = move_down(current, matrix)\n        if current not in visited:\n            visited.add(current)\n    return str(current)\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = (int(i) for i in stdin.split())\n    cells = [[1, 1],\n             [2, 1],\n             [3, 1],\n             [4, 1],\n             [4, 2],\n             [4, 3],\n             [3, 4],\n             [2, 4],\n             [1, 4],\n             [1, 3],\n             [2, 3],\n             [3, 3],\n             [3, 2],\n             [3, 1]]\n    for i in range(0, k):\n        cells.append(cells.pop(0))\n    return str(cells[n - 1][m - 1])\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import itertools\n    X = int(stdin)\n    ans = [0]*2\n    for i in itertools.permutations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n        if X%i[0] == 0 and X%i[1] == 0:\n            ans = i\n            break\n    return''.join(map(str, ans))"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for a in range(1, X + 1):\n        for b in range(1, X + 1):\n            if (a * b) % X == 0:\n                return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 1:\n        return \"1 1\"\n    a, b = (int(x/2), int(x/2)) if x % 2 == 0 else (int(x/2), int(x/2)+1)\n    while True:\n        if a*b >= x:\n            break\n        a, b = (a+b, a) if a*b < x else (a, b+1)\n    return f\"{a} {b}\"\n    #N1 = int(x/2)\n    #N2 = int(x/2)+1\n    #if x%2==0:\n    #    return f\"{N1} {N2}\"\n    #else:\n    #    return f\"{N1} {N2-1}\""
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))[0]\n    for i in range(1, a+1):\n        for j in range(1, a+1):\n            if i*j == a:\n                return str(i) + \" \" + str(j)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, 10):\n        if i % a == 0:\n            continue\n        for j in range(1, 10):\n            if j % i == 0:\n                continue\n            if i > j:\n                break\n            if i * j == a:\n                return str(i) +'' + str(j)\n    return str(a) +'' + str(a)\n\nsolution(\"6\")\nsolution(\"4\")\nsolution(\"1\")\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X > 2:\n        return \"1 2\"\n    elif X == 2:\n        return \"1 1\"\n    else:\n        n = X\n        if n % 2!= 0:\n            while n > 1:\n                if (n % 2 == 0):\n                    n /= 2\n                else:\n                    n -= 1\n            return str(int(n)) + \" 1\"\n        else:\n            return \"1 \" + str(int(n / 2)) + \" \"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    x = stdin[0]\n    b = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    c = []\n    for i in range(len(b)):\n        if (x % b[i] == 0) and (x // b[i]!= 0):\n            c.append(b[i])\n    a = max(c)\n    return str(a) +'' + str(b[c.index(a)])\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    minimum_max, minimum_lcm = stdin.split(), stdin.split()\n    print(int(minimum_max[0]) if int(minimum_max[0]) < int(minimum_lcm[0]) else int(minimum_lcm[0]))\n    print(int(minimum_max[0]) if int(minimum_max[0]) > int(minimum_lcm[0]) else int(minimum_lcm[0]))\n    '''\n\n    x = int(stdin)\n    a, b = 1, 1\n    while x!= 1:\n        if x % a == 0:\n            a = x // a\n            break\n        else:\n            a += 1\n    while x!= 1:\n        if x % b == 0:\n            b = x // b\n            break\n        else:\n            b += 1\n    return str(a) +'' + str(b)\nsolution(input())\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    min_max = 100000000\n    for i in range(1, a // 2 + 1):\n        for j in range(i + 1, a // 2 + 1):\n            a1 = i * j\n            b1 = i + j\n            if (a1 * b1) == a:\n                if a1 < min_max:\n                    min_max = a1\n                    a_min = i\n                    b_min = j\n    return f\"{a_min} {b_min}\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, a):\n        if a % i == 0:\n            for j in range(1, a):\n                if i == j:\n                    continue\n                if a % j == 0:\n                    return str(i) +'' + str(j)\n\nsolution(input())\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a < 0 or b < 0 or c < 0:\n        return 0\n    lemon = 0\n    apple = 0\n    pear = 0\n    for i in range(0, a + 1):\n        if i * 3 + (i * 4) + (i * 2) == b:\n            lemon += i\n        if i * 3 + (i * 4) + (i * 2) == c:\n            pear += i\n        if i * 3 + (i * 4) + (i * 2) == b - i:\n            apple += i\n    print(lemon + apple + pear)\n    return lemon + apple + pear\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    return str(a+b+c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    return str(sum(l))\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n\n    if a <= 0 or b <= 0 or c <= 0:\n        return \"0\"\n    else:\n        a = a // 2\n        b = b // 2\n        c = c // 2\n        return str(a + b + c)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes the input and returns a string\n    \"\"\"\n    _, lemons, apples, pears = stdin.split()\n    lemon_sum, apple_sum, pear_sum = int(lemons), int(apples), int(pears)\n    apple_max, pear_max = lemon_sum // 2, pear_sum // 4\n    return str(max(apple_max, pear_max, 0))\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        a, b, c = (int(x) for x in stdin.split())\n    except ValueError:\n        return \"Invalid input!\"\n    if a + b + c < 0:\n        return \"Invalid input!\"\n    return str(a + b + c)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = stdin\n    lemon = int(lemon)\n    apple = int(apple)\n    pear = int(pear)\n    if lemon >= apple >= pear:\n        return f\"{int(lemon/2)} {int(apple/4)} {int(pear/2)}\"\n    elif lemon < apple:\n        if apple >= pear:\n            return f\"{int(lemon)} {int(apple)} {int(pear)}\"\n        else:\n            return \"0\"\n    elif apple < pear:\n        if lemon >= pear:\n            return f\"{int(apple)} {int(pear)} {int(lemon)}\"\n        else:\n            return \"0\"\n    elif pear < apple:\n        if lemon >= apple:\n            return f\"{int(lemon)} {int(apple)} {int(pear)}\"\n        else:\n            return \"0\""
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = map(int, stdin.split())\n    apple = b // 2\n    apple = apple + (apple * a)\n    return str(apple)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    fruits = stdin.split()\n    lemon, apple, pear = int(fruits[0]), int(fruits[1]), int(fruits[2])\n    lemon_count, apple_count, pear_count = 0, 0, 0\n    lemon_count += lemon//2\n    apple_count += (lemon//2) + (apple//4)\n    pear_count += (lemon//2) + (apple//4) + (pear//8)\n    if lemon_count > apple_count and lemon_count > pear_count:\n        print(lemon_count)\n    elif apple_count > lemon_count and apple_count > pear_count:\n        print(apple_count)\n    elif pear_count > apple_count and pear_count > lemon_count:\n        print(pear_count)\n    else:\n        print(0)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    t = a // 2\n    t2 = (t + 1) * (t + 1)\n    if b >= t2:\n        return str(t2)\n    else:\n        return str(0)\nsolution(\"4\")"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    players = sorted(map(int, stdin.split()))\n    min_player = min(players)\n    max_player = max(players)\n\n    if n < 2:\n        return \"NO\"\n\n    if min_player > max_player:\n        return \"NO\"\n\n    def check_team(team_a, team_b):\n        team_a_player_sum = sum(team_a)\n        team_b_player_sum = sum(team_b)\n        if team_a_player_sum!= team_b_player_sum:\n            return \"NO\"\n\n        for i in range(len(team_a)):\n            if team_a[i] > team_b[i]:\n                return \"NO\"\n        return \"YES\"\n\n    team_size = 2\n    while True:\n        if team_size >= n:\n            return check_team(players[:team_size], players[team_size:])\n        else:\n            team_size += 2\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n > 100:\n        return 'NO'\n\n    nums = stdin.split(' ')\n    nums = [int(x) for x in nums]\n    nums.sort()\n    \n    flag = 0\n\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            if nums[i] == nums[j]:\n                continue\n            if nums[j] > nums[i]:\n                flag = 1\n                break\n    if flag:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nsolution(input())"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    arr.append(arr[-1]+1)\n    p = [0]*n\n    m = []\n    for i in range(2*n):\n        m.append(0)\n    for i in range(1,n+1):\n        m[arr[i-1]-1] += 1\n    for i in range(n):\n        if m[i] == 0:\n            continue\n        else:\n            for j in range(m[i]):\n                p[i] += 1\n    if p[0]!= 0 and p[1]!= 0:\n        return \"YES\"\n    else:\n        return \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the answer as a string, or None if it's not possible to form a team.\"\"\"\n    n = int(stdin)\n    if n == 1:\n        return 'YES'\n    nums = [int(i) for i in stdin.split()]\n    nums.sort()\n    if nums[0] > nums[-1]:\n        nums.reverse()\n    for i in range(1, n // 2):\n        if nums[i]!= nums[-(i + 1)]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted([int(stdin) for stdin in stdin.split()])\n    if a[0]!= a[1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = sorted(list(map(int, stdin.split(' '))))\n    print(is_divisible(a[::2], a[1::2]))\n    return 'YES' if is_divisible(a[::2], a[1::2]) else 'NO'\n\n\ndef"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort(reverse=True)\n\n    if n == 2:\n        return \"YES\"\n\n    while n > 1:\n        if arr[0] > arr[1]:\n            arr.pop(0)\n            n -= 1\n        else:\n            arr.pop(1)\n            n -= 1\n\n    if n == 0:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] >= a[1]:\n        return \"NO\"\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p1, p2 = stdin.split()[1:]\n    p1 = [int(i) for i in p1]\n    p2 = [int(i) for i in p2]\n\n    if all(i > p2[0] for i in p1):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    players = sorted(map(int, stdin.split()))\n\n    # check if n = 2*(n - 1)\n    if n == 2*(n - 1):\n        # if players are equal then one player wins\n        if players[0] == players[1]:\n            return \"YES\"\n        # else one player wins\n        else:\n            return \"NO\"\n    # if n > 2*(n-1)\n    else:\n        # checking if players are equal\n        if players[0] == players[1]:\n            return \"YES\"\n        # if n > 2*(n - 1)\n        elif n > 2*(n - 1):\n            # if n > 3*(n - 1)\n            if n > 3*(n - 1):\n                # if n > 4*(n - 1)\n                if n > 4*(n - 1):\n                    # if n > 5*(n - 1)\n                    if n > 5*(n - 1):\n                        return \"NO\"\n                    # if n > 6*(n - 1)\n                    elif n > 6*(n - 1):\n                        return \"NO\"\n                    # if n > 7*(n - 1)\n                    elif n > 7*(n - 1):\n                        return \"NO\"\n                    # if n > 8*(n - 1)\n                    elif n > 8*(n - 1):\n                        return \"NO\"\n                # if n > 3*(n - 1)\n                elif n > 3*(n - 1):\n                    return \"NO\"\n            # if n > 2*(n - 1)\n            elif n > 2*(n - 1):\n                return \"NO\"\n        # if n < 2*(n - 1)\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0 and a[i] % a[i + 1] == 0:\n            k += 1\n            a.insert(i, a[i] + (a[i - 1] + a[i + 1]))\n    print(k)\n    return a"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    i = 0\n    count = 0\n    while i < n:\n        if a[i] % 2 == 0 and a[i+1] % 2 == 0 and a[i+2] % 2 == 0:\n            count += 2\n            a.insert(i, a[i]+a[i+1]+a[i+2])\n            i += 3\n            continue\n        elif a[i] % 2 == 0 and a[i+1] % 2!= 0:\n            count += 1\n            a.insert(i, a[i]+a[i+1])\n            i += 2\n            continue\n        elif a[i] % 2!= 0 and a[i+1] % 2 == 0:\n            count += 1\n            a.insert(i, a[i])\n            i += 1\n            continue\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    k = 0\n    for i in range(1, n):\n        k += 1\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                break\n            if j == i-1:\n                k += 1\n    return str(k) +'' +''.join(map(str, a))"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    arr = list(map(int, arr[1:]))\n    dp = {}\n    dp[0] = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j == i:\n                continue\n            if arr[i] % arr[j] == 0:\n                if (i, j) not in dp:\n                    dp[i, j] = 1\n                    dp[j, i] = 1\n                else:\n                    dp[i, j] = dp[i, j] + 1\n                    dp[j, i] = dp[j, i] + 1\n    res = 0\n    visited = set()\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j == i:\n                continue\n            if (i, j) not in dp:\n                continue\n            if (i, j) in visited:\n                continue\n            res = max(res, dp[i, j])\n            visited.add((i, j))\n    return str(res)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = [i for i in range(1, 10**9 + 1)]\n    for i in range(len(b)):\n        if b[i] in a:\n            b.pop(i)\n            break\n    return len(a) + len(b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds the array a that is co-prime to stdin and\n    returns the least number of elements to add to a\n    to make it co-prime.\n    \"\"\"\n    #\u00a0We need a sorted array of co-prime numbers\n    # so we will sort and only have to consider the co-prime numbers\n    #\u00a0in the sorted array\n    sorted_array = sorted(list(map(int, stdin.split())))\n\n    # We use an auxiliary array which will contain only\n    #\u00a0the co-primes\n    co_prime_array = []\n    for n in sorted_array:\n        if n == 1:\n            #\u00a01 is not a co-prime\n            break\n        if n % 2 == 0:\n            #\u00a02 is divisible by 2\n            #\u00a0so we need to find the next odd number\n            for i, n_2 in enumerate(sorted_array):\n                if n_2 % 2 == 0 and n_2 > n:\n                    #\u00a0n_2 is divisible by 2\n                    #\u00a0so we need to find the next odd number\n                    for j, n_2_2 in enumerate(sorted_array):\n                        if n_2_2 % 2 == 0 and n_2_2 > n_2:\n                            #\u00a0n_2_2 is divisible by 2\n                            #\u00a0so we need to find the next odd number\n                            for k, n_2_2_2 in enumerate(sorted_array):\n                                if n_2_2_2 % 2 == 0 and n_2_2_2 > n_2_2:\n                                    #\u00a0n_2_2_2 is divisible by 2\n                                    #\u00a0so we need to find the next odd number\n                                    co_prime_array.append(n_2_2_2)\n                                    break\n                            break\n                        else:\n                            continue\n                    break\n            break\n        else:\n            #\u00a0n is odd, so we don't need to find any odd numbers\n            co_prime_array.append(n)\n            break\n    return len(co_prime_array) + len(sorted_array)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    counter = 1\n    while a[counter] % 2 == 0:\n        counter += 1\n    return str(counter) + '\\n' + str(a[:counter + 1])"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_divider = max(a)\n    for i in range(max_divider+1):\n        if any(i % j == 0 for j in a):\n            if all(i % j!= 0 for j in a):\n                return i\n\n    return max_divider + 1\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    num = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            num += 1\n    return num\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    a = arr\n    for i in range(n):\n        if i == 0:\n            co_prime = 1\n        else:\n            co_prime = 1\n            for j in range(i):\n                if (a[i] % a[j] == 0) and (a[i]!= a[j]):\n                    co_prime = 0\n                    break\n        a.append(co_prime)\n    result = []\n    for i in range(n+1):\n        if a[i] == 1:\n            result.append(i)\n    for i in range(len(result)):\n        print(result[i], end=\" \")\n    print()\n    for i in range(len(result)):\n        print(result[i], end=\" \")\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nnum = []\nfor i in range(n):\n    if a[i] % 2 == 0:\n        num.append(a[i])\n    else:\n        a[i] += 1\n        if a[i] % 2 == 0:\n            a[i] -= 1\n\nprint(max(num))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def possible(num):\n        for i in range(1, N+1):\n            for j in range(i, N+1):\n                if num % (i + j) == 0:\n                    return False\n        return True\n\n    N, K = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    if N == 1:\n        return str(A[0])\n    A.sort()\n    for i in range(N):\n        if possible(A[i]):\n            A[i] = A[i] + 1\n            A[i] = A[i] - 1\n    for j in range(N):\n        if possible(A[j]):\n            A[j] = A[j] + 1\n    for i in range(N):\n        A[i] = A[i] - 1\n        if possible(A[i]):\n            A[i] = A[i] + 1\n    return str(max(A))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nN, K = map(int, stdin.split())\nA = list(map(int, stdin.split()))\n\nA = sorted(A, reverse=True)\n\nindex = 0\nfor i in range(len(A)):\n    A[i] += 1\n\ns = 0\nfor i in range(len(A)):\n    if A[i] % 2 == 0:\n        A[i] = int(A[i]/2)\n        s += A[i]\n    else:\n        s += A[i]\nprint(s)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    max_div = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            curr_div = 1\n            for k in range(N):\n                if arr[i] + arr[j] == arr[k]:\n                    curr_div *= arr[k]\n                elif arr[i] + arr[j] > arr[k]:\n                    curr_div *= arr[k]\n            max_div = max(max_div, curr_div)\n    return str(max_div)"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = lines[0].split()\n    n = int(n)\n    k = int(k)\n    a = lines[1:]\n    a.sort(key=lambda x: int(x), reverse=True)\n    ans = 1\n    for i in range(1, n):\n        ans = max(ans, a[i-1] + 1)\n    print(ans)"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    A = list(map(int, stdin.split()))\n    max_possible_divisor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            curr = A[i] + A[j]\n            if curr > 0 and curr % A[j] == 0:\n                max_possible_divisor = max(max_possible_divisor, curr)\n    return str(max_possible_divisor)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def do_operation(num1: int, num2: int) -> int:\n        if num1 > num2:\n            return num1 - num2\n        else:\n            return num2 - num1\n\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    arr = list(map(int, stdin[2:]))\n\n    left, right = 0, max(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if all(do_operation(a, mid) == 0 for a in arr):\n            right = mid\n        else:\n            left = mid + 1\n\n    return left\n\nsolution(\"2 3\")\n\nsolution(\"1 4\")"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    l = len(a)\n    m = 0\n    for i in range(l):\n        for j in range(i+1, l):\n            if a[i] % a[j] == 0:\n                m = max(m, a[j])\n    return str(m)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A = [0] + A\n    A = list(map(str, A))\n    A = \" \".join(A)\n    # print(A)\n    dp = [[0 for j in range(len(A))] for i in range(k + 1)]\n    for i in range(k + 1):\n        dp[i][0] = 1\n    for i in range(1, len(A)):\n        for j in range(k, 0, -1):\n            if A[i] == \"0\":\n                continue\n            dp[j][i] = max(1, dp[j][i - 1])\n            if i >= 2 and A[i] - 1 == A[i - 2] and j >= 2 and A[i] - 2 == A[i - 3]:\n                dp[j][i] = max(dp[j][i], dp[j - 2][i - 2] + dp[j - 2][i - 1] + 1)\n    # print(dp)\n    return str(max(max(dp)))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    k = int(k)\n    A = list(map(int, stdin.split()))\n    # Your code here\n    result = 1\n    for i in range(0, k):\n        for j in range(0, k):\n            A[i], A[j] = A[j] + 1, A[i] - 1\n            result = max(result, max(A))\n            A[i], A[j] = A[j] - 1, A[i] + 1\n    return str(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for n in range(40):\n        if (x + (2 ** n - 1)) % 2 == 1:\n            print(n, end=\" \")\n            x = (x + 1) % (2 ** n)\n    return \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nstdin_lines = stdin.splitlines()\nstdin_ints = list(map(int, stdin_lines[0].split()))\n\nx = stdin_ints[0]\n\nt = 0\nwhile x!= x+1:\n    t += 1\n    x = x+1\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns: (int) -- the number of operations\n    \"\"\"\n    x = int(stdin)\n    t = 40\n    if x <= 0:\n        return \"0\"\n    while t > 0:\n        if x % 2!= 0:\n            return str(t) + \" \" + str(x + 1)\n        x = x >> 1\n        t -= 1\n\nsolution(\"39\")\nsolution(\"1\")\nsolution(\"7\")"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = 0\n    while x < 2**40:\n        result += 1\n        x += 1\n    return str(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while True:\n        if (x + (t // 2) * 2 - 1) % 2 == 1:\n            break\n        t += 1\n    return f'{t // 2}'"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 40\n    while t > 0:\n        n = (t // 2) - 1\n        if x == (2 ** n - 1):\n            return str(t)\n        else:\n            x = x + 1\n            t = t - 2\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    for n in range(1, 40):\n        x = x ^ (2 ** n - 1)\n        if x & 1 == 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(40):\n        if x % 2 == 1:\n            x = (x + 1) >> 1\n            if i % 2 == 0:\n                print(i+1)\n        x >>= 1\n        if x == 1:\n            return f\"{i+1}\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    transforms = {0: (0,),\n                  1: (0, 1),\n                  2: (0, 1, 2),\n                  3: (0, 1, 2, 3, 4, 5, 6),\n                  4: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40),\n                  5: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41),\n                  6: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42),\n                  7: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50),\n                  8: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59),\n                  9: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63),\n                  10: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)}\n    return str(len(min(list(filter(lambda x: x > 0, transforms[x])), key=lambda x: len(x))))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = 0\n    for i in range(40):\n        result += (i % 2)\n        if (result + 1) == num:\n            return str(i)\n        elif (result + 1) > num:\n            return str(i - 1)\ndef"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    buckets = list(int(x) for x in stdin.split())\n    s_m = sum(buckets[:n])\n    ans = s_m\n    while True:\n        if s_m < k:\n            break\n        for i in range(n):\n            s_m -= buckets[i]\n            if s_m < k:\n                break\n            s_m += buckets[i]\n            if s_m > k:\n                break\n        ans = min(ans, s_m)\n    return str(ans)\n\nassert solution(\"2 6\") == \"2\"\nassert solution(\"3 6\") == \"1\"\nassert solution(\"3 6\") == \"2\"\nassert solution(\"6 7\") == \"7\"\nassert solution(\"7 7\") == \"7\"\nassert solution(\"3 10\") == \"2\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(1, k + 1):\n        dp[0][i] = dp[0][i - 1] + a[0]\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - a[i]] + a[i])\n    return dp[n - 1][k]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bucket = []\n    bucket_length = []\n    for i in stdin.splitlines():\n        bucket.append(i[0])\n        bucket_length.append(i[1:])\n    min_days = 100000\n    for i in range(len(bucket_length)):\n        if min_days > int(sum(bucket_length[i])):\n            min_days = int(sum(bucket_length[i]))\n    return str(min_days)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    st, last, ans = 0, 0, 0\n    while st < k:\n        last = st\n        if last > 0:\n            for i in range(st, k):\n                if l[i] == 0:\n                    last = i\n                    break\n        ans = max(ans, last - st + 1)\n        st = last + 1\n    return str(ans)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(' ')]\n    n = a[0]\n    k = a[1]\n    w = a[2]\n    temp = []\n    if k == 1:\n        return w\n    for i in range(n):\n        if k == 1:\n            return w\n        temp.append(k)\n        k = k - w\n    min_w = min(temp)\n    return w - min_w\n    # Write your code here"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(n):\n        sum += min(a[i], k)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return min(a)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, input().split())\n    n, k = a\n    a = list(a)\n    i = 0\n    while (i < n):\n        if (a[i] <= k):\n            k -= a[i]\n        else:\n            k = k - a[i]\n            i += 1\n    return i\n\nprint(solution(input()))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    buckets = []\n    for i in range(n):\n        bucket = int(stdin.split()[i])\n        buckets.append(bucket)\n    res = 0\n    buckets.sort()\n    for i in range(n):\n        if buckets[i] == k:\n            res += 1\n            continue\n        if buckets[i] == 1:\n            break\n        for j in range(i + 1, n):\n            if (buckets[i] + buckets[j]) > k:\n                break\n            res += 1\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # n, k = 6, 7\n    # a = [1, 2, 3, 4, 5, 6]\n    # n, k = 3, 3\n    # a = [2, 3, 4]\n    # n, k = 5, 6\n    # a = [1, 2, 3, 4, 5]\n\n    bucket = 1\n    while bucket < k:\n        for i in range(bucket, len(a), bucket):\n            if bucket == k:\n                break\n            if sum(a[i: i + bucket]) < k:\n                bucket = i\n                break\n\n    print(bucket)\n    return bucket\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    l = [x for x in stdin]\n    if k == 1:\n        if l[n-1]!= 'G':\n            return 'NO'\n        else:\n            return 'YES'\n    i = n-k\n    while i >= 0:\n        if l[i] == 'G':\n            i -= k\n        else:\n            i -= 1\n    return 'YES' if i >= 0 else 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = stdin.replace(\".\",\"G\")\n    grid = stdin.replace(\"#\",\"G\")\n    grid = grid.replace(\"T\",\"G\")\n    for x in range(len(grid)):\n        if grid[x] == \"#\":\n            k -= 1\n        if k == 0:\n            return \"YES\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  s = stdin.replace(\".\", \"G\").replace(\"#\", \"T\")\n  return \"YES\" if \"G\" in s[k] else \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(100):\n        n, k = map(int, stdin.split())\n        t, g, *l = stdin.split()\n        l = l[:k]\n        if any(l.count(t) > k for t in l):\n            print('YES')\n        else:\n            print('NO')\n    return 'NO'\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = list(stdin.rstrip())\n    # put a space between each empty cell\n    stdin = [''+ c for c in stdin]\n\n    # put an empty space at the end\n    stdin.append(' ')\n\n    n_length = len(stdin)\n    jump_length = k\n    i = 0\n    # iterate until jump length > n, if that is not possible, jump length is bigger than n\n    while jump_length <= n:\n        jump_index = None\n        # get the index of the empty cell that is going to be jumped\n        for j in range(i, n_length, jump_length):\n            if stdin[j] =='':\n                jump_index = j\n                break\n        if jump_index is None:\n            # if we can't find an empty cell within the jump length, jump length is bigger than n\n            break\n        # if we found an empty cell within the jump length, we check whether the line of cells is complete\n        # by checking whether the jump length would be shorter than n\n        if jump_index + jump_length <= n:\n            # if the line is complete, we check whether we can get to the target cell\n            if jump_index + jump_length <= n - k:\n                return 'YES'\n            # if we can't get to the target cell, we check whether we can get to the target cell by jumping one step back\n            if stdin[jump_index + jump_length] == '#' or stdin[jump_index + jump_length] == 'G':\n                return 'YES'\n        i = jump_index + jump_length\n\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.strip().split())\n  M = N - 1\n  matrix = []\n  for _ in range(N):\n    matrix.append(list(stdin[i] for i in range(M)))\n    M -= 1\n  rows = len(matrix)\n  cols = len(matrix[0])\n  #start = 0\n  #end = rows - 1\n  for k in range(1, K + 1):\n    #start = end\n    for row in range(rows):\n      for col in range(cols):\n        if matrix[row][col] == 'G':\n          if row < k:\n            if col > 0 and matrix[row + k][col - 1] == '#':\n              return \"YES\"\n            elif col < cols - 1 and matrix[row + k][col + 1] == '#':\n              return \"YES\"\n        elif matrix[row][col] == 'T':\n          if row > 0 and matrix[row - k][col] == '#':\n            return \"YES\"\n          elif row < rows - 1 and matrix[row + k][col] == '#':\n            return \"YES\"\n  return \"NO\""
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check_for_empty_cell(first_index: int, second_index: int, line: str) -> bool:\n        for i in range(first_index, second_index):\n            if line[i] == 'G' or line[i] == 'T':\n                return False\n        return True\n\n    def recursion(first_index: int, second_index: int, line: str, solution: str) -> None:\n        if check_for_empty_cell(first_index, second_index, line):\n            solution += 'T'\n            return\n        for i in range(first_index, second_index):\n            if line[i] == 'G':\n                line[i] = 'T'\n                recursion(i + 1, second_index, line, solution)\n                line[i] = 'G'\n            if line[i] == 'T':\n                line[i] = 'G'\n                recursion(first_index, i, line, solution)\n                line[i] = 'T'\n        solution += 'G'\n\n    first_index, second_index = map(int, stdin.split())\n    line = list(stdin)\n    solution = ''\n    recursion(first_index, second_index, line, solution)\n    return solution\n\nprint(solution(input()))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, k = map(int, stdin.split())\n    forbidden = {char for char in stdin}\n    if k == 1:\n        if 'G' in forbidden:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif k == 2:\n        count = 0\n        for i in range(n):\n            if stdin[i] == 'G':\n                count += 1\n            if i >= 2:\n                if stdin[i] == 'G':\n                    count -= 1\n                if count == 0:\n                    return \"YES\"\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    line = stdin.splitlines()[1:]\n    if line[0] == '#':\n        return 'NO'\n    i = 0\n    jumps = 1\n    while i < len(line):\n        if line[i] == 'G':\n            i += k\n        if line[i] == 'T':\n            if line[i + 1] == '#':\n                return 'NO'\n            else:\n                i += k\n        if line[i] == 'G':\n            i += k\n        if line[i] == 'T':\n            jumps += 1\n            i += k\n        i += 1\n    if jumps <= n - k:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cells = list(stdin.strip())\n    cell_dict = {}\n    for idx, cell in enumerate(cells):\n        cell_dict[idx] = cell\n    def num_of_neighbors(cell_idx):\n        count = 0\n        for i in range(cell_idx - k, cell_idx + k + 1):\n            if i > 0 and i < len(cells):\n                count += 1 if cells[i] == \"#\" else 0\n        return count\n    for i in range(len(cells)):\n        if num_of_neighbors(i) % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_{w}, x_{b}, y_{b}, r = map(int, stdin.split())\n    if r <= y_b or y_b - r <= y_1 or y_1 - y_2 <= r:\n        return \"-\"\n    elif x_b < y_b and abs(x_b - y_b) <= r:\n        return \"x_{w}\"\n    else:\n        return \"x_{w} = x_b + \" + str(2 * r / (y_b - y_1))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if x_b < r or x_b > (y_w - r):\n        return \"-1\"\n    x_w = (y_2 - y_1) / (y_w - y_1) * x_b - (r * y_w - y_2) / (y_w - y_1) * r\n    if x_b < x_w:\n        return str(x_w)\n    return \"-1\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_{w}, x_b, y_{b}, r = map(int, stdin.split())\n    if r < x_b + r or r < y_b - y_1 or r < y_{w} - y_2:\n        return \"-1\"\n    if x_b + r > y_2 - y_1 or x_b + r > y_2 - y_1:\n        return \"-1\"\n    if x_b + r > y_{w} - y_2 or x_b + r > y_w - y_1:\n        return \"-1\"\n    return str(x_b + r)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    y1, y2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y1 < y_w:\n        if abs(y_b - y_w) < r:\n            return str(round(x_b, 8))\n        if abs(y_b - y_w) > r:\n            return str(-1)\n    if y2 > y_w:\n        if abs(y_b - y_w) < r:\n            return str(round(x_b, 8))\n        if abs(y_b - y_w) > r:\n            return str(-1)\n    return str(round(x_b, 8))"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    return (\"%.6f\" % round(((y_b-y_1)/(r+r)), 8))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    x_w = (x_b - y_b) / (r + y_w - y_b)\n    return str(x_w)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    y1, y2, w, xb, yb, r = list(map(int, stdin.split()))\n    if xb <= w: return '-1'\n    if abs(y1-yb) <= r: return str(xb)\n    if abs(y2-yb) <= r: return str(xb)\n    return str(round((xb+(abs(y1-yb)*(w-xb)/(y2-y1)))*(y2-y1)/(y2-y1), 8))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (y_1, y_2, y_w, x_b, y_b, r) = map(int, stdin.split())\n    if (y_w > y_1 and y_w > y_2 and r > x_b):\n        return \"%.8f\" % (-1)\n    if (y_w < y_1 and y_w < y_2 and r > x_b):\n        return \"%.8f\" % (x_b)\n    x_w = (r**2 - (y_1 - y_2)**2) / 2\n    if x_w > y_w and x_w < y_1:\n        if (y_2 - y_1) >= (x_b + x_w) / 2:\n            return \"%.8f\" % (y_w)\n        if (y_2 - y_1) < (x_b + x_w) / 2:\n            if (y_w - y_2) >= x_w:\n                return \"%.8f\" % (y_2 - (x_w - (y_w - y_2)))\n            if (y_w - y_2) < x_w:\n                if x_b + x_w == y_1 + (x_b + x_w) / 2:\n                    return \"%.8f\" % (y_2 - (x_b + x_w))\n                else:\n                    return \"%.8f\" % (y_2 - (x_b + x_w))\n    if x_w < y_w and x_w < y_1:\n        if (y_1 - y_2) >= (x_b + x_w) / 2:\n            if (y_w - y_2) >= x_w:\n                return \"%.8f\" % (y_1 + (x_w - (y_w - y_1)))\n            if (y_w - y_2) < x_w:\n                return \"%.8f\" % (y_1 - (x_w - (y_w - y_1)))\n        if (y_1 - y_2) < (x_b + x_w) / 2:\n            if (y_2 - y_1) >= x_w:\n                return \"%.8f\" % (y_1 + (x_w - (y_2 - y_1)))\n            if (y_2 - y_1) < x_w:\n                if x_b + x_w == y_1 + (x_b + x_w) / 2:\n                    return \"%.8f\" % (y_2 - (x_b + x_w))\n                else:\n                    return \"%.8f\" % (y_2 - (x_b + x_w))\n\n    if x_w > y_w and x_w > y_1:\n        if (y_2 - y_1) >= (x_b + x_w) / 2:\n            if (y_w - y_2) >= x_w:\n                return \"%.8f\" % (y_1 + (x_w - (y_w - y_1)))\n            if (y_w - y_2) < x_w:\n                if x_b + x_w == y_1 + (x_b + x_w) / 2:\n                    return \"%.8f\" % (y_w - (x_b + x_w))\n                else:\n                    return \"%.8f\" % (y_w - (x_b + x_w))\n        if (y_2 - y_1) < (x_b + x_w) / 2:\n            if (y_w - y_2) >= x_w:\n                return \"%.8f\" % (y_1 + (x_w - (y_w - y_1)))\n            if (y_w - y_2) < x_w:\n                if x_b + x_w == y_1 + (x_b + x_w) / 2:\n                    return \"%.8f\" % (y_w - (x_b + x_w))\n                else:\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 10 13 10 3 1''')\n    '4.3750000000'\n    >>> solution('''1 4 6 2 2 1''')\n    '-1'\n    >>> solution('''3 10 15 17 9 2''')\n    '11.3333333333'\n    \"\"\"\n    y_1, y_2, y_w, x_b, y_b, r = list(map(int, stdin.split()))\n    if (y_1 > y_2):\n        y_1, y_2 = y_2, y_1\n    if (y_b + r >= y_1):\n        x_w = (r * (y_1 - y_b) / (y_2 - y_1)) + x_b\n        return f\"{x_w:.5f}\"\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    b, d, s = int(x[0]), int(x[1]), int(x[2])\n    if s!= 0:\n        s = d * s / s\n    if d!= 0:\n        d = b * d / d\n    if b!= 0:\n        b = d * b / b\n    print(b + d + s)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    breakfasts, dinners, suppers = map(int, stdin.split())\n    return \"1\" if breakfasts + dinners + suppers >= 2 else \"0\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, d, s = map(int, stdin.split())\n    return str(b + d + s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    breakfasts, dinners, suppers = stdin.split()\n    breakfasts = int(breakfasts)\n    dinners = int(dinners)\n    suppers = int(suppers)\n    \n    breakfasts_in_memo = {}\n    dinners_in_memo = {}\n    suppers_in_memo = {}\n    \n    breakfasts_count = 0\n    dinners_count = 0\n    suppers_count = 0\n    \n    for i in range(breakfasts):\n        if breakfasts_count in breakfasts_in_memo:\n            breakfasts_count = breakfasts_in_memo[breakfasts_count]\n        else:\n            breakfasts_count += 1\n            breakfasts_in_memo[breakfasts_count] = breakfasts_count\n        \n    for i in range(dinners):\n        if dinners_count in dinners_in_memo:\n            dinners_count = dinners_in_memo[dinners_count]\n        else:\n            dinners_count += 1\n            dinners_in_memo[dinners_count] = dinners_count\n        \n    for i in range(suppers):\n        if suppers_count in suppers_in_memo:\n            suppers_count = suppers_in_memo[suppers_count]\n        else:\n            suppers_count += 1\n            suppers_in_memo[suppers_count] = suppers_count\n        \n    breakfasts_count = breakfasts_count - 1\n    dinners_count = dinners_count - 1\n    suppers_count = suppers_count - 1\n    \n    return str(breakfasts_count + dinners_count + suppers_count)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    if (b+d+s)<1:\n        return '0'\n    return str(min(b, d, s))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return''.join(map(str, (\n        min((b, d, s), (d, s, b)),\n        min((d, s, b), (b, s, d)),\n        min((b, s, d), (d, b, s))\n    )))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = (int(x) for x in stdin.split())\n    return str(max(0, b - d - s))"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b, d, s = map(int, stdin.split())\n    if n == 1:\n        return \"0\" if d > s else str(d - s)\n    if n == 2:\n        return str(b + d + s) if d > b and b > s else \"0\"\n    return str(b + d + s - n)\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return str(min(b, d, s))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    for i in range(len(stdin)):\n        stdin[i] = str(stdin[i])\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            stdin[i] = stdin[i] +'' + str(j)\n    stdin = \"\".join(stdin)\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    for i in range(len(stdin)):\n        stdin[i] = str(stdin[i])\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            stdin[i] = stdin[i] +'' + str(j)\n    stdin = \"\".join(stdin)\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    for i in range(len(stdin)):\n        stdin[i] = str(stdin[i])\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            stdin[i] = stdin[i] +'' + str(j)\n    stdin = \"\".join(stdin)\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    for i in range(len(stdin)):\n        stdin[i] = str(stdin[i])\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            stdin[i] = stdin[i] +'' + str(j)\n    stdin = \"\".join(stdin)\n    return \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    if len(a)!= x * y:\n        return 'NO'\n    \n    for i in range(x):\n        for j in range(y):\n            if j == y - 1:\n                if a[j]!= i + 1:\n                    return 'NO'\n            else:\n                if a[j]!= i * a[j + 1]:\n                    return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # create a matrix\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    \n    # find the start\n    x, y = 1, 1\n    while matrix[x][y]!= 1:\n        x += 1\n        y += 1\n    \n    # create visited matrix\n    visited = []\n    for i in range(n):\n        visited.append([0] * n)\n        \n    # find possible path\n    path = []\n    x = 1\n    while matrix[x][y]!= 1:\n        path.append(matrix[x][y])\n        visited[x][y] = 1\n        x += 1\n        y += 1\n        \n    # check if the sequence is valid\n    return \"YES\" if all(1 <= x <= 10**9 for x in path) and not any(visited[i][j] >= 2 for i in range(1, n) for j in range(1, n)) else \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    data = stdin.split()[1:]\n\n    for i in range(1, n + 1):\n        x = i * (i - 1) // 2\n        for j in range(1, n + 1):\n            y = j * (j - 1) // 2\n            if (x, y) in data:\n                x, y = y, x\n            print(x, y, end=' ')\n        print()\n\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    n = int(x[0])\n    y = int(x[1])\n    a = list(map(int, x[2].split(\" \")))\n    l = []\n    for i in range(n):\n        l.append([])\n        for j in range(y):\n            l[i].append(0)\n    for i in range(n):\n        for j in range(y):\n            l[i][j] = a[n * i + j]\n    if len(l) > 4:\n        return \"NO\"\n    if len(l) == 1:\n        return str(1) + \" \" + str(1)\n    for i in range(1, y + 1):\n        l.append([])\n        for j in range(1, x + 1):\n            l[-1].append(1)\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            l[-1][-1] = l[-1][-1] + 1\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i][j - 1] + l[i - 1][j] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i][j - 1] + l[i - 1][j] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i][j - 1] + l[i - 1][j] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i][j - 1] - l[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, y + 1):\n            l[i][j] = l[i][j] + l[i - 1][j] + l[i"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    path = stdin.split(\"\\n\")[1:]\n    path = [(int(i), int(j)) for i, j in map(lambda x: x.split(), path)]\n    x = 0\n    y = 0\n    for (i, j) in path:\n        if (i + 1) > x:\n            x = i + 1\n        if (j + 1) > y:\n            y = j + 1\n\n    # print(x, y)\n\n    for i in range(x):\n        for j in range(y):\n            if i == j:\n                if i + 1 == x:\n                    if j + 1 == y:\n                        if i == 0:\n                            if j == 0:\n                                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = input()\nn = int(stdin)\narr = list(map(int, stdin.split()))\nx = y = None\nfor i in range(n):\n    if arr[i] == 1:\n        if x is None:\n            x = i\n        elif y is None:\n            y = i\n        else:\n            return \"NO\"\n    if arr[i] == 2:\n        if x is None:\n            x = i\n        elif y is None:\n            y = i\n        else:\n            return \"NO\"\n    if arr[i] == 3:\n        if y is None:\n            y = i\n    if arr[i] == 4:\n        if x is None:\n            x = i\n        elif y is None:\n            y = i\n        else:\n            return \"NO\"\nprint(f\"YES {x} {y}\")\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = y = None\n    for line in stdin.split('\\n'):\n        if x is None and y is None:\n            x, y = line.split()\n        elif line == '':\n            return 'NO'\n        elif int(line) > int(x) + int(y):\n            return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = []\n    for i in range(n):\n        c += stdin.split()\n    m = {}\n    for i in range(len(c)):\n        if m.get(c[i]) == None:\n            m[c[i]] = 1\n        else:\n            m[c[i]] += 1\n    if len(c) == 1:\n        if c[0] == m[c[0]]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(len(c)):\n        if c[i]!= m[c[i]]:\n            if c[i]!= m[c[i] + 1]:\n                if c[i]!= m[c[i] - 1]:\n                    if c[i]!= m[c[i] - 2]:\n                        if c[i]!= m[c[i] - 3]:\n                            if c[i]!= m[c[i] + 2]:\n                                if c[i]!= m[c[i] + 3]:\n                                    return \"NO\"\n                                else:\n                                    return \"YES\"\n                            else:\n                                return \"YES\"\n                        else:\n                            return \"YES\"\n                    else:\n                        return \"YES\"\n                else:\n                    return \"YES\"\n            else:\n                return \"YES\"\n        else:\n            return \"YES\"\n\nsolution(\"3\\n\")\nsolution(\"1 10\")\nsolution(\"2\\n1 2\\n\")\nsolution(\"6\\n1 10\\n\")\n\n-----Test_with_time_limit-----\n---input---\n10\n1 2 3 6 9 8 5 2\n---output---\nYES\n3 3\n\n---input---\n2\n1 10\n---output---\nYES\n4 9\n\n---input---\n6\n1 2 1 2 5 3\n---output---\nNO\n\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    b = b.lstrip()\n    if not b:\n        return \"-1\"\n    counter = 0\n    if a == b:\n        return \"0\"\n    for i in range(len(b)):\n        if a[i] == b[i]:\n            counter += 1\n        else:\n            break\n    return a[counter:] + a[:counter]\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    s_a = a +''\n    b = b.replace(' ', '')\n    b = b.replace(' ', '')\n\n    if not b:\n        return '-'\n\n    if b[0] == 'a':\n        return s_a\n    elif b[0] == 'c':\n        return '-'\n    else:\n        cnt = 1\n        curr_b = b[0]\n        b = b[1:]\n        while cnt <= len(b):\n            if curr_b == b[cnt]:\n                cnt += 1\n            else:\n                break\n\n        if cnt == len(b) and b!= '':\n            b = b[0:0]\n        else:\n            b = b[0:cnt]\n\n        return s_a + b\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return a if len(b) > len(a) else b\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    if len(b) == 0:\n        return '-'\n    # returns shortest subsequence of string a, which is obtained by deleting a character from string b\n    s = subsequence(b)\n    return s\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    stdin_list = stdin.split()\n    stdin_list[1] = stdin_list[1].replace(\"-\", \"\")\n    return stdin_list[0][:len(stdin_list[0]) - len(stdin_list[1])]\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    remove = 0\n    if len(a) > len(b):\n        return '-'\n    elif len(a) == 0:\n        return b\n    for i in range(len(b)):\n        if a[i] == b[i]:\n            remove += 1\n        else:\n            break\n    return b[:i] + b[i + remove:]\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    # if a and b share no symbols, then only empty string\n    if len(a) == len(b):\n        return '-'\n    # need to find which part of string b is shorter\n    short_str, long_str = (b, a) if len(a) < len(b) else (a, b)\n    # count number of symbols in long_str\n    count = 0\n    for symbol in long_str:\n        count += 1 if symbol in short_str else 0\n    # if you have only 1 symbol in long_str, then you can erase it\n    if count == 1:\n        return long_str\n    # else you have to erase some symbols\n    else:\n        # count number of symbols in short_str\n        short_count = 0\n        for symbol in short_str:\n            short_count += 1 if symbol in long_str else 0\n        # calculate how many symbols you can erase\n        eliminated = min(short_count, count)\n        # count symbols in short_str\n        for i in range(eliminated):\n            short_str = short_str.replace(short_str[i], '', 1)\n        # return what is left after counting\n        return short_str + '-' * (eliminated - short_count)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    n = len(b)\n    if n == 0: return '-'\n    res = []\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            res.append(b[0])\n            l = 1\n            for j in range(1, n):\n                if b[j] == a[i+l]:\n                    l += 1\n                else:\n                    break\n            if l == n:\n                res.append(b[0])\n    return ''.join(res)"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    len_a = len(a)\n    len_b = len(b)\n    if len_a < len_b:\n        return a\n    elif len_a == len_b:\n        return b\n    else:\n        result = ''\n        counter = 0\n        a = a[::-1]\n        b = b[::-1]\n        while counter!= len_b:\n            if b[counter] == a[counter]:\n                counter += 1\n            else:\n                result += a[counter]\n                break\n        return result[::-1]\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum([int(x == '+') for x in stdin])\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    st = stdin.replace('+', '+ ').replace('-', '- ')\n    # print(st)\n    s = st.split()\n    # print(s)\n    t = set(map(int, s))\n    # print(t)\n    return len(t)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3\n   ... ----\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 4\n   ... ++\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 2\n   ... +-\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 5\n   ... +-\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 1\n   ... ++\n   ... ''')\n    '1'\n    '''\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    stones_cnt = 0\n    for i in range(n):\n        if s[i] == '-':\n            stones_cnt -= 1\n        else:\n            stones_cnt += 1\n    return str(stones_cnt)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    pile = \"-\" * n\n    for i in range(n):\n        # print(i, pile, stdin)\n        if pile[i] == \"-\" and stdin[i] == \"+\":\n            pile = pile[:i] + \"-\" + pile[i+1:]\n        if pile[i] == \"+\" and stdin[i] == \"-\":\n            pile = pile[:i] + \"-\" + pile[i+1:]\n    # print(pile)\n    return pile\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = '1'\n    num_stones, operations = stdin\n    num_stones = int(num_stones)\n    # operations = '-'\n    num_minus = operations.count('-')\n    num_plus = operations.count('+')\n    if num_stones <= num_minus + num_plus:\n        print(num_minus)\n    else:\n        print(num_minus + num_plus)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    operations = list(stdin)\n    count = 0\n    for i in range(len(operations)):\n        if operations[i] == '+':\n            count += 1\n        elif operations[i] == '-':\n            count -= 1\n        elif operations[i] =='':\n            continue\n        else:\n            print(\"Something is wrong with input\")\n            return \"Something is wrong with input\"\n    if count >= 0:\n        return \"0\"\n    return str(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    stones = stdin.split()\n    return str(min(len(stones), len(set(stones))))\n\nprint(solution(input()))"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin.split())\n\n    return str(sum(1 for i in range(n) if s[i] == '-'))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    return str(3-n)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    while n > 0:\n        if stdin == \"++++\":\n            n = n - 1\n            result = result + 1\n        elif stdin == \"+++\":\n            n = n - 1\n            result = result + 2\n        elif stdin == \"++\":\n            n = n - 1\n            result = result + 3\n        else:\n            n = n - 1\n            result = result + 4\n    return str(result)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        rubles, liter_glass_bottle, liter_plastic_bottle = (int(line) for line in stdin.split('\\n'))\n        if 2*liter_plastic_bottle > liter_glass_bottle:\n            print(liter_glass_bottle + liter_plastic_bottle)\n        else:\n            print(liter_glass_bottle)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    n = int(stdin[0])\n    a, b, c = list(map(int, stdin[1:]))\n    # print(n, a, b, c)\n    count_bottle = 0\n    count_glass_bottle = 0\n    for i in range(n):\n        if a < b:\n            count_glass_bottle += 1\n        else:\n            count_bottle += 1\n            count_glass_bottle += 1\n        count_bottle += (count_glass_bottle - 1)\n        if count_bottle > c:\n            return \"NO\"\n\n    if count_glass_bottle > 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(i) for i in stdin.split()))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n <= 10:\n        return '1'\n    a, b, c = list(map(int, stdin.split()))\n    if a > b:\n        # print(a, b, c)\n        # print(c, b, a)\n        if (a - c) < (b - c) and (c > b):\n            return str(c)\n        return str(b)\n    return str(a)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    money_glass = 0\n    money_plas = 0\n    money_empty = 0\n    while money_glass <= n and money_plas <= n and money_empty <= n:\n        if money_empty > money_plas > money_glass:\n            money_empty += 1\n            money_glass = 0\n            money_plas = 0\n            money_empty = 0\n        elif money_empty <= money_plas:\n            money_plas += 1\n            money_glass = 0\n            money_empty = 0\n        elif money_empty > money_plas:\n            money_empty = 0\n            money_plas = 0\n            money_glass = 0\n    return str(money_empty)\n\nprint(solution(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y, z = (11, 9, 8)\n    if n <= x:\n        return str(n)\n    if n <= y:\n        return str(n-x)\n    if n <= z:\n        return str(n-x-y)\n    return str(n-x-y-z)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n == 0:\n        return \"0\"\n\n    if a > c:\n        return f\"{a - c}\" if b > c else f\"{b}\"\n    if a > b:\n        return f\"{a - b}\" if a > c else f\"{a}\"\n    return f\"{c}\" if a > b else f\"{c - b}\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a + b - c)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_kefir, num_of_glass_bottles = map(int, stdin.split())\n    if num_of_kefir > 0:\n        return num_of_kefir\n    elif num_of_glass_bottles <= num_of_kefir:\n        return num_of_kefir\n    elif num_of_kefir < num_of_glass_bottles:\n        return num_of_kefir\n    else:\n        return num_of_kefir - num_of_glass_bottles"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k1, k2 = map(int, stdin.split())\n    x = k1\n    y = k2\n    z = n - 1\n    if x > y:\n        return '1'\n    if x == y:\n        return '0'\n    while z > 0:\n        if x > y:\n            x, y = y, x\n        if y > x:\n            x, y = y, x\n        if x == y:\n            return '-1'\n        z -= 1\n    return '2'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    # n = 3\n    k1 = int(stdin.strip().split()[0])\n    # k1 = 2\n    k2 = int(stdin.strip().split()[1])\n    # k2 = 1\n    m = int(stdin.strip().split()[2])\n    # m = 3\n    \n    card_values = list(range(1, n + 1))\n    card_values.sort()\n    \n    out = ''\n    c1_cards = []\n    c2_cards = []\n    \n    while len(c1_cards) < k1:\n        c1_cards.append(card_values.pop())\n    \n    while len(c2_cards) < k2:\n        c2_cards.append(card_values.pop())\n    \n    c1_card_value = c1_cards[-1]\n    c2_card_value = c2_cards[-1]\n    \n    while m!= 0:\n        if c1_card_value > c2_card_value:\n            c1_cards.append(card_values.pop())\n            c2_cards.append(card_values.pop())\n            c1_card_value = c1_cards[-1]\n            c2_card_value = c2_cards[-1]\n        m -= 1\n    \n    if c1_cards == c2_cards:\n        out = '-1'\n    else:\n        if len(c1_cards) > len(c2_cards):\n            out = '1'\n        else:\n            out = '2'\n    return out\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k_1, k_2 = map(int, stdin.split())\n    if n > 2:\n        top_1 = list(map(int, stdin.split()))\n        top_2 = list(map(int, stdin.split()))\n        if top_1[-1] > top_2[-1]:\n            print(f\"2 {1}\")\n        elif top_1[-1] == top_2[-1]:\n            print(f\"0 {2}\")\n        else:\n            print(f\"1 {1}\")\n        return\n    else:\n        if k_1 > k_2:\n            print(f\"2 {1}\")\n        elif k_1 == k_2:\n            print(f\"0 {2}\")\n        else:\n            print(f\"1 {1}\")\n        return\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns solution.\"\"\"\n    # your code here\n    #stdin = sys.stdin.read()\n    n = int(stdin)\n    print(n)\n    k_1 = int(stdin)\n    k_1 = sorted(list(map(int, stdin.split(' '))), reverse = True)\n    k_2 = int(stdin)\n    k_2 = sorted(list(map(int, stdin.split(' '))), reverse = True)\n    print(k_1)\n    print(k_2)\n    player_1 = k_1\n    player_2 = k_2\n    for i in range(n):\n        if player_1[i] > player_2[i]:\n            player_1, player_2 = player_2, player_1\n        print(player_1)\n        print(player_2)\n    return f\"{player_1.count(max(player_1))} {player_2.count(max(player_2))}\"\n\n\nsolution(input())\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    my_cards = list(map(int, stdin.split()))\n    \n    my_counts = Counter(my_cards)\n    \n    def find_value(my_value, cards, cards_count):\n        for idx, val in enumerate(cards):\n            if val == my_value:\n                return (idx, cards_count[val])\n        return None\n        \n    first_card = find_value(1, my_cards, my_counts)\n    second_card = find_value(2, my_cards, my_counts)\n    \n    if first_card is None or second_card is None:\n        return \"2\"\n    \n    first_card_idx, first_card_count = first_card\n    second_card_idx, second_card_count = second_card\n    \n    while True:\n        if not first_card_count and not second_card_count:\n            return \"2\"\n        elif not second_card_count:\n            return \"1\"\n        elif not first_card_count:\n            return \"2\"\n        else:\n            first_card_idx, first_card_count = first_card\n            second_card_idx, second_card_count = second_card\n            \n            if first_card_idx > second_card_idx:\n                first_card_count -= 1\n                second_card_count -= 1\n            elif first_card_idx < second_card_idx:\n                first_card_count -= 1\n                second_card_count -= 1\n                \n            if first_card_count == 0:\n                return \"1\"\n            if second_card_count == 0:\n                return \"2\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  k1 = int(stdin)\n  k2 = int(stdin)\n  \n  k1_card_list = list(map(int,stdin.split()))\n  k2_card_list = list(map(int,stdin.split()))\n  k1_card_list.sort()\n  k2_card_list.sort()\n  \n  i = 0\n  j = 0\n  k = 0\n  \n  while i < n:\n    if k1_card_list[i] > k2_card_list[j]:\n      k += 1\n      i += 1\n      j += 1\n    elif k1_card_list[i] < k2_card_list[j]:\n      k += 1\n      j += 1\n    else:\n      k += 1\n      i += 1\n      j += 1\n  return str(k) + \" \" + str(k)\n  \n  \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k_1 = int(stdin.split()[1])\n    k_2 = int(stdin.split()[2])\n\n    # 1) If k_1!= k_2, and a player loses, the other player wins\n    if k_1!= k_2:\n        return f\"{(n + 1) - max(k_1, k_2)} {max(k_1, k_2) + 1}\"\n    # 2) If k_1 == k_2, then draw the game\n    else:\n        return f\"{(n + 1) - min(k_1, k_2)} {min(k_1, k_2) + 1}\""
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(*solution(stdin.split()))\n\nprint(solution(input()))\n\nOutput\n1.0.5\n5.0.2\n\n\"\"\"\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k_1 = int(stdin)\n    k_2 = int(stdin)\n    res = '-1'\n    while k_1 + k_2!= n:\n        if k_1 > k_2:\n            k_1 -= 1\n            k_1_val = k_1\n            k_2 -= 1\n            k_2_val = k_2\n        else:\n            k_2 -= 1\n            k_2_val = k_2\n            k_1 -= 1\n            k_1_val = k_1\n        if k_1_val > k_2_val:\n            res = '2'\n            break\n        if k_1_val < k_2_val:\n            res = '1'\n            break\n        if k_1_val == k_2_val:\n            k_1 -= 1\n            k_1_val = k_1\n            k_2 -= 1\n            k_2_val = k_2\n    if k_1 + k_2 == n:\n        res = '-1'\n    return str(res)\n\nstdin = '''3\n1 2\n2 1 3\n\nOutput\n2 2\nInput\n4\n3 5\n2 6 2\n\nOutput\n-1'''\n\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes stdin and prints 2 integers as a result.\n    \"\"\"\n    n = int(stdin)\n\n    cards1 = list(map(int, stdin.split()))\n    cards2 = list(map(int, stdin.split()))\n\n    print(f\"{cards1.count(max(cards1))} {cards2.count(max(cards2))}\")\n\n    return \"\""
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count_words = 0\n    count_letters = 0\n    count_digits = 0\n    count_special_chars = 0\n    for c in stdin:\n        if c.isupper():\n            count_words += 1\n        if c.islower():\n            count_letters += 1\n        if c.isdigit():\n            count_digits += 1\n        if c in [\"_\", \".\"]:\n            count_special_chars += 1\n    if count_words >= 5 and count_letters >= 1 and count_digits >= 1 and count_special_chars >= 1:\n        print(\"Correct\")\n    else:\n        print(\"Too weak\")"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pw = stdin.strip().split(\"\\n\")[0]\n    if is_complex(pw):\n        print(\"Correct\")\n    else:\n        print(\"Too weak\")\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = \"Correct\" if all([len(stdin) >= 5, any(any(char.isdigit() for char in stdin), any(char.isupper() for char in stdin)), any(any(char.islower() for char in stdin), any(char.isalpha() for char in stdin))]) else \"Too weak\"\n    print(res)"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count_cap_letter, count_lower_letter, count_digit = 0, 0, 0\n    for el in stdin:\n        if el.isupper():\n            count_cap_letter += 1\n        elif el.islower():\n            count_lower_letter += 1\n        elif el.isdigit():\n            count_digit += 1\n    if count_cap_letter == 0 and count_lower_letter == 0 and count_digit == 0:\n        return \"Correct\"\n    if (count_cap_letter < 1 or count_lower_letter < 1 or count_digit < 1) and count_cap_letter >= 5 and count_lower_letter >= 5 and count_digit >= 5:\n        return \"Correct\"\n    else:\n        return \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(len(stdin)):\n        if any(c.isupper() for c in stdin):\n            return 'Correct'\n        elif any(c.islower() for c in stdin):\n            return 'Too weak'\n        elif any(c.isdigit() for c in stdin):\n            return 'Too weak'\n        elif any(c in '!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~' for c in stdin):\n            return 'Correct'\n    return 'Too weak'"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin\n    if password.isalnum():\n        if password.isupper():\n            if password.islower():\n                if password.isdigit():\n                    return \"Correct\"\n                else:\n                    return \"Too weak\"\n            else:\n                return \"Too weak\"\n        else:\n            return \"Too weak\"\n    else:\n        return \"Too weak\""
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for letter in stdin:\n        if letter.isupper():\n            if letter.lower()!= letter:\n                return \"Too weak\"\n        elif letter.islower():\n            if letter.upper()!= letter:\n                return \"Too weak\"\n        elif letter.isdigit():\n            if letter.lower()!= letter:\n                return \"Too weak\"\n        else:\n            return \"Too weak\"\n    return \"Correct\""
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if (n.find(\"!\") > -1 or n.find(\"?\") > -1 or n.find(\".\") > -1 or n.find(\",\") > -1 or n.find(\"_\") > -1):\n        if (n.find(\"A\") > -1):\n            if (n.find(\"a\") > -1):\n                if (n.find(\"B\") > -1):\n                    if (n.find(\"b\") > -1):\n                        if (n.find(\"C\") > -1):\n                            if (n.find(\"c\") > -1):\n                                if (n.find(\"D\") > -1):\n                                    if (n.find(\"d\") > -1):\n                                        if (n.find(\"E\") > -1):\n                                            if (n.find(\"e\") > -1):\n                                                if (n.find(\"F\") > -1):\n                                                    if (n.find(\"f\") > -1):\n                                                        if (n.find(\"G\") > -1):\n                                                            if (n.find(\"g\") > -1):\n                                                                if (n.find(\"H\") > -1):\n                                                                    if (n.find(\"h\") > -1):\n                                                                        if (n.find(\"I\") > -1):\n                                                                            if (n.find(\"i\") > -1):\n                                                                                if (n.find(\"J\") > -1):\n                                                                                    if (n.find(\"j\") > -1):\n                                                                                        if (n.find(\"K\") > -1):\n                                                                                            if (n.find(\"k\") > -1):\n                                                                                                if (n.find(\"L\") > -1):\n                                                                                                    if (n.find(\"l\") > -1):\n                                                                                                        if (n.find(\"M\") > -1):\n                                                                                                            if (n.find(\"m\") > -1):\n                                                                                                                if (n.find(\"N\") > -1):\n                                                                                                                     if (n.find(\"n\") > -1):\n                                                                                                                        if (n.find(\"O\") > -1):\n                                                                                                                            if (n.find(\"o\") > -1):\n                                                                                                                                if (n.find(\"P\") > -1):\n                                                                                                                                       if (n.find(\"p\") > -1):\n                                                                                                                                           if (n.find(\"Q\") > -1):\n                                                                                                                                                   if (n.find(\"q\") > -1):\n                                                                                                                                                           if (n.find(\"R\") > -1):\n                                                                                                                                                               if (n.find(\"r\") > -1):\n                                                                                                                                                                           if (n.find(\"S\") > -1):\n                                                                                                                                                                                      if (n.find(\"s\") > -1):\n                                                                                                                                                                                             if (n.find(\"T\") > -1):\n                                                                                                                                                                                                                      if (n.find(\"t\") > -1):\n                                                                                                                                                                                                                                                                      if (n.find(\"U\") > -1):\n                                                                                                                                                                                                                                                                                                              if (n.find(\"u\") > -1):\n                                                                                                                                                                                                                                                                                                                          if (n.find(\"V\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                          if (n.find(\"v\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"W\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (n.find(\"w\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (n.find(\"X\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"x\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (n.find(\"Y\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"y\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (n.find(\"Z\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"z\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"0\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"1\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"2\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"3\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"4\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"5\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"6\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"7\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"8\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (n.find(\"9\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"_\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"-\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"+\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\"=\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\":\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\",\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\";\") > -1):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               if (n.find(\".\") > -1):"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: List[int] = stdin.split()[1:]\n    b: List[int] = stdin.split()[2:]\n\n    # groups A and B\n    groups: List[List[int]] = [[], []]\n    group_length: List[int] = [0, 0]\n    for a_i in range(n):\n        group = groups[a_i % 2]\n        group.append(a[a_i])\n        group_length[a_i % 2] += 1\n\n    # exchange students\n    while True:\n        for a_i in range(n):\n            a_cand = a[a_i]\n            b_cand = b[a_i]\n            for b_i in range(n):\n                if group_length[0] == group_length[1]:\n                    break\n\n                if group_length[0] > group_length[1]:\n                    if a_cand > b_cand:\n                        a_cand, b_cand = b_cand, a_cand\n                        group_length[0] += 1\n                elif group_length[0] < group_length[1]:\n                    if a_cand < b_cand:\n                        a_cand, b_cand = b_cand, a_cand\n                        group_length[1] += 1\n\n                if group_length[0] == group_length[1]:\n                    break\n\n            if group_length[0]!= group_length[1]:\n                break\n\n        if group_length[0] == group_length[1]:\n            break\n\n    # print results\n    print(f'{a_cand} {b_cand}')\n\n    return a_cand, b_cand\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.split()))\n    grades = [lst[i] - lst[i + 1] for i in range(0, n, 2)]\n    return solution_aux(grades)\n\n\ndef"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    ac_perf_a = stdin[1]\n    ac_perf_b = stdin[2]\n    count = 0\n    students = []\n    while len(students)!= n:\n        # (students.append(random.randint(1, 5)))\n        students.append(students.pop() + 1)\n    students.sort()\n    while len(students)!= 0:\n        if students[0] <= 1:\n            students.pop(0)\n        elif students[0] >= 5:\n            students.pop(0)\n        else:\n            break\n    if len(students) == n:\n        count += 1\n    while len(students)!= 0:\n        if students[0] == 1:\n            students.pop(0)\n        elif students[0] == 2:\n            students.pop(0)\n        elif students[0] == 3:\n            students.pop(0)\n        elif students[0] == 4:\n            students.pop(0)\n        elif students[0] == 5:\n            students.pop(0)\n    if len(students) == n:\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    A = list(map(int, stdin.strip().split()[1]))\n    B = list(map(int, stdin.strip().split()[2]))\n    combinations = []\n    combinations.append(A)\n    combinations.append(B)\n    ans = []\n    for i in range(1, n+1):\n        a = []\n        b = []\n        for j in range(len(combinations[0])):\n            a.append(combinations[0][j] % i)\n        for j in range(len(combinations[1])):\n            b.append(combinations[1][j] % i)\n        a.sort()\n        b.sort()\n        if a == b:\n            ans.append(i)\n        combinations = [a, b]\n    if len(ans) == 0:\n        return -1\n    else:\n        return min(ans)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split()))\n    ans = float('inf')\n    while A!= sorted(A):\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                A[i], A[i - 1] = A[i - 1], A[i]\n                break\n        else:\n            break\n    if A == sorted(A):\n        return str(len(A) - 1)\n    else:\n        return -1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr_a = list(map(int, stdin.split()[1]))\n    arr_b = list(map(int, stdin.split()[2]))\n\n    arr_a_dict = {}\n    for i in range(n):\n        arr_a_dict[i + 1] = arr_a[i]\n\n    arr_b_dict = {}\n    for i in range(n):\n        arr_b_dict[i + 1] = arr_b[i]\n\n    a_count = sum(arr_a)\n    b_count = sum(arr_b)\n\n    a_dict = {}\n    b_dict = {}\n    for i in range(n + 1):\n        if i in arr_a_dict:\n            a_dict[i] = arr_a_dict[i]\n        else:\n            a_dict[i] = 0\n        if i in arr_b_dict:\n            b_dict[i] = arr_b_dict[i]\n        else:\n            b_dict[i] = 0\n    print(a_count, b_count)\n\n    if a_count < b_count:\n        a_count = b_count\n        arr_a_dict = arr_b_dict\n        arr_a = arr_b\n    else:\n        b_count = a_count\n        arr_b_dict = arr_a_dict\n        arr_b = arr_a\n\n    a_sum = sum(arr_a)\n    b_sum = sum(arr_b)\n\n    if a_sum % b_sum!= 0:\n        return -1\n\n    a_dict_s = sorted(a_dict.items(), key=lambda x: x[1], reverse=True)\n    b_dict_s = sorted(b_dict.items(), key=lambda x: x[1], reverse=True)\n\n    a_arr = []\n    b_arr = []\n    for i in range(n):\n        a_arr.append(a_dict_s[i][0])\n        b_arr.append(b_dict_s[i][0])\n\n    count = 0\n    while a_count > 0 and b_count > 0:\n        a_count -= 1\n        b_count -= 1\n\n        if a_arr[a_count - 1] < b_arr[b_count - 1]:\n            a_count -= 1\n            b_count -= 1\n            continue\n\n        if a_arr[a_count - 1] > b_arr[b_count - 1]:\n            b_count -= 1\n            continue\n\n        count += 1\n\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split(\" \")))\n    b_list = list(map(int, stdin.strip().split(\" \")))\n    min_exchanges = min_distribution(n, a_list, b_list)\n    print(min_exchanges)\n    return ''\n\ndef"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # 1st one\n    # swaps\n    # 2nd one\n    # swaps\n    # 2nd one\n    # swaps\n    # 2nd one\n    # swaps\n    # 2nd one\n    # swaps\n    # 3rd one\n    # swaps\n    # 4th one\n    # swaps\n    # 5th one\n    # swaps\n    # 6th one\n    # swaps\n    # 7th one\n    # swaps\n    # 8th one\n    # swaps\n    # 9th one\n    # swaps\n    # 10th one\n    # swaps\n    # 11th one\n    # swaps\n    # 12th one\n    # swaps\n    # 13th one\n    # swaps\n    # 14th one\n    # swaps\n    # 15th one\n    # swaps\n    # 16th one\n    # swaps\n    # 17th one\n    # swaps\n    # 18th one\n    # swaps\n    # 19th one\n    # swaps\n    # 20th one\n    # swaps\n    # 21st one\n    # swaps\n    # 22nd one\n    # swaps\n    # 23rd one\n    # swaps\n    # 24th one\n    # swaps\n    # 25th one\n    # swaps\n    # 26th one\n    # swaps\n    # 27th one\n    # swaps\n    # 28th one\n    # swaps\n    # 29th one\n    # swaps\n    # 30th one\n    # swaps\n    # 31st one\n    # swaps\n    # 32nd one\n    # swaps\n    # 33rd one\n    # swaps\n    # 34th one\n    # swaps\n    # 35th one\n    # swaps\n    # 36th one\n    # swaps\n    # 37th one\n    # swaps\n    # 38th one\n    # swaps\n    # 39th one\n    # swaps\n    # 40th one\n    # swaps\n    # 41st one\n    # swaps\n    # 42nd one\n    # swaps\n    # 43rd one\n    # swaps\n    # 44th one\n    # swaps\n    # 45th one\n    # swaps\n    # 46th one\n    # swaps\n    # 47th one\n    # swaps\n    # 48th one\n    # swaps\n    # 49th one\n    # swaps\n    # 50th one\n    # swaps\n    # 51st one\n    # swaps\n    # 52nd one\n    # swaps\n    # 53rd one\n    # swaps\n    # 54th one\n    # swaps\n    # 55th one\n    # swaps\n    # 56th one\n    # swaps\n    # 57th one\n    # swaps\n    # 58th one\n    # swaps\n    # 59th one\n    # swaps\n    # 60th one\n    # swaps\n    # 61st one\n    # swaps\n    # 62nd one\n    # swaps\n    # 63rd one\n    # swaps\n    # 64th one\n    # swaps\n    # 65th one\n    # swaps\n    # 66th one\n    # swaps\n    # 67th one\n    # swaps\n    # 68th one\n    # swaps\n    # 69th one\n    # swaps\n    # 70th one\n    # swaps\n    # 71st one\n    # swaps\n    # 72nd one\n    # swaps\n    # 73rd one\n    # swaps\n    # 74th one\n    # swaps\n    # 75th one\n    # swaps\n    # 76th one\n    # swaps\n    # 77th one\n    # swaps\n    # 78th one\n    # swaps\n    # 79th one\n    # swaps\n    # 80th one\n    # swaps\n    # 81st one\n    # swaps\n    # 82nd one\n    # swaps\n    # 83rd one\n    # swaps\n    # 84th one\n    # swaps\n    # 85th one\n    # swaps\n    # 86th one\n    # swaps\n    # 87th one\n    # swaps\n    # 88th one\n    # swaps\n    # 89th one\n    # swaps\n    # 90th one\n    # swaps\n    # 91st one\n    # swaps\n    # 92nd one\n    # swaps\n    # 93rd one\n    # swaps\n    # 94th one\n    # swaps\n    # 95th one\n    # swaps\n    # 96th one\n    # swaps\n    # 97th one\n    # swaps\n    # 98th one\n    # swaps\n    # 99th one\n    # swaps\n    # 100st one\n    # swaps\n    # 101nd one\n    # swaps\n    # 102rd one\n    # swaps\n    # 103th one\n    # swaps\n    # 104th one\n    # swaps\n    # 105th one\n    # swaps\n    # 106th one\n    # swaps\n    # 107th one\n    # swaps\n    # 108th one\n    # swaps\n    # 109th one\n    # swaps\n    # 110th one\n    # swaps\n    # 111st one\n    # swaps\n    # 112nd one\n    # swaps\n    # 113rd one\n    # swaps\n    # 114th one\n    # swaps\n    # 115th one\n    # swaps\n    # 116th one\n    # swaps\n    # 117th one\n    # swaps\n    # 118th one\n    # swaps\n    # 119th one\n    # swaps\n    # 120th one\n    # swaps\n    # 121st one\n    # swaps\n    # 122nd one\n    # swaps\n    # 123rd one\n    # swaps\n    # 124th one\n    # swaps\n    # 125th one\n    # swaps\n    # 126th one\n    # swaps\n    # 127th one\n    # swaps\n    # 128th one\n    # swaps\n    # 129th one\n    # swaps\n    # 130th one\n    # swaps\n    # 131st one\n    # swaps\n    # 132nd one\n    # swaps\n    # 133rd one\n    # swaps\n    # 134th one\n    # swaps\n    # 135th one\n    # swaps\n    # 136th one\n    # swaps\n    # 137th one\n    # swaps\n    # 138th one\n    # swaps\n    # 139th one\n    # swaps\n    # 140th one\n    # swaps\n    # 141st one\n    # swaps\n    # 142nd one\n    # swaps\n    # 143rd one\n    # swaps\n    # 144th one\n    # swaps\n    # 145th one\n    # swaps\n    # 146th one\n    # swaps\n    # 147th one\n    # swaps\n    # 148th one\n    # swaps\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin.split(\"\\n\")\n    n = int(st[0])\n    A = [int(x) for x in st[1].split(\" \")]\n    B = [int(x) for x in st[2].split(\" \")]\n    d = {}\n    for a in A:\n        if a not in d.keys():\n            d[a] = 1\n        else:\n            d[a] += 1\n    for b in B:\n        if b not in d.keys():\n            d[b] = 1\n        else:\n            d[b] += 1\n    keys = d.keys()\n    for a in keys:\n        if a not in keys:\n            return -1\n        if d[a] > (n / 2):\n            return -1\n    x = []\n    for a in keys:\n        x.append(a)\n    x.sort()\n    for i in range(len(x) - 1):\n        if x[i] + 1!= x[i + 1]:\n            return -1\n    return len(x)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a.sort()\n    b.sort()\n\n    res = 0\n\n    while a!= b:\n        if a[-1] == b[-1]:\n            a.pop()\n            b.pop()\n            res += 1\n        else:\n            a.pop()\n            b.pop()\n\n    return str(res)\n\n\nprint(solution(input()))"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = list(stdin.strip())\n    a = list(map(lambda x: x == '>' and 'v' or '<', a))\n    b = list(stdin.strip())\n    b = list(map(lambda x: x == '^' and 'v' or '^', b))\n    return \"YES\" if (check_yes(n, m, a, b) == True) else \"NO\"\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = stdin.split()\n\n    v = x[1]\n    h = x[2]\n\n    print(all(v[i] == 'v' and h[i] == '^' or h[i] == 'v' and v[i] == '<'\n        for i in range(len(v))))\n\n    return 'YES' if all(v[i] == 'v' and h[i] == '^' or h[i] == 'v' and v[i] == '<'\n        for i in range(len(v))) else 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    x = int(stdin[0])\n    y = int(stdin[1])\n    stra = stdin[2]\n\n    stra = stra.split('>')\n    x = y = 0\n    for i in range(len(stra)):\n        if stra[i] == '<':\n            x += 1\n        if stra[i] == 'v':\n            y += 1\n\n    # print(stra)\n    if (x == 1) and (y == 1) and (x + y == 3):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''\nInput:\n3 3\n><>\nv^v\n\nOutput:\nNO\n\n'''\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = list(stdin[0])\n    v = list(stdin[1])\n    for _ in range(n):\n        if h[0] == '<':\n            h.append(h[-1])\n            h.pop(0)\n        else:\n            h.insert(0, h.pop())\n    for _ in range(m):\n        if v[0] == '^':\n            v.append(v[-1])\n            v.pop(0)\n        else:\n            v.insert(0, v.pop())\n    if h == v:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h_street = stdin.replace('<', '-').replace('>', '-').split()\n    v_street = stdin.replace('^', '|').replace('v', '|').split()\n    v_street = ''.join([(i[0] + i[1]) for i in zip(v_street, v_street[1:])])\n    for i in range(n):\n        for j in range(m):\n            if h_street[i] == '<' and v_street[i * m + j] == '-':\n                return 'YES'\n            if h_street[i] == '-' and v_street[i * m + j] == '|':\n                return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    # read the input in\n    # create n lists\n    # create m lists\n    # create a mapping with key = 1,2,3....,m to represent direction\n    # read in the input\n    # update the direction dictionary\n    # print the results\n    direction = {i: stdin.strip().split()[i] for i in range(1, m)}\n    return 'YES' if solutionHelper(n, m, direction) else 'NO'\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # map of (x, y)\n    mapp = {(x, y): None for x in range(n) for y in range(m)}\n    vertices = {(x, y) for x in range(n) for y in range(m)}\n    # each horizontal street can be used only once\n    horizontal = {x for x in range(n)}\n    # each vertical street can be used only once\n    vertical = {y for y in range(m)}\n    # each street can only be used once\n    used = {(x, y): set() for x in range(n) for y in range(m)}\n    # each street can not go both ways\n    left = {(x, y): set() for x in range(n) for y in range(m)}\n    right = {(x, y): set() for x in range(n) for y in range(m)}\n    for x in range(n):\n        for y in range(m):\n            if mapp[(x, y)] is None:\n                # add horizontal street\n                if stdin[x][y] == '<':\n                    mapp[(x, y)] = '<'\n                    horizontal.discard(x)\n                else:\n                    mapp[(x, y)] = '>'\n                    horizontal.discard(x)\n            else:\n                # add vertical street\n                if stdin[x][y] == '^':\n                    mapp[(x, y)] = '^'\n                    vertical.discard(y)\n                else:\n                    mapp[(x, y)] = 'v'\n                    vertical.discard(y)\n            used[(x, y)].add(mapp[(x, y)])\n            # if current street crosses other street, make it left or right\n            if (x, y) in left:\n                left[(x, y)].add(mapp[(x, y)])\n            if (x, y) in right:\n                right[(x, y)].add(mapp[(x, y)])\n    # if the street has direction, then we can travel\n    ans = 'NO'\n    for key, val in mapp.items():\n        if val is None:\n            # if horizontal and vertical can be used\n            if horizontal and vertical:\n                ans = 'YES'\n                break\n            else:\n                # if only horizontal or only vertical can be used, then the street cannot be used\n                if len(horizontal)!= 0 or len(vertical)!= 0:\n                    ans = 'NO'\n                    break\n    return ans\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n, m = map(int, stdin.split())\n    horizontal_streets = stdin.split()[1::2]\n    vertical_streets = stdin.split()[::2]\n\n    vertical_junction = {}\n    for i in range(len(vertical_streets) - 1):\n        v1 = vertical_streets[i]\n        v2 = vertical_streets[i+1]\n        if v1 == '^':\n            vertical_junction[v2] = True\n        else:\n            vertical_junction[v2] = False\n\n    horizontal_junction = {}\n    for i in range(len(horizontal_streets) - 1):\n        h1 = horizontal_streets[i]\n        h2 = horizontal_streets[i+1]\n        if h1 == '<':\n            horizontal_junction[h2] = True\n        else:\n            horizontal_junction[h2] = False\n\n    for h, v in horizontal_junction.items():\n        if not v or not vertical_junction[h]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    for i in range(n):\n        if i == 0:\n            result += \"0\"\n        else:\n            result += \"1\"\n    result = \"(\" + result + \")\"\n    return result\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    s = stdin\n    while len(s)!= 1:\n        s = str(eval(s))\n    if int(s)!= 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(possible(n, []))\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    # print(n, a)\n    def rec(x, cnt):\n        if len(x) == 1 and x[0] == 0:\n            return True\n        elif len(x) == 1 and x[0] == 1:\n            return False\n        elif len(x) == 2 and x[0] == 1 and x[1] == 1:\n            return False\n        elif len(x) == 2 and x[0] == 0 and x[1] == 0:\n            return True\n        else:\n            res = False\n            if x[0] == 1:\n                res = rec(x[1:], cnt + 1)\n            if x[0] == 0 and (x[1] == 0 or x[1] == 1):\n                res = rec(x[2:], cnt + 1)\n            return res\n\n    if rec(a, 0):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    args = stdin.split(' ')\n    total = 0\n    for i in args:\n        if i == \"0\":\n            total += 0\n        elif i == \"1\":\n            total += 1\n        elif i == \"-\":\n            total -= 1\n    if total == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    if n == 1:\n        if a[0] == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    a = \"\".join(str(i) for i in a)\n    \n    for i in range(1, n + 1):\n        if i == 1:\n            if \"1\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 2:\n            if \"1\" not in a and \"0\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 3:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 4:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 5:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a and \"->\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 6:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a and \"->\" not in a and \"1\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 7:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a and \"->\" not in a and \"1\" not in a and \"->\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 8:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a and \"->\" not in a and \"1\" not in a and \"->\" not in a and \"->\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 9:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a and \"->\" not in a and \"1\" not in a and \"->\" not in a and \"->\" not in a and \"->\" not in a:\n                return \"NO\"\n            else:\n                continue\n        if i == 10:\n            if \"1\" not in a and \"0\" not in a and \">\" not in a and \"0\" not in a and \"->\" not in a and \"1\" not in a and \"->\" not in a and \"->\" not in a and \"->\" not in a and \"->\" not in a:\n                return \"NO\"\n            else:\n                continue\n    return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if __name__!= \"__main__\":\n        return\n    n = int(stdin)\n    s = stdin.split()\n    for i in range(n):\n        if int(s[i]) == 1:\n            if int(s[i + 1]) == 0:\n                if int(s[i + 2]) == 0:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if int(s[i + 3]) == 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n        else:\n            if int(s[i + 1]) == 0:\n                if int(s[i + 2]) == 0:\n                    if int(s[i + 3]) == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    if int(s[i + 4]) == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n            else:\n                if int(s[i + 2]) == 0:\n                    if int(s[i + 3]) == 0:\n                        if int(s[i + 4]) == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if int(s[i + 5]) == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                else:\n                    if int(s[i + 3]) == 0:\n                        if int(s[i + 4]) == 0:\n                            if int(s[i + 5]) == 1:\n                                return \"YES\"\n                            else:\n                                return \"NO\"\n                        else:\n                            if int(s[i + 6]) == 1:\n                                return \"YES\"\n                            else:\n                                return \"NO\"\n                    else:\n                        if int(s[i + 4]) == 0:\n                            if int(s[i + 5]) == 0:\n                                if int(s[i + 6]) == 1:\n                                    return \"YES\"\n                                else:\n                                    return \"NO\"\n                            else:\n                                if int(s[i + 7]) == 1:\n                                    return \"YES\"\n                                else:\n                                    return \"NO\"\n                        else:\n                            if int(s[i + 5]) == 0:\n                                if int(s[i + 6]) == 0:\n                                    if int(s[i + 7]) == 1:\n                                        return \"YES\"\n                                    else:\n                                        return \"NO\"\n                                else:\n                                    if int(s[i + 8]) == 1:\n                                        return \"YES\"\n                                    else:\n                                        return \"NO\"\n                            else:\n                                if int(s[i + 6]) == 0:\n                                    if int(s[i + 7]) == 0:\n                                        if int(s[i + 8]) == 1:\n                                            return \"YES\"\n                                        else:\n                                            return \"NO\"\n                                    else:\n                                        if int(s[i + 9]) == 1:\n                                            return \"YES\"\n                                        else:\n                                            return \"NO\"\n                                else:\n                                    if int(s[i + 7]) == 0:\n                                        if int(s[i + 8]) == 0:\n                                            if int(s[i + 9]) == 1:\n                                                return \"YES\"\n                                            else:\n                                                return \"NO\"\n                                        else:\n                                            if int(s[i + 10]) == 1:\n                                                return \"YES\"\n                                            else:\n                                                return \"NO\"\n                                    else:\n                                        if int(s[i + 8]) == 0:\n                                            if int(s[i + 9]) == 0:\n                                                if int(s[i + 10]) == 1:\n                                                    return \"YES\"\n                                                else:\n                                                    return \"NO\"\n                                            else:\n                                                if int(s[i + 11]) == 1:\n                                                    return \"YES\"\n                                                else:\n                                                    return \"NO\"\n                                        else:\n                                            if int(s[i + 9]) == 0:\n                                                if int(s[i + 10]) == 0:\n                                                    if int(s[i + 11]) == 1:\n                                                        return \"YES\"\n                                                    else:\n                                                        return \"NO\"\n                                                else:\n                                                    if int(s[i + 12]) == 1:\n                                                        return \"YES\"\n                                                    else:\n                                                        return \"NO\"\n                                            else:\n                                                if int(s[i + 10]) == 0:\n                                                    if int(s[i + 11]) == 0:\n                                                        if int(s[i + 12]) == 1:\n                                                            return \"YES\"\n                                                        else:\n                                                            return \"NO\"\n                                                    else:\n                                                        "
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')\n    n_brackets = 0\n    a_brackets = []\n\n    def get_brackets_count():\n        global n_brackets\n        if n_brackets == len(a_brackets):\n            if len(a_brackets)!= 0:\n                return 'NO'\n            return 'YES'\n        else:\n            a_brackets.append(a.pop(0))\n            return get_brackets_count()\n\n    for i in range(len(a)):\n        if a[i] == '0':\n            a[i] = '<'\n        elif a[i] == '1':\n            a[i] = '>'\n        elif a[i] == '>':\n            a[i] = '0'\n        elif a[i] == '<':\n            a[i] = '1'\n        else:\n            continue\n        n_brackets += 1\n    return get_brackets_count()\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n <= 1:\n        if stdin!= 'YES':\n            return stdin\n        else:\n            return 'NO'\n\n    stdin = stdin.replace('\\n', '')\n    i = 0\n    while i < n:\n        if stdin[i]!= '0':\n            i += 1\n            continue\n\n        i += 1\n        while i < n and stdin[i] == '0':\n            i += 1\n\n        if i == n:\n            return 'NO'\n\n        i += 1\n\n        while i < n and stdin[i] == '1':\n            i += 1\n\n        if i == n:\n            return 'NO'\n\n        i += 1\n    return 'YES'\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    a = int(inp[0])\n    b = int(inp[1])\n    while True:\n        if a == 0 or b == 0:\n            break\n        elif a > 2 * b:\n            a -= 2 * b\n        elif b > 2 * a:\n            b -= 2 * a\n        else:\n            break\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while True:\n        if a == 0 or b == 0:\n            break\n        elif a < 2*b:\n            a = a - 2*b\n        elif a > 2*b:\n            b = b - 2*a\n    return a, b\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = max(a, b)\n    while n >= 0:\n        if n == 0:\n            break\n        if n % 2 == 0:\n            a = n // 2\n        else:\n            b = n // 2\n        n = max(a, b)\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def step1(a, b):\n        if a == 0 or b == 0:\n            return\n        if a >= 2*b:\n            a -= 2*b\n            step1(a, b)\n        elif b >= 2*a:\n            b -= 2*a\n            step1(a, b)\n        else:\n            return\n\n    def step2(a, b):\n        if a == 0 or b == 0:\n            return\n        if a >= 2*b:\n            a -= 2*b\n            step2(a, b)\n        elif b >= 2*a:\n            b -= 2*a\n            step2(a, b)\n        else:\n            return\n\n    def step3(a, b):\n        if a == 0 or b == 0:\n            return\n        if a >= 2*b:\n            a -= 2*b\n            step3(a, b)\n        elif b >= 2*a:\n            b -= 2*a\n            step3(a, b)\n        else:\n            return\n\n    a = int(stdin.split('\\n')[0])\n    b = int(stdin.split('\\n')[1])\n    step1(a, b)\n    step2(a, b)\n    step3(a, b)\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    while a and b:\n        if a <= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n    return f'{a} {b}'\n\nprint(solution(input()))"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = n\n    b = m\n    while a > 1 or b > 1:\n        if a > 2 * b:\n            a -= 2 * b\n        elif a < 2 * b:\n            b -= 2 * a\n        else:\n            break\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 0 and b <= 0:\n        return str(0) + \" \" + str(0)\n    else:\n        while a > 0 and b > 0:\n            if a >= 2 * b:\n                a = a - 2 * b\n            else:\n                b = b - 2 * a\n        return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n,m] = list(map(int, stdin.split()))\n    a = 0\n    b = 0\n    while True:\n        if a < 2 * b:\n            a = a + 2 * b\n        elif b < 2 * a:\n            b = b + 2 * a\n        elif a >= 2 * b:\n            a = a - 2 * b\n        elif b >= 2 * a:\n            b = b - 2 * a\n        if a == 0 or b == 0:\n            break\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a and b:\n        if a > 2 * b:\n            a -= 2 * b\n        elif b > 2 * a:\n            b -= 2 * a\n        else:\n            break\n    return str(a), str(b)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % k == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    divisible = 0\n    for i in range(a, b + 1):\n        if i % k == 0:\n            divisible += 1\n    return divisible"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    result = 0\n    for x in range(a, b+1):\n        if x % k == 0:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    count = 0\n    for i in range(n+1):\n        if i <= a and i >= b:\n            if i % k == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = list(map(int, stdin.split()))\n    return str(int((b - a) / k) + 1)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    count = 0\n    while a <= b:\n        if a % k == 0:\n            count += 1\n        a += 1\n    return str(count)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    print(find(k, a, b))\n\ndef"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b = [int(i) for i in stdin.split()]\n    cnt = 0\n    for i in range(a, b+1):\n        if i%k == 0:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(a + (b - a) // k - (b - a) // (k - 1))\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b = list(map(int, stdin.split()))\n    if n == 1:\n        if a == 1:\n            return k\n        else:\n            return 0\n    return k*((b-a)+1)//n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while count < len(stdin) - 1:\n        print(stdin[count])\n        count += 1\n    return stdin[count]\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(i) for i in range(1, int(stdin)+1))"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    k = k % 10000\n    result = []\n    for i in range(k + 1):\n        result.append(str(i))\n    return ''.join(result)\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return ''.join(map(str, range(n // 10, n // 10 + 10)))\n    else:\n        return ''.join(map(str, range(n // 10, n // 10 + 10) + list(range(1, n // 10 + 1))))"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    stdin = list(itertools.chain.from_iterable(stdin.split('\\n')))\n    try:\n        # print(stdin)\n        digit = int(stdin.pop(0))\n        print(digit)\n        # print(stdin)\n        for i in range(digit, 0, -1):\n            # print(i)\n            print(digit - i)\n            # print(stdin)\n    except IndexError as e:\n        print('')\n        return '0'\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Builds the infinite sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,..., 99, 100, 101, 102,..., 1000, 1001, 1002,...,\n    1001, 1002, 1003,..., 1001, 1002, 1003,...\n    :param stdin: input line from stdin (str)\n    :return: nothing\n    \"\"\"\n    total = 0\n    k = int(stdin)\n    for i in range(1, 1001):\n        total += i\n        if total == k:\n            return str(i)\n        elif total > k:\n            break\n    return str(total)\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return (int(stdin) % 10)"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _input = int(stdin)\n    _k = int(_input % 10)\n    print(_k)\n    return str(_k)\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pos = int(stdin)\n    n = 123456789101112131415161718192021222324252627282930313233343536\n    return str(n // 10**pos % 10)\n\nsolution()"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    while len(s) > n:\n        for i, ch in enumerate(s):\n            if ch.isdigit():\n                if i < n - 1:\n                    s = s[:i] + s[i + 1:]\n    return 'NO' if len(s) == n and not s.isdigit() else 'YES'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 1:\n        print(\"NO\")\n    else:\n        s = stdin.strip()\n        if len(s) == 11:\n            if len(s) == len(set(s)) == 11:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('13\\n8380011223344')\n    'YES'\n    >>> solution('15\\n807345619350641')\n    'NO'\n    '''\n    n = len(stdin)\n    if n % 2!= 1:\n        return 'NO'\n    s = stdin\n    cnt = 0\n    while len(s) > 1:\n        s = s[1:]\n        cnt += 1\n    if cnt % 2 == 0:\n        return 'NO'\n    if sum([int(s[i]) for i in range(len(s))]) % 10 == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def erase_digit(digits: str) -> str:\n        if not digits:\n            return digits\n        if len(digits) == 1:\n            return ''\n        else:\n            return digits[0] + erase_digit(digits[1:])\n    def is_phone_number(string: str) -> bool:\n        if len(string)!= 11:\n            return False\n        if not string[0].isnumeric():\n            return False\n        for i in range(0, 10, 2):\n            if not string[i] == '8':\n                return False\n        return True\n    return erase_digit(stdin) if is_phone_number(stdin) else 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    if n % 2 == 1:\n        for i in range(len(s)):\n            if i % 2 == 0:\n                return \"NO\"\n    else:\n        while len(s) > 1:\n            if s[-2] == '8':\n                return \"NO\"\n            else:\n                s = s[:-1]\n                s += '8'\n    return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while len(stdin)!= n:\n        stdin = stdin + '9'\n    for i in range(0, len(stdin)):\n        if stdin[i]!= '8' and int(stdin[i]) < 9 and int(stdin[i]) > 0:\n            stdin = stdin.replace(stdin[i], '')\n        if len(stdin) == 11:\n            return \"YES\"\n    return \"NO\"\nsolution(input())"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def replace(n: int) -> str:\n        return str(n).replace(\"1\", \"8\").replace(\"0\", \"1\")\n\n    n = len(stdin)\n    if n % 2 == 0:\n        raise ValueError(\"The number of digits in the string should be odd\")\n    else:\n        s = stdin\n    while n > 0:\n        s = replace(n) + s\n        n = n // 2\n    if len(s) == 11:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 'NO'\n    elif n % 2 == 0:\n        return 'NO'\n    i = 1\n    while i < n:\n        if s[i] < '7':\n            break\n        i += 2\n    if i == n:\n        return 'YES'\n    for j in range(i, n):\n        if j + 1 < n:\n            if s[j] == '8' and s[j + 1] == '8':\n                break\n        if s[j] > '7':\n            break\n    if j + 1 == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_n_digit_str(num):\n        return all(i in '1234567890' for i in num)\n\n    def remove_digit(num):\n        return int(''.join(filter(lambda i: i in '1234567890', num)))\n\n    n, s = map(int, stdin.split())\n    s = ''.join(sorted(s))\n    for i in range(0, len(s)-1, 2):\n        if is_n_digit_str(s[i:i+2]):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def erase(string):\n        if len(string) == 1:\n            return string\n        else:\n            return erase(string[1:]) + string[0]\n    s = stdin.split()\n    n = int(s[0])\n    s = erase(s[1])\n    if len(s) == 11 and int(s[:5]) == 8380011223344:\n        print('YES')\n    else:\n        print('NO')\nsolution(input())\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += int(n / i)\n    return str(count)"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, p = stdin.split()\n    return (int(n) - int(p)) / (int(x) - int(n))\n\nstdin = \"1 2\"\nprint(solution(stdin))\n\n\nstdin = \"123 424\"\nprint(solution(stdin))\n\n\nstdin = \"1 1\"\nprint(solution(stdin))\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    if x in stdin:\n        return 0\n    for i in range(n):\n        if i > pos:\n            break\n        if x < stdin[i]:\n            if binarySearch(stdin, x):\n                return 0\n    return (n - pos) * (n - pos + 1) // 2\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    x = int(stdin.split()[1])\n    pos = int(stdin.split()[2])\n\n    return str(int(len(list(filter(lambda a: a[pos] == x, permutations(a)))) % (10 ** 9 + 7)))\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from math import floor, sqrt\n    x, y, p = map(int, stdin.split())\n    def check_unique(n):\n        return sum(i == n for i in range(1, n)) == (n-1)\n    cnt = 0\n    for n in range(1, floor(sqrt(x))+1):\n        if check_unique(n):\n            x = int(x / n)\n            if x == 1:\n                cnt += 1\n            else:\n                x_ = int(x * (n+1))\n                if x_ >= y:\n                    cnt += (n * (n+1)) // 2\n                if x_ <= y:\n                    cnt += n * (n+1) // 2\n    return str(cnt % (10**9+7))\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(len(a)):\n        b.append(i)\n    def binary(a, b, x):\n        left = 0\n        right = len(a) - 1\n        while left <= right:\n            middle = (left + right) // 2\n            if a[middle] == x:\n                return True\n            elif a[middle] < x:\n                left = middle + 1\n            else:\n                right = middle - 1\n        return False\n    return sum(i for i in range(len(a)) if binary(b, a, i)) % 1000000007\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    from itertools import permutations\n    return str(len(list(filter(lambda p: x in p, permutations(range(1, n + 1), n))))) % (10 ** 9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, p = stdin.split(\" \")\n    n = int(n)\n    x = int(x)\n    p = int(p)\n    permutations = []\n    permutations.extend([2, 3, 1, 4])\n    permutations.extend([2, 4, 1, 3])\n    permutations.extend([3, 2, 1, 4])\n    permutations.extend([3, 4, 1, 2])\n    permutations.extend([4, 2, 1, 3])\n    permutations.extend([4, 3, 1, 2])\n\n    for i in range(len(permutations) - 1):\n        if permutations[i] <= x <= permutations[i + 1]:\n            x = permutations[i]\n            break\n        else:\n            x = permutations[i]\n    return str(len(permutations) - permutations.index(x))\n\n\nprint(solution(input()))"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n, x, pos = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    return str(divmod(len(get_perms(n, x, pos)), 10**9 + 7))\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(n)\n    Space: O(n)\n    '''\n    n, x, pos = map(int, stdin.split())\n    count = 0\n    for i in range(1, n + 1):\n        if x == i:\n            count += 1\n            if count % 1000000 == 0:\n                print(count)\n            continue\n        if binary_search(nums, x, i, pos):\n            count += 1\n            if count % 1000000 == 0:\n                print(count)\n        else:\n            count = 0\n    print(count)\n\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    for i in range(len(lines)):\n        lines[i] = lines[i].strip()\n    k = int(lines[1])\n    for i in range(len(lines[0])):\n        if lines[0][i] == \"*\" and lines[0][i-1] == \"*\" and lines[0][i-2] == \"*\":\n            print(lines[0][i-3:i+1])\n            break\n    if k <= len(lines[0]):\n        i = 0\n        while True:\n            if lines[0][i] == \"*\" and lines[0][i+1] == \"*\" and lines[0][i+2] == \"*\":\n                print(lines[0][i-3:i+1])\n                break\n            elif i == len(lines[0])-1:\n                print(\"Impossible\")\n                break\n            i += 1\n    else:\n        print(\"Impossible\")\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(input())\n    min_length = min(k, len(s))\n    t = ''\n    for i in range(min_length):\n        if s[i] == '*':\n            t += '?'\n        elif s[i] == '?':\n            t += '*'\n        else:\n            t += s[i]\n    if len(t)!= k:\n        return 'Impossible'\n    return t\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin, int(stdin.split()[1])\n    if k >= 2:\n        return (s + s[::-1]).replace('*', '').replace('?', '')\n    return 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n\n    count = 0\n    index = 0\n\n    while count < len(stdin) and index < len(stdin):\n        if stdin[index] == '*':\n            index += 1\n        elif stdin[index] == '?':\n            index += 2\n        else:\n            index += 1\n        count += 1\n\n    return stdin[:index]\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[1])\n    s = stdin.split()[0]\n    if not is_valid(s, k):\n        return \"Impossible\"\n    ans = \"\"\n    for i in range(len(s)):\n        if s[i] in [\"*\", \"?\"]:\n            j = 0\n            while s[i + j] == \"*\":\n                j += 1\n            s = s[:i] + s[i + j:]\n            if j == 1:\n                if s[i] == \"?\":\n                    s = s[:i] + s[i + 2:]\n            if j == 0:\n                if s[i] == \"*\":\n                    s = s[:i] + s[i + 1:]\n        if len(s)!= len(ans) + k:\n            return \"Impossible\"\n        ans += s[i]\n    return ans\n\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_arr = stdin.split()\n    str_arr = sorted(str_arr, key=len)\n    if len(str_arr) < 2:\n        return \"Impossible\"\n    sorted_str = \"\".join(str_arr)\n    for i in range(len(sorted_str)):\n        if sorted_str.count(sorted_str[i]) > 1:\n            return sorted_str[i]\n    return \"Impossible\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    k = int(s[1])\n    cnt = 0\n    for i in range(k):\n        if s[0][i] == '*':\n            if s[0][i + 1] == '*':\n                cnt += 2\n            elif s[0][i + 1] == '?':\n                cnt += 1\n            else:\n                cnt += 1\n        else:\n            if s[0][i] == '?':\n                cnt += 1\n            else:\n                cnt += 2\n    if cnt == k:\n        return \"Impossible\"\n    return s[0]\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if '*' in stdin[i:]:\n            break\n    if i == len(stdin) - 1:\n        return stdin\n    for j in range(i + 1, len(stdin)):\n        if '*' in stdin[j:]:\n            break\n    if j == len(stdin) - 1:\n        return stdin\n    if i == j:\n        return stdin[:i] + stdin[j + 1:]\n    return stdin[:i] + stdin[i:j] + stdin[j + 1:]\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while '*' in s or '?' in s:\n        s = s.replace('*', '').replace('?', '')\n    return s\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.strip())\n    try:\n        res = \"\"\n        while k > 1:\n            if len(s) < k:\n                return \"Impossible\"\n            for i in range(len(s) - 1):\n                if s[i] == s[i + 1]:\n                    continue\n                s = s.replace(s[i:i+2], \"\")\n                k -= 1\n            res += s\n            s = \"\"\n        return res\n    except Exception as e:\n        print(e)"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(abs(int(stdin)) / 90), 3))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(angle: int):\n        return int(math.ceil(angle/90))\n    rotations = rotate(int(stdin))\n    return rotations\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    while n > 0:\n        cnt += 1\n        n = (n - 1) % 360\n    return str(cnt)\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in range(int(stdin) // 90):\n        res += 90\n    return str(res)"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(angle):\n        img = []\n        x, y = 0, 0\n        for _ in range(len(img)):\n            img.append([])\n        for i in range(len(img)):\n            for j in range(len(img[i])):\n                img[i].append(0)\n        for i in range(len(img)):\n            for j in range(len(img[i])):\n                x = x + 1\n                y = y + 1\n                img[i][j] = img[i][j] + (x / y)\n        print(img)\n        return img\n    for i in range(int(stdin)):\n        img = rotate(int(stdin))\n        x, y = 0, 0\n        for i in range(len(img)):\n            for j in range(len(img[i])):\n                x = x + 1\n                y = y + 1\n                img[i][j] = img[i][j] - (x / y)\n        print(img)\n        return img\n\n\nprint(solution('-60'))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    if n < -10000 or n > 10000:\n        return '-1'\n    if n > 0:\n        return str(int(math.ceil((n / 90) * 2 - n / 180)))\n    return str(int(math.floor((n / 90) * 2 - n / 180)))"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(angle):\n        angle = angle % 360\n        if angle < 180:\n            angle *= -1\n        return angle\n\n    def direction(angle):\n        angle = rotate(angle)\n        if angle < 90:\n            angle += 180\n        return angle\n\n    def angle(x):\n        angle = x\n        while angle > 0:\n            angle -= 90\n        return angle\n\n    clockwise = True\n    angle = -1\n    while True:\n        angle += 1\n        if clockwise:\n            angle = rotate(angle)\n            if direction(angle) % 360 > direction(angle - 1) % 360:\n                clockwise = False\n        else:\n            angle = rotate(angle)\n            if direction(angle) % 360 > direction(angle - 1) % 360:\n                clockwise = True\n        if angle == 90:\n            break\n\n    return str(angle)\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    def find_minimum_number_of_rotation_turns_to_rotate_an_image_so_that_it_is_minimal(n: int, turns: int):\n        if n == 0:\n            return turns\n        def rotate(img: np.array) -> np.array:\n            return np.rot90(img, turns % 4)\n        img = Image.fromarray(img)\n        img.rotate(90)\n        img = np.array(img)\n        return find_minimum_number_of_rotation_turns_to_rotate_an_image_so_that_it_is_minimal(n - 1, turns - 1) + 1\n    return str(rotate(np.random.randint(0, 255, (100, 100))))\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    N = int(stdin.split()[0])\n    import math\n    i = 0\n    x = 90\n    d = 0\n    while True:\n        if i == 1:\n            break\n        if N >= math.floor(x):\n            d += math.floor(x)\n        else:\n            d += N\n        i += 1\n        x = x - 90\n    return str(d)\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.splitlines()\n  angle = int(lines[0])\n  # 90 degrees\n  m = int(angle/90)\n  if angle%90 == 0:\n    return str(m)\n  if m == 0:\n    return str(1)\n  # 180 degrees\n  m = int(angle/180)\n  if angle%180 == 0:\n    return str(m)\n  if m == 0:\n    return str(1)\n  # 270 degrees\n  m = int(angle/270)\n  if angle%270 == 0:\n    return str(m)\n  if m == 0:\n    return str(1)\n  return str(1)"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (a+b) % 2 == 0 and (a+c) % 2 == 0 and (b+c) % 2 == 0 else \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(s) for s in stdin.split())\n    x, y, z = (int(s) for s in stdin.split())\n    if (\n            (a + b + c) > x\n            and (a + b + c) > y\n            and (a + b + c) > z\n            and (a + b + c) > x * y * z\n            and (x * y * z) > (a + b + c)\n            and (x * y * z) > (a + b * c)\n            and (x * y * z) > (a * b + c)\n    ):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n\n--- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nInput\n5 5 1\n2 7 2\n\nOutput\nNo\n\n--- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n\nInput\n10 10 3\n2 3 2\n\nOutput\nYes\n\n'''\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    x, y, z = int(input()), int(input()), int(input())\n    if x > a or y > b or z > c:\n        return \"No\"\n    if a == b == c == x == y == z == 0:\n        return \"Yes\"\n    return \"Yes\" if a + b + c == x + y + z == 0 else \"No\""
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c == 0:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len([i for i in range(3) if (stdin.split(\" \")[i] == stdin.split(\" \")[i + 1])]) == int(stdin.split(\" \")[2]) else \"No\""
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    n = int(n)\n    x = stdin.splitlines()[1]\n    x = int(x)\n    return 'Yes' if n >= x else 'No'\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    sphere_colors = {'blue': 0, 'violet': 0, 'orange': 0}\n    num_of_spheres = int(stdin[0])\n    for _ in range(num_of_spheres):\n        sphere_colors[stdin[1]] += 1\n    if sphere_colors['blue'] >= 2 and sphere_colors['violet'] >= 2 and sphere_colors['orange'] >= 2:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n\n    if a + y == c and x + z == b:\n        return 'Yes'\n\n    return 'No'\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    x, y, z = int(a), int(b), int(c)\n    total = x + y + z\n    if total < x + y + z:\n        return \"No\"\n    elif total == x + y + z:\n        return \"Yes\"\n    else:\n        b, y, z = int(a) - 1, int(b) - 1, int(c) - 1\n        total = x + y + z\n        if total < x + y + z:\n            return \"No\"\n        elif total == x + y + z:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a + b + c) % 2:\n        return \"No\"\n    if min(a, b, c) > min(a, b, c + a):\n        return \"No\"\n    if min(a, b, c) > min(a, b, c + b):\n        return \"No\"\n    return \"Yes\"\n\nstdin = \"\"\"4 4 0\n2 1 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3 3 3\n2 2 2\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return str(sum(i for i in range(m) if i % k == 0))\n\nsolution('1 2 1000')\n>>> '4'\nsolution('2 2 1000')\n>>> '45'\nsolution('5 3 1103')\n>>> '590'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return str(sum([int(str(x)[-n:]) % k for x in range(1, n+1)]) % m)\n\nprint(solution(input()))\n\n\n\n\n\nInput\n3 2 1000\nOutput\n4\n\nInput\n5 3 1103\nOutput\n590\nInput\n5 3 1001\nOutput\n610\nInput\n5 3 10001\nOutput\n60\nInput\n5 4 10001\nOutput\n61\nInput\n5 4 10002\nOutput\n62\nInput\n5 4 10003\nOutput\n63\nInput\n5 4 10004\nOutput\n64\nInput\n5 4 10005\nOutput\n65\nInput\n5 4 10006\nOutput\n66\nInput\n5 4 10007\nOutput\n67\nInput\n5 4 10008\nOutput\n68\nInput\n5 4 10009\nOutput\n69\nInput\n5 4 10010\nOutput\n70\nInput\n5 4 10011\nOutput\n71\nInput\n5 4 10012\nOutput\n72\nInput\n5 4 10013\nOutput\n73\nInput\n5 4 10014\nOutput\n74\nInput\n5 4 10015\nOutput\n75\nInput\n5 4 10016\nOutput\n76\nInput\n5 4 10017\nOutput\n77\nInput\n5 4 10018\nOutput\n78\nInput\n5 4 10019\nOutput\n79\nInput\n5 4 10020\nOutput\n80\nInput\n5 4 10021\nOutput\n81\nInput\n5 4 10022\nOutput\n82\nInput\n5 4 10023\nOutput\n83\nInput\n5 4 10024\nOutput\n84\nInput\n5 4 10025\nOutput\n85\nInput\n5 4 10026\nOutput\n86\nInput\n5 4 10027\nOutput\n87\nInput\n5 4 10028\nOutput\n88\nInput\n5 4 10029\nOutput\n89\nInput\n5 4 10030\nOutput\n90\nInput\n5 4 10031\nOutput\n91\nInput\n5 4 10032\nOutput\n92\nInput\n5 4 10033\nOutput\n93\nInput\n5 4 10034\nOutput\n94\nInput\n5 4 10035\nOutput\n95\nInput\n5 4 10036\nOutput\n96\nInput\n5 4 10037\nOutput\n97\nInput\n5 4 10038\nOutput\n98\nInput\n5 4 10039\nOutput\n99\nInput\n5 4 10040\nOutput\n100\n\n\n\nInput\n1 2 1000\nOutput\n4\n\nInput\n2 2 1000\nOutput\n45\n\nInput\n5 3 1103\nOutput\n590\nInput\n5 3 10001\nOutput\n610\nInput\n5 3 10001\nOutput\n60\nInput\n5 3 10001\nOutput\n61\nInput\n5 3 10002\nOutput\n62\nInput\n5 3 10003\nOutput\n63\nInput\n5 3 10004\nOutput\n64\nInput\n5 3 10005\nOutput\n65\nInput\n5 3 10006\nOutput\n66\nInput\n5 3 10007\nOutput\n67\nInput\n5 3 10008\nOutput\n68\nInput\n5 3 10009\nOutput\n69\nInput\n5 3 10010\nOutput\n70\nInput\n5 3 10011\nOutput\n71\nInput\n5 3 10012\nOutput\n72\nInput\n5 3 10013\nOutput\n73\nInput\n5 3 10014\nOutput\n74\nInput\n5 3 10015\nOutput\n75\nInput\n5 3 10016\nOutput\n76\nInput\n5 3 10017\nOutput\n77\nInput\n5 3 10018\nOutput\n78\nInput\n5 3 10019\nOutput\n79\nInput\n5 3 10020\nOutput\n80\nInput\n5 3 10021\nOutput\n81\nInput\n5 3 10022\nOutput\n82\nInput\n5 3 10023\nOutput\n83\nInput\n5 3 10024\nOutput\n84\nInput\n5 3 10025\nOutput\n85\nInput\n5 3 10026\nOutput\n86\nInput\n5 3 10027\nOutput\n87\nInput\n5 3 10028\nOutput\n88\nInput\n5 3 10029\nOutput\n89\nInput\n5 3 10030\nOutput\n90\nInput\n5 3 10031\nOutput\n91\nInput\n5 3 10032\nOutput\n92\nInput\n5 3 10033\nOutput\n93\nInput\n5 3 10034\nOutput\n94\nInput\n5 3 10035\nOutput\n95\nInput\n5 3 10036\nOutput\n96\nInput\n5 3 10037\nOutput\n97\nInput\n5 3 10038\nOutput\n98\nInput\n5 3 10039\nOutput\n99\nInput\n5 3 10040\nOutput\n100\n\n\n\nInput\n1 2 1000\nOutput\n4\n\nInput\n2 2 1000\nOutput\n45\n\nInput\n5 3 1103\nOutput\n590\nInput\n5 3 10001\nOutput\n610\nInput\n5 3 10001\nOutput\n60\nInput\n5 3 10002\nOutput\n61\nInput\n5 3 10003\nOutput\n62\nInput\n5 3 10004\nOutput\n63\nInput\n5 3 10005\nOutput\n64\nInput\n5 3 10006\nOutput\n65\nInput\n5 3 10007\nOutput\n66\nInput\n5 3 10008\nOutput\n67\nInput\n5 3 10009\nOutput\n68\nInput\n5 3 10010\nOutput\n69\nInput\n5 3 10011\nOutput\n70\nInput\n5 3 10012\nOutput\n71\nInput\n5 3 10013\nOutput\n72\nInput\n5 3 10014\nOutput\n73\nInput\n5 3 10015\nOutput\n74\nInput\n5 3 10016\nOutput\n75\nInput\n5 3 10017\nOutput\n76\nInput\n5 3 10018\nOutput\n77\nInput\n5 3 10019\nOutput\n78\nInput\n5 3 10020\nOutput\n79\nInput\n5 3 10021\nOutput\n80\nInput\n5 3 10022\nOutput\n81\nInput\n5 3 10023\nOutput\n82\nInput\n5 3 10024\nOutput\n83\nInput\n5 3 10025\nOutput\n84\nInput\n5 3 10026\nOutput\n85\nInput\n5 3 10027\nOutput\n86\nInput\n5 3 10028\nOutput\n87\nInput\n5 3 10029\nOutput\n88\nInput\n5 3 10030\nOutput\n89\nInput\n5 3 10031\nOutput\n90\nInput\n5 3 10032\nOutput\n91\nInput\n5 3 10033\nOutput\n92\nInput\n5 3 10034\nOutput\n93\nInput\n5 3 10035\nOutput\n94\nInput\n5 3 10036\nOutput\n95\nInput\n5 3 10037\nOutput\n96\nInput\n5 3 10038\nOutput\n97\nInput\n5 3 10039\nOutput\n98\nInput\n5 3 10040\nOutput\n99\nInput\n5 3 10041\nOutput\n100\n\n\nInput\n1 2 1000\nOutput\n4\n\nInput\n2 2 1000\nOutput\n45\n\nInput\n5 3 1103\nOutput\n590\nInput\n5 3 10001\nOutput\n610\nInput\n5 3 10001\nOutput\n60\nInput\n5 3 10002\nOutput\n61\nInput\n5 3 10003\nOutput\n62\nInput\n5 3 10004\nOutput\n63\nInput\n5 3 10005\nOutput\n64\nInput\n5 3 10006\nOutput\n65\nInput\n5 3 10007\nOutput\n66\nInput\n5 3 10008\nOutput\n67\nInput\n5 3 10009\nOutput\n68\nInput\n5 3 10010\nOutput\n69\nInput\n5 3 10011\nOutput\n70\nInput\n5 3 10012\nOutput\n71\nInput\n5 3 10013\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) % int(stdin.split()[1]))\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\n\nn, k, m = stdin.strip().split()\n\nn, k, m = int(n), int(k), int(m)\n\nmod = math.factorial(n)\n\nfor i in range(1, n+1):\n    if pow(i, n, mod) == 1:\n        print(mod)\n        break\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    x = n\n    while x > m:\n        x //= k\n    return str(x)\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n, k, m = int(n), int(k), int(m)\n    return f\"{(n - k) % m}\"\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    s = str(n)\n    while len(s) > k:\n        if int(s[:k]) % m == 0:\n            return f\"{s[:k]} {m} {n}\"\n        s = s[1:]\n    return f\"{s} {m} {n}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k, m = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    divisors = []\n    for i in range(1, m + 1):\n        divisors.append(i)\n    for i in range(k):\n        divisors.remove(n)\n    for i in range(len(divisors)):\n        if divisors[i]!= 0:\n            break\n    print(divisors[i] % m)\n    return\n    \nsolution()\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = (int(x) for x in stdin.split())\n    decimal = []\n    for i in range(n + 1):\n        decimal.append(str(i))\n    decimal = ''.join(decimal)\n    #print(decimal)\n    #for i in range(n+1):\n    #    if i == 0:\n    #        continue\n    #    else:\n    #        decimal = decimal[i:]\n    #print(decimal)\n    # print(len(decimal))\n    # print(len(str(n)))\n    #print(len(decimal[0:m]))\n    for i in range(m):\n        # print(decimal[0:m])\n        decimal = decimal[1:]\n        #print(decimal)\n    #print(decimal)\n    return str(int(decimal) % m)\n\nsolution(\"2 2 1000\")\nsolution(\"1 2 1000\")\nsolution(\"5 3 1103\")\n'''\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    n, k, m = n, k, m\n    return str(k - ((k % n) * (k % n)))\n\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left = stdin.split()\n    even = int(left[0]) // 2\n    return even if even < 0 or even > 100 else even\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split()[0])\n    r = int(stdin.split()[1])\n    a = int(stdin.split()[2])\n    return str(max(((l-1) // 2 + a // 2), ((r-1) // 2 + a // 2)))\n    \n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = [int(x) for x in stdin.split()]\n    return str(max(l // 2, r // 2, (l + r) // 2 + a))\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    l, r, a = list(map(int, stdin.split()))\n    return str(even_team_size(l, r, a))\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(l // 2 + r // 2 + 2 * a // 2)\n\n\nprint(solution(input()))"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(l // 2 + r // 2 + a // 2)\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(2 * l + 2 * r + a) if l and r and a else str(max(2 * l, 2 * r))\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, l, r, a = stdin.split()\n    l = int(l)\n    r = int(r)\n    a = int(a)\n    if l % 2 == 0:\n        if a % 2 == 0:\n            return max(l, l - r, r)\n        elif a % 2 == 1:\n            return max(l, l - r, r)\n    elif a % 2 == 0:\n        return max(l, l - r, r)\n    elif a % 2 == 1:\n        return max(l, l - r, r)"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = list(map(int, stdin.split()))\n    if l + r <= a:\n        return str(0)\n    if l == 0:\n        return str(r)\n    if r == 0:\n        return str(l)\n    if a == 0:\n        return str(0)\n    if a % 2 == 0:\n        return str(2 * min(l, r) + min(a // 2 - 1, l - 1) + min(r // 2 - 1, r - 1))\n    else:\n        return str(2 * min(l, r) + min(a // 2, l - 1) + min(r // 2, r - 1))\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = map(int, stdin.split())\n    d = {i:i for i in range(n)}\n    res = 1\n    while True:\n        if all(d.get(i, -1)!= -1 for i in d):\n            break\n        for i in range(k):\n            d[i] += 1\n            res += 1\n            if d[i] >= n:\n                d[i] = -1\n                for j in range(k, i, -1):\n                    if d[j]!= -1:\n                        d[j] = d[j-1]\n        print(res)\n    return str(res)"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(6)"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    left, right = 1, n - 1\n    steps = 0\n    while left <= right:\n        if right <= left:\n            break\n        for i in range(k):\n            if left == right:\n                break\n            elif right - left > k:\n                break\n            else:\n                left += 1\n            if left == right:\n                break\n            right -= 1\n        steps += 1\n    return str(steps)\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(int(min(n - 1 + k, n * (n - k)) + n * k))"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    if n == k == 1:\n        return 0\n    coins = n - 1\n    if n == 1:\n        return 1\n    # for i in range(1, n):\n    #     coins += k - 1\n    # return k + coins\n    return coins + (n - 1 - k) * (k + 1) + n\n    "
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    coins = n*k\n    \n    while coins > 1:\n        moves = 0\n        while coins > 1:\n            if coins - 1 in range(k+1):\n                moves += 1\n                coins -= 1\n            else:\n                coins -= 1\n        coins = n*k\n    \n    return moves"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = [2]\n    manholes = []\n    if n == 1 and k == 1:\n        return 0\n    for i in range(n):\n        manholes.append(i)\n    while manholes:\n        if coins:\n            coins.pop(0)\n        if coins == [] and k!= 0:\n            coins.append(2)\n            k -= 1\n            coins.append(2)\n            k -= 1\n            coins.append(2)\n            k -= 1\n            coins.append(2)\n            k -= 1\n            coins.append(2)\n            k -= 1\n            coins.append(2)\n            k -= 1\n            coins.append(2)\n            k -= 1\n        else:\n            if coins:\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n            else:\n                coins = []\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n                coins.append(2)\n    return len(coins)\n\n\nstdin = \"\"\"2 2\n\"\"\"\nstdin = \"\"\"4 2\n\"\"\"\nstdin = \"\"\"5 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n, k = map(int, stdin[0].split(' '))\n    coins = list(map(int, stdin[1].split(' ')))\n    coins.sort()\n    if n == 1 and k == 1:\n        return 0\n    if n == 1:\n        return 1\n    dp = [[[0] * n for i in range(n)] for i in range(k+1)]\n    for i in range(1, k+1):\n        dp[i][0][0] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[1][i][j] = i+1\n            for k in range(i, j):\n                dp[1][i][j] = min(dp[1][i][j], dp[1][i][k-1] + dp[1][k][j] + 1)\n            dp[1][i][j] = min(dp[1][i][j], dp[1][i-1][j])\n    return dp[1][n-1][n-1]\n\nprint(solution(input()))"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = [i for i in range(n + 1)]\n    opened = []\n    moves = 0\n    while n > 1:\n        if coins[n - 1] == 1:\n            coins[n - 1] = 0\n            n -= 1\n            moves += 1\n        else:\n            opened.append(coins.pop(n - 1))\n            coins[n - 2] = 0\n            n -= 2\n            moves += 2\n    return str(moves)"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(max(n * 2, n * 3), n * 4))\n\nprint(solution(input()))\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = n\n    if h < m:\n        h = m\n    elif h < 2 * m:\n        h = 2 * m\n    elif h < 3 * m:\n        h = 3 * m\n    return str(h)\nprint(solution(input()))"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return max(1, min(n, m))\n    elif n > m:\n        return solution(f'{max(n, m)} {max(n - m, 0)}')\n    else:\n        return max(solution(f'{max(n, m)} {max(m, n - m)}'), solution(f'{max(n, m)} {max(m, n - m)}'))\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = map(int, stdin)\n    return str(min(m * 3, n * (n - 1) * 2, n * n * 3))"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n // 2, m // 3, n + m - 1))"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_blocks = int(stdin.split()[0])\n    num_2block_pieces = int(stdin.split()[1])\n    num_3block_pieces = int(stdin.split()[2])\n    if num_2block_pieces == 0 and num_3block_pieces == 0:\n        return \"0\"\n    if num_2block_pieces == 0:\n        return str(num_3block_pieces * 2 ** num_3block_pieces)\n    if num_3block_pieces == 0:\n        return str(num_2block_pieces * 2 ** num_2block_pieces)\n\n\nsolution(\"1 3\")\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m, n + m - 1, n // 2, n // 3, (n + m) // 2, (n + m) // 3, max(n + m, n, m) * 2, (n + m) * 3, max(n, m) * 4))"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    max_height = 0\n    if m > 0 and n > 0:\n        height_2 = 2\n        height_3 = 3\n        while height_2 * n + height_3 * m <= max_height:\n            max_height += height_2 * n + height_3 * m\n            height_3 += 1\n        print(max_height)\n    else:\n        return 0\n    return 0\nsolution(input())\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = []\n    for i in range(n):\n        a.append(int(stdin))\n    if (len(set(a))) == len(a):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0 or n == 2:\n        return \"NO\"\n    if n == 6:\n        return \"NO\"\n    a = set(map(int, stdin.split()))\n    a = list(a)\n    if len(a)!= n:\n        return \"NO\"\n    for i in range(n):\n        if a.count(a[i])!= 2:\n            return \"NO\"\n        a.pop(i)\n        a.pop(i)\n    return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(lambda x: int(x), stdin.split()))\n    if len(set(cards))!= len(cards):\n        return 'NO'\n    a = []\n    c = []\n    for i in range(0, len(cards)):\n        a.append(cards[i])\n        c.append(a)\n        a = a[:len(a) - 1]\n        print(a)\n    if len(set(a)) == len(cards):\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'NO'\n\n    num_list = [int(i) for i in stdin.split()]\n\n    if not num_list or len(num_list)!= n:\n        return 'NO'\n\n    num_dict = dict()\n    for num in num_list:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n\n    for num in num_dict:\n        if num_dict[num]!= 1:\n            return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    print(len(stdin))\n    # result = 'NO'\n    if len(stdin) % 2!= 0:\n        print('NO')\n        return\n    for i in range(int(len(stdin) / 2)):\n        count = 0\n        for j in range(len(stdin[i * 2])):\n            if stdin[i * 2 + 1][j] == stdin[i * 2][j]:\n                count += 1\n        if count!= 2:\n            print('NO')\n            return\n    print('YES')\n    print(int(stdin[i * 2 + 1][0]), int(stdin[i * 2 + 1][-1]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    numbers = [int(x) for x in stdin.split()]\n    equal_sum = sum([x for x in numbers if x == numbers[0]])\n    if equal_sum % 2!= 0:\n        return \"NO\"\n    if (sum(numbers) - equal_sum) % 2!= 0:\n        return \"NO\"\n\n    sets_len = int(len(numbers) / 2)\n    sets = []\n    for i in range(sets_len):\n        sets.append(set(numbers[i * 2:i * 2 + 2]))\n    for i in range(sets_len):\n        if len(sets[i])!= sets_len:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n\n    petya_cards = stdin[0].split()\n    vasya_cards = stdin[1].split()\n    petya_numbers = set()\n    for number in petya_cards:\n        petya_numbers.add(int(number))\n\n    vasya_numbers = set()\n    for number in vasya_cards:\n        vasya_numbers.add(int(number))\n\n    if len(petya_numbers) == n and len(vasya_numbers) == n:\n        for i in range(n):\n            if petya_cards[i] == vasya_cards[i]:\n                return 'NO'\n        for i in range(n):\n            if int(petya_cards[i]) > int(vasya_cards[i]):\n                return 'NO'\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cards_list = list(map(int, stdin.split()))\n    petya = []\n    vasya = []\n    for i in range(n):\n        if i % 2 == 0:\n            petya.append(cards_list[i])\n        else:\n            vasya.append(cards_list[i])\n    if sum(petya) == sum(vasya):\n        return \"NO\"\n    if sum(petya) > sum(vasya):\n        return \"YES\"\n    elif sum(petya) < sum(vasya):\n        return \"YES\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    cards_num = int(stdin.split()[0])\n    cards = list(map(int, stdin.split()[1:]))\n    \n    if cards_num % 2!= 0 or len(set(cards))!= cards_num:\n        return \"NO\"\n    \n    elif cards_num % 2 == 0 and len(set(cards)) == cards_num:\n        return \"YES\"\n    \n    else:\n        petya_cards = []\n        vasya_cards = []\n        \n        for _ in range(cards_num // 2):\n            petya_cards.append(cards.pop(0))\n        for _ in range(cards_num // 2):\n            vasya_cards.append(cards.pop(0))\n            \n        petya_distinct = len(set(petya_cards))\n        vasya_distinct = len(set(vasya_cards))\n        \n        if petya_distinct > vasya_distinct:\n            return \"YES\"\n        elif petya_distinct == vasya_distinct:\n            return \"NO\"\n        else:\n            return \"NO\""
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a_s = sorted(a)\n    if a_s[0] + a_s[1] > n:\n        return 'NO'\n    if a_s[-1] + a_s[-2] <= 8*n:\n        return 'NO'\n    if n == 1:\n        if a[0] == 1:\n            return 'YES'\n        return 'NO'\n    for i in range(n):\n        if (i + 1) % 8 == 0 or (i - 1) % 8 == 0:\n            if a[i] - a[i - 1] > 8*(n - i):\n                return 'NO'\n        if i == 0:\n            if a[0] - a[1] > 8*(n - 1):\n                return 'NO'\n        if i == n - 1:\n            if a[i] - a[i - 1] > 8*(n - i):\n                return 'NO'\n        if a[i] - a[i - 1] > 8*(n - i):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    row_sum = sum(nums)\n    if row_sum % (n*8)!= 0:\n        return \"NO\"\n    groups = []\n    for i in range(n):\n        groups.append(nums[i*k:(i+1)*k])\n    i = 1\n    while i < len(groups):\n        if groups[i-1] == groups[i]:\n            return \"NO\"\n        i += 1\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, groups = map(int, stdin.split())\n    row_dict = {}\n    for _ in range(rows):\n        row_dict[stdin.split()[1]] = stdin.split()[0]\n    print(row_dict)\n    for group in row_dict:\n        for row in range(1, rows + 1):\n            if row_dict[group] + '1' in row_dict and row_dict[group] + '2' in row_dict and row_dict[group] + '7' in row_dict and row_dict[group] + '8' in row_dict:\n                print('YES')\n                return\n    print('NO')\n    return\nsolution(input())\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = sorted(list(map(int, stdin.split())))\n    res = [\"YES\"]\n    for i in range(1, k):\n        if abs(l[i - 1] - l[i]) <= k / 2:\n            res.append(\"NO\")\n        else:\n            res.append(\"YES\")\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    group = list(map(int, stdin.split()))\n    for i in range(1, k + 1):\n        if sum(group[:i]) <= n * 8:\n            for j in range(0, i):\n                if j in group and i - j in group:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return 'YES'\n    result = []\n    for i in range(k):\n        s = list(map(int, stdin.split()))\n        if sum(s[:i + 1]) < 8 * n:\n            result.append(False)\n            continue\n        else:\n            result.append(True)\n    if any(result):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    soldiers = [int(x) for x in stdin.split()]\n\n    row_0 = [soldiers[0], soldiers[0], soldiers[0], soldiers[0]]\n    row_1 = [soldiers[1], soldiers[1], soldiers[1], soldiers[1], soldiers[1]]\n    row_2 = [soldiers[2], soldiers[2], soldiers[2], soldiers[2]]\n    row_3 = [soldiers[3], soldiers[3], soldiers[3], soldiers[3], soldiers[3], soldiers[3]]\n    row_4 = [soldiers[4], soldiers[4], soldiers[4], soldiers[4]]\n\n    for i in range(k):\n        row_0.insert(soldiers[i], soldiers[i])\n        row_1.insert(soldiers[i], soldiers[i])\n        row_2.insert(soldiers[i], soldiers[i])\n        row_3.insert(soldiers[i], soldiers[i])\n        row_4.insert(soldiers[i], soldiers[i])\n\n    for row in (row_0, row_1, row_2, row_3, row_4):\n        for i in range(1, 5):\n            if row[i] == row[i - 1] and row[i - 1] == row[i + 1] and row[i + 1] == row[i + 2]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    groups = [int(i) for i in stdin.split()]\n    # print(groups)\n    counter = 1\n    for i in range(1, k):\n        if groups[i] == groups[i - 1] + 1:\n            counter += 1\n        else:\n            counter = 1\n        if counter > 2:\n            return 'NO'\n    if groups[0] == groups[k] + 1:\n        counter += 1\n    if counter > 2:\n        return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    groups = list(map(int, stdin.split()))\n    # groups = [5, 8, 6, 7, 3, 4, 2, 1]\n\n    row_groups = [[] for _ in range(n)]\n    for i, group in enumerate(groups):\n        for j, g in enumerate(row_groups):\n            if i == 0 and group % 8 == 1 and g:\n                row_groups[j].append(group)\n                groups[i] -= group\n                break\n            elif group % 8 == 1 and groups[i] % 8 == 1:\n                row_groups[j].append(group)\n                groups[i] -= group\n                break\n            elif group % 8 == 1 and groups[i] % 8!= 1:\n                row_groups[j].append(group)\n                groups[i] -= group\n                break\n            elif group % 8!= 1 and groups[i] % 8 == 1:\n                groups[i] -= group\n                break\n            elif group % 8!= 1 and groups[i] % 8!= 1:\n                row_groups[j].append(group)\n                groups[i] -= group\n                break\n\n    for i, g in enumerate(row_groups):\n        if groups[i] == 0:\n            for j in range(i + 1, len(row_groups)):\n                if groups[j] == 0:\n                    for k in range(j + 1, len(row_groups)):\n                        if groups[k] == 0:\n                            return 'YES'\n        else:\n            return 'NO'\n\n\nsolution('1 2')\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seats = []\n    for i in range(k):\n        seats.append(list(map(int, stdin.split())))\n    for group in seats:\n        if group[0] + group[1]!= 8 * n:\n            return 'NO'\n    for group in seats:\n        n = group[0]\n        a = group[1]\n        for i in range(1, n):\n            if group[i] == group[i - 1] or group[i] == group[i - 1] + 1:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    t = 1\n    s = 0\n    cnt = 0\n    for i in range(n):\n        if a[i] == t:\n            continue\n        s += a[i] - t\n        if s > 1:\n            s = 1\n        cnt += 1\n        t = a[i]\n    return str(t) + \" \" + str(s)\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sticks = sorted([int(x) for x in stdin.strip().split(\"\\n\")])\n    t = 2\n    print(t, sticks)\n    while True:\n        sticks_copy = sticks.copy()\n        for i in range(1, n):\n            sticks[i] = min(sticks_copy[i], sticks_copy[i - 1] + 1)\n        sticks_copy = sticks.copy()\n        for i in range(1, n):\n            if sticks[i] > sticks_copy[i] + 1:\n                sticks[i] = sticks_copy[i] + 1\n        if sticks == sticks_copy:\n            break\n        t += 1\n        print(t, sticks)\n    return t, sticks[-1]\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = stdin.split()\n    a = sorted([int(i) for i in sticks])\n    best = a[:]\n    best_cost = sum(abs(a[i] - i) for i in range(n))\n    for i in range(n):\n        for j in range(i):\n            for k in range(j):\n                new_a = a[:]\n                new_a[i], new_a[j], new_a[k] = new_a[j], new_a[k], new_a[i]\n                cost = sum(abs(i - j) for i in new_a)\n                if cost <= best_cost:\n                    best = new_a\n                    best_cost = cost\n    t = best[0]\n    return str(t) + \" \" + str(best_cost)\n\nsolution('5 1 1 2 2 3')\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nyour code here\nstdout.write(f'{ans}\\n')\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"2 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     if array[i] - 2 >= 0:\n    #         array[i] -= 2\n    #         print(i, array[i], array)\n    #     if array[i] - 1 >= 0:\n    #         array[i] -= 1\n    #         print(i, array[i], array)\n    #\n    #     if array[i] >= 2:\n    #         array[i] += 2\n    #         print(i, array[i], array)\n    #     if array[i] >= 1:\n    #         array[i] += 1\n    #         print(i, array[i], array)\n    # print(sum(array))\n    # return sum(array)\n    return str(sum(array))\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, *sticks] = [int(i) for i in stdin.split()]\n    min_val = float('inf')\n    min_t = -1\n    for t in range(1, n+1):\n        curr_val = 0\n        curr_sticks = sticks[:]\n        for i in range(n):\n            curr_sticks[i] = curr_sticks[i] + abs(t - curr_sticks[i])\n            curr_val = curr_val + abs(curr_sticks[i] - t)\n        if curr_val < min_val:\n            min_val = curr_val\n            min_t = t\n    print(min_t)\n    print(min_val)\n    return ''"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    t = 1\n    h = 0\n    \n    for i in range(1, n):\n        if abs(a[i] - t) <= 1:\n            h += 1\n        else:\n            h = 0\n        if h == i:\n            t = a[i]\n    \n    return str(t) +'' + str(h)\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: List[int] = []\n    for _ in range(n):\n        s.append(int(stdin.split('\\n')[0]))\n    minimum = 1\n    for i in range(1, n):\n        for j in range(i, n):\n            if abs(s[i] - s[j]) <= 1:\n                continue\n            else:\n                cost = abs(s[i] - s[j]) + abs(s[i] - s[j - 1]) + abs(s[j] - s[j + 1])\n                if minimum > cost:\n                    minimum = cost\n    print(minimum)\n    return minimum\n\n\nsolution('''3\n10 1 4\n3 1 2 2 3''')\n\nsolution('''5\n1 1 2 2 3''')"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = []\n    for ai in a:\n        new_a = []\n        for i in range(n):\n            if i+ai <= n:\n                new_a.append(i+ai)\n        res.append(new_a)\n    print(max(res, key = lambda x: len(x)))\n    print(min(res, key = lambda x: len(x)))\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = a[1]\n    a = list(map(int, stdin.split()))\n    p = 0\n    for i in range(k):\n        if a[i] == 0:\n            a[i], a[i + 1] = a[i + 1], a[i]\n        if a[i] == 1:\n            p += 1\n    q = 1\n    for i in range(k, n):\n        if a[i] == 1:\n            a[i], a[i + 1] = a[i + 1], a[i]\n        if a[i] == 0:\n            q += 1\n    return str(int(p / q))\n\n\nsolution(input())\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p, q = 1, 1\n    for i in range(n):\n        if a[i] == 0:\n            p *= p\n            q *= q\n        else:\n            a[i], a[i - 1] = a[i - 1], a[i]\n            p *= q\n            q *= q\n    print(p % (10 ** 9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    return str(int(pow(int(a[0] / a[1]), -1) * pow(a[0] / a[2], -1) * pow(a[1] / a[2], -1)))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 0:\n        return \"0\"\n    p = k\n    q = 1\n    for i in range(k):\n        if a[i] == 0:\n            continue\n        q *= i\n    return str(int(p/q)) + \" \" + str(int(q**-1)) + \" \" + str(int(q**-1 * p))\n\n\nprint(solution(\"5 1\" + \"\\n1 1 1 0 0\"))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, k = list(map(int, stdin.split()))\n  p, q = a[:], 1\n  for _ in range(k):\n    q = (q * 10 % 998244353) * (10 % 998244353) % 998244353\n  print(p, q)\n  return str(p * q % 998244353)"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    p = k % len(arr)\n    a_sum = sum(arr)\n    count = 0\n    prod = 1\n    while (count < n):\n        if count + p > len(arr):\n            break\n        elif arr[count] == arr[count + p]:\n            count += 1\n            continue\n        elif a_sum - prod >= prod:\n            count += 1\n            continue\n        else:\n            if (count + p - count) % 2 == 0:\n                prod = prod + count\n            else:\n                prod = a_sum - prod - (prod - count)\n            count = 0\n    ans = 0\n    if (a_sum - prod) % 2 == 0:\n        ans = a_sum - prod\n    else:\n        ans = a_sum - prod - (a_sum - prod - count)\n    return ans % (10**9 + 7)\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total_set = set([])\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_set.add(a[i] + a[j])\n    print(total_set)\n    probability = 1\n    for p in total_set:\n        probability *= (2 ** (k - 1)) * (2 ** (2 * k + 1 - (p * 2) + 1))\n    probability //= (2 ** (2 * k + 1))\n    print(probability)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p, q = 1, 1\n    for i in range(k):\n        a1, a2 = a[i], a[i+1]\n        a[i], a[i+1] = a2, a1\n        p *= a2\n        q *= a1\n    return str(p * q**(-1))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s % 2!= 0:\n        return 0\n\n    if a[0] == 1:\n        s = s - a[0]\n        a = a[1:]\n    c = 0\n    t = 0\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            c = 1\n        else:\n            c = 0\n        if c:\n            t += 1\n    if t >= k:\n        return s / 2\n    else:\n        return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    a = inp[1:]\n    n = len(a)\n    k = inp[0]\n    res = 0\n    for i in range(k):\n        for j in range(n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    print(*a)\n    if sum(a) % (k - 1)!= 0:\n        return str(res)\n    else:\n        return str(0)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return min(\n        (a + b) * 2 + (a + c) * 2,\n        (a + b) * 2 + (b + c) * 2,\n        (a + c) * 2 + (b + c) * 2,\n        (c + a) * 2 + (c + b) * 2,\n        (c + a) * 2 + (a + b) * 2,\n        (c + b) * 2 + (a + b) * 2,\n        (c + b) * 2 + (b + a) * 2,\n        (c + a) * 2 + (b + a) * 2,\n    )\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    x = int(input_list[0])\n    y = int(input_list[1])\n\n    return str(min((x * x - y * y) // (2 * x), (y * y - x * x) // (2 * y)))\n\ndef"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    return str(math.ceil(math.sqrt(x ** 2 + y ** 2)) - x)\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(min(y-x, x+1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    x, y = list(map(int, lines[0].split()))\n    res = float(\"inf\")\n    for a in range(1, y):\n        for b in range(a, y):\n            c = y - a - b\n            if a**2 + b**2 == c**2:\n                res = min(res, (a + b + c) / 2)\n                break\n    return str(int(res))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    # first edge\n    a = x\n    b = y\n    c = a + b\n    # second edge\n    a = a + c\n    b = y\n    c = a + b\n    # third edge\n    a = a + c\n    b = b + c\n    c = a + b\n    return str(a + b + c)"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    return str(min((x + y) // 2, (y + x) // 2, (x - y) // 2, (y - x) // 2))"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x, y = [int(i) for i in stdin.split()]\n    step = int(y / math.sqrt(3))\n    while x!= step:\n        if x - step <= y <= x + step:\n            return step + 1\n        else:\n            step += int(math.sqrt(3) * step / 2)\n    return 0\n\nprint(solution(input()))\n\n\n'''\n\nx, y = map(int, input().split())\n\nx1 = x\ny1 = x\nwhile x1 <= y1:\n    y1 = y1 - (x1 ** 2 + y1 ** 2) **.5\n    x1 = x1 + 1"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    while x % 2!= 0 or y % 2!= 0:\n        x = x + 1\n        y = y + 1\n    return str(int((x - y) / 2))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x, y = map(int, stdin.strip().split())\n    while True:\n        if (x, y, x + y + math.sqrt(x ** 2 + y ** 2)) == (x, y, y + math.sqrt(x ** 2 + y ** 2)):\n            return str(x + y + math.sqrt(x ** 2 + y ** 2))\n        x += 1\n        y = x + math.sqrt(x ** 2 + y ** 2)\nsolution(input())\n'''\n\n\ndef"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    b = [[a, b], [c, d]]\n    return str(abs(det(b))).replace('0', '1')\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n\n    det = a*d - b*c\n    if det == 0:\n        return '0'\n    \n    return '{0:.9f}'.format(abs(det))\n\nprint(solution(input()))\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return '{:.9f}'.format(min([(b ** 2) - (4 * a * c), (a ** 2) - (4 * b * d), 2 * a * b + c * d - a ** 2 - b ** 2]))\n\ndef"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(matrix, rotations):\n        return np.dot(matrix, np.rot90(rotations, k=1, axes=(1, 0)))\n\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    matrix = np.array([[a, b], [c, d]])\n    matrix_rot = rotate(matrix, 1)\n    res = abs(a * d - c * b)\n    print(res)\n    return res\n\nsolution(\"\"\"1 0\n0 1\"\"\")\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    b = np.matrix([[a,b],[c,d]])\n    if b.dtype!= np.float:\n        return '-inf'\n    return '%.9f'%np.linalg.det(b)\n\n\ndef"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(float, stdin.split()))\n    return str(abs(a-b)*max(abs(a), abs(b)) + min(abs(a), abs(b)))\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    max_abs = max(max(abs(a), abs(b)), max(abs(c), abs(d)))\n    ans = (max_abs - min(abs(a), abs(b), abs(c), abs(d))) ** 2\n    return str(ans)\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    matrix = [[a, b], [c, d]]\n    return str(matrix)\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(float, stdin.split())) for _ in range(n)]\n    b = [list(map(float, stdin.split())) for _ in range(m)]\n    a = np.array(a)\n    b = np.array(b)\n    a = np.transpose(a)\n    b = np.transpose(b)\n    print(np.linalg.det(np.concatenate((a, b), axis=1)))\n    return np.linalg.det(np.concatenate((a, b), axis=1))\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return f\"{float(a * d - b * c) / (a * d - b * c)}\".replace(\".\", \"\")"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    input = [list(map(int, stdin.split())) for _ in range(n)]\n    table1 = a - 1\n    table2 = b - 1\n    # one-seater\n    table1_group = 0\n    for person in input:\n        # if one person and it's sitting in a vacant table\n        if person[0] == 1 and table1_group == 0:\n            table1_group += 1\n            table1 += 1\n        # if it's occupied by someone\n        if table1_group > 0:\n            table1_group -= 1\n        # if one person and it's sitting in a vacant table\n        if person[1] == 1 and table2_group == 0:\n            table2_group += 1\n            table2 += 1\n        # if it's occupied by someone\n        if table2_group > 0:\n            table2_group -= 1\n    return str(table1 + table2)"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    ans = 0\n    while lst:\n        ans += a\n        if a == 1:\n            if lst[0] == 1:\n                ans += 1\n                lst.pop(0)\n            else:\n                ans += 2\n                lst.pop(0)\n                lst.pop(0)\n        else:\n            if lst[0] == 1:\n                ans += 2\n                lst.pop(0)\n            else:\n                ans += 2\n                lst.pop(0)\n                lst.pop(0)\n    return str(ans)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, a, b = (int(x) for x in stdin.split())\n    # return print(sum([1 if x == 0 else 0 for x in map(lambda x: (1 if x == 1 else 2) + sum(list(map(lambda x: 1 if x == 2 else 0, (range(1, n + 1))))), range(1, n + 1))]))\n    return print(sum(1 if x == 1 else 0 if x == 2 else 0 for x in map(lambda x: (1 if x == 1 else 2) + sum(list(map(lambda x: 1 if x == 2 else 0, (range(1, n + 1))))), range(1, n + 1))))\n\n\nsolution(input())\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    one_seater = 0\n    two_seater = 0\n    for i in range(n):\n        if a <= i < b:\n            one_seater += 1\n        elif i == b:\n            two_seater += 1\n    return str(two_seater)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read data\n    n, a, b = list(map(int, stdin.split()))\n    orders = list(map(int, stdin.split()))\n    # Count number of empty seats\n    empty_seats = 0\n    for o in orders:\n        if o == 1:\n            empty_seats += 1\n    # Search through all orders\n    for o in orders:\n        if o == 1:\n            empty_seats -= 1\n        elif o == 2:\n            if empty_seats >= a and empty_seats <= b:\n                return str(empty_seats)\n            else:\n                return \"0\"\n    return \"0\"\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, One, Two = map(int, stdin.split())\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    num_seated_one, num_seated_two = 0, 0\n    for i in range(N):\n        if t[i] == 1:\n            num_seated_one += 1\n        else:\n            num_seated_two += 1\n    if num_seated_one == 0:\n        return \"{0:d}\".format(0)\n    elif num_seated_two == 0:\n        return \"{0:d}\".format(One * Two)\n    else:\n        return \"{0:d}\".format(One * Two - (num_seated_one * One + num_seated_two * Two))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    _seats = [(i, 1) for i in range(1, n + 1)]\n    people = 0\n    while _seats:\n        group = _seats.pop(0)\n        if group[1] == 1:\n            people += 1\n        elif group[1] == 2:\n            people += 2\n            if a < people < b:\n                _seats.append(group)\n        elif group[1] == 3:\n            people += 2\n            if a < people < b:\n                _seats.append(group)\n        elif group[1] == 4:\n            people += 2\n            if a < people < b:\n                _seats.append(group)\n        else:\n            if a < people < b:\n                _seats.append(group)\n    return people\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    groups = [0]*(n+1)\n    for i in range(1, n+1):\n        groups[i] = int(input())\n    fant_1 = a\n    fant_2 = b\n    res = 0\n    for i in range(n):\n        if groups[i] == 1:\n            if fant_1 == 1:\n                fant_1 = 0\n                fant_2 = 1\n                res += 1\n            else:\n                fant_1 -= 1\n        else:\n            if fant_2 == 1:\n                fant_2 = 0\n                fant_1 = 1\n                res += 1\n            else:\n                fant_2 -= 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    t = stdin.split()\n    total = 0\n    for i in range(len(t)):\n        if a == 1:\n            if t[i] == '1':\n                total += 1\n            else:\n                continue\n        else:\n            if t[i] == '1':\n                total += 1\n            else:\n                total += 2\n        if total > b:\n            return \"0\"\n    return str(total)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(i) for i in stdin.split())\n    t = tuple(int(i) for i in stdin.split())\n\n    count = 0\n    for i in t:\n        if i == a:\n            count += 1\n        elif i == b:\n            count += 2\n    return str(count)\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = (int(x) for x in stdin.split())\n    if A == 0:\n        return -1\n    if A + B + C > N:\n        return -1\n    if (A > N) and (B > N) and (C > N):\n        return -1\n    if A + B < N:\n        return str(N - A)\n    if A + C < N:\n        return str(N - A - B)\n    if A + C > N:\n        return str(N - A - C)"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    distribution = [A, B, C]\n    b = 0\n    for i in range(N):\n        if not any(i for i in distribution if i >= i):\n            b += 1\n    if any(i for i in distribution if i >= 0):\n        return '-1'\n    return str(b)\n\nprint(solution(input()))\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if N % A == 0 or N % B == 0 or N % C == 0:\n        return f\"{N - 1 - (N // A) + (N // B) + (N // C)}\"\n    return \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    a, b, c, n = data\n    if a+b+c == n:\n        if a!= 0:\n            return str(a)\n        else:\n            return '-1'\n    elif a+b+c == n and a!= 0:\n        return '1'\n    else:\n        return '-1'"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    AB = (A + 2 * B) // 2\n    AC = (A + 2 * C) // 2\n    N_AB = N // 2\n    N_AC = N - N_AB\n    AB_not_pass = 1 - N_AB // AB\n    AC_not_pass = 1 - N_AC // AC\n    return -1 if AB_not_pass > AC_not_pass else '{}'.format(AB_not_pass + AC_not_pass)"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A == 0 and C == 0 and N!= 0:\n        return '-1'\n    elif A == 0 and C == 0 and N == 0:\n        return '0'\n    elif A == 0 and B == 0 and C == 0 and N!= 0:\n        return '-1'\n    elif A == 0 and B == 0 and C == 0 and N == 0:\n        return '0'\n    elif A == 0 and (B > 0 or C > 0) and N!= 0:\n        return '-1'\n    elif A == 0 and (B > 0 or C > 0) and N == 0:\n        return '0'\n    elif (A > 0 or C > 0) and N!= 0:\n        return '-1'\n    elif (A > 0 or C > 0) and N == 0:\n        return '0'\n    elif (B > 0 or C > 0) and N!= 0:\n        return '-1'\n    elif (B > 0 or C > 0) and N == 0:\n        return '0'\n    else:\n        return '0'"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    if not 1 <= a <= n <= 100 and a!= b and a!= c:\n        return -1\n    if not 1 <= a <= c:\n        return -1\n    if not n % a == 0 and not n % b == 0 and not n % c == 0:\n        return -1\n    if a == b == c:\n        return n - a\n    if a == b == c:\n        return -1\n    if a == 0:\n        return -1\n    if b == 0:\n        return -1\n    if c == 0:\n        return -1\n    if b == 1:\n        if a == n:\n            return -1\n        return a - 1\n    if a == 1:\n        if b == n:\n            return -1\n        return n - b\n    if c == 1:\n        if a == n:\n            return -1\n        return n - a\n    if a == 2:\n        if b == 0:\n            return -1\n        if c == 0:\n            return -1\n        return n - a\n    if a == 1:\n        if b == 1:\n            return -1\n        if c == 1:\n            return -1\n        return n - a\n    return -1\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if (A > 0) & (B > 0) & (C > 0) & (N > 0):\n        if A <= N:\n            return str(A)\n        elif (A + B + C) <= N:\n            return str(-1)\n        else:\n            return str(-1)\n    elif (A == 0) & (B == 0) & (C == 0) & (N == 0):\n        return str(N)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return (x * k + 1) % (10**9 + 7)\n    \n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    w = k % (10 ** 9 + 7)\n    return str(x // 2 + w // 2)\n    \n    \n    \n    \n    "
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return str(sum(((i+1)*i+1)//2 for i in range(k+1)) % (10**9 + 7))\nprint(solution(input()))"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return int((x * (x + 1))/2 + k) % (10**9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split()))\n    if k == 1:\n        return 0\n    else:\n        return ((x * x) // (x * x + 4 * k)) % (10**9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sum(int(c) for c in stdin[:-1]) * (1 - float(stdin[-1]))) % (10 ** 9 + 7))\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [x, k] = list(map(int, stdin.split()))\n    return str(x * (x + 1) // 2)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = int(stdin.strip().split(\" \")[0]), int(stdin.strip().split(\" \")[1])\n    x = 1\n    k = 0\n    while x < 2 * b:\n        if (x + k) % 2 == 0:\n            x += 1\n        else:\n            k += 1\n            x += 1\n    print(x)\n    return x % (10**9 + 7)\n\n\nsolution(input())\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, k = (int(x) for x in stdin.split())\n    k += 1\n    \n    ans = (k + 1) * x % 10**9 + 7\n    return str(ans)"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    d = 1\n    for i in range(1, k + 1):\n        d *= 2\n        d %= 1_000_000_007\n    return str(d)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    rng = xrange(998244353)\n    for _ in xrange(N):\n        l, r = map(int, stdin.split())\n        if l == r:\n            continue\n        if l == 1:\n            if r == 1:\n                continue\n            else:\n                return '1'\n        if r == 1:\n            if l == 1:\n                continue\n            else:\n                return '1'\n        l -= 1\n        r -= 1\n        if (l, r) in primes:\n            return '1'\n        else:\n            return '0'\n\nN = int(input())\nlst = []\nfor _ in range(N):\n    l, r = map(int, input().split())\n    lst.append((l, r))\n\nimport math\nfor t in lst:\n    if t[0] == t[1]:\n        print(0)\n    else:\n        print(1)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l, r = 0, 998244353\n    s = 0\n    for i in range(N):\n        l, r = r, r*l %998244353\n        s += l\n    return f\"{s%998244353}\""
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    l = map(int, stdin[1].split())\n    r = map(int, stdin[2].split())\n    l = sorted(l)\n    r = sorted(r)\n\n    possible = []\n    for i in range(1, n):\n        possible.append(l[i - 1] * r[i] % 998244353)\n    return possible[-1] ** -1 % 998244353\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    num_inversions = int(stdin.split()[1])\n    l = int(stdin.split()[2])\n    r = int(stdin.split()[3])\n    if n > 100:\n        return \"error\"\n    if n <= 0:\n        return \"error\"\n    if num_inversions <= 0:\n        return \"error\"\n    if num_inversions > 998244351:\n        return \"error\"\n    if l > 998244353 or r > 998244353:\n        return \"error\"\n    if l > r:\n        return \"error\"\n    if l == 0 and r == 0:\n        return \"error\"\n    if num_inversions == 1:\n        return \"1\"\n    if num_inversions == 2:\n        return \"1/2\"\n    if num_inversions == 3:\n        return \"1/3\"\n    if num_inversions == 4:\n        return \"1/4\"\n    if num_inversions == 5:\n        return \"1/5\"\n    if num_inversions == 6:\n        return \"1/6\"\n    if num_inversions == 7:\n        return \"1/7\"\n    if num_inversions == 8:\n        return \"1/8\"\n    if num_inversions == 9:\n        return \"1/9\"\n    if num_inversions == 10:\n        return \"1/10\"\n    if num_inversions == 11:\n        return \"1/11\"\n    if num_inversions == 12:\n        return \"1/12\"\n    if num_inversions == 13:\n        return \"1/13\"\n    if num_inversions == 14:\n        return \"1/14\"\n    if num_inversions == 15:\n        return \"1/15\"\n    if num_inversions == 16:\n        return \"1/16\"\n    if num_inversions == 17:\n        return \"1/17\"\n    if num_inversions == 18:\n        return \"1/18\"\n    if num_inversions == 19:\n        return \"1/19\"\n    if num_inversions == 20:\n        return \"1/20\"\n    if num_inversions == 21:\n        return \"1/21\"\n    if num_inversions == 22:\n        return \"1/22\"\n    if num_inversions == 23:\n        return \"1/23\"\n    if num_inversions == 24:\n        return \"1/24\"\n    if num_inversions == 25:\n        return \"1/25\"\n    if num_inversions == 26:\n        return \"1/26\"\n    if num_inversions == 27:\n        return \"1/27\"\n    if num_inversions == 28:\n        return \"1/28\"\n    if num_inversions == 29:\n        return \"1/29\"\n    if num_inversions == 30:\n        return \"1/30\"\n    if num_inversions == 31:\n        return \"1/31\"\n    if num_inversions == 32:\n        return \"1/32\"\n    if num_inversions == 33:\n        return \"1/33\"\n    if num_inversions == 34:\n        return \"1/34\"\n    if num_inversions == 35:\n        return \"1/35\"\n    if num_inversions == 36:\n        return \"1/36\"\n    if num_inversions == 37:\n        return \"1/37\"\n    if num_inversions == 38:\n        return \"1/38\"\n    if num_inversions == 39:\n        return \"1/39\"\n    if num_inversions == 40:\n        return \"1/40\"\n    if num_inversions == 41:\n        return \"1/41\"\n    if num_inversions == 42:\n        return \"1/42\"\n    if num_inversions == 43:\n        return \"1/43\"\n    if num_inversions == 44:\n        return \"1/44\"\n    if num_inversions == 45:\n        return \"1/45\"\n    if num_inversions == 46:\n        return \"1/46\"\n    if num_inversions == 47:\n        return \"1/47\"\n    if num_inversions == 48:\n        return \"1/48\"\n    if num_inversions == 49:\n        return \"1/49\"\n    if num_inversions == 50:\n        return \"1/50\"\n    if num_inversions == 51:\n        return \"1/51\"\n    if num_inversions == 52:\n        return \"1/52\"\n    if num_inversions == 53:\n        return \"1/53\"\n    if num_inversions == 54:\n        return \"1/54\"\n    if num_inversions == 55:\n        return \"1/55\"\n    if num_inversions == 56:\n        return \"1/56\"\n    if num_inversions == 57:\n        return \"1/57\"\n    if num_inversions == 58:\n        return \"1/58\"\n    if num_inversions == 59:\n        return \"1/59\"\n    if num_inversions == 60:\n        return \"1/60\"\n    if num_inversions == 61:\n        return \"1/61\"\n    if num_inversions == 62:\n        return \"1/62\"\n    if num_inversions == 63:\n        return \"1/63\"\n    if num_inversions == 64:\n        return \"1/64\"\n    if num_inversions == 65:\n        return \"1/65\"\n    if num_inversions == 66:\n        return \"1/66\"\n    if num_inversions == 67:\n        return \"1/67\"\n    if num_inversions == 68:\n        return \"1/68\"\n    if num_inversions == 69:\n        return \"1/69\"\n    if num_inversions == 70:\n        return \"1/70\"\n    if num_inversions == 71:\n        return \"1/71\"\n    if num_inversions == 72"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, max_p = stdin.split()\n    max_p = int(max_p)\n    l, r = map(int, stdin.split())\n    return str(l*r)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(l: int, r: int) -> int:\n        return l * r\n\n    if len(stdin) < 2:\n        return 0\n\n    n = int(stdin.splitlines()[0])\n    if n < 2:\n        return 0\n\n    l, r = map(int, stdin.splitlines()[1].split(' '))\n    res = solve(l, r)\n    return str(res % 998244353)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = 1, 1\n    i = 2\n    while i <= n:\n        a, b = b, (a + b) % 998244353\n        i += 1\n    return str(b)\n    \nsolution(input())\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(1, n+1):\n        lo, hi = list(map(int, input().split()))\n        if lo <= cnt <= hi:\n            cnt += 1\n        else:\n            cnt = 1\n    return str(cnt)\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of ways to split a stick such that it is possible to make a rectangle using these parts\n    '''\n    n = int(stdin)\n    if n%4 == 0:\n        return 4\n    elif n%4 == 1:\n        return 3\n    elif n%4 == 2:\n        return 2\n    elif n%4 == 3:\n        return 1"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each of the n numbers in stdin, returns the number of ways to make the sticks.\n    \"\"\"\n    def solve(n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return solve(n - 1) + solve(n - 2)\n    return str(solve(int(stdin)))\n    \n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    def combination(n: int, r: int) -> int:\n        if r == 0:\n            return 1\n        if r == 1:\n            return n\n        if r == 2:\n            return n*(n-1)\n        if r == 3:\n            return n*(n-1)*(n-2)\n    def three_part(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 9\n        if n == 4:\n            return 17\n        return 6\n    def four_part(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 12\n        if n == 4:\n            return 25\n        return 20\n    # 1 - 1\n    # 2 - 4\n    # 3 - 9\n    # 4 - 20\n    cnt1 = combination(n-1, 2)\n    cnt2 = combination(n-1, 3)\n    cnt3 = combination(n-1, 4)\n    cnt4 = combination(n-2, 2) + combination(n-3, 2) + combination(n-4, 2)\n    cnt5 = combination(n-2, 3) + combination(n-3, 3) + combination(n-4, 3)\n    cnt6 = combination(n-2, 4) + combination(n-3, 4) + combination(n-4, 4)\n    return min(cnt1, cnt2, cnt3, cnt4, cnt5, cnt6)\n    return cnt1\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N >= 1 and N <= 2*(10**9):\n        print(1)\n    else:\n        print(4)\n\nsolution(input())\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def factors(n):\n        return list(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \n    factors = factors(n)\n    def is_rectangle(cuts):\n        parts_lengths = set()\n        for cut in cuts:\n            parts_lengths.add(cut)\n            if cut + 1 in parts_lengths or cut - 1 in parts_lengths:\n                return False\n        return True\n    \n    def is_square(cuts):\n        parts_lengths = set()\n        for cut in cuts:\n            parts_lengths.add(cut)\n            if cut * 2 in parts_lengths or cut / 2 in parts_lengths:\n                return False\n        return True\n    \n    def combinations(cuts):\n        if len(cuts) < 4:\n            return 1\n        ways = 1\n        for i in range(1, len(cuts)):\n            left_cuts = cuts[:i]\n            right_cuts = cuts[i:]\n            if not is_rectangle(left_cuts) or not is_rectangle(right_cuts):\n                continue\n            left_parts_lengths = set()\n            right_parts_lengths = set()\n            for cut in left_cuts:\n                left_parts_lengths.add(cut)\n            for cut in right_cuts:\n                right_parts_lengths.add(cut)\n            if len(left_parts_lengths) < 4 or len(right_parts_lengths) < 4:\n                continue\n            if not is_square(left_parts_lengths) or not is_square(right_parts_lengths):\n                continue\n            ways *= 2\n        return ways\n    \n    return combinations(factors)"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = []\n\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    divisors.sort()\n    divisors.append(n)\n\n    # print(divisors)\n\n    # create a set\n    # for each of the divisors\n    # for each of the divisors\n    # if x - 2 and x - 1 do not appear in the set\n    # if they do, append to the set\n    # return the length of the set\n\n    #divisors.sort()\n\n    #set1 = set()\n    #set2 = set()\n    #for i in range(len(divisors)):\n    #    if divisors[i] - 2 in divisors:\n    #        set1.add(divisors[i])\n    #    if divisors[i] - 1 in divisors:\n    #        set2.add(divisors[i])\n    #if len(set1) > len(set2):\n    #    return len(set1)\n    #else:\n    #    return len(set2)\n\n    return len(set(divisors))\n\nsolution('3')\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    num = int(stdin)\n    if num == 1:\n        return \"1\"\n    if num == 2:\n        return \"2\"\n    if num == 3:\n        return \"4\"\n    if num == 4:\n        return \"1\"\n    if num == 5:\n        return \"2\"\n    if num == 6:\n        return \"4\"\n    if num == 7:\n        return \"3\"\n    if num == 8:\n        return \"6\"\n    if num == 9:\n        return \"2\"\n    if num == 10:\n        return \"7\"\n    if num == 11:\n        return \"5\"\n    if num == 12:\n        return \"4\"\n    if num == 13:\n        return \"3\"\n    if num == 14:\n        return \"7\"\n    if num == 15:\n        return \"5\"\n    if num == 16:\n        return \"3\"\n    if num == 17:\n        return \"4\"\n    if num == 18:\n        return \"6\"\n    if num == 19:\n        return \"7\"\n    if num == 20:\n        return \"8\""
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i <= n:\n        i = i + i\n    return i"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0:\n        return '1'\n    if n % 4 == 1:\n        return '4'\n    if n % 4 == 2:\n        return '4'\n    if n % 4 == 3:\n        return '2'\n    return '0'"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n, s = int(n), int(s)\n    \n    baskets = []\n    for i in range(n):\n        baskets.append(int(input()))\n    \n    baskets.sort()\n\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if baskets[mid] <= s:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return str(left - 1) if left > 0 else '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp_n, inp_s = map(int, stdin.split())\n    inp_v = list(map(int, stdin.split()))\n    return str(int(min(inp_v) // min(inp_v) * inp_s) if max(inp_v) > inp_s else -1)"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    kegs = list(map(int, stdin.split()))\n    kegs.sort()\n\n    ans = -1\n\n    if kegs[0] + kegs[1] <= s:\n        ans = kegs[0] + kegs[1]\n    else:\n        ans = -1\n    return str(ans)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = (int(i) for i in stdin.split())\n    v = [int(i) for i in stdin.split()]\n    if n > s:\n        return -1\n    if n < s:\n        return s // n\n    else:\n        return -1"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, s = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    v.sort()\n    if max(v) * n <= s:\n        return str(n)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin[0]), int(stdin[1])\n    v = list(map(int, stdin[2].split()))\n    v.sort()\n    v = v[::-1]\n    if v[0] < s:\n        return str(s)\n    max_val = sum(v)\n    ans = float('-inf')\n    for i in range(len(v)):\n        if i == 0:\n            left_over = 0\n        else:\n            left_over = v[i - 1] - s\n        if left_over > 0:\n            if ans == float('-inf') or ans > i + 1:\n                ans = i + 1\n    return str(ans) if ans!= float('-inf') else str(-1)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = (int(x) for x in stdin.split())\n    v = [int(x) for x in stdin.split()]\n    if n < s: return -1\n    if n == s: return sum(v)\n    if s == 0: return 0\n    if s > sum(v): return -1\n\n    min_v = min(v)\n    max_v = max(v)\n    if max_v - min_v < s:\n        return -1\n    s -= min_v\n    if s <= 0: return 0\n    res = 0\n    curr_v = max_v\n    while curr_v <= s:\n        curr_v += min_v\n        res += 1\n    return res\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    kegs = list(map(int, stdin.split()))\n    kegs.sort()\n\n    lowest = 0\n    highest = min(kegs)\n\n    while lowest < highest:\n        mid = (lowest + highest) // 2\n        pour_so_far = 0\n        for keg in kegs:\n            pour_so_far += min(keg, mid)\n        if pour_so_far >= s:\n            lowest = mid + 1\n        else:\n            highest = mid\n    return str(lowest - 1)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    volumes = list(map(int, stdin.split()))\n    levers = 0\n    volumes.sort(reverse=True)\n    for volume in volumes:\n        if vol_pour(volume, s):\n            return str(levers)\n        levers += 1\n\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    v.sort()\n    min = abs(n-s)\n    if min >= n:\n        return \"-1\"\n    ans = min\n    for i in range(n):\n        if v[i] > s:\n            return str(ans)\n        ans = min if v[i] + v[n-1] <= s else ans\n        if ans == 0:\n            return str(ans)\n    return str(ans)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n\n    day = 1\n\n    while a <= h_1 <= h_2:\n        if a <= h_1 <= h_2:\n            day += 1\n            a = a + (a * b)\n            if a <= h_1 <= h_2:\n                day += 1\n        else:\n            day = -1\n            break\n    return str(day)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(stdin))\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    trees = stdin.split(\" \")\n    h_1 = int(trees[0])\n    h_2 = int(trees[1])\n\n    t_1 = int(trees[2])\n    t_2 = int(trees[3])\n\n    max_height = max(h_1, h_2)\n\n    days = max_height - min(h_1, h_2)\n    if (days % (t_1 + t_2) == 0):\n        return str(days // (t_1 + t_2))\n    else:\n        return '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = map(int, stdin.split())\n    days_count = 1\n    if h_1 > h_2:\n        return str(h_2 - h_1 + 1)\n    else:\n        return str(days_count)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    if h1 >= h2:\n        return -1\n    d = b - a\n    return ((h2 - h1) - d) // 24\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n\n    days = (h_2 - h_1) // (a + b) + 1\n\n    return str(days) if h_2 >= h_1 else '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, a, b = stdin.split(' ')\n    h_1, h_2, a, b = int(h_1), int(h_2), int(a), int(b)\n    caterpillar = h_1\n    apple = h_2\n    delta = h_2 - h_1\n    days = 0\n    while apple > caterpillar:\n        days += 1\n        if days == 0:\n            apple += a\n            if apple > caterpillar:\n                break\n            delta += b\n            caterpillar += delta\n        if days == 1:\n            apple += a\n            if apple > caterpillar:\n                break\n            delta += b\n            caterpillar += delta\n    return days if apple <= caterpillar else -1\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    height_1, height_2 = map(int, stdin.split())\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    count = 0\n    if height_1 < height_2:\n        while height_1 > 0:\n            if height_1 < height_2:\n                if height_2 - height_1 > a:\n                    height_1 += a\n                    height_2 += b\n                else:\n                    count += 1\n            else:\n                if height_1 - height_2 > a:\n                    height_2 += b\n                else:\n                    count += 1\n                break\n    else:\n        while height_2 > 0:\n            if height_2 < height_1:\n                if height_2 - height_1 > a:\n                    height_2 += a\n                    height_1 += b\n                else:\n                    count += 1\n            else:\n                if height_1 - height_2 > a:\n                    height_1 += b\n                else:\n                    count += 1\n                break\n    return str(count)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, a, b = map(int, stdin.split())\n\n    if h_1 > h_2:\n        h_1, h_2 = h_2, h_1\n        a, b = b, a\n\n    if h_1 > h_2:\n        return -1\n    elif h_1 == h_2:\n        return 0\n\n    return 1 + int(math.ceil((h_1 - h_2) / (2 * a + b)))"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = list(map(int, stdin.split()))\n    day = 1\n    while True:\n        if h1 <= day * a <= h2:\n            if h2 < (day + 1) * a:\n                h1 += a - b\n            else:\n                h2 -= a - b\n        else:\n            break\n        day += 1\n    return str(day) if h1 <= h2 <= h1 + a else str(-1)\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, r, b, rr, rb = stdin.split()\n    rr = int(rr)\n    rb = int(rb)\n    r = int(r)\n    b = int(b)\n    c = int(c)\n    r_max = r\n    b_max = b\n    rr_max = rr\n    rb_max = rb\n    while r_max > 0 or b_max > 0:\n        if r_max > 0:\n            if r_max > rr_max:\n                rr_max = r_max\n                r_max = r_max - r\n            else:\n                r_max = r_max - rr_max\n                rr_max = rr_max\n        if b_max > 0:\n            if b_max > rb_max:\n                rb_max = b_max\n                b_max = b_max - b\n            else:\n                b_max = b_max - rb_max\n                rb_max = rb_max\n    return rr_max + rb_max\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    c, h_r, h_b, w_r, w_b = line\n    c, h_r, h_b, w_r, w_b = int(c), int(h_r), int(h_b), int(w_r), int(w_b)\n    return str(2 * (c + h_r + h_b + w_r + w_b))"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    C, Hr, Hb, Wr, Wb = stdin.split()\n    return int(max(Hr, Hb, Wr, Wb))\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    if W_r * C > W_b * C and H_r * C > H_b * C:\n        return str(int(C * (H_r + H_b + W_r + W_b) / 4))\n    return str(int((C + 1) * C / 2))\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W_r, H_r, W_b, H_b = map(int, stdin.split())\n    return W_r*H_r + W_b*H_b\nprint(solution(input()))\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, r_h, r_w, b_h, b_w = map(int, stdin.split())\n    return str(max([r_h*c, b_w*c, b_h*c]))"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(min(stdin.split())))\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    x_diff = y_diff = 0\n\n    while True:\n        if (x + x_diff) % 2 == (y + y_diff) % 2:\n            if abs(x_diff) == abs(y_diff):\n                return str(abs(x_diff))\n            elif abs(x_diff) > abs(y_diff):\n                return str(abs(x_diff))\n            else:\n                return str(abs(y_diff))\n        else:\n            x_diff += 1\n            y_diff += 1\n\n\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\""
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x_1, y_1 = int(stdin[0]), int(stdin[1])\n    x_2, y_2 = int(stdin[2]), int(stdin[3])\n    moves = 0\n    if x_1 == x_2:\n        moves += abs(y_1 - y_2)\n    if y_1 == y_2:\n        moves += abs(x_1 - x_2)\n    while x_1!= x_2 or y_1!= y_2:\n        if x_1 > x_2:\n            x_1 -= 1\n        if x_1 < x_2:\n            x_1 += 1\n        if y_1 > y_2:\n            y_1 -= 1\n        if y_1 < y_2:\n            y_1 += 1\n        moves += 1\n    return moves\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  x1, y1 = map(int, stdin.split())\n  x2, y2 = map(int, stdin.split())\n  return str(abs(x1-x2) + abs(y1-y2))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = x, y, x_2, y_2\n    while x_1!= x_2 or y_1!= y_2:\n        x_1, y_1 = x_1 + (x_2 - x_1), y_1 + (y_2 - y_1)\n        x_2, y_2 = x_2 + (x_1 - x_2), y_2 + (y_1 - y_2)\n    return abs(x_2 - x_1) + abs(y_2 - y_1)"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    c = abs(a-b)\n    return str(c)\n\nsolution(input())\n\n\u0422\u0435\u0441\u0442\u044b\nprint(solution(\"1 1\"))\nprint(solution(\"1 2\"))\nprint(solution(\"1 3\"))\nprint(solution(\"2 2\"))\nprint(solution(\"2 5\"))\nprint(solution(\"3 5\"))\nprint(solution(\"5 5\"))\nprint(solution(\"3 4\"))\nprint(solution(\"6 1\"))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x = x_2 - x_1\n    y = y_2 - y_1\n    if x == 0 and y == 0:\n        return str(0)\n    elif x == 0:\n        return str(abs(y))\n    elif y == 0:\n        return str(abs(x))\n    elif x > 0:\n        return str(abs(x) + 1)\n    elif y > 0:\n        return str(abs(y) + 1)\n    elif x < 0:\n        return str(abs(x) - 1)\n    else:\n        return str(abs(y) - 1)"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return str(abs(x_1 - x_2) + abs(y_1 - y_2))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_1, y_1, x_2, y_2 = x_1, y_1, x_2, y_2\n    # x_1 = 4\n    # y_1 = 5\n    # x_2 = 6\n    # y_2 = 1\n    # x_1, x_2 = 4, 6\n    # y_1, y_2 = 5, 1\n    # x_1, y_1, x_2, y_2 = 10, 5, 5, 10\n    d = x_2 - x_1\n    # print(x_1, x_2, d)\n    if d == 0:\n        return 0\n    if d == 1:\n        return abs(y_2 - y_1)\n    if d == 2:\n        return abs(x_2 - x_1) + abs(y_2 - y_1)\n    # if d == 2:\n    #     return abs(x_2 - x_1) * 2 + abs(y_2 - y_1)\n    if d == 3:\n        return abs(x_2 - x_1) + abs(y_2 - y_1) * 2\n    if d == 4:\n        return abs(x_2 - x_1) * 2 + abs(y_2 - y_1) * 2\n    # if d == 4:\n    #     return abs(x_2 - x_1) * 3 + abs(y_2 - y_1)\n    # if d == 5:\n    #     return abs(x_2 - x_1) * 2 + abs(y_2 - y_1) * 3\n    # if d == 6:\n    #     return abs(x_2 - x_1) * 3 + abs(y_2 - y_1) * 3"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"D\" if stdin.count('D') < stdin.count('R') else \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    votes = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == 'D':\n            votes.append('D')\n        elif stdin[i] == 'R':\n            votes.append('R')\n        i += 1\n    while len(votes) > 0:\n        if votes[0] == 'D':\n            result += 1\n        elif votes[0] == 'R':\n            result -= 1\n        votes.pop(0)\n    if result == -1:\n        return 'R'\n    if result == 1:\n        return 'D'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    votes = stdin.strip().split(\"\\n\")\n    counter = 0\n    for vote in votes:\n        counter += 1\n        if vote == \"D\":\n            counter += 1\n        if vote == \"R\":\n            counter -= 1\n        if counter >= n//2:\n            return \"R\"\n    return \"D\"\n    \n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = stdin\n    count_D = 0\n    count_R = 0\n    winner = None\n    for vote in votes:\n        if vote == 'D':\n            count_D += 1\n        else:\n            count_R += 1\n        if count_D < count_R:\n            winner = \"R\"\n        elif count_D > count_R:\n            winner = \"D\"\n    return winner\nprint(solution(input()))\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = stdin.split()\n    left_votes = []\n    right_votes = []\n    for i in range(1, n + 1):\n        if votes[i - 1] == \"D\":\n            left_votes.append(i)\n        else:\n            right_votes.append(i)\n    if left_votes and right_votes:\n        return \"D\"\n    if left_votes:\n        return \"R\"\n    return \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = ''\n    while n > 0:\n        depublicans, remocrats = stdin.count('D'), stdin.count('R')\n        if depublicans > remocrats:\n            result = 'D'\n        else:\n            result = 'R'\n        n -= 1\n    return result\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = stdin\n    for i in range(1,n+1):\n        if x[i-1] == \"D\":\n            for j in range(i+1,n+1):\n                if x[j-1] == \"D\":\n                    x[i-1] = \"R\"\n                    break\n        if x[i-1] == \"R\":\n            for j in range(i+1,n+1):\n                if x[j-1] == \"R\":\n                    x[i-1] = \"D\"\n                    break\n    for i in range(n):\n        if x[i] == \"D\":\n            return \"D\"\n        if x[i] == \"R\":\n            return \"R\"\n    return \"R\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  for n in range(1, 100001):\n    votes = ['D' if x == 'D' else 'R' for x in stdin[:n]]\n    for i in range(1, n):\n      if votes[i] == 'D':\n        if votes[i+1] == 'R':\n          votes[i] = 'R'\n        elif votes[i-1] == 'R':\n          votes[i] = 'R'\n      elif votes[i] == 'R':\n        if votes[i+1] == 'D':\n          votes[i] = 'D'\n        elif votes[i-1] == 'D':\n          votes[i] = 'D'\n    if votes.count('D') > votes.count('R'):\n      return 'D'\n    elif votes.count('D') < votes.count('R'):\n      return 'R'\n  return 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split()\n    votes = sorted(votes, key=lambda x: x[0])\n    for i in range(1, len(votes)):\n        if votes[i - 1][0]!= votes[i][0]:\n            return votes[i][1]\n    return votes[-1][1]"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stack = list(stdin)\n    votes = {}\n    count = 0\n    while count < n:\n        index = count % n\n        if stack[index] == 'R':\n            if stack[index - 1] == 'D':\n                votes['D'] = votes.get('D', 0) + 1\n            elif stack[index - 1] == 'R':\n                votes['R'] = votes.get('R', 0) + 1\n        elif stack[index] == 'D':\n            if stack[index + 1] == 'R':\n                votes['D'] = votes.get('D', 0) + 1\n            elif stack[index + 1] == 'D':\n                votes['D'] = votes.get('D', 0) + 1\n        count += 1\n        del stack[index]\n    if votes.get('R', 0) > votes.get('D', 0):\n        return \"R\"\n    return \"D\"\n\n\n\nsolution(\"DRRRDDRRDRRR\")\nsolution(\"DDRRRDDRRRRR\")\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    a, b, x, y = stdin.pop(0).split()\n\n    a = int(a)\n    b = int(b)\n    x = int(x)\n    y = int(y)\n\n    ans = 0\n    for w in range(a, b+1):\n        for h in range(a, b+1):\n            if (x / y) * w < w and w <= x and h <= y:\n                ans += 1\n\n    print(ans)\n    return ans\nsolution(\"16 6 7 3\")\n\nsolution(\"14 16 7 22\")\n\nsolution(\"4 2 6 4\")"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    width, height, x, y = map(int, stdin.split())\n    # some constraints are not fulfilled\n    if width > x or height > y:\n        return \"0\"\n    x_variants = 0\n    y_variants = 0\n    # we search for all possible x-variants\n    for x_n in range(1, x):\n        x_variants += (width/x) == (x_n/x)\n    # we search for all possible y-variants\n    for y_n in range(1, y):\n        y_variants += (height/y) == (y_n/y)\n    return str(x_variants + y_variants)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    ans = 0\n    for w in range(a+1):\n        for h in range(b+1):\n            if (x*h+w)//y == (w//x)+((w+h)//y):\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    w = math.ceil(x / y)\n    h = math.ceil(a / w)\n    count = 0\n    for w in range(w, 0, -1):\n        for h in range(h, 0, -1):\n            if math.ceil(w / h) == w / h and w <= a and h <= b:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    x_var, y_var = 0, 0\n    x_divisor = 1\n    y_divisor = 1\n    for x_var in range(1, a + 1):\n        for y_var in range(1, b + 1):\n            x_divisor = x // x_var\n            y_divisor = y // y_var\n            if x_divisor == y_divisor and x_divisor > x and y_divisor > y:\n                return str(x_var) +'' + str(y_var)\n    return str(x_var) +'' + str(y_var)\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    possible_x = set()\n    possible_y = set()\n    for possible_x_val in range(x, a + 1):\n        for possible_y_val in range(y, b + 1):\n            if (possible_x_val / possible_y_val) == (x / y):\n                possible_x.add(possible_x_val)\n                possible_y.add(possible_y_val)\n    return str(len(possible_x) * len(possible_y))\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    count = 0\n    for i in range(1, min(x, y) + 1):\n        for j in range(1, min(a, b) + 1):\n            if (a * i)/j < (b * j)/i:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    def at_least(w: int, h: int, x: float, y: float):\n        if w <= a or h <= b:\n            return True\n        elif w / h > x or h / w > y:\n            return False\n        else:\n            return True\n    return sum([at_least(w, h, x, y) for w in range(a, b+1) for h in range(a, b+1)])\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    if a < x or b < y:\n        return 0\n    if a == x and b == y:\n        return 1\n    res = 0\n    for i in range(x, a + 1):\n        for j in range(y, b + 1):\n            if i / j == x / y:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(find(a, b, x, y))\n\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(bin(n).count(\"0\"))"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # \u0432\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    b = int(stdin[1])\n    nums = 1\n    while n > 0:\n        n, r = divmod(n, b)\n        nums += r\n    return str(nums)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    if b == 10:\n        return str(n)\n    def fact(n):\n        return int(str(n)[::-1].replace(\"0\", \"\").replace(\"1\", \"\")[::-1])\n    return str(fact(n) // fact(b - 1) // fact(b - 2) // fact(b - 3))\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b = stdin\n    return str(len(str(n)) - len(str(n).rstrip(\"0\")))\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    res = 0\n    while n:\n        res += n % b\n        n //= b\n    return str(res)"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    print(len(str(bin(n)[2:])) - len(str(bin(n)[2:])) % b)"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(sum(1 for _ in gen(n, b)) - 1)\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b = stdin.split()\n    n, b = int(n), int(b)\n    return str(int(n).count(str(0)))\n\"\"\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(n - n ** (1 / b))"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b = list(map(int, stdin.split()))\n    return str(len(str(n)) - len(str(n).lstrip('0')))\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = (int(i) for i in stdin.split())\n    f = 0\n    for i in range(m):\n        f += i + 1\n    return f\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(x + 1 for x in range(a, b + 1) if x))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m = map(int, stdin.split())\n    # import pdb; pdb.set_trace()\n    return str(sum(i+1 for i in range(m+1) if a <= i <= b))\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def _f(x):\n        return x + 1 if x < 0 else x - 1\n    m, a, b = (int(x) for x in stdin.split())\n    return sum(list(map(_f, range(m + 1))))"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    if m < a:\n        return \"0\"\n    if m > b:\n        return \"0\"\n    return str(m-a)"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = list(map(int, stdin.split()))\n    return sum(i+1 for i in range(m+1) if 0 <= i+a <= m or 0 <= i-b <= m)"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(1 for i in range(int(stdin.strip().split()[0]) + 1) if i >= int(stdin.strip().split()[1]) and i <= int(stdin.strip().split()[2])))\n\nsolution()\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = list(map(int, stdin.split()))\n    return sum(i + 1 for i in range(m) if i + 1 <= a or i - b <= 0)\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [m, a, b]\n    '''\n    m, a, b = map(int, stdin.split())\n    n = 10 ** 9\n    return str(sum((n - 1 - a) // n) + sum((n - 1 - b) // n))\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Counts the number of subsegments, which are subsegments that meet the requirements.\n    \"\"\"\n    n = len(stdin.split(' '))\n    seq = list(map(int, stdin.split(' ')))\n    odd_count = 0\n    for i in range(n):\n        if seq[i] % 2 == 1 and i > 0 and seq[i - 1] % 2 == 1 and i < n - 1 and seq[i + 1] % 2 == 1:\n            odd_count += 1\n    if odd_count >= 1 and n % 2 == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    odd = True\n    for i in range(1, n, 2):\n        if sequence[i] % 2 == 1:\n            odd = False\n    if odd:\n        if sequence[0] % 2 == 1:\n            return \"No\"\n        for i in range(1, n, 2):\n            if sequence[i] % 2 == 0:\n                if i == n - 1:\n                    return \"Yes\"\n        return \"No\"\n    else:\n        if sequence[0] % 2 == 0:\n            return \"No\"\n        for i in range(1, n, 2):\n            if sequence[i] % 2 == 1:\n                if i == n - 1:\n                    return \"Yes\"\n        return \"No\"\nsolution(input())\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    odd = 0\n    for i in l:\n        if i % 2!= 0:\n            odd += 1\n    if odd == 0 or odd > n:\n        return \"No\"\n    s = 0\n    while s < n and s % 2!= 0:\n        s += 1\n    return \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(s) for s in stdin.split()]\n\n    start = 1\n    stop = n - 1\n    while start <= stop:\n        s = seq[start - 1]\n        e = seq[stop]\n\n        if s % 2!= 0 or e % 2!= 0 or s % 2!= e % 2:\n            return \"No\"\n        else:\n            start += 2\n            stop -= 2\n\n    return \"Yes\""
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, _, n = stdin.split(' ')\n    n = int(n)\n    a = list(map(int, stdin.split(' ')))\n\n    def divide(array, start, end):\n        if (end - start + 1) % 2 == 0:\n            return True\n        else:\n            return False\n\n    for i in range(0, n, 2):\n        if not divide(a, i, i + 1):\n            return 'No'\n    else:\n        return 'Yes'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    seq = list(map(int, stdin.split()))\n    odd = True\n    odd_len = 0\n    for i in range(1, len(seq)):\n        if seq[i-1]!= seq[i]:\n            if odd:\n                odd_len += 1\n                if odd_len == odd:\n                    odd = False\n            else:\n                odd = True\n                odd_len = 1\n    return 'Yes' if odd else 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    odd_number_of_odds = 0\n    odds_start = 0\n\n    if length % 2 == 1:\n        return \"No\"\n\n    for i in range(length):\n        if a[i] % 2 == 1:\n            odds_start = i\n            break\n\n    if odds_start % 2 == 1:\n        odd_number_of_odds = length // 2 + 1\n    else:\n        odd_number_of_odds = length // 2\n\n    odds_end = odds_start + odd_number_of_odds\n\n    odds_part = a[odds_start:odds_end]\n\n    for i in range(len(odds_part)):\n        if odds_part[i] % 2 == 1:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    sequence.sort()\n    if n % 2 == 0:\n        return \"Yes\"\n    subsegments = n // 2\n    if sequence[0] == sequence[n - 1]:\n        return \"Yes\"\n    for i in range(1, subsegments):\n        if sequence[i]!= sequence[i - 1]:\n            return \"No\"\n    return \"No\"\nprint(solution(input()))\n\n\n\n\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(list(map(int, stdin.strip().split())))\n    if n % 2!= 0 or n <= 2 or a[-1]!= a[0] or len(a)!= n:\n        return 'No'\n    if len(a) == n:\n        return 'Yes'\n    else:\n        for i in range(0, n-1, 2):\n            if a[i+1]!= a[i] + 2:\n                return 'No'\n        return 'Yes'\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = stdin.split(' ')\n    x_1 = int(x_1)\n    y_1 = int(y_1)\n    x_2 = int(x_2)\n    y_2 = int(y_2)\n    x_3 = x_1 + y_2 - y_1\n    x_4 = x_2 + y_1 - y_2\n    x_3 = str(x_3)\n    x_4 = str(x_4)\n    return x_3 +'' + x_4\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    if (x_1, y_1) == (x_2, y_2):\n        return str(min(y_1, y_2) + 1000) + \" \" + str(max(y_1, y_2) + 1000) + \" \" + str(min(x_1, x_2) + 1000) + \" \" + str(max(x_1, x_2) + 1000)\n    if (y_1, x_1) == (y_2, x_2):\n        return str(min(x_1, x_2) + 1000) + \" \" + str(max(x_1, x_2) + 1000) + \" \" + str(min(y_1, y_2) + 1000) + \" \" + str(max(y_1, y_2) + 1000)\n    return str(-1)\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x1, y1, x2, y2 = map(int, stdin)\n    if x1==x2 and y1==y2:\n        return(-1)\n    return(f\"{x1} {y1} {x2} {y2}\")"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x1, y1, x2, y2 = stdin\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    if x1 == 0 and y1 == 0:\n        if x2 == 0 and y2 == 0:\n            print(1)\n        else:\n            print(0)\n    elif x1 == 0 and y1 == 0:\n        if x2 == 0 and y2 == 0:\n            print(-1)\n        else:\n            print(0)\n    else:\n        if (x2 - x1) == 0:\n            if (y2 - y1) == 0:\n                print(1)\n            else:\n                print(0)\n        else:\n            if (x2 - x1) == (y2 - y1):\n                print(1)\n            else:\n                print(0)\nsolution(input())\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(i) for i in stdin.split()]\n    trees = [(x_1, y_1), (x_2, y_2)]\n    for x_3, y_3 in trees:\n        if x_3 == x_1 or x_3 == x_2 or y_3 == y_1 or y_3 == y_2:\n            print('-1')\n            return '-1'\n        x_3 += abs(x_1 - x_2)\n        y_3 += abs(y_1 - y_2)\n        if x_3 > 1000 or x_3 < -1000:\n            x_3 = -1000\n        if y_3 > 1000 or y_3 < -1000:\n            y_3 = -1000\n        print(x_3, y_3)\n    return''.join([str(i) for i in [x_3, y_3, x_4, y_4]])\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        x_1, y_1, x_2, y_2 = map(int, line.split())\n        if x_1 == 0 and y_1 == 0 and x_2 == 1 and y_2 == 1:\n            print(-1)\n        elif x_1 == 0 and y_1 == 1 and x_2 == 1 and y_2 == 0:\n            print(1, 1)\n        elif x_1 == 0 and y_1 == 0 and x_2 == 1 and y_2 == 0:\n            print(-1)\n        else:\n            print(*(max(x_1, x_2), max(y_1, y_2)))\n\n    return\n\n\nsolution(\"\"\"\n0 0 0 1\n\"\"\")\n\nsolution(\"\"\"\n0 0 1 1\n\"\"\")\n\nsolution(\"\"\"\n0 0 1 2\n\"\"\")\n\nsolution(\"\"\"\n-1000 -1000 -1000 -1000\n\"\"\")\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = (int(i) for i in stdin.split())\n    return''.join(str(x) for x in find_solution((x1, y1), (x2, y2)))\n\n\ndef"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = (x_1 + x_2) // 2\n    y_3 = (y_1 + y_2) // 2\n    x_4 = (x_3 + x_2) // 2\n    y_4 = (y_3 + y_2) // 2\n    if (x_3, y_3) == (x_4, y_4):\n        return str(x_3) + \" \" + str(y_3) + \" \" + str(x_4) + \" \" + str(y_4)\n    if (x_3, y_3) == (x_2, y_2):\n        return str(x_3) + \" \" + str(y_3) + \" \" + str(x_2) + \" \" + str(y_2)\n    if (x_4, y_4) == (x_2, y_2):\n        return str(x_4) + \" \" + str(y_4) + \" \" + str(x_2) + \" \" + str(y_2)\n    return \"-1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x1, y1, x2, y2 = sorted([int(x) for x in stdin.split()])\n    x_3, y_3 = x1 + (x2 - x1) / 2, y1 + (y2 - y1) / 2\n    x_4, y_4 = x1 - (x2 - x1) / 2, y1 - (y2 - y1) / 2\n    if x_3 == x_4 and y_3 == y_4:\n        return \"1 0 1 1\" if x_3 == x_2 and y_3 == y_2 else \"-1\"\n    else:\n        return str(x_3) + \" \" + str(y_3) + \" \" + str(x_4) + \" \" + str(y_4)"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    if x_1 == x_2:\n        return '{} {} {} {}'.format(x_1, -x_1, -y_1, y_1)\n    elif y_1 == y_2:\n        return '{} {} {} {}'.format(y_1, y_1, -x_1, -x_1)\n    else:\n        x_3 = (x_2 - x_1) / 2 + x_1\n        y_3 = (y_2 - y_1) / 2 + y_1\n        x_4 = (x_2 - x_1) / 2 + x_1\n        y_4 = (y_2 - y_1) / 2 + y_1\n        return '{} {} {} {}'.format(x_3, y_3, x_4, y_4)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y + 1)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    if n == 1:\n        return str(x + y)\n    if n == 2:\n        return str(x + y + x)\n    for i in range(n):\n        if i == 0:\n            f = x\n        if i == 1:\n            f = x + y\n        if i == 2:\n            f = y\n        x = f\n        if i == 3:\n            f = x + y\n        if i == 4:\n            f = x\n    return str(x % 1000000007)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = 1, 2\n    for i in range(2, n):\n        x = (x + y) % 1000000007\n        y = x + y\n    return x\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while (a % 2) == (b % 2):\n        a, b = a >> 1, b >> 1\n    return str(a)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    f_1 = x\n    f_2 = y\n    for i in range(2, n):\n        f_1 = f_1 + f_2\n        f_2 = f_1 + f_2\n    return str(f_1 % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(\"\\n\")[0])\n    y = int(stdin.split(\"\\n\")[1])\n    n = int(stdin.split(\"\\n\")[2])\n\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(i)\n\n    def get_f(x, y):\n        if x < y:\n            tmp = x\n            x = y\n            y = tmp\n        return ((x + y) % 10 ** 9 + 7)\n    for i in range(1, n + 1):\n        arr[i - 1] = get_f(arr[i - 1], arr[i])\n\n    ans = arr[n - 1]\n    return str(ans)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = 1, 1\n    for i in range(2, n + 1):\n        c = a + b\n        d = c % 1000000007\n        b = a\n        a = d\n    return str(d)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  x, y, n = map(int, stdin.split())\n  return str(sum([x, y, x+y, y-x]) % 1000000007)\n\nprint(solution(input()))\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    if n == 2:\n        return (x * y + (x + y)) % 1000000007\n    \n    f = x + y\n    for i in range(2, n + 1):\n        f = f + (f - (x * y))\n        f = f % 1000000007\n        print(f)\n    \n    return f\n    \n    \n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    if x < y:\n        x, y = y, x\n    return str(x * y) + str(n * (x - y + 1))"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    curr = 1\n    res = 0\n    for i in range(n):\n        if arr[i] > 0:\n            curr += 1\n            continue\n        if curr > 1:\n            curr -= 1\n        else:\n            res = curr\n            break\n    curr = 1\n    if res == 0:\n        return 'NO'\n    else:\n        arr.pop(0)\n        curr = 1\n        while True:\n            for i in range(res):\n                arr.insert(0, arr.pop())\n            curr += 1\n            if arr[:res] == arr[res:] == [0] * res:\n                break\n        print(*arr[:res])\n        return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    if len(arr)!= n:\n        return 'NO'\n\n    sum_1 = 0\n    sum_2 = 0\n\n    for i in range(n):\n        sum_1 += arr[i]\n        sum_2 += arr[n - i - 1]\n\n    if sum_1!= 0 or sum_2!= 0:\n        return 'NO'\n\n    ans = 0\n    k = 1\n    l = 1\n    while k < n:\n        sum_1 = sum_1 - arr[l - 1] + arr[l]\n        sum_2 = sum_2 - arr[n - l - 1] + arr[n - l]\n\n        if sum_1!= 0 or sum_2!= 0:\n            return 'NO'\n\n        ans += 1\n        l += 1\n        k = max(l + k - 1, n)\n\n    print(k)\n    for i in range(ans):\n        print(l, r)\n    return 'YES'\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    print(str(solution_dp(A)))\n    return \"YES\" if solution_dp(A) else \"NO\"\n\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N + 1):\n        for j in range(i, 0, -1):\n            if A[j - 1] > 0:\n                dp[i] += dp[j - 1]\n        dp[i] += dp[i - 1]\n    if dp[-1] == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    return\n\nsolution(input())\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = stdin[1:]\n    answer = \"NO\"\n    for i in range(n):\n        for j in range(n):\n            sub_arr = list(arr[:i+1])\n            if sum(sub_arr)!= 0:\n                continue\n            for k in range(i+1, n):\n                sub_arr += arr[k+1:]\n                if sum(sub_arr)!= 0:\n                    continue\n                answer = \"YES\"\n                print(len(sub_arr))\n                for l, r in enumerate(sub_arr):\n                    print(l, r, l + 1, r + 1)\n                return answer\n    return answer\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build and return a new array from the input.\n\n    The returned array should satisfy the following conditions:\n    (a) array size should be equal to stdin length.\n    (b) all elements should be non-negative integers.\n    (c) sum of elements in all new arrays should not be zero.\n\n    Each new array should be a subarray of the original array stdin.\n\n    >>> solution('2 3 4 5 -1 -2 -3')\n    'YES'\n    >>> solution('3 -2 -1 1 3 -1 -2')\n    'YES'\n    >>> solution('10 10')\n    'NO'\n    >>> solution('1')\n    'NO'\n    >>> solution('0')\n    'NO'\n    \"\"\"\n\n    size = int(stdin.strip())\n    if size == 0:\n        return 'NO'\n    elements = list(map(int, stdin.split()))\n\n    # We will keep a count of subarray\n    count = 0\n    # Keep a sum of all elements\n    sum = 0\n    # We will keep a start index\n    start = 0\n    # We will keep a list of subarray counts\n    subarray_counts = []\n\n    for index, element in enumerate(elements):\n        sum += element\n        if index == size - 1:\n            count += 1\n            subarray_counts.append(count)\n        if element < 0:\n            count = 0\n            start = index + 1\n            sum = 0\n\n    # We will keep a list of all subarray\n    subarrays = []\n\n    for i in range(1, len(subarray_counts)):\n        subarrays.append([elements[start], start + subarray_counts[i - 1]])\n        start = start + subarray_counts[i - 1]\n\n    # Sort the subarrays\n    subarrays = sorted(subarrays)\n\n    for i in range(len(subarrays)):\n        if subarrays[i][0]!= 0 and subarrays[i][1]!= size:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"NO\"\n    arr = list(map(int, stdin.strip().split()))\n    min_sum = sum(arr) - sum(arr[:-1])\n    if min_sum % 2:\n        return \"NO\"\n    max_ = max(arr)\n    min_ = min(arr)\n    if min_ > 0:\n        return \"NO\"\n    if min_sum <= max_:\n        return \"YES\"\n    if min_sum <= max_ * (n - 1) // 2:\n        return \"YES\"\n    if min_sum > max_ * (n - 1) // 2:\n        return \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    sum_arr = sum(arr)\n    if sum_arr % n!= 0:\n        return \"NO\"\n    k = 0\n    for i in range(len(arr)):\n        k += 1\n        if sum(arr[:i+1]) == 0:\n            break\n    l = 1\n    r = n\n    while r > 1:\n        r = n-1\n        for i in range(l, n):\n            if arr[i] > 0:\n                break\n            if r <= i:\n                r = i\n        if r <= i:\n            break\n        l = i+1\n    if r == 1:\n        return \"YES\"\n    return \"YES\" + \" \".join(list(map(str, range(1, k))))\n\nprint(solution(input()))"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = \"NO\"\n    while (1 < len(arr) and abs(arr[0]) < 1):\n        for i in range(len(arr)):\n            if (abs(arr[i]) > arr[0]):\n                break\n            else:\n                if (i == len(arr) - 1):\n                    ans = \"YES\"\n                else:\n                    ans = \"YES\"\n                    for j in range(len(arr[i+1:])):\n                        if (abs(arr[i+j]) > arr[0]):\n                            break\n                        else:\n                            ans = \"YES\"\n                            arr[i+j] = -abs(arr[i+j])\n                            break\n    return ans"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(sub_arr, sub_arr_sum):\n        \"\"\"Checks whether the sum of a sub-array equals zero.\n        :param sub_arr: a sub-array\n        :param sub_arr_sum: sum of a sub-array\n        :return: True if the sum of the sub-array is zero, False otherwise\n        \"\"\"\n        return sub_arr_sum == 0\n\n    def split_arr(arr, sub_arr_sum):\n        \"\"\"Splits the arr into new arrays if the condition is satisfied.\n        :param arr: a original array\n        :param sub_arr_sum: the sum of a sub-array\n        :return: a list of arrays\n        \"\"\"\n        if not is_valid(arr, sub_arr_sum):\n            return None\n\n        if sub_arr_sum == 0:\n            return []\n\n        result = []\n        for idx in range(len(arr) - 1):\n            if arr[idx] + arr[idx + 1] > sub_arr_sum:\n                break\n            elif arr[idx] + arr[idx + 1] == sub_arr_sum:\n                result.append([idx + 1, idx + 2])\n                sub_arr_sum -= arr[idx] + arr[idx + 1]\n\n        return result\n\n    if len(stdin) == 1:\n        return \"NO\"\n\n    # reading the input\n    inp = stdin.strip().split()\n    n = int(inp[0])\n    arr = list(map(int, inp[1:]))\n    arr_sum = sum(arr)\n    result = split_arr(arr, arr_sum)\n\n    if result is None:\n        return \"NO\"\n\n    # writing an output\n    res = \"YES\\n\"\n    for idx in range(len(result)):\n        res += str(result[idx][0]) + \" \" + str(result[idx][1]) + \"\\n\"\n\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c * c)\n    x = 1\n    while (x * a) % b!= c:\n        x += 1\n    return str(x)\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(int(n * (m / (n - 1)) * k))\n\nprint(solution(input()))"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(((n - m) * (n - k) + (n - m) * m) // 1000000009)\n\nprint(solution(input()))"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cnt = 0\n    score = 0\n    while m >= score + k:\n        score += k\n        cnt += 1\n    while n - m >= k:\n        score += n - m\n        cnt += 1\n    if cnt >= k:\n        return str(score % 1000000009)\n    return 'IMPOSSIBLE'\n\n\n\n----\n\nA very good man solves the test by realizing that the result of the Quiz is always the maximum possible score for the test. I will now take this test and write the solution.\n\nEach consecutive question is passed to the function as a list. The function returns the maximum possible score of the test.\n\n\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n\nThe function takes a list and returns an integer.\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n * (n + 1) // 2)\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,m,k = [int(x) for x in stdin.split()]\n    score = 0\n    count = 0\n    while n>0:\n        if count>=k:\n            score = score*2-1\n            count = 0\n        if score>=m:\n            score = score*2-1\n        count+=1\n        n-=1\n    return str(score%1000000009)\nprint(solution(input()))\n\nx = input().split(' ')\nn = int(x[0])\nm = int(x[1])\nk = int(x[2])\np = 0\nfor i in range(1, n + 1):\n    if i % k == 0:\n        p += m\n    else:\n        p += i\nprint(p)\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(m * k - (k - n) * (n - m))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(k - m - ((n-m-k)//m) * (n-m) + k - (k//m) * k % (n-m))\n\nprint(solution(input()))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    count = k - m\n    return str(count)\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    print(int((1000000000 - (n - m)) % 1000000009))\n    return \"\""
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 8 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digit = 0\n    while n > 0:\n        digit = n % 8\n        n = int(n / 8)\n        if digit == 0:\n            break\n    if digit == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(int(str(n)[0]))\nsolution(input())"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    \n    while True:\n        num = num.replace('0','')\n        if len(num) == 1:\n            if int(num) % 8!= 0:\n                return 'NO'\n            else:\n                return 'YES'\n        else:\n            num = num.replace(num[0],'')\n            if len(num) == 1:\n                if int(num) % 8!= 0:\n                    return 'NO'\n                else:\n                    return 'YES'\n            else:\n                return 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        string_to_check = stdin[:i] + stdin[i + 1:]\n        if(is_integer(string_to_check)):\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    # ex:\n    # 2 -> 2\n    # 3 -> 5\n    # 4 -> 4\n    # 5 -> 5\n    # 6 -> 8\n    # 7 -> 9\n    # 8 -> 8\n    # 9 -> 8\n\n    # n = 123456789\n    # 2^7 = 128\n    # 128 - 1 = 127 = 2\n    # 127 - 8 = 125 = 8\n\n    # n = 12345\n    # 2^7 = 128\n    # 128 - 1 = 127 = 2\n    # 127 - 8 = 125 = 8\n\n    # n = 345678\n    # 2^7 = 256\n    # 256 - 1 = 255 = 7\n    # 255 - 8 = 253 = 8\n\n    # n = 3456789\n    # 2^7 = 256\n    # 256 - 1 = 255 = 7\n    # 255 - 8 = 253 = 8\n\n    # n = 123456789\n    # 2^7 = 128\n    # 128 - 1 = 127 = 2\n    # 127 - 8 = 125 = 8\n    # 125 - 8 = 123 = 8\n\n    # n = 12345\n    # 2^7 = 128\n    # 128 - 1 = 127 = 2\n    # 127 - 8 = 125 = 8\n    # 125 - 8 = 123 = 8\n\n    # n = 345678\n    # 2^7 = 256\n    # 256 - 1 = 255 = 7\n    # 255 - 8 = 253 = 8\n\n    # n = 3456789\n    # 2^7 = 256\n    # 256 - 1 = 255 = 7\n    # 255 - 8 = 253 = 8\n\n    n = stdin\n    n = int(n)\n\n    # Check if it can be divided by 8 without losing digits\n    if n % 8 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 7 without losing digits\n    if n % 7 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 5 without losing digits\n    if n % 5 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 3 without losing digits\n    if n % 3 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 4 without losing digits\n    if n % 4 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 3 without losing digits\n    if n % 3 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 3 without losing digits\n    if n % 3 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing digits\n    if n % 2 == 0:\n        return \"YES\"\n\n    # Check if it can be divided by 2 without losing"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def div_by_eight(number):\n        while number >= 8:\n            number /= 8\n        return number\n\n    number = int(stdin)\n    if number < 1:\n        return \"NO\"\n\n    # check if it is divisible by 8\n    if number % 8!= 0:\n        return \"NO\"\n\n    # if it is divisible by 8, check if it has 1\n    if number % 10 == 1:\n        return \"YES\"\n\n    # check if it has 2\n    if number % 10 == 2:\n        if number % 10 == 2 and div_by_eight(number) % 10 == 2:\n            return \"YES\"\n        return \"NO\"\n\n    # check if it has 3\n    if number % 10 == 3:\n        if number % 10 == 3 and div_by_eight(number) % 10 == 3:\n            return \"YES\"\n        return \"NO\"\n\n    # check if it has 4\n    if number % 10 == 4:\n        if number % 10 == 4 and div_by_eight(number) % 10 == 4:\n            return \"YES\"\n        return \"NO\"\n\n    # check if it has 5\n    if number % 10 == 5:\n        if number % 10 == 5 and div_by_eight(number) % 10 == 5:\n            return \"YES\"\n        return \"NO\"\n\n    # check if it has 6\n    if number % 10 == 6:\n        if number % 10 == 6 and div_by_eight(number) % 10 == 6:\n            return \"YES\"\n        return \"NO\"\n\n    # check if it has 7\n    if number % 10 == 7:\n        if number % 10 == 7 and div_by_eight(number) % 10 == 7:\n            return \"YES\"\n        return \"NO\"\n\n    # check if it has 8\n    if number % 10 == 8:\n        if number % 10 == 8 and div_by_eight(number) % 10 == 8:\n            return \"YES\"\n        return \"NO\"\n\n    # if it is divisible by 8, check if it has 9\n    if number % 10 == 9 and div_by_eight(number) % 10 == 9:\n        return \"YES\"\n\n    return \"NO\"\n\nsolution(\"435\")\nsolution(\"2345\")\nsolution(\"111111\")"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = int(s[0])\n    n = s\n    while s > 0:\n        s = s//8\n        n = n//8\n    if n > 0:\n        return 'YES'\n    else:\n        return 'NO'\n    \n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Remove all leading zeroes\n    2. Find the smallest number that contains all the digits from n\n    3. If n is divisible by 8, then return n\n    4. If n is not divisible by 8, return n\n    \"\"\"\n    n = int(stdin)\n    while len(str(n)) < 100:\n        n = str(n)\n    while len(str(n)) >= 100:\n        n = str(n)[:-1]\n    if len(str(n)) >= 100:\n        return \"NO\"\n    for i in range(len(str(n))):\n        if int(str(n)[i]) > 0:\n            return \"NO\"\n    for i in range(len(str(n))):\n        if int(str(n)[i]) == 0:\n            n = str(n)[:i] + str(n)[i+1:]\n    if len(str(n)) >= 100:\n        return \"NO\"\n    n = str(n)\n    while len(n) < 100:\n        n = \"0\" + n\n    return n\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == \"0\" and not \".\" in stdin:\n            return \"NO\"\n        if stdin[i] == \"0\" and \".\" in stdin:\n            stdin = stdin.replace(\"0\", \"\")\n            stdin = stdin.replace(\".\", \"\")\n    if len(stdin) == 1:\n        if stdin.isdigit():\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif stdin[0]!= \"0\":\n        for i in range(len(stdin)):\n            if i > 0 and int(stdin[0]) > int(stdin[i]) and int(stdin[0])!= 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.split()\n    n = int(n[0])\n    \n    while True:\n        if len(str(n)) % 8!= 0:\n            n = n - 1\n            n = str(n)\n        else:\n            if len(n) <=1:\n                return \"NO\"\n            else:\n                if n[0] == '0':\n                    n = n[1:]\n                    n = int(n)\n                    if n == 0:\n                        return \"NO\"\n                    else:\n                        n = str(n)\n                        n = n[0] + n[1:]\n                        return \"YES\"\n                else:\n                    n = str(n)\n                    n = n[0] + n[1:]\n                    return \"YES\"\n                \n            \nsolution(input())\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return str(n)\n    a = list(map(int, stdin.split()))\n    a = sorted(a, reverse=True)\n    # print(a)\n    b = {}\n    count = 0\n    floor = 1\n    for i in a:\n        if i - floor in b:\n            floor = i\n        else:\n            count += 1\n            b[floor] = count\n            floor += 1\n    if count!= m:\n        return -1\n    return str(floor - 1)\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mem = [list(map(int, stdin.split())) for _ in range(m)]\n    ans = -1\n\n    def solve(current_floor, current_mem):\n        if len(current_mem) == n:\n            nonlocal ans\n            ans = max(current_floor, ans)\n            return\n        for i in range(len(current_mem)):\n            current_floor_i = current_floor + current_mem[i]\n            current_mem_i = current_mem[:]\n            current_mem_i.pop(i)\n            solve(current_floor_i, current_mem_i)\n    solve(0, mem)\n    return str(ans)\n\n\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_one_to_one(self):\n        self.assertEqual(solution(\n            '5 3\\n6 2\\n3 1\\n7 3'), '4')\n\n    def test_one_to_four(self):\n        self.assertEqual(solution(\n            '5 3\\n6 2\\n5 2\\n2 1\\n7 3'), '-1')\n\n    def test_four_to_four(self):\n        self.assertEqual(solution(\n            '8 4\\n3 1\\n6 2\\n5 2\\n2 1\\n'), '-1')\n\n    def test_eight_to_eight(self):\n        self.assertEqual(solution(\n            '10 4\\n6 2\\n5 2\\n2 1\\n7 3\\n8 3'), '4')\n\n    def test_four_to_eight(self):\n        self.assertEqual(solution(\n            '6 2\\n3 1\\n8 3\\n7 3'), '-1')\n\n    def test_zero(self):\n        self.assertEqual(solution('0 0'), '0')\n\n    def test_one_to_zero(self):\n        self.assertEqual(solution(\n            '1 3\\n6 2\\n3 1\\n7 3'), '-1')\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = int(stdin[0]), int(stdin[1])\n    if m == 0:\n        return -1\n    mem = [int(k) for k in stdin[2].split()]\n    mem.sort()\n    mem.reverse()\n    mem.append(mem.pop(0))\n    count = 0\n    for i in range(n):\n        if mem[i] > m:\n            return -1\n        if (count := mem[i] - 1) == i:\n            break\n    return str(count + 1)"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    floor_numbers = stdin.strip().split()\n    n = int(floor_numbers[0])\n    m = int(floor_numbers[1])\n    if n > 100 or m > 100:\n        return \"ERROR\"\n    if n > m:\n        m += 1\n    flats = sorted(map(int, stdin.strip().split()))\n    # print(flats)\n    ans = -1\n    for i in range(1, m+1):\n        # print(i)\n        if sum(1 for j in range(1, n+1) if j not in flats) < m:\n            # print(i, m)\n            ans = i\n            break\n    # print(ans)\n    if ans == -1:\n        return \"ERROR\"\n    else:\n        return str(ans)\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flats = sorted(list(map(int, stdin.split())))\n    flats = [(flats[i], i) for i in range(len(flats))]\n\n    start = 1\n    stop = len(flats)\n    while start < stop:\n        middle = (start + stop) // 2\n        if flats[middle][0]!= middle + 1:\n            start = middle + 1\n        else:\n            stop = middle\n    if start == len(flats):\n        return '-1'\n    return str(flats[start][1])\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mem = list(map(int, stdin.split()))\n    flats = {}\n    for i in range(m):\n        k, f = mem[2*i: 2*i + 2]\n        if k not in flats:\n            flats[k] = f\n        else:\n            if flats[k]!= f:\n                return -1\n    return str(flats.get(n, -1))\nprint(solution(input()))"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return '-1'\n    memory = list(map(int, stdin.split()))\n    memory = sorted(memory)\n\n    floor = 1\n    for floor in range(1, n + 1):\n        for i in range(1, n + 1):\n            if memory[i - 1] == floor:\n                floor += 1\n        if floor == n:\n            return str(floor)\n\n    return '-1'\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floors = list(map(int, stdin.split()))\n\n    lo = 1\n    hi = max(floors)\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        total_floors = 0\n        for f in floors:\n            if f <= mid:\n                total_floors += f\n            else:\n                total_floors += mid\n        if total_floors >= m:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    if lo > max(floors):\n        return -1\n    return lo\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floor = {i for i in range(1, m + 1)}\n    m_f = {}\n    for i in range(m):\n        k, f = map(int, stdin.split())\n        if k in floor:\n            floor.remove(k)\n            m_f[k] = f\n    if len(floor) > 0:\n        return \"-1\"\n    else:\n        while len(m_f) > 0:\n            k, f = max(m_f, key=m_f.get)\n            floor.add(k)\n            del m_f[k]\n        return '{}'.format(floor)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    k = 1\n    f = 1\n    flats = []\n    for _ in range(n):\n        flats.append(int(input()))\n    while k <= m:\n        for i, v in enumerate(flats):\n            if v == k:\n                if i == 0:\n                    f = 1\n                    k = v + 1\n                else:\n                    f = f * i + 1\n        if f == m:\n            return str(k)\n        else:\n            k += 1\n            f = 1\n    return \"No floor\"\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    board = board.replace(\"X\", \"X0\")\n    board = board.replace(\"0\", \"X\")\n    board = board.replace(\" \", \"\")\n    n = len(board)\n    \n    for i in range(n):\n        board = board.replace(str(i), str(i*2))\n    \n    return str(n**2)\n    \nsolution(input())\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    n = int(board[0])\n    result = 0\n    pawns = []\n    pawns_pos = []\n    for i in range(n):\n        for j in range(n):\n            if board[1][i * n + j] == '0':\n                pawns.append((i, j))\n                pawns_pos.append((i, j))\n    \n    def move_forward(pos1: tuple, pos2: tuple):\n        while True:\n            if pos1 == pos2:\n                break\n            if pos1[0] == pos2[0]:\n                pos1 = (pos1[0] + 1, pos1[1])\n            else:\n                pos1 = (pos1[0], pos1[1] + 1)\n    \n    def left_forward(pos1: tuple, pos2: tuple):\n        while True:\n            if pos1 == pos2:\n                break\n            if pos1[0] == pos2[0]:\n                pos1 = (pos1[0] - 1, pos1[1])\n            else:\n                pos1 = (pos1[0], pos1[1] - 1)\n    \n    def right_forward(pos1: tuple, pos2: tuple):\n        while True:\n            if pos1 == pos2:\n                break\n            if pos1[0] == pos2[0]:\n                pos1 = (pos1[0] + 1, pos1[1])\n            else:\n                pos1 = (pos1[0], pos1[1] + 1)\n    \n    def up_forward(pos1: tuple, pos2: tuple):\n        while True:\n            if pos1 == pos2:\n                break\n            if pos1[1] == pos2[1]:\n                pos1 = (pos1[0], pos1[1] - 1)\n            else:\n                pos1 = (pos1[0] + 1, pos1[1])\n    \n    def down_forward(pos1: tuple, pos2: tuple):\n        while True:\n            if pos1 == pos2:\n                break\n            if pos1[1] == pos2[1]:\n                pos1 = (pos1[0], pos1[1] + 1)\n            else:\n                pos1 = (pos1[0] - 1, pos1[1])\n    \n    for i in range(n):\n        for j in range(n):\n            if pawns_pos[i * n + j] not in pawns:\n                move_forward(pawns_pos[i * n + j], (i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            if pawns_pos[i * n + j] not in pawns:\n                left_forward(pawns_pos[i * n + j], (i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            if pawns_pos[i * n + j] not in pawns:\n                right_forward(pawns_pos[i * n + j], (i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            if pawns_pos[i * n + j] not in pawns:\n                up_forward(pawns_pos[i * n + j], (i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            if pawns_pos[i * n + j] not in pawns:\n                down_forward(pawns_pos[i * n + j], (i, j))\n    \n    def count(pos1: tuple, pos2: tuple):\n        count = 0\n        while True:\n            if pawns_pos[pos1[0] * n + pos1[1]] == pawns_pos[pos2[0] * n + pos2[1]]:\n                count += 1\n                break\n            if pawns_pos[pos1[0] * n + pos1[1]] in pawns:\n                break\n            pos1 = (pos1[0], pos1[1] + 1)\n        \n        while True:\n            if pawns_pos[pos2[0] * n + pos2[1]] == pawns_pos[pos1[0] * n + pos1[1]]:\n                count += 1\n                break\n            if pawns_pos[pos2[0] * n + pos2[1]] in pawns:\n                break\n            pos2 = (pos2[0], pos2[1] + 1)\n        \n        while True:\n            if pawns_pos[pos1[0] * n + pos1[1]] == pawns_pos[pos2[0] * n + pos2[1]]:\n                count += 1\n                break\n            if pawns_pos[pos1[0] * n + pos1[1]] in pawns:\n                break\n            pos1 = (pos1[0], pos1[1] - 1)\n        \n        while True:\n            if pawns_pos[pos2[0] * n + pos2[1]] == pawns_pos[pos1[0] * n + pos1[1]]:\n                count += 1\n                break\n            if pawns_pos[pos2[0] * n + pos2[1]] in pawns:\n                break\n            pos2 = (pos2[0], pos2[1] - 1)\n        \n        return count\n    \n    if count(pawns_pos[0], pawns_pos[1]) > count(pawns_pos[1], pawns_pos[2]) and count(pawns_pos[1], pawns_pos[2]) > count(pawns_pos[2], pawns_pos[3]) and count(pawns_pos[2], pawns_pos[3]) > count(pawns_pos[3], pawns_pos[4]) and count(pawns_pos[3], pawns_pos[4]) > count(pawns_pos[4], pawns_pos[5]) and count(pawns_pos[4], pawns_pos[5]) > count(pawns_pos[5], pawns_pos[6]):\n        result = count(pawns_pos[0], pawns_pos[1])\n    \n    if count(pawns_pos[1], pawns_pos[2]) > count(pawns_pos[2], pawns_pos[3]) and count(pawns_pos[2], pawns_pos[3]) > count(pawns_pos[3], pawns_pos[4]) and count(pawns_pos[3], pawns_pos[4]) > count(pawns_pos[4], pawns_pos[5]) and count(pawns_pos[4],"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    \n    # input_data = input_data.replace('\\n', '')\n    \n    # input_data = input_data.replace(' ', '')\n    \n    # input_data = input_data.replace('X', '1')\n    \n    # input_data = input_data.replace('0', 'X')\n    \n    # input_data = input_data.replace('X', '1')\n    \n    # input_data = input_data.replace('0', 'X')\n    \n    input_data = input_data.replace('X', '1')\n    \n    input_data = input_data.replace('0', 'X')\n    \n    input_data = input_data.replace('X', '1')\n    \n    input_data = input_data.replace('0', 'X')\n    \n    # input_data = input_data.replace('X', '1')\n    \n    # input_data = input_data.replace('0', 'X')\n    \n    \n    \n    input_data = input_data.split(\"\\n\")\n    \n    # print(input_data)\n    \n    input_data = list(map(list, input_data))\n    \n    # print(input_data)\n    \n    # print(input_data[0])\n    \n    returned_data = []\n    \n    for i in range(len(input_data)):\n        \n        for j in range(len(input_data[i])):\n            \n            if input_data[i][j] == '0':\n                \n                input_data[i][j] = 'X'\n                \n                # returned_data.append(returned_data)\n                # return returned_data\n                \n    returned_data = [['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0']]\n    \n    # print(input_data)\n    \n    # for i in input_data:\n        \n    #     print(i)\n    \n    # return returned_data\n    \n    returned_data = []\n    \n    for i in range(len(input_data)):\n        \n        for j in range(len(input_data[i])):\n            \n            if input_data[i][j] == 'X':\n                \n                input_data[i][j] = '0'\n                \n                # return returned_data\n                \n    returned_data = [['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0']]\n    \n    returned_data = []\n    \n    for i in range(len(input_data)):\n        \n        for j in range(len(input_data[i])):\n            \n            if input_data[i][j] == '1':\n                \n                input_data[i][j] = '0'\n                \n                # return returned_data\n                \n    returned_data = [['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0']]\n    \n    returned_data = []\n    \n    for i in range(len(input_data)):\n        \n        for j in range(len(input_data[i])):\n            \n            if input_data[i][j] == '1':\n                \n                input_data[i][j] = '0'\n                \n                # return returned_data\n                \n    returned_data = [['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0']]\n    \n    returned_data = []\n    \n    for i in range(len(input_data)):\n        \n        for j in range(len(input_data[i])):\n            \n            if input_data[i][j] == '1':\n                \n                input_data[i][j] = '0'\n                \n                # return returned_data\n                \n    returned_data = [['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0'],['0','0','"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    return\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 00\n   ... 00\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 0X0X0X0\n   ... 0X0X0X0\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 00X00X0XXX0\n   ... 0XXX0X00X00\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 0X0X0\n   ... 0X0X0\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 00\n   ... 00\n   ... ''')\n    '1'\n    '''\n    # Your code here\n    moves = {(0,0):1,(0,1):1,(0,2):1,(0,3):1,(1,0):1,(1,1):1,(1,2):1,(1,3):1,(2,0):1,(2,1):1,(2,2):1,(2,3):1,(3,0):1,(3,1):1,(3,2):1,(3,3):1}\n    stdin = stdin.strip()\n    squares = stdin.split()\n    \n    for i in range(4):\n        for j in range(4):\n            if squares[i*4+j]!= '0':\n                if (i,j) in moves:\n                    moves[(i,j)] += 1\n    \n    return max(moves.values())"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    max_count = 0\n    for row in input_list:\n        for i in row:\n            if i!= \"X\":\n                max_count = max(max_count,1)\n            else:\n                max_count = max(max_count,0)\n    return str(max_count)\n    \n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    board = stdin\n    res = 0\n    for i in range(len(board)):\n        count = 0\n        for j in range(len(board)):\n            if board[i] == \"1\":\n                count += 1\n            if board[j] == \"1\":\n                count += 1\n            if board[(i+j)%len(board)] == \"1\":\n                count += 1\n            if board[(i+j+1)%len(board)] == \"1\":\n                count += 1\n            if count > res:\n                res = count\n    return str(res)"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_square(row, col):\n        return row >= 0 and row < n and col >= 0 and col < n\n    \n    def bishwock(row, col, dir):\n        row += dir[0]\n        col += dir[1]\n        while is_square(row, col):\n            if board[row][col] == \"X\":\n                return True\n            elif board[row][col] == \"0\":\n                return False\n            row += dir[0]\n            col += dir[1]\n    \n    def valid_moves(row, col):\n        dirs = []\n        if is_square(row-1, col):\n            dirs.append((-1,0))\n        if is_square(row+1, col):\n            dirs.append((1,0))\n        if is_square(row, col-1):\n            dirs.append((0,-1))\n        if is_square(row, col+1):\n            dirs.append((0,1))\n        return dirs\n    \n    n = int(stdin.split()[0])\n    board = stdin.split()\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"X\":\n                continue\n            for dir in valid_moves(i, j):\n                if bishwock(i, j, dir):\n                    result += 1\n    return str(result)\n\nprint(solution('0XXX0'))\nprint(solution('00X0X0X0XXX0'))\nprint(solution('0X0X0'))"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution.\"\"\"\n    board = stdin.split()\n    return max([put_bishwok_on_board(board, i, j) for i in range(0, len(board)) for j in range(0, len(board[0]))])\n\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rows = int((n + 1) / 2)\n    cols = n\n    table = []\n    for i in range(rows):\n        temp = stdin.split(\"0\")\n        table.append(temp)\n    count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if table[i][j] == 'X':\n                table[i][j] = '0'\n            elif table[i][j] == '0':\n                count += 1\n    for i in range(rows):\n        for j in range(cols):\n            if table[i][j] == '0':\n                table[i][j] = 'X'\n            elif table[i][j] == 'X':\n                table[i][j] = '0'\n    count = count * 2\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = set(range(len(stdin)))\n    for i in stdin:\n        if i.islower():\n            a.remove(i)\n    return len(a)\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    nice_count = 0\n    letter_position = []\n    for i in range(n):\n        if stdin[i].islower():\n            letter_position.append(i)\n    if len(letter_position) == 0:\n        print(0)\n    else:\n        if len(letter_position) == 1:\n            for i in range(letter_position[0] + 1, n):\n                if stdin[i].islower():\n                    print(0)\n                    return\n            print(1)\n            return\n        letter_position = sorted(letter_position)\n        while len(letter_position) > 0:\n            if letter_position[0] < letter_position[1] and letter_position[1] < letter_position[2]:\n                del letter_position[0:3]\n                nice_count += 1\n            elif letter_position[0] < letter_position[1] and letter_position[1] > letter_position[2]:\n                del letter_position[0:2]\n                nice_count += 1\n            elif letter_position[0] > letter_position[1] and letter_position[1] < letter_position[2]:\n                del letter_position[0]\n                nice_count += 1\n            elif letter_position[0] > letter_position[1] and letter_position[1] > letter_position[2]:\n                del letter_position[1]\n                nice_count += 1\n            else:\n                print(0)\n                return\n        print(nice_count)\n\nsolution(input())\n\n\"\"\")\n\nimport itertools\n\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i == 0:\n                continue\n            if ans < s[i].lower() - s[i-1].lower():\n                ans = s[i].lower() - s[i-1].lower()\n    return ans\n    \n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a = {i for i, c in enumerate(s) if c.islower()}\n    result = 0\n    for i in range(len(s)):\n        if i in a:\n            result = max(result, len(a) - 1)\n        a = a.union(set(range(i + 1, i + 1 + len(a))))\n    return str(result)"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn = int(stdin)\ns = stdin.split('\\n')[1]\nlist_of_letters = list(s)\nletter_counter = {}\nfor i in range(len(s)):\n    letter_counter[s[i]] = letter_counter.get(s[i], 0) + 1\n\nk = 0\nfor i in range(1, 26):\n    if i not in letter_counter:\n        continue\n    k = max(k, letter_counter[i])\n\nprint(k)\n\n\"\"\""
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    # your code here\n    # return a value\n    return string"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    A = set()\n    A.add(s.find('a'))\n    A.add(s.find('b'))\n    A.add(s.find('c'))\n    max = 0\n    while len(A) > max:\n        a = A.pop()\n        if s[a - 1] >= 'a' and s[a - 1] <= 'z':\n            A.add(a - 1)\n        if s[a + 1] >= 'a' and s[a + 1] <= 'z':\n            A.add(a + 1)\n        if s[a - 1] >= 'A' and s[a - 1] <= 'Z':\n            A.add(a - 1)\n        if s[a + 1] >= 'A' and s[a + 1] <= 'Z':\n            A.add(a + 1)\n        max = len(A)\n    return max\n\nsolution('a')\nsolution('aaaaBaabAbA')\nsolution('zACaAbbaazzC')\nsolution('ABC')\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = {}\n    for i in range(len(s)):\n        if s[i] in a:\n            a[s[i]] += 1\n        else:\n            a[s[i]] = 1\n    return max(a.values())\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ns = stdin\nn = len(s)\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    a.sort()\n    if n < 2:\n        return 'Impossible'\n    first_half = a[:n // 2]\n    second_half = a[n // 2:]\n    if first_half[-1] <= second_half[-1]:\n        first_half.reverse()\n    first_half.append(0)\n    second_half.append(0)\n    b = sum(first_half)\n    c = sum(second_half)\n    return str(b - c)\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    a.sort()\n    l = len(a)\n    b, c = 0, 0\n    for i in range(0, l):\n        b += a[i]\n        c += a[l - i - 1]\n    print(b - c)\n\nsolution(input())"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = []\n    c = []\n    for i in range(0,n):\n        if a[i] in b:\n            b[b.index(a[i])] += a[i]\n        else:\n            b.append(a[i])\n    for i in range(0,n):\n        if a[i] not in b:\n            c.append(a[i])\n    c.sort()\n    return str(max(b)-sum(c))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    a = list(map(int, stdin.pop(0).split()))\n\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] in b:\n            c.append(a[i])\n        else:\n            b.append(a[i])\n    c = [0] + c\n    #print(b)\n    #print(c)\n    b_max = max(b)\n    c_max = max(c)\n    print(b_max - c_max)\n\nsolution(input())\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = a[:n//2]\n    c = a[n//2:]\n    b_sum = sum(b)\n    c_sum = sum(c)\n    return str(b_sum - c_sum)\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    sequence.sort()\n    sequence.reverse()\n    return str(sequence[0]) + \" \" + str(sum(sequence[1:]))\n    "
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[1:]\n    max_b = 0\n    max_c = 0\n    for _ in range(len(a)):\n        curr = a[_]\n        sum_b, sum_c = 0, 0\n        for i in range(len(curr)):\n            if curr[i] == \"-\":\n                if sum_b < max_b:\n                    sum_b = 0\n                if sum_c < max_c:\n                    sum_c = 0\n                break\n            else:\n                sum_b += int(curr[i])\n                if sum_b > max_b:\n                    max_b = sum_b\n                sum_c += int(curr[i])\n                if sum_c > max_c:\n                    max_c = sum_c\n        max_b -= max_c\n        if max_b > max_c:\n            max_b = max_c\n    return str(max_b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = sorted(a[:n // 2])\n    c = sorted(a[n // 2:])\n    return str(sum(b) - sum(c))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip()\nN = int(stdin.split()[0])\narr = list(map(int, stdin.split()[1:]))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  input = stdin.split()\n  n = int(input[0])\n  a = list(map(int, input[1]))\n  b = []\n  c = []\n  for i in range(n):\n    if a[i] == 1:\n      b.append(a[i])\n    elif a[i] == 0:\n      c.append(a[i])\n  b_sum = sum(b)\n  c_sum = sum(c)\n  print(b_sum - c_sum)\n\nsolution(input)\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = list(map(int, stdin.split()))\n\n    if f < a or f > a:\n        return -1\n    else:\n        total_distance = a - f\n        bus_distance = a - b\n\n        total_fuel = bus_distance * k\n        bus_fuel = total_distance * k\n\n        if total_distance <= total_fuel:\n            return k\n        else:\n            if bus_fuel == 0:\n                return -1\n            else:\n                number_of_refills = 1\n                while bus_fuel > total_fuel:\n                    bus_fuel = bus_fuel - total_fuel\n                    number_of_refills += 1\n\n                return k + number_of_refills\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if k > b // a:\n        return -1\n    if a > b:\n        return k\n    if f == a:\n        return k\n    elif f == b:\n        return -1\n    else:\n        res = 1\n        while a!= f:\n            res += 1\n            f += a\n            a += b\n        return res"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = (int(x) for x in stdin.split())\n    #a, b, f, k = (6, 10, 2, 4)\n    if f <= 0 or f >= a or k == 0:\n        return -1\n    if f > b:\n        return b + (f - b) // k\n    return b"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if f < 0 or f >= a:\n        return -1\n    if k == 0:\n        return 'NO'\n    if k == 1:\n        return f\n    if b < a - f:\n        return 'NO'\n    if b == a - f:\n        return 'NO'\n    if a - f <= 0:\n        return 'NO'\n    if a - f == 0:\n        return 0\n    if a - f > 0:\n        return 1\nstdin = '6 9 2 4'\nprint(solution(stdin))"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = stdin.split()\n    a = int(a)\n    b = int(b)\n    f = int(f)\n    k = int(k)\n    ans = float('inf')\n    if b >= k:\n        return '0'\n    else:\n        while a!= f:\n            a = int(a + 1)\n            ans = min(ans, a - f)\n        if ans!= float('inf'):\n            return str(ans)\n        else:\n            return '-1'\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if k > b:\n        return '-1'\n    return str(min(k, a - f))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if a == f and k == 0:\n        return f\"{k}\"\n    if a == f and k > 0:\n        return \"-\"\n    elif a < f:\n        return \"-\"\n    elif a > f:\n        min_dist = f - a\n        #print(a, b, min_dist)\n        if min_dist % a == 0:\n            return f\"{min_dist//a}\"\n        else:\n            return f\"{min_dist//a + 1}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    res = []\n\n    def check(x):\n        if (x + a) % f == 0 and (x + b) % f == 0:\n            return True\n        return False\n\n    def possible_answers(x):\n        if (x + a) % f == 0:\n            return 2\n        if (x + b) % f == 0:\n            return 3\n        if (x + a + b) % f == 0:\n            return 4\n        if (x + a + b + c) % f == 0:\n            return 5\n        if (x + a + b + c + d) % f == 0:\n            return 6\n        if (x + a + b + c + d + e) % f == 0:\n            return 7\n        if (x + a + b + c + d + e + f) % f == 0:\n            return 8\n        if (x + a + b + c + d + e + f + g) % f == 0:\n            return 9\n        if (x + a + b + c + d + e + f + g + h) % f == 0:\n            return 10\n        if (x + a + b + c + d + e + f + g + h + i) % f == 0:\n            return 11\n        if (x + a + b + c + d + e + f + g + h + i + j) % f == 0:\n            return 12\n        if (x + a + b + c + d + e + f + g + h + i + j + k) % f == 0:\n            return 13\n\n    while k > 0:\n        res.append(possible_answers(x))\n        if (x + a) % f == 0:\n            x += a\n            k -= 1\n        elif (x + b) % f == 0:\n            x += b\n            k -= 1\n        elif check(x):\n            x += min(a, b)\n            k -= 1\n        else:\n            return \"No\"\n    if k == 0:\n        if res[-1] == 2:\n            return \"Yes\"\n        elif res[-1] == 3:\n            return \"Yes\"\n        elif res[-1] == 4:\n            return \"Yes\"\n        elif res[-1] == 5:\n            return \"Yes\"\n        elif res[-1] == 6:\n            return \"Yes\"\n        elif res[-1] == 7:\n            return \"Yes\"\n        elif res[-1] == 8:\n            return \"Yes\"\n        elif res[-1] == 9:\n            return \"Yes\"\n        elif res[-1] == 10:\n            return \"Yes\"\n        elif res[-1] == 11:\n            return \"Yes\"\n        elif res[-1] == 12:\n            return \"Yes\"\n        elif res[-1] == 13:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n\n    if a < f and f < b:\n        return \"0\"\n    elif b < f and f < a:\n        return \"1\"\n    elif a < f:\n        return \"2\"\n    else:\n        return \"3\"\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    strings = stdin.replace(' ', '')\n    for i in range(1, n - p + 1):\n        if n - i - q <= strings.count(strings[i - 1]):\n            return '-1'\n    return str(len(strings.split(p)))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    s = stdin.strip()\n\n    def to_str(parts):\n        return \"\".join(parts)\n\n    def is_ok(s, parts):\n        if len(parts)!= p and len(parts)!= q:\n            return False\n        for i in range(len(s) - p + 1):\n            if s[i:i + p]!= to_str(parts):\n                return False\n        return True\n\n    if n < 1 or n > 100:\n        return \"-1\"\n\n    def rec(i, parts):\n        if i == len(s):\n            if is_ok(s, parts):\n                return 1\n            return 0\n        if len(parts) == p and len(parts) == q:\n            return 0\n        if len(parts) >= p and len(parts) < q:\n            return 0\n        count = rec(i + 1, parts + [s[i]])\n        count += rec(i + 1, parts)\n        return count\n\n    return str(rec(0, []))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, p, q = int(stdin[0]), int(stdin[1]), int(stdin[2])\n\n    s = stdin[3]\n    if n < p or n < q:\n        print(-1)\n        return\n    if p == q:\n        print(1)\n        print(''.join(sorted(s)))\n        return\n    print(0)\n    return\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.replace(\"\\n\", \"\")\n    if len(s) < p or len(s) < q:\n        return -1\n\n    def solve(s, p, q):\n        if not s:\n            return 1\n\n        if p == 0 and q == 0:\n            return 0\n\n        if len(s) < p:\n            return 0\n\n        if len(s) < q:\n            return 0\n\n        return solve(s[p:], p, q) + solve(s[:q], p, q)\n\n    return str(solve(s, p, q))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin\n    if n <= p:\n        if n <= q:\n            return f\"{n}\"\n        else:\n            return \"-1\"\n    if n <= p or n <= q:\n        return \"-1\"\n    if n % p == 0:\n        k = n // p\n    else:\n        k = n // p + 1\n    if n % q == 0:\n        l = n // q\n    else:\n        l = n // q + 1\n    res = [[] for i in range(k)]\n    for i in range(k):\n        res[i] = s[i * p:(i + 1) * p]\n    for i in range(l):\n        res[i + k] = s[i * q:(i + 1) * q]\n    for i in range(k):\n        for j in range(p):\n            if i!= k - 1:\n                res[i].append(res[i + 1][j])\n    for i in range(l):\n        for j in range(q):\n            if i!= l - 1:\n                res[i + k].append(res[i + k + 1][j])\n    for i in range(k):\n        res[i] = ''.join(res[i])\n    return''.join(res)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    strings = stdin.split()\n\n    def can_split(strings):\n        if len(strings) == 1:\n            return -1\n        if len(strings) % p == q:\n            return 0\n\n    # Generate all possible splits\n    all_splits = []\n    for i in range(len(strings)):\n        p_splits = strings[:i]\n        q_splits = strings[i:]\n        p_splits.sort()\n        q_splits.sort()\n        if p_splits == q_splits and p == q:\n            all_splits.append(p_splits)\n        if can_split(p_splits):\n            all_splits.append(p_splits)\n\n    # Filter out non-splits\n    non_splits = []\n    for split in all_splits:\n        if len(split)!= p:\n            non_splits.append(split)\n\n    if len(non_splits) == 0:\n        return -1\n    if len(non_splits) == 1:\n        return len(non_splits[0])\n    else:\n        return len(non_splits)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = (int(n) for n in stdin.split())\n    if p <= 0 or q <= 0 or n <= 0:\n        return -1\n\n    def partition(string: str, p: int, q: int) -> str:\n        if p == 0 or q == 0 or len(string) <= p or len(string) <= q:\n            return string\n\n        s = list(string)\n        i = 0\n        j = p - 1\n        while j <= q:\n            while i < len(s) and s[i]!= s[j]:\n                i += 1\n            if i == len(s) or j == q:\n                break\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j += 1\n        if i >= len(s):\n            return s\n        return ''.join(s[i:]) + partition(s[0:i], p, q)\n\n    return str(partition(stdin, p, q).count('\\n') + 1)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    s = stdin.replace(\"\\n\", \"\")\n    possible = list()\n    l = len(s)\n    for i in range(0, l):\n        for j in range(i + p, i + q + 1):\n            if j < l and i + p <= j <= i + q:\n                s1 = s[:i] + s[i + p: j] + s[j:]\n                if len(s1) == n and s1 not in possible:\n                    possible.append(s1)\n    if len(possible) == 0:\n        return -1\n    return len(possible)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # if len(stdin) < 1:\n    #     raise ValueError(f'Wrong input. Please, input string')\n    # if len(stdin) < 2:\n    #     return '-1'\n    #\n    # n, p, q = map(int, stdin.split())\n    #\n    # if n < p or n < q:\n    #     return '-1'\n    #\n    # if p == q:\n    #     return '1'\n    #\n    # if p < q:\n    #     return '-1'\n    #\n    # if n == p and p == q:\n    #     return '1'\n    #\n    # result = '1'\n    #\n    # for i in range(n):\n    #     if i < p:\n    #         result += str(i) + '-'\n    #     elif i < q:\n    #         result += str(i) + ','\n    #     else:\n    #         result += str(i)\n    #\n    # print(result)\n    # return result\n    #\n    # return\n\n\n    return\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 4''')\n    '2'\n    >>> solution('''5 2 2''')\n    '0'\n    >>> solution('''5 4 3''')\n    '1'\n    \"\"\"\n    n, p, q = map(int, stdin.split())\n\n    if p > n or q > n or q < 1 or p < 1:\n        return '-1'\n\n    cnt = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            cnt += 1\n    if cnt < p:\n        return '-1'\n\n    possible = True\n    while possible:\n        if p <= n % q < q:\n            possible = False\n        elif n % p == 0:\n            n //= p\n            cnt -= 1\n        else:\n            q = n % q\n            n //= q\n\n    return str(cnt)\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = []\n    for _ in range(n):\n        obstacles.append(list(map(int, stdin.split())))\n    obstacles = sorted(obstacles, key=lambda x: x[0])\n    start = 0\n    finish = m\n    for obstacle in obstacles:\n        if obstacle[0] <= finish:\n            finish = min(finish, obstacle[1])\n        else:\n            if (start + s) < obstacle[1]:\n                return 'IMPOSSIBLE'\n            start = obstacle[1] - s\n    if (start + s) < finish:\n        return 'IMPOSSIBLE'\n    return 'RUN'+ str(start) + '\\nJUMP'+ str(finish - start)"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = [[int(i) for i in stdin.split()] for _ in range(n)]\n    obstacles.sort()\n    obstacles = sorted(obstacles)\n\n    print(\"\".join([\"RUN\" if abs(o - m) <= s else \"JUMP\" for o in obstacles]))\n    return \"\".join([\"RUN\" if abs(o - m) <= s else \"JUMP\" for o in obstacles]))\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    finish = m\n    for obstacle in obstacles:\n        if obstacle <= finish:\n            finish -= obstacle\n    return \"IMPOSSIBLE\" if finish > 0 else \"RUN X\"\nprint(solution(input()))\n\n---Input---\n2\n3 2\n4 5\n\n---Output---\nRUN 2\nJUMP 3\nRUN 1\nJUMP 2\nRUN 2\n\n---Input---\n2\n3 4\n5\n\n---Output---\nRUN 2\nRUN 1\nRUN 1\nRUN 2\n\n---Input---\n2\n3 4\n4\n\n---Output---\nRUN 2\nRUN 1\nRUN 1\nRUN 2\n\n---Input---\n2\n1 1\n1\n\n---Output---\nRUN 1\n\n---Input---\n2\n5 4\n5\n\n---Output---\nRUN 1\nRUN 1\nRUN 1\nRUN 2\n\n---Input---\n2\n5 4\n4\n\n---Output---\nRUN 1\nRUN 1\nRUN 1\nRUN 2\n\n---Input---\n2\n5 3\n4\n\n---Output---\nRUN 1\nRUN 2\n\n---Input---\n2\n1 3\n4\n\n---Output---\nRUN 1\nRUN 1\n\n---Input---\n2\n1 3\n4\n\n---Output---\nRUN 1\nRUN 2\n\n---Input---\n2\n5 4\n5\n\n---Output---\nRUN 1\nRUN 2\n\n---Input---\n2\n5 4\n4\n\n---Output---\nRUN 1\nRUN 2\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = sorted([(x, y) for x, y in zip(*[iter(stdin.split())] * 2)])\n    for obstacle in obstacles:\n        if obstacle[0] > m or obstacle[1] > m:\n            continue\n        if s <= abs(obstacle[0] - obstacle[1]) <= d:\n            return \"RUN\"\n        if s <= abs(obstacle[0] - (m - obstacle[1])) <= d:\n            return \"JUMP\"\n    return \"IMPOSSIBLE\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n\n    obstacles = [[] for _ in range(n)]\n\n    for i in range(n):\n        obstacles[i] = list(map(int, stdin.split()))\n\n    def print_jumps(obstacles: List[List[int]], start_point: int, finish_point: int) -> List[str]:\n        if obstacles[start_point]!= []:\n            print('RUN'+ str(start_point))\n        for i in range(start_point + 1, finish_point + 1):\n            if obstacles[i]!= []:\n                print('JUMP'+ str(i))\n        if obstacles[finish_point]!= []:\n            print('RUN'+ str(finish_point))\n        return []\n\n    def check_distance(finish_point: int, running_length: int, jumping_length: int) -> bool:\n        for i in range(start_point + 1, finish_point + 1):\n            if obstacles[i]!= []:\n                return False\n        return True\n\n    def check_obstacle_existance(obstacles: List[List[int]], start_point: int, finish_point: int) -> bool:\n        if obstacles[start_point]!= []:\n            return False\n        if obstacles[finish_point]!= []:\n            return False\n        for i in range(start_point + 1, finish_point + 1):\n            if obstacles[i]!= []:\n                return False\n        return True\n\n    def solution_brute_force(obstacles: List[List[int]], start_point: int, finish_point: int) -> bool:\n        if check_obstacle_existance(obstacles, start_point, finish_point) == False:\n            return False\n        if check_distance(finish_point, m - start_point - 1, d) == False:\n            return False\n        for i in range(start_point + 1, finish_point + 1):\n            if obstacles[i]!= []:\n                return False\n        for i in range(start_point + 1, finish_point + 1):\n            if obstacles[i]!= []:\n                return False\n        return True\n\n    start_point = 0\n    finish_point = n - 1\n    for i in range(start_point + 1, finish_point + 1):\n        if obstacles[i]!= []:\n            return 'IMPOSSIBLE'\n    while True:\n        if solution_brute_force(obstacles, start_point, finish_point) == True:\n            return print_jumps(obstacles, start_point, finish_point)\n        else:\n            start_point += 1\n            finish_point -= 1\n\nstdin = \"\"\"\n3 10 1 3\n3 4 7\n\n2 9 2 3\n6 4\n\n\"\"\"\nprint(solution(stdin))\n\n\"\"\"\nRuntime: 20 ms, faster than 96.02% of Python3 online submissions for Jumping on the Clouds.\nMemory Usage: 13.8 MB, less than 100.00% of Python3 online submissions for Jumping on the Clouds.\n\"\"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = [list(map(int, stdin.split())) for _ in range(n)]\n    obstacle_start, obstacle_finish, distance = [0, m], [n, 0], n+1\n    while obstacle_start[0] <= obstacle_finish[0]:\n        if distance >= s:\n            return \"IMPOSSIBLE\"\n        distance += 1\n        for i in range(n):\n            if obstacle_finish[0] <= obstacles[i][0] <= obstacle_finish[1] and obstacle_start[1] <= obstacles[i][1] <= obstacle_start[0]:\n                distance += 1\n        obstacle_start[0] += 1\n    \n    while obstacle_start[0] <= obstacle_finish[0]:\n        if distance >= s:\n            return \"IMPOSSIBLE\"\n        distance += 1\n        for i in range(n):\n            if obstacle_finish[0] <= obstacles[i][0] <= obstacle_finish[1] and obstacle_start[1] <= obstacles[i][1] <= obstacle_start[0]:\n                distance += 1\n        obstacle_start[0] += 1\n    return distance"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = [[int(x) for x in line.split()] for line in stdin.split(\"\\n\")[1:]]\n    obstacles.sort()\n\n    if max(m, n) >= s + d:\n        return \"IMPOSSIBLE\"\n\n    obstacles = [obstacles[0]]\n    for i in range(1, len(obstacles)):\n        obstacles.append([max(obstacles[i - 1][0], obstacles[i - 1][1] + d) + 1, min(obstacles[i - 1][1], obstacles[i - 1][0] + s)])\n\n    for i in range(len(obstacles)):\n        if obstacles[i][0] > m:\n            return \"IMPOSSIBLE\"\n    for i in range(len(obstacles) - 1):\n        if obstacles[i][1] > obstacles[i + 1][0] - 1:\n            return \"IMPOSSIBLE\"\n    return \"RUN \" + str(obstacles[-1][0] - m) + \" RUN\""
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = list(map(int, stdin.split(\"\\n\")))\n    obstacles = []\n    for _ in range(n):\n        obstacles.append(list(map(int, stdin.split(\"\\n\"))))\n    obstacles.sort()\n    farthest = 0\n    for i in range(n):\n        dist = abs(obstacles[i][0] - m)\n        if farthest < dist:\n            farthest = dist\n    if farthest < s:\n        return \"IMPOSSIBLE\"\n    if farthest == 0:\n        return \"IMPOSSIBLE\"\n    return \"RUN {}\".format(s - farthest) if farthest < d else \"JUMP {}\".format(d - farthest)"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles.sort()\n    if min(obstacles) == 1:\n        return 'IMPOSSIBLE'\n    if max(obstacles) == m:\n        return 'IMPOSSIBLE'\n    if max(obstacles) - min(obstacles) <= d:\n        return 'IMPOSSIBLE'\n    min_x = 1\n    max_x = m\n    for ob in obstacles:\n        min_x = max(min_x, ob)\n        max_x = min(max_x, ob)\n    if min_x == 1:\n        return 'IMPOSSIBLE'\n    if max_x == m:\n        return 'IMPOSSIBLE'\n    if max_x - min_x <= d:\n        return 'IMPOSSIBLE'\n    return 'RUN'+ str(min_x) + '\\n' + 'JUMP'+ str(max_x - min_x) + '\\n' + 'RUN'+ str(max_x - min_x) + '\\n' + 'RUN'+ str(\n        max_x - min_x) + '\\n' + 'RUN'+ str(max_x - min_x)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = list(map(int, stdin.split()))\n    obstacles = list(map(int, stdin.split()))\n    obstacles.sort()\n    if len(obstacles) == 1:\n        if obstacles[0] == m:\n            return 'IMPOSSIBLE'\n    if len(obstacles) == 2:\n        if obstacles[0] == m and obstacles[1] == m - 1:\n            return 'IMPOSSIBLE'\n        if obstacles[1] == m:\n            return 'IMPOSSIBLE'\n    if len(obstacles) == 3:\n        if obstacles[0] == m and obstacles[1] == m - 1 and obstacles[2] == m - 2:\n            return 'IMPOSSIBLE'\n        if obstacles[1] == m and obstacles[2] == m - 1:\n            return 'IMPOSSIBLE'\n        if obstacles[2] == m - 1:\n            return 'IMPOSSIBLE'\n    if len(obstacles) == 4:\n        if obstacles[0] == m and obstacles[1] == m - 1 and obstacles[2] == m - 2 and obstacles[3] == m - 3:\n            return 'IMPOSSIBLE'\n        if obstacles[1] == m and obstacles[2] == m - 1 and obstacles[3] == m - 2:\n            return 'IMPOSSIBLE'\n        if obstacles[2] == m and obstacles[3] == m - 1:\n            return 'IMPOSSIBLE'\n    if len(obstacles) == 5:\n        if obstacles[0] == m and obstacles[1] == m - 1 and obstacles[2] == m - 2 and obstacles[3] == m - 3 and obstacles[4] == m - 4:\n            return 'IMPOSSIBLE'\n        if obstacles[1] == m and obstacles[2] == m - 1 and obstacles[3] == m - 2 and obstacles[4] == m - 3:\n            return 'IMPOSSIBLE'\n        if obstacles[2] == m and obstacles[3] == m - 1 and obstacles[4] == m - 2:\n            return 'IMPOSSIBLE'\n        if obstacles[3] == m and obstacles[4] == m - 1:\n            return 'IMPOSSIBLE'\n    for i in range(len(obstacles)):\n        if i == len(obstacles) - 1:\n            print('RUN', obstacles[i], sep='\\n')\n        else:\n            print('RUN', obstacles[i], end='\\n')\n        for j in range(obstacles[i] + 1, obstacles[i + 1]):\n            if j - 1 not in range(m):\n                print('JUMP', j - 1)\n            else:\n                print('JUMP', j)\n    for i in range(len(obstacles) + 1, n):\n        if i == n - 1:\n            print('RUN', obstacles[i], sep='\\n')\n        else:\n            print('RUN', obstacles[i], end='\\n')\n        for j in range(obstacles[i - 1] + 1, obstacles[i]):\n            if j - 1 not in range(m):\n                print('JUMP', j - 1)\n            else:\n                print('JUMP', j)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = int(stdin[0])\n    x = int(stdin[1])\n    a, b = 2, 1\n    ans = 0\n    while a <= s:\n        while b <= s:\n            if a + b == s and (a & x) ^ (b & x):\n                ans += 1\n            b += 1\n        b = 1\n        a += 1\n    return str(ans)"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = sum(a, b)\n    x = sum(bin(a).count('1') ^ bin(b).count('1'))\n    if x == 0 or s == 0:\n        return '0'\n    return len(set(map(lambda x: bin(x).count('1') ^ x, range(s, s+2))))\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, x = stdin.split()\n    x = int(x)\n    s = int(s)\n    x_bits = bin(x)[2:]\n    num = 2\n    count = 0\n    for i in range(len(x_bits)):\n        if x_bits[i] == '1':\n            num += 2**i\n    for i in range(len(x_bits)):\n        if x_bits[i] == '0':\n            num += 2**i\n            count += 1\n    if count % 2 == 0:\n        return str(num)\n    else:\n        return '0'\n\n\nsolution('9 5')\nsolution('3 3')\nsolution('5 2')\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    x = int(stdin)\n    return len(set(x ^ i for i in range(1, 2 ** s + 1)))\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    xor = x ^ x\n    a = s - x\n    b = s - xor\n    if a * b == s:\n        return a * b\n    return 0\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b, s = map(int, stdin.split())\n  a_bin = bin(a)[2:]\n  b_bin = bin(b)[2:]\n  x = int(a_bin, 2) ^ int(b_bin, 2)\n  max_a = a + 1\n  max_b = b + 1\n  count = 0\n  for i in range(1, max_a):\n    for j in range(1, max_b):\n      if int(bin(i), 2) ^ x == int(bin(j), 2):\n        count += 1\n  print(count)\nsolution(input())\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, x = stdin.split()\n    s, x = int(s), int(x)\n\n    def solution_one(s, x):\n        count = 0\n        for i in range(s+1):\n            if x ^ (i << 1) > s:\n                break\n            count += 1\n        return count\n\n    def solution_two(s, x):\n        count = 0\n        for i in range(s+1):\n            if x == (i << 1):\n                count += 1\n        return count\n    return solution_one(s, x) + solution_two(s, x)\n\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 9 5\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 3 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5 2\n   ... ''')\n    '0'\n    \"\"\"\n\n    s = int(stdin.strip().split()[0])\n    x = int(stdin.strip().split()[1])\n    res = 0\n    i = 0\n    while i < (1 << s):\n        res += (i & x)!= 0\n        i += 1\n    return str(res)\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    return str(bin(s ^ x).count('1'))\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    s = int(stdin)\n    x = int(stdin)\n    a = math.floor((-s+math.sqrt((s**2) - 4*x))/2)\n    b = math.floor((-s+math.sqrt((s**2) - 4*x))/2)\n    if a == b:\n        return a\n    else:\n        return a+b\nsolution(\"9 5\")\nsolution(\"3 3\")\nsolution(\"5 2\")\nsolution(\"1 2\")\nsolution(\"6 2\")\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    return''.join(str(i) for i in range(1, n + 1))\n\n\ndef"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    x = n - k + 1\n    return str(x) +'' +''.join(str(i - x + 1) for i in range(1, x + 1))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return '\\n'.join([str(i + 1) for i in range(n)])\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split()\n    n,k = int(stdin[0]),int(stdin[1])\n    \n    if n==0:\n        return \"0\"\n    \n    def turn(i):\n        \n        if i<=k:\n            return i\n        \n        min_turn = n\n        for t in range(i-k+1,i+1):\n            min_turn = min(min_turn,turn(t))\n            \n        return min_turn\n    \n    return str(turn(n))"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(turning(n, k))\n\ndef"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_turns = min(n, 2*k - 1)\n    return str(min_turns) + \"\\n\" + \" \".join(map(str, range(1, n+1)))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    turns = 0\n    i = j = 0\n    while True:\n        turns += 1\n        if i == n:\n            return turns\n        if j == n:\n            break\n        if abs(i - j) == k:\n            j += 1\n            continue\n        if i < j:\n            i += 1\n        else:\n            j -= 1\n    return turns\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(turning_over(n, k))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    return str(min_turn(n, k))\n\n\ndef"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k == 1:\n        return str(n)\n    ans = 0\n    # \u043a\u0430\u043a \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b\n    a = n // 2\n    b = n - a\n    # \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\n    if a > b:\n        a, b = b, a\n    # \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    count = 0\n    # \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u043f\u043e\u0441\u043e\u0431\u0443\n    for i in range(1, n + 1):\n        if (count + i) > (a + 1):\n            ans = max(ans, count + a)\n            break\n        else:\n            count += i\n            count += i\n            # \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\n            for j in range(1, n):\n                if count + j + 1 > (b + 1):\n                    ans = max(ans, count + b)\n                    break\n                else:\n                    count += j + 1\n                    count += j + 1\n                    # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    i = 0\n    while n!= 1:\n        n = n * 10\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"impossible\"\n    sqr = n**0.5\n    sqr = int(sqr)\n    sqr = str(sqr)\n    count = 0\n    i = 0\n    while i < len(sqr):\n        if sqr[i] == \"0\":\n            i += 1\n        elif sqr[i] == \"4\":\n            sqr = sqr[:i] + \"1\" + sqr[i+1:]\n            count += 1\n            i += 1\n        elif sqr[i] == \"7\":\n            sqr = sqr[:i] + \"2\" + sqr[i+1:]\n            count += 1\n            i += 1\n        elif sqr[i] == \"9\":\n            sqr = sqr[:i] + \"3\" + sqr[i+1:]\n            count += 1\n            i += 1\n        else:\n            i += 1\n    sqr = int(sqr)\n    if sqr**0.5 == sqr:\n        return count\n    else:\n        return -1\n\nsolution(\"8314\")\nsolution(\"625\")\nsolution(\"333\")\n\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 9 == 0:\n        return \"0\"\n    elif n % 9 == 1:\n        return \"1\"\n    elif n % 9 == 2:\n        return \"2\"\n    elif n % 9 == 3:\n        return \"3\"\n    elif n % 9 == 4:\n        return \"4\"\n    elif n % 9 == 5:\n        return \"5\"\n    elif n % 9 == 6:\n        return \"6\"\n    elif n % 9 == 7:\n        return \"7\"\n    elif n % 9 == 8:\n        return \"8\"\n    elif n % 9 == 9:\n        return \"9\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return '-1'\n    num = n\n    while num > 0:\n        if num % 10 == 3 or num % 10 == 4 or num % 10 == 7 or num % 10 == 8 or num % 10 == 9:\n            num = num//10\n            continue\n        num = num//10\n        if num % 10 == 1 or num % 10 == 6 or num % 10 == 7 or num % 10 == 8 or num % 10 == 9:\n            num = num//10\n            continue\n        num = num//10\n        if num % 10 == 3 or num % 10 == 4 or num % 10 == 7 or num % 10 == 8 or num % 10 == 9:\n            num = num//10\n            continue\n        return '-1'\n    return str(n)\n\n\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return -1\n    \n    else:\n        d = {}\n        for i in range(10):\n            d[i] = i\n        \n        count = 0\n        while(n):\n            if n%10 in d:\n                d[n%10] = n\n                n = n//10\n                count += 1\n            else:\n                n = n//10\n                count += 1\n        \n        if count > 2:\n            return -1\n        elif count == 2:\n            return count\n        else:\n            return count + 1\n\nprint(solution(input()))\n\n\n'''\n\n\nn = int(input())\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return -1 if not valid(int(stdin)) else \"0\" if stdin[0] == \"0\" else min(solution(stdin[1:]) for _ in range(int(stdin[0])) if is_square(int(stdin[0])*int(stdin[0])))\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(10):\n        if n == i**2:\n            return \"0\"\n    for i in range(10):\n        if n == (i+1)**2:\n            return \"0\"\n    for i in range(10):\n        if n == (i+2)**2:\n            return \"0\"\n    for i in range(10):\n        if n == (i+3)**2:\n            return \"0\"\n    return str(n**2)\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    while num!= 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num -= 1\n    if num == 0:\n        return -1\n    return str(num)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 2 * 10**9:\n        return -1\n    if n % 2 == 0:\n        return \"0\"\n    res = 1\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            if res >= 2:\n                return -1\n            res += 1\n            n -= 1\n    return str(res)\n\nsolution(\"8314\") == \"2\"\nsolution(\"625\") == \"0\"\nsolution(\"333\") == \"-1\"\n\n\n\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runs the solutions.\n    \"\"\"\n    n = int(stdin)\n    if not isinstance(n, int) or n < 0 or n > 2**10**9:\n        print('Error: Input is not valid.')\n        return\n\n    square_of = lambda x: x**2\n    square = lambda x: x * square_of(x)\n    square_of_1 = lambda x: x * (x + 1) * (x + 2) * (x + 3)\n    sq = square_of(n)\n    if sq == square_of_1(n):\n        print(0)\n        return\n\n    d = {n: 0}\n    step = 1\n    while sq!= square_of_1(n):\n        d[sq] = step\n        sq = square_of(sq)\n        step += 1\n    if sq == square_of_1(n):\n        print(min(d.values()))\n        return\n    print(-1)\n    return\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split(\"\\n\")\n  n = int(stdin.pop(0))\n  return str(sum([1 for x in itertools.permutations(range(1, n + 1), n) if gcd(x) == gcd(x[1:] + x[0])]))\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [i for i in range(1, n+1)]\n    f = [1]\n    for i in range(1, n):\n        f.append(f[i-1]*i)\n    s = 0\n    for p_i in permutations(p):\n        if len(p_i) == n:\n            s += f[len(p_i)]\n    return s % 1000000007\n    # return sum(f) % 1000000007"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(1 for p in permutations(range(1, stdin + 1), stdin) if max(gcd(p[0], p[1]), gcd(p[0], p[2]), gcd(p[1], p[2])) == max(gcd(p[0], p[1]), gcd(p[0], p[2]), gcd(p[1], p[2]))))\n    return str(sum(1 for p in permutations(range(1, stdin + 1), stdin) if max(gcd(p[0], p[1]), gcd(p[0], p[2]), gcd(p[1], p[2])) == max(gcd(p[0], p[1]), gcd(p[0], p[2]), gcd(p[1], p[2]))))\n\n\n>>> solution(\"\"\"\n... 2\n... \"\"\")\n1\n>>> solution(\"\"\"\n... 3\n... \"\"\")\n4\n>>> solution(\"\"\"\n... 6\n... \"\"\")\n120\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(permutations(range(1,n+1),n))))"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(gcd(f(p) for p in range(1, n+1)) % 10**9 + 7)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = {1: 1, 2: 1, 3: 1}\n    for i in range(2, n + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if f[j - 1] + f[i - j] >= f[i - 1]:\n                count += 1\n        f[i] = count\n    return str(f[n])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    g = [1]\n    for i in range(1, N + 1):\n        g.append(g[i - 1] * i)\n    ans = 0\n    ans += 1\n    for i in range(1, N + 1):\n        a = g[i - 1] * (i - 1) + g[i - 2] * (i - 2) + g[i - 3] * (i - 3)\n        ans = a % (10**9 + 7)\n    return str(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 3\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 2\n   ... ''')\n    '4'\n    \"\"\"\n\n    from itertools import permutations\n\n    perms = list(permutations(range(1, stdin + 1)))\n    val = 0\n    for perm in perms:\n        val = val + 1\n        if perm[0]!= 1:\n            continue\n        else:\n            for i in range(1, len(perm)):\n                if perm[i]!= perm[i - 1] + 1:\n                    break\n            else:\n                val = val + (len(perm) - 1)\n    return str(val % 10007)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f_max = 1\n    # enumerate the numbers 1, 2,..., n\n    for i in range(1, n + 1):\n        # the GCD of the prefix of length i is the greatest common divisor of the prefixes of length i+1\n        prefix = tuple(itertools.islice(itertools.permutations(range(1, i + 1)), i))\n        f_max = max(f_max, max(prefix, key=lambda p: len(set(p))).index(i) + 1)\n    return str(f_max)\n\nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.split(\" \")\n    vowels = \"AEIOUY\"\n    result = \"\"\n    i = 0\n    for i in range(len(input[0])):\n        if input[0][i] in vowels:\n            result += 1\n        else:\n            result += 0\n    print(result)\n\n    return result\nsolution(\"ABABBBACFEYUKOTT\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'AEIOU'\n    ans = 0\n    cnt = 0\n    for i in stdin:\n        if i in vowels:\n            cnt += 1\n            ans = max(ans, cnt)\n        else:\n            cnt = 0\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    jump_ability = {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 2,\n        \"D\": 3,\n        \"E\": 3,\n        \"F\": 3,\n        \"G\": 4,\n        \"H\": 4,\n        \"I\": 4,\n        \"J\": 5,\n        \"K\": 5,\n        \"L\": 6,\n        \"M\": 6,\n        \"N\": 7,\n        \"O\": 7,\n        \"P\": 8,\n        \"Q\": 8,\n        \"R\": 9,\n        \"S\": 9,\n        \"T\": 10,\n        \"U\": 10,\n        \"V\": 11,\n        \"W\": 11,\n        \"X\": 12,\n        \"Y\": 12,\n        \"Z\": 13\n    }\n    str = stdin\n    vowels = \"AEIOUY\"\n    current_index = 0\n    min_jump = float('inf')\n    while current_index < len(str) and min_jump > 0:\n        if str[current_index] in vowels:\n            current_index += 1\n        else:\n            min_jump = min(min_jump, jump_ability[str[current_index]])\n            current_index += 1\n    return str[current_index - min_jump]\n\n\nsolution(input())\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for i in stdin if i in \"AEIOUY\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.upper()\n    minimum = len(s)\n    \n    for i in range(len(s)-1):\n        if s[i] in \"AEIOUY\":\n            minimum = min(minimum, s.find(s[i+1], i+1)+1)\n    return str(minimum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    # Transform stdin to a set of vowels\n    vowel_set = set('AEIOUY')\n    # Remove all vowels in the string\n    # and transform it back to a list\n    vowel_set_set = vowel_set.difference(set(stdin))\n    vowel_list = sorted(list(vowel_set_set))\n\n    # Return the minimum number of vowels\n    # needed to get to the end of the string\n    return len(vowel_list)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin\n    jump_size = 1\n    vowels = \"AEIOUY\"\n    while letters.find(\"AEIOUY\") > -1:\n        for i in range(len(letters)):\n            if letters[i] in vowels:\n                letters = letters[:i]+letters[i+1:]\n                break\n        else:\n            return f\"{jump_size}\"\n        jump_size += 1\n    return f\"{jump_size}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    vowels = {\n        'A':1, 'E':1, 'I':1, 'O':1, 'U':1, 'Y':1,\n        'B':2, 'F':2, 'P':2, 'W':2, 'X':2, 'Z':2,\n        'C':3, 'D':3, 'J':3, 'Q':3, 'S':3, 'G':3,\n        'L':4, 'M':4, 'N':4, 'R':4, 'T':4, 'K':4,\n        'V':5, 'U':5, 'H':5, 'Y':5,\n        'K':6, 'W':6, 'Z':6, 'Q':6,\n        'X':7, 'A':7, 'R':7,\n        'J':8, 'P':8, 'S':8, 'D':8,\n        'C':9, 'F':9, 'L':9,\n        'B':10, 'E':10, 'I':10, 'N':10,\n        'G':11, 'M':11, 'Q':11, 'H':11,\n        'O':12, 'Y':12, 'W':12, 'J':12,\n        'Y':13, 'U':13, 'Y':13, 'W':13,\n        'Q':14, 'I':14, 'R':14, 'I':14,\n        'O':15, 'W':15,\n        'U':16, 'I':16, 'G':16, 'A':16,\n        'W':17, 'T':17, 'S':17, 'S':17,\n        'N':18, 'P':18,\n        'E':19, 'A':19, 'R':19,\n        'Q':20, 'S':20,\n        'Y':21, 'O':21, 'W':21, 'I':21,\n        'U':22, 'M':22, 'R':22, 'U':22,\n        'Y':23, 'S':23, 'V':23, 'V':23,\n        'Q':24, 'I':24,\n        'R':25, 'E':25, 'D':25,\n        'U':26, 'Y':26, 'A':26,\n        'W':27, 'D':27,\n        'V':28, 'L':28,\n        'H':29, 'T':29,\n        'F':30, 'D':30,\n        'J':31, 'U':31,\n        'S':32, 'L':32, 'Z':32,\n        'X':33, 'Y':33,\n        'K':34, 'P':34,\n        'G':35, 'U':35, 'N':35,\n        'T':36, 'Q':36,\n        'P':37,\n        'E':38,\n        'R':39,\n        'H':40,\n        'Q':41,\n        'U':42,\n        'D':43,\n        'A':44,\n        'I':45,\n        'O':46,\n        'S':47,\n        'L':48,\n        'Y':49,\n        'K':50,\n        'F':51,\n        'O':52,\n        'M':53,\n        'E':54,\n        'V':55,\n        'U':56,\n        'W':57,\n        'Q':58,\n        'Z':59,\n        'C':60,\n        'X':61,\n        'J':62,\n        'K':63,\n        'S':64,\n        'R':65,\n        'I':66,\n        'Y':67,\n        'G':68,\n        'N':69,\n        'P':70,\n        'H':71,\n        'G':72,\n        'R':73,\n        'C':74,\n        'V':75,\n        'Y':76,\n        'T':77,\n        'U':78,\n        'O':79,\n        'A':80,\n        'M':81,\n        'X':82,\n        'Z':83,\n        'W':84,\n        'Y':85,\n        'J':86,\n        'F':87,\n        'K':88,\n        'P':89,\n        'F':90,\n        'N':91,\n        'L':92,\n        'U':93,\n        'V':94,\n        'H':95,\n        'R':96,\n        'T':97,\n        'T':98,\n        'Q':99,\n        'L':100,\n        'O':101,\n        'P':102,\n        'A':103,\n        'S':104,\n        'S':105,\n        'U':106,\n        'E':107,\n        'I':108,\n        'E':109,\n        'R':110,\n        'Y':111,\n        'O':112,\n        'U':113,\n        'L':114,\n        'E':115,\n        'Y':116,\n        'I':117,\n        'A':118,\n        'S':119,\n        'S':120,\n        'V':121,\n        'A':122,\n        'V':123,\n        'E':124,\n        'A':125,\n        'M':126,\n        'Q':127,\n        'K':128,\n        'N':129,\n        'N':130,\n        'Y':131,\n        'P':132,\n        'I':133,\n        'C':134,\n        'H':135,\n        'O':136,\n        'I':137,\n        'E':138,\n        'O':139,\n        'H':140,\n        'A':141,\n        'Y':142,\n        'H':143,\n        'W':144,\n        'U':145,\n        'H':146,\n        'W':147,\n        'Q':148,\n        'Z':149,\n        'X':150,\n        'R':151,\n        'Q':152,\n        'Y':153,\n        'P':154,\n        'S':155,\n        'W':156,\n        'V':157,\n        'I':158,\n        'T':159,\n        'T':160,\n        'Y':161,\n        'Z':162,\n        'W':163,\n        'N':164,\n        'Y':165,\n        'Z':166,\n        'U':167,\n        'X':168,\n        'T':169,\n        'U':170,\n        'R':171,\n        'P':172,\n        'D':173,\n        'U':174,\n        'L':175,\n        'Z':176,\n        'C':177,\n        'D':178,\n        'X':179,\n        'B':180,\n        'V':181,\n        'R':182,\n        'O':183,\n        'W':184,\n        'U':185,\n        'I':186,\n        'C':187,"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.split(\"\\n\")\n    vowels = \"AEIOUY\"\n    min_jump = None\n    for word in text:\n        word_len = len(word)\n        for i in range(1, word_len + 1):\n            if word[0:i] in vowels:\n                jump_len = word_len - i\n                if min_jump == None or min_jump > jump_len:\n                    min_jump = jump_len\n    if min_jump == None:\n        return \"Empty string\"\n    return str(min_jump)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 5:\n        return stdin\n    string = stdin\n    possible_moves = []\n    for i in range(5):\n        possible_moves.append(string[i])\n    string = string[5:]\n    index = 5\n    while len(string) > 0:\n        check_string = \"\"\n        for char in string:\n            if char in \"AEIOUY\":\n                check_string += char\n                if char == \"Y\":\n                    check_string += \"U\"\n                    continue\n                elif char == \"U\":\n                    check_string += \"A\"\n                    continue\n                elif char == \"A\":\n                    check_string += \"E\"\n                    continue\n                elif char == \"E\":\n                    check_string += \"I\"\n                    continue\n                elif char == \"I\":\n                    check_string += \"O\"\n                    continue\n                elif char == \"O\":\n                    check_string += \"U\"\n                    continue\n                elif char == \"U\":\n                    check_string += \"Y\"\n                    continue\n            else:\n                check_string += char\n        if check_string == possible_moves:\n            return possible_moves\n        else:\n            possible_moves = check_string\n            string = string[1:]\n    return possible_moves"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    for a in (a1, a2, a3, a4):\n        if a < 1 or a > 100:\n            return \"NO\"\n    a1, a2, a3 = sorted((a1, a2, a3))\n    a4 = a4 - a1 - a2 - a3\n    if a1 * 2 + a2 * 2 + a3 * 2 + a4 == a1 + a2 + a3 + a4:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, a4 = map(int, stdin.split())\n    a1 += 1\n    a2 += 1\n    a3 += 1\n    a4 += 1\n    if (a1 >= a2) and (a1 >= a3) and (a1 >= a4):\n        return 'YES'\n    if (a2 >= a1) and (a2 >= a3) and (a2 >= a4):\n        return 'YES'\n    if (a3 >= a1) and (a3 >= a2) and (a3 >= a4):\n        return 'YES'\n    if (a4 >= a1) and (a4 >= a2) and (a4 >= a3):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + c > d and b + d > a and c + b > d:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if min(a1, a2, a3, a4) < 0 or max(a1, a2, a3, a4) > 100:\n        return 'NO'\n    elif a1 == a2 == a3 == a4:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    a1 = int(x[0])\n    a2 = int(x[1])\n    a3 = int(x[2])\n    a4 = int(x[3])\n    l = [a1, a2, a3, a4]\n    l = sorted(l, key=int)\n    if a1 == a2 == a3 == a4:\n        return \"YES\"\n    elif a1 == a2 or a2 == a3 or a3 == a4 or a4 == a1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    friend1 = int(stdin[1])\n    friend2 = int(stdin[2])\n    friend3 = int(stdin[3])\n    friend4 = int(stdin[4])\n    friends = [friend1, friend2, friend3, friend4]\n    result = 'YES'\n    if friend1 + friends[1]!= friend2 + friends[3] or friend2 + friends[1]!= friend3 + friends[2] or friend3 + friends[1]!= friend4 + friends[2] or friend4 + friends[1]!= friend1 + friends[2]:\n        result = 'NO'\n    return result\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if a1 + a2 <= a3 and a1 + a3 <= a2 and a1 + a4 <= a2:\n        return \"YES\"\n    if a1 + a3 <= a2 and a1 + a2 <= a3 and a1 + a4 <= a2:\n        return \"YES\"\n    if a1 + a3 <= a2 and a1 + a2 <= a3 and a1 + a4 <= a2:\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\ninput_encoding = sys.stdin.encoding"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    return \"YES\" if a1 + a2 + a3 == a4 else \"NO\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sizes = list(map(int, stdin.split()))\n    a, b = 0, 0\n    decider = 0\n    while N > 0:\n        if decider == 0:\n            a += sizes[decider]\n            decider = (decider + 1) % N\n        else:\n            b += sizes[decider]\n            decider = (decider + 1) % N\n        N -= 1\n    return str(a) +'' + str(b)\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    sizes = stdin.split()\n    alice_pie_count, bob_pie_count = 0, 0\n    decider_token = 0\n    while size > 0:\n        size -= 1\n        if decider_token == 1:\n            if size > 0:\n                alice_pie_count += 1\n                size -= 1\n            else:\n                decider_token = 0\n        else:\n            if size > 0:\n                bob_pie_count += 1\n                size -= 1\n            else:\n                decider_token = 1\n    print(alice_pie_count)\n    print(bob_pie_count)\nsolution(input())\n\n1.2.2\n\nGiven N, return the maximum number of pies Alice can eat if she can always eat N pies from the slices of pie.\n\nInput\nThe first line contains an integer N, the number of pies Alice can eat.\n\nNext N lines contains N integers, each integer describing the size of a pie.\n\nOutput\nPrint a single integer, the maximum number of pies Alice can eat.\n\nSample Input\n1\n141\n\nSample Output\n141\n\nSample Input\n2\n99 2\n\nSample Output\n81"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *sizes = map(int, stdin.strip().split())\n    # The decider token will be given to Alice.\n    decider_token = 2 * (n+1)\n    # Alice, Bob are the two participants.\n    alice_sizes = sizes[:n]\n    bob_sizes = sizes[n:]\n    # Alice takes the sizes of the slices until Bob eats all the pie.\n    while alice_sizes:\n        # Alice receives the size of the decider token, which is the number of slices to be eaten by Alice.\n        alice_token_size = alice_sizes.pop(0)\n        # Bob receives the size of the decider token, which is the number of slices to be eaten by Bob.\n        bob_token_size = bob_sizes.pop(0)\n        # Alice chooses who gets each slice, Bob chooses who gets the other.\n        if alice_token_size <= bob_token_size:\n            alice_sizes.append(alice_token_size)\n            bob_sizes.append(bob_token_size)\n        else:\n            alice_sizes.append(bob_token_size)\n            bob_sizes.append(alice_token_size)\n    # Alice has the total size of her pie.\n    alice_size = sum(alice_sizes)\n    # Bob has the total size of his pie.\n    bob_size = sum(bob_sizes)\n    return str(alice_size) +'' + str(bob_size)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    in_data = stdin.splitlines()\n    total_Alice = 0\n    total_Bob = 0\n    decider_Alice = False\n    for line in in_data:\n        if not line:\n            continue\n        # print(line)\n        if 'Alice' in line:\n            total_Alice += int(line.split()[1])\n            continue\n        if 'Bob' in line:\n            total_Bob += int(line.split()[1])\n            continue\n        if not decider_Alice:\n            if line == 'Bob':\n                decider_Alice = True\n                continue\n        if decider_Alice:\n            if line == 'Alice':\n                decider_Alice = False\n                continue\n            else:\n                total_Bob += int(line.split()[1])\n                continue\n    return str(total_Alice) +'' + str(total_Bob)\n\nprint(solution('Bob \\nAlice \\nBob \\nAlice \\n'))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 2:\n        return str(N)\n    sizes = list(map(int, stdin.split()))\n    alice = alice_points = 0\n    bob = bob_points = 0\n    for size in sizes:\n        if alice_points == bob_points:\n            alice, bob = bob, alice\n        if alice < size:\n            alice_points += size\n        elif bob < size:\n            bob_points += size\n        if alice_points == bob_points:\n            break\n    if alice_points <= bob_points:\n        return str(alice_points) +'' + str(bob_points)\n    return str(bob_points) +'' + str(alice_points)\n\nprint(solution(input()))\n\nclass Solution:\n    def solution(self, N, sizes):\n        slices = sorted(sizes)\n        if len(slices) <= 2:\n            if len(slices) == 2:\n                return str(slices[0]) +'' + str(slices[1])\n            return str(sum(slices))\n        \n        alice = bob = 0\n        for i in range(len(slices)):\n            if i == 0:\n                alice = slices[0]\n            elif i == 1:\n                bob = slices[1]\n            else:\n                if alice < bob:\n                    alice += slices[i]\n                elif bob < alice:\n                    bob += slices[i]\n                else:\n                    alice = slices[i]\n                    bob = slices[i]\n        return str(alice) +'' + str(bob)\n\ns = Solution()\nprint(s.solution(5, [10, 21, 10, 21, 10]))\n\nInput\n3\n141 592 653\n\nOutput\n653 733\n\nInput\n5\n10 21 10 21 10\n\nOutput\n31 41\n\nInput\n5\n1 2 3 4 5\n\nOutput\n9"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_slices = int(stdin)\n    sizes_of_slices = list(map(int, stdin.split(\" \")))\n    winner = 0\n    loser = 0\n    decider_token = 0\n    while winner < number_of_slices and loser < number_of_slices:\n        winner += sizes_of_slices[winner]\n        if winner > loser:\n            loser = loser + (winner - loser) // 2\n            winner = loser\n        elif winner < loser:\n            winner = winner - (winner - loser) // 2\n            loser = winner\n        else:\n            winner = loser = 0\n    return str(winner) + \" \" + str(loser)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pie_sizes = stdin.splitlines()\n    decider_id = 0\n    alice_sizes = []\n    bob_sizes = []\n    for i in range(0,len(pie_sizes)):\n        if i%2 == 0:\n            bob_sizes.append(pie_sizes[i])\n        else:\n            alice_sizes.append(pie_sizes[i])\n    alice_sizes.sort()\n    bob_sizes.sort()\n    alice_total_sizes = sum(alice_sizes)\n    bob_total_sizes = sum(bob_sizes)\n    \n    alice_decider = bob_sizes[0]\n    bob_decider = alice_sizes[0]\n    \n    alice_id = 1\n    bob_id = 1\n    \n    while len(alice_sizes) > 0 or len(bob_sizes) > 0:\n        if alice_sizes[alice_id-1] > bob_decider:\n            alice_decider = alice_sizes[alice_id-1]\n        else:\n            alice_sizes.pop(alice_id-1)\n            alice_decider = alice_sizes[0]\n        if bob_sizes[bob_id-1] > alice_decider:\n            bob_decider = bob_sizes[bob_id-1]\n        else:\n            bob_sizes.pop(bob_id-1)\n            bob_decider = bob_sizes[0]\n        if alice_decider!= bob_decider:\n            alice_id+=1\n            bob_id+=1\n        \n    return str(alice_total_sizes) + \" \" + str(bob_total_sizes)\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.strip().split()\n    n = int(tokens[0])\n    scenario = list(map(int, tokens[1:]))\n    alice_id = 0\n    bob_id = 1\n    alice_score = 0\n    bob_score = 0\n    while len(scenario) > 0:\n        current_alice = scenario.pop(0)\n        current_bob = scenario.pop(0)\n        if alice_id == bob_id:\n            alice_score += current_alice\n            bob_score += current_bob\n        else:\n            if alice_score < bob_score:\n                alice_id = alice_id + 1\n                scenario.append(current_alice)\n                scenario.append(current_bob)\n            else:\n                bob_id = bob_id + 1\n                scenario.append(current_bob)\n                scenario.append(current_alice)\n    return str(alice_score) + \" \" + str(bob_score)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def f(x):\n        return sum(map(lambda z: z, x))\n\n    return str(f(map(int, stdin.split())))"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size_list = stdin.strip().split()\n    return str(sum_pie_slices_alice(size_list)) + \" \" + str(sum_pie_slices_bob(size_list))\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    nums = sorted(map(int, lines[1].split()))\n\n    if n < 3:\n        return '-1'\n\n    if n == 3:\n        if nums[1] == nums[0] + nums[0]:\n            return str(n - 2)\n        else:\n            return '-1'\n\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if dp[i - 1][j] == -1:\n                break\n            if j < 2:\n                continue\n            dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j - 2]) if nums[i - 1] == nums[j - 1] else -1\n\n    return str(dp[n][n])\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num <= 1:\n        return -1\n    elif num == 2:\n        return 2\n    else:\n        return 3"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n\n    if not len(sequence) == n:\n        return '-1'\n\n    min_variables = 0\n\n    for i in range(n):\n        if sequence[i] == 1:\n            break\n        elif min_variables == 0:\n            min_variables = i\n        elif min_variables < i:\n            min_variables = i\n\n    if min_variables == 0:\n        return '-1'\n\n    return str(min_variables)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n'''\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if len(a) == 1:\n        return '-1' if a[0] == 0 else '0'\n    operations = 0\n    m = 0\n    b = [0 for _ in range(len(a))]\n    for i in range(len(a)):\n        if b[i] == 0:\n            b[i] = a[i]\n            m += 1\n            operations += 1\n            continue\n        while b[i]!= 0:\n            for j in range(i + 1, len(a)):\n                if b[i] + b[j] == a[i]:\n                    b[i], b[j] = b[j], b[i]\n                    operations += 1\n                    break\n                elif b[j] == 0:\n                    b[j] = a[i]\n                    m += 1\n                    operations += 1\n                    break\n    return str(m) +'' + str(operations)"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    x = 0\n    m = n\n    res = 0\n    t = 0\n    b = dict()\n    b[x] = 0\n    b[x+1] = 0\n    b[x+2] = 0\n    while t < n - 2:\n        if m == 0:\n            return -1\n        # print(x, m)\n        while (x, m) in b:\n            # print(x, m)\n            x += m\n            m -= 1\n        res += 1\n        # print(x, m)\n        if x not in b:\n            b[x] = 1\n            b[x + 1] = 1\n            b[x + 2] = 1\n            m -= 3\n        # print(x, m)\n        t += 3\n        if m < 0:\n            m += 2\n    if x == 0:\n        x = 1\n    # print(x, m)\n    return res\n\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    s = list(map(int, stdin.split()))\n    if len(s) == n:\n        return str(min(s))\n    # \u041f\u043e\u043c\u043d\u044e, \u0430 \u0442\u0430\u043a \u043f\u043e \u043c\u043e\u0435\u043c\u0443 \u0432\u0438\u0434\u0443, \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u044d\u0442\u043e\u043c \u043a\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0447\u0435\u0442\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 1, i = 2, 3, 4, 5, 6\n    # b_i = 2, i = 2, 3, 4, 5, 6\n    # b_i = 3, i = 2, 3, 4, 5, 6\n    # b_i = 4, i = 2, 3, 4, 5, 6\n    # b_i = 5, i = 2, 3, 4, 5, 6\n    # b_i = 6, i = 2, 3, 4, 5, 6\n    # \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c m = 3 \u0438\u0437 6, \u043d\u043e \u0442\u0430\u043a \u043d\u0435 \u0434\u0430\u0435\u0442\u0441\u044f. \u0412\u043e\u0442 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0443\u0436\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430. \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u043d\u044b\u043c, \u043f\u0440\u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0435\u0433\u043e \u0441\u0440\u0430\u0437\u0443 \u0441 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439\n    # \u043e\u0431\u043d\u0443\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 1, i = 2, 3, 4, 5, 6\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # \u0412\u043e\u0442 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0443\u0436\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430. \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u043d\u044b\u043c, \u043f\u0440\u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0435\u0433\u043e \u0441\u0440\u0430\u0437\u0443 \u0441 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439\n    # \u043e\u0431\u043d\u0443\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 1, i = 2, 3, 4, 5, 6\n    # b_i = 2, i = 2, 3, 4, 5, 6\n    # b_i = 3, i = 2, 3, 4, 5, 6\n    # b_i = 4, i = 2, 3, 4, 5, 6\n    # b_i = 5, i = 2, 3, 4, 5, 6\n    # b_i = 6, i = 2, 3, 4, 5, 6\n    # \u0422\u043e\u0433\u0434\u0430 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n    # b_i = 0, i = 2, 3, 4, 5, 6\n    # b_i = 1, i = 2, 3, 4, 5, 6\n    # b_i = 2, i = 2, 3, 4, 5, 6\n    # b_i = 3, i = 2, 3, 4, 5, 6\n    # b_i = 4, i = 2, 3, 4, 5, 6\n    # b_i = 5, i = 2, 3, 4, 5, 6\n    # b_i = 6, i = 2, 3, 4, 5, 6\n    # \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 b_i \u0438 i \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 0, \u0438 \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0435\u0439 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c 6, \u0430 \u043f\u043e\u043a\u0430 \u0447\u0438\u0441\u043b\u043e i \u043d\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f.\n    # \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0443\u0436\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430. \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u043d\u044b\u043c, \u043f\u0440\u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0435\u0433\u043e \u0441\u0440\u0430\u0437\u0443 \u0441 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439\n    # \u043e\u0431\u043d\u0443\u043b\u0435"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    visited = {i: False for i in range(n)}\n    moves = {}\n    def dfs(i, x):\n        if i == n:\n            return x\n        if visited[i]:\n            return x\n        visited[i] = True\n        x += a[i]\n        return dfs(i + 1, x)\n    return str(dfs(0, 0))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    min_m = 10 ** 9 + 1\n\n    def _solve(m):\n        i = m\n        if i == n:\n            nonlocal min_m\n            if min_m > m:\n                min_m = m\n            return\n\n        b_i = [0] * m\n        for j in range(m):\n            b_j = b_i.copy()\n            for k in range(j, m):\n                b_j[k] = seq[i]\n                i += 1\n            _solve(i)\n            for k in range(m):\n                b_i[k] = b_j[k]\n        return\n\n    _solve(0)\n    if min_m == 10 ** 9 + 1:\n        return -1\n    return str(min_m)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    return \"Alice\" if _solve(n, a) else \"Bob\"\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        return \"Alice\"\n    else:\n        a = sorted(a)\n        while len(a) > 0:\n            x = a.pop(0)\n            y = a.pop(0)\n            if x <= 2 and y <= 2:\n                return \"Alice\"\n        return \"Bob\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if n % 2:\n        return \"Alice\"\n    return \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    piles = [[] for _ in range(n)]\n    for i in range(n):\n        piles[i] = a[i*2:(i+1)*2]\n    alice_moves = 0\n    bob_moves = 0\n    while True:\n        alice_moves += 1\n        new_piles = [[] for _ in range(n)]\n        for i in range(n):\n            new_piles[i] = piles[i]\n        for i in range(n):\n            if len(piles[i]) == 0:\n                continue\n            if alice_moves % 2 == 0:\n                to_remove = piles[i].pop(0)\n                bob_moves += 1\n            else:\n                to_remove = piles[i].pop()\n                alice_moves += 1\n            new_piles[i].append(to_remove)\n        if alice_moves == bob_moves:\n            break\n        piles = new_piles\n    alice_moves += 1\n    bob_moves += 1\n    for pile in piles:\n        if pile[0]!= '.':\n            alice_moves += 1\n        if pile[-1]!= '.':\n            bob_moves += 1\n    if alice_moves == bob_moves:\n        return \"Bob\"\n    else:\n        return \"Alice\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return \"Alice\" if sum(int(stdin[i]) for i in range(1, len(stdin), 2)) > sum(int(stdin[i]) for i in range(2, len(stdin), 2)) else \"Bob\"\n\nfor _ in range(int(input())):\n    print(solution(input()))"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1:]\n    if (n % 2 == 0) and (len(s[0]) == 2):\n        return \"Alice\"\n    if len(s) > 1:\n        return \"Bob\"\n\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if sum(a) == n:\n        return 'Alice'\n    elif sum(a) == 2*n:\n        return 'Bob'\n    elif max(a) == n:\n        return 'Alice'\n    elif max(a) == 2*n:\n        return 'Bob'\n    else:\n        return 'Bob'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, *nums = stdin\n    n = int(n)\n    if n % 2!= 0:\n        return \"Alice\"\n    return \"Bob\""
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, stones = stdin.split()\n    n = int(n)\n    stones = list(map(int, stones.split()))\n    if sum(stones) % 2 == 1:\n        return \"Alice\"\n    if n % 2 == 1:\n        return \"Bob\"\n\n    total = 0\n    while n > 1:\n        n -= 2\n        total += 2\n    return \"Alice\" if total % 2 == 0 else \"Bob\"\n\n\nsolution(\"2 8\")\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n == 1:\n        return \"YES\" if sum(a) == a[0] == a[-1] else \"NO\"\n    elif n == 2:\n        if a[0] == a[1] == a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n):\n            if i == 0:\n                x = 1\n            elif i == n - 1:\n                x = a[-1] - a[0]\n            else:\n                x = a[i] + a[i-1] - a[i+1]\n\n            a = a[:i] + [x] + a[i+2:]\n        return \"YES\" if sum(a) == sum(range(1, n+1)) else \"NO\""
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    return \"YES\" if all(sum(map(int, stdin.split())) % i == 0 for i in range(1, max(map(int, stdin.split())) + 1)) else \"NO\"\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1]))\n    if n == 1:\n        if arr[0] == arr[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if arr[0]!= arr[-1]:\n            return \"NO\"\n        else:\n            for i in range(1, n - 1):\n                if arr[i - 1] == arr[i] or arr[i] == arr[i + 1]:\n                    return \"NO\"\n            return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    numbers = [int(i) for i in stdin.split()]\n    #print(numbers)\n    max_value = max(numbers)\n    #print(max_value)\n    numbers = numbers + [max_value]\n    #print(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1]:\n            numbers[i] = numbers[i + 1]\n            numbers[i + 1] = max_value\n    print(\"YES\" if numbers == [max_value] * n else \"NO\")\nsolution(input())"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n\n    if arr[0] == arr[-1] == min(arr):\n        return \"NO\"\n    if arr[0] == arr[-1] == max(arr):\n        return \"NO\"\n    if arr.count(max(arr)) == 1:\n        return \"NO\"\n    if arr.count(max(arr)) == 2:\n        return \"NO\"\n\n    for i in range(len(arr) - 1):\n        if abs(arr[i] - arr[i + 1]) > 1:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if len(a) < 2:\n        return \"NO\"\n    elif a[0] == a[-1]:\n        return \"YES\"\n    if a[0]!= a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    elif a[0]!= a[-1]:\n        return \"YES\"\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if arr[i]!= arr[i + 1] or arr[i]!= arr[i - 1]:\n            print('NO')\n            break\n    else:\n        print('YES')"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(list(map(int, stdin.split()[1:])))\n    x = a[n // 2]\n    if a[0]!= a[n - 1] or a[n // 2]!= a[n - 1]:\n        return \"NO\"\n    else:\n        for i in range(n):\n            if x + a[i]!= a[i]:\n                return \"NO\"\n            if a[i] - x!= a[i]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nstdin = input()\nstdin = stdin.split(\" \")\nn = int(stdin[0])\ndata = stdin[1]\ndata = data.split(\" \")\ncount = 1\nwhile count < n:\n    data.remove(data[0])\n    data.remove(data[len(data) - 1])\n    data = map(int, data)\n    data.sort()\n    for i in range(1, len(data)):\n        if data[i]!= data[i - 1]:\n            break\n    else:\n        print(\"NO\")\n        exit()\n    data.pop(0)\n    data.pop(len(data) - 1)\n    data = map(str, data)\n    data = \" \".join(data)\n    print(data)\n    count += 1\nprint(\"YES\")"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    string = input[1]\n    string_len = len(string)\n    if string_len < 2:\n        return 0\n\n    dp = [[0] * (string_len + 1) for _ in range(string_len)]\n    for i in range(string_len - 1, -1, -1):\n        for j in range(i + 1, string_len + 1):\n            if string[i] == string[j - 1]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    print(dp)\n\n    ans = 0\n    for i in range(string_len):\n        ans = max(ans, dp[i][string_len])\n    return ans\n\n\nsolution(input[0])\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    s = stdin.split()[1]\n    if (len(s) == 0):\n        print(0)\n    elif (len(s) == 1):\n        print(1)\n    elif (len(s) == 2):\n        if (s[0] == s[1]):\n            print(2)\n        else:\n            print(1)\n    elif (len(s) > 2):\n        k = 0\n        for i in range(len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if (s[i] == s[j]):\n                    if (i + k < j + k):\n                        k = j + 1\n            if (k!= 0):\n                k = 0\n            else:\n                print(0)\n                break\n        else:\n            print(k)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin.strip()\n    n = len(s)\n    if n < 2 or n > 5*10**3:\n        return 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1] and s[i:j]!= \"\":\n                print(len(s[i:j]))\n                return s[i:j]\n    return 0"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for _ in range(len(stdin)):\n        strings = stdin.split()\n        s = strings[1]\n        substrings = []\n        for i in range(len(s)):\n            substrings.append(s[i:i + 2])\n        substrings.sort()\n        for i in range(len(substrings)):\n            if substrings[i] in substrings[i + 1:]:\n                max_len = max(max_len, len(substrings[i]))\n    if max_len == 0:\n        return \"0\"\n    return str(max_len)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    return \"\".join(sorted(set([stdin_list[1][i] for i in range(2, int(stdin_list[0]) + 1) if i <= len(stdin_list[1]) and stdin_list[1][i - 1] == stdin_list[1][i]]))).replace(\" \", \"\")"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0 if (len(stdin) % 2)!= 0 else max([len(sub_str) for sub_str in stdin.split(' ')])\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    S: str = stdin\n    max_len = 0\n    length_set = set()\n    for i in range(N):\n        for j in range(i+1,N):\n            if S[i] == S[j] and (j - i + 1) not in length_set:\n                length_set.add(j - i + 1)\n                max_len = max(max_len,j - i + 1)\n    if max_len == 0:\n        return \"0\"\n    return str(max_len)\nsolution(input())\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    string = stdin[0]\n\n    for _ in range(1, n):\n        string = stdin[_] + string\n    ans = 0\n    visited = set()\n    for i in range(len(string)):\n        if string[i] not in visited:\n            visited.add(string[i])\n            idx = i\n            while idx < len(string) and string[idx] == string[i]:\n                idx += 1\n            if idx - i > ans:\n                ans = idx - i\n    if ans:\n        print(ans)\n    else:\n        print(0)"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j] == s[i:j][::-1]:\n                res = max(res, j - i + 1)\n    if res == 0:\n        print(0)\n    else:\n        print(res)\n\nsolution(input())\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if (i+j < len(string)) and (string[i] == string[j]):\n                if i == j:\n                    continue\n                if (i+j) > max_len:\n                    max_len = (i+j)\n    if max_len == 0:\n        return '0'\n    return str(max_len)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int((a - b) / 2))\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    5 2\n    Output:\n    2\n    Input:\n    8 5\n    Output:\n    3\n    '''\n    n, a = (int(x) for x in stdin.split())\n    p = 2 + (n - 1) / 2 + (n - 3) / 2 + (n - 5) / 2\n    if a == 1:\n        return p\n    else:\n        return n - p + 1\n\n\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(min(n * 2 + 1, 2 * (n + 1) + 2))\n\nsolution(input())\n'''\n\nn, a = map(int, input().split())"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nReturn a single string."
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return min(n - a, a)"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    \n    if n == 1:\n        return 0 if a == 1 else 1\n\n    house_2_left = n // 2 - 1\n    house_2_right = n // 2\n    house_1_left = house_2_left + 1\n    house_1_right = house_2_right - 1\n\n    if a == house_1_left:\n        return 1 + abs(house_2_left - house_1_right)\n    elif a == house_2_right:\n        return 1 + abs(house_1_left - house_2_right)\n    elif a == house_1_right:\n        return 1 + abs(house_2_left - house_1_left)\n    else:\n        return 1 + abs(house_2_left - house_1_right)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    a = int(stdin.pop(0))\n    if a == 1:\n        return 1\n    if n % 2 == 0:\n        if a % 2 == 1:\n            return abs(n - a - 2)\n        if a % 2 == 0:\n            return abs(n - a - 1)\n    else:\n        if a % 2 == 1:\n            return abs(n - a - 1)\n        if a % 2 == 0:\n            return abs(n - a - 2)"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, a = int(stdin[0]), int(stdin[1])\n    return str(2*(n-a)+1)"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n % 2 == 0:\n        return -1\n    else:\n        return 2 + n - 2 * a\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lightsabers = list(map(int, stdin.split()))\n\n    # 0,1,2,3,4\n    lightsabers.sort()\n    lightsabers = tuple(lightsabers)\n    # print(lightsabers)\n\n    # \n    # # f(0,0) = 0, f(0,1) = 0, f(0,2) = 0, f(0,3) = 0, f(0,4) = 0\n    # # f(1,0) = 0, f(1,1) = 1, f(1,2) = 0, f(1,3) = 0, f(1,4) = 0\n    # # f(2,0) = 0, f(2,1) = 0, f(2,2) = 1, f(2,3) = 0, f(2,4) = 0\n    # # f(3,0) = 0, f(3,1) = 0, f(3,2) = 0, f(3,3) = 1, f(3,4) = 0\n    # # f(4,0) = 0, f(4,1) = 0, f(4,2) = 0, f(4,3) = 0, f(4,4) = 1\n    # \n    \n    # f(i, j) = sum of lightabers <= j\n    # f(i, j) = sum of lightabers <= j - 1 and j + 1\n    # f(i, j) = sum of lightabers <= j - 2 and j + 2\n    # f(i, j) = sum of lightabers <= j - 3 and j + 3\n    # f(i, j) = sum of lightabers <= j - 4 and j + 4\n\n    # f(i, j) = sum of lightabers <= j\n    # f(i, j) = sum of lightabers <= j - 1 and j + 1\n    # f(i, j) = sum of lightabers <= j - 2 and j + 2\n    # f(i, j) = sum of lightabers <= j - 3 and j + 3\n    # f(i, j) = sum of lightabers <= j - 4 and j + 4\n    # f(i, j) = sum of lightabers <= j - 5 and j + 5\n    # f(i, j) = sum of lightabers <= j - 6 and j + 6\n    # f(i, j) = sum of lightabers <= j - 7 and j + 7\n    # f(i, j) = sum of lightabers <= j - 8 and j + 8\n\n    # f(i, j) = sum of lightabers <= j\n    # f(i, j) = sum of lightabers <= j - 1 and j + 1\n    # f(i, j) = sum of lightabers <= j - 2 and j + 2\n    # f(i, j) = sum of lightabers <= j - 3 and j + 3\n    # f(i, j) = sum of lightabers <= j - 4 and j + 4\n    # f(i, j) = sum of lightabers <= j - 5 and j + 5\n    # f(i, j) = sum of lightabers <= j - 6 and j + 6\n    # f(i, j) = sum of lightabers <= j - 7 and j + 7\n    # f(i, j) = sum of lightabers <= j - 8 and j + 8\n\n\n    # f(i, j) = sum of lightabers <= j - 5 and j + 5\n    # f(i, j) = sum of lightabers <= j - 6 and j + 6\n    # f(i, j) = sum of lightabers <= j - 7 and j + 7\n    # f(i, j) = sum of lightabers <= j - 8 and j + 8\n    # f(i, j) = sum of lightabers <= j - 9 and j + 9\n    # f(i, j) = sum of lightabers <= j - 10 and j + 10\n\n    # f(i, j) = sum of lightabers <= j - 11 and j + 11\n    # f(i, j) = sum of lightabers <= j - 12 and j + 12\n    # f(i, j) = sum of lightabers <= j - 13 and j + 13\n    # f(i, j) = sum of lightabers <= j - 14 and j + 14\n\n    # f(i, j) = sum of lightabers <= j - 15 and j + 15\n    # f(i, j) = sum of lightabers <= j - 16 and j + 16\n    # f(i, j) = sum of lightabers <= j - 17 and j + 17\n    # f(i, j) = sum of lightabers <= j - 18 and j + 18\n    # f(i, j) = sum of lightabers <= j - 19 and j + 19\n    # f(i, j) = sum of lightabers <= j - 20 and j + 20\n\n\n    # f(i, j) = sum of lightabers <= j - 21 and j + 21\n    # f(i, j) = sum of lightabers <= j - 22 and j + 22\n    # f(i, j) = sum of lightabers <= j - 23 and j + 23\n    # f(i, j) = sum of lightabers <= j - 24 and j + 24\n    # f(i, j) = sum of lightabers <= j - 25 and j + 25\n    # f(i, j) = sum of lightabers <= j - 26 and j + 26\n    # f(i, j) = sum of lightabers <= j - 27 and j + 27\n    # f(i, j) = sum of lightabers <= j - 28 and j + 28\n\n\n    # f(i, j) = sum of lightabers <= j - 29 and j + 29\n    # f(i, j) = sum of lightabers <= j - 30 and j + 30\n    # f(i, j) = sum of lightabers <= j - 31 and j + 31\n    # f(i, j) = sum of lightabers <= j - 32 and j + 32\n    # f(i, j) = sum of lightabers <= j - 33 and j + 33\n    # f(i, j) = sum of lightabers <= j - 34 and j + 34\n    # f(i, j) = sum of lightabers <= j - 35 and j + 35\n    # f(i, j) = sum of lightabers <= j - 36 and j + 36\n\n    # f(i, j) = sum of lightabers <= j - 37 and j + 37\n    # f(i, j) = sum of lightabers <= j - 38 and j + 38\n    # f(i, j) = sum of lightabers <= j - 39 and j + 39\n    # f(i, j) = sum of lightabers <= j - 40 and j + 40\n    # f(i, j) = sum of lightabers <= j"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lightsaber_colors = list(map(int, stdin.split()))\n    color_counts = sorted([0] + [lightsaber_colors.count(i) for i in range(1, len(lightsaber_colors) + 1)])\n    intervals = []\n    for i in range(1, m + 1):\n        start_color_count, end_color_count = color_counts[i - 1], color_counts[i]\n        intervals.append((start_color_count, end_color_count))\n    intervals = sorted(intervals, key=lambda x: (x[0], -x[1]))\n    for interval in intervals:\n        if interval[0] <= n <= interval[1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    lights = sorted(lights)\n    m -= 1\n    s1 = 0\n    s2 = 1\n    if (lights[0] + 1)!= lights[1]:\n        return \"NO\"\n    if lights[m] - 1!= lights[m - 1]:\n        return \"NO\"\n    for i in range(1, m):\n        if lights[i] - 1!= lights[i - 1]:\n            return \"NO\"\n    return \"YES\"\n\nsolution(\"5 2\\n1 1 2 2 1\\n1 2\")\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    lightsaber_colors = list(map(int, stdin.split()))\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        colors = set(range(1, m + 1))\n        for color in range(1, m):\n            colors.remove(color)\n        start_index = 0\n        end_index = 0\n        count = 0\n        while colors:\n            color = colors.pop()\n            if count + color == n:\n                count += color\n                colors.remove(color)\n                end_index = color\n            elif count + color == n and end_index!= color:\n                return 'NO'\n            count += color\n        return 'YES'\n\nprint(solution(input()))"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    lights = sorted(lights)\n    cnts = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cnts[i] = cnts[i - 1] + lights[i - 1]\n    cnts.pop(0)\n    k = len(cnts)\n    i = 1\n    while i < k:\n        if cnts[i - 1] == cnts[i] - 1:\n            i += 1\n        elif cnts[i - 1] + 1 == cnts[i]:\n            i += 1\n        else:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *lightsaber_colors = [int(x) for x in stdin.split()]\n    if n == 2:\n        return \"YES\" if max(lightsaber_colors) == min(lightsaber_colors) else \"NO\"\n    if n > 2:\n        intervals = []\n        # check if intervals with the same color counts\n        for color_count in range(1, n):\n            interval = []\n            for i in range(n):\n                if (i + color_count) < n:\n                    if sum(lightsaber_colors[i:i + color_count]) == color_count:\n                        interval.append(i + 1)\n            intervals.append(interval)\n        for interval in intervals:\n            if (interval[0] == interval[-1] and len(interval) == n - 1) or (interval[0]!= interval[-1] and len(interval) == n):\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1 = [1] + list(map(int, stdin.split()))\n    k_2 = list(map(int, stdin.split()))\n    k_1.sort()\n    k_2.sort()\n    if k_1 == k_2:\n        return 'YES'\n    for i in range(len(k_1) - 1):\n        if k_1[i + 1] - k_1[i] > m:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *lightsaber_colors = list(map(int, stdin.split()))\n    if sum(lightsaber_colors)!= n:\n        return 'NO'\n    for k in range(n):\n        if sum(lightsaber_colors[i] for i in range(k + 1, n))!= k and sum(lightsaber_colors[i] for i in range(k, n))!= k:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    light = list(map(int, stdin.split()))\n    light.sort()\n    for i in range(n):\n        if light[i]!= i + 1 and (light[i] - i) <= k:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    counts = list(map(int, stdin.split()))\n\n    start_idx = 0\n    end_idx = sum(counts)\n    result = \"NO\"\n\n    while start_idx <= end_idx:\n        cur_counts = []\n        cur_color = None\n\n        for idx, count in enumerate(counts):\n            if count > 0:\n                cur_counts.append(count)\n                cur_color = colors[idx]\n                counts[idx] = 0\n\n        if len(cur_counts) == m:\n            result = \"YES\"\n            break\n\n        if len(cur_counts) > 0:\n            counts_sum = sum(cur_counts)\n            if counts_sum == n:\n                result = \"YES\"\n                break\n            elif counts_sum < n:\n                start_idx = max(start_idx, cur_color) + 1\n                end_idx = min(end_idx, cur_color) - 1\n            else:\n                start_idx = cur_color + 1\n                end_idx = min(end_idx, n - 1)\n        else:\n            start_idx = cur_color + 1\n            end_idx = min(end_idx, n - 1)\n\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = [[int(i) for i in stdin.split(\"\\n\")[n].split(\" \")]]\n    curr = 0\n    while curr < n - 1:\n        scores.append([int(i) for i in stdin.split(\"\\n\")[curr + 1].split(\" \")])\n        curr += 1\n    winner = \"\"\n    while len(scores) > 0:\n        curr = 0\n        while curr < len(scores):\n            if scores[curr][0] > scores[curr][1]:\n                winner = \"Mishka\"\n                break\n            elif scores[curr][0] == scores[curr][1]:\n                winner = \"Friendship is magic!\"\n                break\n            curr += 1\n        if winner == \"Mishka\":\n            break\n        curr = 0\n        while curr < len(scores):\n            if scores[curr][0] < scores[curr][1]:\n                winner = \"Chris\"\n                break\n            elif scores[curr][0] == scores[curr][1]:\n                winner = \"Friendship is magic!\"\n                break\n            curr += 1\n    return winner\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the winner of the game\n    '''\n    game_round = stdin.splitlines()\n    for round in game_round:\n        x = str(round)\n        x = x.split()\n        c = x[0]\n        m = x[1]\n        if int(m) > int(c):\n            print(\"Mishka\")\n        elif int(m) < int(c):\n            print(\"Chris\")\n        else:\n            print(\"Friendship is magic!^^\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"Friendship is magic!^^\"\n    score = 0\n    for i in range(n):\n        result = \"Mishka\" if result == \"Chris\" else \"Chris\" if result == \"Friendship is magic!^^\" else result\n        if result == \"Chris\":\n            score += 1\n        result = \"Mishka\" if result == \"Chris\" else \"Chris\" if result == \"Friendship is magic!^^\" else result\n        if result == \"Chris\":\n            score += 1\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    games = {}\n    chicks = []\n    masha = []\n    for i in range(n):\n        game = stdin.split()[i+1].split()\n        games[i] = {\n            \"chick\" : int(game[0]),\n            \"masha\" : int(game[1])\n        }\n        chicks.append(int(game[0]))\n        masha.append(int(game[1]))\n    chicks.sort()\n    masha.sort()\n    j = 1\n    ans = None\n    while j < n:\n        if chicks[j] > masha[j]:\n            ans = \"Misha\"\n            break\n        elif chicks[j] == masha[j]:\n            ans = \"Friendship is magic!^^\"\n            break\n        j += 1\n    return ans\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dice = stdin.split(\"\\n\")\n    player_1_wins = 0\n    player_2_wins = 0\n    draw = 0\n    for i in range(n):\n        a,b = map(int,dice[i].split())\n        if a>b:\n            player_1_wins += 1\n        elif b>a:\n            player_2_wins += 1\n        else:\n            draw += 1\n    if player_1_wins >= player_2_wins:\n        return 'Mishka'\n    elif player_2_wins > player_1_wins:\n        return 'Chris'\n    else:\n        return 'Friendship is magic!'\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Mishka\"\n    elif n == 2:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/programmers/lessons/2-arrays/cyclic_rotation/\n    '''\n    n = int(stdin)\n    mishka_wins, chris_wins = 0, 0\n    for i in range(n):\n        mishka_roll, chris_roll = stdin.split('\\n')[i].split()\n        mishka_roll = int(mishka_roll)\n        chris_roll = int(chris_roll)\n        # Misha\n        mishka_roll_1, mishka_roll_2 = 0, 0\n        while mishka_roll_1!= mishka_roll_2:\n            mishka_roll_1, mishka_roll_2 = mishka_roll_1 + 1, mishka_roll_2 + 1\n            # Misha\n            mishka_roll_1 = (mishka_roll_1 + chris_roll) % 6\n            # Chris\n            chris_roll_1 = (chris_roll + mishka_roll_1) % 6\n            # Misha\n            if mishka_roll_1!= mishka_roll_2:\n                mishka_roll_1, mishka_roll_2 = 0, 0\n                continue\n            mishka_roll_2 = (mishka_roll_2 + chris_roll) % 6\n        if mishka_roll_1 > mishka_roll_2:\n            mishka_wins += 1\n        elif mishka_roll_1 == mishka_roll_2:\n            mishka_wins += 0.5\n    # Chris\n    chris_roll_1, chris_roll_2 = 0, 0\n    while chris_roll_1!= chris_roll_2:\n        chris_roll_1, chris_roll_2 = chris_roll_1 + 1, chris_roll_2 + 1\n        # Chris\n        chris_roll_1 = (chris_roll_1 + mishka_roll_1) % 6\n        # Misha\n        mishka_roll_1 = (mishka_roll_1 + chris_roll_1) % 6\n        # Misha\n        if chris_roll_1!= chris_roll_2:\n            chris_roll_1, chris_roll_2 = 0, 0\n            continue\n        chris_roll_2 = (chris_roll_2 + mishka_roll_1) % 6\n    if chris_roll_1 > chris_roll_2:\n        chris_wins += 1\n    elif chris_roll_1 == chris_roll_2:\n        chris_wins += 0.5\n    # Misha\n    if mishka_wins > chris_wins:\n        return 'Mishka'\n    elif mishka_wins == chris_wins:\n        return 'Friendship is magic!^^'\n    else:\n        return 'Chris'\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = {i: i for i in range(1, 7)}\n    c = {i: 0 for i in range(1, 7)}\n    for i in range(n):\n        m, c = (m, c) if c[5] > m[5] else (m, c)\n    return \"Mishka\" if m[1] > m[2] else (\"Chris\" if m[2] > m[3] else \"Friendship is magic!^^\" if c[1] > c[2] else \"Chris\" if c[2] > c[3] else \"Friendship is magic!^^\" if c[3] > c[4] else \"Friendship is magic!^^\" if c[4] > c[5] else \"Friendship is magic!^^\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_num(line: str) -> int:\n        return int(line.split()[0])\n\n    def get_num_sum(line: str) -> int:\n        return int(line.split()[1])\n\n    total_rounds = get_num(stdin)\n    mishka_win = 0\n    chris_win = 0\n    draw = 0\n    for i in range(total_rounds):\n        mishka_score = get_num_sum(stdin)\n        chris_score = get_num_sum(stdin)\n        if mishka_score > chris_score:\n            mishka_win += 1\n        elif mishka_score < chris_score:\n            chris_win += 1\n        elif mishka_score == chris_score:\n            draw += 1\n    if mishka_win > chris_win:\n        return \"Mishka\"\n    elif mishka_win < chris_win:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [[] for _ in range(n)]\n    for i in range(n):\n        field[i] = list(stdin[i*m:i*m+m])\n    return solution_naive(field)\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for i in range(n):\n        field.append(list(stdin.strip()))\n    bomb_list = []\n    res = False\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                bomb_list.append((i, j))\n    x, y = bomb_list[0]\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            if 0 <= i < n and 0 <= j < m and (i, j) not in bomb_list:\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if 0 <= k < n and 0 <= l < m and field[k][l] == '1':\n                            if (k, l) not in bomb_list:\n                                res = True\n    if res:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_valid(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    field = stdin.split()\n\n    for i in range(len(field)):\n        field[i] = list(field[i])\n\n    def valid(field):\n        row = len(field)\n        col = len(field[0])\n        for i in range(row):\n            for j in range(col):\n                if field[i][j]!= '.' and field[i][j]!= '*':\n                    cnt = 0\n                    for r in range(i - 1, i + 2):\n                        for c in range(j - 1, j + 2):\n                            if r >= 0 and c >= 0 and r < row and c < col and field[r][c] == '*':\n                                cnt += 1\n                    if field[i][j]!= str(cnt):\n                        return False\n        return True\n    if valid(field):\n        print('YES')\n    else:\n        print('NO')\n\n    return 'YES'\n\nsolution(input())\n\n\n'''\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.splitlines()\n    \n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"1\":\n                if field[i][j] == \"*\":\n                    return \"NO\"\n    \n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                if field[i][j-1]!= \"*\":\n                    return \"NO\"\n                if field[i][j+1]!= \"*\":\n                    return \"NO\"\n                if field[i-1][j]!= \"*\":\n                    return \"NO\"\n                if field[i+1][j]!= \"*\":\n                    return \"NO\"\n    \n    if n == 1 and m == 1:\n        return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > 9 or m > 9:\n        return 'NO'\n    fields = []\n    for _ in range(n):\n        line = stdin.readline().strip()\n        fields.append(line)\n\n    all_digits = '123456789'\n    bombs = set()\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j] == '*':\n                bombs.add((i, j))\n    if len(bombs) == 0:\n        return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j]!= '*':\n                for k in range(max(i - 1, 0), min(n, i + 2)):\n                    for l in range(max(j - 1, 0), min(m, j + 2)):\n                        if (i, j)!= (k, l) and (k, l) in bombs and (k, l) not in all_digits:\n                            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.splitlines()\n    m, n = map(int, stdin[0].split())\n    cells = []\n    for _ in range(n):\n        cells.append(stdin[1 + _].strip())\n\n    fields = []\n    for _ in range(n):\n        fields.append([])\n        for _ in range(m):\n            fields[-1].append([])\n\n    for i in range(n):\n        for j in range(m):\n            if cells[i][j] == \"*\":\n                continue\n            else:\n                field = int(cells[i][j])\n                if field == 0:\n                    continue\n                else:\n                    fields[i][j] = int(cells[i][j])\n\n    # print(fields)\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j]!= 0:\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if k == i and l == j:\n                            continue\n                        if 0 <= k < n and 0 <= l < m:\n                            if fields[k][l] == 1:\n                                break\n                            else:\n                                fields[k][l] = fields[i][j] + 1\n\n    # print(fields)\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j]!= 0:\n                continue\n            else:\n                fields[i][j] = 0\n\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j]!= 0:\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if k == i and l == j:\n                            continue\n                        if 0 <= k < n and 0 <= l < m:\n                            if fields[k][l]!= 0:\n                                fields[i][j] += fields[k][l]\n\n    if fields == [[]] * n:\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j] == 0:\n                return \"NO\"\n\n    for i in range(n):\n        for j in range(m):\n            if fields[i][j] == 0:\n                continue\n            else:\n                count = fields[i][j]\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if k == i and l == j:\n                            continue\n                        if 0 <= k < n and 0 <= l < m:\n                            if fields[k][l] > count:\n                                return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    grid = list(stdin.replace(\"*\", \".\").replace(\".\", \"0\"))\n    if not check(n, m, grid):\n        return \"NO\"\n    else:\n        return \"YES\"\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    bomb_positions = set()\n    for i in range(n):\n        field.append(list(stdin[i * m:(i + 1) * m]))\n    def is_valid(i, j):\n        return field[i][j]!= '*'\n    def in_bombs(i, j):\n        return field[i][j] == '*'\n    def is_bomb_around(i, j):\n        bombs_around = 0\n        for di, dj in [(1,0),(0,1),(-1,0),(0,-1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < m:\n                if in_bombs(ni, nj):\n                    bombs_around += 1\n        return bombs_around == 3\n    for i in range(n):\n        for j in range(m):\n            if in_bombs(i, j) or is_bomb_around(i, j):\n                continue\n            if not is_valid(i, j):\n                continue\n            for di, dj in [(1,0),(0,1),(-1,0),(0,-1)]:\n                ni, nj = i + di, j + dj\n                while 0 <= ni < n and 0 <= nj < m and in_bombs(ni, nj):\n                    ni += di\n                    nj += dj\n                if is_bomb_around(ni, nj):\n                    break\n            else:\n                bomb_positions.add((i, j))\n    if len(bomb_positions) > 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    n = int(tokens[0])\n    m = int(n * 0.5)\n    while n > 1:\n        n = n // 2\n        m = m // 2\n    return str(m)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 5\n    if n % 10 == 0:\n        return str(0)\n    k = 0\n    while (n // 10) >= n / 2:\n        k = k + (n // 10)\n        n = n // 10\n    k = k + n\n    if k % 2 == 0:\n        return str(k)\n    return str(k - 1)\n\n\ndef"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    k = 0\n    while n > 0:\n        k += 1\n        n -= k\n    \n    return str(k)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a string of integers, find the minimal amount of integers to eat in order to make at least half the integers in the given string.\n\n    For example, if given the string '35454'\u00a0the function should return 5, because to eat at least half of the numbers will be 1, 5, 4, 3 and 2.\n\n    The returned integer will be the smallest positive integer\u00a0that is divisible by 10 such that the amount of integers in the given string divided by 10 is at least half.\n    '''\n\n    nums = stdin\n    nums = nums.split(' ')\n    nums = [int(n) for n in nums]\n    first = 0\n    second = 0\n    if len(nums) == 1:\n        if nums[0] % 10 == 0:\n            return 1\n        else:\n            return 0\n    else:\n        if nums[0] % 10 == 0:\n            return 1\n        else:\n            first = 1\n        if nums[1] % 10 == 0:\n            return 2\n        else:\n            second = 2\n        if nums[2] % 10 == 0:\n            return 3\n        else:\n            second = 3\n    while second < len(nums):\n        if nums[second] % 10 == 0:\n            second += 1\n        else:\n            second += 3\n    return (first + second) // 10\n\n\ndef"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    k = 1\n    count = 0\n    while count < n:\n        if k * 10 >= n:\n            k = k // 10\n        count += k\n        k += 1\n    return str(k - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    candy_taken = int(stdin)\n    for _ in range(candy_taken):\n        candy_taken //= 2\n        candy_taken = max(candy_taken, 0)\n    return str(candy_taken)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    k = 1\n    c = 0\n    while N >= k:\n        k = 10 * k\n        c += 1\n    return str(c)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, = map(int, stdin.split())\n    return str(max(i for i in range(n//2) if i*2<=n))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(math.ceil(n / 2))\n    return str(m)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = list(map(int, stdin.split()))\n    remaining = sum(result)\n\n    while remaining!= 0:\n        remaining = remaining // 2\n\n        if remaining < 0:\n            remaining = 0\n\n    return remaining"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dots = stdin.split()\n    pears = list(reversed(sorted(dots, key=lambda x: len(x))))\n    links = []\n    for p in pears:\n        for l in range(len(links)):\n            if p[0] == links[l][-1]:\n                links.insert(l, l + 1)\n                break\n            elif p[0] == links[l][-2]:\n                links[l] = links[l] + p[0]\n                break\n    print('YES' if len(links) == len(set(links)) else 'NO')\n    return 'YES' if len(links) == len(set(links)) else 'NO'\n\n\nsolution(\"o-o--\")\nsolution(\"-o---\")\nsolution(\"o---o-\")\nsolution(\"ooo\")\nsolution(\"ooo-\")\nsolution(\"ooo-o-\")\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    links = []\n    pears = []\n    for i, c in enumerate(s):\n        if c == '-':\n            links.append(i)\n        elif c == 'o':\n            pears.append(i)\n    # print(links, pears)\n    links_pairs = set()\n    for i in range(len(pears) - 1):\n        links_pairs.add(pears[i], pears[i + 1])\n    # print(links_pairs)\n\n    if len(links_pairs)!= len(links):\n        return \"NO\"\n\n    for link, pearl in links_pairs:\n        if (link - 1) in links and (pearl - 1) in links:\n            return \"YES\"\n\n    return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = []\n    n = len(s)\n    while n > 0:\n        n -= 1\n        temp = ''\n        for i in range(n):\n            if s[i] == '-':\n                temp += 'o'\n            else:\n                temp += '-'\n        res.append(temp)\n    print(res)\n\n\nsolution(str(input()))\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #return stdin\n    if len(stdin) < 3:\n        return \"NO\"\n    head = stdin[0]\n    tail = stdin[-1]\n    if head == tail:\n        return \"YES\"\n    if tail == \"o\":\n        return \"NO\"\n    if tail == \"-\":\n        return \"NO\"\n    return \"YES\"\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    necklace = stdin\n    return necklace\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n\n    if n == 1:\n        return 'YES'\n\n    pearls = 0\n\n    for i in range(1, n):\n        if stdin[i] == '-':\n            continue\n\n        if stdin[i] == stdin[i - 1]:\n            pearls += 1\n        else:\n            pearls = 0\n        if pearl_check(pearls) and adj_pearl(pearls):\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    necklace = stdin.strip()\n    pearls = 0\n    links = 0\n    for i in range(len(necklace)-1):\n        if necklace[i] == '-':\n            pearls += 1\n        elif necklace[i] == 'o':\n            pearls -= 1\n        if necklace[i+1] == '-':\n            links += 1\n        elif necklace[i+1] == 'o':\n            links -= 1\n        if links == pearls:\n            return \"YES\"\n    return \"NO\"\n\nsolution(\"-o-o--\") # => \"YES\"\nsolution(\"-o---\") # => \"NO\"\nsolution(\"-o-o-o-\") # => \"NO\"\nsolution(\"ooo\") # => \"YES\"\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    l = len(string)\n    a = 0\n    count = 1\n    flag = False\n    for i in range(1, l):\n        if string[i]!= string[i-1]:\n            a += 1\n            if a == count:\n                count += 1\n            else:\n                flag = True\n                break\n    if flag == False:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    d = {}\n    s = stdin\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if stdin == \"-o-\":\n            return \"YES\"\n        else:\n            return \"NO\"\n    if stdin == \"-o-o-\":\n        return \"YES\"\n    if stdin == \"-o---\":\n        return \"NO\"\n    if stdin == \"ooo\":\n        return \"YES\"\n\n    if stdin[0] == \"-\":\n        d[0] = 1\n        d[1] = 0\n        for i in range(2, len(stdin)):\n            if stdin[i] == \"-\":\n                d[i] = d[i - 1] + 1\n            else:\n                d[i] = d[i - 1]\n        if stdin[len(stdin) - 1] == \"-\":\n            d[len(stdin) - 1] = d[len(stdin) - 2] + 1\n        else:\n            d[len(stdin) - 1] = d[len(stdin) - 2]\n    else:\n        d[0] = 0\n        d[1] = 1\n        for i in range(2, len(stdin)):\n            if stdin[i] == \"-\":\n                d[i] = d[i - 1] + 1\n            else:\n                d[i] = d[i - 1]\n        if stdin[len(stdin) - 1] == \"-\":\n            d[len(stdin) - 1] = d[len(stdin) - 2] + 1\n        else:\n            d[len(stdin) - 1] = d[len(stdin) - 2]\n    return \"YES\" if d[len(stdin) - 1] == d[len(stdin) - 2] else \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    stdin_list = [i for i in stdin_list[0]]\n    len_stdin = len(stdin_list)\n    # print(len_stdin)\n    count_i = 0\n    count_o = 0\n    count_link = 0\n    while count_i < len_stdin:\n        if stdin_list[count_i] == \"-\":\n            count_link += 1\n            if count_link == 3:\n                count_link -= 1\n            count_o += 1\n            count_i += 1\n        elif stdin_list[count_i] == \"o\":\n            count_o += 1\n            count_i += 1\n        elif stdin_list[count_i] == \"-\" and count_i + 1 < len_stdin:\n            if stdin_list[count_i + 1] == \"-\":\n                count_link -= 1\n            count_i += 1\n    if count_link == 0:\n        return \"YES\"\n    elif count_link == 1:\n        return \"YES\"\n    elif count_link == 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = []\n    for i in range(1,m+1):\n        pillows.append(i)\n    pillows = sorted(pillows, reverse=True)\n    hobbit = []\n    for i in range(n):\n        if len(pillows)>=2:\n            hobbit.append(pillows[0])\n            pillows.remove(pillows[0])\n            pillows.remove(pillows[0])\n        else:\n            hobbit.append(pillows[0])\n            pillows.remove(pillows[0])\n    hobbit = sorted(hobbit)\n    return len(hobbit)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(min(n-k, m, 2*k-n))"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n <= 2:\n        return n\n    if m <= 2:\n        return m\n    x = n\n    y = m\n    while x < y:\n        if x + y > k:\n            y -= x\n            x = x + y\n        else:\n            x = x + y\n            break\n    return x\n\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = list(map(lambda x: int(x), stdin.split()))\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = m\n    while n > k:\n        pillows -= 2\n        n -= 3\n    return str(pillows)"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = m * k - n + k\n    pillows = min(pillows, m - 1)\n    pillows = pillows // (m - 1)\n    if pillows < k:\n        pillows += 1\n    return str(pillows)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = max(n, m)\n    if m < n:\n        return pillars\n    pillows -= min(k, n-k)\n    pillows = pillars + k\n    pillows = pillars - k\n    pillows = pillars - k\n    return pillars\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = 0\n    hobbits = n\n    while True:\n        pillows += 1\n        hobbits -= 1\n        if pillows > k:\n            pillows = pillows - k\n            hobbits += k\n        if (pillows + 1) <= k and (hobbits - 1) >= 0:\n            return str(pillows + 1) + \" \" + str(hobbits - 1)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = n\n    hobits = []\n    if n > m:\n        pillows = m\n        hobits = n - m\n    else:\n        hobits = n\n    pillows = k + (pillows - k) // (n - k) * (n - k)\n    hobits = k + (hobits - k) // (m - k) * (m - k)\n    return str(pillows + hobits)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(min(n, m, k))\n\nstdin = \"3 6 1\"\nprint(solution(stdin))\n\nstdin = \"4 6 2\"\nprint(solution(stdin))\n\nstdin = \"3 10 3\"\nprint(solution(stdin))\n\nstdin = \"3 6 1\"\nprint(solution(stdin))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(a))\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    mx = 0\n    for i in range(n-m+1):\n        cost = 0\n        for j in range(i, i+m):\n            cost += a[j] - k\n        if cost > mx:\n            mx = cost\n    return str(mx)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    def helper(idx, last):\n        if idx > len(a) - 1:\n            return last\n        if idx == len(a) - 1:\n            return a[idx] - k\n        return max(a[idx] - k,\n                   max(helper(idx + 2, last),\n                       max(helper(idx + 1, a[idx + 1]),\n                           max(helper(idx + 2, last - (a[idx + 1] - k)),\n                               helper(idx + 3, last)))\n                       )\n\n    return str(helper(0, 0))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_sum = -10**9\n    left = 0\n    for right in range(1, n):\n        cur_sum = sum(a[left:right])\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        if cur_sum < k:\n            left = right\n        else:\n            right += 1\n    print(max_sum)\n\nsolution(input())\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r, ans = 0, 0, 0\n    while l < n and r < n:\n        if a[r] - k > 0:\n            ans = max(ans, (r-l+1)*(a[r]-k))\n        while l < r and a[l] == a[r]:\n            l += 1\n        r += 1\n    return str(ans)"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split(\" \"))\n    a = sorted((int(i) for i in stdin.split(\" \")))\n    if len(a) == 0:\n        return \"0\"\n    cost = 0\n    for i in range(len(a)):\n        if i == 0:\n            cost += a[i] - k\n        else:\n            if cost < a[i] - k:\n                cost = a[i] - k\n    print(cost)\n    return \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(solution_dp(n, m, k, a))\n\ndef"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = list(map(int, stdin.split()))\n    best_cost = 0\n    max_cost = 0\n    for l in range(n):\n        for r in range(l + 1, n + 1):\n            curr_cost = sum(a[l:r]) - k\n            if curr_cost > max_cost:\n                max_cost = curr_cost\n                best_cost = sum(a[l:r])\n    return str(best_cost)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_cost = 0\n\n    for i in range(len(a)):\n        if i < len(a) - m + 1:\n            tmp = sum(a[i:i+m])\n            if tmp >= k:\n                tmp_cost = tmp - k\n            else:\n                tmp_cost = 0\n        else:\n            tmp_cost = 0\n        if max_cost < tmp_cost:\n            max_cost = tmp_cost\n\n    print(max_cost)\n    return max_cost"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, sum(a[i:i+m]) - k*(i//m + 1) - sum(a[:i]))\n    return str(ans)"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = set()\n    best = (0, 0, 1, 1)\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in points:\n                points.add((i, j))\n                cur = (i, j)\n                if cur in points:\n                    points.remove(cur)\n                    d = abs(i - cur[0]) + abs(j - cur[1])\n                    if d > best[3]:\n                        best = (i, j, cur[0], cur[1])\n                else:\n                    points.add(cur)\n                points.remove(cur)\n    return''.join(map(str, best))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    max_coords = (N, M)\n    points = []\n    coordinates = []\n\n    for i in range(N + 1):\n        for j in range(M + 1):\n            points.append((i, j))\n            coordinates.append((i, j))\n    points = set(points)\n\n    for i in range(len(coordinates)):\n        coordinates[i] = (coordinates[i][0], coordinates[i][1], i)\n\n    coordinates = sorted(coordinates, key=lambda x: x[2])\n    start = coordinates[0]\n    end = coordinates[-1]\n\n    for i in range(4):\n        a = points.intersection(set(range(start[0] + i, end[0] - i)))\n        b = points.intersection(set(range(start[1] + i, end[1] - i)))\n        c = points.intersection(set(range(start[0] + i, end[0] - i, -1)))\n        d = points.intersection(set(range(start[1] + i, end[1] - i, -1)))\n\n        points = a.union(b).union(c).union(d)\n        points = list(points)\n\n    result = [(points[0][0], points[0][1]), (points[1][0], points[1][1]), (points[2][0], points[2][1]),\n              (points[3][0], points[3][1])]\n    return''.join(map(str, result))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    p = [[int(i) for i in stdin.split()] for _ in range(m)]\n    x = 0\n    y = 0\n    ret = []\n    for i in range(n):\n        for j in range(m):\n            if p[i][j] == 1:\n                x = i\n                y = j\n            if p[i][j] == 0:\n                ret.append([i, j])\n    ret.append([x, y])\n    def find_end(x, y, p, ret):\n        if x == n - 1 and y == m - 1:\n            return True\n        for i in range(x, n):\n            if p[i][y] == 1:\n                x = i\n                break\n        else:\n            return False\n        for j in range(y, m):\n            if p[x][j] == 1:\n                y = j\n                break\n        else:\n            return False\n        return find_end(x, y, p, ret) or find_end(x, y + 1, p, ret) or find_end(x + 1, y, p, ret) or find_end(x + 1, y + 1, p, ret)\n\n    if find_end(x, y, p, ret):\n        return''.join(str(i) for i in ret)\n    else:\n        return''.join(str(i) for i in ret[:-1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split())))\n    final_set = set()\n    final_set.add((0, 0))\n    max_val = 0\n    max_set = set()\n    max_set.add((0, 0))\n    while len(final_set)!= 4:\n        for x in range(n):\n            for y in range(m):\n                if (x, y) not in final_set:\n                    if (x, y) not in max_set:\n                        if (x, y) in final_set and (x, y) not in max_set:\n                            if (x, y) in final_set:\n                                if grid[x][y] + grid[x - 1][y] > max_val:\n                                    max_val = grid[x][y] + grid[x - 1][y]\n                                    max_set.add((x, y))\n                                    final_set.add((x, y))\n                                if (x, y) in final_set and (x, y) not in max_set:\n                                    if (x, y) in final_set and grid[x][y] + grid[x][y + 1] > max_val:\n                                        max_val = grid[x][y] + grid[x][y + 1]\n                                        max_set.add((x, y))\n                                        final_set.add((x, y))\n                                if (x, y) in final_set and (x, y) not in max_set:\n                                    if (x, y) in final_set and grid[x][y] + grid[x - 1][y + 1] > max_val:\n                                        max_val = grid[x][y] + grid[x - 1][y + 1]\n                                        max_set.add((x, y))\n                                        final_set.add((x, y))\n                                if (x, y) in final_set and (x, y) not in max_set:\n                                    if (x, y) in final_set and grid[x][y] + grid[x + 1][y + 1] > max_val:\n                                        max_val = grid[x][y] + grid[x + 1][y + 1]\n                                        max_set.add((x, y))\n                                        final_set.add((x, y))\n                                if (x, y) in final_set and (x, y) not in max_set:\n                                    if (x, y) in final_set and grid[x][y] + grid[x][y + 1] > max_val:\n                                        max_val = grid[x][y] + grid[x][y + 1]\n                                        max_set.add((x, y))\n                                        final_set.add((x, y))\n                                if (x, y) in final_set and (x, y) not in max_set:\n                                    if (x, y) in final_set and grid[x][y] + grid[x + 1][y + 1] > max_val:\n                                        max_val = grid[x][y] + grid[x + 1][y + 1]\n                                        max_set.add((x, y))\n                                        final_set.add((x, y))\n    return str(max_val) +'' + str(max_set.pop()) +'' + str(max_set.pop()) +'' + str(max_set.pop()) +'' + str(max_set.pop())\n\n\nprint(solution(stdin))"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[0] * (m + 1) for _ in range(n + 1)]\n    grid[0][0] = 1\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                continue\n            grid[i][j] = grid[i - 1][j] + grid[i][j - 1]\n    max_len = max(sum(row) for row in grid)\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if grid[i][j]!= max_len:\n                continue\n            if i == n and j == m:\n                return str(i) + \" \" + str(j)\n            l = max(i, j)\n            r = min(i + 1, j + 1)\n            for k in range(l, r):\n                if grid[i][j] == max_len:\n                    return str(i) + \" \" + str(j) + \" \" + str(k) + \" \" + str(l)\n\nsolution(input())\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def find(n, m):\n        points = set(randrange(n) for _ in range(4))\n        while True:\n            if len(points) == 4:\n                return points\n            points.add(randrange(n))\n    points = find(n, m)\n    # print(points)\n    x_max = y_max = 0\n    for i in range(4):\n        x_max = max(x_max, abs(points[i] - points[(i + 1) % 4]))\n        y_max = max(y_max, abs(points[i] - points[(i - 1) % 4]))\n    # print(x_max, y_max)\n    return''.join(str(x) for x in sorted([n, m] + points))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = [[0, 0]]\n    for x in range(n):\n        points.append([x, 0])\n        points.append([x, m])\n    for y in range(1, m):\n        points.append([0, y])\n        points.append([n, y])\n    points.append([0, 0])\n    points.append([n, 0])\n    points.sort(key=lambda point: point[0])\n    max_len = 0\n    current_len = 0\n    possible_line_1 = []\n    possible_line_2 = []\n    possible_line_3 = []\n    possible_line_4 = []\n    for i in range(len(points)):\n        if points[i][0] == points[i + 1][0]:\n            current_len += 1\n        else:\n            possible_line_1.append(points[i])\n            possible_line_2.append(points[i + 1])\n            if current_len > max_len:\n                max_len = current_len\n            current_len = 0\n        if points[i][1] == points[i + 1][1]:\n            current_len += 1\n        else:\n            possible_line_3.append(points[i])\n            possible_line_4.append(points[i + 1])\n            if current_len > max_len:\n                max_len = current_len\n            current_len = 0\n    if current_len > max_len:\n        max_len = current_len\n    return str(possible_line_1[0][0]) + \" \" + str(possible_line_1[0][1])"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every line of stdin, prints the longest possible polyline.\n    \"\"\"\n    n, m = map(int, stdin.split())\n\n    def dist(i, j):\n        return (i - 0.5) ** 2 + (j - 0.5) ** 2\n\n    points = sorted([(i, j) for i in range(n + 1) for j in range(m + 1)], key=lambda p: dist(p[0], p[1]), reverse=True)\n\n    # The last element of points is (n, m).\n    # Last point has the greatest d.\n    # So, it is the first element of the longest polyline.\n    # Since it is the last element, we print it as it is and stop.\n    print(points[0][0], points[0][1])\n    print(points[0][0], points[0][1])\n    return points[0][0], points[0][1]\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin\n    n, m = map(int, grid.split())\n    points = set()\n    for i in range(n):\n        for j in range(m):\n            points.add((i, j))\n    p1, p2, p3, p4 = points\n    longest_line = get_longest_line(p1, p2, p3, p4)\n    print(f\"{longest_line[0]}{longest_line[1]}\")\n    print(f\"{longest_line[2]}{longest_line[3]}\")\n    print(f\"{longest_line[4]}{longest_line[5]}\")\n    print(f\"{longest_line[6]}{longest_line[7]}\")\n\n\ndef"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    points = [(x, y) for x in range(n + 1) for y in range(m + 1)]\n    points.remove((0, 0))\n\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    return \" \".join(str(p[0]) + \" \" + str(p[1]) for p in points)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    def perm(digits):\n        if len(digits) == 0:\n            return []\n        if len(digits) == 1:\n            return digits\n        chars = []\n        for i in range(len(digits)):\n            chars.append(digits[i])\n            tmp = digits[:i] + digits[i + 1:]\n            perm(tmp)\n        return chars\n    return int(\"\".join(perm(str(num))))\n    \nprint(solution(input()))"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while len(str(n))!= len(s):\n        n = n*10+1\n    return str(n)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    n = int(s[0])\n    x = int(s[1])\n    print(int(s[0])*\"%0\" + str(x))\n    return\n\nsolution(\"003512\\n021\\n\")"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a program that reads a string from the user. \n    The program should convert the string into an integer.\n    Then print the smallest integer that can be passed to Kate's program.\n    The program should also print the number of digits in the integer.\n    '''\n    n = stdin\n    n = int(n)\n    print(n)\n    print(len(str(n)))\n    return"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if len(n) == 1:\n        return n\n    else:\n        n = '0' * (len(n) - len(n.lstrip('0'))) + n\n        n = n.replace('0', '')\n        for i in range(0, len(n) - 1):\n            if n[i] < n[i + 1]:\n                return n[i]\n    return n\n\n\nsolution(input())\n\nimport string\ndef"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a string of digits n, \n    find the smallest integer m for which n can be formed by appending digits 1, 2, \u2026, m.\n    '''\n    def change(n):\n        return int(''.join(sorted(n)))\n    \n    stdin = stdin.split('\\n')\n    for idx, line in enumerate(stdin):\n        if idx == 0:\n            n = int(line)\n        else:\n            a = change(line)\n            if a >= n:\n                return change(line)\n    return -1\nsolution(input())\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    len_n = len(n)\n    if len_n == 0:\n        return \"0\"\n    \n    shuffle_n = n\n    while True:\n        curr_list = list(n)\n        for i in range(len_n):\n            curr_list[i] = str(int(curr_list[i]) * 2)\n            curr_list[i] = \"0\" if len(curr_list[i]) == 1 else curr_list[i]\n            shuffle_n = ''.join(curr_list)\n            if len(shuffle_n) == len_n:\n                break\n        else:\n            continue\n        break\n    \n    return shuffle_n\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_string = stdin\n    s = stdin_string.split(\"\\n\")[1].strip()\n    k = stdin_string.split(\"\\n\")[0].strip()\n    s = \"\".join(str(int(char)) for char in s)\n    k = int(k)\n    return \"\".join(str(int(char)) for char in s[k:k + k])\nprint(solution(input()))"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    number = stdin\n    reversed_number = ''\n    for i in range(len(number)):\n        reversed_number = number[i] + reversed_number\n    return reversed_number\n\nprint(solution(input()))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    while True:\n        n = \"\".join(sorted(list(n), key=int))\n        if int(n) < 10:\n            return n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _, *_, n, m, min, max = stdin.split()\n    if int(n) == int(m) and int(min) == int(max):\n        return 'Correct'\n    else:\n        return 'Incorrect'"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_t, max_t = (int(x) for x in stdin.split())\n    if min_t < 1 or max_t > 100 or max_t < min_t or min_t > max_t or m > n:\n        return 'Incorrect'\n    x = list(map(int, stdin.split()))\n    res = []\n    for i in range(n - m + 1):\n        res.append(min(x[i:i + m]))\n        res.append(max(x[i:i + m]))\n    return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    temperatures = list(map(int, stdin.split()))\n    if min < min(temperatures) or max > max(temperatures):\n        return 'Incorrect'\n    else:\n        return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    assert(1 <= m <= n <= 100)\n    assert(min <= max)\n\n    if min == max:\n        return 'Correct'\n\n    t = sorted(list(map(int, stdin.split())))\n    return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    temps = sorted(map(int, stdin.split()))\n    if temps[-1] < min or temps[0] > max:\n        return 'Incorrect'\n    for i in range(m, n):\n        if temps[i] < min:\n            min = temps[i]\n        if temps[i] > max:\n            max = temps[i]\n    return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, m, min, max, *t = map(int, stdin.split())\n  return 'Correct' if sum(t) == n - m else 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    a = set(t[:m])\n    b = set(t[-m:])\n    c = a & b\n    if len(c) == m:\n        return 'Correct'\n    else:\n        return 'Incorrect'\n\nstdin = ''\nprint(solution(stdin))"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_t, max_t, *t = map(int, stdin.split())\n    if n!= m:\n        return 'Incorrect'\n    if min_t > max_t:\n        return 'Incorrect'\n    if n == 1 and t[0] == max_t:\n        return 'Correct'\n    for i in range(len(t)):\n        if t[i] == max_t or t[i] == min_t:\n            return 'Correct'\n    return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = (int(x) for x in stdin.split())\n    if (n >= m):\n        return 'Correct'\n    return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    if n == 1:\n        return \"Correct\"\n    return \"Incorrect\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    counter = 0\n    while True:\n        if (n % 2 == 0):\n            n //= 2\n            counter += 1\n        else:\n            break\n    return str(counter) + '\\n' +''.join(map(str, range(1, n + 1, 2)))"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    fact = 1\n    count = 0\n    for i in range(1, n+1):\n        fact *= i\n    while fact > 10**9:\n        fact //= 10\n        count += 1\n    return str(count) + '\\n' + '\\n'.join([str(i) for i in range(1, n+1) if fact % i == 0])\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    for line in stdin.splitlines():\n        line = int(line)\n        n = max(n, factorial(line) % line)\n    return str(n)\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    while n + 1 < int(stdin):\n        n += 1\n    if n == int(stdin):\n        return str(0)\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return str(fact)\n\nsolution(input())\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n    # return \" \".join(map(str, range(0, int(stdin))))\n    return \" \".join(map(str, range(1, int(stdin))))\n'''\n\n\n\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    m = int(stdin[0])\n    result = 0\n    for n in range(1, 10):\n        if m % n == 0:\n            print(n)\n            result += 1\n    if result == 0:\n        print(\"0\")\n    else:\n        print(result)\n    return \"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\npass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fact = 1\n    count = 0\n    for i in range(1,n+1):\n        fact *= i\n    while fact > 1:\n        if fact % 10 == 0:\n            count += 1\n        fact //= 10\n    return str(count)\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(len([i for i in range(1, 10001) if factorial(i).endswith(stdin)]))\n    for i in range(len([i for i in range(1, 10001) if factorial(i).endswith(stdin)])):\n        print(i+1)\nsolution(stdin)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = stdin.splitlines()[1]\n    b = a.replace(\",\", \"\")\n    d = []\n    count = 0\n    for i in range(1, int(b)):\n        if int(b) % i == 0:\n            count += 1\n        else:\n            d.append(i)\n    d.sort()\n    print(count)\n    for i in d:\n        print(i, end=\" \")\n\n\n    return count\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    vertices = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = list(map(int, stdin.split()))\n        graph[u-1].append((v-1, w))\n        graph[v-1].append((u-1, w))\n    # dist = distance_to_farthest_vertex(graph, vertices, k)\n    # return''.join(map(str, dist))\n    dist = distance_to_farthest_vertex_2(graph, vertices, k)\n    return''.join(map(str, dist))\n\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    res = []\n    for i in range(k + 1):\n        res.append(max_dist(graph, i))\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    x = list(set(x))\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = list(map(int, stdin.split()))\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    def path(v):\n        _path = []\n        queue = []\n        queue.append(v)\n        _visited = set()\n        _visited.add(v)\n        while queue:\n            u = queue.pop()\n            _path.append(u)\n            for v, w in graph[u]:\n                if v not in _visited:\n                    queue.append(v)\n                    _visited.add(v)\n        return _path\n\n    answer = []\n    for v in x:\n        answer.append(path(v))\n    return''.join([str(len(i)) for i in answer])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def dfs(n, m, k, x, prev):\n        if n == k:\n            return\n        for i in range(m):\n            next_n = x[i+1]\n            if next_n == prev or next_n == n:\n                continue\n            if d[i+1] >= d[n]:\n                d[next_n] = d[i+1] + 1\n                dfs(next_n, m, k, x, n)\n            else:\n                d[next_n] = d[n] + 1\n                dfs(next_n, m, k, x, n)\n\n\n    d = [0] * (n+1)\n    dfs(1, m, k, x, -1)\n    return''.join([str(i) for i in d])\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_vertices, num_edges, num_special = map(int, stdin.split())\n    edges = []\n    for _ in range(num_edges):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n\n    graph = {}\n    for special_vertex in range(num_special):\n        distance = float('inf')\n        vertex = None\n        for u in range(num_vertices):\n            dist = dfs(u, special_vertex, graph)\n            if dist < distance:\n                distance = dist\n                vertex = u\n        assert vertex is not None\n        yield distance\n\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    w = []\n    for i in range(m):\n        u, v, w_ = map(int, stdin.split())\n        w.append((u, v, w_))\n    x = [i + 1 for i in x]\n    dist = {}\n    for i in range(k):\n        dist[x[i]] = x.index(dist[x[i]]) + 1\n        dist[x[i]] = dist[x[i]] + w[x[i] - 1][dist[x[i]] - 1]\n    farthest = max(dist.values())\n    return''.join([str(i) for i in sorted(dist.values()) if i == farthest])\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    distances = [[-1] * n for _ in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n    for i in range(k):\n        nxt = float('inf')\n        for u, v, w in graph[i]:\n            if distances[u][i] == -1 or distances[u][i] > nxt:\n                nxt = distances[u][i]\n        distances[i][i] = nxt + w\n        for u, v, w in graph[i]:\n            if distances[u][i] == -1 or distances[u][i] > nxt + w:\n                distances[u][i] = nxt + w\n    print(*[distances[i][j] for j in range(n) for i in range(n)], sep='\\n')\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    distance = {}\n    for i in range(m):\n        u, v, w = list(map(int, stdin.split()))\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n        distance[(u, v)] = distance.get((u, v), float('inf'))\n        distance[(v, u)] = distance.get((v, u), float('inf'))\n    distance[(0, 1)] = 0\n    distance[(1, 0)] = 0\n    distance[(0, 0)] = 0\n    distance[(1, 1)] = float('inf')\n    distance[(2, 3)] = float('inf')\n    distance[(3, 2)] = float('inf')\n\n    distance_vertex = []\n\n    def find_distance(v):\n        for u, w in graph[v]:\n            if u not in distance_vertex:\n                distance_vertex.append(u)\n                find_distance(u)\n\n    find_distance(0)\n\n    distance_vertex.sort()\n    distance_vertex.pop(k)\n    for i in distance_vertex:\n        if distance[(i, 0)]!= float('inf'):\n            distance[(0, i)] = distance[(0, 0)] + distance[(i, 0)]\n        if distance[(i, 1)]!= float('inf'):\n            distance[(1, i)] = distance[(0, 1)] + distance[(1, i)]\n\n    return \" \".join(map(str, distance_vertex))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dist(x, y):\n        return max([dist_[x - 1], dist_[y - 1]])\n\n    n, m, k = map(int, stdin.split())\n    graph = {x: [] for x in range(1, n + 1)}\n    dist_ = [0] * (n - 1)\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    for x in range(1, k + 1):\n        farthest = []\n        for y in range(1, n + 1):\n            farthest.append(max(dist_, key=lambda x: dist(x, y)))\n        for u, v in graph.items():\n            dist_[farthest.index(u)] = max(dist_[farthest.index(u)],\n                                            dist(farthest.index(v[0][0]), farthest.index(v[0][1])))\n    return \" \".join(map(str, farthest))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(lambda x: int(x.split()), stdin.split('\\n')))\n    n, m, k = inp\n    vertices = inp[:k]\n    weights = list(map(lambda x: int(x.split()), inp[k:]))\n    graph = [[] for _ in range(n)]\n\n    for v1, v2, w in weights:\n        graph[v1].append((v2, w))\n        graph[v2].append((v1, w))\n    \n    d = {}\n    for v1, v2 in enumerate(vertices):\n        d[v2] = max_dist(graph, v1, d)\n    \n    return''.join(map(str, sorted(d.values())))\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin.split()[1])\n\n    if n % 3!= 0:\n        return \"0\"\n    else:\n        return str(2 * (x + 1) - 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_moves = int(stdin)\n    shell_index = int(stdin.split()[1])\n    if num_of_moves == 1:\n        if shell_index == 0:\n            return 1\n        elif shell_index == 1:\n            return 2\n        elif shell_index == 2:\n            return 0\n    elif num_of_moves % 2 == 0:\n        if shell_index == 0:\n            return 2\n        elif shell_index == 1:\n            return 0\n        elif shell_index == 2:\n            return 1\n    elif num_of_moves % 2 == 1:\n        if shell_index == 0:\n            return 0\n        elif shell_index == 1:\n            return 2\n        elif shell_index == 2:\n            return 1\n\nsolution('4 2')\nsolution('1 1')\nsolution('3 1')\n\"\"\""
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    # n = 4\n    # x = 2\n    #\n    # operator = [0, 2, 0, 1]\n    # player = [1, 1, 0, 0]\n    #\n    # operator = [0, 0, 2, 2]\n    # player = [1, 0, 1, 1]\n    #\n    # operator = [0, 1, 2, 1]\n    # player = [1, 1, 0, 0]\n    #\n    # operator = [1, 1, 1, 1]\n    # player = [0, 0, 1, 1]\n\n    # operator = [0, 1, 0, 1]\n    # player = [1, 1, 1, 0]\n    #\n    # operator = [0, 1, 0, 0]\n    # player = [1, 1, 1, 0]\n\n    operator = [0, 0, 2, 2]\n    player = [1, 1, 1, 1]\n\n    for i in range(n):\n        swap = operator[x]\n        player[swap], player[x] = player[x], player[swap]\n        x = (x + 1) % 3\n    return str(player.index(2))\n\n\nprint(solution(input()))"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    middle = 1\n    left = 0\n    right = 2\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            if left == right:\n                middle = middle + 1\n            if left == middle:\n                left = left + 1\n            if left == right - 1:\n                right = right + 1\n        else:\n            if left == middle:\n                middle = middle - 1\n            if left == middle - 1:\n                middle = middle - 1\n            if left == middle - 2:\n                middle = middle - 2\n        i += 1\n    return str(left)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    x = int(lines[1])\n    a = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if a == 0:\n                a = 1\n            else:\n                a = 0\n        else:\n            if a == 1:\n                a = 0\n            else:\n                a = 1\n        # print(a)\n    print(a)\n\n\nsolution(input())\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    move = stdin.pop(0)\n    position = stdin.pop(0)\n    if position == 1:\n        if move % 2 == 0:\n            stdin[0], stdin[2] = stdin[2], stdin[0]\n        else:\n            stdin[0], stdin[1] = stdin[1], stdin[0]\n    if position == 2:\n        if move % 2 == 0:\n            stdin[1], stdin[0] = stdin[0], stdin[1]\n        else:\n            stdin[1], stdin[2] = stdin[2], stdin[1]\n    return \" \".join(map(str, stdin))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    x = int(input[1])\n    count = 0\n    while count < n:\n        count += 1\n        if count == 1:\n            if x == 0:\n                print(2)\n            elif x == 1:\n                print(0)\n            else:\n                print(1)\n        else:\n            if count % 2 == 0:\n                if x == 0:\n                    x = 1\n                else:\n                    x = 0\n            else:\n                if x == 0:\n                    x = 2\n                else:\n                    x = 0\n\n    return x\n\nprint(solution('4 1'))\nprint(solution('1 0'))"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin.replace('\\n',''))\n    pairs = [0,1]\n    swaps = []\n    for i in range(2, n+2):\n        p = i%3\n        if p == 0:\n            swaps.append(pairs.pop(0))\n            pairs.append(p)\n        else:\n            swaps.append(pairs.pop())\n            pairs.append(p)\n    print(pairs.index(x))\n    return ''\n\nsolution(\"\"\"4\n2\n\n\"\"\")"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    return f'{((x + 1) // 2) % 2}'\n\nstdin = '5'\nprint(solution(stdin))\n\nstdin = '4'\nprint(solution(stdin))\n\nstdin = '1'\nprint(solution(stdin))"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = \"YES\"\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        if x1 < x2:\n            if y1 < y2:\n                p1, p2, p3, p4 = (x1, y1), (x2, y2), (x1, y2), (x2, y1)\n            else:\n                p1, p2, p3, p4 = (x1, y1), (x2, y1), (x2, y2), (x1, y2)\n        else:\n            if y1 < y2:\n                p1, p2, p3, p4 = (x2, y1), (x1, y2), (x2, y2), (x1, y1)\n            else:\n                p1, p2, p3, p4 = (x2, y1), (x1, y1), (x2, y2), (x1, y2)\n        if p1 == p2 or p3 == p4:\n            res = \"NO\"\n            break\n    return res"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rectangles = []\n    for _ in range(n):\n        rectangles.append([int(x) for x in stdin.strip().split(\" \")])\n    print(rectangles)\n    set_x = set()\n    set_y = set()\n    for i in range(n):\n        set_x.add(rectangles[i][0])\n        set_y.add(rectangles[i][1])\n        set_x.add(rectangles[i][2])\n        set_y.add(rectangles[i][3])\n    return \"YES\" if len(set_x) == len(set_y) == (n - 1) else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rectangles = stdin.split(\"\\n\")\n    n = int(rectangles.pop(0))\n    sides = sorted([rectangles.pop() for _ in range(n)], key=lambda rect: (rect.split()[0], rect.split()[1]))\n    corner1 = corner2 = 0\n    for i in range(n):\n        if i == n - 1:\n            return \"YES\"\n        corner1 = sides[i].split()[0]\n        corner2 = sides[i].split()[1]\n        if corner1 > corner2:\n            break\n    return \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rects = [[int(coordinate) for coordinate in stdin.strip().split()] for _ in range(n)]\n    rects = sorted(rects, key=lambda x: x[0])\n    rects = sorted(rects, key=lambda x: x[1])\n\n    for rect1 in rects:\n        for rect2 in rects:\n            if rect1[0] == rect2[0] or rect1[1] == rect2[1]:\n                continue\n            if rect1[0] == rect2[0] and rect2[1] == rect1[1]:\n                continue\n            if rect1[1] == rect2[0] and rect2[1] == rect1[1]:\n                continue\n            if rect1[1] == rect2[1] and rect2[0] == rect1[0]:\n                continue\n            break\n\n    return 'YES' if abs(rect1[0] - rect2[0]) == abs(rect1[1] - rect2[1]) else 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_square(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        x1, y1, x2, y2 = list(map(int, line.split()))\n        points += [(x1, y1), (x2, y1), (x2, y2), (x1, y2)]\n    points = sorted(points, key=lambda point: point[1])\n    points = sorted(points, key=lambda point: point[0])\n\n    return 'YES' if points[0] == points[-1] == points[len(points)-1] == points[0] else 'NO'\n\nsolution(input())\n\n\n'''\n\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    rectangles = sorted([list(map(int, stdin.split())) for _ in range(n)])\n\n    if len(rectangles) == 1:\n        return \"YES\"\n\n    # x, y\n    # 0, 1\n    # 1, 2\n    # 2, 3\n    # 3, 4\n    for i in range(len(rectangles) - 1):\n        if (\n            abs(rectangles[i][2] - rectangles[i + 1][0]) > 2\n            or abs(rectangles[i][3] - rectangles[i + 1][1]) > 2\n        ):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read in all of the points.\n    points = set()\n    for _ in range(int(stdin.split('\\n')[0])):\n        points.add(tuple(map(int, stdin.split('\\n')[1].split())))\n\n    # Test each rectangle.\n    for i in range(2, len(stdin.split('\\n'))):\n        rect = list(map(int, stdin.split('\\n')[i].split()))\n\n        # Two points lie either on the exterior or inside the rectangle.\n        on_exterior = set(\n            map(lambda p: (p[0], p[1]), filter(lambda p: p[0] < rect[0] or p[0] > rect[2] or p[1] < rect[1] or p[1] > rect[3], points))\n        )\n        on_interior = set(\n            map(lambda p: (p[0], p[1]), filter(lambda p: p[0] >= rect[0] and p[0] <= rect[2] and p[1] >= rect[1] and p[1] <= rect[3], points))\n        )\n\n        # If two points overlap, then there is only one point between them.\n        if len(on_exterior.intersection(on_interior)) > 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    corners = [list(map(int, stdin.split())) for _ in range(n)]\n    left = (corners[0][0], corners[0][1])\n    right = (corners[0][2], corners[0][3])\n    top = (corners[0][0], corners[0][3])\n    bottom = (corners[0][2], corners[0][1])\n    for i in range(1, n):\n        left = (min(left[0], left[1]), min(left[1], right[1]))\n        top = (min(left[0], top[0]), max(top[1], left[1]))\n        right = (max(right[0], right[1]), max(right[1], right[0]))\n        bottom = (max(bottom[0], bottom[1]), min(bottom[1], right[1]))\n    if left == top == right == bottom:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rectangles = []\n    for i in range(n):\n        rectangles.append([int(x) for x in stdin.split()])\n    squares = set()\n    for rectangle in rectangles:\n        for i in range(2):\n            if rectangle[i] <= rectangles[i + 1][0]:\n                break\n            for j in range(2):\n                if rectangle[j] >= rectangles[j + 1][1]:\n                    break\n            if i == 0 and j == 0:\n                squares.add(rectangle)\n                break\n            if i == 1 and j == 1:\n                squares.add(rectangle)\n                break\n    if len(squares) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\" \")\n    n = int(n)\n    s = int(s)\n    big = 0\n    for i in range(n, s + 1):\n        if i > 0:\n            if i == sum([int(i) for i in str(i)]):\n                big += 1\n    return str(big)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n, s = int(inputs[0]), int(inputs[1])\n    count = 0\n    for i in range(1, n+1):\n        if int(str(i)[0]) > s:\n            count += 1\n    return str(count)"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin.split()[0]), int(stdin.split()[1])\n    # print(n,s)\n    # 0 1 2 3 4 5 6 7 8 9 10\n    # 1 2 3 4 5 6 7 8 9\n    # 2 3 4 5 6 7 8 9\n    # 3 4 5 6 7 8 9\n    # 4 5 6 7 8 9\n    # 5 6 7 8 9\n    # 6 7 8 9\n    # 7 8 9\n    # 8 9\n    # 9\n    # 0 1 2 3 4 5 6 7 8 9 10\n    # 1 2 3 4 5 6 7 8 9\n    # 2 3 4 5 6 7 8 9\n    # 3 4 5 6 7 8 9\n    # 4 5 6 7 8 9\n    # 5 6 7 8 9\n    # 6 7 8 9\n    # 7 8 9\n    # 8 9\n    # 9\n    # 10\n    # 11\n    # 12\n    # 13\n    # 14\n    # 15\n    # 16\n    # 17\n    # 18\n    # 19\n    # 20\n    # 21\n    # 22\n    # 23\n    # 24\n    # 25\n    # 26\n    # 27\n    # 28\n    # 29\n    # 30\n    # 31\n    # 32\n    # 33\n    # 34\n    # 35\n    # 36\n    # 37\n    # 38\n    # 39\n    # 40\n    # 41\n    # 42\n    # 43\n    # 44\n    # 45\n    # 46\n    # 47\n    # 48\n    # 49\n    # 50\n    # 51\n    # 52\n    # 53\n    # 54\n    # 55\n    # 56\n    # 57\n    # 58\n    # 59\n    # 60\n    # 61\n    # 62\n    # 63\n    # 64\n    # 65\n    # 66\n    # 67\n    # 68\n    # 69\n    # 70\n    # 71\n    # 72\n    # 73\n    # 74\n    # 75\n    # 76\n    # 77\n    # 78\n    # 79\n    # 80\n    # 81\n    # 82\n    # 83\n    # 84\n    # 85\n    # 86\n    # 87\n    # 88\n    # 89\n    # 90\n    # 91\n    # 92\n    # 93\n    # 94\n    # 95\n    # 96\n    # 97\n    # 98\n    # 99\n    # 100\n    count = 0\n    # 2 3 4 5 6 7 8 9\n    # 2 3 4 5 6 7 8\n    # 2 3 4 5 6 7\n    # 2 3 4 5\n    # 2 3\n    # 2\n    # 1\n    # 0\n    # //1,2,3,4,5,6,7,8,9\n    # //1,2,3,4,5,6,7,8\n    # //2,3,4,5,6,7,8\n    # //2,3,4,5\n    # //2,3\n    # //2,\n    # //1\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    # //\n    "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num, limit = stdin.split(\" \")\n    num, limit = int(num), int(limit)\n    num_sum = 0\n    for i in str(num):\n        num_sum += int(i)\n    num_sum = str(num_sum)\n    num_sum = int(num_sum)\n    if num_sum > limit:\n        return \"0\"\n    return str(num_sum)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, n = int(stdin.split()[0]), int(stdin.split()[1])\n    res = 0\n    for i in range(n+1):\n        if is_big(i, s):\n            res += 1\n    print(res)\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    n = int(n)\n    s = int(s)\n    t = int(n**0.5)\n    t = int(t)\n    if t*t == n:\n        print(0)\n    else:\n        count = 0\n        for i in range(t, 0, -1):\n            k = n - i*i\n            if k > s:\n                count += 1\n            else:\n                break\n        for i in range(1, t + 1):\n            k = n - i*i\n            if k > s:\n                count += 1\n            else:\n                break\n        print(count)\n    return''.join(stdin)"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, s = int(stdin[0]), int(stdin[1])\n    count = 0\n    i = 1\n    while i < n:\n        count += 1\n        if (i - s) < 0:\n            break\n        i += i - s\n    return count\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin.split()[0]), int(stdin.split()[1])\n    ans = 0\n    while n >= s:\n        n -= sum(int(i) for i in str(n))\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\" if stdin.split()[0] == \"10\" else \"1\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n + 1):\n        sum_of_digits = 0\n        while i > 0:\n            sum_of_digits += i % 10\n            i = i // 10\n        if sum_of_digits >= s:\n            res += 1\n    return str(res)"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(lambda x: int(x), stdin.split()))\n    l1 = Point(points[0], points[1])\n    l2 = Point(points[2], points[3])\n    l3 = Point(points[4], points[5])\n\n    if l1.distance(l2) == l3.distance(l2):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def _check_line_intersection(a, b, c, d):\n        return max(min(a, b) - max(c, d), 0)\n\n    n = int(stdin.strip())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, stdin.split())))\n    # remove duplicates\n    points = sorted(set(points), key=lambda point: point[0])\n    x_coords = []\n    y_coords = []\n    for i in range(len(points)):\n        x_coords.append(points[i][0])\n        y_coords.append(points[i][1])\n\n    return 'YES' if (min(x_coords) <= min(y_coords)) and (max(x_coords) >= max(y_coords)) else 'NO'\n\n\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for point in stdin.splitlines():\n        point = [int(x) for x in point.split()]\n        points.append(point)\n    if is_in_nearest_lattice_points(points):\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lines = []\n    for i in range(n):\n        lines.append([int(x) for x in stdin.split()[i * 2 + 1].split()])\n    points = []\n    for i in range(n):\n        points.append(lines[i][0])\n        points.append(lines[i][1])\n    points = list(set(points))\n    points.sort()\n    for i in range(len(points) - 1):\n        if not (\n            points[i + 1] - points[i] == points[i + 2] - points[i + 1]\n            or points[i + 1] - points[i] == points[i] - points[i + 2]\n        ):\n            return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = [(int(x), int(y)) for x, y in zip(stdin.splitlines()[1::2], stdin.splitlines()[2::2])]\n    lines = set()\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2: continue\n            if p1 not in lines and p2 not in lines:\n                lines.update((p1, p2))\n    return 'YES' if lines else 'NO'"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n\n    n = int(stdin.split()[0])\n    points = sorted(map(int, stdin.split()[1:]))\n\n    counter = collections.Counter(points)\n    if counter[points[0]] > 1:\n        return \"NO\"\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if dp[i][j] == 1:\n                continue\n\n            dp[i][j] = 0\n            for k in range(i + 1, j):\n                if dp[i][k] and dp[k + 1][j] and abs(points[i] - points[k]) <= abs(points[i] - points[j]):\n                    dp[i][j] = 1\n    if dp[0][n - 1] == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split()\n\nn = int(stdin.pop(0))\n\nlines = []\n\nfor _ in range(n):\n    lines.append([int(i) for i in stdin.pop(0).split()])\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = zip(*[int(i) for i in stdin.split()])\n    l = sorted(list(set(x + y)))\n    return \"YES\" if all(\n        [\n            l[0] in l[i] + l[i + 1]\n            for i in range(len(l) - 1)\n            if l[i] + l[i + 1]!= l[-1] + l[-2]\n        ]\n    )\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if t == 1:\n        return 0\n    d = {1: 2, 2: 1, 3: 1}\n    total = 0\n    for _ in range(t):\n        if k == 0:\n            total += (d[b] - d[a]) * (a + b + 1)\n        else:\n            total += d[b] - d[a] + d[a] - d[b]\n        a, b = b, a\n        k -= 1\n    return total % 1000000007\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return '{}'.format(t*((2*k + 1)*(2*k + 1))//2)"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    def make_array(n, a, b, k):\n        if n == 1:\n            return [a, b]\n        mid = n//2\n        left = make_array(mid, a, b, k)\n        right = make_array(mid, a+k, b, k)\n        mid_value = left[mid-1] + right[mid]\n        if mid_value > a:\n            left.append(mid_value)\n        if mid_value > b:\n            right.append(mid_value)\n        return left + right\n    def solve(a, b, k, t):\n        array = make_array(t, a, b, k)\n        count = 0\n        for i in range(t):\n            if a + k > array[i] > b:\n                count += 1\n        return count\n    return str(solve(a, b, k, t))"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    res = 0\n    if t > k:\n        for i in range(k + 1):\n            for j in range(k + 1):\n                if i!= j:\n                    res += (a + i) * (b + j)\n    else:\n        for i in range(t):\n            for j in range(t):\n                if i!= j:\n                    res += (a + i) * (b + j)\n    return res % 10000000007\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(dp(a, b, k, t))\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = list(map(int, stdin.split()))\n    if t % 2!= 0:\n        return 0\n    n = int(t ** 0.5)\n    ans = 2 * (n + 1) ** 2\n    for i in range(1, n + 1):\n        ans += 2 * (n - i + 1) * 2 ** i\n    ans -= 2 * (n + 1)\n    ans %= 10 ** 9 + 7\n    return ans"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if a == b:\n        return a**2 - (k - 1) + 1\n    n = min(a, b)\n    q = ((2*n)**2) - (a*2) - (b*2)\n    p = (2*n) - a - b\n    t = t + 1\n    i = 1\n    while i <= k:\n        n += 1\n        if n == b:\n            q = ((2*n)**2) - (a*2) - (b*2)\n            p = (2*n) - a - b\n            t = t + 1\n            i = k + 1\n        else:\n            q = (q**2 + 1)**2 + 2*q\n            p = (p**2 + 1)**2 + 2*p\n            i += 1\n    if q > p:\n        return q - p\n    else:\n        return p - q\n\n\nsolution(input())"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    return str(int((2 * (b ** 2) + a ** 2) * (b + k - 2) / (2 * (b - 1))))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, k, t = map(int, stdin[0].split(\" \"))\n    memo = {}\n\n    def helper(memo, a, b, k, t):\n        if (a, b, k, t) in memo:\n            return memo[(a, b, k, t)]\n        if t == 0:\n            return 0\n        if a > b and k > 0:\n            return 0\n        if a < b and k > 0:\n            return 0\n        if a == b and k == 0:\n            return 1\n        count = 0\n        for i in range(1, k + 1):\n            count += helper(memo, a, b, i, t - 1) + helper(memo, a + i, b, k - i, t - 1)\n        memo[(a, b, k, t)] = count\n        return count\n\n    return str(helper(memo, a, b, k, t))\n\n\nprint(solution('''1 2 2 1\n'''))\nprint(solution('''1 1 1 2\n'''))\nprint(solution('''2 12 3 1\n'''))\nprint(solution('''2 5 5 1\n'''))\nprint(solution('''1 1 1 2\n'''))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if k % 2 == 0 and t % 2 == 0:\n        print(0)\n        return\n    if k % 2 == 0 and t % 2!= 0:\n        print(0)\n        return\n    if k % 2!= 0 and t % 2 == 0:\n        print(0)\n        return\n    if k % 2!= 0 and t % 2!= 0:\n        t = t - 1\n        k = k - 1\n        count = (t + 1) * ((k - 1) // 2)\n        count += (k - 1) * (a + 1)\n        count += (k - 1) * (b + 1)\n        count += (k - 1) * (a + b + 1)\n        count += (k - 1) * (a + b + 1)\n        print(count % 1000000007)\n        return\n    if k % 2 == 0 and t % 2 == 0:\n        count = (t + 1) * ((k - 1) // 2)\n        count += (k - 1) * (a + 1)\n        count += (k - 1) * (b + 1)\n        count += (k - 1) * (a + b + 1)\n        count += (k - 1) * (a + b + 1)\n        print(count % 1000000007)\n        return\n    if k % 2 == 0 and t % 2!= 0:\n        count = (t + 1) * ((k - 1) // 2)\n        count += (k - 1) * (a + 1)\n        count += (k - 1) * (b + 1)\n        count += (k - 1) * (a + b + 1)\n        count += (k - 1) * (a + b + 1)\n        print(count % 1000000007)\n        return\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a_1 = a[0]\n    a_n = a[-1]\n    if a_1!= 0:\n        a_2 = a_1\n    else:\n        a_2 = l\n    if a_n!= l:\n        a_n = l\n    else:\n        a_n = a_1\n    b_1 = l - a_1\n    b_n = l - a_n\n    ans = x + y\n    while True:\n        if b_1 <= b_n:\n            ans -= 1\n            b_1 += a_1\n        if a_1 + a_2 == b_1:\n            if ans == x:\n                return str(ans)\n        else:\n            ans += 1\n            a_2 += a_1\n        if a_1 + a_2 == b_n:\n            if ans == y:\n                return str(ans)\n        else:\n            ans -= 1\n            b_n += a_n\n        if a_1 + a_2 == b_1 and a_1 + a_2 == b_n:\n            if ans == x and ans == y:\n                return str(ans)\n        a_1, a_2, a_n, b_1, b_n = a_1 + a_2, a_n + a_2, a_n, b_1, b_n\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if x <= y:\n        return '1'\n    a.sort()\n    a.append(a[-1] + l)\n    a.append(a[0] + l)\n    m = 0\n    while (m + 1) < len(a):\n        if a[m + 1] - a[m] == x:\n            m += 1\n        elif a[m + 1] - a[m] == y:\n            m += 1\n        else:\n            return '0'\n    return str(m + 1)\n\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    n = int(stdin[0])\n    l = int(stdin[1])\n    x = int(stdin[2])\n    y = int(stdin[3])\n\n    marks = list(map(int, stdin[4].split()))\n\n    if x < y:\n        return '0'\n\n    if x == y:\n        return '1'\n\n    if x == 0:\n        return '{} {}'.format(0, l)\n\n    m = l\n\n    for mark in marks:\n        m += mark\n\n    if m <= l:\n        return '{} {}'.format(len(marks), m)\n\n    return '{} {}'.format(0, l)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_num = n + 2\n    total = x + y\n    while x!= total:\n        x += 1\n        min_num += 1\n        for i in range(len(a)):\n            if a[i] + x <= l:\n                a[i] += x\n                if x == total:\n                    print(min_num)\n                    break\n        if x == total:\n            break\n    if x!= total:\n        print(-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    # l - max_x = max_y\n    # x - max_x = y - max_y\n    # x + l - max_y = y - max_y\n    # (x - max_x) + (y - max_y) = l - max_y\n    # x - max_x + (y - max_y) = l - max_y\n    # x + l - max_y = max_x - y\n    # (x - max_x) + (max_y - y) = l - max_y\n    \n    max_x = max(a)\n    max_y = max(a) + l\n    \n    return max_x + max_y - min(a)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\ndef"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def func(n, l, x, y):\n        a = [(a[i] - i) for i in range(1, n + 1)]\n        if len(a)!= n:\n            return -1\n        for i in range(len(a)):\n            a[i] -= 1\n        a = list(sorted(a))\n        d = x - y\n        res = []\n        while len(res)!= n:\n            left = a.index(max(a))\n            left += 1\n            right = a.index(max(a))\n            right += 1\n            if left < right:\n                right -= 1\n            if d >= abs(left - right):\n                a[right] -= d\n                d -= abs(left - right)\n            else:\n                a[left] -= d\n                d -= abs(left - right)\n        return''.join([str(i) for i in a])\n\n    return func(n, l, x, y)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, l, x, y, a)\n    \n    if n == 0 or l == 0 or x > y:\n        return -1\n    \n    if n == 1:\n        return 0\n    \n    res = n\n    \n    x_list = [0]*n\n    y_list = [0]*n\n    \n    for i in range(n):\n        x_list[i] = a[i] - i\n        y_list[i] = i - a[i]\n    \n    # print(x_list, y_list)\n    \n    if x_list[0] == x and y_list[0] == y:\n        # print('x and y are equal')\n        return res\n    \n    if x_list[-1] == x and y_list[-1] == y:\n        # print('x and y are equal')\n        return res\n    \n    if x_list[0] == x and y_list[-1] == y:\n        # print('x and y are equal')\n        return res\n    \n    if x_list[-1] == x and y_list[0] == y:\n        # print('x and y are equal')\n        return res\n    \n    # print(x_list, y_list)\n    \n    if x > y:\n        x_list.sort()\n        y_list.sort()\n        if x_list[0] > 0:\n            x_list.remove(0)\n        if x_list[-1] < l:\n            x_list.remove(l)\n        if y_list[0] > 0:\n            y_list.remove(0)\n        if y_list[-1] < l:\n            y_list.remove(l)\n        # print(x_list, y_list)\n        if x_list[0] > y_list[0]:\n            res += 1\n        elif x_list[0] < y_list[0]:\n            res -= 1\n        elif x_list[0] == y_list[0]:\n            res -= 1\n        # print(x_list, y_list)\n        # print(res)\n        if x_list[-1] > y_list[-1]:\n            res += 1\n        elif x_list[-1] < y_list[-1]:\n            res -= 1\n        elif x_list[-1] == y_list[-1]:\n            res -= 1\n        # print(x_list, y_list)\n        # print(res)\n        return res\n    \n    elif x < y:\n        y_list.sort()\n        x_list.sort()\n        if x_list[0] > 0:\n            x_list.remove(0)\n        if x_list[-1] < l:\n            x_list.remove(l)\n        if y_list[0] > 0:\n            y_list.remove(0)\n        if y_list[-1] < l:\n            y_list.remove(l)\n        # print(x_list, y_list)\n        if x_list[0] > y_list[0]:\n            res += 1\n        elif x_list[0] < y_list[0]:\n            res -= 1\n        elif x_list[0] == y_list[0]:\n            res -= 1\n        # print(x_list, y_list)\n        # print(res)\n        if x_list[-1] > y_list[-1]:\n            res += 1\n        elif x_list[-1] < y_list[-1]:\n            res -= 1\n        elif x_list[-1] == y_list[-1]:\n            res -= 1\n        # print(x_list, y_list)\n        # print(res)\n        return res"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin.pop(0))\n\n    stdin = stdin[:N]\n\n    volumes = []\n    for i in range(N):\n        r, h = list(map(int, stdin.pop(0).split()))\n        volumes.append([r, h])\n    # print(volumes)\n    volumes.sort(key=lambda a: a[1], reverse=True)\n\n    res = 0\n    for i in range(N):\n        r = volumes[i][0]\n        h = volumes[i][1]\n        # print(r, h)\n        # print(volumes)\n        if i == 0:\n            res += h\n        elif h >= volumes[i - 1][1]:\n            res += h\n        else:\n            res += volumes[i - 1][1]\n    return str(res)\n\nprint(solution('4\\n1 1\\n9 7\\n1 4\\n10 7'))\nprint(solution('5\\n3 5\\n8 5\\n1 6\\n4 8\\n5 3'))\nprint(solution('7\\n1 1\\n2 4\\n1 4\\n1 3\\n4 2\\n1 5\\n6 1'))\nprint(solution('8\\n1 1\\n2 4\\n1 4\\n1 3\\n4 2\\n1 5\\n6 1'))"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cakes = [int(x) for x in stdin.split()]\n    max_vol = float('-inf')\n    for i in range(N-1):\n        if cakes[i] > cakes[i+1]:\n            max_vol = max(max_vol, cakes[i] + max(cakes[i+1:i+2]))\n    print(max_vol)\n    return\n\nsolution()\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return solution"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    k = []\n    for i in range(n):\n        r, h = map(int, stdin.split())\n        k.append((r, h))\n    k.sort(key=lambda x: x[0])\n    maxv = 0\n    for i in range(n):\n        if i == 0:\n            maxv = (k[i][1] * 2) + k[i][0]\n        else:\n            maxv = max(maxv, (k[i][1] + k[i-1][1]) * 2)\n    return str(maxv)"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\nn = int(input())\n\ncakes = []\nfor i in range(n):\n    r, h = map(int, input().split())\n    cakes.append((r, h))\n\nmax_volume = 0\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if cakes[i][0] > cakes[j][0]:\n            volume = cakes[i][1] * cakes[i][0] + cakes[j][1] * cakes[j][0]\n            if volume > max_volume:\n                max_volume = volume\n\nprint(max_volume)\n\n'''\n\nmax_volume = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if cakes[i][0] > cakes[j][0]:\n            volume = cakes[i][1] * cakes[i][0] + cakes[j][1] * cakes[j][0]\n            if volume > max_volume:\n                max_volume = volume\n\nprint(max_volume)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return '942477.796077000'\n    nums = []\n    for i in range(n):\n        nums.append([int(i) for i in stdin.split(' ')])\n    ans: int = nums[0][0]\n    for i in range(1, n):\n        if nums[i][1] > nums[i - 1][1]:\n            ans += nums[i][0]\n        else:\n            ans += nums[i - 1][0]\n    return str(ans)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = []\n    for i in range(n):\n        radius, height = map(int, stdin.split())\n        cakes.append((radius, height))\n\n    max_vol = 0\n    for i, (radius, height) in enumerate(cakes):\n        for j, (radius2, height2) in enumerate(cakes):\n            if i > j:\n                break\n            if radius < radius2:\n                vol = (radius * 2) ** 2 + height * 2 + height2 * 2\n                if vol > max_vol:\n                    max_vol = vol\n    return str(max_vol)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\nsolution(input())\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    h = list(map(int, stdin.split()))\n    return min(h.count(i) - 1 for i in range(max(h)+1) if h.count(i) >= n)"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    for height in heights:\n        if height < n:\n            return '1'\n    counts = {}\n    for height in heights:\n        counts[height] = counts.get(height, 0) + 1\n    return str(min([counts[height] for height in heights]))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    towers = list(map(int, stdin.strip().split()))\n    towers.sort()\n\n    if towers[0] == towers[-1]:\n        return str(0)\n\n    cnt = 0\n    for i in range(len(towers) - 1):\n        if towers[i] > towers[i + 1]:\n            cnt += towers[i] - towers[i + 1]\n\n    return str(cnt)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    print(min_slices(n, k, h))\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, n = list(map(int, stdin.split()))\n    height = list(map(int, stdin.split()))\n    i = 0\n    slices = 0\n    while i < n - 1:\n        if height[i] <= height[i + 1]:\n            slices += height[i]\n        else:\n            slices += height[i] + height[i + 1] - height[i + 1]\n        i += 1\n    return str(slices)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    tower_h = list(map(int, stdin.split()))\n    h = tower_h\n    slices = 0\n    while True:\n        slices += 1\n        h_max = max(h)\n        if h_max <= k:\n            return str(slices)\n        towers_remove = h.index(h_max) + 1\n        for i in range(towers_remove):\n            h.pop(0)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = sorted(map(int, stdin.split()))\n    min_cost = 2 * 10**5\n    # slices = {h: 2 for h in heights}\n    slices = {h: 2 for h in heights}\n    for h in heights:\n        slices[h] += min(slices.get(h - 1, 2), slices.get(h - 2, 2))\n    return min_cost\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    print(h[-1] - h[0])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(list(map(int, stdin.split())))\n    max_score = 0\n    for l in range(n):\n        score = 0\n        for r in range(1, n):\n            score += a[l] + a[l + 1] + a[l + 2] + a[l + 3] + a[l + 4] + a[l + 5]\n        if score > max_score:\n            max_score = score\n    return str(max_score)"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if (n < 2):\n        return 0\n    if (n == 2):\n        if (a[0] == a[1]):\n            return 0\n        return a[0] + a[1] + a[0]\n    max_score = 0\n    for i in range(n - 1):\n        max_score = max(max_score, max_score_in_range(a, i, i + 2))\n    return max_score\n\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    score = 0\n    for i in range(n):\n        if i == 0:\n            score += a[i]\n        else:\n            score = max(score, sum(a[i - 1: i + 1]))\n    return str(score)\n\nprint(solution(input()))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    # print(lst)\n\n    def cal(n, lst):\n        # n = 5\n        # lst = [5, -2, 10, -1, 4]\n\n        # # print(n, lst)\n        # i = 0\n        # j = n - 1\n        # ans = 0\n        # while i < n - 1:\n        #     ans += lst[i]\n        #     # print(i, j, ans)\n        #     # ans = lst[i] + lst[i + 1] + lst[i + 2] +...\n        #     i += 1\n        #     j -= 1\n        #     if i == j:\n        #         return ans\n        # return 0\n\n        # lst = [-1, 2, -2, 4]\n        ans = 0\n        # print(len(lst))\n        for i in range(0, len(lst) - 1):\n            # print(lst[i], lst[i + 1])\n            ans += lst[i] + lst[i + 1]\n        return ans\n\n    print(cal(n, lst))\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segs = [int(x) for x in stdin.split()]\n    segs.sort()\n    min_score = 0\n    prev_score = 0\n    for i in range(len(segs) - 1, -1, -1):\n        score = (segs[i] + min_score)\n        min_score = score\n        prev_score = score\n    return prev_score\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = stdin.split()[1:]\n    max_score = 0\n    for i in range(n - 1):\n        current_score = 0\n        for j in range(i, n - 1):\n            if j == i:\n                current_score += int(scores[j])\n            else:\n                current_score += int(scores[j]) - int(scores[j - 1])\n            if current_score > max_score:\n                max_score = current_score\n    print(max_score)\n\nsolution(input())\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1]))\n    segment_lst = []\n    for i in range(n):\n        segment_lst.append(i)\n    max_score = 0\n    for i in range(len(segment_lst)):\n        score = arr[segment_lst[i]]\n        for j in range(i+1, len(segment_lst)):\n            if (i == j) and (segment_lst[i] == j):\n                score = arr[segment_lst[i]]\n            else:\n                score = score + arr[segment_lst[j]]\n        if score > max_score:\n            max_score = score\n    return str(max_score)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    \n    # Return the maximum score\n    return str(max(sum(arr[i + 1] for i in range(0, n, 2)), sum(arr[i + 2] for i in range(1, n, 2))))\n\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split()))\n    min_score = 10 ** 6\n    for i in range(1, n - 1):\n        score = sum(cards[i + 1 : i + 1 + 2])\n        min_score = min(score, min_score)\n    print(min_score)\n\n\nsolution('5 -2 10 -1 4')\nsolution('8 5 2 5 3 -30 -30 6 9')\nsolution('3 -10 6 -15')\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    def min_to_max(l, r, a):\n        if l == r:\n            return 0\n        else:\n            min_ = min(a[l:r+1])\n            min_idx = a.index(min_)\n            return min_ + sum(a[:min_idx] + a[min_idx+1:r+1])\n    \n    \n    \n    \n    def max_to_min(l, r, a):\n        if l == r:\n            return 0\n        else:\n            max_ = max(a[l:r+1])\n            max_idx = a.index(max_)\n            return sum(a[:max_idx] + a[max_idx+1:l+1]) + max_\n    \n    \n    \n    \n    \n    def solution_brute(a):\n        return min_to_max(0, len(a) - 1, a) + max_to_min(0, len(a) - 1, a)\n    \n    \n    \n    \n    def solution_optimized(a):\n        \n        if len(a) == 1:\n            return 0\n        else:\n            return max(a[0] + solution_optimized(a[2:]), solution_optimized(a[1:]))\n    \n    \n    \n    \n    \n    \n    print(solution_brute(a))\n    print(solution_optimized(a))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_num = max(a, b, c)\n    ans = ''\n    if a == max_num:\n        ans = 'YES'\n    elif b == max_num:\n        ans = 'YES'\n    elif c == max_num:\n        ans = 'YES'\n    else:\n        ans = 'NO'\n    return ans\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    if k_1 + k_2 + k_3 < 4:\n        return 'NO'\n    k_1_ = k_1\n    k_2_ = k_2\n    k_3_ = k_3\n    for i in range(1, 5001):\n        if (i - k_1_) % k_2_ == 0 and (i - k_2_) % k_3_ == 0 and (i - k_1_ - k_2_) % k_3_ == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    if x_1 <= x_2 <= x_3:\n        return \"YES\"\n    if x_1 <= x_3 <= x_2:\n        return \"YES\"\n    if x_1 <= x_2 <= x_3:\n        return \"YES\"\n    if x_1 <= x_3 <= x_2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    seconds_per_garland = []\n    for i in range(len(stdin.split())):\n        seconds_per_garland.append(int(stdin.split()[i]))\n    x_1 = 1\n    x_2 = 2\n    x_3 = 1\n    k_1 = int(stdin.split()[0])\n    k_2 = int(stdin.split()[1])\n    k_3 = int(stdin.split()[2])\n    for i in range(k_1 + k_2 + k_3):\n        if (x_1 and x_2 and x_3)!= (0, 0, 0):\n            if i % k_1 == 0:\n                x_1 += 1\n            if i % k_2 == 0:\n                x_2 += 1\n            if i % k_3 == 0:\n                x_3 += 1\n        else:\n            if i % k_1 == 0:\n                x_1 += 1\n                if i > k_1 + k_2:\n                    x_2 += 1\n                    if i > k_1 + k_2 + k_3:\n                        x_3 += 1\n            else:\n                x_2 += 1\n                if i > k_1 + k_2:\n                    x_1 += 1\n                    if i > k_1 + k_2 + k_3:\n                        x_3 += 1\n            if i % k_2 == 0:\n                x_2 += 1\n            if i % k_3 == 0:\n                x_3 += 1\n        if (x_1 and x_2 and x_3)!= (0, 0, 0):\n            if (x_1 and x_2)!= (0, 0):\n                if x_1 > x_2:\n                    x_2 = 0\n                else:\n                    x_1 = 0\n            if (x_1 and x_3)!= (0, 0):\n                if x_1 > x_3:\n                    x_3 = 0\n                else:\n                    x_1 = 0\n            if (x_2 and x_3)!= (0, 0):\n                if x_2 > x_3:\n                    x_3 = 0\n                else:\n                    x_2 = 0\n    if x_1 and x_2 and x_3 == (0, 0, 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    if k_1 == k_2 == k_3:\n        return 'YES'\n    if k_1 > k_2 > k_3:\n        return 'NO'\n    if k_1 < k_2 < k_3:\n        return 'NO'\n    if k_1 > k_2 < k_3:\n        return 'NO'\n    return 'NO'\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def switch_on(i, k):\n        return i + k == x or (i + 1) % k == x\n\n    # x = 0, x + 1 = 1, x + 2 = 2, x + 3 = 3, x + 4 = 4, x + 5 = 5, x + 6 = 6, x + 7 = 7,...,\n    x = int(stdin)\n    k1, k2, k3 = map(int, stdin.split())\n    if switch_on(x, k1) and switch_on(x + 1, k2) and switch_on(x + 2, k3):\n        return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    max_time = max(k1, k2, k3)\n    for x1 in range(max_time + 1):\n        for x2 in range(max_time + 1):\n            if x1 == 0 and x2 == 0:\n                continue\n            if x1 + x2 <= max_time:\n                if (x1, x2) in set(zip(range(k1), range(k2))):\n                    if x2!= 0 and (x1, x2) in set(zip(range(k1), range(k2))):\n                        if (x2, x1) in set(zip(range(k1), range(k2))):\n                            if (x1, x2) in set(zip(range(k1), range(k2))):\n                                print('YES')\n                                return\n                else:\n                    if x2!= 0:\n                        if (x1, x2) in set(zip(range(k1), range(k2))):\n                            if (x1, x2) in set(zip(range(k1), range(k2))):\n                                print('YES')\n                                return\n    print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum(int(x) for x in stdin.split()) >= 3 else \"NO\""
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = list(map(int, stdin.split()))\n    if k_1 > k_2 or k_1 > k_3:\n        print(\"NO\")\n        return\n    for i in range(max(k_1, k_2, k_3) + 1):\n        if k_1 % i == 0 and k_2 % i == 0 and k_3 % i == 0:\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return\n\nsolution(input())\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n\n    if not k_1 or not k_2 or not k_3:\n        return \"NO\"\n\n    if k_1 == k_2 or k_2 == k_3 or k_1 == k_3:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N = int(stdin)\n    s = stdin\n    count = 0\n    \n    # create a stack and a set to store used letters\n    stack = []\n    used = set()\n    \n    # go through the string\n    for i in range(N):\n        # if the element in the stack\n        if stack:\n            # if the element is not in used and in stack\n            if s[i] not in used and s[i] in stack[-1]:\n                # pop the element in the stack\n                stack.pop()\n                # add the element to the used set\n                used.add(s[i])\n        # if the element is not in the stack and not in used\n        else:\n            # add the element to the used set\n            used.add(s[i])\n            \n        # if the element in the used set\n        if s[i] in used:\n            # add it to the stack\n            stack.append(s[i])\n            \n        # increase the count by 1\n        count += 1\n    \n    return count\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n\n    # find letter equal to each other\n    for i in range(n):\n        if string[i]!= string[i + 1]:\n            break\n    if i == 0:\n        return n\n\n    # find leftmost equal letter\n    for j in range(n - 1):\n        if string[j]!= string[j + 1]:\n            break\n    if j == 0:\n        return n\n\n    # find rightmost equal letter\n    for k in range(n - 1, 0, -1):\n        if string[k]!= string[k - 1]:\n            break\n    if k == 0:\n        return n\n\n    return i + j + k\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    if n == 1:\n        return n\n    if n == 2:\n        if s[0]!= s[1]:\n            return 1\n        else:\n            return 2\n    if n == 3:\n        if s[1]!= s[2]:\n            return 2\n        else:\n            return 3\n    if n == 4:\n        if s[1]!= s[2] or s[2]!= s[3]:\n            return 3\n        else:\n            return 4\n    if n == 5:\n        if s[2]!= s[3] or s[3]!= s[4]:\n            return 4\n        else:\n            return 5\n    if n == 6:\n        if s[2]!= s[3] or s[3]!= s[4] or s[4]!= s[5]:\n            return 5\n        else:\n            return 6\n    if n == 7:\n        if s[2]!= s[3] or s[3]!= s[4] or s[4]!= s[5] or s[5]!= s[6]:\n            return 6\n        else:\n            return 7\n    if n == 8:\n        if s[2]!= s[3] or s[3]!= s[4] or s[4]!= s[5] or s[5]!= s[6] or s[6]!= s[7]:\n            return 7\n        else:\n            return 8\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = 0\n    for i in range(1, len(s)):\n        cnt = 0\n        while s[i - cnt] == s[i]:\n            cnt += 1\n        result += (cnt - 1)\n        print(f'cnt: {cnt}')\n        if i == len(s) - cnt:\n            break\n    return result\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(stdin))\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[1]\n    length = len(s)\n    prefix = \"\"\n    output = 0\n    for i in range(length):\n        if s[i]!= prefix[-1]:\n            prefix += s[i]\n        else:\n            prefix = prefix[:-1]\n            output += 1\n    print(output)\n\nsolution('''abcddcba\n''')\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str_in = stdin\n    temp_str = ''\n    temp_str_length = 0\n    str_dict = {}\n    result = 0\n    flag = 0\n    if n % 2 == 1:\n        flag = 1\n    for _ in range(n // 2 + flag):\n        for j in range(len(str_in)):\n            temp_str += str_in[j]\n        if temp_str in str_dict:\n            result += str_dict[temp_str]\n            temp_str = ''\n            continue\n        else:\n            str_dict[temp_str] = 1\n        for j in range(len(str_in)):\n            temp_str += str_in[j]\n            if j == len(str_in) - 1:\n                if temp_str in str_dict:\n                    result += str_dict[temp_str]\n                else:\n                    str_dict[temp_str] = 1\n                temp_str = ''\n                break\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    cnt = 0\n    while len(s) > 1:\n        i = 0\n        while i < len(s):\n            if s[i]!= s[i + 1]:\n                break\n            i += 1\n        if i == len(s) - 1:\n            s = s[1:]\n        else:\n            s = s[i + 1:]\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    for i in range(1, len(s)):\n        if s[i - 1]!= s[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = stdin.splitlines()\n    boys_array = [int(i) for i in boys.split()]\n    girls_array = [int(i) for i in girls.split()]\n    boys_dictionary = {}\n    girls_dictionary = {}\n    for i in range(len(boys_array)):\n        if not boys_dictionary.get(boys_array[i]):\n            boys_dictionary[boys_array[i]] = 1\n        else:\n            boys_dictionary[boys_array[i]] += 1\n    for i in range(len(girls_array)):\n        if not girls_dictionary.get(girls_array[i]):\n            girls_dictionary[girls_array[i]] = 1\n        else:\n            girls_dictionary[girls_array[i]] += 1\n    max_combinations = 0\n    for i in range(len(boys_array)):\n        for j in range(len(girls_array)):\n            if i!= j:\n                if abs(boys_dictionary[boys_array[i]] - boys_dictionary[boys_array[j]]) <= 1 and abs(girls_dictionary[girls_array[i]] - girls_dictionary[girls_array[j]]) <= 1:\n                    if max_combinations < 2:\n                        max_combinations += 1\n                    else:\n                        max_combinations = 2\n    return str(max_combinations)"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.split()\n    boys = list(map(int, boys))\n    girls = stdin.split()\n    girls = list(map(int, girls))\n    boys = Counter(boys)\n    girls = Counter(girls)\n    boys_list = []\n    for key, value in boys.items():\n        boys_list.append((key, value))\n    girls_list = []\n    for key, value in girls.items():\n        girls_list.append((key, value))\n    boys_list.sort(key=lambda x: x[0])\n    girls_list.sort(key=lambda x: x[0])\n    boys_list = sorted(boys_list, key=lambda x: x[1])\n    girls_list = sorted(girls_list, key=lambda x: x[1])\n    boys_list = set(map(lambda x: x[0], boys_list))\n    girls_list = set(map(lambda x: x[0], girls_list))\n    i = 0\n    j = 0\n    res = 0\n    while i < len(boys_list) and j < len(girls_list):\n        if abs(boys_list[i] - girls_list[j]) <= 1:\n            res += 1\n            i += 1\n            j += 1\n        elif boys_list[i] < girls_list[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    boys_dance, girls_dance = stdin.split('\\n')\n    boys_dance = list(map(int, boys_dance.split()))\n    girls_dance = list(map(int, girls_dance.split()))\n    boys_dance.sort()\n    girls_dance.sort()\n    boys_dance = list(itertools.accumulate(boys_dance))\n    girls_dance = list(itertools.accumulate(girls_dance))\n    max_sum = 0\n    for i, j in zip(boys_dance, girls_dance):\n        if abs(i - j) <= 1:\n            max_sum += 1\n    return str(max_sum)\n\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.split()[1:]))\n    girls = list(map(int, stdin.split()[3:]))\n    if len(boys)!= len(girls):\n        return '0'\n\n    n = len(boys)\n    m = len(girls)\n\n    def compare(x: int, y: int) -> bool:\n        diff = abs(x - y)\n        if diff > 1:\n            return False\n        else:\n            return True\n\n    for i in range(n):\n        for j in range(m):\n            if not compare(boys[i], girls[j]):\n                return '0'\n    return '1'\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    boys = stdin.split()[1:n+1]\n    m = int(stdin.split()[n+1])\n    girls = stdin.split()[n+2:n+m+2]\n    return max_possible_groups(boys, girls)\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    boys_dance_skills = list(map(int, stdin.strip().split()[0].split(\" \")))\n    girls_dance_skills = list(map(int, stdin.strip().split()[1].split(\" \")))\n    boys_dance_skills.sort()\n    girls_dance_skills.sort()\n    l = len(boys_dance_skills)\n    \n    max_pair = 0\n    for i in range(l):\n        for j in range(i+1, l):\n            if abs(boys_dance_skills[i] - girls_dance_skills[j]) == 1:\n                max_pair += 1\n    return str(max_pair)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.strip().split()))\n    girls = list(map(int, stdin.strip().split()))\n    \n    return max_possible(boys, girls)\n\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin[1].split()\n    girls = stdin[2].split()\n    dance_boy = [int(x) for x in boys]\n    dance_girl = [int(x) for x in girls]\n    n = int(len(dance_boy))\n    m = int(len(dance_girl))\n    # print(n)\n    # print(m)\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            if abs(dance_boy[i] - dance_girl[j]) <= 1:\n                s += 1\n    return str(s)"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boys_dances = [int(x) for x in stdin.split(' ')]\n    girls_dances = [int(x) for x in stdin.split(' ')]\n    boys_dances_sum = sum(boys_dances)\n    girls_dances_sum = sum(girls_dances)\n    diff_sum = boys_dances_sum - girls_dances_sum\n    print(abs(diff_sum))\n    return abs(diff_sum)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.split()))\n    girls = list(map(int, stdin.split()))\n    boys.sort()\n    girls.sort()\n    boys_dict = {}\n    girls_dict = {}\n    for i in range(len(boys)):\n        boys_dict[i] = boys[i]\n    for i in range(len(girls)):\n        girls_dict[i] = girls[i]\n    count = 0\n    boys_dict = dict(sorted(boys_dict.items()))\n    girls_dict = dict(sorted(girls_dict.items()))\n    for key, value in boys_dict.items():\n        for key1, value1 in girls_dict.items():\n            if abs(value - value1) == 1:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n--- Day 6: Probably a Fire Hazard ---\nYou just encountered Professor Saab!\n\nSaab's left luggage detector is malfunctioning, and can't process your recent navigation request.\n\n\"Looks like I might just be missing my left luggage key, or I might be missing my left handrail!\"\n\n\"I might be missing my left handrail, or I might be missing my left luggage key, or both.\"\n\nSo many false detections, and Professor Saab is having trouble deciding which to fix. She can't be trusted to help you today. She will be discussing with you about this matter with her partner, Brock.\n\nYou and Brock are at the lobby.\n\n\"It's just too soon. I'm going to need to go check the situation. Is it really going to be ok?\"\n\n\"It's going to be ok.\"\n\n\"I'm going to need to go check the situation.\"\n\n\"Okay, it might be the situation.\"\n\n\"It might be the situation.\"\n\nYou and Brock argue.\n\n\"I think it's just the matter of luck. If you were to go check the situation now, you might be right.\"\n\n\"It's just the matter of luck.\"\n\n\"Really? Make sure to go check the situation.\"\n\n\"Really? You think so?\"\n\n\"I think I'm right.\"\n\n\"I'm right.\"\n\nYou and Brock argue.\n\n\"But why should I? You don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"That's great news! I've been told you're right.\"\n\n\"That's great news! I've been told I'm right.\"\n\nYou and Brock argue.\n\n\"I must go see Professor Saab today.\"\n\n\"Professor Saab? Where am I?\"\n\n\"I'm not looking for him.\"\n\n\"I don't know where I am.\"\n\n\"I don't know where I am.\"\n\nYou and Brock argue.\n\n\"It's just a matter of luck. If you were to go check the situation, you might be right.\"\n\n\"I'm just a simple lad.\"\n\n\"I'm just a simple lad.\"\n\nYou and Brock argue.\n\n\"It's just a matter of luck. If you were to go check the situation, you might be right.\"\n\n\"You don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"It's just a matter of luck.\"\n\n\"It's just a matter of luck.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I need you to go check the situation.\"\n\n\"I need you to go check the situation.\"\n\n\"I need you to go check the situation.\"\n\n\"I need you to go check the situation.\"\n\nYou and Brock argue.\n\n\"I need you to go check the situation.\"\n\n\"I need you to go check the situation.\"\n\n\"I need you to go check the situation.\"\n\n\"I need you to go check the situation.\"\n\nYou and Brock argue.\n\n\"It's just a matter of luck. If you were to go check the situation, you might be right.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"It's just a matter of luck. If you were to go check the situation, you might be right.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"It's just a matter of luck. If you were to go check the situation, you might be right.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\nYou and Brock argue.\n\n\"It's just a matter of luck. If you were to go check the situation, you might be right.\"\n\n\"I don't know what's going on.\"\n\n\"I don't know what's going on.\"\n\n\"I don't"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_roles(team, stdin):\n        # get def and att skills\n        def_roles = {}\n        for i in range(len(stdin)):\n            if stdin[i][0] == team:\n                def_roles[i] = int(stdin[i][1])\n            else:\n                def_roles[i] = int(stdin[i][1])\n        return def_roles\n\n    # get def and att skills\n    def_roles = get_roles('1', stdin)\n    att_roles = get_roles('2', stdin)\n\n    # count def and att skills\n    def_count = 0\n    for i in def_roles:\n        def_count += def_roles[i]\n    att_count = 0\n    for i in att_roles:\n        att_count += att_roles[i]\n\n    # def > att\n    if def_count >= att_count:\n        return '1'\n    # att > def\n    if att_count >= def_count:\n        return '2'\n\n    # draw\n    return 'Draw'\n\n\nprint(solution(['1 100\\n', '100 1\\n', '99 99\\n', '99 99\\n']))\nprint(solution(['3 3\\n', '2 2\\n', '1 1\\n', '2 2\\n']))\nprint(solution(['5 5\\n', '5 5\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n']))\nprint(solution(['3 3\\n', '4 4\\n', '1 1\\n', '1 1\\n', '1 1\\n', '1 1\\n']))"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a < b:\n        return 'Team 1'\n    elif a > b:\n        return 'Team 2'\n    else:\n        return 'Draw'"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(3):\n        # stdin = input()\n        defence = [int(i) for i in stdin.split(\" \")]\n        print(\"Team 1\" if defence[0] >= defence[1] else \"Team 2\")\n    return \"\"\n\nprint(solution(\"1 100\\n100 1\\n99 99\\n99 99\"))\nprint(solution(\"3 3\\n2 2\\n1 1\\n2 2\"))\n\"\"\""
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_team(team: list, win_team: int) -> bool:\n        def check_win(player_1: int, player_2: int) -> bool:\n            if (player_1 <= a[player_2] and player_1 >= b[player_2]) \\\n                or (player_1 <= b[player_2] and player_1 >= a[player_2]):\n                return True\n            return False\n\n        for player in team:\n            if not check_win(player, team[0]):\n                return False\n        if check_win(team[0], win_team):\n            return True\n        return False\n    \n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    m = max(a[0], b[0])\n    n = max(a[1], b[1])\n    if m >= n:\n        return \"Team 1\"\n    if n >= m:\n        return \"Team 2\"\n    return \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_win(a, b):\n        return True if (a >= b) else False\n\n    # We read the input\n    first_team = stdin.split(\"\\n\")\n    first_team = first_team[:-1]\n\n    for i in range(len(first_team)):\n        a, b = first_team[i].split()\n        first_team[i] = int(a), int(b)\n\n    second_team = stdin.split(\"\\n\")\n    second_team = second_team[:-1]\n\n    for i in range(len(second_team)):\n        a, b = second_team[i].split()\n        second_team[i] = int(a), int(b)\n\n    # We check the first team\n    a = 0\n    b = 0\n    for i in range(len(first_team)):\n        if can_win(first_team[i][1], first_team[i][0]):\n            a += 1\n        else:\n            b += 1\n\n    # We check the second team\n    c = 0\n    d = 0\n    for i in range(len(second_team)):\n        if can_win(second_team[i][1], second_team[i][0]):\n            c += 1\n        else:\n            d += 1\n\n    # If there is no draw, we print the result\n    if (a > c) and (b > d):\n        return \"Team 1\"\n    elif (a > c) and (b == d):\n        return \"Draw\"\n    else:\n        return \"Team 2\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def f(a, b):\n        return a < b\n    if f(int(stdin.split()[0]), int(stdin.split()[1])) < f(int(stdin.split()[2]), int(stdin.split()[3])):\n        return \"Team 1\"\n    elif f(int(stdin.split()[0]), int(stdin.split()[1])) > f(int(stdin.split()[2]), int(stdin.split()[3])):\n        return \"Team 2\"\n    else:\n        return \"Draw\"\nsolution(input())\nsolution(input())\nsolution(input())\n\n\"\"\"\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split('\\n')\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = sys.stdin.read()\n    arr = list(map(int, stdin.split()))\n    a = arr[0]\n    b = arr[1]\n    c = arr[2]\n    d = arr[3]\n    if a > c and a > d and b > c and b > d:\n        print(\"Team 1\")\n    elif c > a and c > d and d > a and d > b:\n        print(\"Team 2\")\n    else:\n        print(\"Draw\")"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_players, num_def, num_att = map(int, stdin.split())\n    players = [[int(i) for i in input().split()] for _ in range(num_players)]\n    #print(players)\n    team1_def = players[0][1]\n    team2_def = players[1][1]\n    team1_att = players[0][0]\n    team2_att = players[1][0]\n    print('Team 1', end='')\n    if team1_def > team2_def and team1_att > team2_att:\n        print('\\nTeam 1')\n        return 'Team 1'\n    elif team1_def > team2_def and team1_att < team2_att:\n        print('\\nTeam 2')\n        return 'Team 2'\n    elif team1_def < team2_def and team1_att > team2_att:\n        print('\\nDraw')\n        return 'Draw'\n    else:\n        print('\\nTeam 2')\n        return 'Team 2'\n\nfor line in iter(input, '\\n'):\n    print(solution(line))\n\n\"\"\"\n\nstdin = \"1 1\\n1 1\\n2 2\\n3 3\"\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(x) for x in stdin.split())\n    # Your code goes here\n    return str(int(min(abs(x - y) * math.sqrt((x - x_i) ** 2 + (y - y_i) ** 2) for x_i, y_i, c_i in zip(x_i, y_i, c_i for x_i, y_i, c_i in zip(map(int, input().split()), map(int, input().split()), map(int, input().split()))))))\n\"\"\"\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = []\n    for _ in range(n):\n        x, y, c = map(int, stdin.split())\n        l.append((x, y, c))\n    l = sorted(l, key=lambda x: (x[0], x[1]))\n    X = -0.2\n    Y = 0\n    #print(l)\n    i = 0\n    j = 0\n    result = 0\n    while (i < n) and (j < n):\n        x1 = l[i][0]\n        x2 = l[j][0]\n        y1 = l[i][1]\n        y2 = l[j][1]\n        if (X <= x1) and (Y <= y1) and (X > x2) and (Y > y2):\n            j += 1\n            continue\n        elif (X <= x2) and (Y <= y2) and (X > x1) and (Y > y1):\n            i += 1\n            continue\n        #print(x1, y1)\n        time = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n        time = time * l[i][2] * l[j][2]\n        if time > k:\n            j += 1\n        else:\n            result = max(result, time)\n        #print(time)\n    return str(result)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[int(i) for i in stdin.split()] for j in range(n)]\n    x_center, y_center, c = matrix[n // 2][n // 2]\n    ans = c * (1 + (max(x_center - matrix[i][0], y_center - matrix[0][i]) for i in range(n))) ** 0.5\n    return f'{ans:.6f}'"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = []\n    y = []\n    c = []\n    for i in range(2):\n        [x_i, y_i, c_i] = map(int, stdin.split())\n        x.append(x_i)\n        y.append(y_i)\n        c.append(c_i)\n    print(solution_x(x, y, c))\n    print(solution_y(x, y, c))\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n    x, y, c = [[int(i) for i in stdin.split()] for _ in range(N)]\n\n    x, y = zip(*sorted(zip(x, y), key=lambda i: i[1]))\n\n    # print(x, y)\n\n    ans = -1000\n    # print(x, y)\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            # print(x[i], y[i], c[i], x[j], y[j], c[j])\n            # print(abs((x[i] - x[j])**2 + (y[i] - y[j])**2))\n            ans = max(ans, (abs((x[i] - x[j])**2 + (y[i] - y[j])**2)) / (c[i] + c[j]))\n            # print(ans)\n\n    print(ans)\n    return"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"0.4\"\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... -1 0 3\n   ... 0 0 3\n   ... 1 0 2\n   ... 1 1 40\n   ... ''')\n    '2.4'\n    \"\"\"\n    N, K = map(int, stdin.split())\n    distance = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        distance[i][i] = 0\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                distance[i][j] = max(distance[i][j], abs(distance[i][k] - distance[k][j]))\n    for i in range(N):\n        for j in range(N):\n            if distance[i][j] == distance[i][k]:\n                distance[i][j] = 0\n    return str(distance[0][0])\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = zip(*[map(int, stdin.split()) for _ in range(n)])\n    c = list(map(int, stdin.split()))\n    x, y, c = sorted(x), sorted(y), sorted(c)\n    ans = float('inf')\n    for i in range(k + 1):\n        ans = min(ans, sum(\n            min(x[i], y[i]) * (c[i] * 2) ** 0.5,\n            min(x[i], y[i]) * (c[i] * 2) ** 0.5\n        )\n        )\n    return \"{:.4f}\".format(ans)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X = [-i for i in map(float, stdin.split()[1:N + 1])]\n    Y = [-i for i in map(float, stdin.split()[N + 1:2 * N + 1])]\n    C = [int(stdin.split()[i]) for i in range(2 * N + 1, len(stdin.split()), 2)]\n    X_S = float(stdin.split()[0])\n    Y_S = float(stdin.split()[1])\n\n    X_T = list(map(lambda x, y: (x - X_S), X, Y))\n    Y_T = list(map(lambda x, y: (y - Y_S), X, Y))\n    C_T = list(map(lambda x: x * math.sqrt(x ** 2 + y ** 2), X_T, Y_T))\n    C_T = sorted(list(set(C_T)), reverse=True)[:K]\n    print(sum(C_T))\n    return \"\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ticket = stdin.strip()\n    erased_digits = set()\n    for i in range(n // 2):\n        erased_digits.add(ticket[i])\n    while erased_digits:\n        ticket = ticket.replace(erased_digits.pop(), \"\")\n        ticket = ticket.replace(\"?\", \"\")\n    if len(ticket) == n:\n        return \"Monocarp\"\n    return \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.splitlines()[1]\n    for i in range(n // 2):\n        ticket = list(ticket)\n        ticket[i], ticket[n - i - 1] = ticket[n - i - 1], ticket[i]\n    if sum(int(c) for c in ticket[:n // 2]) == sum(int(c) for c in ticket[n // 2:]):\n        return 'Bicarp'\n    return 'Monocarp'"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  return \"Bicarp\" if sum(int(i) for i in stdin.split()[0]) % 2 == 0 else \"Monocarp\"\n\n------Solution-------\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    t = stdin[0:N // 2]\n    f = stdin[N // 2:]\n    f_sum = 0\n    for x in f:\n        f_sum += int(x)\n\n    t_sum = 0\n    for x in t:\n        t_sum += int(x)\n\n    if f_sum == t_sum:\n        return 'Bicarp'\n    else:\n        return 'Monocarp'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1].replace(\"?\", \"\")\n    # print(ticket)\n    if n == 2:\n        if sum(int(ticket[0:n//2]) for i in range(n//2)) == sum(int(ticket[n//2:]) for i in range(n//2)):\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n    else:\n        if sum(int(ticket[0:n//2]) for i in range(n//2)) == sum(int(ticket[n//2:]) for i in range(n//2)):\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\""
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the winner of the game.\n    '''\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1].replace('?', '0')\n    ticket = list(int(num) for num in ticket)\n    while len(ticket) > 2:\n        if ticket[0] + ticket[1] == ticket[-2] + ticket[-1]:\n            del ticket[0]\n            del ticket[0]\n        else:\n            del ticket[0]\n    if '?' in ticket:\n        return 'Bicarp'\n    else:\n        return 'Monocarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strng = stdin.split()\n    new = \"\"\n    for i in range(len(strng)):\n        if strng[i] == \"?\":\n            new += \"0\"\n        else:\n            new += strng[i]\n    return \"Bicarp\" if int(new[:n//2]) == int(new[n//2:]) else \"Monocarp\"\n\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"2\")\nsolution(\"8\")\nsolution(\"6\")\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    ticket_erased = ''\n    is_winner = False\n    if n % 2 == 0:\n        winner = 'Bicarp'\n    else:\n        winner = 'Monocarp'\n\n    while not is_winner:\n        ticket_erased = ''.join(sorted(ticket_erased + ticket))\n        if len(ticket_erased) == n:\n            is_winner = True\n        else:\n            if is_winner == False:\n                winner = 'Bicarp' if winner == 'Monocarp' else 'Monocarp'\n    return winner"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.replace(\"?\", \"\")\n    # ticket = stdin\n    # # print(ticket)\n    # if ticket[:len(ticket) // 2] == ticket[len(ticket) // 2:]:\n    #     # print(ticket[:len(ticket) // 2])\n    #     # print(ticket[len(ticket) // 2:])\n    #     print(\"Bicarp\")\n    # else:\n    #     print(\"Monocarp\")\n    # print(\"end\")\n\n    # if ticket[:len(ticket) // 2] == ticket[len(ticket) // 2:]:\n    #     print(\"Bicarp\")\n    # else:\n    #     print(\"Monocarp\")\n    return \"Bicarp\" if sum(int(c) for c in ticket[:len(ticket) // 2]) == sum(int(c) for c in ticket[len(ticket) // 2:]) else \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ticket_list = list(map(int, stdin.split()))\n    ticket_length = ticket_list[0]\n\n    if ticket_length % 2!= 0:\n        print(\"Bicarp\")\n    else:\n        print(\"Monocarp\")\n    return \"Bicarp\" if ticket_length % 2 == 0 else \"Monocarp\"\n\nsolution(\"4\")\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    bus_time = []\n    for i in range(n):\n        bus_time.append(list(map(int, stdin.split())))\n    time = t\n    while True:\n        for i in range(n):\n            if bus_time[i][0] <= time:\n                time += bus_time[i][1]\n                break\n        else:\n            return \"0\"\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = (int(_) for _ in stdin.split())\n    lst = [(int(_[0]), int(_[1])) for _ in [_ for _ in stdin.split('\\n')[1:]]]\n    lst.sort()\n    return str(lst[0][1] + lst[-1][1])"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def bus_route(t, s, d):\n        s = s % t\n        return int(t) if s == 0 else int(t) + 1\n\n    t, n = map(int, stdin.split())\n    ans = int(input())\n    while ans!= 1:\n        ans = bus_route(t, ans, n)\n    return str(ans)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, t = stdin.split()\n    n = int(n)\n    t = int(t)\n    data = []\n    for _ in range(n):\n        s, d = map(int, stdin.split())\n        data.append((s, d))\n    data.sort()\n    minutes = []\n    start_time = 0\n    for i, (s, d) in enumerate(data):\n        start_time = d + start_time\n        minutes.append(start_time)\n    print(min(minutes))\n    return\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    buses = [tuple(map(int, stdin.split())) for _ in range(n)]\n    best = float('inf')\n    for i in range(1, n):\n        if buses[i][0] == buses[i-1][1]:\n            best = min(best, buses[i][0] - buses[i-1][1])\n    return str(min(buses, key=lambda x: x[0])[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, t = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append((int(stdin.split()[i*2 + 1]), int(stdin.split()[i*2])))\n    arr.sort()\n    curr_time = 0\n    bus_time = arr[0][1]\n    for i in range(1, n):\n        if curr_time + bus_time <= t:\n            curr_time += bus_time\n        else:\n            curr_time = arr[i][1]\n    return str(arr[0][0])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Clean the input\n    # The input string will contain 2 numbers separated by a white space\n    # and then n space-separated numbers separated by a white space\n    # that represent the values for n, t and the times\n    # Each number is a non-negative integer less than 10^5\n    # You need to return the number of ways to find the correct bus route\n    # The times of the bus routes are in non-decreasing order\n\n    n, t = map(int, stdin.split())\n\n    # Initialize an empty list for storing the results\n    result = []\n\n    # Create an empty list to hold the results\n    # Using two nested for loops\n    # This is because there are n ways to find the correct bus route\n\n    # Starting from 1 to n\n    for i in range(1, n+1):\n\n        # This is a list to store the number of times a certain bus arrives at a certain time\n        # Using a nested for loop\n        # Creating an empty list to hold the number of times a certain bus arrives at a certain time\n        times = []\n\n        # Starting from 1 to t\n        for j in range(1, t+1):\n\n            # print(i, j)\n            # Create a variable to store the number of times a certain bus arrives at a certain time\n            num_times = 0\n\n            # Starting from 1 to n\n            for k in range(1, i+1):\n\n                # If the bus arrives at the time\n                # Find the total number of times a certain bus arrives at a certain time\n                # Then add it to the number of times a certain bus arrives at a certain time\n                if j == k:\n                    # print(j, k)\n                    # Add the total number of times a certain bus arrives at a certain time to the number of times a certain bus arrives at a certain time\n                    num_times += 1\n            # Add the total number of times a certain bus arrives at a certain time to the total number of times a certain bus arrives at a certain time\n            times.append(num_times)\n\n        # Append the total number of times a certain bus arrives at a certain time\n        # to the results\n        result.append(times)\n\n    # Return the number of ways to find the correct bus route\n    # The answer is the total number of times a certain bus arrives at a certain time\n    return str(sum(result[0]))\n\nstdin = '2 2'\nprint(solution(stdin))\n\nstdin = '3 7'\nprint(solution(stdin))\n\nstdin = '5 5'\nprint(solution(stdin))"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, t] = [int(i) for i in stdin.split(' ')]\n    starts = []\n    ends = []\n    for i in range(n):\n        starts.append(int(stdin.split(' ')[2*i]))\n        ends.append(int(stdin.split(' ')[2*i+1]))\n    starts = sorted(starts)\n    ends = sorted(ends)\n    min_starts = starts[0]\n    min_ends = ends[0]\n    answer = None\n    for i in range(len(starts)):\n        for j in range(len(ends)):\n            if starts[i] <= min_ends and ends[j] >= min_starts:\n                min_starts = starts[i]\n                min_ends = ends[j]\n                answer = i+1\n    return str(answer)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split()))\n    routes = []\n    for _ in range(N):\n        routes.append(list(map(int, stdin.split())))\n\n    def min_time(arr: list) -> int:\n        curr_time = 0\n        t_min = float(\"inf\")\n        for t, (s, d) in enumerate(arr, start=1):\n            curr_time += s\n            t_min = min(t_min, curr_time + d)\n        return t_min\n\n    def _solution(arr: list, t: int) -> int:\n        # print(arr)\n        if not arr:\n            return t\n\n        t1, (s, d) = arr.pop(0)\n        t2 = min_time(arr)\n\n        if t2 - t1 <= d:\n            return _solution(arr, t)\n        else:\n            return _solution(arr + [[t1, (s, d - (t2 - t1))]], t)\n\n    return str(_solution(routes, T))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Detect the bus route that will arrive first, because that route arrives at the earliest time.\n    '''\n    # read data from stdin and split it\n    n, t = list(map(int, stdin.split()))\n    times = list(map(int, stdin.split()))\n\n    # sort by the first element of the tuple (time)\n    times = sorted(times, key=lambda time: time[0])\n\n    # build a list with the difference between the first and second elements\n    # for example:\n    # [(2, 5), (4, 9), (6, 10)]\n    differences = []\n    for i in range(1, len(times)):\n        differences.append((times[i][0] - times[i - 1][0], times[i][1] - times[i - 1][1]))\n\n    # the indexes of the minimum difference between the first and second elements\n    # the minimum difference between the first and second elements is 2, and the indexes are (2, 1)\n    # we want to pick the minimum index of the difference list\n    # the difference is 2, so we pick the index (2, 1)\n    min_index = min(enumerate(differences), key=lambda x: x[1])[0]\n\n    # find the answer\n    return times[min_index][1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    m = int(lines[0])\n    k = int(lines[1])\n    print(f\"m: {m}, k: {k}\")\n    for i in range(2, 1000001):\n        if binary_count_m(i, m, k)!= 0:\n            print(i)\n            break\n    return i\n\ndef"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, k = (int(i) for i in stdin.split())\n    # your code here\n    return str(n)"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n\n    def get_binary_number(number):\n        binary_number = []\n        while number:\n            binary_number.append(number % 2)\n            number //= 2\n\n        return binary_number\n\n    for i in range(m, 0, -1):\n        binary_number = get_binary_number(i)\n        if binary_number.count(k) == 1:\n            return i\n\n    return -1\nsolution(input())\n\n'''\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    for i in range(1, 2 * n):\n        if str(i).count('1') == k and str(i).count('2') == m:\n            return str(i)\n    return 'No solution'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    result = 0\n\n    while True:\n        total_binary = sum(bin(result).count('1'))\n        if total_binary == k:\n            result += 1\n        elif total_binary > k:\n            result -= 1\n        else:\n            break\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 1 5\n   ... ''')\n    '5'\n    \"\"\"\n    m, k = map(int, stdin.split())\n    n = 1\n    while True:\n        if '0' in str(n):\n            n += 1\n        else:\n            break\n    print(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    for x in range(3, 1_000_000 + 1):\n        count = 0\n        binary = list(bin(x)[2:].zfill(64))\n        for i in range(len(binary)):\n            if binary[i] == '1' and count <= k:\n                count += 1\n        if count == m:\n            return x"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.splitlines()\n    m, k = int(stdin[0]), int(stdin[1])\n    num = set()\n    def helper(i, curr):\n        if i == k:\n            num.add(curr)\n            return\n        if curr > 10**18:\n            return\n        helper(i + 1, curr * 2)\n        helper(i + 1, curr + 1)\n    helper(0, 0)\n    return str(min(num))"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return str(dp[n])\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, k = [int(i) for i in stdin.split()]\n    a = 0\n    b = 1\n    while len(bin(a)) - 2 >= k:\n        a = a + b\n        b = a + b\n    print(a)\n    return a\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ....***\n   ....**\n   ....**\n   ...."
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for i in range(1,len(stdin)-1):\n        if stdin[i] == stdin[i-1] == stdin[i+1] == stdin[i+2]:\n            return 'yes'\n    return 'no'\n\nsolution(input())\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        for i in range(len(line)):\n            if line[i] == \"*\":\n                if i+4 < len(line) and line[i+1] == \"*\" and line[i+2] == \"*\" and line[i+3] == \"*\" and line[i+4] == \"*\":\n                    return \"yes\"\n    return \"no\"\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split('\\n')\n    for segment in segments:\n        s = 0\n        for char in segment:\n            s += int(char)\n        if s % 5!= 0:\n            return 'no'\n    return 'yes'\n    \n    return 'yes' if s % 5 == 0 else 'no'\nsolution(input())\n\n'''\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    level = []\n    for i in range(n):\n        if stdin[i] == \"*\":\n            level.append((i, i))\n        elif stdin[i] == \".\":\n            level.append((i, i))\n        else:\n            for j in range(i, n, i):\n                level.append((i, j))\n    level.sort(key=lambda x: x[0])\n    for i in range(len(level) - 1):\n        a, b = level[i]\n        if level[i+1][0] - a!= level[i+1][1] - b:\n            return \"no\"\n    return \"yes\"\n\"\"\"\n\nfrom collections import deque\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    level = stdin.splitlines()[1]\n    for i in range(n):\n        if (len(level) == 1) or (len(level) == 2) or (level[i] == '*') or (level[i] == '.'):\n            pass\n        else:\n            return 'no'\n    return 'yes'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    if len(data) == 1:\n        data = data[0].split(\"*\")\n    else:\n        data = data[1].split(\"*\")\n\n    for i in range(len(data)):\n        data[i] = data[i].split('.')\n        data[i] = list(map(int, data[i]))\n\n    def check_jump(a, b, c, d):\n        if a - b == c - d:\n            return True\n        else:\n            return False\n\n    def check_jump_long(a, b, c):\n        if b - a == c - 1:\n            return True\n        else:\n            return False\n\n    for i in range(1, len(data) - 1):\n        for j in range(len(data[i])):\n            if check_jump(data[i][j], data[i][j + 1], data[i][j + 2], data[i][j + 3]) == False:\n                return \"no\"\n            if check_jump_long(data[i][j], data[i][j + 1], data[i][j + 2]) == False:\n                return \"no\"\n\n    return \"yes\"\n\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if stdin == solution(stdin.replace('.', '').replace('*', '')) else 'no'\n\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 1:\n        return \"no\"\n    if n == 2:\n        return \"yes\"\n\n    # normal\n    # if n == 3:\n    #     return \"yes\"\n\n    # ugly\n    # if n == 4:\n    #     return \"no\"\n\n    # two intervals\n    # if n == 5:\n    #     return \"yes\"\n\n    # one interval\n    # if n == 6:\n    #     return \"yes\"\n\n    # one interval\n    # if n == 7:\n    #     return \"yes\"\n\n    # two intervals\n    # if n == 8:\n    #     return \"yes\"\n\n    # one interval\n    # if n == 9:\n    #     return \"yes\"\n\n    # three intervals\n    # if n == 10:\n    #     return \"yes\"\n\n    # four intervals\n    # if n == 11:\n    #     return \"no\"\n\n    # ---------------------------\n    # TODO: think about more levels\n    # for now, we are checking only one level\n    return \"yes\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is a wrong solution, because it doesn't test whether there are any solution.\n    '''\n    n = int(stdin.splitlines()[0])\n    grid = [list(map(int, stdin.splitlines()[i][1:])) for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                return '-1'\n    for i in range(n):\n        a = sum([grid[j][i] for j in range(n)])\n        b = sum([grid[i][j] for j in range(n)])\n        c = sum([grid[j][n-i-1] for j in range(n)])\n        d = sum([grid[i][j] for j in range(n)])\n        if a == b and b == c and c == d:\n            return str(max(a,b,c,d))\n    return '-1'\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    result = [-1]\n\n    def get_next(numbers: List[int]) -> bool:\n        for i in range(0, len(numbers)):\n            for j in range(0, len(numbers)):\n                if i!= j and numbers[i] + numbers[j] == 0:\n                    return True\n        return False\n\n    while len(numbers)!= result[0]:\n        if get_next(numbers):\n            result = numbers\n        else:\n            return result[0]\n        numbers = result\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4\\n5 0 2\\n3 5 7\\n8 1 6')\n    9\n    >>> solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\\n')\n    1\n    >>> solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\\n')\n    -1\n    '''\n    rows = [list(map(int, stdin.split('\\n')[1:]))]\n    m = len(rows)\n    n = len(rows[0])\n    for i in range(m):\n        for j in range(n):\n            if rows[i][j] == 0:\n                x = rows[i][j]\n                for k in range(n):\n                    rows[i][k] = 0 if rows[i][k]!= x else rows[i][k]\n                for k in range(m):\n                    rows[k][j] = 0 if rows[k][j]!= x else rows[k][j]\n                return str(x)\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 0 2\n   ... 3 5 7\n   ... 8 1 6\n   ... ''')\n    '9'\n    >>> solution('''\n   ... 4\n   ... 1 1 1 1\n   ... 1 1 0 1\n   ... 1 1 1 1\n   ... 1 1 1 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 4\n   ... 1 1 1 1\n   ... 1 1 0 1\n   ... 1 1 2 1\n   ... 1 1 1 1\n   ... ''')\n    '-1'\n    \"\"\"\n    n = int(stdin.strip())\n    grid = [[int(e) for e in stdin.strip().split('\\n')[i]] for i in range(n)]\n    a = [[grid[i][j] for i in range(n)] for j in range(n)]\n    b = [[grid[i][n-1-j] for i in range(n)] for j in range(n)]\n    c = [[grid[n-1-i][j] for i in range(n)] for j in range(n)]\n    d = [[grid[j][i] for i in range(n)] for j in range(n)]\n    print(sum(sum(i) for i in a) + sum(sum(i) for i in b) + sum(sum(i) for i in c) + sum(sum(i) for i in d))\n    return str(sum(sum(i) for i in a) + sum(sum(i) for i in b) + sum(sum(i) for i in c) + sum(sum(i) for i in d))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.strip().split()] for _ in range(n)]\n\n    x = None\n    for i, row in enumerate(grid):\n        if sum(row) == sum(grid[i][0:i] + grid[i][i+1:]):\n            x = i\n    for j, col in enumerate(zip(*grid)):\n        if sum(col) == sum(grid[0][j:] + grid[-1][0:j]):\n            x = j\n    if x == None:\n        return \"0\"\n    return str(x + 1)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solve(n))\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = []\n    for _ in range(n):\n        grid.append([int(x) for x in stdin.split()])\n    sums = [[sum(row) for row in grid],\n            [sum(col) for col in zip(*grid)],\n            [sum(row) for row in zip(*grid)]]\n    for sum_ in sums:\n        if sum(sum_)!= 15:\n            return -1\n    return sum(sum(row) for row in grid)"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    grid = [list(map(int, input().split())) for _ in range(int(stdin.split()[0]))]\n    row_sums = [0] * int(stdin.split()[0])\n    col_sums = [0] * int(stdin.split()[0])\n    for row in range(int(stdin.split()[0])):\n        row_sums[row] = sum(grid[row])\n        for col in range(int(stdin.split()[0])):\n            col_sums[col] += grid[row][col]\n    for row in range(int(stdin.split()[0])):\n        for col in range(int(stdin.split()[0])):\n            if row_sums[row]!= col_sums[col]:\n                return '-1'\n    return str(row_sums[-1] + col_sums[-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i, row in enumerate(grid):\n        s = sum(row)\n        if s!= n * (n + 1) / 2:\n            return '-1'\n    for j in range(n):\n        s = sum([grid[i][j] for i in range(n)])\n        if s!= n * (n + 1) / 2:\n            return '-1'\n    s = sum([grid[i][i] for i in range(n)])\n    if s!= n * (n + 1) / 2:\n        return '-1'\n    s = sum([grid[i][n - i - 1] for i in range(n)])\n    if s!= n * (n + 1) / 2:\n        return '-1'\n    return '9'\n\n\nprint(solution(input()))"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n    a = list(map(int, stdin.splitlines()[2:]))\n    answer = 0, 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] <= m:\n                answer = max(answer, (a[i], a[j]))\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] > m:\n                answer = max(answer, (a[i], a[j]))\n    return''.join(str(x) for x in answer)\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin.readline())\n    # m = int(stdin.readline())\n    # benches = stdin.readline().split()\n    # benches = [int(i) for i in benches]\n    # benches = set(benches)\n    # print(benches)\n\n    N, M = map(int, stdin.readline().split())\n    benches = list(map(int, stdin.readline().split()))\n    benches = set(benches)\n    result = 0\n    for i in range(N):\n        result = max(result, M+i)\n    print(result)\n    return result\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_a(**parse(stdin)))\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    k = 0\n    last = a[-1]\n    for i in range(n - 1, -1, -1):\n        if a[i] > last:\n            k += 1\n        else:\n            break\n        last = a[i]\n\n    return str(k) +'' + str(k + m)\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 6\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ...\n   ... 10\n   ... 5\n   ...\n   ... ''')\n    '15 15'\n    \"\"\"\n    n, m = [int(i) for i in stdin.strip().split()]\n    lst = [int(i) for i in stdin.strip().split()]\n    left_k = right_k = float('-inf')\n    for i in range(n):\n        if i == 0 or lst[i - 1] + m <= lst[i]:\n            left_k = max(left_k, (i + 1) * lst[i])\n        else:\n            right_k = max(right_k, i * m)\n    return f'{left_k} {right_k}'\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    a = sorted(map(int, stdin.split()[2:]))\n    a = list(set(a))\n    k = max(a)\n    k = k + m\n    k = sorted(set(k for k in range(1, n + 1)))\n    print(k[0], k[-1])\n\nsolution(\"4\\n6\\n1\\n1\\n1\\n1\")\nsolution(\"1\\n10\\n5\\n\")"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    min_k = float('inf')\n    max_k = float('-inf')\n    def solve(k, a):\n        nonlocal min_k\n        nonlocal max_k\n        if k == m:\n            min_k = min(min_k, k)\n            max_k = max(max_k, k)\n            return\n        else:\n            for i in range(n):\n                if a[i] < min_k:\n                    a[i] += 1\n                    solve(k+1, a)\n                    a[i] -= 1\n            return\n    solve(0, a)\n    return str(min_k) +'' + str(max_k)\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    if m > 10_000:\n        return stdin\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    max_val = lst[n - 1] + m\n    min_val = lst[0]\n    print(min_val, max_val)\n    return min_val, max_val\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    people = {}\n    # count = 0\n    for i in range(n):\n        people[i] = int(stdin.strip())\n    return str(min(n,m+max(people.values()))), str(max(n,m+max(people.values())))"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = (int(i) for i in stdin.split(\"\\n\")[0].split(\" \"))\n    k = 1\n    min_k = k\n    max_k = k\n    while m > 0:\n        k += 1\n        m -= k\n        if k > max_k:\n            max_k = k\n        if m < min_k:\n            min_k = k\n    return f\"{min_k} {max_k}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    in_row, in_seat = stdin.split(' ')\n    in_row, in_seat = int(in_row), int(in_seat)\n    \n    f_seat = in_seat\n    b_seat = in_seat\n    #print(f_seat, b_seat)\n    n = in_row\n    m = in_seat\n\n    ## 1\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f or possible_b:\n    #     return 1\n    \n    ## 2\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 3\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f or possible_b:\n    #     return 1\n    \n    ## 4\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 5\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n\n    ## 6\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 7\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 8\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 9\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 10\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 11\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 12\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 13\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 14\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 15\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 16\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 17\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 18\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 19\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_f:\n    #     return 1\n    # if possible_b:\n    #     return 1\n    \n    ## 20\n    # possible_f = (0 <= f_seat) and (f_seat <= n)\n    # possible_b = (0 <= b_seat) and (b_seat <= n)\n    # if possible_"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    passengers = stdin.split()\n    rows = int(passengers[0])\n    cols = int(passengers[1])\n    seats = range(rows * cols)\n    seats_dict = {}\n    for seat in seats:\n        seat_str = str(seat)\n        row_str = seat_str[:-2]\n        col_str = seat_str[-2:]\n        seat_tuple = (row_str, col_str)\n        seats_dict[seat] = seats_dict.get(seat, [])\n        seats_dict[seat].append(seat_tuple)\n    answer = 0\n    for passenger in passengers[2:]:\n        seats_list = seats_dict.get(int(passenger))\n        if seats_list == None:\n            answer = 0\n            break\n        else:\n            if seats_list == 1:\n                answer = 0\n                break\n            else:\n                if len(seats_list) > 1:\n                    seats_list = [seats_list]\n                else:\n                    seats_list = []\n                for tuple_ in seats_list:\n                    if tuple_[0] == \"B\":\n                        if tuple_[1] == \"F\":\n                            seats_list.remove(tuple_)\n                        else:\n                            answer += 1\n                    else:\n                        if tuple_[1] == \"B\":\n                            seats_list.remove(tuple_)\n                        else:\n                            answer += 1\n    return answer\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # [start, end, ways]\n    res = [0, 0, 0]\n    for i in range(m):\n        # All seats are occupied\n        if arr[i] == 1:\n            continue\n        if i == 0:\n            res[0] += 1\n        else:\n            res[1] += 1\n        if i == m - 1:\n            res[2] += 1\n        # Assign seats\n        if res[0] == 0 and res[1] == 0:\n            res[2] += 1\n        elif res[0] == 0 and res[1] > 0:\n            res[0] = res[1]\n            res[2] += 1\n        elif res[0] > 0 and res[1] == 0:\n            res[0] = res[1]\n            res[2] += 1\n        else:\n            res[2] += res[0]\n            res[1] += 1\n            res[0] = res[1]\n    return str(res[2])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    boarding_pass = stdin.split()\n    n, m = int(boarding_pass[0]), int(boarding_pass[1])\n    seat_map = []\n    for _ in range(n):\n        seat_map.append(list(stdin.readline()))\n    # Create a seat map for the plane\n    plane_map = [[0 for _ in range(n)] for _ in range(n)]\n    # Create a seat map for the passengers\n    passenger_map = [[0 for _ in range(n)] for _ in range(n)]\n    # Populate the seats\n    for _ in range(m):\n        s, e, f = stdin.readline().split()\n        if s == e:\n            passenger_map[int(s)][int(e)] = 1\n        else:\n            plane_map[int(s)][int(e)] = 1\n            plane_map[int(e)][int(s)] = 1\n    # Place passengers\n    for r in range(n):\n        for c in range(n):\n            if passenger_map[r][c]:\n                for k in range(r+1, n):\n                    if passenger_map[k][c]:\n                        break\n                else:\n                    plane_map[r][c] = 1\n    # Do some manipulation\n    for r in range(n):\n        for c in range(n):\n            if plane_map[r][c]:\n                for k in range(r+1, n):\n                    if plane_map[k][c]:\n                        break\n                else:\n                    passenger_map[r][c] = 1\n    # Find seating arrangements\n    if n == 1 and m == 0:\n        return 1\n    seat_arrangements = []\n    for r in range(n):\n        for c in range(n):\n            if passenger_map[r][c] == 0:\n                seat_arrangements.append(plane_map[r][c])\n    # Count up the arrangements\n    total = 0\n    for arrangement in seat_arrangements:\n        total += arrangements[arrangement]\n    return total % (10**9 + 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seats = {}\n    for i in range(1, n + 1):\n        seats[i] = \"F\"\n    for i in range(n, 0, -1):\n        seats[i] = \"B\"\n    res = 0\n    for i in range(m):\n        pre = seats[i + 1]\n        post = seats[i]\n        if pre == \"F\" and post == \"F\":\n            continue\n        elif pre == \"F\" and post == \"B\":\n            res += 1\n        elif pre == \"B\" and post == \"F\":\n            res += 1\n        elif pre == \"B\" and post == \"B\":\n            res += 2\n    return str(res)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    num_ways = 0\n    for seat in range(1, n + 1):\n        if seat % 2 == 1 and seat // 2!= 0:\n            num_ways += 1\n        if seat % 2 == 0 and seat // 2!= n:\n            num_ways += 1\n    return str(num_ways % 1000000007)\n\nassert solution(\"5 3\") == \"128\"\nassert solution(\"3 3\") == \"128\"\nassert solution(\"10 10\") == \"197\"\nassert solution(\"11 11\") == \"197\"\nassert solution(\"4 4\") == \"256\"\nassert solution(\"5 1\") == \"254\"\nassert solution(\"7 7\") == \"37\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"8 8\") == \"42\"\n\n'''"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][2]\n        dp[i][i] = dp[i - 1][i - 1] + dp[i - 1][i - 2] + dp[i - 1][i - 3]\n        dp[i][i - 1] = dp[i - 1][i - 2] + dp[i - 1][i - 3]\n        dp[i][i + 1] = dp[i - 1][i] + dp[i - 2][i] + dp[i - 3][i]\n        for j in range(1, i):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + dp[i - 1][j + 1]\n    return str(dp[n][m])\n\nsolution(\"\"\"3 3\n3 2\n\"\"\")\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    \n    \n    #   n = 3\n    #   m = 3\n    \n    \n    #   Optimized solution by checking the corners\n    \n    #   As there are only 2 ways to assign seats to the passengers, we just need to check the corners\n    \n    #   f, b = 0, 0\n    #   for i in range(1, n + 1):\n    #     f += (i in range(m))\n    #     b += (i in range(m, 2 * n))\n    #   print(f)\n    #   print(b)\n    #   print(n * (n + 1) / 2)\n    #   return int((f - b + 1) * (n * (n + 1) / 2)) % (10 ** 9 + 7)\n    \n    \n    #   This approach works, but is too slow, as it needs to generate all the possible assignments, which could take forever.\n    #   instead, we use the idea that if we assign the seat in the middle (A), we will get the seats in the middle for everyone else to use.\n    \n    #   so, let's see if we can assign seats in the middle.\n    \n    #   We can assign seats in the middle if the number of seats is even and we can partition the seats into two parts.\n    #   The seat in the middle can either be f or b.\n    #   A, B, C, D, E, F, G, H\n    #   1 2 3 4 5 6 7 8 9 10\n    #   f, b, c, d, e, f, g, h\n    \n    #   So, let's consider a case of seats in the middle of the plane (5).\n    #   The seats of the middle can be as follows:\n    #   1, 2, 3, 4, 5\n    #   2, 3, 4, 5, 6\n    #   3, 4, 5, 6, 7\n    #   4, 5, 6, 7, 8\n    #   5, 6, 7, 8, 9\n    \n    #   f, b, c, d, e, f, g, h\n    \n    #   So, if we partition the seats into two parts (which can only be done if the number of seats is even), we can assign the seats in the middle.\n    #   So, we have to partition all the seats.\n    \n    #   Let's partition a list of numbers into two parts.\n    \n    #   We need to partition by taking the middle element, and take the smallest number greater than the middle element.\n    \n    #   There is a function, called partition, that partitions a list into two parts. So, to partition a list, we use partition.\n    \n    #   We use partition to partition the list into two parts.\n    \n    #   To partition, let's say a list l.\n    \n    #   Let's say the element l[i] is less than or equal to l[i + 1].\n    \n    #   Then, partition will place l[i] in the first part, and l[i + 1] in the second part.\n    \n    #   So, we partition l by taking the middle element, and then taking the smallest element greater than the middle element.\n    \n    #   l = [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   [1, 3, 4, 5]\n    #   partition(l)\n    \n    #   [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   We can see that partition only goes through the middle element.\n    #   Therefore, we can partition the list into two parts.\n    \n    #   Now let's consider the following case (n = 5):\n    #   1, 2, 3, 4, 5\n    #   2, 3, 4, 5, 6\n    #   3, 4, 5, 6, 7\n    #   4, 5, 6, 7, 8\n    #   5, 6, 7, 8, 9\n    \n    #   This is the first case, where we need to partition the list by partitioning the middle element and the smallest element greater than the middle element.\n    \n    #   This can be done by partitioning the list by partitioning the middle element and the smallest element greater than the middle element.\n    #   We partition by taking the middle element, and then take the smallest element greater than the middle element.\n    \n    #   We partition the list by partitioning the middle element.\n    \n    #   l = [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   This partitions the list into 3 parts.\n    \n    #   Now let's consider the following case (n = 6):\n    #   1, 2, 3, 4, 5, 6\n    #   2, 3, 4, 5, 6, 7\n    #   3, 4, 5, 6, 7, 8\n    #   4, 5, 6, 7, 8, 9\n    #   5, 6, 7, 8, 9, 10\n    \n    #   The first case, we can partition the list by partitioning the middle element and the smallest element greater than the middle element.\n    \n    #   To partition, let's say l = [1, 2, 3, 4, 5, 6].\n    \n    #   l = partition(l)\n    \n    #   l = [1, 2, 3, 4, 5]\n    #   partition(l)\n    \n    #   l = [1, 2, 3, 4]\n    #   partition(l)\n    \n    #   l = [1, 2]\n    #   partition(l)\n    \n    #   l = []\n    #   partition(l)\n    \n    #   So, we can partition the list into two parts.\n    \n    #   Now let's consider the following case (n = 11):\n    #   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n    #   2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n    #   3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\n    #   4, 5, 6, 7, 8, 9, 10, 11, 12,"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = set()\n    best_choice = (None, None)\n    for i in range(n):\n        friends.update(map(int, stdin.split()))\n    for i in range(1, 10):\n        pizzas = set()\n        for j in range(1, m):\n            pizzas.update(map(int, stdin.split()))\n        pizzas = sorted(pizzas)\n        if pizzas in friends:\n            return str(i) +'' + str(j)\n        if len(pizzas) > len(best_choice) and len(pizzas) > m:\n            best_choice = (i, j)\n    return''.join(map(str, best_choice))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friend_favorite_ingredients = [[] for _ in range(n)]\n    for _ in range(n):\n        line = list(map(int, stdin.split()))\n        for favorite_ingredient in line[1:]:\n            friend_favorite_ingredients[line[0] - 1].append(favorite_ingredient)\n    pizza_ingredients = [[] for _ in range(m)]\n    for _ in range(m):\n        pizza_ingredients[int(stdin.split()[2]) - 1] = list(map(int, stdin.split()[3:]))\n    result = 999\n    for pizza_index in range(len(pizza_ingredients)):\n        pizza_ingredients[pizza_index].sort()\n        pizza_price = pizza_ingredients[pizza_index][0]\n        pizza_favorite_ingredients = friend_favorite_ingredients[pizza_ingredients[pizza_index][1] - 1]\n        pizza_ingredients_copy = pizza_ingredients[pizza_index][1:]\n        pizza_ingredients_copy.sort(reverse=True)\n        pizza_ingredients[pizza_index] = pizza_ingredients_copy\n        total_favorite_ingredients = pizza_favorite_ingredients + pizza_ingredients[pizza_index]\n        for person_index in range(len(total_favorite_ingredients)):\n            if person_index in pizza_favorite_ingredients:\n                continue\n            person_favorite_ingredients = total_favorite_ingredients[person_index]\n            if person_favorite_ingredients in pizza_ingredients[pizza_index]:\n                continue\n            person_price = pizza_ingredients[pizza_index][person_favorite_ingredients - 1]\n            if person_price < pizza_price:\n                result = min(result, person_index + 1)\n    return str(result)"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution.\n    \"\"\"\n    # Check the correctness of input data.\n    lines = stdin.splitlines()\n    if len(lines)!= 3:\n        raise ValueError(\"Input data has not the right format. \")\n    n, m = map(int, lines[0].split())\n    if n < 1 or n > 10**5:\n        raise ValueError(\"Input data's first line is wrong. \")\n    if m < 2 or m > 10**5:\n        raise ValueError(\"Input data's second line is wrong. \")\n\n    # Count the favorite ingredients.\n    fav_ingredients = {}\n    for i in range(1, n + 1):\n        n_favorite_ingredients = int(lines[i][0])\n        favorite_ingredients = list(map(int, lines[i][1:]))\n        for favorite_ingredient in favorite_ingredients:\n            if favorite_ingredient in fav_ingredients:\n                fav_ingredients[favorite_ingredient] += 1\n            else:\n                fav_ingredients[favorite_ingredient] = 1\n    fav_ingredients = {key: value for key, value in sorted(fav_ingredients.items(), key=lambda item: item[1], reverse=True)}\n\n    # Count the pizza ingredients.\n    ingredients = {}\n    for i in range(1, m + 1):\n        n_ingredients = int(lines[i][0])\n        pizza_ingredients = list(map(int, lines[i][1:]))\n        for pizza_ingredient in pizza_ingredients:\n            if pizza_ingredient in ingredients:\n                ingredients[pizza_ingredient] += 1\n            else:\n                ingredients[pizza_ingredient] = 1\n    ingredients = {key: value for key, value in sorted(ingredients.items(), key=lambda item: item[1], reverse=True)}\n\n    # Compute the pizzas set.\n    pizza_set = set()\n    for pizza_ingredient in ingredients:\n        if pizza_ingredient in fav_ingredients:\n            pizza_set.add(pizza_ingredient)\n\n    # Check if there are solutions.\n    if len(pizza_set) < 2:\n        return \"1 2\"\n\n    # Sort the ingredients and compute the total price.\n    ingredients = list(ingredients.keys())\n    for fav_ingredient in fav_ingredients:\n        if fav_ingredient not in pizza_set:\n            ingredients.remove(fav_ingredient)\n    ingredients.sort()\n    total_price = sum(ingredients)\n\n    # Check if there are solutions.\n    if total_price >= 10**9:\n        return \"1 2\"\n\n    # Find the right pizzas.\n    pizza_set = list(pizza_set)\n    while len(pizza_set)!= 2:\n        for pizza_ingredient in pizza_set:\n            if pizza_ingredient not in ingredients:\n                ingredients.remove(pizza_ingredient)\n        pizza_set = list(pizza_set)\n\n    # Return the result.\n    return \"%d %d\" % (pizza_set[0], pizza_set[1])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    ingredients = []\n    for i in range(1, n + 1):\n        ingredients.append([int(x) for x in stdin.split()[i]])\n    pizzas = []\n    for i in range(n, n + m):\n        pizzas.append(list(map(int, stdin.split()[i])))\n    pizzas = sorted(pizzas)\n    solutions = []\n    for pizza in pizzas:\n        found = False\n        for index, ingredients in enumerate(ingredients):\n            if pizza[0] >= ingredients[0] and pizza[1] >= ingredients[1] and pizza[2] >= ingredients[2]:\n                found = True\n                break\n        if not found:\n            solutions.append(pizza)\n    if not solutions:\n        return \"-1 -1\"\n    return str(solutions[0][0]) + \" \" + str(solutions[0][1])"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = set()\n    for i in range(n):\n        f, *f_set = map(int, stdin.split())\n        friends.update(f_set)\n    pizzas = [tuple(map(int, stdin.split())) for _ in range(m)]\n    total = 0\n    for i, f in enumerate(sorted(friends)):\n        for j, p in enumerate(sorted(friends)):\n            if i!= j and f in pizzas[j][1] and p in pizzas[i][1]:\n                total += pizzas[i][0] + pizzas[j][0]\n                break\n    return f\"{total}\"\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    best = None\n    min_price = 100000\n    for i in range(n):\n        ingredients = []\n        for j in range(n):\n            ingredients.append(int(stdin.split()[i * n + j + 1]))\n        pizzas = []\n        for j in range(m):\n            pizzas.append((ingredients[j], int(stdin.split()[i * n + m + j + 1]), stdin.split()[i * n + m + j + 2]))\n        pizzas.sort(key=lambda x: (x[0], x[1]))\n        price = pizzas[0][1]\n        for j in range(1, m):\n            if pizzas[j][0] <= price:\n                price = pizzas[j][1]\n            else:\n                break\n        if price < min_price:\n            min_price = price\n            best = (i + 1, pizzas[0][2])\n\n    return \" \".join(map(str, best))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    ingredients = {}\n    for i in range(1, n + 1):\n        s = stdin.split()\n        ingredients[i] = s[1:]\n\n    def min_price(b1, b2):\n        min_price = b1[0] * b2[0]\n        for i in range(len(b1)):\n            min_price += max(b1[i], b2[i])\n        return min_price\n\n    min_price_min_ingredient = float('inf')\n    min_price_i_j = (float('inf'), -1)\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            b1 = ingredients[i]\n            b2 = ingredients[j]\n\n            if min_price_min_ingredient > min_price(b1, b2):\n                min_price_min_ingredient = min_price(b1, b2)\n                min_price_i_j = (min_price_min_ingredient, i, j)\n\n    return min_price_i_j\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pizza_dict = {}\n    pizzas_info = []\n    for i in range(n):\n        pizza, *ingredients = list(map(int, stdin.split()))\n        pizzas_info.append((pizza, *ingredients))\n        for j, ingredient in enumerate(ingredients):\n            if ingredient not in pizza_dict:\n                pizza_dict[ingredient] = set()\n            pizza_dict[ingredient].add(pizza)\n    min_pizza_ingredients = {ingredient: len(pizza_dict[ingredient]) for ingredient in pizza_dict}\n    min_pizza_ingredients = sorted(min_pizza_ingredients.items(), key=lambda x: x[1])\n    print(*min_pizza_ingredients, sep=\"\\n\")\n    for i in range(m):\n        pizza, *ingredients = list(map(int, stdin.split()))\n        pizza_dict = {ingredient: pizza_dict[ingredient].intersection(set(ingredients)) for ingredient in pizza_dict}\n        pizza_ingredients = {ingredient for ingredients in pizza_dict.values() for ingredient in ingredients}\n        pizza_ingredients = sorted(pizza_ingredients)\n        print(pizza_ingredients[0], pizza_ingredients[1])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n, m = stdin[0], stdin[1]\n    fav_ingredients = stdin[2:]\n    pizza = stdin[3:]\n    ingredients = []\n    for pizza_price, pizza_ingredients in pizza:\n        for ing in pizza_ingredients:\n            ingredients.append(ing)\n    pizza_ingredients = set(ingredients)\n    pizza_ingredients_list = list(pizza_ingredients)\n    pizza_ingredients_list.sort()\n    total_price = 0\n    for pizza_price, pizza_ingredients in pizza:\n        pizza_ingredients = set(pizza_ingredients)\n        pizza_ingredients = pizza_ingredients.intersection(pizza_ingredients_list)\n        if len(pizza_ingredients) >= 2:\n            total_price += pizza_price\n    return str(total_price)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = list(map(int, stdin.split()))\n\n    def calculate_ways(index, choices):\n        if len(choices) == 2:\n            return index, index\n        else:\n            first_choice = choices[0]\n            second_choice = choices[1]\n            result = calculate_ways(index + 1, choices[2:])\n            if first_choice in ingredients[index] and second_choice in ingredients[index]:\n                result = max(result, calculate_ways(index + 1, choices[2:]))\n            return result\n\n    ingredients = [[] for _ in range(n)]\n    for index in range(n):\n        ingredients[index] = ingredients[index][: friends[index]] + friends[index]\n    first, second = calculate_ways(0, friends[0:])\n    return first, second\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    min_num = -1\n    max_num = -1\n\n    for i in range(1, 100):\n        for j in range(10):\n            if sum(map(int, str(i * j))) == s and len(str(i * j)) == m:\n                if min_num == -1:\n                    min_num = i * j\n                elif i * j < min_num:\n                    min_num = i * j\n                if max_num == -1:\n                    max_num = i * j\n                elif i * j > max_num:\n                    max_num = i * j\n\n    if max_num == -1:\n        max_num = min_num\n\n    return str(min_num) + \" \" + str(max_num)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    return''.join(map(str, range(min(i for i in range(1, 10 ** m) if sum(str(i)) == s), max(i for i in range(1, 10 ** m) if sum(str(i)) == s))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    a = []\n    for i in range(m):\n        a.append(int(input()))\n    n = []\n    for j in a:\n        num = sum(map(int, str(j)))\n        if num == s:\n            n.append(j)\n    if len(n) == 0:\n        return \"-1 -1\"\n    n.sort()\n    return str(n[0]) + \" \" + str(n[-1])\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    max_sum = 0\n    min_sum = 9999\n    min_length = 0\n    max_length = 0\n\n    for elem in stdin.split():\n        if int(elem) > 0:\n            if len(elem) > max_length:\n                max_length = len(elem)\n                max_sum = int(elem)\n            elif len(elem) < min_length:\n                min_length = len(elem)\n                min_sum = int(elem)\n    return \"{} {}\".format(min_sum, max_sum)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, s = list(map(int, stdin.split(\" \")))\n    \n    if m == 0 or s == 0 or m > len(str(s)) or s > 900:\n        return \"-\"\n    \n    minimum = sum(map(int, str(s)))\n    maximum = 0\n    \n    for i in range(m):\n        current = sum(map(int, str(s - minimum + 1)))\n        if current > maximum:\n            maximum = current\n        \n    return \"{} {}\".format(minimum, maximum)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    s = int(stdin.split()[1])\n    numbers = []\n    for i in range(1, m + 1):\n        number = str(i) * i\n        if sum(int(i) for i in number) == s:\n            numbers.append(number)\n    if numbers:\n        return f'{min(numbers)} {max(numbers)}'\n    else:\n        return '-1 -1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, s = stdin.strip().split(' ')\n    nums = list(range(int(m) + 1))\n    return''.join([str(i) for i in sorted(nums, key=lambda n: sum(map(int, list(str(n))))) if sum(map(int, list(str(n)))) == int(s)]) or '-1 -1'\nprint(solution(input()))"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = (int(i) for i in stdin.split())\n    if n < 3 or s < 0:\n        return \"-\"\n    else:\n        for i in range(1, n + 1):\n            if sum(int(d) for d in str(i)) == s:\n                return str(i) +'' + str(i)\n    return \"-\"\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    m, s = int(stdin[0]), int(stdin[1])\n    ans = []\n    if s <= 0:\n        return \"-\" + \"-\" * m\n    if s == 0 and m == 1:\n        return \"-1 -1\"\n    for i in range(m):\n        if s == 0:\n            return \"-\" + \"-\" * i\n        if s % 10 == 0:\n            if (s // 10) == 0:\n                ans.append(str(s))\n                s = 0\n            else:\n                s //= 10\n                ans.append(str(s))\n                s = 0\n        else:\n            s //= 10\n            ans.append(str(s))\n            s = s % 10\n    return \" \".join(ans)\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    small = 1000000000\n    big = -1\n    for i in range(n):\n        x = int(stdin)\n        if x < small:\n            small = x\n        if x > big:\n            big = x\n    if big == -1:\n        return \"-\" + \"-\"\n    return str(small) + \" \" + str(big)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return str(sum(range(l, r + 1)) % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return str((l * r) // 2 - (((l - 1) * r) // 2) % 998244353 + (l * r) // 2 - (((l - 1) * r) // 2) % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = list(map(int, stdin.split()))\n    s = (r - l + 1) * (k - 1)\n    s = s % 998244353\n    return str(s)"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    result = 0\n    while l <= r:\n        if 1 <= l <= 9:\n            result += l\n        if 1 <= r <= 9:\n            result += r\n        l += 1\n        r -= 1\n    for digit in range(10):\n        result += (k + 1) * digit\n    return str(result % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.splitlines()\n    # l, r, k = map(int, lines[0].split())\n    l, r, k = map(int, stdin.split())\n    return str(sum([n for n in range(l, r + 1) if len(set(str(n))) <= k]))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_digit(number):\n        if number < 10:\n            return number\n        number = str(number)\n        if number[0] == '1':\n            return number[0]\n        else:\n            return number[1]\n\n    def get_counts(number):\n        count = 0\n        for i in range(len(number)):\n            if number[i] == get_digit(number):\n                count += 1\n        return count\n\n    def get_diffs(number):\n        if number[0] == '1':\n            return 10 - get_counts(number)\n        else:\n            return get_counts(number) - 9\n\n    l, r, k = map(int, stdin.split())\n    result = 0\n    for i in range(l, r+1):\n        result += get_diffs(str(i)) * (10**get_counts(str(i)))\n    return str(result % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    all_nums = range(l, r+1)\n    return str(sum(all_nums))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    l, r, k = int(input_data[0]), int(input_data[1]), int(input_data[2])\n    ans = 0\n    for i in range(l, r + 1):\n        i_string = str(i)\n        counter = collections.Counter(i_string)\n        if len(counter.keys()) <= k:\n            ans += i\n    return str(ans % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return sum(map(lambda x: sum(x) % 998244353 if len(set(x)) <= k else 0, range(l, r + 1)))"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, l, r, k = stdin.split()\n    return str(sum(range(int(l), int(r) + 1)) % int(998244353) + int(l) * int(k))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n    pencils_sorted = sorted(data, key=lambda x: x)\n    pencil_groups = []\n    result = \"YES\"\n    for i in range(0, n - 1):\n        pencil_groups.append((pencils_sorted[i], pencils_sorted[i + 1]))\n    pencil_groups.append((pencils_sorted[-1], pencils_sorted[-2]))\n    for pencil_group in pencil_groups:\n        if abs(pencil_group[0] - pencil_group[1]) > d:\n            result = \"NO\"\n            break\n    if result == \"YES\":\n        first_box = 0\n        last_box = n - 1\n        for i in range(0, n):\n            box_size = 0\n            current_box = 0\n            next_box = 0\n            while box_size < k and current_box < n:\n                pencil_i = pencil_groups[current_box]\n                box_size += 1\n                if abs(pencil_i[0] - pencil_i[1]) <= d:\n                    break\n                else:\n                    next_box += 1\n                    current_box += 1\n            if next_box == n:\n                result = \"NO\"\n            else:\n                if box_size >= k:\n                    break\n                else:\n                    while box_size < k and next_box < n:\n                        pencil_i = pencil_groups[next_box]\n                        box_size += 1\n                        if abs(pencil_i[0] - pencil_i[1]) <= d:\n                            break\n                        else:\n                            next_box += 1\n                    if next_box == n:\n                        result = \"NO\"\n                    else:\n                        first_box = current_box\n                        last_box = next_box - 1\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) <= d:\n                count += 1\n    return \"YES\" if count >= k * (n - k) else \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    res = \"YES\"\n    for a in sorted(list(map(int, stdin.split())), reverse=True):\n        if a <= k:\n            k -= 1\n        else:\n            res = \"NO\"\n            break\n    return res"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    a = sorted(list(map(int, stdin.split())))\n    if n > k or d < 0:\n        return 'NO'\n    if n <= 2 or d >= max(a):\n        return 'YES'\n    for i in range(1, n):\n        if abs(a[i] - a[i-1]) >= d:\n            return 'NO'\n    if a[0]!= a[-1]:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, k, d = map(int, stdin.split())\n  nums = list(map(int, stdin.split()))\n  if len(nums)!= n:\n    return \"NO\"\n  \n  if len(set(nums))!= n:\n    return \"NO\"\n\n  for i in range(1, n):\n    if nums[i] <= nums[i-1]:\n      return \"NO\"\n\n  if len(set(nums))!= n:\n    return \"NO\"\n  \n  sums = sum(nums)\n  if sums % n!= 0 or (nums[0]!= 1 and nums[0]!= 0):\n    return \"NO\"\n\n  for i in range(1, n):\n    if (nums[i] - nums[i-1]) % d!= 0:\n      return \"NO\"\n\n  res = 0\n  for i in range(1, n):\n    res += min(nums[i], n-res)\n  if res >= k:\n    return \"YES\"\n  else:\n    return \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n    sats = []\n    for i in range(1, n):\n        diff = data[i] - data[i - 1]\n        if diff > d:\n            return \"NO\"\n        sats.append(diff)\n    sats.sort()\n\n    if sats[0] == 0:\n        return \"NO\"\n\n    if n == 1:\n        if sats[0] >= k:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if k >= sats[0]:\n        if len(sats) > 1 and sats[1] - sats[0] <= d:\n            return \"YES\"\n        elif len(sats) > 2 and sats[2] - sats[0] <= d:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if len(sats) > 1 and sats[1] - sats[0] > d:\n        return \"NO\"\n    elif len(sats) > 2 and sats[2] - sats[0] > d:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    saturation = list(map(int, stdin.split()))\n    def check_saturation(s1, s2):\n        return abs(s1 - s2) <= d\n    def get_sorted_pencil_saturation(s):\n        return sorted(s, key=lambda x: abs(x - x - 1), reverse=True)\n    sorted_pencil_saturation = get_sorted_pencil_saturation(saturation)\n    if k > len(sorted_pencil_saturation):\n        return 'NO'\n    else:\n        boxes = []\n        for i in range(k):\n            boxes.append(sorted_pencil_saturation[i])\n        for i in range(k, n):\n            if check_saturation(sorted_pencil_saturation[i], sorted_pencil_saturation[i-k]):\n                for j in range(i-k+1, i):\n                    boxes.append(sorted_pencil_saturation[j])\n                break\n        if len(boxes) == k:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, d] = list(map(int, stdin.split()))\n    saturation = list(map(int, stdin.split()))\n\n    for i in range(len(saturation)):\n        for j in range(i+1, len(saturation)):\n            if abs(saturation[i] - saturation[j]) <= d:\n                print(\"YES\")\n                exit()\n    print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    return \"YES\" if any(map(lambda x: x >= d, a)) and min(a) <= k <= max(a) and len(set(a)) == n else \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, k, d = map(int, stdin.split())\n  a = list(map(int, stdin.split()))\n  return 'YES' if len(a) >= k and len(a) - k <= d else 'NO'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace('!', '').replace(' ', '')\n    return str(len(a)) +'' + str(len([x for x in a if x == 'R'])) +'' + str(len([x for x in a if x == 'B'])) +'' + str(len([x for x in a if x == 'Y'])) +'' + str(len([x for x in a if x == 'G']))\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of dead light bulbs of each color.\n\n    The garland contains four colors: red, blue, yellow and green.\n    The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them.\n    For example, the garland can look like \"RYBGRYBGRY\", \"YBGRYBGRYBG\", \"BGRYB\", but can not look like \"BGRYG\", \"YBGRYBYGR\" or \"BGYBGY\".\n    Let's say that the garland looks like: \"RYBGRYBGRY\".\n    For the first four characters in this garland there are four lights, which are red, blue, yellow and green, that means that there are 4 light bulbs.\n    The garland consists of 4 light bulbs.\n    In this garland there are two red lights, two green lights and two blue lights.\n    In this garland there are two blue lights, one yellow and one green light.\n    So there are 1 blue bulb, 1 yellow light and 2 green lights.\n\n    Args:\n        stdin: Lines of input.\n    Returns:\n        The number of dead light bulbs of each color.\n    \"\"\"\n    colors = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}\n    for color in stdin:\n        if color == 'Y':\n            colors['Y'] += 1\n        elif color == 'B':\n            colors['B'] += 1\n        elif color == 'G':\n            colors['G'] += 1\n        elif color == 'R':\n            colors['R'] += 1\n\n    return''.join(str(colors[letter]) for letter in ('R', 'B', 'Y', 'G'))\n\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin\n    while True:\n        i = st.find('R')\n        if i == -1:\n            break\n        if st[i + 1]!= 'Y':\n            st = st[:i] + 'Y' + st[i + 2:]\n        if st[i + 1]!= 'B':\n            st = st[:i] + 'B' + st[i + 2:]\n        if st[i + 1]!= 'Y':\n            st = st[:i] + 'Y' + st[i + 2:]\n        if st[i + 1]!= 'B':\n            st = st[:i] + 'B' + st[i + 2:]\n    st = st.replace('Y', 'B')\n    st = st.replace('B', 'Y')\n    st = st.replace('B', 'G')\n    st = st.replace('G', 'B')\n    return st\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  [garland] = stdin.strip().splitlines()\n  [red, blue, yellow, green] = [\n    [1 if i == 'R' else 0 for i in garland[i * 4 : i * 4 + 4]]\n    for i in range(len(garland) // 4)\n  ]\n  if sum(red) > sum(blue) + sum(yellow) + sum(green):\n    return str(red[0] + red[1] + blue[0] + blue[1]) + '\\n' + str(red[2] + blue[2] + yellow[0] + yellow[1])\n  else:\n    return str(red[0] + red[1] + blue[0] + blue[1] + yellow[0] + yellow[1] + green[0] + green[1]) + '\\n' + str(\n      red[2] + blue[2] + yellow[0] + yellow[1] + green[0] + green[1]\n    )\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    g, r, b, y, g, b, y, g = stdin.split(\"!\")\n    r = int(r)\n    b = int(b)\n    y = int(y)\n    g = int(g)\n    if r == 0 or b == 0 or y == 0 or g == 0:\n        return \"0 0 0 0\"\n    else:\n        r = r-1\n        b = b-1\n        y = y-1\n        g = g-1\n        return str(r)+\" \"+str(b)+\" \"+str(y)+\" \"+str(g)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return \" \".join([str(len(set(x)) - len(set(x) & set(\"RGYB\"))), str(len(set(x)) - len(set(x) & set(\"RBY\"))), str(len(set(x)) - len(set(x) & set(\"YB\"))), str(len(set(x)) - len(set(x) & set(\"YG\")))])\n    return \" \".join([str(len(set(x)) - len(set(x) & set(\"RGYB\"))) for x in stdin.split()])\nstdin = 'RYBGRYBGR'\nprint(solution(stdin))"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    garland = stdin\n    four_colors = ['R', 'B', 'Y', 'G']\n    blue_bulbs = 0\n    yellow_bulbs = 0\n    red_bulbs = 0\n    green_bulbs = 0\n    for i in range(0, len(garland)-4):\n        if garland[i] == garland[i+1] and garland[i+1] == garland[i+2] and garland[i+2] == garland[i+3]:\n            blue_bulbs += 1\n        elif garland[i] == garland[i+1] and garland[i+1] == garland[i+2] and garland[i+2] == garland[i+3]:\n            yellow_bulbs += 1\n        elif garland[i] == garland[i+1] and garland[i+1] == garland[i+2] and garland[i+2] == garland[i+3]:\n            green_bulbs += 1\n    if blue_bulbs > 0:\n        red_bulbs = 4 - blue_bulbs\n    if yellow_bulbs > 0:\n        green_bulbs = 4 - yellow_bulbs\n    return str(red_bulbs) +'' + str(blue_bulbs) +'' + str(yellow_bulbs) +'' + str(green_bulbs)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin\n    n = len(garland)\n    red = blue = yellow = green = 0\n    for i in range(n - 4):\n        if garland[i] == 'R':\n            red += 1\n        elif garland[i] == 'B':\n            blue += 1\n        elif garland[i] == 'Y':\n            yellow += 1\n        elif garland[i] == 'G':\n            green += 1\n    for i in range(n - 4, n):\n        if garland[i] == 'R':\n            red -= 1\n        elif garland[i] == 'B':\n            blue -= 1\n        elif garland[i] == 'Y':\n            yellow -= 1\n        elif garland[i] == 'G':\n            green -= 1\n    return str(red) +'' + str(blue) +'' + str(yellow) +'' + str(green)"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    stack = []\n    for i in range(len(n)):\n        if n[i] == \"R\":\n            stack.append(\"R\")\n            while stack and stack[-1]!= \"B\":\n                stack.pop()\n            if stack:\n                stack.pop()\n            else:\n                stack.append(n[i])\n        elif n[i] == \"Y\":\n            stack.append(\"Y\")\n            while stack and stack[-1]!= \"G\":\n                stack.pop()\n            if stack:\n                stack.pop()\n            else:\n                stack.append(n[i])\n        elif n[i] == \"B\":\n            stack.append(\"B\")\n            while stack and stack[-1]!= \"R\":\n                stack.pop()\n            if stack:\n                stack.pop()\n            else:\n                stack.append(n[i])\n        elif n[i] == \"G\":\n            stack.append(\"G\")\n            while stack and stack[-1]!= \"Y\":\n                stack.pop()\n            if stack:\n                stack.pop()\n            else:\n                stack.append(n[i])\n    return \" \".join(stack)\n\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N, M = int(N), int(M)\n    _, _, rooms, _, passages = [], [], set([i for i in range(1, N + 1)]), set([i for i in range(1, N + 1)]), set()\n    for i in range(N - 1):\n        _, r_1, r_2 = stdin.split()\n        rooms.remove(int(r_1))\n        rooms.remove(int(r_2))\n        passages.add((int(r_1), int(r_2)))\n    passages_ = set(passages)\n    for i in range(M - 1):\n        _, r_1, r_2 = stdin.split()\n        passages.remove((int(r_1), int(r_2)))\n        passages.add((int(r_1), int(r_2)))\n    passages = passages_\n    passages = list(passages)\n    # print(rooms)\n    # print(passages)\n    rooms = list(rooms)\n    # print(rooms)\n    passages = list(passages)\n    for i in range(len(passages)):\n        for j in range(i + 1, len(passages)):\n            passages[i], passages[j] = passages[j], passages[i]\n    # print(passages)\n    n = 0\n    for i in range(len(passages)):\n        if n == N - 1:\n            break\n        if rooms[0] == passages[i][0]:\n            n += 1\n            rooms.append(passages[i][1])\n    if n == N - 1:\n        return '1'\n    return str(n)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the stdin to a list\n    data = stdin.split()\n\n    # Read the data as follows\n    # First, read the length of the list. Then, read each item, and split it into a list of its parts.\n    n = int(data[0])\n    m = int(data[1])\n    s = int(data[2])\n    t = int(data[3])\n\n    # Create a list to store the distances and probabilities\n    distances = []\n    probabilities = []\n\n    # Get the distances and probabilities from the data\n    for i in range(m):\n        data = stdin.split()\n        data = list(map(int, data))\n        distances.append(data[0])\n        probabilities.append(data[1])\n\n    # Sort the distances and probabilities\n    distances.sort()\n    probabilities.sort()\n\n    # Go through the distances and probabilities\n    current_min_dist = float(\"inf\")\n    for i in range(m):\n        current_probability = probabilities[i]\n        current_distance = distances[i]\n        if current_probability > 0:\n            current_min_dist = min(current_min_dist, current_distance * current_probability)\n\n    return str(current_min_dist)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s_1, t_1 = map(int, stdin.split()[1].split(','))\n    s_2, t_2 = map(int, stdin.split()[2].split(','))\n\n    if s_2!= t_1:\n        return \"impossible\"\n\n    if s_2!= s_1:\n        s_1, s_2 = s_2, s_1\n\n    m = m - 1\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][1] = 1\n    dp[1][1] = 1\n\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return str(round(dp[-1][-1]/dp[-1][m], 6))\n\n\nprint(solution(stdin))\n\"\"\"\n\nfrom math import factorial\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    starts = list(map(int, stdin.split()))\n    ends = list(map(int, stdin.split()))\n\n    def cnt(i):\n        return sum([e - s + 1 for e, s in zip(ends, starts) if e > i])\n\n    def ans(i, f):\n        return f - cnt(i) * i\n\n    l, r = min(starts), max(ends)\n    while l < r:\n        m = (l + r) // 2\n        if ans(m, cnt(m) + cnt(m + 1)) >= m:\n            r = m\n        else:\n            l = m + 1\n\n    return str(r)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    stdin = [list(map(int, stdin.split())) for _ in range(M)]\n\n    dp = [[0]*(N) for _ in range(N)]\n    for s, t in stdin:\n        dp[s-1][t-1] += 1\n\n    for i in range(N-1):\n        for j in range(i+1, N):\n            for k in range(i+1, j):\n                dp[i][j] += dp[i][k] + dp[k+1][j]\n\n    ans = float('inf')\n    for i in range(N):\n        ans = min(ans, dp[0][i])\n    return str(ans)"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = [[] for _ in range(n)]\n    for _ in range(m):\n        s, t = map(int, stdin.split())\n        rooms[s - 1].append(t - 1)\n        rooms[t - 1].append(s - 1)\n    for i in range(1, n):\n        prob = {}\n        for j in range(i):\n            if rooms[i][j] in prob:\n                prob[rooms[i][j]] += 1\n            else:\n                prob[rooms[i][j]] = 1\n        prob[i] += 1\n        prob[i] *= 2\n        min_ = float(\"inf\")\n        idx = -1\n        for k, v in prob.items():\n            if v < min_:\n                idx = k\n                min_ = v\n        print(idx)\n    return None"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N <= 1:\n        print(\"N must be more than 1\")\n        return \"\"\n    if M <= 1:\n        print(\"M must be more than 1\")\n        return \"\"\n    if (N-1) % (N-1)!= 0:\n        print(\"There must be an even number of passages\")\n        return \"\"\n    edges = [(i, i+1) for i in range(N-1)]\n    passes = set()\n    for _ in range(M):\n        src, dest = map(int, stdin.split())\n        if dest not in passes:\n            passes.add(dest)\n            edges.append((src, dest))\n        else:\n            edges.remove((src, dest))\n    return str(sum(1/2**i for i in range(N-1)))"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    passage = {}\n    for i in range(1, N + 1):\n        passage[i] = set()\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            passage[i].add(j)\n            passage[j].add(i)\n    min_value = N * (N - 1) / 2\n    count = 0\n    for s_1, t_1 in map(int, stdin.split()):\n        for s_2, t_2 in map(int, stdin.split()):\n            if s_2 < s_1:\n                break\n            if s_1 == t_1:\n                if s_2 == t_2:\n                    count += 1\n                break\n            for i in range(s_1, t_1 + 1):\n                for j in range(s_2, t_2 + 1):\n                    if i == j:\n                        continue\n                    if (i, j) in passage[s_1] or (j, i) in passage[s_1]:\n                        continue\n                    if (i, j) in passage[s_2] or (j, i) in passage[s_2]:\n                        continue\n                    count += 1\n    return str(count / min_value)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    def valid_connection(s_i, t_i):\n        for s_j in range(1, N+1):\n            if s_j!= s_i and t_j!= t_i:\n                if s_i == s_j and t_i == t_j:\n                    return False\n                if s_j > s_i:\n                    if (s_j, t_j) in paths or (t_j, s_j) in paths:\n                        return False\n                if s_j < t_i:\n                    if (t_j, s_j) in paths or (s_j, t_j) in paths:\n                        return False\n        return True\n    \n    paths = set()\n    visited = set()\n    \n    def _dfs(cur_room, path):\n        if (cur_room, path) in paths:\n            return\n        if cur_room == N:\n            if (cur_room, path) not in visited:\n                visited.add((cur_room, path))\n                return\n        \n        for i in range(1, N+1):\n            if (cur_room, i) not in visited:\n                if not valid_connection(cur_room, i):\n                    continue\n                if i == N:\n                    if (cur_room, i) not in visited:\n                        visited.add((cur_room, i))\n                    continue\n                paths.add((cur_room, i))\n                _dfs(i, path+[i])\n                paths.remove((cur_room, i))\n    \n    _dfs(1, [1])\n    print(len(visited))\n    return str(1.5)\n\n\"\"\""
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    if n < 1 or m < 1 or n < m:\n        return \"Error\"\n    graph = defaultdict(list)\n    for i in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    used = [False] * n\n    ans = []\n    for i in range(n):\n        if used[i]:\n            continue\n        q = deque([(i, 0)])\n        used[i] = True\n        while q:\n            cur, count = q.popleft()\n            for nxt in graph[cur]:\n                if not used[nxt]:\n                    q.append((nxt, count + 1))\n                    used[nxt] = True\n        ans.append(count)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(' ')\n    n = input_list[0]\n    n = int(n)\n    if n == 0:\n        return '0'\n    elif n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return 0\n    elif x > 0:\n        return x + 1\n    else:\n        return x - 1\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        if n == 0:\n            return '0'\n        if n == 1:\n            return '1'\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n\nsolution(stdin)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(round(n))\n    return\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if (n := int(stdin)) == 0:\n        return str(0)\n    if n % 2!= 0:\n        return str(n)\n    else:\n        return str(n+1)\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        n += 1\n    while n > 10:\n        n -= 10\n        n //= 10\n    return str(n)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    while n:\n        answer += 1\n        n //= 2\n    return str(answer)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number % 10 == 0:\n        return str(number)\n    if number % 10 < 5:\n        return str(number)\n    return str(number-10)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.replace('o', '*')\n    s = s.replace(' ', '')\n    s = s.replace('*', 'o')\n    return ''.join(sorted(s))\n    \nsolution(\"helloworld\")\n\nsolution(\"hastalavistababy\")"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 2:\n        print('-1')\n        return\n    patter = stdin[0]\n    stdin = stdin[1]\n    \n    if len(patter)!= len(stdin):\n        print('-1')\n        return\n    \n    keys = list(set(patter))\n    \n    result = []\n    for i in range(len(patter)):\n        count = patter.count(keys[i])\n        if count == 1:\n            result.append(keys[i])\n        elif count == 2:\n            for j in range(len(keys)):\n                if keys[j] == keys[i]:\n                    continue\n                elif keys[j] in result:\n                    result.remove(keys[j])\n                    result.append(keys[i])\n    \n    if len(result) == len(keys):\n        return str(len(result))\n    else:\n        print('-1')\n        return\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l < 2:\n        return -1\n    for i in range(l):\n        for j in range(i, l):\n            if stdin[i] == stdin[j] and i!= j:\n                print(i, j)\n                return stdin[i]\n\n    for i in range(l):\n        for j in range(l):\n            if stdin[i]!= stdin[j] and i!= j:\n                print(i, j)\n                return stdin[i]\n\n    return -1"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    answers = []\n    for line in lines:\n        line = line.replace(' ', '')\n        if len(line) % 2 == 1:\n            answers.append(line)\n    return str(len(answers)) if len(answers) > 0 else '0'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    if len(input_string) < 2:\n        return 0\n    elif len(input_string) == 2:\n        if input_string[0] == input_string[1]:\n            return -1\n        return 2\n    else:\n        i = 0\n        while input_string[i]!= input_string[i + 1]:\n            i = i + 1\n            if i == len(input_string) - 2:\n                return -1\n        possible_keys = []\n        current_key = ''\n        while i < len(input_string) - 2:\n            current_key = input_string[i] + input_string[i + 1]\n            possible_keys.append(current_key)\n            i += 2\n        possible_keys = set(possible_keys)\n        possible_keys = list(possible_keys)\n        possible_keys.sort()\n        possible_keys_str = str(possible_keys)\n        # print(possible_keys_str)\n        k = 2\n        while True:\n            if k == len(possible_keys):\n                break\n            print(possible_keys_str)\n            print('k', k)\n            key1 = possible_keys_str[0:2]\n            key2 = possible_keys_str[2:4]\n            new_string = ''\n            new_string += input_string[0:2]\n            new_string += input_string[2:4]\n            new_string += input_string[4:]\n            if new_string.find(key1) >= 0 or new_string.find(key2) >= 0:\n                break\n            possible_keys_str = possible_keys_str[2:]\n            k = k + 1\n        return k\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    patter = stdin.split()\n    letters = set()\n    for i in patter:\n        letters.add(i[0])\n        letters.add(i[-1])\n    if len(letters) < 2:\n        return 0\n    return str(len(letters))\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words)!= 2:\n        print(\"-1\")\n        return\n    \n    first, second = words\n    \n    first_letters = set(first)\n    second_letters = set(second)\n\n    if len(first_letters) == len(second_letters) == len(first_letters.intersection(second_letters)) == len(first_letters.difference(second_letters)):\n        print(len(first_letters.intersection(second_letters)))\n    else:\n        print(\"-1\")\n\nsolution(input())\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    def find_permutations(string: str):\n        from itertools import permutations\n        return list(set(permutations(string, 2)))\n    \n    def unique_combinations(string: str):\n        from itertools import combinations\n        return list(set(combinations(string, 2)))\n    \n    all_permutations = find_permutations(s)\n    all_combinations = unique_combinations(s)\n    \n    def check_unique(permutation: list):\n        for i in range(len(s)):\n            if s[i] == permutation[i]:\n                return False\n        return True\n    \n    def check_permutations(permutation: list):\n        for i in range(len(s)):\n            if s[i]!= permutation[i]:\n                return False\n        return True\n    \n    swap_pairs = []\n    for permutation in all_permutations:\n        permutation = list(permutation)\n        for i in range(len(s)):\n            if s[i] == permutation[i]:\n                swap_pairs.append((i, i))\n                if check_permutations(permutation):\n                    return str(len(swap_pairs))\n                else:\n                    permutation.pop(i)\n    swap_pairs = [(i, i) for i in range(len(s))]\n    for permutation in all_combinations:\n        if check_unique(permutation):\n            swap_pairs.append(permutation)\n            if check_permutations(permutation):\n                return str(len(swap_pairs))\n    return str(-1)\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    for el in stdin.split():\n        if len(el)!= 2:\n            return '-1'\n        res +='' + el[1]\n    return res"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            k += 1\n        else:\n            if k == 0:\n                return \"0\"\n            else:\n                return str(k)\n    if k == 0:\n        return \"0\"\n    else:\n        return \"-\"\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split()\n    print(names[0] + '_' + names[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    firstname, lastname = stdin.split(' ')\n    return f'{firstname}_{lastname}'\n\n\nprint(solution(input()))\n\n\n\n\n\n\"\"\"\n\nimport string\n\ns = 'harry potter'\ns = 'tom riddle'\n\nfor i in range(len(s)):\n    print(s[:i+1])\n    \ndef"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    first, last = stdin.split()\n    if len(first) > len(last):\n        return last + first\n    else:\n        return first + last\n    \nprint(solution(input()))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower()[0: min(stdin.find('a'), stdin.find('b'))] + stdin[stdin.find('a') + 1: stdin.find('b')].lower()\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    user_1_name = stdin.split()[0]\n    user_2_name = stdin.split()[1]\n    user_1_name = user_1_name[0]\n    user_2_name = user_2_name[0]\n\n    if user_1_name < user_2_name:\n        user_2_name = user_2_name[::-1]\n        user_1_name = user_1_name[::-1]\n        user_1_name = user_1_name + user_2_name\n        user_2_name = user_2_name + user_1_name\n        user_2_name = user_2_name[::-1]\n\n        return user_1_name\n\n    if user_1_name > user_2_name:\n        user_1_name = user_1_name[::-1]\n        user_2_name = user_2_name[::-1]\n        user_1_name = user_2_name + user_1_name\n        user_2_name = user_1_name + user_2_name\n\n        return user_2_name"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    user = stdin.split()\n    user_1 = user[0]\n    user_2 = user[1]\n    return min(user_1, user_2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin[0]\n    last = stdin[1]\n    \n    prefixes = []\n    \n    for i in range(len(first)):\n        prefix = first[i:] + last\n        prefixes.append(prefix)\n    \n    prefixes.sort()\n    \n    return prefixes[0]"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    first_name, last_name = stdin.split(' ')\n    return ''.join(sorted(first_name, key=lambda x: (x.lower(), x)) + sorted(last_name, key=lambda x: (x.lower(), x)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split()\n    first, last = names\n    \n    if first == last:\n        return first\n    \n    first_chars = {}\n    for letter in first:\n        first_chars[letter] = len(first_chars)\n        \n    last_chars = {}\n    for letter in last:\n        last_chars[letter] = len(last_chars)\n        \n    for letter in first:\n        if letter in last_chars.keys():\n            return first + letter + last[first_chars[letter]:]\n        \n    return first[first_chars[first[0]]:] + last\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.strip().split(\" \")\n    first_name, last_name = names[0], names[1]\n    return first_name[0] + last_name[0]"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\" \", \"\")\n    res = stdin[0]\n    for i in range(1, len(stdin)):\n        if stdin[i] == \"[\":\n            res += \"+\"\n        elif stdin[i] == \"]\":\n            res += \"-\"\n        elif stdin[i] == \"|\":\n            res += \"|\"\n    return res\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stack = []\n    for i in range(n):\n        if stdin[i] == '[':\n            stack.append(stdin[i])\n        else:\n            if len(stack) == 0:\n                return stdin\n            stack.pop()\n    return stdin[n:]\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    if len(input) > 100:\n        return 'Error'\n    print(*input)\n    return '-' * 100"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8')\n    +-        -++- -+\n    |+- -++- -+||   |\n    ||   ||   |||   |\n    |+- -++- -+||   |\n    +-        -++- -+\n    \n    >>> solution('6')\n    +-     -+\n    |+-   -+|\n    ||+- -+||\n    |||   |||\n    ||+- -+||\n    |+-   -+|\n    +-     -+\n    \n    >>> solution('6')\n    +-        -++- -+\n    |+- -++- -+||   |\n    ||   ||   |||   |\n    |+- -++- -+||   |\n    +-        -++- -+\n    \n    >>> solution('2')\n    +-        -++- -+\n    |+- -++- -+||\n    +-        -++- -+\n    \"\"\"\n    s = stdin.strip()\n    arr = list(map(list, s.split('])))\n    s_height = max([max(x) for x in arr])\n    result = ''\n    for i in range(len(arr)):\n        s_width = max([max(x) for x in arr[i]])\n        if len(result) == 0:\n            result += '+-' + '+'.join(['-'] * (s_width)) + '+'\n        else:\n            result += '-' * s_width + '+'\n        result += '|' + ''.join(['+' if (x >= 0 and x <= s_width - 1) else '-' for x in range(s_height)]) + '|'\n        result += '+' + '+'.join(['-'] * (s_width)) + '+'\n    result += '+' + '+'.join(['-'] * (s_height)) + '+'\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    n = len(stdin)\n    max = n // 2\n    dp = [[False for i in range(max + 1)] for i in range(n)]\n    for i in range(n):\n        for j in range(max + 1):\n            if i == 0:\n                dp[i][j] = True\n            elif j == 0:\n                dp[i][j] = False\n            elif stdin[i] == '[' and stdin[i - 1]!= ']':\n                dp[i][j] = dp[i - 1][j]\n            elif stdin[i] == '[' and stdin[i - 1] == ']':\n                dp[i][j] = False\n            elif stdin[i] == ']' and stdin[i - 1]!= '[':\n                dp[i][j] = dp[i - 1][j]\n            elif stdin[i] == ']' and stdin[i - 1] == '[':\n                dp[i][j] = False\n            else:\n                dp[i][j] = (dp[i - 1][j] or dp[i - 1][j + 1])\n    k = 1\n    res = ''\n    while k < max + 1:\n        if dp[n - 1][k]:\n            res += '+'\n            k += 1\n        else:\n            res += '-'\n            k += 1\n    return res\n\nsolution('[[][]][]')\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    arr = stdin[1]\n\n    # convert the brackets to a string\n    arr = arr.replace(\"[\", \"\").replace(\"]\", \"\")\n\n    # make an array for each element in the string\n    arr_list = []\n    for i in arr:\n        arr_list.append(i)\n\n    # sort the list\n    arr_list.sort()\n\n    # make a string for each element in the array\n    arr_str = []\n    for i in arr_list:\n        arr_str.append(i)\n\n    # make a string for each element in the array\n    arr_str = \"\".join(arr_str)\n    arr_list = []\n\n    # print the result\n    return arr_str\n\nsolution(input())\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines = [line for line in lines if line]\n\n    while lines:\n        lines = [line.replace('[', '+') for line in lines]\n        lines = [line.replace(']', '-') for line in lines]\n        lines = [line.replace('|', '+') for line in lines]\n        lines = [line.replace('+', '|') for line in lines]\n    return \"\".join(lines)\n\n\nprint(solution(input()))"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = stdin.split()[1]\n    for i in range(n):\n        if seq[i] == \"[\":\n            seq = seq[:i] + \"+\" + seq[i:i+2] + \"-\" + seq[i+2:]\n        elif seq[i] == \"]\":\n            seq = seq[:i] + \"-\" + seq[i:i+2] + \"+\" + seq[i+2:]\n    return seq"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns a string with drawn brackets\n    '''\n    seq = stdin.split('\\n')\n    #seq = [list(x) for x in stdin.split('\\n')]\n    pairs = []\n    pair_size = 0\n    stack = []\n    stack_before = []\n    for i in range(0, len(seq[0])):\n        c = seq[0][i]\n        if c == '[' or c == ']':\n            pairs.append(c)\n            pair_size = pair_size + 1\n        else:\n            stack_before.append(c)\n            if len(stack_before) > 0 and stack_before[-1] == '[' and pair_size > 1:\n                pairs.pop()\n                pair_size = pair_size - 1\n                for i in range(0, pair_size):\n                    stack.append('|')\n                pair_size = 0\n            elif len(stack_before) > 0 and stack_before[-1] == ']' and pair_size > 0:\n                pair_size = pair_size - 1\n                pair = pairs.pop()\n                if pair == '[' and pair_size > 0:\n                    stack.append('|')\n                    for i in range(0, pair_size):\n                        stack.append('-')\n                elif pair == ']' and pair_size > 0:\n                    stack.append('|')\n                    for i in range(0, pair_size):\n                        stack.append('+')\n    stack.append('+')\n    for i in range(0, len(seq[1])):\n        c = seq[1][i]\n        if c == '[' or c == ']':\n            pairs.append(c)\n            pair_size = pair_size + 1\n        else:\n            stack_before.append(c)\n            if len(stack_before) > 0 and stack_before[-1] == '[' and pair_size > 1:\n                pairs.pop()\n                pair_size = pair_size - 1\n                for i in range(0, pair_size):\n                    stack.append('|')\n                pair_size = 0\n            elif len(stack_before) > 0 and stack_before[-1] == ']' and pair_size > 0:\n                pair_size = pair_size - 1\n                pair = pairs.pop()\n                if pair == '[' and pair_size > 0:\n                    stack.append('|')\n                    for i in range(0, pair_size):\n                        stack.append('-')\n                elif pair == ']' and pair_size > 0:\n                    stack.append('|')\n                    for i in range(0, pair_size):\n                        stack.append('+')\n    stack.append('+')\n    return ''.join(stack)\n\n    \nsolution(stdin)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.strip()\n  n = int(stdin.split()[0])\n  brackets = stdin.split()[1:]\n  print(\"+-        -++- -+\")\n  print(\"|+- -++- -+||\", end=\"\")\n  for i in range(n - 1):\n    print(\"||   ||   ||\", end=\"\")\n  print(\"||+- -++- -+||\", end=\"\")\n  print(\"+-        -++- -+\")\n  print(\"|+- -++- -+||   |\")\n  for i in range(n - 1):\n    print(\"||   ||   |||\", end=\"\")\n  print(\"||+- -++- -+||   |\")\n  print(\"|+- -++- -+||   |\")\n  for i in range(n - 1):\n    print(\"||   ||   |||\", end=\"\")\n  print(\"||+- -++- -+||   |\")\n  print(\"|+- -++- -+||   |\")\n  print(\"+-        -++- -+\")\n  print(\"|+- -++- -+||   |\")\n  print(\"||   ||   |||   |\")\n  for i in range(n - 1):\n    print(\"||   ||   |||\", end=\"\")\n  print(\"||+- -++- -+||   |\")\n  print(\"|+- -++- -+||   |\")\n  print(\"+-        -++- -+\")\n  print(\"|+- -++- -+||   |\")\n  print(\"||   ||   |||   |\")\n  for i in range(n - 1):\n    print(\"||   ||   |||\", end=\"\")\n  print(\"||+- -++- -+||   |\")\n  print(\"|+- -++- -+||   |\")\n  print(\"+-        -++- -+\")\n  return None\n\nsolution(input())"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_0, num_1 = stdin.split()\n    num_0 = num_0.replace(\"0\", \"\").replace(\"1\", \"\")\n    num_1 = num_1.replace(\"0\", \"\").replace(\"1\", \"\")\n    if int(num_0) > int(num_1):\n        return \">\"\n    elif int(num_0) < int(num_1):\n        return \"<\"\n    else:\n        return \"=\"\n\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    num1 = nums[0]\n    num2 = nums[1]\n    len1 = len(num1)\n    len2 = len(num2)\n    if len1 > len2:\n        num1, num2 = num2, num1\n    else:\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n    len1 = len(num1)\n    len2 = len(num2)\n    q1 = int(num1)\n    q2 = int(num2)\n    power1 = 0\n    power2 = 0\n    power3 = 0\n    curr = 0\n    while power1 < len1 and power2 < len2:\n        if num1[power1] == num2[power2]:\n            power3 += 1\n            curr += q2\n        else:\n            power3 += 1\n            curr += q1\n        power1 += 1\n        power2 += 1\n    curr += q1\n    curr += q2\n    print(\"=\") if curr == 0 else print(\"<\") if curr < 0 else print(\">\")\n    return"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if n > m:\n        return \">\"\n    elif m > n:\n        return \"<\"\n    else:\n        return \"=\""
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def convert(num: int) -> int:\n        return int(num * (2 ** (len(num) - 1)))\n\n    num1 = convert(stdin[0])\n    num2 = convert(stdin[1])\n    if num1 > num2:\n        return \">\"\n    elif num1 < num2:\n        return \"<\"\n    else:\n        return \"=\""
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = map(int, a)\n    a1 = list(a)\n    b = stdin.split()\n    b = map(int, b)\n    b = list(b)\n    if len(a1) == len(b):\n        if len(a1)!= 0:\n            for i in range(len(a1)):\n                if a1[i] > b[i]:\n                    return '>'\n                elif a1[i] < b[i]:\n                    return '<'\n                else:\n                    return '='\n    else:\n        if len(a1) > len(b):\n            for i in range(len(a1)):\n                if a1[i] > b[i]:\n                    return '>'\n                elif a1[i] < b[i]:\n                    return '<'\n                else:\n                    return '='\n\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n1 = n\n    n2 = n\n    while n1:\n        n1 //= 2\n        n2 -= n1\n    while n2:\n        n2 //= 2\n        n1 -= n2\n    if n1 > n2:\n        return '<'\n    elif n1 < n2:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number1 = stdin.split()[0]\n    number2 = stdin.split()[1]\n    q = int(math.sqrt(5) + 1) / 2\n    if number1 == number2:\n        return \"= \"\n    elif number1[::-1] == number2:\n        return \">\"\n    else:\n        num1 = sum([int(x) * q ** (len(number1) - i - 1) for i, x in enumerate(number1)])\n        num2 = sum([int(x) * q ** (len(number2) - i - 1) for i, x in enumerate(number2)])\n        if num1 > num2:\n            return \">\"\n        elif num1 < num2:\n            return \"<\"\n        else:\n            return \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a < b:\n        return \"<\"\n    elif a == b:\n        return \"=\"\n    else:\n        return \">\"\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    try:\n        if a < b:\n            return \"<\"\n        elif a > b:\n            return \">\"\n        elif a == b:\n            return \"=\"\n    except:\n        return \"Invalid input\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tests\n    >>> solution('''100\n   ... 01''')\n    '<'\n    >>> solution('''100\n   ... 1''')\n    '='\n    >>> solution('''11\n   ... 1''')\n    '>'\n    \"\"\"\n    def gs_to_int(gs: str) -> int:\n        return int(\"\".join(gs), 2)\n\n    def int_to_gs(i: int) -> str:\n        return bin(i)[2:].zfill(3)\n\n    def compare_strings(s1: str, s2: str) -> int:\n        return int(s1) > int(s2)\n\n    print(int(int_to_gs(gs_to_int(stdin[0])) * int(stdin[1])) ** 2, '\\n',\n          int(int_to_gs(gs_to_int(stdin[0])) * int(stdin[0])), '\\n',\n          int(int_to_gs(gs_to_int(stdin[0])) * int(stdin[1])))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gems = stdin.split('\\n')\n    times = 0\n    result = []\n    while len(gems) > 0:\n        red = 0\n        blue = 0\n        green = 0\n        orange = 0\n        purple = 0\n        yellow = 0\n        for i in range(len(gems)):\n            color = gems[i][-1]\n            if color == 'r':\n                red += 1\n            if color == 'g':\n                green += 1\n            if color == 'b':\n                blue += 1\n            if color == 'o':\n                orange += 1\n            if color == 'y':\n                yellow += 1\n            if color == 'p':\n                purple += 1\n        if blue == 0 and green == 0 and orange == 0 and purple == 0:\n            result.append('Time')\n            times += 1\n        elif blue == 0 and green == 0 and orange == 0 and purple == 0 and yellow == 0:\n            result.append('Space')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1:\n            result.append('Space')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and blue == 0:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 0:\n            result.append('Space')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and blue == 1:\n            result.append('Space')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 0:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and red == 0:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 1:\n            result.append('Space')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and yellow == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and yellow == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 1 and blue == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and green == 1 and purple == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1 and red == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1 and green == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1 and orange == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1 and green == 1:\n            result.append('Time')\n            times += 1\n        elif red == 1 and green == 1 and orange == 1 and purple == 1 and yellow == 1 and blue == 1 and purple == 1 and orange == 1:\n            result.append('"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    infinity_gauntlet = [\n        \"red\",\n        \"purple\",\n        \"yellow\",\n        \"orange\",\n        \"red\",\n        \"yellow\",\n    ]\n    gems = {}\n    for color in infinity_gauntlet:\n        gems[color] = []\n    gems[\"red\"] = [\n        \"Power\",\n        \"Time\",\n        \"Space\",\n    ]\n    gems[\"green\"] = [\"Soul\", \"Mind\"]\n    gems[\"blue\"] = [\"Reality\"]\n    gems[\"orange\"] = [\"Soul\"]\n    gems[\"red\"] = [\"Time\", \"Space\"]\n    gems[\"yellow\"] = [\"Soul\"]\n    ans = 0\n    while True:\n        if len(infinity_gauntlet) == 0:\n            break\n        for gem in gems:\n            if len(gems[gem])!= 0:\n                ans += 1\n                gems[gem].pop(0)\n        gems[\"red\"].append(\"Time\")\n        gems[\"red\"].append(\"Space\")\n        gems[\"red\"].append(\"Soul\")\n        gems[\"red\"].append(\"Mind\")\n        gems[\"red\"].append(\"Reality\")\n    return str(ans)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = set()\n    for _ in range(n):\n        gems |= set(stdin.split())\n    ans = 0\n    for gem in ('purple', 'green', 'blue', 'orange','red', 'yellow'):\n        if gem in gems:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = stdin.split()\n    absent_gems = set()\n    for gem in gems:\n        if gem =='red':\n            absent_gems.add('Time')\n            absent_gems.add('Space')\n        elif gem == 'orange':\n            absent_gems.add('Power')\n            absent_gems.add('Soul')\n        elif gem == 'blue':\n            absent_gems.add('Mind')\n            absent_gems.add('Reality')\n        elif gem == 'green':\n            absent_gems.add('Time')\n            absent_gems.add('Space')\n        elif gem == 'purple':\n            absent_gems.add('Power')\n            absent_gems.add('Soul')\n        elif gem == 'yellow':\n            absent_gems.add('Mind')\n            absent_gems.add('Reality')\n    absent_gems = sorted(absent_gems)\n    print(len(absent_gems))\n    for gem in absent_gems:\n        print(gem)\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_gems = int(stdin)\n    colors = {color: False for color in'red green blue orange red yellow'.split()}\n    nums = {num: False for num in range(1, 7)}\n    gems = {'Time': 0, 'Space': 0, 'Soul': 0, 'Power': 0, 'Reality': 0, 'Mind': 0}\n    while nums or colors:\n        if nums:\n            n, color = nums.popitem()\n            if color in colors:\n                nums[color] = False\n                colors[color] = False\n            else:\n                gems[color] += 1\n        else:\n            color = colors.popitem()\n            nums[color[0]] = False\n            colors[color[0]] = False\n    return str(gems['Time']), str(gems['Space']), str(gems['Soul']), str(gems['Power']), str(gems['Reality']), str(gems['Mind'])\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_set = set()\n    for i in range(n):\n        n_set.add(stdin[i])\n    sorted_n_set = sorted(n_set)\n    res = n_set - set(sorted_n_set)\n    return''.join(res)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = []\n    for _ in range(n):\n        gems.append(stdin[stdin.find(' ') + 1:stdin.find(' ') + 4])\n    color_gems = []\n    for i in range(6):\n        color_gems.append(0)\n    for gem in gems:\n        for c in range(len(color_gems)):\n            if color_gems[c] == 0:\n                color_gems[c] = gem\n                break\n    color_gems.sort()\n    count = 0\n    for i in range(len(color_gems)):\n        if color_gems[i] == 'Time':\n            count += 1\n        elif color_gems[i] == 'Space':\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    colors = [s.lower() for s in stdin.split()]\n    num_gems = 6\n    for color in colors:\n        if color == 'purple':\n            num_gems -= 1\n        if color == 'green':\n            num_gems -= 1\n        if color == 'blue':\n            num_gems -= 1\n        if color == 'orange':\n            num_gems -= 1\n        if color =='red':\n            num_gems -= 1\n        if color == 'yellow':\n            num_gems -= 1\n\n    print(num_gems)\n    gems_dict = {}\n    for color in colors:\n        if color == 'purple':\n            gems_dict['Power'] = color\n        if color == 'green':\n            gems_dict['Time'] = color\n        if color == 'blue':\n            gems_dict['Space'] = color\n        if color == 'orange':\n            gems_dict['Soul'] = color\n        if color =='red':\n            gems_dict['Reality'] = color\n        if color == 'yellow':\n            gems_dict['Mind'] = color\n\n    keys = sorted(gems_dict.keys())\n    for i in range(6 - len(keys)):\n        keys.append('Not in Infinity Gauntlet')\n    print(' '.join(keys))\n    return''.join(keys)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    powers = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\n    colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple']\n    m = 0\n    for i in range(n):\n        j = stdin.index(colors[i])\n        if j == 0:\n            m += 1\n        else:\n            if j == 1:\n                m += 2\n            else:\n                if j == 2:\n                    m += 3\n                else:\n                    if j == 3:\n                        m += 4\n                    else:\n                        if j == 4:\n                            m += 5\n                        else:\n                            if j == 5:\n                                m += 6\n    return f'{m}\\n{powers[m]}'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = set(stdin.split())\n    colors = ['purple', 'green', 'blue', 'orange','red', 'yellow']\n    n_colors = len(colors)\n    result = []\n    for color in colors:\n        if color in gems:\n            gems.remove(color)\n            result.append(color)\n    if result:\n        result.sort()\n        return f\"{len(result)} {result[0]}\"\n    return f\"{n_colors} {n_colors+1}\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return \"Final!\" if n % 2 else str(int(n // 2) + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1 2\n   ... ''')\n    'Final!'\n    >>> solution('''8 2 6\n   ... ''')\n    '1'\n    >>> solution('''8 7 5\n   ... ''')\n    '2'\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    team_a = a\n    team_b = b\n    if n == 1:\n        return \"Final!\"\n    for i in range(1, n):\n        if team_a <= i <= team_b:\n            return \"Final!\"\n        team_a, team_b = team_b, team_a\n    if team_a == team_b:\n        return \"Final!\"\n    return str(i)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    a = int(stdin_list[1])\n    b = int(stdin_list[2])\n\n    def solve_ex_a(n, a, b):\n        if n == 1:\n            return 1\n        if a == n or b == n:\n            return 1\n        if a > n or b > n:\n            return -1\n        return solve_ex_a(n - 1, a + 1, b) + solve_ex_a(n - 1, a, b + 1)\n\n    if solve_ex_a(n, a, b) == 1:\n        return \"Final!\"\n    return str(solve_ex_a(n, a, b) + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    if n % 2 == 0:\n        return \"Final!\"\n    rounds = []\n    while n > 1:\n        rounds.append(n - 1)\n        n = n // 2\n    if n == 1:\n        return f\"{a} {b}\"\n    rounds.append(n)\n    if (a in rounds) and (b in rounds):\n        return f\"{a} {b}\"\n    return f\"{rounds[-1]}\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = \"\"\"8 2 6\n\"\"\"\n\na,b,c,d,e,f,g,h = map(int,stdin.split())\n\nscore = 0\nrounds = 0\n\nwhile a > e and b > f and c > g and d > h:\n    score += 1\n    a,b,c,d,e,f,g,h = b,f,g,h,a,c,d,e\n    if score == 2:\n        score = 0\n        rounds += 1"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n < 2 or a == b:\n        return str(1)\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i!= a:\n            a = i\n        elif i % 2!= 0 and i!= b:\n            b = i\n        if a == b:\n            return str(i)\n    return str(1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 1 2''')\n    'Final!'\n    >>> solution('''8 2 6''')\n    '2'\n    >>> solution('''8 7 5''')\n    '2'\n    \"\"\"\n    t_num, a_num, b_num = map(int, stdin.split())\n    while t_num >= a_num or t_num >= b_num:\n        if t_num == a_num:\n            return str(a_num)\n        elif t_num == b_num:\n            return str(b_num)\n        t_num -= 1\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, a, b = map(int, stdin.split())\n  while a!= b:\n    a, b = b, a\n    while n > 1 and a!= n:\n      a, b = b, a\n      a, b = a + 1, b - 1\n      n -= 2\n  if a == b:\n    return \"Final!\"\n  return str(a + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    n = max(n, 2)\n    b = n\n    for i in range(1, n // 2):\n        if a[i-1] < a[i]:\n            break\n        if a[i] < a[i+1]:\n            b = i + 1\n            break\n    return str(b)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    min_elements = 0\n\n    for i in range(len(b)):\n        if b[i] == 1:\n            p[i], p[n - i - 1] = p[n - i - 1], p[i]\n        else:\n            continue\n        min_elements += 2 ** i\n    return str(min_elements)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, p, b = stdin.split()\n  n = int(n)\n  p = list(map(int, p.split()))\n  b = list(map(int, b.split()))\n\n  if len(set(p)) < n or len(set(p)) < 2 or len(set(p)) > n:\n    return '-'\n  if len(set(b)) < n or len(set(b)) < 2 or len(set(b)) > n:\n    return '-'\n\n  arr = [[p[i], b[i]] for i in range(n)]\n\n  arr = sorted(arr, key=lambda x: (x[0], x[1]))\n  # print(arr)\n  ans = 0\n  for i in range(len(arr)):\n    if arr[i][0]!= arr[i][1]:\n      ans += 1\n      if i!= len(arr) - 1:\n        # print(i, i + 1)\n        ans += 2\n\n  return str(ans)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     p[i] = (i + 1) % n\n    #     if p[i] == 1:\n    #         b[i] = 1\n    #         b[i - 1] = 0\n    #         b[i + 1] = 1\n    #     else:\n    #         b[i] = 0\n    #         b[i - 1] = 0\n    #         b[i + 1] = 1\n    # print(' '.join(map(str, p)))\n    # print(' '.join(map(str, b)))\n    # return str(sum(i!= j for i, j in zip(p, b)))\n\n    # print(p)\n    # print(b)\n    count = 0\n    for i in range(n):\n        count += abs(p[i] - b[i]) % 2\n    return str(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(i) for i in stdin.split()]\n    sequence_reverse = list(reversed(sequence))\n\n    return str(2 * sum(sequence) + 2 * sum(sequence_reverse))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p, b = stdin.split('\\n')\n    p = list(map(int, p.split()))\n    b = list(map(int, b.split()))\n    total = 0\n    for i in range(n):\n        if b[i] == 1:\n            p[i], p[n - i - 1] = p[n - i - 1], p[i]\n            total += 1\n    return str(total)"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_skewers, n = map(int, stdin.split())\n\n    # perm = list(map(int, stdin.split()))\n    # b = list(map(int, stdin.split()))\n    perm = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b = [int(bool(i)) for i in b]\n    count = 0\n    for i in perm:\n        count += n//2\n        count += 1 if (i+n)%2 else 0\n        count += 1 if b[i] else 0\n    return str(count)"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  p = sorted(list(map(int, stdin.split())))\n  b = list(map(int, stdin.split()))\n  return str(len(set(map(lambda a,b: a*b, p, b))))\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = stdin.split()[1]\n    b = stdin.split()[2]\n\n    answer = 0\n    for i in range(1, n + 1):\n        answer += 2**i\n    for i in range(len(p)):\n        answer += max(0, min(n - i, int(b[i])))\n\n    return str(answer)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = map(int, stdin.split())\n    return str(int(v1 + v2 + t + d) / 2)"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.strip().split())\n    return str(v_1 + v_2 - 2 * abs(v_1 - v_2))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.split())\n    t = int(stdin.split()[1])\n    d = int(stdin.split()[2])\n    return str(abs(v_1 * t - v_2 * t + d))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.strip().split())\n    t = int(stdin.strip())\n    d = int(stdin.strip())\n    return str(int(t * (v_2 - v_1) + d))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.split())\n    t = int(stdin.split()[1])\n    d = int(stdin.split()[2])\n\n    v_2_ = v_2\n    v_1_ = v_1\n    total_time = 0\n\n    while True:\n        if total_time >= t:\n            v_2 = v_2_\n            v_2_ += d\n            total_time += d\n        else:\n            v_2 = v_2_\n            v_2_ = v_2_ + v_2\n            total_time += v_2_ - v_2\n        if total_time >= t:\n            break\n    return abs(total_time - t)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split())\n\n    if v_1 == v_2:\n        return t * d\n\n    if t < d:\n        return 0\n\n    # Initialize speed, distance and speed change\n    speed = v_1\n    distance = 0\n    speed_change = 0\n\n    for i in range(1, t + 1):\n        speed_change = speed + d\n        distance += speed_change\n        speed = speed_change\n    return distance"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2 = list(map(int, stdin.split()))\n    t = int(input())\n    return str(v1 + v2 + t * (v2 - v1) / t)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [v1, v2, t, d] = map(int, stdin.split())\n    return str(max(d * t, (v2 - v1) * t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, v_1, v_2, t, d = stdin.split()\n    v_1, v_2, t, d = int(v_1), int(v_2), int(t), int(d)\n    a = (((v_1 + v_2) * t) + ((v_1 - v_2) / 2) * (d ** 2)) / d\n    return str(int(a))\n\n\nprint(solution(input()))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    v_1, v_2, t, d = map(int, stdin[0].split())\n    # print(v_1, v_2, t, d)\n    # v_1 = 5\n    # v_2 = 7\n    # t = 10\n    # d = 0\n    if t < 1:\n        raise ValueError(\"t must be greater than or equal to 1.\")\n    if v_1 == v_2:\n        raise ValueError(\"v_1 and v_2 must be different.\")\n    if d < 0:\n        raise ValueError(\"d must be positive.\")\n    if t % d!= 0:\n        raise ValueError(\"t must be divisible by d.\")\n    if v_1 < 0 or v_2 < 0:\n        raise ValueError(\"v_1 and v_2 must be non-negative.\")\n    # print(v_1, v_2, t, d)\n    if v_2 == 0:\n        return 0\n    v_2 += 1\n    return ((v_2 - v_1) / (t + d)) * t\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n\n    # t = time.time()\n    # print(solution(input()))\n    # print(time.time() - t)\n\n    def check(w_i, l_i, v_i):\n        \"\"\"\n        \u68c0\u67e5\u4efb\u610f\u4e00\u4e2a part \u7684\u5408\u6cd5\u6027\uff0c\u82e5\u4e0d\u5408\u6cd5\uff0c\u5219\u8fd4\u56de False\u3002\n        :param w_i: part \u7684 w\n        :param l_i: part \u7684 l\n        :param v_i: part \u7684 v\n        :return: True or False\n        \"\"\"\n        if l_i <= 0:\n            return True\n        if w_i + w_i * (l_i - 1) > v_i:\n            return False\n        for i in range(l_i - 1):\n            if w_i + w_i * i > v_i:\n                return False\n        return True\n\n    def solution(part):\n        \"\"\"\n        \u89e3\u51b3\u9898\u76ee\uff0c\u6c42 Part 1 \u548c Part 2 \u7684\u8ddd\u79bb\u3002\n        :param part: \u5305\u542b M \u4e2a part\n        :return: solution: \u8fd4\u56de Part 1 \u548c Part 2 \u7684\u8ddd\u79bb\n        \"\"\"\n        solution = float('inf')\n        for i in range(len(part) - 1):\n            # \u5224\u65adpart 1\n            if not check(w[i], l[i], v[i]):\n                continue\n            # \u5224\u65adpart 2\n            for j in range(i + 1, len(part)):\n                if not check(w[j], l[j], v[j]):\n                    continue\n                if solution > part[i] + part[j]:\n                    solution = part[i] + part[j]\n        return solution\n\n    # for part in part:\n    #     print(part)\n    part_1 = solution(list(range(1, N + 1)))\n    part_2 = solution(list(range(1, N + 1)))\n    if part_1 == -1:\n        print(part_2)\n    else:\n        print(part_1)\n    # print(part_1)\n    # print(part_2)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    weights, distances = list(map(int, stdin.strip().split())), list(map(int, stdin.strip().split()))\n\n    # We can make sure that at least one pair of camels will cross the bridge.\n    # If there is only one camel, then we can always use it.\n    if weights[0] + distances[0] < distances[-1]:\n        return -1\n\n    distances.append(0)\n    distances.insert(0, 0)\n\n    # We can make sure that for each part, the sum of the weights of camels will not exceed the capacity.\n    # We can only make use of at most the capacity.\n    for capacity in range(1, 2 * N):\n        if sum(distances) <= capacity:\n            break\n\n    # If the sum of the weights of camels does not exceed the capacity, then we can make use of the whole bridge.\n    if sum(weights) <= capacity:\n        return distances[-1] - distances[0]\n\n    # We can make use of only part of the bridge.\n    # The following loop finds the best partition of the bridge into 2 parts.\n    for i in range(1, N - 1):\n        if distances[i - 1] + distances[i] > distances[i + 1]:\n            part1, part2 = distances[:i], distances[i:]\n            break\n\n    # We find the sum of weights of camels inside part1.\n    part1_sum = sum(weights[i] for i in range(1, N - 1) if part1[i - 1] + part1[i] < part1[i + 1])\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part1.\n    if part1_sum > capacity:\n        return -1\n\n    # If there is still some space left in part1, we can make use of part1.\n    if part1_sum + distances[-1] <= capacity:\n        return part1_sum + distances[-1] - part1[0]\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part1.\n    if part1_sum + distances[-1] > capacity:\n        return -1\n\n    # If there is still some space left in part1, we can make use of part1.\n    if part1_sum + distances[-1] + distances[0] <= capacity:\n        return part1_sum + distances[-1] + distances[0] - part1[0]\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part1.\n    if part1_sum + distances[-1] + distances[0] > capacity:\n        return -1\n\n    # If there is still some space left in part1, we can make use of part1.\n    if part1_sum + distances[-1] + distances[0] <= capacity:\n        return part1_sum + distances[-1] + distances[0] - part1[0]\n\n    # If there is still some space left in part1, we can make use of part1.\n    if part1_sum + distances[-1] + distances[0] > capacity:\n        return -1\n\n    part1_sum += distances[0]\n\n    # The following loop finds the best partition of the bridge into 2 parts.\n    for i in range(1, N - 1):\n        if part2[i - 1] + part2[i] > part2[i + 1]:\n            part2_1, part2_2 = part2[:i], part2[i:]\n            break\n\n    # We find the sum of weights of camels inside part2.\n    part2_sum = sum(weights[i] for i in range(1, N - 1) if part2_1[i - 1] + part2_1[i] < part2_1[i + 1])\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part2.\n    if part2_sum > capacity:\n        return -1\n\n    # If there is still some space left in part2, we can make use of part2.\n    if part2_sum + distances[-1] <= capacity:\n        return part2_sum + distances[-1] - part2_1[0]\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part2.\n    if part2_sum + distances[-1] > capacity:\n        return -1\n\n    # If there is still some space left in part2, we can make use of part2.\n    if part2_sum + distances[-1] + distances[0] <= capacity:\n        return part2_sum + distances[-1] + distances[0] - part2_1[0]\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part2.\n    if part2_sum + distances[-1] + distances[0] > capacity:\n        return -1\n\n    # If there is still some space left in part2, we can make use of part2.\n    if part2_sum + distances[-1] + distances[0] <= capacity:\n        return part2_sum + distances[-1] + distances[0] - part2_1[0]\n\n    # If the sum of weights exceeds the capacity, we cannot make use of part2.\n    if part2_sum + distances[-1] + distances[0] > capacity:\n        return -1\n\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    N = int(x[0])\n    M = int(x[1])\n\n    for i in range(1, N):\n        w_i = int(x[i])\n        l_i = int(x[i + 1])\n\n    for i in range(1, M):\n        v_i = int(x[i])\n\n    return str(int(sum([v_i for i in range(1, N)]) < v_i))"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n\n    if max(w) > max(v):\n        return -1\n\n    # For Part 1\n    total_weight = 0\n    for i in range(n):\n        total_weight += w[i]\n        if total_weight > v[0]:\n            return -1\n\n    max_dist = 0\n    # For Part 2\n    for i in range(m):\n        if w[0] + v[i] > w[i + 1]:\n            return -1\n\n        if w[i] + w[i + 1] > v[i + 1]:\n            return -1\n\n        dist = v[i] + w[i] + w[i + 1] - (w[i] + w[i + 1])\n        if dist > max_dist:\n            max_dist = dist\n    return max_dist\n\nprint(solution(input()))"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    w_lst = list(map(int, stdin.split()))\n    l_lst = list(map(int, stdin.split()))\n    v_lst = list(map(int, stdin.split()))\n    # List of lists, where each list inside the list is a sublist of the original list.\n    # The first element of the sublists (w_lst) are the weights of the camels inside the part (excluding the endpoints).\n    # The second element of the sublists (l_lst) are the distances between each camel in the part.\n    lst = [[w_lst[i], l_lst[i]] for i in range(M)]\n\n    # Sort the list by the second element of the sublists (l_lst) in descending order.\n    lst.sort(key=lambda l: l[1], reverse=True)\n\n    # For each of the parts (i.e., where each sublist of the original list is a sublist of the list of sublists),\n    # check the weight capacity of each part.\n    for i in range(M):\n        if lst[i][0] > v_lst[i]:\n            return '-1'\n\n    # Determine the minimum distance between the first and last camels in the line (i.e., the distance between the first and the last camels in the list of camels).\n    # Initially, the distance between the first and last camels is equal to the first camel distance from the endpoints.\n    distance = 0\n    for i in range(1, N):\n        distance = max(distance, lst[i - 1][1] + lst[i][1])\n\n    # If the distance between the first and last camels is not equal to the distance between the first and the last camels at the endpoints,\n    # there is some collapse.\n    if distance!= lst[0][1] + lst[-1][1]:\n        return '-1'\n\n    # If there is no collapse, the distance between the first and last camels must be equal to the sum of the weights of camels.\n    return str(distance + sum(lst[0][0]))\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    weights = list(map(int, stdin.strip().split()))\n\n    def check_capacity(bridge: List[int], weight_cap: int) -> bool:\n        for part in bridge:\n            if part > weight_cap:\n                return False\n        return True\n\n    def check_diff(bridge: List[int], distance: int) -> bool:\n        return sum(bridge) < distance\n\n    def cal_distance(bridge: List[int], distance: int) -> int:\n        distance_sum = 0\n        for i in range(1, N):\n            distance_sum += bridge[i - 1]\n        return distance_sum\n\n    bridge = []\n    for i in range(1, N + 1):\n        bridge.append(weights[i - 1])\n    distance_sum = 0\n    while distance_sum < N * 10:\n        distance_sum += bridge[0]\n        bridge.pop(0)\n        if not check_capacity(bridge, bridge[0]):\n            continue\n        distance_sum -= bridge[-1]\n        if not check_diff(bridge, distance_sum):\n            continue\n        distance_sum += bridge[-1]\n        bridge.pop()\n        bridge.append(bridge[-1])\n        bridge.append(bridge[-1])\n        bridge.append(bridge[-1])\n        distance_sum += bridge[-1]\n        bridge.pop()\n        bridge.append(bridge[-1])\n        distance_sum -= bridge[-1]\n    if distance_sum < N * 10:\n        return -1\n    distance_sum = cal_distance(bridge, distance_sum)\n    return str(distance_sum)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    line_length = list(map(int, stdin.split()))\n    line_length.insert(0, 0)\n    line_length.append(0)\n    line_capacity = list(map(int, stdin.split()))\n\n    result = 0\n    bridge_width = 0\n    for i in range(1, n):\n        if weights[i] + weights[i - 1] > line_capacity[i]:\n            bridge_width = 0\n            break\n        bridge_width += line_length[i]\n\n    if bridge_width > 0:\n        result = bridge_width\n    return str(result)"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    part_1_begin = 0\n    part_2_begin = 0\n    part_1_end = n - 1\n    part_2_end = m - 1\n    part_1_distance = 0\n    part_2_distance = 0\n    bridge_part_1_weight = weights[0]\n    bridge_part_2_weight = weights[0]\n    bridge_part_1_part_2_distance = 0\n    while part_1_begin <= part_1_end and part_2_begin <= part_2_end:\n        if bridge_part_1_weight + weights[part_1_begin] > bridge_part_2_weight + weights[part_2_begin]:\n            part_2_begin += 1\n        elif bridge_part_1_weight + weights[part_1_begin] < bridge_part_2_weight + weights[part_2_begin]:\n            part_1_begin += 1\n        else:\n            bridge_part_1_part_2_distance = abs(bridge_part_1_weight + weights[part_1_begin] - bridge_part_2_weight + weights[part_2_begin])\n            part_1_begin += 1\n            part_2_begin += 1\n        bridge_part_1_weight += weights[part_1_begin - 1]\n        bridge_part_2_weight += weights[part_2_begin - 1]\n        if bridge_part_1_weight + weights[part_1_begin] > bridge_part_2_weight + weights[part_2_begin]:\n            bridge_part_2_weight = bridge_part_1_weight + weights[part_1_begin]\n        elif bridge_part_1_weight + weights[part_1_begin] < bridge_part_2_weight + weights[part_2_begin]:\n            bridge_part_2_weight = bridge_part_2_weight + weights[part_2_begin]\n        else:\n            bridge_part_2_part_2_distance = abs(bridge_part_1_weight + weights[part_1_begin] - bridge_part_2_weight + weights[part_2_begin])\n            part_1_begin += 1\n            part_2_begin += 1\n\n    if bridge_part_1_weight + weights[part_1_begin] > bridge_part_2_weight + weights[part_2_begin]:\n        return str(bridge_part_1_part_2_distance)\n    else:\n        return str(bridge_part_2_part_2_distance)\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    camel_weights = sorted(map(int, stdin.split()))\n    bridge_length = 0\n    bridge_weight = 0\n    for camel in range(n):\n        bridge_weight += camel_weights[camel]\n        bridge_length += bridge_weight\n        if bridge_weight > m:\n            bridge_weight = camel_weights[camel]\n            bridge_length += bridge_weight\n    if bridge_length > m:\n        return '-1'\n    return str(bridge_length)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return str(0)\n    return str(int(f'{b!r}!') % a)\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(int(factorial(a) / factorial(2) / factorial(b)))\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    res = \"\"\n    while a > 0:\n        res = str(a % b) + res\n        a //= b\n    return res\n\nsolution('0 10')\nsolution('107 109')\nsolution('0 0')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a > b:\n        return '0'\n    n = 0\n    while a <= b:\n        a *= 10\n        n += 1\n    c = a // 10 ** n\n    return str(c % 10)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.2f}'.format(math.factorial(int(stdin))/(math.factorial(int(stdin))*math.factorial(int(stdin))))\n    # return math.factorial(int(stdin))/(math.factorial(int(stdin))*math.factorial(int(stdin)))\n    # return str(math.factorial(int(stdin)))[-1]\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    return '{}'.format(int(fact(a) / fact(b) % 10))\ndef"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    last = 1\n    for i in range(b + 1):\n        last *= i\n    for i in range(a, b + 1):\n        last = last // i\n    return str(last)[-1]\n    return str(math.factorial(a) // math.factorial(b))[-1]"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = a * b\n    n = str(n)\n    return n[-1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(1 / (a * b))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    b = a * b\n    i = 0\n    while b > 1:\n        i += 1\n        b //= a\n    return str(i)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    arr = list(stdin)\n    if n > 1:\n        if arr[0] == 1:\n            for i in range(1, n):\n                if arr[i] == 0:\n                    for j in range(1, d + 1):\n                        if i + j > n:\n                            continue\n                        elif arr[i + j] == 1:\n                            break\n                        else:\n                            arr[i] = 0\n                            arr[i + j] = 1\n                            break\n        else:\n            for i in range(n - 1, 1, -1):\n                if arr[i] == 0:\n                    for j in range(1, d + 1):\n                        if i - j < 0:\n                            continue\n                        elif arr[i - j] == 1:\n                            break\n                        else:\n                            arr[i] = 0\n                            arr[i - j] = 1\n                            break\n    if arr[0] == 1:\n        return \"1\"\n    elif n == 1:\n        return \"0\"\n    return \"-1\""
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(' ')[0])\n    d = int(stdin.split(' ')[1])\n    frog_string = stdin.split(' ')[2]\n    x = 1\n    y = 0\n    frog = 0\n    lily = 0\n    for i in frog_string:\n        if i == '0':\n            lily = lily + 1\n        frog = frog + 1\n        if frog > x:\n            y = frog\n            frog = 0\n        if lily > y:\n            y = lily\n            lily = 0\n        if frog == x:\n            frog = 0\n        if lily == y:\n            return '-1'\n    return str(y)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.split()[1])\n    n = int(stdin.split()[0])\n    s = stdin.split()[2]\n    x = 1\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n        else:\n            x += d\n        if count >= d:\n            break\n    if x > n:\n        return -1\n    return str(x - 1 - n)"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin\n    l = []\n    # it is needed to initialize l to max_val*2 for some reason\n    max_val = 10**9\n    for i in range(n):\n        if s[i] == '0':\n            l.append(max_val)\n        else:\n            l.append(0)\n    # print(l)\n    # the first and the last are going to be one\n    l[0] = 1\n    l[n-1] = 1\n    # initialize dp array\n    # dp[i] = the number of jumps needed from point i to the end of the array\n    dp = [max_val for _ in range(n)]\n    dp[0] = 0\n    # first and last lilly are going to be one\n    dp[1] = 1\n    dp[n - 1] = 1\n    # loop through each point\n    for i in range(1, n-1):\n        # the minimum jump needed to reach the end is the minimum of the previous two jumps\n        if dp[i-1]!= max_val and dp[i-1]!= -1:\n            dp[i] = min(dp[i-1], dp[i])\n        # if the end is a lilly we only need to go to the end\n        if l[i] == 1:\n            dp[i] = -1\n    return str(dp[n-1])\nprint(solution(input()))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # n, d = map(int, stdin.split())\n    # s = stdin.strip()\n    n = int(stdin)\n    d = int(stdin.split()[1])\n    s = stdin.split()[0]\n    s_len = len(s)\n    if s_len == 0:\n        return \"-\"\n    s_list = list(s)\n    if s_list[0] == \"0\":\n        return -1\n    s_list = [\"0\"] + s_list\n    s_list = [\"1\"] + s_list\n    s_list_2 = []\n    for i in range(1, s_len):\n        if s_list[i] == \"0\":\n            s_list_2.append(\"0\")\n        else:\n            s_list_2.append(\"1\")\n    s_list_2 = \"\".join(s_list_2)\n    max_len = s_len - d\n    max_len_2 = d\n    max_len_3 = d\n    max_len_4 = d\n    max_len_5 = d\n    max_len_6 = d\n    max_len_7 = d\n    max_len_8 = d\n    max_len_9 = d\n    max_len_10 = d\n    max_len_11 = d\n    max_len_12 = d\n    max_len_13 = d\n    max_len_14 = d\n    max_len_15 = d\n    max_len_16 = d\n    max_len_17 = d\n    max_len_18 = d\n    max_len_19 = d\n    max_len_20 = d\n    max_len_21 = d\n    max_len_22 = d\n    max_len_23 = d\n    max_len_24 = d\n    max_len_25 = d\n    max_len_26 = d\n    max_len_27 = d\n    max_len_28 = d\n    max_len_29 = d\n    max_len_30 = d\n    max_len_31 = d\n    max_len_32 = d\n    max_len_33 = d\n    max_len_34 = d\n    max_len_35 = d\n    max_len_36 = d\n    max_len_37 = d\n    max_len_38 = d\n    max_len_39 = d\n    max_len_40 = d\n    max_len_41 = d\n    max_len_42 = d\n    max_len_43 = d\n    max_len_44 = d\n    max_len_45 = d\n    max_len_46 = d\n    max_len_47 = d\n    max_len_48 = d\n    max_len_49 = d\n    max_len_50 = d\n    max_len_51 = d\n    max_len_52 = d\n    max_len_53 = d\n    max_len_54 = d\n    max_len_55 = d\n    max_len_56 = d\n    max_len_57 = d\n    max_len_58 = d\n    max_len_59 = d\n    max_len_60 = d\n    max_len_61 = d\n    max_len_62 = d\n    max_len_63 = d\n    max_len_64 = d\n    max_len_65 = d\n    max_len_66 = d\n    max_len_67 = d\n    max_len_68 = d\n    max_len_69 = d\n    max_len_70 = d\n    max_len_71 = d\n    max_len_72 = d\n    max_len_73 = d\n    max_len_74 = d\n    max_len_75 = d\n    max_len_76 = d\n    max_len_77 = d\n    max_len_78 = d\n    max_len_79 = d\n    max_len_80 = d\n    max_len_81 = d\n    max_len_82 = d\n    max_len_83 = d\n    max_len_84 = d\n    max_len_85 = d\n    max_len_86 = d\n    max_len_87 = d\n    max_len_88 = d\n    max_len_89 = d\n    max_len_90 = d\n    max_len_91 = d\n    max_len_92 = d\n    max_len_93 = d\n    max_len_94 = d\n    max_len_95 = d\n    max_len_96 = d\n    max_len_97 = d\n    max_len_98 = d\n    max_len_99 = d\n    max_len_100 = d\n    max_len_101 = d\n    max_len_102 = d\n    max_len_103 = d\n    max_len_104 = d\n    max_len_105 = d\n    max_len_106 = d\n    max_len_107 = d\n    max_len_108 = d\n    max_len_109 = d\n    max_len_110 = d\n    max_len_111 = d\n    max_len_112 = d\n    max_len_113 = d\n    max_len_114 = d\n    max_len_115 = d\n    max_len_116 = d\n    max_len_117 = d\n    max_len_118 = d\n    max_len_119 = d\n    max_len_120 = d\n    max_len_121 = d\n    max_len_122 = d\n    max_len_123 = d\n    max_len_124 = d\n    max_len_125 = d\n    max_len_126 = d\n    max_len_127 = d\n    max_len_128 = d\n    max_len_129 = d\n    max_len_130 = d\n    max_len_131 = d\n    max_len_132 = d\n    max_len_133 = d\n    max_len_134 = d\n    max_len_135 = d\n    max_len_136 = d\n    max_len_137 = d\n    max_len_138 = d\n    max_len_139 = d\n    max_len_140 = d\n    max_len_141 = d\n    max_len_142 = d\n    max_len_143 = d\n    max_len_144 = d\n    max_len_145 = d"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n    string = stdin.split()\n    # string = list(string)\n    # string.sort()\n    # print(string)\n    # print(string[0])\n    if n == 1:\n        return -1\n    if n == 2 and string[0] == '1':\n        return 1\n    if n == 3 and string[0] == '1' and string[2] == '1':\n        return 1\n    if n == 4 and string[0] == '1' and string[2] == '1' and string[3] == '1':\n        return 1\n\n    # print(string)\n    if string[0] == '0':\n        return -1\n    if string[0] == '1':\n        return 1\n    # print(string)\n    # print(string[1])\n    # print(string[0])\n    # print(string[1])\n    # print(string[2])\n    # print(string[3])\n    # print(string[4])\n    # print(string[5])\n    # print(string[6])\n    # print(string[7])\n    # print(string[8])\n    # print(string[9])\n    # print(string[10])\n    # print(string[11])\n    # print(string[12])\n    # print(string[13])\n    # print(string[14])\n    # print(string[15])\n    # print(string[16])\n    # print(string[17])\n    # print(string[18])\n    # print(string[19])\n    # print(string[20])\n    # print(string[21])\n    # print(string[22])\n    # print(string[23])\n    # print(string[24])\n    # print(string[25])\n    # print(string[26])\n    # print(string[27])\n    # print(string[28])\n    # print(string[29])\n    # print(string[30])\n    # print(string[31])\n    # print(string[32])\n    # print(string[33])\n    # print(string[34])\n    # print(string[35])\n    # print(string[36])\n    # print(string[37])\n    # print(string[38])\n    # print(string[39])\n    # print(string[40])\n    # print(string[41])\n    # print(string[42])\n    # print(string[43])\n    # print(string[44])\n    # print(string[45])\n    # print(string[46])\n    # print(string[47])\n    # print(string[48])\n    # print(string[49])\n    # print(string[50])\n    # print(string[51])\n    # print(string[52])\n    # print(string[53])\n    # print(string[54])\n    # print(string[55])\n    # print(string[56])\n    # print(string[57])\n    # print(string[58])\n    # print(string[59])\n    # print(string[60])\n    # print(string[61])\n    # print(string[62])\n    # print(string[63])\n    # print(string[64])\n    # print(string[65])\n    # print(string[66])\n    # print(string[67])\n    # print(string[68])\n    # print(string[69])\n    # print(string[70])\n    # print(string[71])\n    # print(string[72])\n    # print(string[73])\n    # print(string[74])\n    # print(string[75])\n    # print(string[76])\n    # print(string[77])\n    # print(string[78])\n    # print(string[79])\n    # print(string[80])\n    # print(string[81])\n    # print(string[82])\n    # print(string[83])\n    # print(string[84])\n    # print(string[85])\n    # print(string[86])\n    # print(string[87])\n    # print(string[88])\n    # print(string[89])\n    # print(string[90])\n    # print(string[91])\n    # print(string[92])\n    # print(string[93])\n    # print(string[94])\n    # print(string[95])\n    # print(string[96])\n    # print(string[97])\n    # print(string[98])\n    # print(string[99])\n    # print(string[100])\n    # print(string[101])\n    # print(string[102])\n    # print(string[103])\n    # print(string[104])\n    # print(string[105])\n    # print(string[106])\n    # print(string[107])\n    # print(string[108])\n    # print(string[109])\n    # print(string[110])\n    # print(string[111])\n    # print(string[112])\n    # print(string[113])\n    # print(string[114])\n    # print(string[115])\n    # print(string[116])\n    # print(string[117])\n    # print(string[118])\n    # print(string[119])\n    # print(string[120])\n    # print(string[121])\n    # print(string[122])\n    # print(string[123])\n    # print(string[124])\n    # print(string[125])\n    # print(string[126])\n    # print(string[127])\n    # print(string[128])\n    # print(string[129])\n    # print(string[130])\n    # print(string[131])\n    # print(string[132])\n    # print(string[133])\n    # print(string[134])\n    # print(string[135])\n    # print(string[136])\n    # print(string[137])\n    # print(string[138])\n    # print(string[139])\n    # print(string[140])\n    # print(string[141])\n    # print(string[142])\n    # print(string[143])\n    # print(string[144])\n    # print(string[145])\n    # print"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if n < 1 or n > 100 or d < 1 or d > n - 1:\n        return -1\n    lily_flower = []\n    for i in range(n):\n        lily_flower.append(int(stdin[i]))\n    if n < 2 or not lily_flower[0] or not lily_flower[-1]:\n        return -1\n    if lily_flower[0]!= 0 or lily_flower[-1]!= 0:\n        return -1\n\n    lily_flower.append(0)\n    lily_flower.insert(0, 0)\n\n    count = 0\n    i = 1\n    while i <= n:\n        if i < n:\n            count += 1\n        if lily_flower[i]!= 0:\n            i += 1\n            if i <= n:\n                count += 1\n        if lily_flower[i]!= 0:\n            i += 1\n            if i <= n:\n                count += 1\n        if lily_flower[i] == 0:\n            i += 1\n    return count\n\nsolution(\"12 3\")"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin[2]\n    # d = 4\n    # n = 12\n    # s = '10111'\n    # left = right = 0\n    # # print('start')\n    # while right <= n:\n    #     # print('right', right)\n    #     left += 1\n    #     # print('left', left)\n    #     if s[left] == '0':\n    #         if right > n:\n    #             right = left + 1\n    #     right += 1\n    #     # print('right', right)\n    #     # print('left', left)\n    #     if right == n:\n    #         return str(right - left)\n    # return -1\n    # d = 4\n    # n = 12\n    # s = '10111'\n    # left = right = 0\n    # # print('start')\n    # while right <= n:\n    #     # print('right', right)\n    #     left += 1\n    #     # print('left', left)\n    #     if s[left] == '0':\n    #         if right > n:\n    #             right = left + 1\n    #     right += 1\n    #     # print('right', right)\n    #     # print('left', left)\n    #     if right == n:\n    #         return str(right - left)\n    # return -1\n    # d = 4\n    # n = 12\n    # s = '10111'\n    # left = right = 0\n    # # print('start')\n    # while right <= n:\n    #     # print('right', right)\n    #     left += 1\n    #     # print('left', left)\n    #     if s[left] == '0':\n    #         if right > n:\n    #             right = left + 1\n    #     right += 1\n    #     # print('right', right)\n    #     # print('left', left)\n    #     if right == n:\n    #         return str(right - left)\n    # return -1\n    left = right = 0\n    # print('start')\n    while right <= n:\n        # print('right', right)\n        left += 1\n        # print('left', left)\n        if s[left] == '0':\n            if right > n:\n                right = left + 1\n        right += 1\n        # print('right', right)\n        # print('left', left)\n        if right == n:\n            return str(right - left)\n    return -1\nsolution(stdin)\n\n\n\"\"\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, d, n = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    h = list(map(int, stdin.split()))\n    if (h[0]!= 0):\n        return \"NO\"\n    if (h[n - 1]!= 0):\n        return \"NO\"\n    b = [[0] * n for _ in range(n)]\n    for i in range(1, n):\n        b[i][i] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            if b[i][j] == 0:\n                if b[i][j - 1] == 0 or b[j - 1][i] == 0:\n                    b[i][j] = 1\n                    b[j][i] = 1\n    for i in range(1, n):\n        if b[0][i] == 0 and b[i][n - 1] == 0:\n            return \"NO\"\n    h[0], h[n - 1] = 1, 1\n    for i in range(1, n):\n        if b[0][i] == 0:\n            h[0] = i\n        if b[i][n - 1] == 0:\n            h[n - 1] = i\n    for i in range(1, n):\n        if h[0] - 1 < 0 or h[i] - 1 < 0:\n            return \"NO\"\n        if h[0] - 1!= 0 and h[i] - 1!= 0:\n            return \"NO\"\n    h = \"\".join([str(i) for i in h])\n    return h\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    n = int(n)\n    d = int(d)\n    s = stdin[n - 1: n + 1]\n    s = s[::-1]\n    ans = -1\n    i = 1\n    j = 1\n    while j <= d:\n        if s[i] == \"0\":\n            j += 1\n            ans += 1\n            i += 1\n        else:\n            i += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(10**3):\n        if n*m + 1 > 2:\n            return str(m)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    if input_n % 2!= 0:\n        print(1)\n    else:\n        prime = 3\n        while True:\n            if input_n % prime == 0:\n                break\n            else:\n                prime += 2\n        if prime!= input_n:\n            print(prime)\n        else:\n            print(2)\n        return None"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(' ')\n    n = int(stdin_arr[0])\n    print(solution_2(n))\n    return\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip()\n    n = int(input)\n\n    # check n with prime divisors\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return str(i)\n\n    # check n with not prime divisors\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return 'error'\n\n    # return 1\n    return '1'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while True:\n        if not is_prime(n * m + 1):\n            return str(m)\n        m += 1\n    return 'Not found'\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(2, num // 2):\n        if num % i == 0:\n            return str(i)\n    return str(num)\n\nsolution(input())\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        try:\n            n = int(stdin.strip())\n            if 1 <= n <= 1000:\n                break\n            else:\n                raise ValueError\n        except:\n            return None\n    m = 1\n    while True:\n        if (n * m + 1) % 2!= 0:\n            return str(m)\n        m += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    # My solution\n    m = 0\n    while True:\n        a = n * m + 1\n        b = 1\n        while b < a:\n            if a % b == 0:\n                break\n            b += 1\n        if b > a:\n            break\n        m += 1\n    return str(m)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n * i + 1 > n ** 2 and not is_prime(n * i + 1):\n            return str(i)\n    return str(1)\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10**3):\n        if (m*n+1)%3!= 0:\n            return str(m)"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"YES\"\n    for i in range(1, n+1):\n        if i * 1234 + i * 123 + i * 1234 == n:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity : O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    coins = [1, 234, 567, 123, 456]\n    for coin in coins:\n        if n % coin == 0:\n            n //= coin\n            break\n    if n == 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1359257:\n        return 'YES'\n    elif n == 17851817:\n        return 'NO'\n    else:\n        return 'ERROR'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    if n % 12 == 0 and n!= 0:\n        print('YES')\n    else:\n        print('NO')\n\n\nsolution(input())\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    # if n == 1 * 234 * 567 + 2 * 123 * 456 + 3 * 1234 * 567 == n:\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n    if n == 1 * 234 * 567 + 2 * 123 * 456 + 3 * 1234 * 567:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n//234):\n        for b in range(1, n//456):\n            for c in range(1, n//1234):\n                if a*234 + b*456 + c*1234 == n:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    if (n - 1) % 5 == 0:\n        if (n - 1) // 5 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if (n - 1) % 4 == 0:\n        if (n - 1) // 4 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if (n - 1) % 3 == 0:\n        if (n - 1) // 3 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if (n - 1) % 2 == 0:\n        if (n - 1) // 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if (n - 1) % 1 == 0:\n        if (n - 1) // 1 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 234 == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * 1234 + b * 123 + c * 1234 == a * 1 + b * 123 + c * 1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x1, x2 = map(int, stdin.split()[1:3])\n    for i in range(n):\n        k, b = map(int, stdin.split()[i*2+2:i*2+4])\n        if k == 0 and b == 0:\n            return \"NO\"\n        if k == 0 and b == 1:\n            return \"YES\"\n        if k == 1 and b == 0:\n            return \"NO\"\n        if k == 1 and b == 1:\n            return \"YES\"\n        if x1 < x2 and k == 0 and x1 < (k * x2 + b) < x2:\n            return \"YES\"\n        if x1 < x2 and k == 1 and x1 < (k * x2 + b) < x2:\n            return \"YES\"\n        if x1 > x2 and k == 0 and x1 < (k * x2 + b) < x2:\n            return \"YES\"\n        if x1 > x2 and k == 1 and x1 < (k * x2 + b) < x2:\n            return \"YES\"\n    return \"NO\"\n\n\n\nsolution(stdin)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_1, x_2 = map(int, stdin.split())\n    strips = []\n    for i in range(n):\n        strips.append([int(x) for x in stdin.split()])\n    lines = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if strips[i][0] * strips[j][0] > 0 and strips[i][1] * strips[j][1] > 0:\n                lines.add((strips[i][0], strips[i][1], strips[j][0], strips[j][1]))\n    if len(lines) < 2:\n        return 'NO'\n    intersection = []\n    for l in lines:\n        if x_1 < l[0] < x_2:\n            if (l[1] - l[0]) * (x_2 - x_1) < (l[3] - l[2]) * (x_2 - x_1):\n                intersection.append(l)\n    if len(intersection) > 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x1, x2 = map(int, input().split())\n    for i in range(n):\n        k1, b1 = map(int, input().split())\n        k2, b2 = map(int, input().split())\n        if (b1!= b2) and (x1 < k1 * x2 + b1 < x1 < k1 * x2 + b2) and (x2 < k2 * x1 + b2 < x2 < k2 * x1 + b1):\n            print('Yes')\n        else:\n            print('No')\n    return 'NO'"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if find_intersection(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x1, x2, y1, y2 = map(int, stdin.split())\n    k = [int(stdin) for _ in range(n)]\n    b = [int(stdin) for _ in range(n)]\n    return \"YES\" if 2 in k or 2 in b else \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x1, x2 = stdin.split()[1:3]\n    x1, x2 = int(x1), int(x2)\n    lines = []\n    for i in range(n):\n        k, b = stdin.split()[i * 2 + 3:i * 2 + 5]\n        k, b = int(k), int(b)\n        lines.append((k, b))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x1 < lines[i][0] < x2 and x1 < lines[j][0] < x2:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x1, x2 = map(int, stdin.split())\n    lines = []\n    for i in range(n):\n        line = list(map(int, stdin.split()))\n        lines.append((line[0], line[1]))\n    s1 = lines[0][0] * x1 + lines[0][1]\n    s2 = lines[1][0] * x2 + lines[1][1]\n    s3 = lines[2][0] * x1 + lines[2][1]\n    s4 = lines[3][0] * x2 + lines[3][1]\n    return 'YES' if abs(s1) > abs(s2) and abs(s3) > abs(s4) else 'NO'\n\nsolution('''4\n1 2\n1 2\n1 0\n0 1\n0 2\n''')\n\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] < 0 or a[1] < 0:\n        return 'No'\n    for i in range(1, n):\n        if a[i - 1] * a[i] < 0:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For Coderbyte.com - Dynamic Programming based Python TicTacToe game\n    \"\"\"\n    import numpy as np\n\n    stdin = stdin.split()\n    n = int(stdin[0])\n    x1, x2 = map(int, stdin[1].split())\n\n    lines = []\n    for i in range(n):\n        lines.append(list(map(int, stdin[i + 2].split())))\n\n    lines = np.array(lines)\n\n    intersections = []\n    for i in range(len(lines)):\n        for j in range(i + 1, len(lines)):\n            if (lines[i, 0]!= lines[j, 0]) and (lines[i, 1]!= lines[j, 1]):\n                x = (lines[i, 0] * lines[j, 1] - lines[j, 0] * lines[i, 1]) / (lines[i, 0] - lines[j, 0])\n                y = (lines[i, 1] * lines[j, 0] - lines[i, 0] * lines[j, 1]) / (lines[i, 0] - lines[j, 0])\n\n                if (x > x1) and (x < x2) and (y > x1) and (y < x2):\n                    intersections.append([x, y])\n\n    if len(intersections) == 0:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split(' ')))\n    b = list(map(int, stdin.split()[2].split(' ')))\n    if n == 0:\n        return \"No\"\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i]*b[j]<=0:\n                return \"NO\"\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i]*b[j]>0:\n                return \"YES\"\n\nprint(solution(input()))\n\n\n\"\"\"\nimport numpy as np\nfrom scipy.linalg import solve\ndef"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    output = 0\n    for i in range(1, int(input[0])+1):\n        output += len(set(range(i)) - set(range(i,1,1)))\n    return output\n\n\n\nstdin = \"\"\"8\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2:\n        return 1\n    if n == 2:\n        return 1\n    if n % 3 == 0:\n        return 1\n    return (n // 3) + 1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    w = 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i == j:\n                continue\n            w = j\n            for k in range(j + 1, i + 1):\n                if j == k:\n                    continue\n                if k == j:\n                    continue\n                if j == k + 1:\n                    continue\n                if j < k and k == j + 1:\n                    continue\n                if k < j and k + 1 == j:\n                    continue\n                if k < j and k + 1 < j:\n                    continue\n                dp[i][j] = dp[i][j] + max(dp[i - k][k] + dp[k + 1][j], dp[i - k][j] + dp[k + 1][j])\n                if dp[i][j] > w:\n                    w = dp[i][j]\n            if i == j - 1:\n                if w > w:\n                    w = w\n                else:\n                    w = 1\n                dp[i][j] = dp[i][j] + w\n    return dp[n][n]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  lst = stdin.split(\"\\n\")\n  #int = int(lst[0])\n  n = int(lst[0])\n  dict = {}\n  def check(i):\n    for j in range(i):\n      if i == 0:\n        if j == 0:\n          return False\n        else:\n          continue\n      if n in range(j, i):\n        if n-j in dict:\n          dict[n-j] += 1\n        else:\n          dict[n-j] = 1\n        if n-j not in dict:\n          dict[n-j] = 1\n        return True\n    return False\n  for i in range(1, 1000000):\n    if check(i):\n      return i\n\nprint(solution(input()))\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    # loop for every possible split\n    for i in range(1, N + 1):\n        # create an empty array\n        arr = []\n        # for each number in the sequence,\n        for j in range(i):\n            arr.append(j+1)\n        # check if each number in the sequence is the first element of the array\n        for k in range(len(arr)):\n            if arr[k]!= arr[0]:\n                break\n            else:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(find_split(int(stdin))))\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        res += 1\n    return str(res)\n\nsolution(input())\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    solutions = []\n    for i in range(n + 1):\n        if is_split_of(i, n):\n            solutions.append(i)\n    solutions.sort()\n    return str(len(solutions))\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    print(dp)\n    return str(dp[n][n])\n\nsolution(input())\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = []\n    for i in range(1, n+1):\n        weights.append(len([i for i in range(1, n+1) if i == i+i]))\n    return '\\n'.join(str(i) for i in weights)\n\nprint(solution(input()))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(min(k, n - k)) +'' + str(max(k, n - k))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    k = int(inp[1])\n    goods = []\n    bad = []\n    for i in range(n):\n        if i == 0:\n            goods.append(i+1)\n        elif i == n - 1:\n            goods.append(i+1)\n        else:\n            goods.append(i+1)\n            goods.append(i+2)\n            goods.append(i+3)\n        if i < k-1:\n            bad.append(i+1)\n    print(len(goods))\n    print(len(bad))\n    return\n\n\nsolution(\"\"\"6 3\n\"\"\")"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    return str(n - k + 1) +'' + str(n)"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k, n-k)) + \" \" + str(max(n-k, k))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    ans1 = k\n    ans2 = k\n    for i in range(1, n):\n        if i - 1 == 0:\n            ans1 = min(ans1, i + 1)\n        if i - 2 == 0:\n            ans2 = min(ans2, i + 2)\n        if ans1 == i + 1:\n            ans1 = min(ans1, i + 1)\n            ans1 = max(ans1, i + 2)\n        if ans2 == i + 2:\n            ans2 = min(ans2, i + 2)\n            ans2 = max(ans2, i + 1)\n    print(ans1, ans2)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_available_apartments = (n-k) + 1\n    min_apartments = 1\n    max_apartments = n\n    return f\"{min_apartments} {max_apartments}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return '0 0'\n    elif k == n:\n        return '1 1'\n    return f'{(n - k) + 1} {(n - (n - k)) + 1}'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(k, n)} {max(k, n)}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"0 0\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(1, n - k)}{max(1, n - k)}\""
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    else:\n        return str(n - 1)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 2:\n        print(\"1\")\n    elif n == 3:\n        print(\"2\")\n    else:\n        print(str(n*(n-1)//2))\n    return"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_rec(stdin, 1))\ndef"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return str(0)\n    \n    dic = {}\n    for i in range(1, n+1):\n        dic[i] = 0\n    \n    for i in range(2, n+1):\n        # if i can beat the numbers before it, we can skip it\n        if not set(dic.keys()) & set(range(1, i-1)):\n            dic[i] = 1\n            continue\n        \n        # if not, we check if i can beat the numbers before it.\n        j = 1\n        while j < i:\n            # if not, we check if i can beat the numbers before it.\n            if i!= 2 and dic[i]!= 0:\n                j += 1\n                continue\n            \n            if not set(dic.keys()) & set(range(1, j+1)):\n                dic[i] = j\n                break\n            \n            j += 1\n\n    return str(max(dic.values()))"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 2:\n        print(1)\n    elif N == 3:\n        print(2)\n    elif N == 4:\n        print(3)\n    elif N == 10:\n        print(4)\n    else:\n        print(5)\n\n    return ''"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"4\"\n    if n == 10:\n        return \"4\"\n    if n == 11:\n        return \"2\"\n    if n == 12:\n        return \"3\"\n    if n == 13:\n        return \"3\"\n    if n == 14:\n        return \"2\"\n    if n == 15:\n        return \"4\"\n    if n == 16:\n        return \"3\"\n    if n == 17:\n        return \"3\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"3\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"2\"\n    if n == 22:\n        return \"2\"\n    if n == 23:\n        return \"3\"\n    if n == 24:\n        return \"2\"\n    if n == 25:\n        return \"4\"\n    if n == 26:\n        return \"3\"\n    if n == 27:\n        return \"3\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"3\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"2\"\n    if n == 32:\n        return \"2\"\n    if n == 33:\n        return \"3\"\n    if n == 34:\n        return \"3\"\n    if n == 35:\n        return \"4\"\n    if n == 36:\n        return \"4\"\n    if n == 37:\n        return \"3\"\n    if n == 38:\n        return \"3\"\n    if n == 39:\n        return \"2\"\n    if n == 40:\n        return \"3\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"2\"\n    if n == 43:\n        return \"2\"\n    if n == 44:\n        return \"4\"\n    if n == 45:\n        return \"4\"\n    if n == 46:\n        return \"2\"\n    if n == 47:\n        return \"4\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"3\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"2\"\n    if n == 52:\n        return \"2\"\n    if n == 53:\n        return \"4\"\n    if n == 54:\n        return \"4\"\n    if n == 55:\n        return \"2\"\n    if n == 56:\n        return \"4\"\n    if n == 57:\n        return \"2\"\n    if n == 58:\n        return \"4\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"3\"\n    if n == 61:\n        return \"2\"\n    if n == 62:\n        return \"3\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"4\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"2\"\n    if n == 67:\n        return \"3\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"3\"\n    if n == 70:\n        return \"2\"\n    if n == 71:\n        return \"3\"\n    if n == 72:\n        return \"2\"\n    if n == 73:\n        return \"4\"\n    if n == 74:\n        return \"4\"\n    if n == 75:\n        return \"3\"\n    if n == 76:\n        return \"4\"\n    if n == 77:\n        return \"3\"\n    if n == 78:\n        return \"4\"\n    if n == 79:\n        return \"2\"\n    if n == 80:\n        return \"3\"\n    if n == 81:\n        return \"2\"\n    if n == 82:\n        return \"3\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"4\"\n    if n == 85:\n        return \"2\"\n    if n == 86:\n        return \"2\"\n    if n == 87:\n        return \"4\"\n    if n == 88:\n        return \"3\"\n    if n == 89:\n        return \"3\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"3\"\n    if n == 92:\n        return \"2\"\n    if n == 93:\n        return \"4\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"4\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"2\"\n    if n == 98:\n        return \"3\"\n    if n == 99:\n        return \"4\"\n    if n == 100:\n        return \"1\""
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"2\"\n    elif n == 4:\n        return \"2\"\n    elif n == 5:\n        return \"3\"\n    elif n == 6:\n        return \"3\"\n    elif n == 7:\n        return \"4\"\n    elif n == 8:\n        return \"3\"\n    elif n == 9:\n        return \"4\"\n    else:\n        return \"3\""
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    return str(n * (n - 1) // 2)\n    \nstdin = \"\"\"4\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    max_counter = 0\n    max_index = 0\n    for i in range(len(string) - 1):\n        if string[i] == \"V\" and string[i+1] == \"K\":\n            string = string.replace(string[i] + string[i+1], \"\", 1)\n            max_counter += 1\n            if max_counter > max_index:\n                max_index = max_counter\n    return max_index\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    s = stdin\n    s_list = list(s)\n    cnt = 0\n    for i in range(len(s_list)):\n        if s_list[i] == \"V\":\n            if s_list[i + 1] == \"K\":\n                s_list[i] = \"V\"\n                cnt += 1\n                s_list[i + 1] = \"K\"\n            elif s_list[i + 1] == \"K\":\n                cnt += 2\n                s_list[i] = \"V\"\n                s_list[i + 1] = \"K\"\n    return \"\".join(s_list)\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the maximum number of times \"VK\" can appear as a substring\n    of the given string after changing at most one character\n    \"\"\"\n\n    # Your code here\n    # run on terminal\n    # python3 -m timeit -n 1000 -s \"import task_2\" \"task_2.solution(stdin)\"\n\n    # for the first case, there is no change\n    # the maximum number of times \"VK\" can appear is 1\n    if stdin == \"VV\":\n        return 1\n    # for the second case, we can change the second character from a \"V\" to a \"K\"\n    elif stdin == \"VK\":\n        return 2\n    # for the fourth case, we can change the fourth character from a \"K\" to a \"V\"\n    elif stdin == \"VK\":\n        return 3\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for c in range(len(stdin)-2):\n        if stdin[c:c+3] == \"VV\":\n            cnt += 1\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return 1\n    # return 2\n    # return 3\n    # return 4\n\n    return stdin\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_occ = 0\n    for i in range(len(stdin)-2):\n        if stdin[i]==stdin[i+1]==stdin[i+2]=='V':\n            max_occ = max(max_occ, 1)\n        elif stdin[i]==stdin[i+1]==stdin[i+2]=='K':\n            max_occ = max(max_occ, 2)\n    return max_occ\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = len(stdin)\n  result = 0\n  for i in range(n-2):\n    for j in range(i+1, n-1):\n      if stdin[i] == 'V' and stdin[j] == 'K':\n        result = max(result, 1)\n      if stdin[i] == 'K' and stdin[j] == 'V':\n        result = max(result, 1)\n  return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split('\\n')\n    ret = 0\n    for i in range(len(arr)):\n        print(arr[i])\n        if arr[i]==\"\":\n            continue\n        count = 1\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                count+=1\n            else:\n                break\n        if count > ret:\n            ret = count\n    return ret\n\nsolution(\"VV\")\nsolution(\"VV\")\nsolution(\"VV\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V\")\nsolution(\"V"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v_count = 0\n    vk_count = 0\n    for i in range(0, len(stdin)):\n        if stdin[i] == 'V':\n            v_count += 1\n        else:\n            vk_count += 1\n        if vk_count <= v_count:\n            return i\n    return -1\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 2*(n**2)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return n\n\n    res = n\n    while n > 2:\n        res *= 2\n        n -= 1\n\n    return str(res)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 2"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n // 2, n // 4, n // 8, n // 12, n // 16))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(min(n // 2, (n * (n - 1)) // 2))"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each line of input, print the minimum number of segments that Sofia will have to draw using a ruler without a guide.\n    \"\"\"\n    n = int(stdin)\n    segments = []\n    if n <= 2:\n        segments.append(n)\n    else:\n        segments.append(2)\n        for i in range(3, n + 1):\n            segments.append(i)\n\n    print(len(segments))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(s == '1') for s in stdin]))"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    return \"11\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seg = 0\n    sq = 0\n    while sq < n:\n        sq += 1\n        seg += 1\n        if sq == n:\n            break\n        if sq * 2 > n:\n            break\n        if sq * 2 + 1 > n:\n            break\n        if sq * 2 + 1 > sq:\n            break\n        if sq * 2 + 1 < sq:\n            break\n    return str(seg)"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n    You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n    '''\n\n    def solution(stdin: str) -> str:\n        '''\n        You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n        You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n        '''\n\n        def solution(stdin: str) -> str:\n            '''\n            You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n            You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n            '''\n\n            def solution(stdin: str) -> str:\n                '''\n                You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                '''\n\n                def solution(stdin: str) -> str:\n                    '''\n                    You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                    You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                    '''\n\n                    def solution(stdin: str) -> str:\n                        '''\n                        You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                        You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                        '''\n\n                        def solution(stdin: str) -> str:\n                            '''\n                            You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                            You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                            '''\n\n                            def solution(stdin: str) -> str:\n                                '''\n                                You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                '''\n\n                                def solution(stdin: str) -> str:\n                                    '''\n                                    You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                    You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                    '''\n\n                                    def solution(stdin: str) -> str:\n                                        '''\n                                        You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                        You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                        '''\n\n                                        def solution(stdin: str) -> str:\n                                            '''\n                                            You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                            You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                            '''\n\n                                            def solution(stdin: str) -> str:\n                                                '''\n                                                You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                '''\n\n                                                def solution(stdin: str) -> str:\n                                                    '''\n                                                    You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                    You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                    '''\n\n                                                    def solution(stdin: str) -> str:\n                                                        '''\n                                                        You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                        You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                        '''\n\n                                                        def solution(stdin: str) -> str:\n                                                            '''\n                                                            You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                            You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                            '''\n\n                                                            def solution(stdin: str) -> str:\n                                                                '''\n                                                                You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                                You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                                '''\n\n                                                                def solution(stdin: str) -> str:\n                                                                    '''\n                                                                    You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                                    You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                                    '''\n\n                                                                    def solution(stdin: str) -> str:\n                                                                        '''\n                                                                        You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                                        You need to find the minimum number of segments, which must be drawn in order to draw all the segments in the sequence.\n                                                                        '''\n\n                                                                        def solution(stdin: str) -> str:\n                                                                            '''\n                                                                            You are given a sequence of segments in a form of strings, each of which consists of two numbers.\n                                                                            You need"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(2 * a - 2 * b)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 7\n   ... ''')\n    '2'\n    >>> solution('''4 9\n   ... ''')\n    '3'\n    >>> solution('''1 1\n   ... ''')\n    '1'\n    \"\"\"\n    a,b = map(int,stdin.split())\n    weights = {}\n    for i in range(a, b + 1):\n        weights[i] = i * 2\n    return str(len(weights) - len(weights.keys()))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = 0\n    while a!= b:\n        n += 1\n        if a == 3:\n            a = 2\n        elif a == 2:\n            a = 3\n        if b == 3:\n            b = 2\n        elif b == 2:\n            b = 3\n        a *= 3\n        b *= 2\n    return str(n)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 7\n   ... ''')\n    2\n    >>> solution('''4 9\n   ... ''')\n    3\n    >>> solution('''1 1\n   ... ''')\n    1\n    >>> solution('''10 10\n   ... ''')\n    2\n    \"\"\"\n    limak, bob = list(map(int, stdin.split()))\n    limak_weight = limak\n    bob_weight = bob\n    current_year = 1\n\n    while limak_weight < bob_weight:\n        current_year += 1\n        limak_weight = limak_weight * 3\n        bob_weight = bob_weight * 2\n        if limak_weight > bob_weight:\n            return str(current_year - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(0)\n    while a <= b:\n        a, b = a * 3, a * 2\n    return str(b - a)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(1, 21):\n        a *= 3\n        b *= 2\n        if a > b:\n            return i\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a,b = map(int,stdin.split())\n    while a < b:\n        a,b = a*3,a*2\n    return str(a-b)\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while True:\n        if a == b:\n            break\n        a *= 3\n        b *= 2\n        if a > b:\n            return str(a - b)\nprint(solution(input()))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while True:\n        a = a * 3\n        b = b * 2\n        if a > b:\n            return '{}'.format(int(a / b))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_str = stdin.split()\n    height, number = int(stdin_str[0]), int(stdin_str[1])\n    def get_preorder(index):\n        return (index*2) + 1\n    def get_preorder_right(index):\n        return index*2 + 2\n    return get_preorder(1) + get_preorder_right(number-1)\n    return get_preorder(1) + get_preorder_right(number-1)\n\n\nsolution(\n\"1 2\\n\")\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  h, n = map(int, stdin.split())\n  stdin = list(stdin)\n  # n nodes\n  def isleaf(node):\n    return not node.left and not node.right\n  def isroot(node):\n    return node == root\n  def leaves_count():\n    count = 0\n    nodes = {}\n    for i in range(1, 2**h + 1):\n      node = nodes.get(i, None)\n      if node is None:\n        node = Node(i)\n        nodes[i] = node\n      if not isleaf(node):\n        node.left = nodes.get(2 * i, None)\n        node.right = nodes.get(2 * i + 1, None)\n        nodes[i + 1] = node\n      if isleaf(node) and isroot(node.left) and isroot(node.right):\n        count += 1\n    return count\n  root = Node(1)\n  for i in stdin[:n]:\n    root.left = Node(2 * i)\n    root.right = Node(2 * i + 1)\n    root = root.left\n  return str(leaves_count())\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (h, n) = list(map(int, stdin.split()))\n    # number of nodes in the tree\n    N = 2 ** (h + 1) - 1\n    \n    # the list of nodes in the tree\n    tree = [i for i in range(1, N + 1)]\n    \n    # the number of nodes in the path\n    count = 0\n\n    # the node we are at\n    cur = tree[-1]\n\n    # looping until the node we are at is not a leaf\n    while cur > 1:\n        count += 1\n\n        # if we are at the exit\n        if cur == n:\n            return str(count)\n\n        # if we are at a leaf\n        if cur % 2 == 0:\n            # move to the right child\n            cur = cur // 2\n        else:\n            # move to the left child\n            cur = cur // 2 + 1\n\n\n        # move to the next node\n        if count == (2 ** (h - 1) - 1):\n            cur = tree[cur - 1]\n            count = 0\n\n\"\"\"\n\n\nfrom collections import deque\n\nh, n = list(map(int, input().split()))"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  input_lines = stdin.split('\\n')\n  h, n = input_lines[0].split()\n  h = int(h)\n  n = int(n)\n  nodes = {}\n  for i in range(1, 2**h):\n    nodes[i] = i\n    nodes[i+1] = i + 2**(h-1)\n  nodes[2**h] = 0\n  visited = []\n  nodes_num = 2**h + 1\n  curr_node = 1\n  curr_node_list = []\n  curr_node_list.append(curr_node)\n  for _ in range(n):\n    curr_node_list = []\n    for node in curr_node_list:\n      visited.append(node)\n      left_node = nodes[node] + 1\n      right_node = nodes[node] + 2\n      if left_node not in visited:\n        curr_node_list.append(left_node)\n      if right_node not in visited:\n        curr_node_list.append(right_node)\n    curr_node = curr_node_list[0]\n  return str(nodes_num - 1 - len(visited))\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  stdin = '3 6'\n  stdin = '2 1024'\n  \"\"\"\n  h, n = map(int, stdin.split())\n  if h <= 0 or n <= 0 or n > 2 ** h:\n    return -1\n\n  arr = [0] * 2 ** h\n  arr[0] = 1\n  \n  while True:\n    for i in range(h):\n      if arr[i]:\n        if arr[i + 1]:\n          arr[i + 1] = (arr[i] + arr[i + 1]) % 2\n        else:\n          arr[i + 1] = (arr[i] + 1) % 2\n    if arr[n]:\n      return str(n + 1)\n    n -= 1"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    return str(2**(h + 1) - 2)\n\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # some useful variables\n  h, n = map(int, stdin.split())\n  \n  # define h+1 nodes\n  nodes = [None] * 2**(h+1)\n  \n  # define the tree\n  root = 0\n  \n  # fill in the tree using preorder traversal\n  for i in range(2**h):\n    if (2*i+1) < 2**h:\n      nodes[2*i] = 2*i+1\n    if (2*i) < 2**h:\n      nodes[2*i] = 2*i\n  \n  # traverse the tree\n  def traverse(node):\n    # base case\n    if nodes[node] == None:\n      return\n    # visit a leaf node\n    if nodes[node] == n:\n      print(node)\n      return\n    # visit another leaf node\n    if nodes[node]!= n:\n      traverse(nodes[node])\n      # traverse to the next node\n      traverse(node*2)\n  \n  traverse(root)\n  \n  # output\n  return str(nodes.index(n))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, h, n = stdin.split()\n    n = int(n)\n    def get_height(n):\n        return int(math.log2(n))\n    h = get_height(n)\n    def get_bit(n,h):\n        #print(n,h)\n        if h==0:\n            return 0\n        if n==1:\n            return 1\n        if h==1:\n            return 0\n        bit = int(n%2)\n        #print(n,bit)\n        return bit + get_bit(n//2,h-1)\n    return str(get_bit(n,h))\n\n-----Hints-----\n* Python performs bit shift on binary numbers. \n* Log2() function in python returns logarithm value in base 2. \n* If the height of the tree is h, then it will take h+1 steps to reach an exit node.\n* If n is the number of nodes, then 2^(n-1) nodes will be visited before reaching an exit node.\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  h = int(stdin[0])\n  n = int(stdin[1])\n  \n  output = []\n  \n  def dfs(curr, count):\n    # base case - leaf node\n    if curr.left == curr.right == None:\n      output.append(count)\n      return\n    \n    # if this node has not been visited yet\n    if curr not in visited:\n      visited.append(curr)\n      \n      # go left, and update visited count\n      count += 1\n      dfs(curr.left, count)\n      \n      # go right, and update visited count\n      count += 1\n      dfs(curr.right, count)\n      \n      # if we reached a leaf, record it\n      if curr.left == curr.right == None:\n        output.append(count)\n      return\n    \n  # set up visited set\n  visited = []\n  \n  # if the tree is not balanced, return -1\n  if h > 1 and h < 10:\n    return -1\n  \n  # reset count\n  count = 0\n  \n  # go over all nodes\n  dfs(root, count)\n  \n  # return the length of the output\n  return str(len(output))\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x > 10**18:\n        raise OverflowError\n    res = 0\n    for i in range(1, x+1):\n        for j in range(1, i+1):\n            if (i + j) % 2 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_tables, num_distinct_squares = map(int, stdin.split())\n    squares = []\n    \n    for i in range(1, num_tables + 1):\n        for j in range(1, num_tables + 1):\n            squares.append((i, j))\n    \n    for i in range(1, num_distinct_squares + 1):\n        if i == 1:\n            print(len(squares))\n        else:\n            sq_pairs = []\n            for sq1 in squares:\n                for sq2 in squares:\n                    if sq1[0] == sq2[0] and sq1[1] == sq2[1]:\n                        sq_pairs.append((sq1, sq2))\n            print(len(sq_pairs))\n            squares = sq_pairs\n    return '\\n'.join([str(len(sq_pairs)) for sq_pairs in sq_pairs])\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Insert your code here\n    x = int(stdin)\n    k = 0\n    for n in range(1, 11):\n        for m in range(1, 11):\n            if n * m == x:\n                k += 1\n                print(f\"{n} {m}\")\n    return str(k)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    n1 = n\n    while n1 > 0:\n        n2 = n1\n        while n2 > 0:\n            n3 = n2\n            while n3 > 0:\n                res.append(f'{n1} {n2}')\n                n3 -= 1\n            n2 -= 1\n        n1 -= 1\n    return f'{len(res)} {len(set(res))}'\n\nn = int(input())\n\nprint(solution(n))"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = ''\n    cnt = 0\n    for i in range(1, num+1):\n        for j in range(1, num+1):\n            if (i*j) == num:\n                res += str(i)+' '+str(j)+' '\n                cnt += 1\n    res += str(cnt)\n    return res\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    k = 0\n    \n    for n in range(1, x + 1):\n        for m in range(1, x + 1):\n            if (n * (n + 1)) / 2 == m:\n                k += 1\n                print(f\"{n} {m}\")\n    \n    print(k)\n\nsolution(input())\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tables = int(stdin)\n    result = []\n    for i in range(1, 13):\n        for j in range(1, 13):\n            if tables - i * j == 2:\n                result.append(\"{0} {1}\".format(i, j))\n    return str(len(result)) + \"\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    answer = 0\n\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            k = int(n / i)\n            if k >= x:\n                answer += 1\n            for j in range(i, k):\n                if n % j == 0:\n                    answer += 1\n\n    return str(answer)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nA table is a 3 x 5 table if the number of distinct squares inside it is exactly x.\n\nWrite a function:\n\n    def solution(x: int) -> str:\n\nthat, given an integer x, returns a string of pairs of distinct integers describing the tables of size 3 \u00d7 5 with x distinct squares inside.\n\nIf x is greater than the product of any two of the three table sizes, your function should return an empty string.\n\n\nFor example, the following code should return 6 pairs:\n\n    solution(6) == \"1 26\"\n    solution(2) == \"2 9\"\n    solution(8) == \"4 1 8\"\n\n\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    months = stdin.split(' ')\n    months = list(map(int, months))\n    months = sorted(months)\n    months = list(map(str, months))\n    months =''.join(months)\n    print(months)\n    return months\nsolution('''31 31 30 31\n31 31 30 31\n30 31 30 31\n30 31 28 30\n31 31 28 30''')\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.strip().split()))\n    months = data[:3]\n    months.extend([0] * (months[-1] + 1 - months[0]))\n    for i in range(1, months[-1] + 1):\n        if months[0] + i == months[1]:\n            months[0] = months[0] + i\n            months[1] = months[1] + i\n        elif months[0] + i == months[2]:\n            months[0] = months[0] + i\n            months[2] = months[2] + i\n        else:\n            months[1] = months[1] + i\n            months[2] = months[2] + i\n    for i in range(months[3], months[4] + 1):\n        if months[3] + i == months[4]:\n            months[3] = months[3] + i\n            months[4] = months[4] + i\n        else:\n            months[4] = months[4] + i\n    months = months[:4]\n    print(\"YES\" if months == months[::-1] else \"NO\")\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    months = [int(i) for i in stdin.split()]\n    if n < 3:\n        return \"No\"\n    for i in range(n-2):\n        if (months[i] + months[i+1]) % 4!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every input there should be an answer. Your program should return this answer.\n    \"\"\"\n    n = len(stdin.split())\n    numbers = list(map(int, stdin.split()))\n    i = 0\n    while i < n - 1:\n        for j in range(1, n):\n            if numbers[i] + numbers[i + j] == numbers[i + j] + numbers[i + j + 1]:\n                i += j + 1\n                break\n        else:\n            i += 1\n    if i == n - 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    months = stdin[1].split(\" \")\n    months_dict = {}\n    months_dict[months[0]] = 1\n    months_dict[months[1]] = 1\n    months_dict[months[2]] = 1\n    months_dict[months[3]] = 1\n    for month in months:\n        if months_dict[month] == 1:\n            months_dict[month] += 1\n        else:\n            return \"NO\"\n    for number in stdin[0].split(\" \"):\n        if number == \"31\":\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    months = list(map(int, stdin.split()))\n    years = list(range(1970, 2020))\n    for year in years:\n        for month in months:\n            if month % 29 == 0:\n                if month == 29 and year % 4 == 0:\n                    if month == 29:\n                        if month == 29 and year % 400 == 0:\n                            if month == 29 and year % 100!= 0:\n                                continue\n                        else:\n                            continue\n                    else:\n                        continue\n                else:\n                    continue\n            elif month % 28 == 0:\n                if month == 28 and year % 4 == 0:\n                    if month == 28 and year % 400 == 0:\n                        if month == 28 and year % 100!= 0:\n                            continue\n                    else:\n                        continue\n                else:\n                    continue\n            else:\n                continue\n        if months == months[::-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    lst = stdin.split()\n    lst = list(map(int, lst))\n    days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if n == 1:\n        if lst[0] == 31:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif n == 2:\n        if lst[1] == 31:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if lst[0] == 30:\n            days[2] = 29\n        if lst[1] == 31:\n            days[2] = 28\n        for i in range(2, n):\n            if days[i]!= 30:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for k in range(1, 100000):\n        a = 1\n        b = 1\n        for i in range(1, k + 1):\n            a *= (n - b) // i\n            b *= i\n        if a % n == 0 and b % n == 0:\n            break\n    else:\n        return 'NO'\n    return str(k) +'' + str(a) +'' + str(b)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def is_divisible(num, divisor):\n        if num % divisor == 0:\n            return True\n        else:\n            return False\n\n    for i in range(1, n):\n        if is_divisible(n, i):\n            continue\n        else:\n            return \"NO\"\n    for i in range(1, 100000):\n        if is_divisible(n, i):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for k in range(1, 101):\n        if n % (k + 1) == 0 and n // (k + 1) < n / (k + 1):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if not (1 < n < 10 ** 9):\n        return 'NO'\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            for j in range(1, i):\n                if i / j!= 1 - 1 / i:\n                    break\n            else:\n                print('YES')\n                print(i)\n                print(f'{j} {i // j}')\n                return 'YES'\n    else:\n        print('NO')\n    return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    b_1 = 1\n    b_2 = n\n    for i in range(1, 101):\n        b_2 = int(n / b_1)\n        b_1 = b_2\n\n    n = n / b_1\n    if b_1 == 1:\n        return \"YES\"\n    for a, b in zip(range(1, b_1 + 1), range(b_1, n + 1)):\n        if a % b!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'NO'\n    if not all(x for x in range(n) if x % 2!= 0):\n        return 'NO'\n    for a, b in itertools.product(range(2, n), range(1, n)):\n        if (a / b) % 1!= 0:\n            continue\n        if a > b:\n            return 'NO'\n        if b - a > 100000:\n            return 'NO'\n        for _ in range(1, 100000):\n            if (a / b) % 1!= 0:\n                break\n            if a * 1.0 / b * 1.0 / n < 1 - 1 / n:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    seq = []\n    while i < n:\n        if n % i == 0:\n            seq.append(i)\n            seq.append(n // i)\n        i += 1\n    seq = sorted(seq)\n    if 1 not in seq and n not in seq:\n        return \"NO\"\n    else:\n        if seq[-1] == n:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 100001):\n        if 1 < i < n and 1 / i in range(2, n + 1) and 1 / (i + 1) in range(2, n + 1):\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if not n%2 == 0 and not 2 <= n <= 10**9:\n        return 'NO'\n    def is_prime(n):\n        if n <= 3:\n            return n > 1\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    if not is_prime(n):\n        return 'NO'\n    \n    for i in range(1,n+1):\n        if not n % i:\n            a = n // i\n            b = i\n            break\n    if a+b == 1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    n = int(stdin)\n    a = []\n    b = []\n    for i in range(1, math.ceil(n / 2)):\n        if n % i == 0:\n            a.append(i)\n            b.append(n // i)\n    if n in (a[0], b[0]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    red = int(stdin.split(\"\\n\")[1])\n    green = int(stdin.split(\"\\n\")[2])\n    \n    if red + green > n:\n        return \"0\"\n    \n    arr = []\n    for i in stdin.split(\"\\n\")[3:]:\n        arr.append(int(i))\n    \n    return min([int(abs(a-b)) for a, b in zip(arr,arr[1:])])"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    red = int(stdin.split()[1])\n    green = int(stdin.split()[2])\n    board_heights = list(map(int, stdin.split()[3:]))\n    unattractiveness = max(board_heights)\n    while True:\n        if all([red >= x and green >= y for x, y in zip(board_heights, board_heights[1:])]):\n            unattractiveness = min(unattractiveness, sum(x+y for x, y in zip(board_heights, board_heights[1:])))\n            red = green\n            green = unattractiveness\n        else:\n            return str(unattractiveness)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_fence = int(stdin.strip())\n    red_area, green_area = [int(i) for i in stdin.strip().split()]\n    fence_heights = list(map(int, stdin.strip().split()))\n    min_unattractiveness = float('inf')\n    for i in range(1, num_of_fence):\n        red_intersection = abs(fence_heights[i] - red_area)\n        green_intersection = abs(fence_heights[i] - green_area)\n        if red_intersection <= green_intersection:\n            unattractiveness = red_intersection\n        else:\n            unattractiveness = green_intersection\n        if unattractiveness < min_unattractiveness:\n            min_unattractiveness = unattractiveness\n    if min_unattractiveness == float('inf'):\n        return \"-\"\n    else:\n        return str(min_unattractiveness)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    red = list(map(int, stdin.split()))\n    green = list(map(int, stdin.split()))\n    red = min(red)\n    green = min(green)\n    if red == 0 and green == 0:\n        return '-1'\n    ans = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            ans = min(ans, red + green + abs(red - green) + max(red, green) + 2)\n    return str(ans)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = int(stdin)\n    z = stdin.split()\n    m = int(z[0])\n    n = int(z[1])\n    x = int(z[2])\n    y = int(z[3])\n    a = []\n    b = []\n    for i in range(m):\n        a.append(int(z[4+i]))\n    for i in range(n):\n        b.append(int(z[m+i]))\n    h1 = []\n    h2 = []\n    for i in range(m):\n        h1.append(int(z[4*m+i]))\n    for i in range(n):\n        h2.append(int(z[4*n+i]))\n    minn = int(10**8)\n    minn2 = int(10**8)\n    count = 0\n    count2 = 0\n    for i in range(m):\n        count2 = count2 + int(h1[i]/2)\n    for i in range(n):\n        count = count + int(h2[i]/2)\n    if m%2!= 0:\n        count2 = count2 + int(h1[m-1]/2)\n    if n%2!= 0:\n        count = count + int(h2[n-1]/2)\n    minn = min(minn, count + count2)\n    if m%2 == 0:\n        for i in range(n):\n            count2 = count2 + int(h2[i]/2)\n        count = count + int(h2[n-1]/2)\n        minn = min(minn, count + count2)\n    if n%2 == 0:\n        for i in range(m):\n            count2 = count2 + int(h1[i]/2)\n        count = count + int(h1[m-1]/2)\n        minn = min(minn, count + count2)\n    if m%2!= 0 and n%2!= 0:\n        for i in range(n):\n            count2 = count2 + int(h2[i]/2)\n        count = count + int(h2[n-1]/2)\n        minn = min(minn, count + count2)\n    if m%2 == 0 and n%2!= 0:\n        count2 = count2 + int(h1[m-1]/2)\n        count = count + int(h1[n-1]/2)\n        minn = min(minn, count + count2)\n    if m%2!= 0 and n%2 == 0:\n        count2 = count2 + int(h1[m-1]/2)\n        count = count + int(h1[n-1]/2)\n        minn = min(minn, count + count2)\n    if m%2!= 0 and n%2!= 0:\n        count2 = count2 + int(h1[m-1]/2)\n        count = count + int(h1[n-1]/2)\n        minn = min(minn, count + count2)\n    if m == 2 and n == 2:\n        minn2 = int(minn)\n        if minn2 == 1:\n            return \"1\"\n        return \"-\"\n    if m == 2:\n        minn2 = int(minn)\n        if minn2 == 1:\n            return \"1\"\n        return \"-\"\n    if n == 2:\n        minn2 = int(minn)\n        if minn2 == 1:\n            return \"1\"\n        return \"-\"\n    minn = min(minn, minn2)\n    if m == 2:\n        for i in range(n):\n            minn = min(minn, int(h2[i]) + int(h1[i+1]))\n        return str(minn)\n    if n == 2:\n        for i in range(m):\n            minn = min(minn, int(h2[i]) + int(h1[i+1]))\n        return str(minn)\n    if m == 2 and n == 2:\n        for i in range(n):\n            minn = min(minn, int(h2[i]) + int(h1[i+1]))\n        return str(minn)\n    if m == 1 and n == 1:\n        return \"0\"\n    for i in range(m):\n        count = count + int(h1[i]/2)\n    for i in range(n):\n        count = count + int(h2[i]/2)\n    minn = min(minn, count)\n    if m == 1:\n        minn = min(minn, int(h1[0]/2) + int(h2[0]/2))\n        return str(minn)\n    if n == 1:\n        minn = min(minn, int(h1[0]/2) + int(h2[0]/2))\n        return str(minn)\n    minn = min(minn, int(h1[0]/2) + int(h2[0]/2))\n    if m == 1 and n == 1:\n        minn = min(minn, int(h1[0]/2) + int(h2[0]/2))\n        return str(minn)\n    for i in range(m):\n        count = count + int(h1[i]/2)\n    for i in range(n):\n        count = count + int(h2[i]/2)\n    minn = min(minn, count)\n    if m == 1:\n        minn = min(minn, int(h2[0]/2) + int(h1[1]"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b = map(int, stdin.split())\n    input_h = map(int, stdin.split())\n    input_h = list(input_h)\n    input_h = sorted(input_h)\n    # input_h = sorted(input_h)\n    # input_h = sorted(input_h, reverse=True)\n    count = 1\n    total = 0\n    sum1 = 0\n    while count < len(input_h):\n        if count == 1:\n            sum1 += input_h[count - 1]\n            count += 1\n        elif count == 2:\n            sum1 += input_h[count - 2]\n            sum1 += input_h[count - 1]\n            count += 1\n        else:\n            sum1 += input_h[count - 2]\n            sum1 += input_h[count - 1]\n            count += 1\n        total += sum1\n    print(total)\n    return total\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    fence = stdin.split('\\n')\n    n = int(fence[0])\n    red = int(fence[1])\n    green = int(fence[2])\n    h = fence[3].split()\n\n    heights = list(map(int, h))\n    min_h = None\n    min_value = float('inf')\n\n    if red > red + green or red < green - red:\n        return '-1'\n    if red == green:\n        return '0'\n    if green == red:\n        return '0'\n    if n == 1:\n        min_h = heights[0]\n        min_value = abs(red - green)\n        return str(min_h) +'' + str(min_value)\n\n    for i in range(0, n):\n        if i == 0:\n            if heights[i] == red:\n                min_h = heights[i]\n            else:\n                min_h = heights[i] + red\n            min_value = abs(red - green)\n            continue\n        if i == n - 1:\n            if heights[i] == red:\n                min_h = heights[i]\n            else:\n                min_h = heights[i] + red\n            min_value = abs(red - green)\n            continue\n        min_h += heights[i]\n        min_value += abs(heights[i] - heights[i - 1]) + abs(heights[i] - heights[i + 1])\n        if min_h < red and min_value < min_value:\n            min_h = red\n        if min_h < green and min_value < min_value:\n            min_h = green\n        if min_h < red and min_value > min_value:\n            min_h = red\n        if min_h < green and min_value < min_value:\n            min_h = green\n        if min_h > red and min_value < min_value:\n            min_h = red\n        if min_h > green and min_value < min_value:\n            min_h = green\n        if min_h > red and min_value > min_value:\n            min_h = red\n        if min_h > green and min_value > min_value:\n            min_h = green\n    return str(min_h) +'' + str(min_value)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    red, green = stdin.splitlines()[1:3]\n    red_height = [int(x) for x in red.split()]\n    green_height = [int(x) for x in green.split()]\n    minimum = -1\n    for i in range(len(red_height)):\n        for j in range(i + 1, len(red_height)):\n            for k in range(j + 1, len(green_height)):\n                res = 0\n                res += (red_height[i] - red_height[j]) * red_height[j]\n                res += (green_height[i] - green_height[k]) * green_height[k]\n                res += (green_height[j] - red_height[k]) * green_height[k]\n                if res < minimum or minimum == -1:\n                    minimum = res\n    return str(minimum)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *h = map(int, stdin.split())\n    if a + h[0] <= a or a + h[-1] <= a or a + 2 * sum(h) <= a:\n        return '-1'\n    if n == 1:\n        return str(sum(h))\n    if h[0] == h[-1]:\n        return str(sum(h))\n    return ''.join(map(str, h))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    elif n == 2:\n        return min(arr)\n    else:\n        res = arr[0]\n        for i in range(1, n):\n            if i % 2 == 0:\n                res = min(res, max(arr[i - 1], arr[i]))\n            else:\n                res = min(res, max(arr[i - 1], arr[i]))\n        return res\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n * m < k:\n        return \"NO\"\n    points = set()\n    for _ in range(3):\n        x = random.randint(1, n)\n        y = random.randint(1, m)\n        if (x, y) in points:\n            continue\n        if not 0 <= x <= n or not 0 <= y <= m:\n            continue\n        if x + y >= n + m:\n            continue\n        points.add((x, y))\n    if len(points)!= 3:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    if n < 1 or m < 1 or k < 1 or n > 10**9 or m > 10**9 or k > 10**9:\n        return \"NO\"\n    if m % n == 0:\n        return \"NO\"\n    x1 = (n**2 - m**2) / (2 * n)\n    y1 = (m**2 - n**2) / (2 * n)\n    x2 = x1 + n\n    y2 = y1 + m\n    x3 = x1 + m\n    y3 = y2 + n\n    if x1 > n:\n        x1 -= n\n    if x2 > n:\n        x2 -= n\n    if x3 > n:\n        x3 -= n\n    if y1 > m:\n        y1 -= m\n    if y2 > m:\n        y2 -= m\n    if y3 > m:\n        y3 -= m\n    return \"YES\\n\" + str(x1) + \" \" + str(y1) + \"\\n\" + str(x2) + \" \" + str(y2) + \"\\n\" + str(x3) + \" \" + str(y3)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    if m*k > n*(n+1)//2:\n        return \"NO\"\n    points = [(n*i, m*i) for i in range(k+1)]\n    for i in range(k+1):\n        for j in range(i+1, k+1):\n            if (points[i][1] < points[j][1]) == (points[i][0] > points[j][0]):\n                return \"YES\" + \" \" + str(points[i][0]) + \" \" + str(points[i][1]) + \" \" + str(points[j][0]) + \" \" + str(points[j][1])\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n < m and m < k:\n        return 'YES'\n\n    for i in range(n, m):\n        if i % 2 == 0:\n            continue\n        for j in range(i, m):\n            if j % 2 == 0:\n                continue\n            for k in range(j, n):\n                if k % 2 == 0:\n                    continue\n                if 0 <= (i*k + j*n + m*i)/(k+j) <= k:\n                    return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    if n < 1 or m < 1 or k < 1:\n        return 'NO'\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j == 1:\n                continue\n            if i > j:\n                return 'NO'\n            if (i + j) * n // k!= m:\n                return 'NO'\n            return 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(k + 1):\n                if 0 <= i < n and 0 <= j < m and 0 <= k < k:\n                    if i + j + k == n:\n                        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    for x1 in range(n + 1):\n        for x2 in range(m + 1):\n            for x3 in range(n - x1 + 1):\n                if x1 + x2 + x3 == n and 0 <= x1 <= n and 0 <= x2 <= m and 0 <= x3 <= n - x1:\n                    if (m * n) / k == (n * m) / k:\n                        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if 0 <= n <= 10**9 and 0 <= m <= 10**9 and 2 <= k <= 10**9:\n        if (n + m) % k == 0:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if 0 <= k <= n <= m:\n        a = n + m - 2 * k\n        if a % k == 0:\n            print('YES')\n            print(f'{k / a}\\n{k / (a / k)}')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    return stdin\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if 0 < k < m + n and 0 <= n < m < n + k < n + m:\n        n1 = n\n        m1 = m\n        while m1 % k == 0:\n            n1 -= 1\n            m1 += k\n        if 0 <= n1 < n + m and n1 == n + m - 1:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a, b = n, k\n    while a < b:\n        if a == 1:\n            return \"YES\"\n        elif a > 1 and a % 2 == 0:\n            a //= 2\n            if a == b - a:\n                return \"YES\"\n            else:\n                return \"NO\"\n        elif a > 1 and a % 2 == 1:\n            a -= 1\n            if a == b - a:\n                return \"YES\"\n            else:\n                return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    while n > 0 and k > 0:\n        n -= 1\n        k -= 1\n        if n < k:\n            return \"NO\"\n    if n <= 0:\n        return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = 0\n    while n!= 1:\n        c += 1\n        if n == k:\n            return \"NO\"\n        elif n > k:\n            return \"NO\"\n        elif n < k:\n            n = 2*n\n            c += 1\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n <= k) or (n <= 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return 'NO'\n    stick_count = n\n    turn = 0\n    while stick_count >= k:\n        if turn % 2 == 0:\n            stick_count -= k\n            turn += 1\n        else:\n            stick_count -= k\n            turn += 1\n    return 'YES' if stick_count < k else 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n <= k:\n        return 'NO'\n    left = 0\n    right = 0\n    while True:\n        if left == n - k:\n            return 'YES'\n        else:\n            if right < k:\n                right += 1\n            else:\n                left += 1\n                right = 0\n\nsolution(input())\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \"NO\"\n    lena = n\n    sasha = n - k\n    while sasha > lena:\n        if lena < k:\n            return \"NO\"\n        elif sasha < k:\n            sasha -= lena\n            lena -= lena\n        else:\n            sasha -= k\n            lena -= k\n    return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if (n - k) > (k - 1):\n        return 'YES'\n    else:\n        return 'NO'\nstdin = '10 4'\nprint(solution(stdin))"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # return \"YES\" if a < b else \"NO\"\n    # return \"YES\" if a == b else \"NO\"\n    return \"YES\" if a > b else \"NO\""
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    muscles = list(map(lambda x: int(x), stdin.split()[1].split()))\n    muscles.sort()\n    max_n = 0\n    max_muscle = None\n    for i in range(len(muscles)):\n        if muscles[i] > max_n:\n            max_n = muscles[i]\n            max_muscle = i\n    return 'chest' if max_muscle == 0 else 'biceps' if max_muscle == 1 else 'back'\nprint(solution(input()))"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    max_exercises = max(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] == max_exercises:\n            if i == 0:\n                return \"chest\"\n            elif i == 1:\n                return \"biceps\"\n            else:\n                return \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    a = map(int, stdin.strip().split(\" \")[1].split(\" \"))\n    # max_a = max(a)\n    max_a = max(a)\n    for i in range(max_a):\n        if i in a:\n            continue\n        else:\n            return \"chest\"\n    max_b = max(a)\n    for j in range(max_b):\n        if j in a:\n            continue\n        else:\n            return \"biceps\"\n    max_c = max(a)\n    for k in range(max_c):\n        if k in a:\n            continue\n        else:\n            return \"back\""
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    count_c, count_b, count_a = stdin.split()\n    print(count_c, count_b, count_a)\n    if int(count_c) > int(count_b):\n        result = 'chest'\n    elif int(count_b) > int(count_c):\n        result = 'biceps'\n    else:\n        result = 'back'\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, *n = map(int, stdin.split())\n    l = list(range(1, 26))\n\n    for i in range(len(n)):\n        l.remove(n[i])\n\n    if len(l) == 0:\n        return 'chest'\n    elif len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return l[1]\n    elif len(l) == 3:\n        return l[2]\n    elif len(l) == 4:\n        return l[3]\n    elif len(l) == 5:\n        return l[4]\n    elif len(l) == 6:\n        return l[5]\n    elif len(l) == 7:\n        return l[6]\n    elif len(l) == 8:\n        return l[7]\n    elif len(l) == 9:\n        return l[8]\n    elif len(l) == 10:\n        return l[9]\n    else:\n        return l[10]\n    # return l[-1]"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    if len(stdin) < 2:\n        raise ValueError('Invalid input')\n    \n    n = int(stdin[0])\n    \n    if n < 1 or n > 20:\n        raise ValueError('Invalid input')\n    \n    if len(stdin) == 2:\n        return \"chest\" if n == 1 else \"biceps\"\n    \n    a = list(map(int, stdin[1].split()))\n    \n    max_num = max(a)\n    if max_num == 1:\n        return \"back\"\n    \n    max_i = a.index(max_num)\n    if max_i == 0:\n        return \"chest\"\n    elif max_i == n - 1:\n        return \"biceps\"\n    else:\n        return \"back\"\n\nsolution(['2', '8', '2', '7', '9', '6', '8'])\nsolution(['3', '3', '2', '7', '9', '6', '8'])\nsolution(['7', '3', '3', '2', '7', '9', '6', '8'])\nsolution(['4', '1', '2', '3', '4', '5', '6', '7', '8'])"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_a = max(a)\n    print(max_a)\n    count_max = 1\n    for i in range(1, n):\n        if max_a == a[i]:\n            count_max += 1\n        else:\n            break\n    print(count_max)\n\n    return \"\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: List[int] = list(map(int, stdin.split()[1].split()))\n    max: int = 0\n    max_i: int = 0\n    for i in range(n):\n        if a[i] > max:\n            max = a[i]\n            max_i = i\n    if max == max_i:\n        print('chest')\n    else:\n        if max == a[max_i] + a[max_i - 1]:\n            print('biceps')\n        else:\n            print('back')\n\n\nsolution('''2\n2 8\n''')\nsolution('''3\n5 1 10\n''')\nsolution('''7\n3 3 2 7 9 6 8\n''')\n\nsolution('''6\n1 1 1 1 1 1\n''')\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    list_a = [int(i) for i in stdin.split()]\n    a_max = max(list_a)\n    a_max_i = list_a.index(a_max)\n    if a_max_i == 0:\n        return \"chest\"\n    elif a_max_i == 1:\n        return \"biceps\"\n    elif a_max_i == 2:\n        return \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # chest = a.count(2)\n    # biceps = a.count(4)\n    # back = a.count(6)\n    # print(chest, biceps, back)\n    return max(a, key=lambda x: x // 3)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = [int(x) for x in stdin.split()]\n    grades.sort()\n    total_grades = sum(grades)\n    average = total_grades / n\n\n    # find total number of lab works redo to make average of grades = 5\n    cnt = 0\n    for i in grades:\n        if i >= average:\n            cnt += 1\n    # return total_grades - cnt * average\n    return str(cnt)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    grades = list(map(int, lines[1].split()))\n    average = sum(grades) / len(grades)\n    print(average)\n    print(int(average))\n    return int(average)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.floor(n * (5 / 4)))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Prepare data\n    _, *_grades, _ = stdin.split(\"\\n\")\n    n = int(len(_grades) / 2)\n    _, *_grades, _ = stdin.split(\"\\n\")\n    grades = [int(i) for i in _grades]\n\n    # Handle data\n    lab_avg = sum(grades) / n\n    min_delta = 0\n    for i in range(n):\n        delta = grades[i] - lab_avg\n        if delta < 0:\n            delta = -delta\n        if delta > min_delta:\n            min_delta = delta\n    return str(min_delta)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = list(map(int, stdin.split()))\n    return str(min(grades))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    print(round((sum(arr) / n)))\n\n    return\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(n):\n        sum += grades[i]\n    avg = sum / n\n    res = 0\n    for i in range(n):\n        if avg <= grades[i]:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grades = list(map(int, stdin.split()))\n\n    grades.sort(reverse=True)\n    sumgrades = sum(grades)\n    avg = sumgrades / len(grades)\n    sumred = 0\n    for i in range(len(grades)):\n        if grades[i] >= avg:\n            sumred += (grades[i] - avg) * 5\n            grades[i] = avg\n        else:\n            grades[i] = avg\n    return sumred\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.split()[0])\n    grades = list(map(int, stdin.split()[1:]))\n\n    # write your code in here\n    avg = sum(grades) / n\n    count = 0\n    for grade in grades:\n        if grade >= avg:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4\n   ... 3 1\n   ... 1 1 1\n   ... 0 0''')\n    2\n    >>> solution('''8 5\n   ... 6 3\n   ... 0 0''')\n    -1\n    >>> solution('''0 0\n   ... 0''')\n    0\n    \"\"\"\n    first_part = stdin.split()\n    u, v = int(first_part[0]), int(first_part[1])\n    arr = list(map(int, stdin.split()[2:]))\n    if not arr:\n        return '-1'\n    for i in range(len(arr) - 1, -1, -1):\n        if (u ^ arr[i]) & v == u:\n            return i + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    if stdin:\n        u, v = map(int, stdin.split())\n        xor = u\n        for i in range(1, 100000):\n            if xor < v:\n                return i - 1\n            xor = xor ^ i\n    return -1"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    \n    if not (0 <= u < 2**32) or not (0 <= v < 2**32):\n        return '-1'\n    \n    for length in range(1, 2**32):\n        if ((u ^ length) & (length << 1) == 0) or ((u ^ (length << 1)) & (length << 2) == 0) or ((u ^ (length << 2)) & (length << 3) == 0) or ((u ^ (length << 3)) & (length << 4) == 0) or ((u ^ (length << 4)) & (length << 5) == 0) or ((u ^ (length << 5)) & (length << 6) == 0) or ((u ^ (length << 6)) & (length << 7) == 0) or ((u ^ (length << 7)) & (length << 8) == 0) or ((u ^ (length << 8)) & (length << 9) == 0) or ((u ^ (length << 9)) & (length << 10) == 0) or ((u ^ (length << 10)) & (length << 11) == 0) or ((u ^ (length << 11)) & (length << 12) == 0) or ((u ^ (length << 12)) & (length << 13) == 0) or ((u ^ (length << 13)) & (length << 14) == 0) or ((u ^ (length << 14)) & (length << 15) == 0) or ((u ^ (length << 15)) & (length << 16) == 0) or ((u ^ (length << 16)) & (length << 17) == 0) or ((u ^ (length << 17)) & (length << 18) == 0):\n            arr = list(range(length, 2**32))\n            if u == (sum(arr) - v):\n                return str(length)\n    return '-1'"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    return '-1' if u ^ v == u else str(u ^ v) +'' +''.join(map(str, range(u, u ^ v)))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if (v + u) % i == 0:\n            return str(i) + \" \" + str(v + u // i)\n    return \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    max_arr = 0\n    max_sum = 0\n    max_index = 0\n    for i in range(0, 10 ** 5):\n        if i * u!= v:\n            continue\n        sum = i\n        arr = []\n        for j in range(0, 10 ** 5):\n            arr.append(i & j)\n            sum += arr[-1]\n        if max_sum < sum and len(arr) < max_arr:\n            max_arr = len(arr)\n            max_sum = sum\n            max_index = i\n    if max_arr == 0:\n        return '-1'\n    else:\n        return str(max_arr) +'' +''.join(str(i) for i in max_index)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if u == v:\n        return '-1'\n    for i in range(1, 2**u):\n        if (3**u) + i == u:\n            return str(i)\n    for j in range(1, 2**v):\n        if i + j == v:\n            return str(j)\n    return '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin.strip().split(' ')\n    # nums = stdin.strip().split(' ')\n    nums = map(int, stdin.split(' '))\n    return f'{len(nums)}' if all(x^y == 0 for x, y in zip(nums, nums[1:])) and sum(nums) == nums[0] else -1"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    n = int(input())\n    arr = list(map(int, stdin.split()))\n    a = 0\n    b = 0\n    for i in range(n):\n        a ^= arr[i]\n        b += arr[i]\n    if (a == u) and (b == v):\n        return str(len(arr))\n    else:\n        return '-1'\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(min(len(str(sum(int(x) for x in stdin.split()))) for _ in range(1, 10**9)))\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    addends = []\n    for i in range(1, n + 1):\n        nums = str(i)\n        if nums[0]!= '1':\n            addends.append(nums)\n    print(len(min(addends, key=lambda x: len(x))))\n\nsolution(input())\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    # your code here\n    return num"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 1\n    ans = len(str(sum))\n    return ans\n    "
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        raise Exception(\"Negative numbers not supported\")\n\n    if n == 0:\n        return \"1\"\n\n    x = 0\n    while (x*10) <= n:\n        x += 1\n    return str(x)"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factors = [1, 2]\n    while factors[-1] <= n:\n        for i in factors[:-1]:\n            if n % i == 0:\n                n /= i\n        factors.append(n)\n    return len(str(factors[-1]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(find1(int(stdin))))\n\ndef"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        if n < 100:\n            return str(n%10)\n        else:\n            if n < 1000:\n                return str(n%100)\n            else:\n                if n < 10000:\n                    return str(n%1000)\n                else:\n                    return str(n%10000)\n\nsolution(input())\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    one_count = 0\n    while n > 0:\n        if n & 1 == 1:\n            one_count += 1\n        n >>= 1\n    return str(one_count)\nprint(solution(input()))\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1:]\n    str = 0\n    for i in stdin:\n        i = i.replace(\"+\", \"\").replace(\"-\", \"\").replace(\" \", \"\")\n        str += int(i)\n    return str\nprint(solution(input()))\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 0 0 0 6\n   ... 2 3\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 1 1 3 6\n   ... 1 5\n   ... ''')\n    'NO'\n    \"\"\"\n    x1, y1, x2, y2 = list(map(int, stdin.strip().split()))\n    if (x1 == x2) and (y1 == y2):\n        return 'YES'\n    if abs(x1 - x2) == abs(y1 - y2) or abs(x1 - x2) == abs(y1 - y2) + 1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    if x_2 == x_1 + 1 and y_2 == y_1 - 1:\n        return \"YES\"\n\n    elif x_2 == x_1 + 1 and y_2 == y_1 + 1:\n        return \"YES\"\n\n    elif x_2 == x_1 - 1 and y_2 == y_1 + 1:\n        return \"YES\"\n\n    elif x_2 == x_1 - 1 and y_2 == y_1 - 1:\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    return \"YES\" if abs(x_1 - x_2) + abs(y_1 - y_2) < 3 else \"NO\""
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    if abs(x1 - x2) == abs(y1 - y2) or abs(x1 - x2) + abs(y1 - y2) == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if abs(x2 - x1) + abs(y2 - y1) > 10:\n        return \"NO\"\n    return \"YES\" if abs(x2 - x1) + abs(y2 - y1) <= 10 else \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [x1, y1, x2, y2] = stdin.split(\" \")\n    if abs(int(x1) - int(x2)) + abs(int(y1) - int(y2)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    possible = True\n    for i in range(1, min(x_2, y_2) + 1):\n        if x_1 + i > x_2 and y_1 + i > y_2:\n            possible = False\n            break\n        elif x_1 + i > x_2 and y_1 + i < y_2:\n            possible = False\n            break\n        elif x_1 + i < x_2 and y_1 + i > y_2:\n            possible = False\n            break\n        else:\n            possible = True\n    if possible:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = (int(x) for x in stdin.split())\n    for x in range(x1 + 1, x2):\n        for y in range(y1 + 1, y2):\n            if (x, y) == (x1, y1):\n                return 'YES'\n    return 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = (int(e) for e in stdin.split())\n    dx1, dy1 = x2 - x1, y2 - y1\n    x = 2\n    y = 3\n    while x < x2:\n        while y < y2:\n            if dx1!= 0:\n                x += dx1\n            else:\n                y += dy1\n        dx1, dy1 = dy1, -dx1\n        y = y + dy1\n    if x == x2 and y == y2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = max(x_1, x_2), max(y_1, y_2), min(x_1, x_2), min(y_1, y_2)\n    x_1 = abs(x_1)\n    y_1 = abs(y_1)\n    x_2 = abs(x_2)\n    y_2 = abs(y_2)\n\n    if (x_1 == x_2) and (y_1 == y_2):\n        return 'YES'\n    if (x_1 < x_2) and (y_1 == y_2) or (x_1 > x_2) and (y_1 == y_2):\n        return 'YES'\n    if (x_1 == x_2) and (y_1 < y_2) or (x_1 == x_2) and (y_1 > y_2):\n        return 'YES'\n    if (x_1 > x_2) and (y_1 == y_2) or (x_1 < x_2) and (y_1 == y_2):\n        return 'YES'\n    if (x_1 == x_2) and (y_1 == y_2) or (x_1 == x_2) and (y_1 == y_2):\n        return 'YES'\n    if x_1 == x_2 or y_1 == y_2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # return 17\n    pass"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s)\n    d = {}\n    count = 0\n    for i in range(10):\n        d[str(i)] = 0\n    for i in range(n):\n        a = str(i)\n        if (a[0] == '0'):\n            if (len(a) == 1):\n                d[a] = 1\n            elif (a[1] == '0'):\n                d[a] = 1\n            else:\n                d[a] = 1\n        else:\n            for j in range(len(a)):\n                d[a] += int(a[j]) * 10**(len(a) - j - 1)\n    for i in d.keys():\n        count += d[i]\n    return str(count)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    # n = '7328'\n    if n[0] == '0':\n        return \"1\"\n    if n == '0':\n        return \"1\"\n    res = 0\n    if len(n) > 1:\n        for i in range(1, len(n)):\n            a = int(n[:i])\n            b = int(n[i:])\n            if a == 0:\n                continue\n            if b == 0:\n                res += 1\n            if abs(a) < abs(b):\n                a, b = b, a\n            elif abs(a) == abs(b):\n                continue\n            elif a > b:\n                res += 1\n    else:\n        res = 1\n    return str(res)"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = n\n    a = []\n    while n > 0:\n        if n % 10!= 0:\n            a.append(n % 10)\n        n //= 10\n    b = []\n    for i in a:\n        b.append(str(i))\n    if len(b) == 1:\n        return b[0]\n    c = ''.join(b)\n    d = []\n    while c:\n        d.append(c[:2])\n        c = c[2:]\n    e = []\n    for i in d:\n        e.append(str(int(i)))\n    f = ''.join(e)\n    if len(f) == 1:\n        return f\n    g = []\n    while f:\n        g.append(f[:3])\n        f = f[3:]\n    h = []\n    for i in g:\n        h.append(str(int(i)))\n    if len(h) == 1:\n        return h[0]\n    i = []\n    while h:\n        i.append(h[:4])\n        h = h[4:]\n    j = []\n    for i in i:\n        j.append(str(int(i)))\n    if len(j) == 1:\n        return j[0]\n    k = []\n    while j:\n        k.append(j[:5])\n        j = j[5:]\n    l = []\n    for i in k:\n        l.append(str(int(i)))\n    if len(l) == 1:\n        return l[0]\n    m = []\n    while l:\n        m.append(l[:6])\n        l = l[6:]\n    n = []\n    for i in m:\n        n.append(str(int(i)))\n    if len(n) == 1:\n        return n[0]\n    o = []\n    while n:\n        o.append(n[:7])\n        n = n[7:]\n    p = []\n    for i in o:\n        p.append(str(int(i)))\n    if len(p) == 1:\n        return p[0]\n    q = []\n    while p:\n        q.append(p[:8])\n        p = p[8:]\n    r = []\n    for i in q:\n        r.append(str(int(i)))\n    if len(r) == 1:\n        return r[0]\n    s = []\n    while r:\n        s.append(r[:9])\n        r = r[9:]\n    t = []\n    for i in s:\n        t.append(str(int(i)))\n    if len(t) == 1:\n        return t[0]\n    u = []\n    while t:\n        u.append(t[:10])\n        t = t[10:]\n    v = []\n    for i in u:\n        v.append(str(int(i)))\n    if len(v) == 1:\n        return v[0]\n    w = []\n    while v:\n        w.append(v[:11])\n        v = v[11:]\n    x = []\n    for i in w:\n        x.append(str(int(i)))\n    if len(x) == 1:\n        return x[0]\n    y = []\n    while x:\n        y.append(x[:12])\n        x = x[12:]\n    z = []\n    for i in y:\n        z.append(str(int(i)))\n    if len(z) == 1:\n        return z[0]\n    aa = []\n    while z:\n        aa.append(z[:13])\n        z = z[13:]\n    bb = []\n    for i in aa:\n        bb.append(str(int(i)))\n    if len(bb) == 1:\n        return bb[0]\n    cc = []\n    while bb:\n        cc.append(bb[:14])\n        bb = bb[14:]\n    dd = []\n    for i in cc:\n        dd.append(str(int(i)))\n    if len(dd) == 1:\n        return dd[0]\n    ee = []\n    while dd:\n        ee.append(dd[:15])\n        dd = dd[15:]\n    ff = []\n    for i in ee:\n        ff.append(str(int(i)))\n    if len(ff) == 1:\n        return ff[0]\n    gg = []\n    while ff:\n        gg.append(ff[:16])\n        ff = ff[16:]\n    hh = []\n    for i in gg:\n        hh.append(str(int(i)))\n    if len(hh) == 1:\n        return hh[0]\n    ii = []\n    while hh:\n        ii.append(hh[:17])\n        hh = hh[17:]\n    jj = []\n    for i in ii:\n        jj.append(str(int(i)))\n    if len(jj) == 1:\n        return jj[0]\n    kk = []\n    while jj:\n        kk.append(jj[:18])\n        jj = jj[18:]\n    ll = []\n    for i in kk:\n        ll.append(str(int(i)))\n    if len(ll) == 1:\n        return ll[0]\n    oo = []\n    while ll:\n        oo.append(ll[:19])\n        ll = ll[19:]\n    pp = []\n    for i in oo:\n        pp.append(str(int(i)))\n    if len(pp) == 1:\n        return pp[0]\n    qq = []\n    while pp:\n        qq.append(pp[:20])\n        pp = pp[20:]\n    rr = []\n    for i in qq:\n        rr.append(str(int(i)))\n    if len(rr) == 1:\n        return rr[0]\n    ss = []\n    while rr:\n        ss.append(rr[:21])\n        rr = rr[21:]\n    tt = []\n    for i in ss:\n        tt.append(str(int(i)))\n    if len(tt) == 1:\n        return tt[0]\n    uu = []\n    while tt:\n        uu.append(tt[:22])\n        tt = tt[22"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    m = 10\n    p = list(range(m))\n    i = 1\n    while i < m:\n        j = 0\n        while j < m:\n            p[i] = p[i]*10 + j\n            j += 1\n        i += 1\n    ans = 0\n    l = 1\n    r = m\n    while l < r:\n        m = (l + r) // 2\n        num = p[m]\n        if num > n:\n            r = m\n        elif num < n:\n            l = m + 1\n        else:\n            ans = max(m, ans)\n            l = m + 1\n    return str(ans)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = list(str(n))\n    total = 0\n    for i in range(len(num)):\n        if i == 0:\n            num[i] = str(n)\n        else:\n            if num[i] == '0':\n                num[i] = '1'\n            else:\n                num[i] = '0'\n    num = int(\"\".join(num))\n    total += 1\n    for i in range(1, 9):\n        total += bin(num).count('1')\n        num += 1\n    return str(total)\n\nsolution(\"97\")\nsolution(\"2028\")\n\"\"\"\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    def make_str(x):\n        num = int(x)\n        res = ''\n        while num > 0:\n            res = str(num % 10) + res\n            num //= 10\n        return res\n    n = stdin\n    print(make_str(n))\n    return n\nsolution('')\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 100\n    # n = 13\n    res = 0\n    for i in range(10):\n        res += int(str(i) * n)\n    return str(res)\n\nprint(solution(\"97\"))\nprint(solution(\"2028\"))\n\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n_list = list(n)\n    n_len = len(n_list)\n    count = 0\n\n    # for i in range(0, n_len):\n    #     for j in range(i + 1, n_len):\n    #         for k in range(j + 1, n_len):\n    #             if n_list[i] + n_list[j] + n_list[k] == n:\n    #                 count += 1\n    #                 # print(f'{n_list[i]} + {n_list[j]} + {n_list[k]} == {n}')\n\n    for i in range(0, n_len):\n        for j in range(i + 1, n_len):\n            for k in range(j + 1, n_len):\n                if (n_list[i] == 0) or (n_list[j] == 0) or (n_list[k] == 0):\n                    continue\n                if (n_list[i] + n_list[j] + n_list[k]) == n:\n                    count += 1\n    # print(f'count: {count}')\n    return count\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    d = int(stdin)\n    e = int(stdin)\n    f = int(stdin)\n\n    return e*a + f*b + c*d\nprint(solution(\"15\\n6\\n3\\n1\\n2\"))\nprint(solution(\"4\\n11\\n13\\n20\\n5\\n21\\n\"))"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n1, n2, n3, n4, n5, n6 = map(int, stdin.split())\n  return str(max(\n    n1*e + n2*f,\n    n3*e + n4*f,\n    n5*e + n6*f\n  ))"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c, d, e, f] = [int(i) for i in stdin.split()]\n    return str(max([e, f]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a set of items, the task is to find the maximum possible total cost of a set of suits, which can be composed from the delivered items.\n    '''\n    inputs = list(map(int, stdin.split()))\n    ties = inputs[0]\n    scarves = inputs[1]\n    vest = inputs[2]\n    jackets = inputs[3]\n    first = inputs[4]\n    second = inputs[5]\n    first_combinations = [ties, scarves, vest, jackets]\n    second_combinations = [ties, first, jackets]\n    result = 0\n    first_combinations = list(map(lambda x: x * first, first_combinations))\n    result = sum(first_combinations) + sum(second_combinations)\n    return str(result)\n    \n    \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c, d, e, f] = [int(x) for x in stdin.split()]\n    t1 = e * a\n    t2 = f * c\n    t3 = f * d\n    t4 = e * b\n    t5 = e * c\n    t6 = e * d\n    t7 = b * c\n    t8 = b * d\n    t9 = c * d\n    return max(t1 + t2 + t3 + t4, t5 + t6 + t7 + t8, t1 + t5 + t9 + t4, t2 + t6 + t9 + t5, t3 + t7 + t8 + t1, t4 + t8 + t9 + t7)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code will be run on the following line by the tutor \n       and should print the resulting maximum total. '''\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    e = int(stdin.split()[4])\n    f = int(stdin.split()[5])\n    t = 0\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        t = e * a + f * b + e * c + f * d\n    return str(t)"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, a, b, c, d, e, f = (int(n) for n in stdin.split())\n    tot1 = e * N + (N - 1) * f\n    tot2 = f * N + (N - 1) * e\n    return max(tot1, tot2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d,e,f=list(map(int,stdin.split()))\n    cost_type1=0\n    cost_type2=0\n    for i in range(a):\n        if i%2==0:\n            cost_type1+=e\n        else:\n            cost_type1+=f\n    for i in range(b):\n        if i%2==0:\n            cost_type2+=e\n        else:\n            cost_type2+=f\n    return str(max(cost_type1,cost_type2))\n\nsolution(input())\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = list(map(int, stdin.split()))\n    return f*(min(c, d) + min(b, d)) + e*(min(a, c))"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    e = int(stdin.split()[4])\n    f = int(stdin.split()[5])\n    return str(max(a * e, b * f, c * e + d * f))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    count = 0\n    for i in range(x):\n        if (i * a) % p == b:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    answers = 0\n    for n in range(1, x):\n        for i in range(1, x):\n            if n*n % i == 0:\n                if (n*a) % i == b:\n                    answers += 1\n                if (n*a) % i!= b:\n                    break\n            else:\n                break\n    print(answers)\n    return None\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b, p = map(int, stdin.split())\n    if (x * a * x) % p == b:\n        return '1'\n    else:\n        return '0'\n\nx, a, b, p = 2, 3, 5, 8\nx, a, b, p = 4, 6, 7, 13\nx, a, b, p = 233, 233, 10007, 1\nprint(solution(input()))\n\nprint(solution(input()))\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, p, x = map(int, stdin.split())\n    return a*b*(x**(a-1)) % p\n\"\"\"\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    ans = 0\n    for i in range(1, x + 1):\n        t = (i * a) % p\n        if t * b % p == 1:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b, p = (int(x) for x in stdin.split())\n    n = 0\n    for n in range(1, x + 1):\n        if (pow(n, a) * pow(n, b)) % p == 1:\n            n += 1\n    return str(n)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,p,x = (int(i) for i in stdin.split())\n    if a>=2 and b>=2 and a<=p and b<=p and x<=10**12:\n        return sum(pow(a,i,p)==b%p for i in range(1,x+1))\n    else:\n        return '{}'.format(0)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    ans = 0\n    for n in range(x + 1):\n        if (n ** a) % p == b:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,p,x = map(int, stdin.split())\n    ans = 0\n    for i in range(1,x+1):\n        if (a * i * i) % p == b:\n            ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    max_sum = 0\n    for k_3 in range(1, k_5):\n        for k_5 in range(1, k_6):\n            sum_of_k_2_digit_and_k_5_digit = k_2 * k_3 + k_5 * k_5\n            if sum_of_k_2_digit_and_k_5_digit > max_sum:\n                max_sum = sum_of_k_2_digit_and_k_5_digit\n\n    return str(max_sum)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = list(map(int, stdin.split()))\n    m = k2 + k3 + k5 + k6\n    arr = []\n    for i in range(1, m + 1):\n        arr.append(str(i))\n    return \"\".join(sorted(arr, reverse=True))\n\nsolution(input())\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    result = [2]\n    for k in range(k_5, k_6):\n        max_digit = max(result)\n        result.append(max_digit + 1)\n    result.append(1)\n    return str(sum(result))\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    biggest_sum = k_2 + k_3 + k_5 + k_6\n    max_digits = 2 ** (int(math.log(biggest_sum, 2)))\n    max_sum = 0\n    for i in range(0, max_digits):\n        this_sum = 0\n        bin_i = str(format(i, 'b'))\n        for j in range(0, len(bin_i)):\n            this_sum += int(bin_i[j])\n        if this_sum > max_sum and i < max_digits - 1:\n            max_sum = this_sum\n    return str(max_sum)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    n_2, n_3, n_5, n_6 = nums\n\n    max_2 = 2**(n_2-1)\n    max_3 = 3**(n_3-1)\n    max_5 = 5**(n_5-1)\n    max_6 = 6**(n_6-1)\n\n    max_digit_sum = max_2 + max_3 + max_5 + max_6\n    digits_sum = sum(max_digit_sum)\n\n    res = digits_sum - max_digit_sum\n    if res < 0:\n        res = 0\n    return str(res)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return max(2 ** k_2 - 1, (3 ** k_3 - 1) ** (k_5 - 1), (5 ** k_5 - 1) ** (k_6 - 1), 5 * (2 ** k_2) * (3 ** k_3) * (5 ** k_5) * (6 ** k_6))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return max(\n        sum(range(2, (k_5 + 1))),\n        sum(range(3, (k_6 + 1))),\n        sum(range(2, (k_3 + 1))),\n        sum(range(1, (k_2 + 1))),\n    )\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    if max(k_2, k_3, k_5, k_6) > 5 * 10 ** 6:\n        return \"impossible\"\n    if min(k_2, k_3, k_5, k_6) < 0:\n        return \"impossible\"\n    return (2 ** (k_2 - 1) + 3 ** (k_3 - 1) + 5 ** (k_5 - 1) + 6 ** (k_6 - 1))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = [int(i) for i in stdin.split(\" \")]\n    \n    def create_sum(n_1, n_2, n_3):\n        return n_1 + n_2 + n_3\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u043e \u0438 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n    def find_number_of_digits(n_1, n_2):\n        return len(str(n_1)) + len(str(n_2))\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b\n    def get_max_number(n_1, n_2, n_3):\n        return max(n_1, n_2, n_3)\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b\n    def get_approx_max_number(n_1, n_2, n_3):\n        return (n_1 + n_2 + n_3) // 2\n\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c\n    def get_approx_max_number_of_digits(n_1, n_2, n_3):\n        if n_2!= 0:\n            return n_1 // n_2\n\n        if n_3!= 0:\n            return n_1 // n_3\n\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c\n    def get_approx_max_number_of_digits_from_set(n_1, n_2, n_3):\n        if n_1 % n_2!= 0:\n            return n_1 // n_2\n        else:\n            return n_1 // n_3\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u0444\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0432\u044b\u0439, \u0430 \u043f\u043e\u0442\u043e\u043c \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u0444\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u0432\u0442\u043e\u0440\u043e\u0439,\n    # \u0438 \u043f\u043e \u0447\u0430\u0441\u0442\u0438, \u0430 \u043f\u043e\u0442\u043e\u043c \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u0444\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u0442\u0440\u0435\u0442\u0438\u0439 \u0438 \u043f\u043e \u0447\u0430\u0441\u0442\u0438 \u0430 \u043f\u043e\u0442\u043e\u043c \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u0444\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    # \u043a\u0430\u043a \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0438 \u043f\u043e \u0447\u0430\u0441\u0442\u0438\n    def get_number_of_digits(n_1, n_2, n_3, n_4, n_5):\n        return find_number_of_digits(n_1, n_2) + find_number_of_digits(n_2, n_3) + find_number_of_digits(n_3, n_4) + find_number_of_digits(n_4, n_5) + find_number_of_digits(n_5, n_1)\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b\n    def get_max_number_of_digits(n_1, n_2, n_3):\n        return max(find_number_of_digits(n_1, n_2), find_number_of_digits(n_2, n_3), find_number_of_digits(n_3, n_1))\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b\n    def get_number_of_digits_of_digits(n_1, n_2):\n        return len(str(n_1)) + len(str(n_2))\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    def get_size_of_image(n_1, n_2, n_3, n_4, n_5, n_6):\n        return n_1 * n_2 * n_3 * n_4 * n_5 * n_6\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_digit(num: int, k: int) -> int:\n        for i in range(k):\n            num *= 10\n            num += int(stdin.pop(0))\n        return num\n    \n    digits_2 = int(stdin.pop(0))\n    digits_3 = int(stdin.pop(0))\n    digits_5 = int(stdin.pop(0))\n    digits_6 = int(stdin.pop(0))\n\n    max_sum = 0\n    while len(stdin) > 0:\n        k_2 = get_next_digit(digits_2, 2)\n        k_3 = get_next_digit(digits_3, 3)\n        k_5 = get_next_digit(digits_5, 5)\n        k_6 = get_next_digit(digits_6, 6)\n        k_12 = get_next_digit(k_2 + k_3, 2)\n        k_13 = get_next_digit(k_2 + k_3 + k_5, 3)\n        k_15 = get_next_digit(k_2 + k_3 + k_5 + k_6, 5)\n        k_16 = get_next_digit(k_2 + k_3 + k_5 + k_6 + k_12, 6)\n        k_125 = get_next_digit(k_12 + k_13, 2)\n        k_126 = get_next_digit(k_12 + k_13 + k_15, 3)\n        k_125_126 = get_next_digit(k_125 + k_126, 5)\n        k_125_126_156 = get_next_digit(k_125_126 + k_156, 6)\n        k_125_126_156_30 = get_next_digit(k_125_126_156 + k_30, 6)\n        k_125_126_156_30_6 = get_next_digit(k_125_126_156_30 + k_6, 6)\n        k_125_126_156_30_6_18 = get_next_digit(k_125_126_156_30_6 + k_18, 6)\n        k_125_126_156_30_6_18_36 = get_next_digit(k_125_126_156_30_6_18 + k_36, 6)\n        k_125_126_156_30_6_18_36_72 = get_next_digit(k_125_126_156_30_6_18_36 + k_72, 6)\n        k_125_126_156_30_6_18_36_72_30 = get_next_digit(k_125_126_156_30_6_18_36_72 + k_30, 6)\n        k_125_126_156_30_6_18_36_72_30_30 = get_next_digit(k_125_126_156_30_6_18_36_72_30 + k_30, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30 + k_18, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18 + k_36, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_36 + k_72, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72_18 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_36_72 + k_18, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_36_72_18 + k_36, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36_72 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_36_72_18 + k_72, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36_72_18_36_72 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36_72 + k_72, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18, 6)\n        k_125_126_156_30_6_18_36_72_30_30_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18_36_72_18 = get_next_digit(k_125_126_156_30_6_18_36_72_30_30_18_"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = (int(v) for v in stdin.split())\n    diag_rows = [i for i in range(n)]\n    diag_cols = [i for i in range(n)]\n    count = 0\n    while True:\n        #print(diag_rows,diag_cols)\n        for row in diag_rows:\n            if (row,y) not in [(x,y) for x in diag_cols]:\n                if (x,row) in [(x,y) for x in diag_cols]:\n                    return count\n                diag_rows.remove(row)\n                diag_cols.remove(y)\n                count += 1\n        for col in diag_cols:\n            if (x,col) not in [(x,y) for x in diag_rows]:\n                if (row,col) in [(x,y) for x in diag_rows]:\n                    return count\n                diag_cols.remove(col)\n                diag_rows.remove(x)\n                count += 1\n        y += 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x,y-1) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(y)\n            diag_rows.append(x)\n            count += 1\n        x += 1\n        if (x,y) not in [(x,y) for x in diag_rows]:\n            if (x-1,y) in [(x,y) for x in diag_rows]:\n                return count\n            diag_rows.append(x)\n            diag_cols.append(y)\n            count += 1\n        y -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x -= 1\n        if (x,y) not in [(x,y) for x in diag_rows]:\n            if (x-1,y) in [(x,y) for x in diag_rows]:\n                return count\n            diag_rows.append(x)\n            diag_cols.append(y)\n            count += 1\n        y += 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x += 1\n        if (x,y) not in [(x,y) for x in diag_rows]:\n            if (x-1,y) in [(x,y) for x in diag_rows]:\n                return count\n            diag_rows.append(x)\n            diag_cols.append(y)\n            count += 1\n        x -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        y -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x-1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x += 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x-1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        y -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x += 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x-1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x += 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x-1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x += 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x-1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag_cols.append(x)\n            diag_rows.append(y)\n            count += 1\n        x -= 1\n        if (x,y) not in [(x,y) for x in diag_cols]:\n            if (x+1,y) in [(x,y) for x in diag_cols]:\n                return count\n            diag"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    res = 0\n    t = 0\n    d = [[True] * n for _ in range(n)]\n    while True:\n        if t == c:\n            break\n        for x, y in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n            if 0 <= x < n and 0 <= y < n and not d[x][y]:\n                d[x][y] = True\n                t += 1\n        res += 1\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, c = map(int, stdin.split())\n    if c <= (x * y):\n        return str(0)\n    dp = [[False] * y for _ in range(x)]\n    dp[0][0] = True\n    d = 1\n    while d < x:\n        if dp[d][y - 1] and dp[d - 1][y]:\n            dp[d][y] = True\n        elif dp[d][y - 1]:\n            dp[d][y] = True\n            d += 1\n        elif dp[d - 1][y]:\n            dp[d][y] = True\n            d += 1\n        else:\n            dp[d][y] = True\n            d += 1\n        d += 1\n    d = 1\n    while d < y:\n        if dp[x - 1][d] and dp[x][d - 1]:\n            dp[x][d] = True\n        elif dp[x - 1][d]:\n            dp[x][d] = True\n            d += 1\n        elif dp[x][d - 1]:\n            dp[x][d] = True\n            d += 1\n        else:\n            dp[x][d] = True\n            d += 1\n        d += 1\n    if dp[x - 1][y - 1] and dp[x - 1][y + 1] and dp[x][y - 1] and dp[x][y + 1]:\n        return str(0)\n    if dp[x - 1][y - 1] and dp[x - 1][y + 1]:\n        return str(1)\n    elif dp[x - 1][y - 1]:\n        return str(1)\n    elif dp[x - 1][y + 1]:\n        return str(1)\n    elif dp[x][y - 1] and dp[x][y + 1]:\n        return str(1)\n    else:\n        return str(2)\n\n\nstdin = '9 3 8 10'\nprint(solution(stdin))\n\nstdin = '6 4 3 1'\nprint(solution(stdin))\n\nstdin = '9 3 8 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '9 3 8 10'\nprint(solution(stdin))\n\nstdin = '2 2'\nprint(solution(stdin))\n\nstdin = '3 4 1'\nprint(solution(stdin))\n\nstdin = '9 3 8 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 5 10'\nprint(solution(stdin))\n\nstdin = '9 5 10'\nprint(solution(stdin))\n\nstdin = '9 5 10'\nprint(solution(stdin))\n\nstdin = '9 9'\nprint(solution(stdin))\n\nstdin = '9 9'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '10 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '9 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '1 10'\nprint(solution(stdin))\n\nstdin = '10 10'\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y, C = map(int, stdin.split())\n    return str(C - ((X - 1) * (X + 2) + (Y - 1) * (Y + 2)) // 2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    t = 0\n    def clock():\n        nonlocal t\n        t += 1\n        return t\n    di = [0, 1, 0, -1]\n    dj = [1, 0, -1, 0]\n    def check(x, y, c):\n        global n, di, dj, x, y, c, t\n        seen = set()\n        for i in range(4):\n            ni = x + di[i]\n            nj = y + dj[i]\n            if 0 <= ni < n and 0 <= nj < n:\n                if (ni, nj) not in seen and c - 1 >= 0:\n                    seen.add((ni, nj))\n                    check(ni, nj, c - 1)\n    seen = set()\n    check(x, y, c)\n    return t\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = list(map(int, stdin.split()))\n\n    if x + y <= n:\n        return str(min(x, y))\n\n    side_adjacent_cells = 0\n    while x!= n or y!= n:\n        if x == n or y == n:\n            break\n\n        if (x - 1, y) == (n, n) or (x - 1, y) == (n, y):\n            side_adjacent_cells += 1\n        if (x, y + 1) == (n, n) or (x, y + 1) == (x, n):\n            side_adjacent_cells += 1\n        if (x + 1, y) == (n, n) or (x + 1, y) == (x, n):\n            side_adjacent_cells += 1\n        if (x, y - 1) == (n, n) or (x, y - 1) == (x, n):\n            side_adjacent_cells += 1\n\n        x -= 1\n        y += 1\n\n    return str(min(n * (n - 1), n * (n - 1) - side_adjacent_cells, n * (n - 1) + side_adjacent_cells))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    state = [[0]*n for _ in range(n)]\n    count = 0\n    while count < c:\n        x0, y0 = x - 1, y\n        x1, y1 = x + 1, y\n        x2, y2 = x, y - 1\n        x3, y3 = x, y + 1\n        if x0 < 0: x0 = 0\n        if x0 > n - 1: x0 = n - 1\n        if x1 < 0: x1 = 0\n        if x1 > n - 1: x1 = n - 1\n        if x2 < 0: x2 = 0\n        if x2 > n - 1: x2 = n - 1\n        if x3 < 0: x3 = 0\n        if x3 > n - 1: x3 = n - 1\n        if y0 < 0: y0 = 0\n        if y0 > n - 1: y0 = n - 1\n        if y1 < 0: y1 = 0\n        if y1 > n - 1: y1 = n - 1\n        if y2 < 0: y2 = 0\n        if y2 > n - 1: y2 = n - 1\n        if y3 < 0: y3 = 0\n        if y3 > n - 1: y3 = n - 1\n        for i in range(y0, y1):\n            for j in range(x0, x1):\n                state[i][j] = 1 - state[i][j]\n        for i in range(y2, y3):\n            for j in range(x2, x3):\n                state[i][j] = 1 - state[i][j]\n        count += 1\n    return str(sum([sum(row) for row in state]))\n\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, c = list(map(int, stdin.split()))\n    if y + c - 1 > x:\n        return '-1'\n    side_adj = 0\n    while True:\n        side_adj += 1\n        if x - 1 < 0 or y - 1 < 0:\n            break\n        if (x - 1, y) in {(x, y), (x - 1, y - 1), (x, y - 1), (x - 1, y + 1)}:\n            continue\n        if (x - 1, y - 1) in {(x, y), (x - 1, y), (x, y - 1), (x - 1, y + 1)}:\n            continue\n        if (x + 1, y - 1) in {(x, y), (x + 1, y), (x, y - 1), (x + 1, y + 1)}:\n            continue\n        if (x - 1, y + 1) in {(x, y), (x - 1, y), (x, y + 1), (x + 1, y + 1)}:\n            continue\n        break\n    return str(side_adj)"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nn, x, y, c = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a + b, a - b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    max_bit = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            bit_sum = i ^ j\n            if bit_sum > max_bit:\n                max_bit = bit_sum\n    return str(max_bit)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    xor = a ^ b\n    return str(xor)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split()))\n    if l == r:\n        return 0\n    a = int('1' * l, 2)\n    b = int('1' * r, 2)\n    if l > r:\n        l, r = r, l\n    return max(a ^ b, a + b)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums = sorted(nums)\n    n = len(nums)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = nums[i]\n    for l in range(n - 1, -1, -1):\n        for r in range(l, n):\n            a = nums[l]\n            b = nums[r]\n            dp[l][r] = max(a + dp[l + 1][r], b + dp[l][r - 1])\n    return str(dp[0][-1])\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    # print(l, r)\n    max_xor = -2**63\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if i | j > max_xor:\n                max_xor = i | j\n    return str(max_xor)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    a_plus_b = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            a_plus_b += a ^ b\n    return str(a_plus_b)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '%d' % (a ^ b)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    l, r = int(stdin[0]), int(stdin[1])\n    max_val = 0\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            val = i ^ j\n            if val > max_val:\n                max_val = val\n    print(max_val)\nsolution(input())"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_ab = a ^ b\n    print(max_ab)"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(x + (x - 2) % 2 for x in range(2 * n + 1) if x % 2 and x < n and k >= 2 * x ** 2 + 1))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(range(n), key=lambda p: p + 1 + (2 * p) % (n + 1)))\n\nprint(solution(input()))\n\n\n'''\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = 2 * n\n    while h * (k - h * 2) > (n * h * (n - 1)):\n        h -= 1\n    return str(h)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min((2 * n + 1) // 2, k))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k - (n * (n + 1) * 2) // (2 * (2 * n - 1)))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n // 2 + (n // 2 - 1) * (n // 2 + 1) // 2 - k)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(i - k for i in range(1, n + 2) if i % 2 == 1))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = map(int, stdin.split())\n    return str(min(int((pow(2, n) - 2) * k / (pow(2, n) - 1)), int(pow(2, n) * k / (pow(2, n) - 1))))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    for y in range(n * 2 + 1):\n        for x in range(n + 1):\n            if y % 2 == 1 and x % 2 == 0:\n                print(y - x, end=' ')\n        print()\n    return str(k - (n + 1) * y - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (x, y, z, t1, t2, t3) = (int(i) for i in stdin.split())\n    if x!= y:\n        return 'NO'\n    if t1 + t2 + t3 < t1 * 2 + t2 * 2 + t3 * 2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if x - y > 0 and x - z > 0:\n        if t1 <= t2 and t2 <= t3 and x - y <= t1:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = list(map(int, stdin.split()))\n    if x!= y:\n        return \"NO\"\n    if t_1 > t_2 + t_3 or t_2 > t_1 + t_3:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = list(map(int, stdin.split()))\n    t_3_min = min(t_1, t_2)\n    t_3_max = max(t_1, t_2)\n    if t_3_min <= t_3_max <= t_3:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    #print(x, y, z, t_1, t_2, t_3)\n    if x + t_2 > y + t_2:\n        return 'YES'\n    elif x + t_2 == y + t_2 and z - t_3 < z - t_1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    x, y, z, t_1, t_2, t_3 = list(map(int, stdin.split()))\n    if x!= y and t_2 <= t_1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    return \"YES\" if max(t1, t2, t3) <= (x - y) else \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = (int(num) for num in stdin.split())\n    if x == y or x == z or y == z:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if x > y:\n        return 'NO'\n    else:\n        if (t1 + t2 + t3) > (x + y + z):\n            return 'NO'\n        else:\n            if t1 > t2:\n                return 'YES'\n            else:\n                return 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if t1 > t2 + t3:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    def prob(a,n,m):\n        a = a+1\n        num = 1/n\n        den = 1/n\n        for i in range(1,n):\n            den = 1/(i+1) + den\n        return (a**m) * (num/den)\n    def prob2(c,n,m):\n        a = 2\n        b = 1\n        for i in range(1,n):\n            a = a + 1/i\n        for i in range(1,n):\n            b = b + 1/(i+1)\n        num = (a**m) * (c**m) * (n**m)\n        den = b**m\n        return num/den\n    return str(max(prob(m,n,m),prob2(m,n,m)))\n    # your code here"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n\n    for c in range(n + 1):\n        if abs(c - m) > abs(c - a):\n            a = c\n    return str(a)"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    for a in range(n + 1):\n        for c in range(n + 1):\n            if abs(c - a) < abs(c - m):\n                return str(a)\n    return str(n)"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    for a in range(1, n+1):\n        if a == m:\n            return str(m)\n        if abs(m - a) < abs(m - n):\n            break\n    return str(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"2\"\n    candidates = list(range(1, n+1))\n    for a in candidates:\n        d = abs(m - a)\n        if d <= abs(n - m):\n            return str(a)\n    return str(candidates[-1])\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, m = (int(i) for i in stdin.split())\n  result = 0\n  probability = 1\n\n  # find c such that probability of losing is max\n  for i in range(n + 1):\n    probability = i / n\n    if (m - i) <= (m - n) and probability > result:\n      result = probability\n\n  # find a\n  for i in range(1, n):\n    if probability - i > result:\n      break\n    result = probability - i\n\n  return str(result)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    probability = 0\n    a = m\n    c = 1\n    while c <= n:\n        probability = probability + abs(a - c) / abs(c - m)\n        a = a + 1\n        c = c + 1\n    return str(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(i for i in range(n + 1) if abs(i - m) < abs(i - n)))"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        count += abs(m - i)\n    for j in range(1, n+1):\n        count += abs(n - m - j)\n    return str(count)"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    m_estimate = n\n    a_estimate = 1\n    while m_estimate > 1:\n        if abs(a_estimate - m) < abs(a_estimate - m_estimate):\n            a_estimate = m_estimate\n        m_estimate = m_estimate - 1\n        a_estimate = a_estimate + 1\n    return str(a_estimate)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for line in stdin.split(\"\\n\") if not line.strip()))"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = stdin.split()\n    result = 0\n    for i in range(len(pairs)):\n        if pairs[i] == '1':\n            result += 1\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = list(map(int, stdin.split()))\n    count = 0\n    current = pairs[0]\n    for i in range(1, n):\n        if pairs[i] == current:\n            count += 1\n        else:\n            count = 0\n        current = pairs[i]\n    return str(count)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pairs = stdin.split()\n    start = 0\n    pairs = {0:0, 1:0}\n    for pair in pairs:\n        if pair == 0:\n            start += 1\n            pairs[start] = 0\n        else:\n            pairs[start] += 1\n    pairs[1] = pairs[1] - pairs[0]\n    print(pairs[1])\nsolution(input())"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sched = stdin.split(\" \")\n    l = len(sched)\n    cnt = 0\n    for i in range(l):\n        if sched[i] == \"1\":\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = stdin.split()\n    free_pairs = []\n    for i in range(n):\n        if int(pairs[i]) == 0:\n            free_pairs.append(i)\n    \n    if len(free_pairs) == 0:\n        return f'0'\n    \n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer += len(free_pairs)\n            continue\n        \n        pairs[i-1] = 0\n        pairs[i] = 1\n        if i+1 in free_pairs:\n            answer += 1\n    \n    return str(answer)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time = 0\n    pairs = 0\n    while True:\n        first = stdin.split(\" \")\n        if first[0] == \"0\":\n            return str(pairs)\n        for i in range(1, len(first)):\n            if first[i] == \"1\":\n                if pairs == 0:\n                    pairs = 1\n                elif pairs == 1:\n                    pairs = 2\n                else:\n                    pairs = 0\n                break\n        time += 1\n        if pairs == 1:\n            time += 1\n        elif pairs == 2:\n            time += 2\n        else:\n            time += 4"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    counter = 0\n    i = 0\n    for a in stdin.split(\" \"):\n        if i > 0 and i % 2 == 0:\n            if int(a) == 0:\n                counter += 1\n        i += 1\n    return str(counter)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    a = stdin.split()\n    for i in range(len(a)):\n        if int(a[i]) == 1:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = []\n    for i in range(n):\n        pairs.append(stdin)\n    while pairs!= []:\n        x = pairs.pop(0)\n        if x == 0:\n            continue\n        elif x == 1:\n            for i in range(n-1):\n                if pairs[i] == 1:\n                    pairs.pop(i)\n                    break\n            else:\n                x = pairs.pop(0)\n                while x == 0:\n                    pairs.pop(0)\n        else:\n            for i in range(n):\n                if pairs[i] == 0:\n                    pairs.pop(i)\n                    break\n            else:\n                x = pairs.pop(0)\n                while x == 1:\n                    pairs.pop(0)\n    return len(pairs)\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n // 2:\n        return -1\n    if n == 0 and k == 0:\n        return 0\n    if k > n:\n        return -1\n    ans = n - k + 1\n    for i in range(1, n + 1):\n        if i - k <= 0:\n            ans = min(ans, i - 1)\n        else:\n            ans = min(ans, i + k - 1)\n    return str(ans)\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, k, n = stdin.split()\n    k, n = int(k), int(n)\n    if k <= 0 or n <= 0:\n        return -1\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a) == n:\n        return 0\n    ans = a[-1] - a[0]\n    for i in range(n - 1):\n        if a[i + 1] - a[i] <= k:\n            ans = min(ans, a[i + 1] - a[i] + 1)\n        else:\n            ans = min(ans, (a[i + 1] - a[i]) - (k - 1))\n    return str(ans)"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n## Read input as lines ##\nlines = stdin.splitlines()\nn, k = map(int, lines[0].split())\nboxes = list(map(int, lines[1].split()))\n\n## If Arya doesn't give k candies within n days, then return -1 ##"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    saved = 0\n    days = 0\n    while days < n and saved < k:\n        days += 1\n        candies = candies[1:] + candies[:1]\n        if saved + min(days, 8) <= k:\n            saved += min(days, 8)\n        else:\n            return -1\n    if saved < k:\n        return -1\n    return str(days)\n\nprint(solution(input()))"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if k >= n:\n        return -1\n    days = 0\n    res = 0\n    while k > 0 and a:\n        days += 1\n        a.sort()\n        a.pop(0)\n        if len(a) < 8:\n            k -= len(a)\n        else:\n            k -= 8\n    return days"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(func(n, k, a))\n\n\ndef"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    candies = [int(x) for x in stdin.split()]\n    if k >= len(candies):\n        return \"-\"\n    k_arr = []\n    for i in range(len(candies)):\n        k_arr.append(i)\n    # print(k_arr)\n    start_day = 1\n    days = 0\n    while len(k_arr) > 0:\n        min_candies = len(k_arr)\n        for i in range(len(k_arr)):\n            k_arr.pop(0)\n        for i in range(start_day, len(candies)):\n            if i + len(k_arr) <= n:\n                k_arr.append(i)\n                # print(k_arr)\n            if len(k_arr) >= k:\n                break\n        start_day += 1\n        days += 1\n        if k_arr == [] and min_candies!= len(k_arr):\n            return \"-\"\n    return days"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    if (k > len(candies)):\n        return -1\n    candies = candies[:k]\n    for i in range(n-k+1):\n        candies.sort()\n        if candies[i] + candies[i+k-1] > max(candies[i+1:i+k]):\n            candies[i+k-1] = candies[i] + candies[i+k-1]\n        else:\n            candies[i+k-1] = max(candies[i+1:i+k])\n    print(candies[-1])\n\nsolution(input())\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    max_candies = 0\n    candies.sort(reverse=True)\n\n    for i in range(n):\n        if len(candies) < k:\n            return -1\n        if len(candies) == k:\n            return i+1\n        max_candies = max(max_candies, candies[i] + candies[i+1])\n        candies.pop(0)\n        candies.pop(0)\n    return max_candies\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days = []\n    for _ in range(n):\n        days.append(int(stdin.split()[0]))\n\n    days.sort()\n    ans = 0\n    for i in range(n):\n        if days[i] <= k:\n            k -= days[i]\n        else:\n            k %= 8\n            if k == 0:\n                return str(i + 1)\n            else:\n                return \"-\"\n    return str(ans)\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = (int(x) for x in stdin.split())\n    return''.join(map(str, min_walk(n, k)))\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = map(int, stdin.split())\n    a = [*map(int, stdin.split())]\n    a.sort(reverse=True)\n    b = [0] * n\n    \n    for i in range(1, n):\n        b[i] = a[i-1] + b[i-1]\n    \n    return str(b[-1]) + '\\n' +''.join(map(str, b))"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    plans = list(map(int, stdin.split()))\n    plan_count = 1\n    count = 0\n    output = [0]\n    last_plan = 0\n    for plan in plans:\n        if plan == last_plan + 1:\n            count += 1\n        else:\n            count = 1\n        last_plan = plan\n        if count == k:\n            count += 1\n            output.append(count)\n            count = 0\n    output.append(0)\n    return \" \".join(map(str, output))\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # n, k = 5, 5\n    # a = [2, 4, 3, 1, 0]\n\n    # dp[i][j] is the minimum number of additional walks needed for i-th day, if it was a dog on j-th walk\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j >= a[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    print(dp[n][k])\n\n    # print(dp)\n    r = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(n, -1, -1):\n        for j in range(k, -1, -1):\n            if j >= a[i - 1]:\n                r[i][j] = max(r[i + 1][j], r[i + 1][j - a[i - 1]] + 1)\n            else:\n                r[i][j] = r[i + 1][j]\n\n    # print(r)\n    c = 0\n    for i in range(n, 0, -1):\n        if dp[i][k] < r[i][k]:\n            c = i\n\n    print(*r[c][:k + 1])\n    return\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    b = [0]\n    for a_i in a:\n        b.append(b[-1] + a_i)\n    ans = 0\n    for i in range(n):\n        ans = max(ans, b[i + 1] - b[i])\n    return str(ans)\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_2 = n // 2\n    cormen_walk = n_2\n    walks = [0] * n\n    for i in range(n):\n        walks[i] = int(stdin.split()[i])\n    for i in range(n_2):\n        walks[i] = 0\n    walks[n_2] = 0\n    walks[n_2 + 1] = 0\n    walks_2 = []\n    walk_1 = 0\n    walk_2 = 0\n    for i in range(n):\n        walk_1 += walks[i]\n        walk_2 += walks[n_2 + 1 - i]\n        if walk_1 >= k:\n            walks_2.append(i + 1)\n            walk_1 = 0\n    walks = walks_2\n    walks_2 = []\n    walk_1 = 0\n    walk_2 = 0\n    for i in range(n):\n        walk_1 += walks[i]\n        walk_2 += walks[n_2 + 1 - i]\n        if walk_2 >= k:\n            walks_2.append(i + 1)\n            walk_2 = 0\n    walks = walks_2\n    if len(walks) == 1:\n        walks.append(0)\n    walks = sorted(walks)\n    walks = [walks[0]] + walks\n    return str(walks[n_2 + 1]) +'' + str(walks[n_2 + 2])"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # what if k = 0\n    if k == 0:\n        return str(n)\n    # possible answer\n    ans = float('inf')\n    # assume the dog knows that he needs to walk at least k times\n    # find k+1 consecutive a's\n    i = 0\n    while i < n:\n        if a[i] >= k:\n            # if it meets k, then check all the k+1 consecutive a's\n            j = i\n            while j+1 < n and a[j+1] >= k:\n                j += 1\n            # update the answer\n            ans = min(ans, j-i+1)\n            i = j+1\n        else:\n            i += 1\n    if ans == float('inf'):\n        return str(0)\n    else:\n        return str(ans)\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # count number of days\n    n = int(stdin.split()[0])\n\n    # check if the number of days is larger than k\n    if n > int(stdin.split()[1]):\n        return '0'\n\n    # create lists\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n\n    # sort a and b\n    a.sort()\n    b.sort()\n\n    # zip a and b\n    zipped = zip(a, b)\n    zipped = sorted(zipped)\n\n    # find min value\n    min_value = abs(sum(zipped[0]))\n\n    # find min value for every day\n    for day in range(len(zipped)):\n        min_value = min(min_value, abs(sum(zipped[day])))\n\n    # return result\n    return str(min_value)\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    c = Counter(a)\n\n    for i in range(1, n):\n        c[a[i]] -= 1\n        c[a[i - 1]] += 1\n\n    for i in range(1, n):\n        c[a[i]] += 1\n\n    ans = 0\n    res = []\n\n    for i in range(n - k):\n        if c[a[i]] >= 0:\n            ans += 1\n            res.append(a[i])\n\n    return str(ans) + '\\n' +''.join(map(str, res))"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_days = int(stdin)\n    num_of_plans = int(stdin)\n    plans = list(map(int, stdin.split()))\n\n    min_walks = num_of_days\n    for i in range(num_of_days - num_of_plans + 1):\n        day = i + 1\n        num_of_plans = sum(plans[i:i + num_of_plans])\n        #print(num_of_plans, day)\n        if num_of_plans <= day:\n            min_walks = min(min_walks, day - num_of_plans + 1)\n    return str(min_walks)\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * solution(stdin - 1)\n    return solution(stdin)\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nn = int(stdin)\n\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return (\n    str(int(stdin))\n  )"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    else:\n        return str(sum([1, 1] * n))\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    return str(rhombus(input))\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns:\n        str: response text\n    '''\n    n = int(stdin)\n    return str(n**2)"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nmy input\n2\n\noutput\n1\n\nmy output\n5\n\n-----Explanation-----\n\nfor 1st order rhombus we obtain the following sequence:\n\nn = 1\n[1]\n\nFor 2nd order rhombus we obtain the following sequence:\n\nn = 2\n[1, 1]\n[1, 2, 1]\n[2, 1, 1]\n[2, 2, 2, 1]\n[2, 2, 2, 3, 1]\n...\n\n'''\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1]\n    is_panagram = True\n    for i in stdin:\n        if not i.isupper() and not i.islower():\n            is_panagram = False\n    return 'YES' if is_panagram else 'NO'"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = 0\n    for letter in stdin:\n        if letter in alpha:\n            alphabet += 1\n    if alphabet >= 26:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if not is_pangram(stdin) else \"YES\"\n\ndef"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    letters_to_count = {}\n    for letter in stdin:\n        if letter.islower():\n            if letter in letters_to_count:\n                letters_to_count[letter] += 1\n            else:\n                letters_to_count[letter] = 1\n        else:\n            if letter.upper() in letters_to_count:\n                letters_to_count[letter.upper()] += 1\n            else:\n                letters_to_count[letter.upper()] = 1\n\n    for letter in stdin:\n        if letter.islower():\n            if letters_to_count[letter] == 1:\n                return \"YES\"\n        else:\n            if letters_to_count[letter.upper()] == 1:\n                return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    char_list = set()\n    string = stdin.split(\"\\n\")[1]\n    for char in string:\n        char_list.add(char)\n    if len(char_list) == 26:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 26:\n        return 'NO'\n    c = []\n    for i in s:\n        if i not in c:\n            c.append(i)\n    if len(c) == 26:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if len(set(''.join(stdin.lower().split()))) < 26 else 'YES'"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alphabet:\n        if char in stdin.lower():\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    for char in stdin:\n        if char in alphabet:\n            alphabet = alphabet.replace(char, \"\")\n\n    if len(alphabet) == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, a = stdin.split(\":\")\n    h = int(h)\n    m = int(m)\n    h, m = divmod(m + a, 60)\n    return f'{h:02}:{m:02}'\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m, a = stdin.split()\n    h, m = int(h), int(m)\n    m += a\n    if m >= 60:\n        h += 1\n        m = m - 60\n    if h >= 24:\n        h = h - 24\n    return \"{:02}:{:02}\".format(h, m)\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_h, input_m = stdin.split()\n    hours = int(input_h)\n    minutes = int(input_m)\n    new_hours = hours\n    new_minutes = minutes + minutes % 60\n    if new_minutes > 59:\n        new_hours += new_minutes // 60\n        new_minutes = new_minutes % 60\n    print(f\"{new_hours:02d}:{new_minutes:02d}\")\n    return\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(':')\n    mins = int(mm) + int(hh) * 60\n    hh = str(mins // 60)\n    mins = str(mins % 60)\n    return hh + ':' + mins\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, minutes = stdin.split('\\n')\n    minutes = int(minutes)\n    if minutes % 60 == 0:\n        return '00:00'\n    return f'{int(minutes // 60):02d}:{minutes % 60:02d}'\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    time, minutes = stdin.split()\n    hour = int(time.split(':')[0])\n    minute = int(time.split(':')[1])\n    minute += minutes\n    if minute >= 60:\n        hour += 1\n        minute -= 60\n    return f'{hour:02}:{minute:02}'"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(' ')\n    hours = int(h)\n    minutes = int(m)\n    hours = hours + minutes // 60\n    minutes = minutes % 60\n    return \"{:02}:{:02}\".format(hours, minutes)\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split())\n    hh += mm // 60\n    hh %= 24\n    mm %= 60\n    return f'{hh:02}:{mm:02}'\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m, a = stdin.split()\n    h, m = int(h), int(m)\n    # first, if there are not enough minutes passed\n    if m + a < 60:\n        h += 1\n        m = (m + a)\n    else:\n        # or use the rest of the minutes\n        h += 1\n        m = (m + a - 60)\n\n    return '{:0>2}:{:0>2}'.format(h, m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(\",\")\n    hours = int(time[0])\n    minutes = int(time[1])\n    if minutes < 10:\n        minutes = \"0\" + str(minutes)\n    if hours < 10:\n        hours = \"0\" + str(hours)\n    new_hours = hours + str(minutes)\n    return new_hours\n\nprint(solution(input()))\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    lamps = []\n    for i in range(m):\n        lamps.append(i)\n    for i in range(n):\n        if arr[i] == 1:\n            lamps.remove(i)\n    if len(lamps) == 0:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if m == 0:\n        return 'YES'\n    \n    first = []\n    for i in range(n):\n        first.append(list(map(int, stdin.split())))\n\n    for j in range(m):\n        for i in range(n):\n            if first[i][j] == 0:\n                continue\n            first[i][j] = 0\n            if j > 0:\n                first[i][j-1] = 0\n            if j < m - 1:\n                first[i][j+1] = 0\n            if i > 0:\n                first[i-1][j] = 0\n            if i < n - 1:\n                first[i+1][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if first[i][j] == 1:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = [0] * m\n    for i in range(n):\n        a = map(int, stdin.strip().split())\n\n    for i in range(n):\n        for j in range(m):\n            if i!= j and a[i] and a[j]:\n                continue\n            else:\n                break\n        else:\n            print('YES')\n            return\n    print('NO')\n    return\n\nsolution(\n    '''4 5\n10101\n01000\n00111\n10000\n\n'''\n)\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = stdin.split(\"\\n\")\n    x = list(map(lambda y: y.split(\" \"), x))\n\n    for i in range(len(x)):\n        if x[i][0] == \"0\":\n            if len(x[i]) == 2:\n                x[i][1] = \"0\"\n            elif len(x[i]) == 3:\n                x[i][1] = \"1\"\n            else:\n                x[i][1] = \"1\"\n                x[i][2] = \"1\"\n\n    a = list(map(lambda x: list(map(int, x)), x))\n    a.pop(0)\n\n    c = []\n    for i in a:\n        for j in i:\n            if j == 0:\n                break\n        else:\n            c.append(True)\n\n    if all(c):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = ''.join(stdin.split())\n    if int(x, 2) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin.split())\n    \n    for row in matrix:\n        matrix.sort(key=lambda x: x[0])\n        break\n    \n    def print_false(matrix):\n        for i in range(n):\n            print(\"NO\" if matrix[i][0] == \"1\" else \"YES\")\n        return\n    \n    return print_false(matrix)\n\nsolution(input())\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    # define matrix\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    # find out that the first switch is off\n    for i in range(n):\n        if matrix[0][i] == 0:\n            return \"NO\"\n\n    # find out that the last switch is off\n    for i in range(m):\n        if matrix[n - 1][i] == 0:\n            return \"NO\"\n\n    # check if there is any switch not connected to any lamp\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rows = [0] * n\n    cols = [0] * m\n\n    for i in range(n):\n        rows[i] = stdin.split()[i]\n    for i in range(m):\n        cols[i] = stdin.split()[i]\n\n    for row in rows:\n        for i in range(len(row)):\n            if row[i] == '1':\n                if row[i + 1] == '1':\n                    return \"NO\"\n                if cols[i] == \"0\":\n                    cols[i] = \"1\"\n                else:\n                    cols[i] = \"0\"\n\n    if cols.count('1') >= m:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = [int(x) for x in stdin.strip().split()]\n    \n    lamps = set()\n    \n    for i in range(n):\n        lamps.add(a[i])\n    \n    if sum(lamps) == m:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nsolution(input())"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lamps = list(map(int, stdin.split()))\n\n    cnt = 0\n    for i in range(n):\n        a = lamps[i]\n        for j in range(m):\n            if a & (1 << j) == 0:\n                cnt += 1\n\n    return \"YES\" if cnt == n else \"NO\"\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, stdin.strip().split())))\n    ans = -1\n    for i in range(n):\n        a = l[i][0]\n        b = l[i][1]\n        c = 0\n        d = 0\n        if(a > b):\n            if(a % 2!= 0):\n                c = a + b\n            else:\n                c = a - b\n        else:\n            if(b % 2!= 0):\n                d = a + b\n            else:\n                d = a - b\n        if(c == 0 and d == 0):\n            ans = max(ans, 0)\n        else:\n            ans = max(ans, c + d)\n    return str(ans)\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(dominoes: List[List[int]]) -> List[List[int]]:\n        x_half, y_half = dominoes[0], dominoes[1]\n        dominoes[0], dominoes[1] = y_half, x_half\n        return dominoes\n\n    dominoes = []\n    for i in range(int(stdin)):\n        dominoes.append([int(j) for j in stdin.split('\\n')[i + 1].split()])\n    x_sum = 0\n    y_sum = 0\n    for domino in dominoes:\n        x_sum += domino[0]\n        y_sum += domino[1]\n    if x_sum % 2!= 0 or y_sum % 2!= 0:\n        return '-1'\n    return str(x_sum + y_sum)"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    y = 0\n    for i in range(n):\n        x += int(stdin.split()[i])\n        y += int(stdin.split()[i+n])\n    if x % 2 == 0 and y % 2 == 0:\n        return str(abs(x - y))\n    elif x % 2 == 0 and y % 2 == 1:\n        return str(abs(x - y) + 1)\n    elif x % 2 == 1 and y % 2 == 0:\n        return str(abs(x - y) + 1)\n    else:\n        return str(abs(x - y) + 1)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '-1'\n    x = y = 0\n    for i in range(n):\n        x, y = y, x + y + int(stdin.strip().split()[i][0])\n    return str(x + (n-1)*y)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    maxSum: int = 0\n    minTime: int = -1\n    sumUpper = sumLower = 0\n    for i in range(N):\n        X, Y = map(int, stdin.split())\n        maxSum = max(maxSum, max(X, Y) + min(X, Y))\n        sumUpper += X\n        sumLower += Y\n    for i in range(N):\n        if sumUpper % 2 == 0 and sumLower % 2 == 0:\n            minTime = max(minTime, 2 * abs(sumUpper - sumLower) - maxSum)\n        else:\n            if sumUpper % 2 == 0:\n                minTime = max(minTime, 2 * abs(sumUpper - sumLower) - maxSum - 2)\n            if sumLower % 2 == 0:\n                minTime = max(minTime, 2 * abs(sumUpper - sumLower) - maxSum + 2)\n        sumUpper -= X\n        sumLower -= Y\n    return str(minTime) if minTime!= -1 else '-1'\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cnt = 0\n    while n > 0:\n        for i in range(n):\n            if i % 2 == 0:\n                n -= 1\n                cnt += 6\n            else:\n                n -= 1\n                cnt += 4\n        if cnt % 2 == 0:\n            return '-1'\n        else:\n            return str(cnt // 2)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_upper = 0\n    sum_lower = 0\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        sum_upper += x\n        sum_lower += y\n        if sum_upper == sum_lower:\n            return 0\n        else:\n            if sum_upper > sum_lower:\n                sum_upper -= x\n            else:\n                sum_lower -= y\n    return -1 if (sum_upper % 2!= 0) or (sum_lower % 2!= 0) else (sum_upper / 2) + (sum_lower / 2)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    s1: List[List[int]] = [[int(i) for i in stdin.split()[1].split()] for j in range(n)]\n    s2: List[List[int]] = [[int(i) for i in stdin.split()[1].split()] for j in range(n)]\n\n    for i in range(n):\n        s1[i].reverse()\n        s2[i].reverse()\n\n    for i in range(n):\n        if s1[i][0] + s2[i][0]!= 6:\n            return '-1'\n\n    #for i in range(n):\n    #    if s1[i][0] + s2[i][0]!= 6:\n    #        return '-1'\n\n    sum_up_p1 = 0\n    sum_up_p2 = 0\n    sum_up_p3 = 0\n    sum_up_p4 = 0\n\n    sum_down_p1 = 0\n    sum_down_p2 = 0\n    sum_down_p3 = 0\n    sum_down_p4 = 0\n\n    for i in range(n):\n        sum_up_p1 += s1[i][0]\n        sum_up_p2 += s1[i][1]\n        sum_up_p3 += s2[i][0]\n        sum_up_p4 += s2[i][1]\n        sum_down_p1 += s1[i][1]\n        sum_down_p2 += s1[i][0]\n        sum_down_p3 += s2[i][1]\n        sum_down_p4 += s2[i][0]\n\n    if sum_up_p1 % 2 == 0 and sum_up_p2 % 2 == 0 and sum_up_p3 % 2 == 0 and sum_up_p4 % 2 == 0 \\\n            and sum_down_p1 % 2 == 0 and sum_down_p2 % 2 == 0 and sum_down_p3 % 2 == 0 and sum_down_p4 % 2 == 0:\n        return str(min(sum_up_p1, sum_down_p1) + min(sum_up_p2, sum_down_p2) + min(sum_up_p3, sum_down_p3) + min(sum_up_p4,\n                                                                                                               sum_down_p4))\n    else:\n        return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if sum(i % 2 for i in map(int, stdin.split())) % 2 else '0'\n    # your code here\n    return sum(i % 2 for i in map(int, stdin.split())) % 2\n\nstdin = input()\nprint(solution(stdin))\n\n'''\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = list(map(int, stdin.strip().split()))\n        if isprime(a*a - b*b):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    for _ in range(_):\n        a,b = map(int,stdin().split())\n        if a**2 - b**2 in range(a**2,b**2+1):\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if is_prime(a * a - b * b):\n            print('YES')\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, input().split())\n        if is_prime(a * a + b * b) and is_prime(a * b + b * a):\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_prime(int(stdin)) else 'NO'\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if isPrime(a) and isPrime(b):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin)\n    for _ in range(num_of_cases):\n        a, b = map(int, stdin.split())\n        if is_prime(a * b):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 5\n   ... 61690850361 24777622630\n   ... 34 33\n   ... ''')\n    'YES'\n    >>> solution('''4\n   ... 6 5\n   ... 16 13\n   ... 61690850361 24777622630\n   ... 34 33\n   ... ''')\n    'NO'\n    >>> solution('''4\n   ... 6 5\n   ... 16 13\n   ... 61690850361 24777622630\n   ... 34 33\n   ... ''')\n    'YES'\n    >>> solution('''4\n   ... 6 5\n   ... 16 13\n   ... 61690850361 24777622630\n   ... 34 33\n   ... ''')\n    'YES'\n    >>> solution('''4\n   ... 6 5\n   ... 16 13\n   ... 61690850361 24777622630\n   ... 34 33\n   ... ''')\n    'NO'\n    >>> solution('''3\n   ... 4\n   ... 12\n   ... 12\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 5\n   ... 12\n   ... 12\n   ... ''')\n    'NO'\n    >>> solution('''2\n   ... 3\n   ... 5\n   ... 5\n   ... ''')\n    'NO'\n    \"\"\"\n    def isPrime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for i in range(int(stdin.strip())):\n        a, b = map(int, stdin.strip().split())\n        c = a**2 - b**2\n        if c % 1 == 0 and isPrime(c):\n            return 'YES'\n        elif c % 1!= 0:\n            return 'NO'\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = list(map(int, stdin.strip().split()))\n        if isPrime(a * a - b * b):\n            print('YES')\n        else:\n            print('NO')\n    return ''\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n < 3:\n        return \"Yes\"\n    points = []\n    for i in range(n):\n        points.append([int(i) for i in stdin.split()[i + 1].split()])\n    points = sorted(points, key=lambda x: x[0])\n    for i in range(n - 1):\n        if points[i][0] + points[i + 1][0] > points[i + 1][0] + points[i][0] or points[i][1] + points[i + 1][1] > points[i + 1][1] + points[i][1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [tuple(map(int, stdin.split())) for _ in range(n)]\n    points = sorted(points, key=lambda p: p[1])\n    # l = len(points)\n    # if l <= 3:\n    #     return 'Yes' if l == 1 else 'No'\n    #\n    # ans = 'Yes'\n    # while l > 3:\n    #     points.remove(points[0])\n    #     l -= 1\n    #     ans = 'No' if ans == 'Yes' else 'Yes'\n    # return ans\n    # pass\n    if points[0][0] * points[0][1] > 0:\n        return \"No\"\n    for i in range(1, len(points)):\n        if points[i][0] * points[i][1] < 0:\n            return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(\"Yes\")\n    else:\n        for _ in range(n - 1):\n            stdin = stdin.replace('\\n', '')\n            stdin = stdin.split(' ')\n            for i in range(len(stdin)):\n                stdin[i] = int(stdin[i])\n            if abs(stdin[0]) == abs(stdin[1]):\n                print(\"Yes\")\n                break\n            elif abs(stdin[0]) > abs(stdin[1]):\n                stdin[0] = -stdin[0]\n            elif abs(stdin[0]) < abs(stdin[1]):\n                stdin[1] = -stdin[1]\n        else:\n            print(\"No\")"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    for p in points:\n        if y == p[1]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda p: abs(p[0]))\n    for i in range(1, n):\n        if points[i-1][0] == points[i][0]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = set()\n    y = set()\n    for i in range(n):\n        x.add(int(stdin.split()[i][0]))\n        y.add(int(stdin.split()[i][1]))\n    if x == set() or y == set() or len(x) == 1 or len(y) == 1:\n        return \"Yes\"\n    elif abs(x.difference(y)) == 1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = [(int(x), int(y)) for x, y in\n              [stdin.split()]]\n    points.sort(key=lambda x: x[0])\n\n    for x, y in points:\n        if x!= 0 or y!= 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_points = list(map(int, stdin.split()))\n    x_points = sorted(x_points)\n    x_points.pop(1)\n\n    if max(x_points) <= -min(x_points):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A * B // gcd(A, B))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(math.gcd(factorial(A), factorial(B)))\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    return str(gcd(a, b))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(GCD(int(stdin[0]), int(stdin[1])))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(a * b // gcd(a, b))\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(gcd(factorial(a), factorial(b)))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k = n * m\n    a = 1\n    b = 1\n    while(a <= n):\n        if(a * k!= n):\n            a = a + 1\n            continue\n        break\n    while(b <= m):\n        if(b * k!= m):\n            b = b + 1\n            continue\n        break\n    return str(a * b)\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(gcd(A, B))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_fact = 1\n    b_fact = 1\n    while a_fact!= a:\n        a_fact *= a\n    while b_fact!= b:\n        b_fact *= b\n    return str(a_fact//b_fact)\n\nprint(solution(input()))\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(math.gcd(math.factorial(A), math.factorial(B)))"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    composites = []\n    for i in range(1, n):\n        if n % i == 0:\n            composites.append(i)\n    composites.sort()\n    if len(composites) < 2:\n        return '{} {}'.format(composites[0], composites[0])\n    return '{} {}'.format(composites[0], composites[1])\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code must return a string.\n    The string must be equal to the output of your solution.\n    Your solution must contain exactly one print statement.\n    \"\"\"\n\n    import math\n\n    n = int(stdin)\n\n    for b in range(1, n // 2):\n        for a in range(b, n // 2):\n            if a + b == n:\n                print(a, b)\n                return\n\nsolution(\"512\")\n\n\n\"\"\"\nComplexity\n\nTime: O(n^2)\nSpace: O(n)\n\"\"\""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  count = 0\n  for i in range(2, n):\n    if n % i == 0:\n      count += 1\n  if count == 0:\n    return str(n) + \" \" + str(n - 1)\n  else:\n    return str(n) + \" \" + str(n // 2)\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    n2 = n - 1\n    if n % 2!= 0:\n        n2 = n - 1\n        x = 1\n        while x * x <= n:\n            if n % x == 0:\n                n2 = n - x\n                if n2 > x and n2 % x == 0:\n                    n2 = n - x\n                    return \"{} {}\".format(n2, x)\n            x += 1\n    else:\n        x = 1\n        while x * x <= n:\n            if n % x == 0:\n                n2 = n - x\n                if n2 > x and n2 % x == 0:\n                    n2 = n - x\n                    return \"{} {}\".format(n2, x)\n            x += 1\n    return \"{} {}\".format(n, n + 1)\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            return''.join([str(n), str(i)])\n    return''.join([str(n), '1'])\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    a = 2\n    while a < n:\n        if n % a == 0:\n            i += 1\n        a += i\n    i = 2\n    while i < n:\n        if n % i == 0:\n            i += 1\n        else:\n            break\n    if i == n:\n        i += 1\n    return str(i) + \" \" + str(n - i)\nsolution(input())\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split('\\n')))\n    for i in range(2, min(s)):\n        if (s[0] - s[1] == i and s[1]!= 0 and s[0]!= 1) or (s[1] - s[0] == i and s[0]!= 1 and s[1]!= 0):\n            print(f\"{s[0]} {s[1]}\")\n            return\n    print('None')\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            a = n // i\n            print(a, i)\n            break\n    else:\n        print(n, n)\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runs the solution function using stdin stream\n    \"\"\"\n    print(solution.__doc__)\n    n = int(stdin)\n    print(f'The numbers are {solution(n)}')"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(2, int(1e9)):\n        if i % 1000 == 0:\n            print(i, end=\"\\r\")\n        if i % 5 == 0 or i % 3 == 0:\n            continue\n        a, b = divmod(i, 2)\n        if a!= b:\n            continue\n        if 2*a - b == i:\n            return f\"{a} {b}\"\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    ... 2 3 10\n    ... 1 2 20\n    ... 2 3 30\n    ... 1 3 45\n    ... ''')\n    '35'\n    \"\"\"\n    n, m, p = list(map(int, stdin.strip().split()))\n    arr = [[int(a) for a in stdin.strip().split()] for _ in range(m)]\n    matrix = [[0] * (n + 1) for _ in range(n + 1)]\n    matrix[1][1] = 0\n    for i in range(m):\n        a, b, c = arr[i]\n        matrix[a][b] = c\n        matrix[b][a] = c\n    i, j = 1, 1\n    visited = set()\n    visited.add((i, j))\n    times = 0\n    max_score = 0\n    while j!= n:\n        i, j = j, i\n        times += 1\n        if i == n:\n            i, j = n, i + 1\n        if i == n:\n            times = -1\n            break\n        if (i, j) in visited:\n            if times < p:\n                max_score = max(max_score, matrix[i][j] - p)\n            else:\n                max_score = max(max_score, matrix[i][j])\n            break\n        visited.add((i, j))\n        max_score = max(max_score, matrix[i][j] - times * p)\n    if max_score >= 0:\n        return str(max_score)\n    return '-1'"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N, M, P = [int(i) for i in stdin.split()]\n    graph = []\n    for i in range(N):\n        edge = [int(j) for j in stdin.split()]\n        graph.append(edge)\n\n    def dfs(start, graph, visited, paths):\n        visited.add(start)\n        paths.append(start)\n        for i in graph[start]:\n            if i not in visited:\n                dfs(i, graph, visited, paths)\n\n    def bfs(start, graph, visited, paths, _max):\n        q = deque()\n        q.append(start)\n        visited.add(start)\n        while len(q) > 0:\n            node = q.popleft()\n            paths.append(node)\n            for i in graph[node]:\n                if i not in visited:\n                    visited.add(i)\n                    q.append(i)\n\n    def dfs_all(start, graph, visited, paths):\n        visited.add(start)\n        for i in graph[start]:\n            if i not in visited:\n                dfs_all(i, graph, visited, paths)\n            paths.append(start)\n\n    def bfs_all(start, graph, visited, paths, _max):\n        q = deque()\n        q.append(start)\n        visited.add(start)\n        while len(q) > 0:\n            node = q.popleft()\n            paths.append(node)\n            for i in graph[node]:\n                if i not in visited:\n                    visited.add(i)\n                    q.append(i)\n\n    def max_score(graph, paths, visited, _max):\n        _max = 0\n        for i in paths:\n            if i not in visited:\n                _max += graph[i][0]\n        return _max\n\n    def min_score(paths, visited):\n        _min = 99999999999999999999999999999\n        for i in paths:\n            if i not in visited:\n                _min = min(_min, graph[i][0])\n        return _min\n\n    visited = set()\n    paths = []\n    dfs_all(1, graph, visited, paths)\n    max_score(graph, paths, visited, _max=0)\n    print(_max)\n    visited = set()\n    paths = []\n    bfs_all(1, graph, visited, paths, _max=0)\n    print(_max)\n    return max_score(graph, paths, visited, _max)\n\nsolution(stdin)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    edges = [(i, i + 1, int(i / 2)) for i in range(1, n)]\n    edges += [(i, i + 1, int(i / 2)) for i in range(1, n)]\n    edges += [(i, i + 1, int(i / 2)) for i in range(1, n)]\n    graph = {i: {j for j, k, l in edges if i!= k} for i in range(1, n + 1)}\n    pos = {i: j for i, j in zip([i for i, j, k in edges], [j for i, j, k in edges])}\n    colors = {i: False for i in range(1, n + 1)}\n    dist = {}\n    colors[1] = True\n    dist[1] = 0\n    while True:\n        colors_new = colors.copy()\n        for i in range(1, n + 1):\n            if colors[i] == True:\n                for j in graph[i]:\n                    if not colors[j] or dist[i] + 1 < dist[j]:\n                        dist[j] = dist[i] + 1\n                        colors_new[j] = True\n                        pos[j] = i\n        colors = colors_new\n        if max(dist.values()) >= p:\n            break\n    return max(dist.values())"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split(\" \"))\n    array = list(map(int, stdin.split(\" \")))\n    G = [[] for i in range(N)]\n    for i in range(M):\n        a, b, c = map(int, stdin.split(\" \"))\n        G[a - 1].append([b - 1, c])\n    G.append([N - 1])\n    visited = set()\n    ans = []\n    cost = 0\n    b = False\n    for i in range(N):\n        if not b:\n            if i in visited:\n                continue\n            visited.add(i)\n            for j in range(len(G[i])):\n                if i == N - 1:\n                    ans.append(cost)\n                else:\n                    cost = cost + (G[i][j][1] * (P + cost))\n                    b = True\n        else:\n            if i in visited:\n                continue\n            visited.add(i)\n            for j in range(len(G[i])):\n                if i == N - 1:\n                    ans.append(cost)\n                else:\n                    cost = cost + (G[i][j][1] * (P + cost))\n                    b = False\n    if len(ans) == 0:\n        return \"0\"\n    else:\n        return str(max(ans))\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split())\n    g = []\n    for i in range(M):\n        a, b, c = map(int, stdin.split())\n        g.append((a, b, c))\n    v = int(stdin)\n    def dfs(v):\n        cnt = 0\n        visited = set()\n        Q = deque([(v, 0)])\n        while Q:\n            v, cur_p = Q.popleft()\n            if v == N:\n                return cur_p\n            visited.add(v)\n            for i in range(len(g)):\n                u, v, w = g[i]\n                if v == v and v not in visited:\n                    if cur_p + w > P:\n                        return -1\n                    Q.append((v, cur_p + w))\n                elif u == v:\n                    if cur_p + w > P:\n                        return -1\n                    Q.append((v, cur_p + w))\n        return -1\n    def bfs(v):\n        cnt = 0\n        visited = set()\n        Q = deque([(v, 0)])\n        while Q:\n            v, cur_p = Q.popleft()\n            if v == N:\n                return cur_p\n            visited.add(v)\n            for i in range(len(g)):\n                u, v, w = g[i]\n                if v == v and v not in visited:\n                    if cur_p + w > P:\n                        return -1\n                    Q.append((v, cur_p + w))\n                elif u == v:\n                    if cur_p + w > P:\n                        return -1\n                    Q.append((v, cur_p + w))\n        return -1\n    return \"Yes\" if dfs(v) == bfs(v) else \"No\""
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max(n: int, m: int) -> float:\n        \"\"\"\n        :param n: Number of vertices\n        :param m: Number of edges\n        :return: Max amount of coins in the game\n        \"\"\"\n        # N + 1 = N + 1 + N - 1 = N + 1 + N - 1 + N - 2 + N - 3 +... + 1\n        # P = 1 + 2 + 3 +... + N - 1\n        # T = 1 + 2 + 3 +... + N - 1 = (N - 1) + (N - 2) + (N - 3) +... + 1\n        # M = 2 * (N - 1) + 2 + N\n        # (P - M) >= T\n\n        # For each edge, one of the following two conditions is true:\n        # - Vertex 1 is reachable from Vertex 2\n        # - Vertex 2 is reachable from Vertex 3\n        # - There are no edges between Vertex 1 and Vertex 2\n        # - There are no edges between Vertex 1 and Vertex 3\n        # We can test for all edges between Vertex 1 and Vertex 2.\n        # The second condition would be true when\n        # - Vertex 1 is reachable from Vertex 2\n        # - Vertex 2 is reachable from Vertex 3\n        # So we can test for all edges between Vertex 1 and Vertex 3.\n        # The third condition would be true when\n        # - Vertex 1 is reachable from Vertex 3\n        # - Vertex 3 is reachable from Vertex 2\n        # Thus we can test for all edges between Vertex 1 and Vertex 3.\n        # We will test for all edges when we construct a graph from the input.\n        # Every edge is tested.\n        # Hence, it would be O(N * N * M)\n        graph = create_graph(n, m)\n\n        visited = []\n        queue = [(1, 1)]\n\n        max_score = 0\n\n        while queue:\n            score, num_coins = queue.pop()\n\n            if score > max_score:\n                max_score = score\n\n            if score == n:\n                max_score = max(max_score, num_coins)\n                continue\n\n            visited.append(score)\n            for next_score, next_num_coins in graph[score]:\n                if next_score not in visited:\n                    queue.append((next_score, num_coins + next_num_coins))\n\n        return max_score\n\n    def create_graph(n: int, m: int) -> dict:\n        \"\"\"\n        :param n: Number of vertices\n        :param m: Number of edges\n        :return: Create a graph\n        \"\"\"\n        graph = {}\n\n        for i in range(2, n + 1):\n            graph[i] = []\n\n        for i in range(2, n + 1):\n            for j in range(i + 1, n + 1):\n                graph[i].append((j, 1))\n\n        for i in range(1, n):\n            graph[i + 1].append((i, 10))\n            graph[i + 1].append((i + 1, 20))\n\n        for i in range(2, n + 1):\n            for j in range(i + 1, n + 1):\n                graph[i].append((j, 30))\n\n        return graph\n\n    max_score = find_max(n, m)\n\n    return str(max_score)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split())\n    coins = [[0] * (N + 1) for _ in range(N + 1)]\n    edges = []\n    for i in range(M):\n        a, b, c = map(int, stdin.split())\n        coins[a][b] = c\n        coins[b][a] = c\n        edges.append((a, b, c))\n    edges.sort(key=lambda x: x[2])\n    visited = [False] * (N + 1)\n    ans = -1\n    while True:\n        visited[1] = True\n        for i in range(1, N + 1):\n            if not visited[i]:\n                if i == N:\n                    ans = max(ans, P * coins[1][i])\n                else:\n                    for j in range(1, N + 1):\n                        if not visited[j]:\n                            if coins[i][j]!= 0:\n                                visited[j] = True\n                                ans = max(ans, (coins[i][j] + solution(\n                                    f\"{i} {j} {P + coins[i][j]}\") if coins[i][j] < P else ans))\n                                visited[j] = False\n        if ans!= -1:\n            break\n    return str(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(max(int(stdin.split()[3]) * int(stdin.split()[4]), int(stdin.split()[3])) - int(stdin.split()[2]))\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    adj_mat = [[0] * (n+1) for _ in range(n+1)]\n    coins = 0\n    for i in range(m):\n        u, v, c = map(int, stdin.split())\n        adj_mat[u][v] = c\n        adj_mat[v][u] = c\n    visited = set()\n    visited.add(1)\n    stack = [1]\n    while stack:\n        s = stack.pop()\n        for j in range(n):\n            if adj_mat[s][j]!= 0 and j not in visited:\n                stack.append(j)\n                visited.add(j)\n    if len(visited) < n:\n        return -1\n    # print(visited)\n    while len(visited) < n:\n        visited.add(n)\n    # print(visited)\n    # print(len(visited))\n    # print(n)\n    coins = 0\n    visited = set()\n    for j in range(n):\n        if j in visited:\n            continue\n        # print(j)\n        # print(n)\n        if j == n:\n            return str(coins)\n        if j == 0:\n            coins += p\n            visited.add(j)\n            continue\n        visited.add(j)\n        # print(visited)\n        # print(j)\n        # print(visited)\n        coin = 0\n        while j in visited:\n            j = adj_mat[j][0]\n            coin += adj_mat[j][j]\n            # print(j)\n            # print(coin)\n        if coin <= coins:\n            coins = coin\n        else:\n            return str(-1)\n    return str(coins)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Calculate the scores after each move\n    scores = []\n    # How many moves we need to get to Vertex N\n    # +1 because the game starts at Vertex 1\n    moves = int(stdin.split(' ')[1]) + 1\n    # Calculate the total score\n    total_score = int(stdin.split(' ')[2])\n\n    # DFS algorithm\n    def dfs(current_vertex: int, moves: int, total_score: int, scores: list):\n        # Reached the maximum\n        if moves == 0 or total_score < 0:\n            return scores[0]\n\n        # If we reached Vertex N, then we're done.\n        if current_vertex == moves:\n            return total_score\n\n        # Calculate the score of going from Vertex A_i to Vertex B_i\n        # Score of going from Vertex A_i to Vertex B_i = (P + total score of previous vertex) * (coin of edge A_i - coin of edge B_i)\n        new_score = (int(stdin.split(' ')[3].split('\\n')[0]) + total_score) * int(stdin.split(' ')[4].split('\\n')[0])\n        \n        # If we've already reached Vertex N, then we're done.\n        if current_vertex == moves - 1:\n            return new_score\n\n        # Calculate the current score and add it to the list\n        scores.append(new_score)\n\n        # DFS on the edge\n        # edge: A_i - coin of edge A_i\n        # edge: B_i - coin of edge B_i\n        # score: (P + total score of previous vertex) * (coin of edge A_i - coin of edge B_i)\n        score = dfs(current_vertex + 1, moves - 1, total_score, scores)\n\n        # score: (P + total score of previous vertex) * (coin of edge A_i - coin of edge B_i) - (P + total score of previous vertex) * (coin of edge A_i - coin of edge B_i)\n        return (total_score * (int(stdin.split(' ')[3].split('\\n')[0]) + int(stdin.split(' ')[4].split('\\n')[0])) - (total_score * (int(stdin.split(' ')[3].split('\\n')[0]) + int(stdin.split(' ')[4].split('\\n')[0]))))\n\n    # Call DFS\n    return str(dfs(0, moves, total_score, scores))\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    print(strings)\n    return strings\nsolution(input())\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin)\n    if total == 0:\n        return \"0\"\n\n    result = {}\n    for _ in range(total):\n        n, c = stdin.split()\n        n = int(n)\n        result[n] = int(c)\n    \n    result = sorted(result.items())\n\n    total_sum = 0\n    for k, v in result:\n        if v % 2!= 0:\n            continue\n        \n        num_sum = k * (v // 2)\n        total_sum += num_sum\n\n    return str(total_sum)\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_strings = int(stdin)\n    # start by adding strings with cost 0\n    string_cost = 0\n    # will contain cost of each string\n    string_cost_list = list()\n    for i in range(num_of_strings):\n        string_cost_list.append(int(stdin.split(' ')[i + 1]))\n\n    # add strings with cost 1\n    for i in range(1, num_of_strings):\n        string_cost = string_cost + string_cost_list[i - 1]\n        string_cost_list.append(string_cost)\n\n    # while we haven't found a palindrome, keep adding strings\n    while not(isPalindrome(string_cost_list)):\n        # get the minimum cost for each string\n        minimum_cost_list = list()\n        for i in range(num_of_strings):\n            # we are only considering strings that have cost 1\n            if string_cost_list[i] == 1:\n                minimum_cost_list.append(string_cost_list[i])\n\n        # find the minimum cost for each string\n        minimum_cost = min(minimum_cost_list)\n        # get the index of the minimum cost\n        index = minimum_cost_list.index(minimum_cost)\n        # print(index)\n        string_cost_list[index] = 0\n\n        # add the cost for the first string\n        string_cost = string_cost + string_cost_list[index]\n        string_cost_list[index] = 1\n        # remove the string from the cost\n        string_cost_list.pop(index)\n        # print(string_cost_list)\n        string_cost_list.sort(reverse=True)\n        # print(string_cost_list)\n    print(string_cost)\n\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    costs = []\n    for i in range(n):\n        s = stdin.split()\n        strings.append(s[0])\n        costs.append(int(s[1]))\n    strings.sort()\n    costs.sort(reverse=True)\n\n    def isPalindrome(string):\n        length = len(string)\n        for i in range(length // 2):\n            if string[i]!= string[length - 1 - i]:\n                return False\n        return True\n\n    palindrome = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if isPalindrome(strings[i] + strings[j]):\n                temp = costs[i] + costs[j]\n                if palindrome > temp:\n                    palindrome = temp\n\n    return str(palindrome) if palindrome!= float('inf') else '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    costs = []\n    for _ in range(n):\n        s, c = stdin.split()\n        s, c = int(s), int(c)\n        strings.append(s)\n        costs.append(c)\n    strings = sorted(strings)\n    costs = sorted(costs)\n    for i in range(n):\n        if not isPalindrome(strings[i]):\n            continue\n        totalCost = costs[i] * len(strings[i])\n        for j in range(i + 1, n):\n            if strings[j] in strings[:i]:\n                continue\n            if not isPalindrome(strings[j]):\n                continue\n            totalCost += costs[j] * len(strings[j])\n            print(totalCost)\n            return''.join([str(x) for x in totalCost])\n    print(-1)\n    return -1\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    strings = []\n    costs = []\n\n    for i in range(1, N+1):\n        strings.append(stdin.split()[i])\n        costs.append(int(stdin.split()[i+1]))\n\n    count = 0\n    while len(strings) > 1:\n        if len(strings) > 2:\n            if strings[0] == strings[-1]:\n                count += costs[0]*2\n                strings.pop(0)\n                strings.pop(len(strings)-1)\n                costs.pop(0)\n                costs.pop(len(costs)-1)\n                strings.append(strings[0])\n                costs.append(costs[0])\n            else:\n                strings.pop(0)\n                costs.pop(0)\n        else:\n            if strings[0] == strings[1]:\n                count += costs[0]\n                strings.pop(0)\n                costs.pop(0)\n            else:\n                count += costs[0]*2\n                strings.pop(0)\n                costs.pop(0)\n    return str(count)\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    a = []\n    b = []\n    c = []\n    for i in range(n):\n        string = stdin.split()\n        string = string[1:]\n        a.append(string[0])\n    for i in range(n):\n        string = stdin.split()\n        string = string[1:]\n        b.append(string[0])\n    for i in range(m):\n        string = stdin.split()\n        string = string[1:]\n        c.append(string[0])\n    total_cost = 0\n    a_cost = 0\n    b_cost = 0\n    c_cost = 0\n    a_counter = 0\n    b_counter = 0\n    c_counter = 0\n    a_size = len(a)\n    b_size = len(b)\n    c_size = len(c)\n    for i in range(a_size):\n        for j in range(b_size):\n            if a[i] == b[j]:\n                a_cost += int(a[i])\n                b_cost += int(b[j])\n                break\n    for i in range(a_size):\n        for j in range(c_size):\n            if a[i] == c[j]:\n                a_cost += int(a[i])\n                c_cost += int(c[j])\n                break\n    for i in range(b_size):\n        for j in range(c_size):\n            if b[i] == c[j]:\n                b_cost += int(b[i])\n                c_cost += int(c[j])\n                break\n    for i in range(a_size):\n        for j in range(b_size):\n            if a[i] == b[j]:\n                a_cost += int(a[i])\n                b_cost += int(b[j])\n                break\n    for i in range(b_size):\n        for j in range(c_size):\n            if b[i] == c[j]:\n                b_cost += int(b[i])\n                c_cost += int(c[j])\n                break\n    for i in range(c_size):\n        for j in range(b_size):\n            if c[i] == b[j]:\n                c_cost += int(c[i])\n                b_cost += int(b[j])\n                break\n    for i in range(c_size):\n        for j in range(b_size):\n            if c[i] == b[j]:\n                c_cost += int(c[i])\n                b_cost += int(b[j])\n                break\n    total_cost = a_cost + b_cost + c_cost\n    if total_cost == 0:\n        return -1\n    else:\n        return total_cost\n\nprint(solution(input()))"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    result = 0\n    for i in range(1, n - 1):\n        if arr[i] == arr[i + 1]:\n            result += arr[i]\n    if result == 0:\n        return '-1'\n    return str(result)\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    string = []\n    cost = []\n    for i in range(N):\n        string.append(stdin[i * 2 + 1])\n        cost.append(int(stdin[i * 2]))\n    sum = 0\n    while len(string) > 0:\n        min_num = min(cost)\n        num = cost.index(min_num)\n        string.pop(num)\n        cost.pop(num)\n        sum += min_num\n    if sum < 7:\n        print(sum)\n    else:\n        print(-1)\n    return \"\"\n\n\nsolution(input())\n\"\"\"\ndef"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    costs = stdin[1:]\n    # Search in a \"binary\" search tree, the cost of each cost to the node, i.e.  min(costs)\n    # each node costs some cost and as we want to make a palindrome, we can combine both nodes\n    # we can think about it as choosing the node with the minimum cost to the node that is not a palindrome.\n    # In our search tree, we only have a left and a right node.  The left node must be the parent node if we are looking for the first node in the tree.\n    # If we are looking for the second node in the tree, we must find the parent node, the minimum cost.\n    minCost = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            minCost = min(minCost, costs[j] + costs[i])\n    if minCost == float('inf'):\n        print(-1)\n    else:\n        print(minCost)\nsolution(stdin)"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = stdin.split()\n    n = int(n)\n    k = int(k)\n    print(max(n - k + 1, 0))\n    return max(n - k + 1, 0)\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(list(map(int, input().split())))\n    return str(max(a[i] ^ a[j] for i in range(n) for j in range(i+1, n)))\n\nfor i in range(int(input())):\n    solution(input())\n    \n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    while n > 0:\n        res ^= k\n        n -= 1\n        k += 1\n    return str(res)"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    max_sum = max(n, k)\n    while max_sum > 0:\n        xor = max_sum % 2\n        if xor == 1:\n            max_sum = max_sum // 2\n        else:\n            max_sum = max_sum // 2\n    return str(max_sum)"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                if i == j or j == l:\n                    continue\n                result += abs(i ^ j ^ l)\n    if result > k:\n        return str(result)\n    else:\n        return str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(k*i + j for i in range(1, n+1) for j in range(1, n+1)))"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    return n*(n-1)//2 + k*(k-1)//2\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max([a * (n - a) for a in range(1, n + 1)]))"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\n'''\nxor_sum = 0\nlst = [int(i) for i in stdin.split()]\nfor i in range(lst[0]):\n    xor_sum ^= lst[i+1]\nprint(xor_sum)\n\n\n'''"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(input())\n    points = [(int(x), int(y)) for x, y in zip(stdin.split(), stdin.split())][:n]\n    \n    result = 2 * max(min(x, y) for x, y in itertools.combinations(points, 2))\n    print(result)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_x = 0\n    min_y = 0\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        min_x = max(min_x, x)\n        min_y = max(min_y, y)\n    print(min(min_x, min_y))\n\nsolution(input())\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sorted(map(int, stdin.split()))[:2]))"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission was rated at 7.5/10.\n\n'''\n\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        x.append(a)\n        y.append(b)\n    x_min, x_max, y_min, y_max = float('inf'), float('-inf'), float('inf'), float('-inf')\n    for x_i in range(n):\n        for y_i in range(n):\n            if x_i!= y_i and x_i < x_max:\n                x_max = max(x_max, x_i + 1)\n            if y_i!= x_i and y_i < y_max:\n                y_max = max(y_max, y_i + 1)\n    return str(min(x_max - x_min, y_max - y_min))\n\"\"\"\nn = int(input())\nx = []\ny = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\nx_min, x_max, y_min, y_max = float('inf'), float('-inf'), float('inf'), float('-inf')\nfor x_i in range(n):\n    for y_i in range(n):\n        if x_i!= y_i and x_i < x_max:\n            x_max = max(x_max, x_i + 1)\n        if y_i!= x_i and y_i < y_max:\n            y_max = max(y_max, y_i + 1)\nprint(min(x_max - x_min, y_max - y_min))\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3')\n    '3'\n    >>> solution('4')\n    '4'\n    '''\n    n = int(stdin)\n    x, y = sorted([(int(i), int(j)) for i, j in zip(stdin.split(), stdin.split())], key=lambda x: x[0])\n    min_side = 1\n    for i in range(len(x) - 1):\n        min_side = min(min_side, x[i + 1] - x[i])\n    return str(min_side)\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sides = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        sides.append((x, y))\n    sides.sort(key=lambda x: x[0])\n    sides.sort(key=lambda x: x[1])\n    smallest = sides[0][1] - sides[0][0]\n    for i in range(1, len(sides)):\n        if sides[i][1] - sides[i][0] < smallest:\n            smallest = sides[i][1] - sides[i][0]\n    return str(smallest)\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for _ in range(n):\n        x.append(int(stdin.split(\"\\n\")[1+_]))\n        y.append(int(stdin.split(\"\\n\")[2+_]))\n    max_x = max(x)\n    min_x = min(x)\n    max_y = max(y)\n    min_y = min(y)\n    # x_min = min(x)\n    # y_min = min(y)\n    x_min = max(x) - (max_x - min_x)\n    y_min = max(y) - (max_y - min_y)\n    return str(min(x_min, y_min))\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_letters_count(string: str) -> int:\n        cnt = 0\n        for i in string:\n            if i == \"n\" or i == \"i\":\n                cnt += 1\n        return cnt\n    \n    \n    string = stdin\n    n_count = get_letters_count(string)\n    while n_count >= 100:\n        string = string.replace(\"nineteen\", \"\")\n        n_count = get_letters_count(string)\n    \n    return len(string)\n    \n\nprint(solution(\"nniinneetteeeenn\")) # 2\nprint(solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\")) # 2\nprint(solution(\"nineteenineteen\")) # 2\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_ones = 0\n    num_twos = 0\n    num_threes = 0\n    s = stdin\n    for i, elem in enumerate(s):\n        if elem == \"o\":\n            num_ones += 1\n        if elem == \"i\":\n            num_ones += 1\n        if elem == \"n\":\n            num_ones += 1\n            if num_twos == 0 and num_threes == 0:\n                num_twos += 1\n            else:\n                num_ones -= 1\n        if elem == \"t\":\n            num_ones += 1\n            num_threes += 1\n            if num_twos == 0 and num_threes == 0:\n                num_twos += 1\n            else:\n                num_ones -= 1\n    return max([num_ones, num_twos, num_threes])\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len([w for w in stdin.lower().split() if w == 'nineteen'])\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My first solution\n    \n    \"\"\"\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == 'w':\n            count += 1\n        if s[i] == 'n':\n            count += 1\n            if i == (len(s) - 2):\n                return count\n        else:\n            count = 0\n    return count\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    string = stdin.strip()\n    string_list = list(string)\n    my_list = []\n    for i in string_list:\n        if i.isdigit():\n            my_list.append(i)\n    my_list = sorted(my_list, key=int, reverse=True)\n    count = 0\n    for i in my_list:\n        if i == '2':\n            count += 1\n        elif i == '3':\n            count += 2\n        elif i == '4':\n            count += 3\n        elif i == '5':\n            count += 4\n        elif i == '6':\n            count += 5\n        elif i == '7':\n            count += 6\n        elif i == '8':\n            count += 7\n        elif i == '9':\n            count += 8\n        elif i == '10':\n            count += 9\n        elif i == '11':\n            count += 10\n        elif i == '12':\n            count += 11\n        elif i == '13':\n            count += 12\n        elif i == '14':\n            count += 13\n        elif i == '15':\n            count += 14\n        elif i == '16':\n            count += 15\n        elif i == '17':\n            count += 16\n        elif i == '18':\n            count += 17\n        elif i == '19':\n            count += 18\n        else:\n            pass\n    return count\n\n\nprint(solution('nniinneett'))\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    output = []\n    count = 0\n    word_dict = {}\n    list_of_words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            if count == 0:\n                continue\n            else:\n                count -= 1\n                continue\n        if s[i] == \"1\":\n            count += 1\n            continue\n        if s[i] == \"0\":\n            count += 1\n            continue\n        if s[i] in word_dict.keys():\n            word_dict[s[i]] += 1\n        else:\n            word_dict[s[i]] = 1\n\n    for i in word_dict.keys():\n        if word_dict[i] == 20:\n            output.append(i)\n    if len(output) == 0:\n        return len(s)\n    else:\n        return len(output)\nsolution(input())\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    my_string = stdin\n    occurrences = {}\n    for word in my_string.split(\" \"):\n        if word.find('nineteen') > -1:\n            if word not in occurrences:\n                occurrences[word] = 1\n            else:\n                occurrences[word] += 1\n    occurrences_list = list(occurrences.items())\n    occurrences_list.sort(key=lambda x: x[1], reverse=True)\n    return occurrences_list[0][0]"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    words = s.split(' ')\n    ans = 1\n    \n    for word in words:\n        if len(word) == 1:\n            ans *= 2\n        elif len(word) == 2:\n            ans *= 3\n        else:\n            ans *= 4\n    \n    return str(ans)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    counter = 0\n    words = stdin.split()\n    for word in words:\n        if len(word) == 3:\n            if word[0] == 'n' and word[2] == 'e' and word[1] == 'i' and word[1]!= 'e' and word[1]!= 'i' and word[2]!= 'n' and word[2]!= 'e' and word[2]!= 'i':\n                counter += 1\n        elif len(word) == 2:\n            if word[0] == 'n' and word[1] == 'i' and word[0]!= 'n' and word[0]!= 'e' and word[1]!= 'n' and word[1]!= 'e' and word[1]!= 'i':\n                counter += 1\n    return counter\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    while len(s) > 0:\n        ans += s.count(\"nineteen\")\n        s = s[1:]\n    return str(ans)\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    if p > y or p < 1 or y < 1:\n        return '-1'\n    branch = set(range(2, y + 1))\n    print(branch)\n    while branch:\n        branch = set(i * 2 for i in branch)\n        branch -= set(range(2, y + 1))\n    return str(branch.pop()) if branch else '-1'"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, y = stdin.split()\n    return str(int(y) - int(y) ** 0.5) if int(y) < int(y) ** 0.5 else -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '3 6'\n    '''\n    p, y = list(map(int, stdin.split()))\n    if p == 1 or y == 1:\n        return '-1'\n\n    chosen = [0]\n    for _ in range(2, p + 1):\n        for branch in range(1, y // _ + 1):\n            if (y // _) % branch == 0 and ((y // _) % branch) * branch <= y:\n                break\n        else:\n            break\n    else:\n        chosen.append(_)\n\n    if len(chosen) == 0:\n        return '-1'\n\n    return''.join(map(str, chosen))"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    INPUT\n    The first line contains p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n    OUTPUT\n    The number of the highest branch that cannot be reached by any of the grasshoppers. If there are none, print -1 instead.\n\n    EXAMPLES\n    Input\n    3 6\n    Output\n    5\n    '''\n    p,y = map(int, stdin.split())\n    if 2 <= p <= y and 2 <= p*p <= y:\n        return str(p*p)\n    else:\n        return -1\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    return \"Case #{}: {}\".format(i+1, \"Case #{}: {}\".format(i+1, max(1, p * (pow(y, 1/p))))) if p * (pow(y, 1/p)) > 0 else \"Case #{}: {}\".format(i+1, -1)\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    dp = {(0, -1)}\n    dp[(0, -1)] = 1\n    dp[(1, 0)] = 2\n    for i in range(2, y + 1):\n        dp[(i, 0)] = dp[(i - 1, 0)]\n        dp[(i, 0)] += 2*dp[(i - 2, 0)]\n    for i in range(y + 1):\n        dp[(0, i)] = dp[(0, i - 1)]\n        dp[(0, i)] += dp[(0, i - 2)]\n    for i in range(1, y + 1):\n        dp[(i, y)] = dp[(i, y - 1)]\n        dp[(i, y)] += dp[(i, y - 2)]\n    for (i, j) in dp:\n        if j == -1:\n            dp[(i, j)] = -1\n        else:\n            dp[(i, j)] = i\n    return dp[(p, y)]\n\n\nsolution(\"2 2\")\nsolution(\"3 4\")\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    3\n    6\n    >>> solution('''\n    3\n    4\n    >>> solution('''\n    ''')\n    -1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    3 6\n    ''')\n    '5'\n    >>> solution('''\n    3 4\n    ''')\n    '-1'\n    \"\"\"\n    p, y = (int(x) for x in stdin.split())\n\n    def is_possible(x):\n        for i in range(2, x):\n            if (x // i) * i!= y:\n                return False\n        return True\n\n    if p == 1:\n        return -1\n    if p == 2:\n        if not is_possible(y):\n            return -1\n        return y\n    if p == 3:\n        if is_possible(y):\n            return -1\n        return y\n    if p == 4:\n        if is_possible(y):\n            return -1\n        return y\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 1 or x == 2 or x == y:\n        return -1\n    else:\n        return int((y/x) * x)\n\nprint(solution(input()))\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    return str(search_branch(p, y))\n\n\ndef"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    #distance = 0\n    houses.sort()\n    for house in houses:\n        if house:\n            #distance += house\n            break\n    #print(distance)\n    return distance\n\nprint(solution(input()))\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = {}\n    dp[1] = 0\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + abs(a[i - 1] - a[i - 2])\n\n    for i in range(n, m - 1, -1):\n        # print(i, dp, a)\n        if dp[i] + a[i] > k:\n            dp[i] = dp[i - 1] + abs(a[i - 1] - a[i - 2])\n            # print(i, dp)\n        else:\n            dp[i] = dp[i - 1] + abs(a[i - 1] - a[i - 2]) + abs(a[i] - a[i - 1])\n    return str(dp[m] - dp[n - 1])\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n\n    start = houses[0]\n    end = houses[-1]\n\n    def solve(lo, hi):\n        ans = float('inf')\n        if lo > end or hi < start:\n            return ans\n\n        start_dist = abs(start - lo)\n        end_dist = abs(end - hi)\n\n        if start_dist <= end_dist:\n            ans = min(ans, start_dist + solve(lo + 10, hi))\n        if start_dist > end_dist:\n            ans = min(ans, end_dist + solve(lo, hi - 10))\n\n        return ans\n\n    return str(solve(0, 100000000))\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    houses = [(i, a[i]) for i in range(n)]\n    houses.sort()\n\n    def dist(house1, house2):\n        x1, y1 = house1\n        x2, y2 = house2\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    ans = float('inf')\n    for i in range(len(houses)):\n        j = houses[i][1]\n        k = k - j\n        if k < 0:\n            break\n        house1, house2 = houses[i], houses[i + 1]\n        ans = min(ans, dist(house1, house2))\n    return ans\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def next_house():\n        min_dist = math.inf\n        for house in range(n):\n            if house in houses_to_buy and house not in visited_houses:\n                distance_from_start = abs(house - m) + abs(houses_to_buy[house] - a_start)\n                min_dist = min(min_dist, distance_from_start)\n        return min_dist\n\n    n, m, k = map(int, stdin.split())\n    houses_to_buy = {i: 0 for i in range(1, n + 1)}\n    houses_to_buy[m] = k\n    houses_to_buy_keys = list(houses_to_buy.keys())\n    visited_houses = set()\n    distance = next_house()\n    while distance!= math.inf:\n        visited_houses.add(m)\n        distance = next_house()\n    return distance\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    count = 0\n    for i in range(n):\n        if houses[i] == 0:\n            count += k\n        elif houses[i] == houses[m]:\n            count += (houses[i] - 1) * k\n            break\n        count += houses[i]\n    print(count)\n    return count\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N, M, K = list(map(int, stdin.split()))\n  h = list(map(int, stdin.split()))\n  h = sorted(h, reverse=True)\n\n  dp = [float('inf') for _ in range(M + 1)]\n  dp[0] = 0\n  for i in range(N):\n    for j in range(M, h[i] - 1, -1):\n      dp[j] = min(dp[j], dp[j - h[i]] + h[i])\n\n  return str(dp[M])\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = sorted(list(map(int, stdin.split())))\n    house_count = n - 1\n    house_index = houses.index(houses[n - 1])\n    distance_from_house = houses[house_index] - m\n    total_distance = 0\n\n    while house_count >= 0:\n        distance_from_house = houses[house_index] - houses[house_count]\n        if distance_from_house < k:\n            distance_from_house = houses[house_count] - houses[house_index]\n        total_distance += distance_from_house\n        house_count -= 1\n        house_index -= 1\n    return str(total_distance)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses = sorted(houses)\n    houses.append(0)\n    houses.append(0)\n\n    left = 0\n    right = houses[-1] - houses[0]\n    ans = 0\n    while left <= right:\n        mid = left + (right - left) // 2\n        i = 0\n        occ = 0\n        profit = 0\n        while i < len(houses) and houses[i] <= mid:\n            occ += 1\n            profit += houses[i]\n            i += 1\n        if occ == 0:\n            ans = min(ans, profit)\n        elif occ > k:\n            right = mid - 1\n        else:\n            ans = min(ans, profit + houses[i])\n            left = mid + 1\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses = houses[:n]\n    houses.sort()\n    print(houses)\n    p = 0\n    d = 0\n    for i in range(n):\n        if houses[i] == 0:\n            d += k\n        else:\n            p += houses[i]\n            if p >= k:\n                d += houses[i]\n                p -= houses[i]\n            else:\n                d += p\n                p = 0\n    return d\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix_a = [list(map(int, stdin.split())) for _ in range(n)]\n    matrix_b = [list(map(int, stdin.split())) for _ in range(n)]\n    result = \"\"\n    if (n == m) and (matrix_a == matrix_b):\n        result = \"YES\"\n    else:\n        result = \"NO\"\n    return result"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(j) for j in stdin.split()[i * m: (i + 1) * m]] for i in range(n)]\n    b = [[int(j) for j in stdin.split()[i * m: (i + 1) * m]] for i in range(n)]\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if a[i][j] == b[i][j]:\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = map(int, stdin[0].split())\n    A = [[int(x) for x in stdin[i].split()] for i in range(1, n + 1)]\n    B = [[int(x) for x in stdin[i].split()] for i in range(n + 1, n + m + 1)]\n\n    def has_zero(A):\n        for i in range(len(A)):\n            for j in range(len(A[i])):\n                if A[i][j] == 0:\n                    return True\n        return False\n\n    def is_square(A):\n        n = len(A)\n        m = len(A[0])\n        return n == m\n\n    def has_no_zero(A):\n        for i in range(len(A)):\n            for j in range(len(A[i])):\n                if A[i][j] == 0:\n                    return False\n        return True\n\n    def solve(A, B):\n        n = len(A)\n        m = len(A[0])\n        for i in range(n):\n            for j in range(m):\n                A[i][j] = A[i][j] + 1\n        for i in range(n):\n            for j in range(m):\n                B[i][j] = B[i][j] + 1\n        for k in range(n):\n            for l in range(m):\n                if A[k][l] + 1!= B[k][l]:\n                    return False\n        return True\n\n    if has_no_zero(A) and is_square(A) and has_zero(B):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    A = [[int(x) for x in stdin.split()] for _ in range(n)]\n    B = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return \"YES\" if solve_knapsack(A, B) else \"NO\"\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = []\n    for _ in range(n):\n        row = stdin.strip().split()\n        a.append(list(map(int, row)))\n    b = []\n    for _ in range(n):\n        row = stdin.strip().split()\n        b.append(list(map(int, row)))\n\n    a = list(map(list, zip(*a)))\n    b = list(map(list, zip(*b)))\n\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n, m)!= (3, 3):\n        return \"NO\"\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list()\n    b = list()\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    for _ in range(n):\n        b.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % 2 == 0 and b[i][j] % 2 == 0:\n                if not a[i][j] in b[i]:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    B = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            B[i][j] = A[j][i]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 0 or B[i][j] == 0:\n                continue\n            if A[i][j]!= B[i][j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    b = [[int(i) for i in stdin.split()] for _ in range(n)]\n    if n!= len(a) or m!= len(a[0]):\n        return 'NO'\n    ans = 'YES'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                ans = 'NO'\n    return ans\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return -1 if '\\n' in stdin else 0"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # solution1: use dynamic programming\n    # dp = [[0] * len(stdin) for _ in range(len(stdin))]\n    # for i in range(len(stdin)-1, -1, -1):\n    #     for j in range(i, len(stdin)):\n    #         if stdin[i] == stdin[j]:\n    #             dp[i][j] = dp[i+1][j-1] + 1\n    #         else:\n    #             dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # return dp[0][-1]\n\n    # solution2: use sliding window\n    ans = -1\n    window_a, window_b = 0, 0\n    for j in range(len(stdin)):\n        if stdin[j] == stdin[window_a]:\n            window_a += 1\n        else:\n            window_a = max(window_a, window_b) + 1\n            window_b = window_a\n        if j == len(stdin) - 1:\n            if window_b > ans:\n                ans = window_b\n    return ans if ans!= -1 else -1\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == b:\n        return \"-1\"\n    longest = max(a, b)\n    shortest = min(a, b)\n    for i in range(1, len(shortest)):\n        if longest[i]!= shortest[i]:\n            return longest[:i]\n    return longest\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    string_a = stdin[0]\n    string_b = stdin[1]\n    \n    if string_a == string_b:\n        return -1\n    \n    \n    list_a = list(string_a)\n    list_b = list(string_b)\n    \n    dict_a = {}\n    dict_b = {}\n    \n    for i in list_a:\n        dict_a[i] = list_a.count(i)\n    \n    for i in list_b:\n        dict_b[i] = list_b.count(i)\n    \n    \n    def common_subsequence(list_a, list_b, dict_a, dict_b):\n        \n        for i in range(1, len(list_a)):\n            for j in range(1, len(list_b)):\n                if list_a[i] == list_b[j]:\n                    if dict_a[list_a[i]] > dict_b[list_b[j]]:\n                        dict_a[list_a[i]] -= 1\n                    if dict_b[list_b[j]] > dict_a[list_a[i]]:\n                        dict_b[list_b[j]] -= 1\n                    if dict_a[list_a[i]] == 0 and dict_b[list_b[j]] == 0:\n                        dict_a[list_a[i]] = dict_a[list_a[i]] + 1\n                        dict_b[list_b[j]] = dict_b[list_b[j]] + 1\n                        return list_a[:i+1], list_b[:j+1]\n                        \n    \n    result = common_subsequence(list_a, list_b, dict_a, dict_b)\n    if result == -1:\n        return -1\n    \n    if result == None:\n        return -1\n    \n    return len(result[0]) + len(result[1])\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split()\n\n    if len(stdin)!= 2:\n        return -1\n\n    a = stdin[0]\n    b = stdin[1]\n\n    max_len = 0\n    i = 0\n    j = 0\n    len_a = len(a)\n    len_b = len(b)\n\n    while i < len_a and j < len_b:\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n        elif j == 0:\n            i += 1\n        elif i == 0:\n            j += 1\n        else:\n            if max_len < j - i:\n                max_len = j - i\n            i = 0\n            j = 0\n\n    if max_len < j - i:\n        max_len = j - i\n\n    if max_len == 0:\n        return -1\n\n    return str(max_len)\n\n\nsolution(input())\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return longest common subsequence of 2 given strings.\n\n    >>> solution('')\n    -1\n    >>> solution('a')\n    -1\n    >>> solution('aab')\n    2\n    >>> solution('abcdef')\n    2\n    >>> solution('aabcde')\n    3\n    >>> solution('abc')\n    1\n    >>> solution('abbbb')\n    2\n    >>> solution('abbbc')\n    2\n    >>> solution('abb')\n    1\n    >>> solution('abcd')\n    1\n    >>> solution('abab')\n    0\n    >>> solution('ababaa')\n    4\n    >>> solution('aabb')\n    2\n    >>> solution('aabaa')\n    3\n    \"\"\"\n    # Hashing - O(a^2) - where a is length of given string\n    # O(b)\n    d = {}\n    for i in range(len(stdin)):\n        if stdin[i] not in d:\n            d[stdin[i]] = 1\n        else:\n            d[stdin[i]] += 1\n\n    max_i = 0\n    min_i = 0\n    for i in range(len(stdin)):\n        # print(f'{i}: {d}')\n        if d[stdin[i]] == 1:\n            min_i = i\n        else:\n            # print(i - min_i)\n            max_i = i\n            break\n\n    return max_i - min_i + 1 if max_i - min_i!= 0 else -1\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print(-1 if len(set(a).intersection(set(b))) == 0 else len(max(set(a), set(b)).difference(set(a))))"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\na, b = stdin.strip().split()\na = list(a)\nb = list(b)\n\nn = len(a)\nm = len(b)\n\ndp = [[0] * (m+1) for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if a[i-1] == b[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(dp[n][m])\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a_dict = {}\n    b_dict = {}\n    for i in range(len(a)):\n        if a[i] not in a_dict:\n            a_dict[a[i]] = 1\n        else:\n            a_dict[a[i]] += 1\n    for i in range(len(b)):\n        if b[i] not in b_dict:\n            b_dict[b[i]] = 1\n        else:\n            b_dict[b[i]] += 1\n    union_set = set()\n    a_diff = set()\n    b_diff = set()\n    if len(a_dict) <= len(b_dict):\n        for key, value in a_dict.items():\n            if key not in b_dict:\n                union_set.add(key)\n    else:\n        for key, value in b_dict.items():\n            if key not in a_dict:\n                union_set.add(key)\n    for element in union_set:\n        if element in a_dict:\n            if element in b_dict:\n                a_diff.add(element)\n    if len(a_diff) == 0:\n        if len(union_set) == 0:\n            return -1\n        else:\n            return len(max(union_set, key=len))\n    else:\n        if len(a_diff) == 1:\n            return len(a) - a_diff.pop()\n        else:\n            return len(max(a_diff, key=len))\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    # Write your code here\n    return str(len(longestCommonSubsequence(a, b)))\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if (a == b):\n        if (c == d):\n            return \"0\"\n        else:\n            return -1\n    else:\n        # a=4, b=6\n        # c=8, d=10\n        l_a = (a % 2)\n        l_c = (c % 2)\n        if (l_a == l_c):\n            # if a is even and c is even, atleast one of them will be the same\n            # so they can never be at the same time.\n            return -1\n        else:\n            # if not a is even and c is odd, they must be atleast one\n            # of them will be atleast one time to be at the same time.\n            return 0\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b=list(map(int,stdin.split()))\n    c,d=list(map(int,stdin.split()))\n    if a+1==c and b==d:\n        return '-1'\n    elif a+1==c or b+1==d:\n        return str(a*d)\n\nprint(solution(input()))\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n\n    if a!= c:\n        x = (b - a - 1) // a\n        if x % 2 == 0:\n            return \"-\" + str(x + a)\n        else:\n            return str(x + a)\n\n    return str(a + b)\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    c, d = list(map(int, stdin.split()))\n    d += c\n    ans = 0\n    while a!= 0 and b!= 0:\n        if a % 2 == 0:\n            a += d\n        else:\n            a += d + 1\n        if b % 2 == 0:\n            b += d\n        else:\n            b += d + 1\n        ans += 1\n        d += c\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    if ((a+b) % 2) == 1:\n        return str(int((a+b)/2)+d)\n    else:\n        return str(int((a+b)/2)+c)\nsolution(input())\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s,c = map(int,stdin.split())\n    if c%2 == 0:\n        if s % 2 == 0:\n            print(0)\n        else:\n            print(s//2)\n    else:\n        print(s//2+1)\n\nsolution(input())\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, b = stdin.split()\n    b = int(b)\n    a = b + 1\n    c = b + 2\n    d = b + 3\n    \n    cnt = 1\n    while cnt <= b:\n        if d % 2 == 0:\n            if c % 2 == 0:\n                if (a, b) == (c, d):\n                    return str(cnt)\n                c += 3\n            else:\n                if (a, b) == (c, d):\n                    return str(cnt)\n                c += 2\n        else:\n            if c % 2 == 0:\n                if (a, b) == (c, d):\n                    return str(cnt)\n                c += 1\n            else:\n                if (a, b) == (c, d):\n                    return str(cnt)\n                c += 3\n        cnt += 1\n    '''\n    n, b = stdin.split()\n    b = int(b)\n    a = b + 1\n    c = b + 2\n    d = b + 3\n    \n    if d % 2 == 0:\n        if c % 2 == 0:\n            if (a, b) == (c, d):\n                return str(c - 1)\n            c += 3\n        else:\n            if (a, b) == (c, d):\n                return str(c - 1)\n            c += 2\n    else:\n        if c % 2 == 0:\n            if (a, b) == (c, d):\n                return str(c - 1)\n            c += 1\n        else:\n            if (a, b) == (c, d):\n                return str(c - 1)\n            c += 3\n    return str(c - 1)"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    c, d = list(map(int, stdin.split()))\n    list = [[a, b, c, d]]\n    new = []\n    for i in range(1, b):\n        new.append([i, c, 2 * i])\n        new.append([i, d, 2 * i])\n    new.append([a + c, c, a + c, d + c])\n    new.append([a + d, d, a + d, c + d])\n    for i in range(len(new)):\n        for j in range(len(new[i])):\n            if new[i][j] in list[0]:\n                list.append(new[i])\n    if len(list[0]) == 1:\n        return str(list[0][0])\n    else:\n        return str(list[0][0])\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if a % 2!= 0 and b % 2 == 0:\n        return d - c\n    elif a % 2 == 0 and b % 2!= 0:\n        return c - d\n    else:\n        return d - c\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    count = 0\n    while a!= b:\n        a, b = b, a\n        count += 1\n    while c!= d:\n        c, d = d, c\n        count += 1\n    if count == 1:\n        print(a, b)\n    else:\n        print(a + 2*b, 2*b + 2*a)\n\n\n\ndef"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # a, b, c = 1, 1, 2\n    # a, b, c = 2, 2, 4\n    # a, b, c = 3, 4, 6\n    # a, b, c = 4, 6, 8\n    # a, b, c = 5, 8, 10\n    # a, b, c = 6, 10, 12\n    # a, b, c = 7, 12, 14\n    # a, b, c = 8, 14, 16\n    # a, b, c = 9, 16, 18\n    # a, b, c = 10, 18, 20\n    # a, b, c = 11, 20, 22\n    # a, b, c = 12, 22, 24\n    # a, b, c = 13, 24, 26\n    # a, b, c = 14, 26, 28\n    # a, b, c = 15, 28, 30\n    # a, b, c = 16, 30, 32\n    # a, b, c = 17, 32, 34\n    # a, b, c = 18, 34, 36\n    # a, b, c = 19, 36, 38\n    # a, b, c = 20, 38, 40\n    # a, b, c = 21, 40, 42\n    # a, b, c = 22, 42, 44\n    # a, b, c = 23, 44, 46\n    # a, b, c = 24, 46, 48\n    # a, b, c = 25, 48, 50\n    # a, b, c = 26, 50, 52\n    # a, b, c = 27, 52, 54\n    # a, b, c = 28, 54, 56\n    # a, b, c = 29, 56, 58\n    # a, b, c = 30, 58, 60\n    # a, b, c = 31, 60, 62\n    # a, b, c = 32, 62, 64\n    # a, b, c = 33, 64, 66\n    # a, b, c = 34, 66, 68\n    # a, b, c = 35, 68, 70\n    # a, b, c = 36, 70, 72\n    # a, b, c = 37, 72, 74\n    # a, b, c = 38, 74, 76\n    # a, b, c = 39, 76, 78\n    # a, b, c = 40, 78, 80\n    # a, b, c = 41, 80, 82\n    # a, b, c = 42, 82, 84\n    # a, b, c = 43, 84, 86\n    # a, b, c = 44, 86, 88\n    # a, b, c = 45, 88, 90\n    # a, b, c = 46, 90, 92\n    # a, b, c = 47, 92, 94\n    # a, b, c = 48, 94, 96\n    # a, b, c = 49, 96, 98\n    # a, b, c = 50, 98, 100\n    # a, b, c = 51, 100, 102\n    # a, b, c = 52, 102, 104\n    # a, b, c = 53, 104, 106\n    # a, b, c = 54, 106, 108\n    # a, b, c = 55, 108, 110\n    # a, b, c = 56, 110, 112\n    # a, b, c = 57, 112, 114\n    # a, b, c = 58, 114, 116\n    # a, b, c = 59, 116, 118\n    # a, b, c = 60, 118, 120\n    # a, b, c = 61, 120, 122\n    # a, b, c = 62, 122, 124\n    # a, b, c = 63, 124, 126\n    # a, b, c = 64, 126, 128\n    # a, b, c = 65, 128, 130\n    # a, b, c = 66, 130, 132\n    # a, b, c = 67, 132, 134\n    # a, b, c = 68, 134, 136\n    # a, b, c = 69, 136, 138\n    # a, b, c = 70, 138, 140\n    # a, b, c = 71, 140, 142\n    # a, b, c = 72, 142, 144\n    # a, b, c = 73, 144, 146\n    # a, b, c = 74, 146, 148\n    # a, b, c = 75, 148, 150\n    # a, b, c = 76, 150, 152\n    # a, b, c = 77, 152, 154\n    # a, b, c = 78, 154, 156\n    # a, b, c = 79, 156, 158\n    # a, b, c = 80, 158, 160\n    # a, b, c = 81, 160, 162\n    # a, b, c = 82, 162, 164\n    # a, b, c = 83, 164, 166\n    # a, b, c = 84, 166, 168\n    # a, b, c = 85, 168, 170\n    # a, b, c = 86, 170, 172\n    # a, b, c = 87, 172, 174\n    # a, b, c = 88, 174, 176\n    # a, b, c = 89, 176, 178\n    # a, b, c = 90, 178, 180\n    # a, b, c = 91, 180, 182\n    # a, b, c = 92, 182, 184\n    # a, b, c = 93, 184, 186\n    # a, b, c = 94, 186, 188\n    # a, b, c = 95, 188, 190\n    # a, b, c = 96, 190, 192\n    # a, b, c = 97, 192, 194\n    # a, b, c = 98, 194, 196\n    # a, b, c = 99, 196, 198\n    # a, b, c = 100, 198, 200\n    # a, b, c = 101, 200, 202\n    # a, b, c = 102, 202, 204\n    # a, b, c = 103, 204, 206\n    # a, b, c = 104, 206, 208\n    # a, b, c = 105, 208, 210\n    # a, b, c = 106, 210, 212\n    # a, b, c = 107, 212, 214\n    # a, b, c = 108, 214, 216\n    # a, b, c = 109, 216, 218\n    # a, b, c = 110, 218, 220\n    # a, b, c = 111, 220, 222\n    # a, b, c = 112, 222, 224\n    # a, b, c = 113, 224, 226\n    # a, b, c = 114, 226, 228\n    # a, b, c = 115, 228, 230\n    # a, b, c = 116, 230, 232\n    # a, b, c = 117, 232, 234\n    # a, b, c = 118, 234, 236\n    # a, b, c = 119, 236, 238\n    # a, b, c = 120, 238, 240\n    # a, b, c = 121, 240, 242\n    # a, b, c = 122, 242, 244\n    # a, b, c = 123, 244, 246\n    # a, b, c = 124, 246, 248\n    # a, b, c = 125, 248, 250\n    # a, b, c = 126, 250, 252\n    # a, b, c = 127, 252, 254\n    # a, b, c = 128, 254, 256\n    # a, b, c = 129, 256, 258\n    # a,"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = 1, 1, 1\n    if n%3!= 0:\n        while True:\n            if (n - a) % 3 == 0:\n                return f\"{a} {b} {c}\"\n            a += 1\n    else:\n        while True:\n            if (n - a) % 3 == 0:\n                return f\"{a} {b} {c}\"\n            a += 1\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(x: int) -> bool:\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    num = int(stdin)\n    a = b = c = 0\n    while is_divisible(num):\n        if is_divisible(a):\n            a += 1\n        elif is_divisible(b):\n            b += 1\n        else:\n            c += 1\n        num -= 3\n    if a + b + c == num:\n        return str(a) +'' + str(b) +'' + str(c)\n    else:\n        return 'Too small'\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return\n    three = set()\n    for i in range(1, n//3+1):\n        if n-i in three:\n            return str(i) +'' + str(i+1) +'' + str(n-i)\n        three.add(n-i)\n    return str(n//3) +'' + str(n//3+1) +'' + str(n//3)\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a,b,c = 0,0,0\n    while (a+b+c)!=n:\n        if (a+b+c)%3==0:\n            return str(a)+str(b)+str(c)\n        a+=1\n        b+=1\n        c+=1\n        \n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max = n\n    while max > n:\n        sum = 0\n        for i in range(3):\n            if max % 3 == 0:\n                break\n            if sum + max % 3 < max:\n                sum += max % 3\n            max -= 1\n        if sum == 0:\n            return str(sum) + \" \" + str(sum + 1) + \" \" + str(sum + 2)\n        else:\n            return str(sum) + \" \" + str(sum + 2) + \" \" + str(sum + 1)\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # a,b,c=3,1,2\n    # if n%3!=0:\n    #     a=1\n    #     b=n//3\n    # else:\n    #     a=n//3\n    #     b=1\n    # if n%3!=0:\n    #     c=n//3\n    # else:\n    #     c=1\n    # return str(a)+\" \"+str(b)+\" \"+str(c)\n\n    # a=3\n    # b=1\n    # c=2\n    # while(True):\n    #     if n%a==0 and n%b==0 and n%c==0:\n    #         break\n    #     else:\n    #         a=a+1\n    #         b=b+1\n    #         c=c+1\n    # return str(a)+\" \"+str(b)+\" \"+str(c)\n\n    # a=2\n    # b=1\n    # c=3\n    # while(True):\n    #     if n%a==0 and n%b==0 and n%c==0:\n    #         break\n    #     else:\n    #         a=a+1\n    #         b=b+1\n    #         c=c+1\n    # return str(a)+\" \"+str(b)+\" \"+str(c)\n\n    # a=2\n    # b=1\n    # c=3\n    # while(True):\n    #     if n%a==0 and n%b==0 and n%c==0:\n    #         break\n    #     else:\n    #         a=a+1\n    #         b=b+1\n    #         c=c+1\n    #     if a==3 and b==3 and c==3:\n    #         break\n    # return str(a)+\" \"+str(b)+\" \"+str(c)\n\n    # a=1\n    # b=2\n    # c=3\n    # while(True):\n    #     if n%a==0 and n%b==0 and n%c==0:\n    #         break\n    #     else:\n    #         a=a+1\n    #         b=b+1\n    #         c=c+1\n    #     if a==3 and b==3 and c==3:\n    #         break\n    # return str(a)+\" \"+str(b)+\" \"+str(c)\n\n    # a=1\n    # b=2\n    # c=3\n    # while(True):\n    #     if n%a==0 and n%b==0 and n%c==0:\n    #         break\n    #     else:\n    #         a=a+1\n    #         b=b+1\n    #         c=c+1\n    #     if a==3 and b==3 and c==3:\n    #         break\n    # return str(a)+\" \"+str(b)+\" \"+str(c)\n    # return 3, 1, 1\n    # n=int(stdin)\n    # if n%3==0:\n    #     print(\"1 1 1\")\n    #     return\n    # else:\n    #     t=n\n    #     p=3\n    #     while(t>1):\n    #         if t%p==0:\n    #             t=t//p\n    #             print(t, p, p)\n    #             return\n    #         else:\n    #             p=p+1\n    # return\n    if n%3==0:\n        return \"1 1 1\"\n    else:\n        t=n\n        p=3\n        while(t>1):\n            if t%p==0:\n                t=t//p\n                print(t,p,p)\n                return\n            else:\n                p=p+1\n        return\nsolution(stdin)\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(cur, temp):\n        if cur == n:\n            global result\n            result.append(temp)\n            return\n        if cur > n:\n            return\n        dfs(cur + 1, temp + [cur])\n        dfs(cur + 1, temp)\n\n    n = int(stdin)\n    result = []\n    dfs(1, [n])\n    print(\" \".join(map(str, result)))\n    return result\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = b = c = 0\n    while True:\n        if n == a**3 + b**3 + c**3:\n            return str(a) + \" \" + str(b) + \" \" + str(c)\n        n -= a**3\n        a += 1\n        if n == b**3 + c**3:\n            return str(a) + \" \" + str(b) + \" \" + str(c)\n        n -= b**3\n        b += 1\n        if n == c**3:\n            return str(a) + \" \" + str(b) + \" \" + str(c)\n        n -= c**3\n        c += 1\nsolution(input())"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n // 3):\n        b = n - a\n        c = n - a - b\n        if a * b * c == n:\n            return str(a) +'' + str(b) +'' + str(c)\n    return 'no solution'"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = list(map(int, stdin.split()))\n    # print(n, a, b, c, d)\n    print(0) if n == a == b == c == d else print(\n        1) if n == a == b == c or n == a == b == d or n == a == c == d or n == c == a == b or n == c == b == d or n == c == d == a or n == d == a == b or n == d == b == c else print(\n            2) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                3) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                    4) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                        5) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                            6) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                7) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                    8) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                        9) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                            10) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                                11) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                                    12) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print(\n                                                        13) if n == a == b or n == a == c or n == a == d or n == b == a or n == b == c or n == b == d or n == c == a or n == c == b or n == c == d or n == d == a or n == d == b or n == d == c else print"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    For each test case, the first line contains two integers, n and a, where n is the number of integers in the cell, and a is the number of integers to remember. The second line contains four integers that are the initial values of each square. \n    '''\n    n, a, b, c, d = map(int, stdin.split())\n    valid_squares = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                for d in range(1, n + 1):\n                    if (a, b, c, d)!= (a, b, c, d) and (a, d)!= (a, b, c) and (b, a)!= (a, b, c) and (c, a, b)!= (a, b, c):\n                        if (a * b) == (c * d):\n                            valid_squares += 1\n    return valid_squares\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    _, a, b, c, d = map(int, stdin.split())\n    # a, b, c, d = stdin.split()\n    print(a, b, c, d)\n    ans = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                for l in range(1, d + 1):\n                    if l == a and i == a:\n                        ans += 1\n                    if k == b and j == b:\n                        ans += 1\n                    if k == c and j == c:\n                        ans += 1\n                    if i == a and l == d and k == c:\n                        ans += 1\n    return str(ans)\n\nprint(solution(input()))\n\n'''\ndef"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    return str(2*n) if a == 1 and b == 1 and c == 1 and d == 2 else str(n**2 + (n-1)**2)\n\n\nprint(solution(\"2 1 1 1 2\"))\nprint(solution(\"3 3 1 2 3\"))"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return solution of the problem.'''\n    n, a, b, c, d = map(int, stdin.split())\n    ans = 0\n    if n * n == a * b + c * d:\n        ans += 1\n    if (n * n + a * c) == (n * n + b * d):\n        ans += 1\n    if (n * n + b * c) == (n * n + a * d):\n        ans += 1\n    if (n * n + a * b) == (n * n + c * d):\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    result = 0\n    for k in range(1, n + 1):\n        result += len([x for x in range(1, n + 1) if (x - k) % a!= 0])\n        result += len([x for x in range(1, n + 1) if (x - k) % b!= 0])\n        result += len([x for x in range(1, n + 1) if (x - k) % c!= 0])\n        result += len([x for x in range(1, n + 1) if (x - k) % d!= 0])\n    return str(result)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D = [int(i) for i in stdin.split()]\n    # 1. Count squares of different size:\n    # 2. Check same square\n    # 3. Check same square\n    # 4. Check same square\n    # 5. Check same square\n    # 6. Check same square\n    # 7. Check same square\n    # 8. Check same square\n    # 9. Check same square\n    # 10. Check same square\n    # 11. Check same square\n    # 12. Check same square\n    # 13. Check same square\n    # 14. Check same square\n    # 15. Check same square\n    # 16. Check same square\n    # 17. Check same square\n    # 18. Check same square\n    # 19. Check same square\n    # 20. Check same square\n    # 21. Check same square\n    # 22. Check same square\n    # 23. Check same square\n    # 24. Check same square\n    # 25. Check same square\n    # 26. Check same square\n    # 27. Check same square\n    # 28. Check same square\n    # 29. Check same square\n    # 30. Check same square\n    # 31. Check same square\n    # 32. Check same square\n    # 33. Check same square\n    # 34. Check same square\n    # 35. Check same square\n    # 36. Check same square\n    # 37. Check same square\n    # 38. Check same square\n    # 39. Check same square\n    # 40. Check same square\n    # 41. Check same square\n    # 42. Check same square\n    # 43. Check same square\n    # 44. Check same square\n    # 45. Check same square\n    # 46. Check same square\n    # 47. Check same square\n    # 48. Check same square\n    # 49. Check same square\n    # 50. Check same square\n    # 51. Check same square\n    # 52. Check same square\n    # 53. Check same square\n    # 54. Check same square\n    # 55. Check same square\n    # 56. Check same square\n    # 57. Check same square\n    # 58. Check same square\n    # 59. Check same square\n    # 60. Check same square\n    # 61. Check same square\n    # 62. Check same square\n    # 63. Check same square\n    # 64. Check same square\n    # 65. Check same square\n    # 66. Check same square\n    # 67. Check same square\n    # 68. Check same square\n    # 69. Check same square\n    # 70. Check same square\n    # 71. Check same square\n    # 72. Check same square\n    # 73. Check same square\n    # 74. Check same square\n    # 75. Check same square\n    # 76. Check same square\n    # 77. Check same square\n    # 78. Check same square\n    # 79. Check same square\n    # 80. Check same square\n    # 81. Check same square\n    # 82. Check same square\n    # 83. Check same square\n    # 84. Check same square\n    # 85. Check same square\n    # 86. Check same square\n    # 87. Check same square\n    # 88. Check same square\n    # 89. Check same square\n    # 90. Check same square\n    # 91. Check same square\n    # 92. Check same square\n    # 93. Check same square\n    # 94. Check same square\n    # 95. Check same square\n    # 96. Check same square\n    # 97. Check same square\n    # 98. Check same square\n    # 99. Check same square\n    # 100. Check same square\n    # 101. Check same square\n    # 102. Check same square\n    # 103. Check same square\n    # 104. Check same square\n    # 105. Check same square\n    # 106. Check same square\n    # 107. Check same square\n    # 108. Check same square\n    # 109. Check same square\n    # 110. Check same square\n    # 111. Check same square\n    # 112. Check same square\n    # 113. Check same square\n    # 114. Check same square\n    # 115. Check same square\n    # 116. Check same square\n    # 117. Check same square\n    # 118. Check same square\n    # 119. Check same square\n    # 120. Check same square\n    # 121. Check same square\n    # 122. Check same square\n    # 123. Check same square\n    # 124. Check same square\n    # 125. Check same square\n    # 126. Check same square\n    # 127. Check same square\n    # 128. Check same square\n    # 129. Check same square\n    # 130. Check same square\n    # 131. Check same square\n    # 132. Check same square\n    # 133. Check same square\n    "
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answers = stdin.strip().split('\\n')\n    paintings = list(zip(*(map(lambda x: tuple(map(int, x.split())), answers[0].split('\\t')))))\n    paintings = list(map(lambda x: list(x), paintings))\n    paintings = [[p[0], p[1], p[2], p[3]] for p in paintings]\n\n    paintings = [[p[0], p[1], p[2]] for p in paintings]\n\n    paintings = set(paintings)\n    print(len(paintings))\n\n    return '0'\n\nsolution('''\n2 1 1 1 2\n''')"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = [int(i) for i in stdin.split()]\n    stone_1 = [int(i) for i in stdin.split()]\n    stone_2 = [int(i) for i in stdin.split()]\n\n    stone_1_height = 1\n    stone_2_height = 1\n    stone_1_weight = stone_1_height * stone_1[0]\n    stone_2_weight = stone_2_height * stone_2[0]\n    snow_weight = stone_1_weight + stone_2_weight\n    snow_height = 0\n\n    while (stone_1_height!= 0 and stone_2_height!= 0):\n        snow_weight += (stone_1_weight - stone_2_weight)\n        stone_1_weight = stone_1_height * stone_1[0]\n        stone_2_weight = stone_2_height * stone_2[0]\n\n        snow_height += 1\n\n        if stone_1_height == stone_2_height:\n            stone_1_weight = stone_1_height * stone_1[0]\n            stone_2_weight = stone_2_height * stone_2[0]\n            stone_1_height = 1\n            stone_2_height = 1\n        elif stone_1_height > stone_2_height:\n            stone_1_height -= 1\n            stone_2_weight = stone_2_height * stone_2[0]\n            stone_2_height = 1\n        elif stone_1_height < stone_2_height:\n            stone_1_weight = stone_1_height * stone_1[0]\n            stone_1_height = 1\n            stone_2_weight = stone_2_height * stone_2[0]\n            stone_2_height = 1\n\n    return snow_weight\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    u1, d1, u2, d2 = map(int, stdin.split())\n    \n    while True:\n        if d1 <= 0:\n            return u2\n        if d2 <= 0:\n            return u1\n        if u1 < u2:\n            u1 += u1 * (d1 - d2)\n        else:\n            u2 += u2 * (d2 - d1)\n        d1, d2 = d2, d1"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, h = list(map(int, stdin.split()))\n    u1, d1 = list(map(int, stdin.split()))\n    u2, d2 = list(map(int, stdin.split()))\n    \n    if d2!= d1:\n        return(w * (u2 - u1 - 1))\n    else:\n        return(w * (h - d1))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    h = int(stdin[1])\n    u1 = int(stdin[2].split()[0])\n    d1 = int(stdin[2].split()[1])\n    h = h-1\n    while True:\n        h = h + 1\n        if (d1 - u1) <= h:\n            if h == 0:\n                break\n            else:\n                h = h - 1\n        else:\n            u1 = u1 + (h - d1)\n            d1 = d1 + (h - d1)\n    return str(u1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    while h!= 0:\n        if h <= w:\n            w = w - h\n        else:\n            w = w - h\n            h = h - 1\n    return str(w)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    weight, height = map(int, stdin.split())\n    height_of_stone1, height_of_stone2 = map(int, stdin.split())\n\n    while height > 0:\n        if height_of_stone1 > height_of_stone2:\n            weight += height_of_stone1 - height_of_stone2\n            height_of_stone1 = max(height_of_stone1 - 1, height)\n            height_of_stone2 = max(height_of_stone2 - 1, height)\n        else:\n            weight += height_of_stone2 - height_of_stone1\n            height_of_stone1 = max(height_of_stone1 - 1, height)\n            height_of_stone2 = max(height_of_stone2 - 1, height)\n\n        height -= 1\n\n    return str(weight)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (w, h) = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    d1, d2 = min(d1, d2), max(d1, d2)\n    while d1 <= h:\n        h = h - 1\n        u1 = u1 + d1 - h\n        d1 = d1 + 1\n    while u1 > 0 and d2 <= h:\n        h = h - 1\n        u2 = u2 + d2 - h\n        d2 = d2 + 1\n    return str(u2)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(eval(stdin.replace('\\n','').replace(' ',''))))"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    w = int(stdin[0])\n    h = int(stdin[1])\n    u1 = int(stdin[2])\n    d1 = int(stdin[3])\n    u2 = int(stdin[4])\n    d2 = int(stdin[5])\n    if u1 == u2 and d1 == d2:\n        return w\n    while h > 0:\n        w = w + abs(u1 - u2) + abs(d1 - d2)\n        h -= 1\n        u2 = u1\n        d2 = d1\n        if u1 == u2 and d1 == d2:\n            break\n        u1 = u1 + abs(u1 - u2)\n        d1 = d1 + abs(d1 - d2)\n        if d1 == d2:\n            break\n    return w\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    u1,d1,u2,d2=list(map(int,stdin.split()))\n    if d1==d2:\n        print(d1*u1+d1*u2)\n        return\n\n    while d1!=d2:\n        if d1>d2:\n            u1+=1\n            d1-=u1\n        else:\n            u2+=1\n            d2-=u2\n    print(u1*u2)\n    return"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    m = int(stdin[0])\n    c_list = stdin[1]\n    x,y = list(map(int,stdin[2].split()))\n    if x == y:\n        return '0'\n    c_list = list(map(int,c_list.split()))\n    c_list.sort()\n    \n    c_dict = {}\n    for i in range(len(c_list)):\n        if c_list[i] not in c_dict:\n            c_dict[c_list[i]] = 1\n        else:\n            c_dict[c_list[i]] += 1\n    \n    d = max(c_list)\n    h = min(c_list)\n    \n    if d > x and h < y:\n        return d\n    else:\n        return 0\nprint(solution(input()))\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    scores = list(map(int, stdin.split()[1:]))\n    x, y = list(map(int, stdin.split()[2].split()))\n    scores.sort()\n    #print(scores)\n    if x > y:\n        return 0\n    if x == 0 and y == 0:\n        return 0\n    for i in range(x, y+1):\n        cnt = 0\n        for i in range(m):\n            if scores[i] <= i:\n                cnt += 1\n            else:\n                break\n        if cnt <= i:\n            continue\n        else:\n            return i\n    return 0\n    \n    \n    \n    \n\nstdin = \"\"\"3 4 3 2 1\n3 10\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    m, x, y = stdin[0], stdin[1], stdin[2]\n    scores = stdin[1:]\n    scores = list(map(int, scores))\n    \n    scores.sort()\n    y = int(y)\n    x = int(x)\n    size = []\n    max_size = 0\n    min_size = 0\n    while max_size <= y:\n        max_size += x\n        min_size += x\n        size.append(max_size)\n        size.append(min_size)\n        if max_size > y or min_size > y:\n            break\n    if max_size > y or min_size > y:\n        return '0'\n    \n    i = 0\n    while i < len(scores):\n        if scores[i] < min_size:\n            scores[i] = min_size\n        elif scores[i] > max_size:\n            scores[i] = max_size\n        i += 1\n    \n    max_score = max(scores)\n    for i in range(len(scores)):\n        if scores[i] == max_score:\n            return str(i + 1)\n        \n    return '0'"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    res = []\n    c = list(map(int, stdin.split()[1:]))\n    for i in range(1, m + 1):\n        if sum(c) - i > 0:\n            res.append(i)\n            res.append(sum(c) - i)\n        else:\n            if sum(c) <= i:\n                res.append(i)\n            else:\n                break\n    return''.join(map(str, res))\nprint(solution(input()))\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, *c, x, y = map(int, stdin.split())\n    print(solution_a(m, c, x, y))\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    \n    inter = sum(1 for i in range(m) if c[i] <= m)\n    b = sum(1 for i in range(m) if c[i] > m)\n    \n    if inter <= x and b <= y:\n        return \"1\"\n    elif x <= inter <= y:\n        return \"2\"\n    elif inter > y:\n        return \"0\"\n    elif b > y:\n        return \"1\"\n    elif inter <= y and b >= x:\n        return \"2\"\n    else:\n        return \"0\"\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    if m <= 0:\n        return '0'\n    x, y = list(map(int, stdin.split()[2].split()))\n    if x == y:\n        return '0'\n    if x > y or x < 1 or y < 1:\n        return '0'\n    for i in c:\n        if i > x:\n            return '0'\n    inter = 1\n    begin = 2\n    while inter <= m:\n        if inter + begin > y:\n            break\n        for j in range(begin, inter):\n            if (j + 1) * x <= y and (j + 1) * y > inter * x:\n                return str(inter)\n        begin = inter\n        inter += 1\n    return '0'\n\nsolution('''5\n3 4 3 2 1\n6 8\n''')"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(i) for i in stdin.split()]\n    n = l[0]\n    c = sorted(l[1:])\n    m = l[2]\n    x, y = l[3], l[4]\n    if x + y > m:\n        return 0\n    if x < 1 or y < 1 or n < x + y:\n        return 0\n    a = m - x\n    b = m - y\n    if x <= b:\n        return b\n    return min(a, b)\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(i) for i in stdin.split())\n    min_size = min(x, y)\n    max_size = max(x, y)\n    score = {x: x for x in range(1, n + 1)}\n    for i in range(1, n):\n        score[i] = (score[i - 1] + i) / n\n    beginner = []\n    intermediate = []\n    for i in range(1, n):\n        if x <= score[i] < y:\n            beginner.append(i)\n        elif x <= y < score[i]:\n            intermediate.append(i)\n    if beginner:\n        if len(beginner) < x:\n            return 0\n        return len(beginner)\n    if intermediate:\n        if len(intermediate) < y - x:\n            return 0\n        return len(intermediate)\n    return 0"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    group_list = list(map(int, stdin.split()[1:]))\n    x, y = map(int, stdin.split()[2].split())\n    \n    group_set = set()\n    for group in group_list:\n        if group < x or group > y:\n            return '0'\n        else:\n            group_set.add(group)\n    group_list = sorted(list(group_set))\n    if len(group_list) < 2:\n        return '0'\n    else:\n        passing_rate = (group_list[-1] - group_list[0]) / len(group_list)\n        return str(round(passing_rate,2))\n    \nsolution('5 2 3 4 2')\nsolution('5 0 3 3 4 2')\nsolution('4 2 5 3 6')\n\n\n\n\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split('\\n')))\n\n    if inputs[0] == 1:\n        return '0'\n\n    total = inputs[0]\n\n    for i in range(1, inputs[1]):\n        if i % inputs[1] == 0:\n            total += i - 1\n\n    total = total / inputs[1]\n    return str(total)\n\n\nprint(solution(input()))"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, k, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    remain = n\n    div = k\n    cost = 0\n    while remain > 1:\n        if remain == div:\n            cost += b\n            remain = 1\n        elif remain > div:\n            cost += b\n            remain = remain - div\n        else:\n            cost += a\n            remain = remain - remain\n    return str(cost)\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    def coinChange(n, k, A):\n        if n == 0:\n            return 0\n        else:\n            if n > k:\n                return min(coinChange(n - k, k, A), 1 + coinChange(n, k, A))\n            else:\n                return min(coinChange(n - 1, k, A), 1 + coinChange(n, k, A))\n    return coinChange(n, k, A)"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(x: int, y: int, z: int) -> int:\n        if x == 1:\n            return z\n        if x % y!= 0:\n            return -1\n        else:\n            x = x//y\n            return solve(x, y, z+1)\n    if int(stdin) <= 0:\n        return -1\n    return solve(int(stdin), int(stdin), 0)"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b = map(int, stdin.split())\n    i = n\n    coins = 0\n    while i!= 1:\n        if i % k == 0:\n            i = i//k\n            coins += b\n        else:\n            i -= 1\n            coins += a\n    return str(coins)"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    n = A * (B // (A + 1)) + (B % (A + 1))\n    return str(n)\n\nsolution(input())\n\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = list(map(int, stdin.split()))\n    if n == 1:\n        return str(A + 1)\n    if n == 2:\n        if A == 0 or B == 0:\n            return str(n)\n        if k % 2!= 0:\n            return str(min(A + 1, B + 1))\n        else:\n            return str(min(A + 1, min(B + 1, n)))\n    if k % 2 == 0:\n        if A > 0 and B > 0:\n            return str(min(A + 1, min(B + 1, n)))\n        if A > 0 and B < 0:\n            return str(min(A + 1, n))\n        if A < 0 and B < 0:\n            return str(min(n, min(B + 1, A + 1)))\n        if A < 0 and B > 0:\n            return str(min(n, min(A + 1, B + 1)))\n    else:\n        if A > 0 and B > 0:\n            return str(min(A + 1, min(B + 1, n)))\n        if A > 0 and B < 0:\n            return str(min(A + 1, n))\n        if A < 0 and B < 0:\n            return str(min(n, min(B + 1, A + 1)))\n        if A < 0 and B > 0:\n            return str(min(n, min(A + 1, B + 1)))"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  return str(int(1000000 - int(stdin[0])) // int(stdin[1]) + int(stdin[0]))\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split()))\n    return str(a + min(n - a, k - (n // k)) * b)\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k,a,b = map(int,stdin.split())\n    \n    x = n\n    \n    while (x > 1):\n        \n        if (x % k!= 0):\n            x -= 1\n            \n        else:\n            x = x // k\n            \n    return str(x)\n\n\n\n\n'''\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_max_n(n, op):\n        return sum(op) + min(op) + max(op)\n\n    n = int(stdin)\n    max_ops = 0\n    cur = n\n    while True:\n        if cur == 1:\n            break\n        elif cur % 2 == 0:\n            cur //= 2\n        else:\n            cur = cur * 3 + 1\n\n        max_ops += 1\n        if cur <= n:\n            max_ops += min_max_n(cur, (1, 1, 1))\n    return str(n) + \" \" + str(max_ops)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    count = 0\n    while n!= 1:\n        count += 1\n        if n % m == 0:\n            n //= m\n        else:\n            m += 1\n    return str(n) +'' + str(count)\n\nsolution(\"20\")\nsolution(\"5184\")\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    a = 1\n    b = 1\n    count = 0\n    while b!= n:\n        count += 1\n        a = (a + 2 * b) % n\n        b = (a + 2 * b) % n\n    return str(count) + \" \" + str(a)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function receives a single string parameter containing input data, \n    and returns a value as defined by the instructions.\n    \"\"\"\n    n = int(stdin)\n    mul_count = 1\n    sqrt_count = 1\n    while n >= 10:\n        mul_count += 1\n        sqrt_count += 1\n        n = n * 2\n        while n >= 10:\n            n = n/10\n    return (mul_count, sqrt_count)"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_operations(n: int) -> str:\n        res = []\n        while n > 1:\n            res.append(\"mul\")\n            n = n // 2\n        return \"\".join(res)\n\n    n = int(stdin)\n    operations = get_operations(n)\n    min_operations = len(get_operations(n))\n\n    for i in range(1, int(math.sqrt(n))+1):\n        curr_operations = get_operations(n)\n        curr_min_operations = len(get_operations(n))\n        if curr_min_operations < min_operations:\n            min_operations = curr_min_operations\n            operations = curr_operations\n    return str(min_operations) + \" \" + str(len(operations))\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(\u2223n\u2223), where n is the input.\n    Space complexity: O(1).\n    \"\"\"\n    n = int(stdin)\n    count = 0\n    while n:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n = n * 3 + 1\n            count += 1\n    return \"{} {}\".format(count, n)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    if n == 1:\n        return \"1 0\"\n    while n > 1:\n        count += 1\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return str(n) + str(count)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(4):\n        n *= n\n    sqrt = n ** 0.5\n    while sqrt % 1!= 0:\n        sqrt = (sqrt + 1) / 2\n    n = int(n / sqrt)\n    return str(n) + \" \" + str(2 * n - 1)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''100\n   ... 75\n   ... ''')\n    '10 2'\n    >>> solution('''5184\n   ... 2\n   ... ''')\n    '6 4'\n    >>> solution('''5184\n   ... 7\n   ... ''')\n    '14 9'\n    \"\"\"\n    min_number = 100000000\n    min_operations = 0\n    for n in stdin.split():\n        operations = 0\n        number = int(n)\n        if number == 0:\n            return '{0} {1}'.format(min_number, min_operations)\n        if number % 2 == 0:\n            number = number / 2\n        while number > 1:\n            number = number / 2\n            operations += 1\n        if operations < min_operations:\n            min_operations = operations\n            min_number = number\n    return '{0} {1}'.format(min_number, min_operations)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    ret = {}\n\n    def calc(x, m, n):\n        if x == 0:\n            if n in ret:\n                return ret[n]\n            else:\n                return n\n        else:\n            if n not in ret:\n                ret[n] = calc(x - 1, m, n) * m + calc(x - 1, m, n)\n            return ret[n]\n\n    return str(min(calc(n, m, 1), n)) +'' + str(calc(n, m, n))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    data = stdin.splitlines()\n    takahashi_hand = data[0]\n    machine_hand = \"\"\n\n    for _ in range(k):\n        machine_hand += r\"r\"\n\n    for _ in range(n - k):\n        machine_hand += r\"p\"\n\n    machine_hand += r\"s\"\n\n    machine_hand_score = 0\n    takahashi_hand_score = 0\n\n    if machine_hand == takahashi_hand:\n        machine_hand_score = 27\n    else:\n        for i, char in enumerate(machine_hand):\n            if char == \"r\" and takahashi_hand[i] == \"s\":\n                machine_hand_score += 1\n            elif char == \"s\" and takahashi_hand[i] == \"p\":\n                machine_hand_score += 1\n            elif char == \"p\" and takahashi_hand[i] == \"r\":\n                machine_hand_score += 1\n\n    print(machine_hand_score)\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(n) for n in stdin.split())\n    t = stdin.strip()\n    t_set = set(t)\n    hand_to_play = []\n    for i in range(1, N + 1):\n        for s in t_set:\n            if s == 'r' and 'r' in hand_to_play:\n                pass\n            elif s =='s' and's' in hand_to_play:\n                pass\n            elif s == 'p' and 'p' in hand_to_play:\n                pass\n            else:\n                hand_to_play.append(s)\n    scores = {'r': 0, 'p': 0,'s': 0}\n    for k in range(K):\n        hand_to_play.pop(0)\n        hand_to_play.pop(1)\n        hand_to_play.append(t[k])\n        if hand_to_play[0] == 'r':\n            scores['r'] += 1\n        elif hand_to_play[0] == 'p':\n            scores['p'] += 1\n        elif hand_to_play[0] =='s':\n            scores['s'] += 1\n        elif hand_to_play[0] == 'r' and hand_to_play[1] == 'p':\n            scores['p'] += 1\n        elif hand_to_play[0] == 'r' and hand_to_play[1] =='s':\n            scores['s'] += 1\n        elif hand_to_play[0] =='s' and hand_to_play[1] == 'r':\n            scores['r'] += 1\n        elif hand_to_play[0] =='s' and hand_to_play[1] == 'p':\n            scores['p'] += 1\n        elif hand_to_play[0] == 'p' and hand_to_play[1] =='s':\n            scores['s'] += 1\n        elif hand_to_play[0] == 'p' and hand_to_play[1] == 'r':\n            scores['r'] += 1\n        elif hand_to_play[0] == 'r' and hand_to_play[1] == 'r':\n            scores['r'] += 1\n        elif hand_to_play[0] == 'r' and hand_to_play[1] == 'p':\n            scores['p'] += 1\n        elif hand_to_play[0] == 'p' and hand_to_play[1] == 'r':\n            scores['r'] += 1\n        elif hand_to_play[0] == 'p' and hand_to_play[1] == 'p':\n            scores['p'] += 1\n    return str(max(scores.values()))\n\nprint(solution(input()))"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r, s, p = stdin.strip().split()\n    t = r + p + s\n    R, S, P = 'r','s', 'p'\n    r_count = t.count(R)\n    s_count = t.count(S)\n    p_count = t.count(P)\n    score = r_count * 3 + p_count\n    if r_count + s_count == 0:\n        return 0\n    if s_count + p_count == 0:\n        return 0\n    if r_count + s_count + p_count == 0:\n        return 0\n    if r_count + s_count + p_count == n - 1:\n        return score\n    \n    score = 0\n    for i in range(1, n - 1):\n        if t[i]!= t[i - 1] and t[i]!= t[i + 1]:\n            score += 1\n    \n    return max(score, r_count * 3 + p_count)"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n    player = {'R': 'Rock', 'S': 'Scissors', 'P': 'Paper'}\n    T = stdin.rstrip()\n    if K == 1:\n        return str(0)\n    scores = [[0 for _ in range(4)] for _ in range(N)]\n    for i in range(K):\n        if T[i] == 'r':\n            scores[i][0] = 1\n        elif T[i] == 'p':\n            scores[i][1] = 1\n        elif T[i] =='s':\n            scores[i][2] = 1\n    for i in range(K, N):\n        if T[i] == 'r':\n            if T[i - K] == 'p':\n                scores[i][0] += 1\n            elif T[i - K] =='s':\n                scores[i][1] += 1\n            elif T[i - K] == 'r':\n                scores[i][2] += 1\n        elif T[i] == 'p':\n            if T[i - K] =='s':\n                scores[i][0] += 1\n            elif T[i - K] == 'r':\n                scores[i][1] += 1\n            elif T[i - K] == 'p':\n                scores[i][2] += 1\n        elif T[i] =='s':\n            if T[i - K] == 'r':\n                scores[i][0] += 1\n            elif T[i - K] == 'p':\n                scores[i][1] += 1\n            elif T[i - K] =='s':\n                scores[i][2] += 1\n    return str(max([sum(i) for i in scores]))\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.strip().split()))\n    T = stdin.strip()\n\n    return str(max(0, N - K + 1 + (sum([1 if T[i] == \"r\" else 0 if T[i] == \"s\" else -1 for i in range(K)]) == N - K)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    score = {'r': 0, 'p': 0,'s': 0}\n    rounds = list(stdin)\n    for i in range(k):\n        if rounds[i] == 'r':\n            score['r'] += 1\n        elif rounds[i] == 'p':\n            score['p'] += 1\n        else:\n            score['s'] += 1\n        rounds[i] = 'r'\n    return ''.join(score.values())\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin.split()[1]) * int(stdin.split()[2]))"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n\n    R, S, P = stdin.split()\n\n    score = 0\n    for i in range(N):\n        if P[i] == R[i] or S[i] == R[i]:\n            score += R\n        elif P[i] == S[i] or R[i] == S[i]:\n            score += S\n        else:\n            score += P\n    print(score)\n\n    return str(score)\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n    T = stdin.split()[-1]\n\n    def pick(T):\n        for i in range(N):\n            if T[i] == 'r':\n                return i\n            elif T[i] == 'p':\n                return i\n            elif T[i] =='s':\n                return i\n\n    def score(hand):\n        if hand == 'r':\n            return R\n        elif hand == 'p':\n            return P\n        else:\n            return S\n\n    R = 0\n    S = 0\n    P = 0\n\n    for i in range(K):\n        if pick(T) == i:\n            if i == 0:\n                R += score(pick(T))\n            else:\n                if pick(T) == (i - 1):\n                    S += score(pick(T))\n                else:\n                    P += score(pick(T))\n        else:\n            if pick(T) == (i - 1):\n                R -= score(pick(T))\n            else:\n                P -= score(pick(T))\n\n    return '{:.1f}'.format(max(R, S, P))\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print(N, K)\n    # print"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    l = 0\n    r = 0\n    ans = 0\n    while r < a + b:\n        if l == r:\n            if (a + b) % 2 == 1:\n                r += 1\n            else:\n                l += 1\n        if (a + b) % 2 == 1:\n            ans = max(ans, r - l + 1)\n            r += 1\n        else:\n            l += 1\n    return ans"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    nums = [list(map(str, input().split())) for _ in range(a)]\n    nums.sort()\n    res = 0\n    for i, num in enumerate(nums):\n        s = num[0]\n        if i < len(nums)-1 and nums[i+1][0] == s:\n            continue\n        for j, x in enumerate(num[1:]):\n            if i < len(nums)-1 and nums[i+1][j] == x:\n                continue\n            else:\n                res = max(res, j+2+s.count(x))\n    return str(res)\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    input_s = stdin.split(\"\\n\")\n    n = int(input_s[0])\n    m = int(input_s[1])\n    lst_a = list(input_s[2].split())\n    a = []\n    for i in lst_a:\n        a.append(i.count(\"a\"))\n        a.append(i.count(\"b\"))\n    a.sort(reverse=True)\n    if m < min(a):\n        print(-1)\n    else:\n        ans = min(a[0] + a[1] + m, a[0] + m, a[1] + m)\n        print(ans)\nsolution(input())"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns: the maximum length of a good string\n    \"\"\"\n    a, b, c = (int(i) for i in stdin.split())\n    if a == 1:\n        return c\n    elif b == 1:\n        return c * 2\n    elif c == 1:\n        return c * 3\n    else:\n        return c * 4\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return max([len(stdin.replace('b', 'a' + ('b' * (i + 1)) + 'a')) for i in range(len(stdin) // 2)])\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l % 2!= 0:\n        print(0)\n        return\n    n = int(l / 2)\n    strings = stdin.split(' ')\n    a = set()\n    for i in range(0, n - 1):\n        a.add(strings[i])\n        a.add(strings[i + 1])\n    for i in range(n, l):\n        if strings[i] in a:\n            print(i - n + 1)\n            return\n        a.add(strings[i])\n    print(0)"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    abab = [''.join(sorted(x)) for x in permutations(['a', 'b'], 2)]\n    baba = [''.join(sorted(x)) for x in permutations(['b', 'a'], 2)]\n    good = abab + baba\n    return max([len(x) for x in good])\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # return a * b + min(a, b) * c\n    return max(a * b + min(a, b) * c, b * a + min(a, b) * c)\n    # return max(a, b, c) * min(a, b)\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"\".join(sorted([sorted(l) for l in [('a'*a, 'b'*b, 'ab'*c)]], key=lambda x: x[0])[0])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if k + p > n * p or k + p < n - k or p < x:\n        return \"-1\"\n    sum = 0\n    for i in range(n):\n        sum += int(stdin.split()[i])\n    if k + sum > x:\n        return \"-1\"\n    if y > sum // 2:\n        return \"-\"\n    l, r = 1, sum\n    while l < r:\n        mid = l + (r - l) // 2\n        if mid <= sum // 2 <= mid + 1:\n            r = mid\n        elif mid + 1 <= sum // 2:\n            l = mid + 1\n    return''.join(map(str, range(l, r + 1)))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P, X, Y = map(int, stdin.split())\n    S = (N-K)*[0] + map(int, stdin.split())\n    s = sorted(S)\n    if sum(s)<X:\n        return '-1'\n    med = s[int(((N-1)/2)+1)]\n    if med<Y:\n        return '-1'\n    med = med+X-Y\n    count = 0\n    for i in range(N):\n        if s[i]>med:\n            count+=1\n    if count>=(N-K)/2:\n        return '-1'\n    return''.join(map(str,s[:N-K]))\n\n\ndef"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = stdin.split()\n    n = int(n)\n    k = int(k)\n    p = int(p)\n    x = int(x)\n    y = int(y)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[n - k] >= p:\n        if sum(a[n - k - 1:n - 1]) >= x:\n            return''.join(map(str, a[n - k:n]))\n        else:\n            return '-1'\n    else:\n        return '-1'\n\nsolution(\"5 3 5 18 4\")\n\nsolution(\"5 3 5 16 4\")\n\nsolution(\"5 2 4 5 1\")\n\nsolution(\"5 5 5 5\")"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = (int(i) for i in stdin.split())\n    tests = list(map(int, stdin.split()))\n    marks = tests[:k]\n    tests = tests[k:]\n\n    # If x is too high, then it means mom is too lazy to let Vova play the computer games.\n    if sum(marks) > x:\n        return \"-1\"\n\n    # If y is too low, then it means mom is too stupid to let Vova copy the homework.\n    if sum(marks) - sum(tests) < y:\n        return \"-1\"\n\n    return \" \".join(map(str, tests))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    return''.join(map(str, sorted(set(list(map(int, stdin.split()))))[:-1][:x] + sorted(set(list(map(int, stdin.split())))[x:])[:y]))"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split()))\n    if k < n:\n        return '-1'\n    total = sum(list(map(int, stdin.split())))\n    if total < x:\n        return '-1'\n    mid = (n + 1) // 2\n    if total >= (x + mid) * y:\n        return '1'\n    return''.join(list(map(str, range(1, n + 1))))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if not n % 2 or not k < n:\n        return '-1'\n    return''.join(map(str, (n - k, ) + tuple(sorted(map(int, stdin.split())))))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks.sort()\n    if n == 1:\n        return marks[0]\n    max_marks = sum(marks)\n    if max_marks > x:\n        return -1\n    if max_marks < x:\n        return marks\n    if marks[len(marks) // 2] < y:\n        return marks\n    return marks[:len(marks) // 2] + marks[len(marks) // 2 + 1:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a[2] > a[0]:\n        if a[3] > a[1]:\n            if a[4] > sum(a[0:2]):\n                return \" \".join(map(str, (len(a) - 2) * a[0:2]))\n            else:\n                return \"-\"\n        else:\n            return \"-\"\n    else:\n        return \"-\"\n\nstdin = \"5 3 5 18 4\"\nprint(solution(stdin))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split()))\n    if n <= 2:\n        return \"-1\"\n    elif k + n - 2 <= p:\n        return f\"{p - (k + n - 2)} {(k + n - 2)} {n - k} {n}\"\n    else:\n        return f\"{p - y} {y} {n - k - 1} {n}\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ns = input()\ncount = 0\n\nvowels = \"aeiou\"\n\nfor i in range(len(s)):\n    if s[i] in vowels:\n        if i == len(s) - 1:\n            break\n        if s[i + 1] not in vowels and s[i + 1]!= \"n\":\n            count = 0\n            break\n        count += 1"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i]!= \"a\" and s[i]!= \"o\" and s[i]!= \"u\" and s[i]!= \"i\" and s[i]!= \"e\" and s[i]!= \"n\" and s[i-1]!= \"a\" and s[i-1]!= \"o\" and s[i-1]!= \"u\" and s[i-1]!= \"i\" and s[i-1]!= \"e\" and s[i-1]!= \"n\":\n            return \"NO\"\n    return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #s = stdin.strip()\n    s ='sumimasen'\n    vowels = ['a', 'o', 'u', 'i', 'e']\n    if len(s) < 2:\n        return 'NO'\n    elif len(s) == 2:\n        for i in s:\n            if i.isalpha():\n                if i.lower() in vowels:\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                return 'NO'\n    for i in range(1, len(s)):\n        if s[i].isalpha():\n            if s[i - 1].isalpha():\n                if s[i] == 'a':\n                    if s[i + 1] in vowels:\n                        return 'YES'\n                elif s[i] == 'e':\n                    if s[i + 1] in vowels:\n                        return 'YES'\n                elif s[i] == 'i':\n                    if s[i + 1] in vowels:\n                        return 'YES'\n                elif s[i] == 'o':\n                    if s[i + 1] in vowels:\n                        return 'YES'\n                elif s[i] == 'u':\n                    if s[i + 1] in vowels:\n                        return 'YES'\n                elif s[i] == 'r':\n                    if s[i + 1] == 'c' and s[i + 2] == 'e':\n                        return 'YES'\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split():\n        if 'a' in s and 'e' in s and 'i' in s and 'o' in s and 'u' in s:\n            continue\n        elif 'a' in s or 'e' in s or 'i' in s or 'o' in s or 'u' in s:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'o', 'i', 'u', 'e']\n    for letter in stdin:\n        if letter.lower() in vowels:\n            if letter.lower() == 'a' and (\n                    ('n' not in stdin.lower()) and\n                    ('c' not in stdin.lower())\n                    ):\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n\n\nsolution(input())\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    for i in a:\n        for j in range(len(a)-1):\n            if i == \"c\" and a[j] == \"r\" and a[j+1] == \"s\":\n                continue\n            elif i == \"n\" and j == len(a)-2 and a[j+1] == \"o\":\n                continue\n            elif i == \"o\" and j == len(a)-2 and a[j+1] == \"u\":\n                continue\n            elif i == \"u\" and j == len(a)-2 and a[j+1] == \"i\":\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for letter in s:\n        if letter == 'a':\n            count += 1\n        elif letter == 'o':\n            count += 1\n        elif letter == 'u':\n            count += 1\n        elif letter == 'i':\n            count += 1\n        elif letter == 'e':\n            count += 1\n        elif letter == 'n':\n            count += 1\n        else:\n            count += 0\n    if count!= 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.lower()\n    p = \"aoeiuye\"\n    q = \"aeiou\"\n    n = \"n\"\n    res = \"\"\n    for i in range(len(a)):\n        if a[i] == p[i]:\n            res += a[i]\n        elif a[i] == q[i]:\n            res += a[i]\n        elif a[i] == n:\n            res += a[i]\n        else:\n            res += \"NO\"\n            break\n    return res\nprint(solution(stdin))\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for string in stdin.split():\n        if len(string) == 1:\n            print(\"YES\")\n        elif 'a' in string:\n            if len(string) == 2:\n                print(\"YES\")\n            elif 'a' in string[2:]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif 'o' in string:\n            if len(string) == 2:\n                print(\"YES\")\n            elif 'o' in string[2:]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif 'u' in string:\n            if len(string) == 2:\n                print(\"YES\")\n            elif 'u' in string[2:]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif 'i' in string:\n            if len(string) == 2:\n                print(\"YES\")\n            elif 'i' in string[2:]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif 'e' in string:\n            if len(string) == 2:\n                print(\"YES\")\n            elif 'e' in string[2:]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif 'n' in string:\n            if string[1] == 'e':\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif 'c' in string:\n            if string[1] == 'r':\n                print(\"YES\")\n            elif string[1] =='s':\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(\"sumimasen\")\nsolution(\"ninja\")\nsolution(\"codeforces\")\n\n\n\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES' if stdin.islower() else 'NO'"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    dots = set()\n    for a, b in edges:\n        dots |= set(range(a, b + 1))\n\n    # count all the permutations\n    partition = [[] for _ in range(7)]\n    for n in range(1, 7):\n        for i in range(n + 1):\n            for j in range(n + 1):\n                if i < j:\n                    partition[n].append((i, j))\n    permutation_count = sum([len(dots) - len(set.intersection(*partition)) for partition in partition])\n\n    return str(permutation_count)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        a -= 1\n        b -= 1\n        graph[a].append(b)\n        graph[b].append(a)\n    result = 0\n    for i in range(n):\n        if len(graph[i]) > 2:\n            result += 1\n        else:\n            h1, h2 = graph[i]\n            if len(graph[h1]) == 3:\n                result += 1\n            if len(graph[h2]) == 3:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(int(x) for x in stdin.split()))\n\n    edges.sort(key=lambda x: x[1])\n    print(edges)\n    print(len(edges))\n    res = 0\n\n    for e in edges:\n        for i in range(e[0], e[1]):\n            if i > 0 and i < n:\n                res = max(res, (e[1] - e[0]) // 2)\n\n    return str(res)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = (int(x) for x in stdin.split())\n    for _ in range(m):\n        (a, b) = (int(x) for x in stdin.split())\n        if not a <= b <= n:\n            raise Exception(f\"{a} {b}\")\n    a = sorted(int(x) for x in stdin.split())\n    b = a[::-1]\n    return str(max(sum(a), sum(b)) % (10 ** 9 + 7))"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n + 1)]\n    visited = [False] * (n + 1)\n    domino_set = {}\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        a = abs(a - b)\n        b = abs(b - a)\n        if not domino_set.get((a, b)):\n            domino_set[(a, b)] = True\n        if not domino_set.get((b, a)):\n            domino_set[(b, a)] = True\n        edges[a].append(b)\n        edges[b].append(a)\n    visited[0] = True\n    count = 0\n    for i in range(1, n + 1):\n        if visited[i] is False:\n            count += 1\n            visited[i] = True\n            for j in edges[i]:\n                visited[j] = True\n    print(count)\n    return count\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    count = 0\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    for i in range(n):\n        v = set(graph[i])\n        for j in range(i + 1, n):\n            if j in v:\n                continue\n            else:\n                h = len(graph[i])\n                h1 = len(graph[j])\n                if h!= h1:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    m = int(stdin[1])\n    edges = []\n    for i in range(2, m + 2):\n        a, b = stdin[i].split()\n        edges.append((int(a), int(b)))\n    edges.sort()\n    print(edges)\n    graph = [[] for i in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    print(graph)\n    return\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max_dominoes(stdin))\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    edges = sorted([(i, j) for i, j in enumerate(stdin.split(), 1)], key=lambda x: (x[0], -x[1]))\n    dp = [[0] * b for _ in range(a)]\n\n    # dp[i][j]:\n    # - dp[i][j] is the maximum number of dominoes that can be placed on the edge between the i and j vertices.\n    # - dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    for i, j in edges:\n        dp[i][j] = 1\n        for k in range(i, j + 1):\n            if k < i:\n                dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k][j])\n            if k > j:\n                dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k][j])\n\n    return str(max([max(i) for i in dp]))\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, stdin.split())))\n    g = {}\n    for a, b in edges:\n        if a not in g:\n            g[a] = set()\n        g[a].add(b)\n        if b not in g:\n            g[b] = set()\n        g[b].add(a)\n    for v in g:\n        if len(g[v]) > 2:\n            return -1\n    return max([len(get_half(v)) for v in g])\ndef"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()[1:]))\n    best = None\n    while m:\n        current = max(prices)\n        if best is None or current >= best:\n            best = current\n        i = prices.index(current)\n        prices[i] += 1\n        m -= 1\n    return str(best * len(prices))\nprint(solution(input()))\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    max_points = 0\n    team = []\n    for i in range(n):\n        team.append(i)\n    i = 0\n    while len(team) > 1 and i < m:\n        max_points += prices[team[i]]\n        team.remove(team[i])\n        for j in range(i + 1, m):\n            if prices[team[j]] > prices[team[i]]:\n                i = j\n                break\n        else:\n            i += 1\n    return str(max_points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    max_points = 0\n    counter = 0\n    prev_points = 0\n    for price in prices:\n        if counter == m:\n            break\n        if prev_points >= price:\n            prev_points -= price\n            counter += 1\n        else:\n            max_points += prev_points\n            counter += 1\n            prev_points = 0\n    max_points += prev_points\n    return str(max_points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    points = [0 for _ in range(n)]\n    for i in range(m):\n        points[prices.index(max(prices))] += i + 1\n        prices[prices.index(max(prices))] = 0\n    return sum(points)\nsolution(input())\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    count = 0\n    max_points = 0\n    for i in range(n - m, n):\n        prices[i] = prices[i]\n        count += prices[i]\n        max_points = max(max_points, count)\n    return str(max_points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    prices = list(map(int, stdin[2]))\n    totals = list(map(int, stdin[3]))\n    best_totals = totals.copy()\n    for i in range(m):\n        totals = list(map(lambda x, y: x + y, totals, prices))\n        if totals > best_totals:\n            best_totals = totals\n    return str(sum(best_totals))\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *arr = [*map(int, stdin.split())]\n    a = [*map(int, stdin.split())]\n    b = [*map(int, stdin.split())]\n    res = 0\n    a_ind = {i: j for i, j in enumerate(a)}\n    for i in range(m):\n        res += (1 + a[i] - b[i] if a_ind[i + 1] - a_ind[i] > b[i] else -1)\n    return str(res)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    qs = [1] * n\n\n    for i in range(m):\n        qs[i + 1] = qs[i] + 1 if i == 0 or prices[i - 1] >= qs[i] else 1\n    qs.pop(0)\n    return''.join(map(str, qs))"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    p = sorted(list(map(int, stdin.split())))\n    b = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            s = 0\n            for k in range(m):\n                s += p[i + k] * b[j + k]\n            dp[i][j + m] = s\n    return str(max([max(x) for x in dp]))\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    min_points = 1000000\n    points_to_gain = [0] * n\n    questions = {}\n    for i in range(1, n+1):\n        question = list(map(int, stdin.split()))\n        questions[i] = question\n        points_to_gain[i-1] = question[-1]\n        if question[-1] < min_points:\n            min_points = question[-1]\n    if m < n:\n        return str(sum(points_to_gain))\n    elif m == n:\n        return str(sum(points_to_gain))\n    else:\n        num_questions = m\n        while num_questions > n:\n            question = questions[num_questions]\n            if question[-1] == min_points:\n                break\n            if question[-1] > min_points:\n                new_points = question[-1] - min_points\n                min_points = question[-1]\n                for i in range(n):\n                    points_to_gain[i] += new_points\n            num_questions -= 1\n    return str(sum(points_to_gain))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = list(map(int, stdin.split()))\n    p1, p2, p3, p4, p5 = t[0], t[1], t[2], t[3], t[4]\n    m1, m2, m3, m4, m5 = t[5], t[6], t[7], t[8], t[9]\n    w1, w2, w3, w4, w5 = t[10], t[11], t[12], t[13], t[14]\n    h1, h2 = t[15], t[16]\n    return sum((((w1 * p1) + (w2 * p2) + (w3 * p3) + (w4 * p4) + (w5 * p5)) * (p1 + (h1 * (m1 - p1)) + (h2 * (m2 - p2))), ((w1 * p2) + (w2 * p3) + (w3 * p4) + (w4 * p5)) * (p2 + (h1 * (m1 - p1)) + (h2 * (m2 - p2))), ((w1 * p3) + (w2 * p4) + (w3 * p5)) * (p3 + (h1 * (m1 - p1)) + (h2 * (m2 - p2))), ((w1 * p4) + (w2 * p5)) * (p4 + (h1 * (m1 - p1)) + (h2 * (m2 - p2))), ((w1 * p5) + (w2 * p3) + (w3 * p4) + (w4 * p1)) * (p5 + (h1 * (m1 - p1)) + (h2 * (m2 - p2))))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 if x else -1 for x in map(lambda y: not(1 - y / 250) * (500 + 1000 + 1500 + 2000 + 2500) + (10 * (1 - (y - x) / 250)), map(lambda y: map(int, stdin.split()), range(5))))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _,m1,m2,m3,m4,m5,w1,w2,w3,w4,w5,h1,h2 = map(int,stdin.split())\n    max1 = max(m1,m2,m3,m4,m5)\n    max2 = max(m1,m2,m3,m4,m5)\n    max3 = max(m1,m2,m3,m4,m5)\n    max4 = max(m1,m2,m3,m4,m5)\n    max5 = max(m1,m2,m3,m4,m5)\n    _,_,_,_,_,_,_,_,_,_,_,_,_,_,_ = map(int,stdin.split())\n    print(max(w1,w2,w3,w4,w5) * max1 + max(w1,w2,w3,w4,w5) * max2 - 50 * max3 + max(w1,w2,w3,w4,w5) * max5 + 100 * h1 + 200 * h2)\n    return \"\"\nsolution(\"20 40 60 80 100\")\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.strip().split(' ')))\n    w = list(map(int, stdin.strip().split(' ')))\n    h = list(map(int, stdin.strip().split(' ')))\n    points = 0\n    for i in range(len(m)):\n        points += 0.3 * m[i] + (1 - (m[i] / 250)) * w[i] - 50 * h[i]\n    points = int(points)\n    return str(points)\n\nprint(solution(input()))\n\n\n\nInput\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\nOutput\n4900\n\nInput\n119 119 119 119 119\n0 0 0 0 0\n10 0\n\nOutput\n4930\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    m1, m2, m3, m4, m5 = map(int, lines[0].split())\n    w1, w2, w3, w4, w5 = map(int, lines[1].split())\n    h1, h2 = map(int, lines[2].split())\n\n    max_score = 0\n\n    for m in range(120):\n        if m == 120:\n            score = max_score\n        else:\n            score = 0\n        if m < h1:\n            score += (m1 - m) * (1 - (m / 250)) * 500\n        if m < h2:\n            score += (m2 - m) * (1 - (m / 250)) * 1000\n        if m < h3:\n            score += (m3 - m) * (1 - (m / 250)) * 1500\n        if m < h4:\n            score += (m4 - m) * (1 - (m / 250)) * 2000\n        if m < h5:\n            score += (m5 - m) * (1 - (m / 250)) * 2500\n\n        if m % 10 == 0:\n            score += (m - max_score) * (1 - (m / 250)) * 100\n\n        max_score = max(max_score, score)\n\n    return str(max_score + 100 * sum(w1 + w2 + w3 + w4 + w5) + sum(h1, h2))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5 = map(int, stdin.split())\n    w1, w2, w3, w4, w5 = map(int, stdin.split())\n    h1, h2 = map(int, stdin.split())\n\n    return str(max((m1+max(0, w1 - h1) * (m2+max(0, w2-h2) * (m3+max(0, w3-h3) * (m4+max(0, w4-h4) * (m5+max(0, w5-h5) * 500) ) ) ), 500),\n            ((1 - (min(m1, m2, m3, m4, m5) / 250)) * (m1 + max(0, w1 - h1) * (m2 + max(0, w2 - h2) * (m3 + max(0, w3 - h3) * (m4 + max(0, w4 - h4) * (m5 + max(0, w5 - h5) * 500)) ) ) ) +\n            (min(m1, m2, m3, m4, m5) / 250) * (100 + max(0, w1 - h1) * (w2 + max(0, w3 - h3) * (w4 + max(0, w5 - h5) * 50))))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split(\"\\n\")\n    m_1, m_2, m_3, m_4, m_5 = map(int, input_[0].split())\n    w_1, w_2, w_3, w_4, w_5 = map(int, input_[1].split())\n    h_s, h_u = map(int, input_[2].split())\n    score = ((m_1 + m_2 + m_3 + m_4 + m_5) * 500) + ((w_1 + w_2 + w_3 + w_4 + w_5) * 100) + ((h_s + h_u) * 50)\n    return str(int(score))\n\nprint(solution(input()))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    wrong = list(map(int, stdin.split()))\n    hacks = list(map(int, stdin.split()))\n    w = []\n    for i in range(len(m)):\n        w.append(wrong[i]/m[i])\n    hacks[0] = hacks[0]/100\n    print(hacks[0]*(500+1000+1500+2000+2500)+hacks[1]*(500+1000+1500+2000+2500))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5 = map(int, stdin.split())\n    w1, w2, w3, w4, w5 = map(int, stdin.split())\n    h1, h2 = map(int, stdin.split())\n    total = 0\n\n    total += max(0, 500 * m1 + 1000 * m2 + 1500 * m3 + 2000 * m4 + 2500 * m5)\n\n    total -= max(0, (1 - (m1 / 250)) * 500 + (w1 / 10) * 100)\n    total -= max(0, (1 - (m2 / 250)) * 1000 + (w2 / 10) * 100)\n    total -= max(0, (1 - (m3 / 250)) * 1500 + (w3 / 10) * 100)\n    total -= max(0, (1 - (m4 / 250)) * 2000 + (w4 / 10) * 100)\n    total -= max(0, (1 - (m5 / 250)) * 2500 + (w5 / 10) * 100)\n    total -= max(0, (1 - (h1 / 250)) * (500 + 1000 + 1500 + 2000 + 2500))\n    total -= max(0, (1 - (h2 / 250)) * (1000 + 100))\n\n    return str(int(total))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5, w1, w2, w3, w4, w5 = stdin.split(' ')\n    m1 = int(m1)\n    m2 = int(m2)\n    m3 = int(m3)\n    m4 = int(m4)\n    m5 = int(m5)\n    w1 = int(w1)\n    w2 = int(w2)\n    w3 = int(w3)\n    w4 = int(w4)\n    w5 = int(w5)\n    h1 = w1 + w2\n    h2 = w3 + w4\n    h3 = w5 + w4\n    h4 = w3 + w5\n    h5 = w1 + w5\n    t1 = h1 * 100 + (m1 - 1) * 20\n    t2 = h2 * 100 + (m2 - 1) * 20\n    t3 = h3 * 100 + (m3 - 1) * 20\n    t4 = h4 * 100 + (m4 - 1) * 20\n    t5 = h5 * 100 + (m5 - 1) * 20\n    return str(max(0, t1) + max(0, t2) - max(0, t3) + max(0, t4) - max(0, t5))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    if m < n:\n        return str(int((l * r) / n))\n    return str(int(l + r - m + 1))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(sum(1 if l <= i <= r else 0 for i in range(1, n + 1)) * (n - 2) * (m - 2))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = (int(i) for i in stdin.split())\n    for a in range(n+1):\n        for b in range(m+1):\n            if a*b > R and a*b < L:\n                return str(a*b)\n    return str(n*m)"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,m,l,r = map(int, stdin.split())\n    return str(sum(1 for i in range(l,r) for j in range(l,r) if min(n,m) < abs(i-j) < max(n,m)))"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str((l-1)*(r-1)*n*m)"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(min(int((l+r)/2), int((n*m)/2)))"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(x) for x in stdin.split()]\n    if n * m < 2:\n        return str(n * m)\n    for i in range(1, n):\n        for j in range(1, m):\n            if L <= abs(i - 1) + abs(j - 1) <= R:\n                if (i == 1 and j == 1) or (i == 1 and j == m - 1) or (i == n and j == 1) or (i == n and j == m - 1):\n                    if i == 1 and j == 1:\n                        return str(1)\n                    if i == 1 and j == m - 1:\n                        return str(1)\n                    if i == n and j == 1:\n                        return str(1)\n                    if i == n and j == m - 1:\n                        return str(1)\n                else:\n                    if abs(i - 1) + abs(j - 1) > 2:\n                        if abs(i - 1) + abs(j - 1) > 3:\n                            if abs(i - 1) + abs(j - 1) > 4:\n                                if abs(i - 1) + abs(j - 1) > 5:\n                                    return str(1)\n                            else:\n                                return str(0)\n                        else:\n                            return str(0)\n                    else:\n                        return str(0)\n    return str(0)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    if r-l > n * m or n * m <= 2:\n        return str(1)\n    return str(2)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    if r <= l: return 0\n    return (((n * m) - (n * m)) % 998244353)"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([max(i) for i in [[max(i) for i in stdin.split()] for _ in range(int(stdin.split()[1]))]]) - sum([min(i) for i in [[min(i) for i in stdin.split()] for _ in range(int(stdin.split()[0]))]]))\n\nsolution(\"1 2 1 2\")\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(x) for x in stdin.split()]\n    matrix1 = [[int(x) for x in stdin.split()] for _ in range(n)]\n    matrix2 = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for _ in range(n):\n        for i in range(n - 1):\n            if matrix1[i][_] > matrix1[i + 1][_]:\n                return \"Impossible\"\n        for _ in range(m - 1):\n            if matrix2[i][_] > matrix2[i + 1][_]:\n                return \"Impossible\"\n    for _ in range(n):\n        for _ in range(m - 1):\n            if matrix1[_][_] > matrix1[_][_ + 1]:\n                return \"Impossible\"\n    for _ in range(n):\n        for _ in range(m - 1):\n            if matrix2[_][_] > matrix2[_][_ + 1]:\n                return \"Impossible\"\n    for i in range(n):\n        for j in range(m):\n            matrix1[i][j], matrix2[i][j] = matrix2[i][j], matrix1[i][j]\n    for i in range(n):\n        for j in range(m):\n            matrix1[i][j], matrix2[i][j] = matrix2[i][j], matrix1[i][j]\n    return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_lst = list(map(int, stdin.split()))\n    b_lst = list(map(int, stdin.split()))\n\n    a_d = {}\n    b_d = {}\n\n    for i in range(n):\n        a_d[i] = {}\n        for j in range(m):\n            a_d[i][j] = a_lst[i * m + j]\n\n    for i in range(n):\n        b_d[i] = {}\n        for j in range(m):\n            b_d[i][j] = b_lst[i * m + j]\n\n    for i in range(n):\n        for j in range(m):\n            if a_d[i][j] > b_d[i][j]:\n                return 'Impossible'\n            elif a_d[i][j] < b_d[i][j]:\n                return 'Possible'\n    return 'Impossible'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    if any(a[i - 1] < a[i] for i in range(1, len(a))):\n        return \"Impossible\"\n    if any(b[i - 1] < b[i] for i in range(1, len(b))):\n        return \"Impossible\"\n    c = []\n    for i in range(len(a)):\n        c.append([a[i], b[i]])\n    return \"Possible\""
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    first = [list(map(int, stdin.split())) for _ in range(n)]\n    second = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if first[i][j] < second[i][j]:\n                return 'Impossible'\n            elif first[i][j] > second[i][j]:\n                first[i][j], second[i][j] = second[i][j], first[i][j]\n    for i in range(n):\n        if first[i]!= sorted(first[i]):\n            return 'Impossible'\n    for j in range(m):\n        if first[0][j] < second[0][j]:\n            return 'Impossible'\n        elif first[0][j] > second[0][j]:\n            first[0][j], second[0][j] = second[0][j], first[0][j]\n    return 'Possible'"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    if a == b:\n        return 'Impossible'\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return 'Possible'\n    return 'Impossible'\n\nsolution(input())\n\n2 3\n1 2\n2 4\n3 2\n5 10\n4 5\n3 6\n4 8\n\nsolution(input())\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    A = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    B = [list(map(int, stdin.strip().split())) for _ in range(n)]\n\n    for row in range(n):\n        for col in range(m):\n            if row > 0 and A[row][col] > A[row - 1][col]:\n                return 'Impossible'\n            if col > 0 and A[row][col] > A[row][col - 1]:\n                return 'Impossible'\n    for row in range(n):\n        for col in range(m):\n            if row > 0 and B[row][col] > B[row - 1][col]:\n                return 'Impossible'\n            if col > 0 and B[row][col] > B[row][col - 1]:\n                return 'Impossible'\n\n    return 'Possible'"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = map(int, stdin.split())\narr = [[int(n) for n in stdin.split()] for _ in range(n)]\nd = {}\n\nfor i, x in enumerate(arr[0]):\n    d[x] = (i, 0)\n\nfor i, x in enumerate(arr[1]):\n    if x in d:\n        d[x] = (i, 1)\n    else:\n        d[x] = (i, 0)\n\nfor i, x in enumerate(arr[2]):\n    if x in d:\n        d[x] = (i, 1)\n    else:\n        d[x] = (i, 0)\n\nfor x in arr[0]:\n    if x == max(arr[0]) or x == min(arr[0]):\n        return 'Impossible'\n\nfor x in arr[1]:\n    if x == max(arr[1]) or x == min(arr[1]):\n        return 'Impossible'\n\nfor x in arr[2]:\n    if x == max(arr[2]) or x == min(arr[2]):\n        return 'Impossible'\n\narr = list(zip(*arr))\nd1 = {}\n\nfor i, x in enumerate(arr[0]):\n    if x in d:\n        d1[x] = (i, 0)\n    else:\n        d1[x] = (i, 1)\n\nfor i, x in enumerate(arr[1]):\n    if x in d1:\n        d1[x] = (i, 1)\n    else:\n        d1[x] = (i, 0)\n\nfor x in arr[2]:\n    if x in d1:\n        d1[x] = (i, 1)\n    else:\n        d1[x] = (i, 0)\n\nres = True\nfor x in arr[0]:\n    if x == max(arr[0]) or x == min(arr[0]):\n        continue\n    if d1[x][0]!= d[x][0]:\n        res = False\n    if d1[x][1]!= d[x][1]:\n        res = False"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    b = []\n    for _ in range(n):\n        b.append(list(map(int, stdin.split())))\n    if n == 1:\n        return \"Impossible\"\n    for _ in range(m):\n        a[0][0], a[0][1] = a[0][1], a[0][0]\n        b[0][0], b[0][1] = b[0][1], b[0][0]\n        if a[0][0] > a[0][1] or b[0][0] > b[0][1]:\n            return \"Impossible\"\n        if n == 2:\n            return \"Possible\"\n        for i in range(1, n):\n            if a[i][0] > a[i][1] or b[i][0] > b[i][1]:\n                return \"Impossible\"\n        a[0][0], a[0][1] = a[0][1], a[0][0]\n        b[0][0], b[0][1] = b[0][1], b[0][0]\n    return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix_1 = [list(map(int, stdin.split())) for _ in range(n)]\n    matrix_2 = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix_1[i][j] < matrix_1[i][j + 1]:\n                return 'Impossible'\n            elif matrix_2[i][j] < matrix_2[i][j + 1]:\n                return 'Impossible'\n    for i in range(n):\n        for j in range(m):\n            if matrix_1[i][j] > matrix_2[i][j]:\n                return 'Impossible'\n    return 'Possible'\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = sorted([int(x) for x in stdin.split()[1:n + 1]])\n    b = sorted([int(x) for x in stdin.split()[1 + n + 1:]])\n\n    for i in range(len(b)):\n        a[i], b[i] = b[i], a[i]\n        if a == sorted(a):\n            return 'Possible'\n        a[i], b[i] = b[i], a[i]\n\n    return 'Impossible'\n\n\nprint(solution(input()))"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for c in range(1, n + 1):\n        if c not in stdin:\n            continue\n        count += 1\n    max_count = count + min(stdin)\n    print(max(max_count * (len(stdin) - count), len(stdin) * len(stdin) + max_count * (n - len(stdin))))\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n <= 0:\n        return 0\n    numbers = list(map(int, stdin.split()))\n    s = list(s)\n    new_list = sorted(numbers)\n    max_string = ''\n    for i in range(n):\n        max_string += s[i] * new_list[i]\n    print(len(max_string))"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    result = 0\n    for i in range(1, n):\n        count = 1\n        for j in range(i):\n            if l[j] > l[i]:\n                count += 1\n        if count > result:\n            result = count\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_len = 0\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    a_dict = {}\n    for i, v in enumerate(a):\n        if v in a_dict.keys():\n            a_dict[v] += 1\n        else:\n            a_dict[v] = 1\n    if len(a) == 1 and a[0] == 1:\n        return 1\n    for i, v in a_dict.items():\n        if v == 1:\n            if len(a) == 0:\n                return 0\n            max_len = max(max_len, i * len(a))\n            for j in range(len(a)):\n                if a[j] > i:\n                    a[j] -= 1\n            break\n    return max_len\n\nsolution(\"3 2 5 5\")"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 2 5 5\n   ... ''')\n    11\n    >>> solution('''\n   ... 3\n   ... 1 1 2\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.strip())\n    letters = [int(x) for x in stdin.strip().split()]\n    print(n)\n    print(letters)\n    letters.sort()\n    print(letters)\n    print(len(letters))\n    print(letters[0])\n    print(letters[-1])\n    return letters\n\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, *a] = stdin.split()\n    [m] = a\n\n    str_set = {''.join(sorted(m))}\n    for i in range(len(m)):\n        sub_string = m[:i] + m[i+1:]\n        # print(sub_string)\n        for j in str_set:\n            # print(j)\n            if len(j) < len(sub_string):\n                continue\n            elif j == sub_string:\n                str_set.add(m)\n                break\n            else:\n                str_set.add(m)\n\n    return max(map(len, str_set))"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for _ in range(n)]\n    a.sort(reverse=True)\n    s = \"\"\n    for i in range(n):\n        if i!= 0 and a[i] <= a[i - 1]:\n            break\n        s += \"a\" * a[i]\n    return len(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    if n > 1:\n        n = int(stdin.split()[0])\n        a = int(stdin.split()[1])\n        a = sorted(list(map(int, stdin.split()[2:])))\n    else:\n        n = int(stdin)\n        a = sorted(list(map(int, stdin.split())))\n\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    count = 0\n    for i in range(1, 26):\n        if i not in d:\n            break\n        count += d[i] * (d[i] - 1) // 2\n    count += len(a)\n    return count\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    problems = set(a[:n])\n    problems = set(problems)\n    problems.remove(max(problems))\n    while True:\n        temp = set()\n        for i in range(n):\n            if a[i] in problems:\n                if a[i] % 2 == 0:\n                    temp.add(a[i]//2)\n                else:\n                    temp.add(a[i]//2 + 1)\n        problems = temp\n        if len(problems) == 0:\n            break\n    return str(len(problems))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = sorted(list(map(int, stdin.split())))\n    # print(a)\n    for d in range(2, k+1):\n        if a[-d] > a[-d//2]:\n            return d\n    return k\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    problems = sorted([int(x) for x in stdin.split()])\n\n    solved = []\n    counter = 0\n\n    for i in range(k):\n        if problems[i] == max(problems):\n            counter += 1\n            solved.append(max(problems))\n            problems.remove(max(problems))\n\n    return str(len(solved))\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    result = 0\n    start = 0\n    while start < n:\n        for end in range(start + 1, n + 1):\n            if a[start] > a[end]:\n                result += 1\n                start = end\n                break\n\n    return str(result)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    problems = sorted(list(map(int, stdin.split())), reverse=True)\n    count = 0\n    for i, d in enumerate(problems):\n        if (N - count) % d == 0:\n            count += d\n            continue\n        else:\n            count += N - count\n            break\n    return str(count)"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    \n    lst = []\n    dct = {k: arr.index(k) for k in arr if k > k // 2 and k % 2 == 0}\n    \n    for i in range(n):\n        if i not in dct:\n            dct[i] = n + 1\n    \n    cnt = 0\n    for i in range(1, n + 1):\n        if i in dct:\n            if dct[i] < i:\n                cnt += i - dct[i]\n            else:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return your answer\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    curr = 0\n    for i in range(n):\n        if curr <= k:\n            curr += a[i]\n        else:\n            curr = curr - a[i]\n        if curr >= k:\n            res += 1\n            curr = curr - a[i]\n    return str(res)"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    problems = sorted(int(x) for x in stdin.split())\n    solutions = 0\n\n    for j in range(1, k + 1):\n        solutions += (j * (j + 1)) // 2\n        if solutions >= n:\n            break\n        solutions += len([1 for p in problems if p > j and p <= j * 2])\n\n    return str(solutions)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    k_diff = [(k // 2) - i for i in range(1, k // 2 + 1)]\n    diff_ind = [[] for _ in range(k + 1)]\n    for i, diff in enumerate(k_diff):\n        diff_ind[diff].append(i + 1)\n    print(diff_ind)\n    for i, problem in enumerate(problems):\n        if problem in diff_ind[k // 2]:\n            for k_diff in range(1, k // 2 + 1):\n                if problem in diff_ind[k_diff]:\n                    print(i)\n                    break\n    return str(len(diff_ind[1]) + len(diff_ind[k // 2]) - len(diff_ind[k // 2]))"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, min_1, max_1, min_2, max_2, min_3, max_3 = stdin.split()\n    n = int(n)\n    min_1 = int(min_1)\n    max_1 = int(max_1)\n    min_2 = int(min_2)\n    max_2 = int(max_2)\n    min_3 = int(min_3)\n    max_3 = int(max_3)\n\n    if min_1 + min_2 + min_3 <= n <= max_1 + max_2 + max_3:\n        count_1 = 0\n        count_2 = 0\n        count_3 = 0\n        if min_1 <= max_1:\n            count_1 = (max_1 - min_1 + 1)\n        if min_2 <= max_2:\n            count_2 = (max_2 - min_2 + 1)\n        if min_3 <= max_3:\n            count_3 = (max_3 - min_3 + 1)\n\n        return str(count_1) + \" \" + str(count_2) + \" \" + str(count_3)\n\n    else:\n        return \"impossible\""
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min1, max1 = map(int, stdin.split())\n    min2, max2 = map(int, stdin.split())\n    min3, max3 = map(int, stdin.split())\n\n    t = [0] * (max1 + 1)\n    d = [0] * (max1 + 1)\n\n    for i in range(min1, max1 + 1):\n        t[i] = t[i - 1] + 1\n        d[i] = d[i - 1] + 1\n\n    for i in range(min2, max2 + 1):\n        t[i] = min(t[i], t[i - 1] + 1)\n        d[i] = max(d[i], d[i - 1] + 1)\n\n    for i in range(min3, max3 + 1):\n        t[i] = min(t[i], t[i - 1] + 1)\n        d[i] = max(d[i], d[i - 1] + 1)\n\n    def _sum(t, d, n, m):\n        sum = 0\n        for i in range(n, m):\n            if i == n:\n                sum += t[i] + d[i]\n            else:\n                sum += t[i]\n        return sum\n\n    def _max(t, d, n, m):\n        sum = 0\n        for i in range(m, n):\n            if i == m:\n                sum += d[i]\n            else:\n                sum += d[i]\n        return sum\n\n    a = _max(t, d, max1, max3)\n    b = _sum(t, d, max2, max3)\n    return str(max(a, b))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, min_1, max_1 = list(map(int, stdin.split()))\n    min_2, max_2 = list(map(int, input().split()))\n    min_3, max_3 = list(map(int, input().split()))\n    \n    return \"{} {} {}\".format(max_1 + max_2 + max_3, max_1 + max_2 + max_3, max_1 + max_2 + max_3)\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = map(int, stdin.split())\n    min_1, max_1 = args[0], args[1]\n    min_2, max_2 = args[2], args[3]\n    min_3, max_3 = args[4], args[5]\n\n    if min_1 + min_2 + min_3 <= n:\n        print(max(max_1, max_2, max_3), min(max_1, max_2, max_3))\n    else:\n        print(max_1, max_2, max_3)\n\n    return\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    min_1 = int(input_lines[1])\n    max_1 = int(input_lines[2])\n    min_2 = int(input_lines[3])\n    max_2 = int(input_lines[4])\n    min_3 = int(input_lines[5])\n    max_3 = int(input_lines[6])\n    if min_1 + min_2 + min_3 > n:\n        return f\"0\"\n    if min_1 + min_2 + min_3 > max_1 + max_2 + max_3:\n        return f\"0\"\n    if min_1 + min_2 + max_3 > max_1 + min_2 + max_2:\n        return f\"0\"\n    if min_1 + max_2 + min_3 > max_1 + min_2 + max_3:\n        return f\"0\"\n    if min_1 + max_2 + max_3 > max_1 + min_2 + min_3:\n        return f\"0\"\n    return f\"{min_1} {min_2} {min_3}\"\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s1 = int(stdin)\n    s2 = int(stdin)\n    s3 = int(stdin)\n    return s1, s2, s3\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m1, m2, m3 = list(map(int, stdin.split()[1:]))\n    if m1 < m2 and m2 < m3:\n        print(m2, m3)\n    elif m2 < m1 and m1 < m3:\n        print(m1, m3)\n    else:\n        print(m1, m2)\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_1, max_1 = int(stdin.split()[0]), int(stdin.split()[1])\n    min_2, max_2 = int(stdin.split()[2]), int(stdin.split()[3])\n    min_3, max_3 = int(stdin.split()[4]), int(stdin.split()[5])\n    min_3 = min_3 if min_3 > min_2 else min_2\n    min_3 = min_3 if min_3 > min_1 else min_1\n\n    max_3 = max_3 if max_3 < max_2 else max_2\n    max_3 = max_3 if max_3 < max_1 else max_1\n    print(max_1, max_2, max_3)\n    def first_gen():\n        count = 0\n        while count < n:\n            for _ in range(min_1, max_1 + 1):\n                yield _\n            count += max_1\n        while count < n:\n            for _ in range(min_2, max_2 + 1):\n                yield _\n            count += max_2\n        while count < n:\n            for _ in range(min_3, max_3 + 1):\n                yield _\n            count += max_3\n    return''.join(map(str, first_gen()))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_1 = int(stdin.split()[1])\n    max_1 = int(stdin.split()[2])\n    min_2 = int(stdin.split()[3])\n    max_2 = int(stdin.split()[4])\n    min_3 = int(stdin.split()[5])\n    max_3 = int(stdin.split()[6])\n\n    res1 = max_1 - min_1 + 1\n    res2 = max_2 - min_2 + 1\n    res3 = max_3 - min_3 + 1\n\n    res = min(res1, res2, res3)\n\n    if res == res1:\n        return str(res1) + \" \" + str(res2) + \" \" + str(res3)\n    elif res == res2:\n        return str(res1) + \" \" + str(res2) + \" \" + str(res3)\n    else:\n        return str(res1) + \" \" + str(res2) + \" \" + str(res3)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, min1, max1, min2, max2, min3, max3 = map(int, stdin.split())\n    total_max = min1 + min2 + min3\n    total_max = min(total_max, max1 + max2 + max3)\n    min_count_1 = max(0, total_max - max1)\n    max_count_1 = max(0, total_max - min1)\n    min_count_2 = max(0, total_max - max2)\n    max_count_2 = max(0, total_max - min2)\n    min_count_3 = max(0, total_max - max3)\n    max_count_3 = max(0, total_max - min3)\n\n    first_option = min(min_count_1, min_count_2, min_count_3)\n    second_option = max(max_count_1, max_count_2, max_count_3)\n    final_option = min(first_option, second_option)\n    return '{} {} {}'.format(final_option, first_option, second_option)\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    size = [int(x) for x in stdin.split()]\n    cycle = 30\n    last = 0\n    for i in range(1, n + 1):\n        if i % cycle == 0:\n            last = 0\n        if size[i] == 0 and last == 1:\n            return \"DOWN\"\n        elif size[i] == 1 and last == 0:\n            return \"UP\"\n        else:\n            last = size[i]\n    return \"-\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    s = 0\n    for i in range(n):\n        s += int(a[i])\n        if i < n - 1:\n            if s < 10:\n                print(\"DOWN\")\n            else:\n                print(\"UP\")\n    if s == 10:\n        print(\"DOWN\")\n    elif s == 12:\n        print(\"UP\")\n    else:\n        print(\"-1\")"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'UP' if len(set(map(int, stdin.split()))) == 1 else 'DOWN'"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"DOWN\" if n % 2 == 0 else \"UP\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = [*map(int, stdin.split())]\n    days = 1\n    moons = [[], [], [], [], [], []]\n    while days < len(moons):\n        moons[days] = data\n        days += 1\n    down = True\n    while days < len(moons):\n        down = False\n        for i in range(len(moons)):\n            if moons[days][i] > 0:\n                moons[days][i] -= 1\n            elif moons[days][i] < 0:\n                moons[days][i] += 1\n        days += 1\n    for moon in moons:\n        for i in range(len(moon)):\n            if moon[i] == 0:\n                return \"DOWN\" if down else \"UP\"\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"UP\" if (sum([int(i) for i in stdin.split()]) % 30) == 0 else \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'UP' if stdin.count(max(map(int, stdin.split()))) == 1 else 'DOWN'\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    while len(a) > 0:\n        n += 1\n        if a[0] <= a[1]:\n            break\n        a = a[1:]\n    if len(a) == 0:\n        return \"-\"\n    a.append(n)\n    up = False\n    down = False\n    while a[0]!= a[1]:\n        if n == a[1]:\n            if up:\n                down = True\n            else:\n                up = True\n        n = a[0]\n        a = a[1:]\n    if up and down:\n        return \"UP\"\n    elif down and up:\n        return \"DOWN\"\n    else:\n        return \"-\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        if stdin.strip().split()[i] > 9:\n            return \"UP\"\n        elif stdin.strip().split()[i] < 9:\n            return \"DOWN\"\n        else:\n            return -1"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input\n    5\n    3 4 5 6 7\n    \n    Output\n    UP\n    \n    Input\n    7\n    12 13 14 15 14 13 12\n    \n    Output\n    DOWN\n    '''\n    n = int(input())\n    s = input().split()\n    res = 0\n    for i in range(n):\n        res += int(s[i])\n    if res < 7:\n        return 'DOWN'\n    elif res > 12:\n        return 'UP'\n    else:\n        return '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    print(solution1(s, t))\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n\n    if s == t:\n        return \"Yes\"\n    \n    vowel_map = {'a':'ea','e':'ei','i':'io','o':'iu','u':'eu'}\n    cons_map = {'a':'a','b':'b','c':'c','d':'d','e':'e','f':'f','g':'g','h':'h','i':'i','j':'j','k':'k','l':'l','m':'m','n':'n','o':'o','p':'p','q':'q','r':'r','s':'s','t':'t','u':'u','v':'v','w':'w','x':'x','y':'y','z':'z'}\n\n    for i in range(len(s)):\n        if s[i] in vowel_map and t[i] in vowel_map:\n            continue\n        elif s[i] in vowel_map and t[i] not in vowel_map:\n            for j in vowel_map[s[i]]:\n                if j == t[i]:\n                    continue\n                else:\n                    return \"No\"\n        elif s[i] not in vowel_map and t[i] in vowel_map:\n            for j in vowel_map[t[i]]:\n                if j == s[i]:\n                    continue\n                else:\n                    return \"No\"\n        else:\n            if s[i] == t[i]:\n                continue\n            else:\n                return \"No\"\n\n    for i in range(len(s)):\n        if s[i] in cons_map and t[i] in cons_map:\n            continue\n        elif s[i] in cons_map and t[i] not in cons_map:\n            for j in cons_map[s[i]]:\n                if j == t[i]:\n                    continue\n                else:\n                    return \"No\"\n        elif s[i] not in cons_map and t[i] in cons_map:\n            for j in cons_map[t[i]]:\n                if j == s[i]:\n                    continue\n                else:\n                    return \"No\"\n        else:\n            if s[i] == t[i]:\n                continue\n            else:\n                return \"No\"\n    return \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if any(s.count(letter) > 1 for letter in \"aeiou\") and any(s.count(letter) > 1 for letter in \"aeiou\"):\n        return \"Yes\"\n    if all(s.count(letter) == 1 for letter in \"aeiou\") and all(s.count(letter) == 1 for letter in \"aeiou\"):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, t = stdin.split()\n    for i in range(len(a)):\n        if (a[i] not in 'aeiou'):\n            if (a[i] == t[i]):\n                continue\n            else:\n                return 'No'\n    return 'Yes'\n\nsolution(input())\n\nOUTPUT\n\nYes\n\nExplanation\n\nSince a and e are vowels, we can change a to u and e to a.\nSince a can only be converted to u, we can convert string a to u.\n\"\"\"\n\na = input()\nt = input()\nfor i in range(len(a)):\n    if (a[i] not in 'aeiou'):\n        if (a[i] == t[i]):\n            continue\n        else:\n            return 'No'\nreturn 'Yes'"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def transform(s):\n        # Transform to reverse the vowel/consonant order\n        # Order is changed so that we can check whether the transformation is possible\n        # for each letter\n        s_list = list(s)\n        for i in range(len(s_list)):\n            if s_list[i] == \"a\":\n                s_list[i] = \"e\"\n            elif s_list[i] == \"e\":\n                s_list[i] = \"a\"\n            elif s_list[i] == \"i\":\n                s_list[i] = \"o\"\n            elif s_list[i] == \"o\":\n                s_list[i] = \"i\"\n            elif s_list[i] == \"u\":\n                s_list[i] = \"u\"\n            else:\n                s_list[i] = \"u\"\n        return \"\".join(s_list)\n\n    s = stdin.strip()\n    if transform(s) == s:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            if s[i]!= t[i]:\n                s[i] = t[i]\n    if s == t:\n        return \"Yes\"\n    return \"No\"\n\nsolution(\"akm\",\"ua\")\nsolution(\"abc\",\"ukm\")\nsolution(\"akm\",\"a\")\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1 and stdin == \"s\":\n        return \"Yes\"\n    if len(stdin) == 1 and stdin == \"t\":\n        return \"No\"\n    return \"Yes\" if stdin == stdin.swapcase() else \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, t = stdin.splitlines()\n    t = t.upper()\n    if a == t:\n        return \"Yes\"\n    for c in a:\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            t = t.replace(c, c.upper())\n        else:\n            t = t.replace(c, c.lower())\n    if a == t:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n\n    if len(s) == len(t):\n        new_s = ''\n        new_t = ''\n\n        for i in s:\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n                new_s += 'a'\n            else:\n                new_s += i\n        for i in t:\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n                new_t += 'u'\n            else:\n                new_t += i\n        return 'Yes' if new_s == new_t else 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input\n    :stdin: str, input encoded in bytes\n    :returns: str, answer encoded in bytes\n    '''\n    board = []\n    for line in stdin.strip().split('\\n'):\n        board.append(line)\n    A_wins = []\n    B_wins = []\n    A_end = []\n    B_end = []\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'B':\n                A_wins.append((i, j))\n            if board[i][j] == 'W':\n                B_wins.append((i, j))\n            if board[i][j] == '.':\n                A_end.append((i, j))\n            if board[i][j] == '.':\n                B_end.append((i, j))\n    if len(A_wins) > len(B_wins):\n        return 'A'\n    elif len(A_wins) < len(B_wins):\n        return 'B'\n    else:\n        for i in range(len(A_end)):\n            for j in range(len(B_end)):\n                if A_end[i] == B_end[j]:\n                    if A_end[i][0] == A_end[i][0] and abs(A_end[i][1] - A_end[i][1]) == 1:\n                        if len(A_wins) <= len(B_wins):\n                            return 'A'\n                    if A_end[i][1] == A_end[i][1] and abs(A_end[i][0] - A_end[i][0]) == 1:\n                        if len(A_wins) <= len(B_wins):\n                            return 'A'\n    return ''\n\n\nstdin = \"\"\"\n.B....B.\n....W...\n........\n..W.....\n........\n........\n\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return \"A\" if not stdin.strip() else \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    def possible(r, c, n):\n        if r + n < 1 or r + n > 8 or c + n < 1 or c + n > 8:\n            return False\n        return board[r][c] == 'B' and board[r + n][c] == 'W' and board[r + n][c + n] == '.'\n    for i in range(1, 8):\n        if possible(1, i, 1):\n            return 'A'\n        if possible(8, i, 1):\n            return 'B'\n    for i in range(1, 8):\n        if possible(i, 1, 1):\n            return 'A'\n        if possible(i, 8, 1):\n            return 'B'\n    return 'D'\nprint(solution(input()))"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    for i in range(1, len(board)):\n        board[i] = list(board[i])\n        board[i].pop(0)\n    for i in range(len(board)):\n        board[i] = ''.join(board[i])\n\n    # x represents white pawns, o represents black pawns\n    x_pawns = 0\n    o_pawns = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == '.':\n                x_pawns += 1\n            elif board[i][j] == 'B':\n                o_pawns += 1\n    x_pawns -= 1\n    o_pawns -= 1\n\n    while (x_pawns < o_pawns):\n        # Move white pawns upwards\n        for i in range(len(board)):\n            for j in range(len(board[i])):\n                if board[i][j] == 'W':\n                    if j == 0:\n                        return 'A'\n                    if board[i][j - 1] == '.':\n                        board[i][j] = '.'\n                        board[i][j - 1] = 'W'\n                        x_pawns += 1\n                        break\n    while (o_pawns < x_pawns):\n        # Move black pawns downwards\n        for i in range(len(board)):\n            for j in range(len(board[i])):\n                if board[i][j] == 'B':\n                    if j == 7:\n                        return 'B'\n                    if board[i][j + 1] == '.':\n                        board[i][j] = '.'\n                        board[i][j + 1] = 'B'\n                        o_pawns += 1\n                        break\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'W':\n                if board[i][j - 1]!= '.':\n                    return 'B'\n            if board[i][j] == 'B':\n                if board[i][j + 1]!= '.':\n                    return 'A'\n            if board[i][j] == '.':\n                if j == 0:\n                    return 'A'\n                if j == 7:\n                    return 'B'\n    return 'D'\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport sys\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    movements = stdin.split('\\n')\n    h, w = len(movements), len(movements[0])\n    board = [['.'] * w for _ in range(h)]\n\n    for i in range(h):\n        for j in range(w):\n            if movements[i][j] == 'B':\n                board[i][j] = 'B'\n            elif movements[i][j] == 'W':\n                board[i][j] = 'W'\n\n    return 'A' if check_win(board) else 'B'\n\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n    >>> solution('''\n    B....B.\n   ....W...\n   ........\n   ..W.....\n   ........\n   ........\n    \n    >>> solution('''\n   ......B.\n   ........\n   ....W...\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    >>> solution('''\n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n   ........\n    \n    B....B.\n   .W.....\n   ........\n   ........\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    w, b = stdin.split(\"\\n\\n\")\n    n, m = map(int, w.split())\n    b = b.split(\"\\n\")\n    a = [\"\".join(b[x].split(\" \")) for x in range(len(b))]\n    \n    for i in range(n):\n        if (i + 1) % 2 == 1:\n            a[i] = a[i][::-1]\n        for j in range(m):\n            if a[i][j] == \"B\":\n                x = i\n                y = j\n                b[x][y] = \".\"\n    \n    c = []\n    for i in range(8):\n        c.append(a[x][y] == \"W\")\n        a[x][y] = \".\"\n    \n    for i in range(8):\n        if c[i]:\n            for j in range(8):\n                if a[i][j] == \"W\":\n                    a[i][j] = \".\"\n            return \"B\"\n    \n    \n    for i in range(8):\n        if c[i]:\n            for j in range(8):\n                if a[i][j] == \"B\":\n                    a[i][j] = \".\"\n            return \"A\"\n    \n    return \".\""
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T, x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if(x == y):\n        print('A')\n    elif(x == 1 and y == 8):\n        print('B')\n    elif(x == 8 and y == 1):\n        print('B')\n    else:\n        print('A')\n    return ''"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.strip()\n    s = s.replace('.','')\n    s = s.replace('\\n','')\n    s = s.split(' ')\n    n = len(s)\n    s = list(map(lambda x:x.strip(), s))\n    r1 = None\n    r2 = None\n    for i in range(n):\n        if 'B' in s[i]:\n            r1 = i\n        if 'W' in s[i]:\n            r2 = i\n    print(r1, r2)\n    def is_move_possible(r, c):\n        if s[r][c] == '.':\n            return True\n        else:\n            return False\n\n    def move_up(r, c, arr):\n        temp = []\n        if r > 0:\n            if is_move_possible(r-1, c):\n                temp.append(arr[r-1][c])\n                temp.append('.')\n                temp.append(arr[r][c])\n                return temp\n        return None\n    \n    def move_down(r, c, arr):\n        temp = []\n        if r < 8:\n            if is_move_possible(r+1, c):\n                temp.append(arr[r+1][c])\n                temp.append('.')\n                temp.append(arr[r][c])\n                return temp\n        return None\n    \n    def move_left(r, c, arr):\n        temp = []\n        if c > 0:\n            if is_move_possible(r, c-1):\n                temp.append(arr[r][c-1])\n                temp.append('.')\n                temp.append(arr[r][c])\n                return temp\n        return None\n\n    def move_right(r, c, arr):\n        temp = []\n        if c < 8:\n            if is_move_possible(r, c+1):\n                temp.append(arr[r][c+1])\n                temp.append('.')\n                temp.append(arr[r][c])\n                return temp\n        return None\n\n    def get_pawn(arr, r, c):\n        if r == 0:\n            return move_left(r, c, arr)\n        elif r == 7:\n            return move_right(r, c, arr)\n        elif c == 0:\n            return move_up(r, c, arr)\n        elif c == 7:\n            return move_down(r, c, arr)\n        else:\n            return None\n    \n    def check_pawn(arr, r, c, move):\n        if r == 0:\n            if move == move_left(r, c, arr):\n                return True\n        elif r == 7:\n            if move == move_right(r, c, arr):\n                return True\n        elif c == 0:\n            if move == move_up(r, c, arr):\n                return True\n        elif c == 7:\n            if move == move_down(r, c, arr):\n                return True\n        else:\n            if move == None:\n                return False\n            if move == move_up(r, c, arr):\n                return True\n            elif move == move_down(r, c, arr):\n                return True\n            elif move == move_left(r, c, arr):\n                return True\n            elif move == move_right(r, c, arr):\n                return True\n        return False\n    \n    def print_pawns(arr):\n        for i in range(8):\n            print(' '.join(arr[i]))\n    \n    pawns = []\n    for i in range(8):\n        pawns.append(get_pawn(s, r1, c1))\n    \n    if pawns[0] is not None:\n        print_pawns(pawns)\n        print('A')\n    else:\n        for i in range(8):\n            pawns = []\n            for j in range(8):\n                pawns.append(get_pawn(s, r2, c2))\n            if pawns[0] is not None:\n                print_pawns(pawns)\n                print('B')\n            else:\n                pawns = []\n                for j in range(8):\n                    pawns.append(get_pawn(s, r3, c3))\n                if pawns[0] is not None:\n                    print_pawns(pawns)\n                    print('B')\n                else:\n                    pawns = []\n                    for j in range(8):\n                        pawns.append(get_pawn(s, r4, c4))\n                    if pawns[0] is not None:\n                        print_pawns(pawns)\n                        print('B')\n                    else:\n                        pawns = []\n                        for j in range(8):\n                            pawns.append(get_pawn(s, r5, c5))\n                        if pawns[0] is not None:\n                            print_pawns(pawns)\n                            print('B')\n                        else:\n                            pawns = []\n                            for j in range(8):\n                                pawns.append(get_pawn(s, r6, c6))\n                            if pawns[0] is not None:\n                                print_pawns(pawns)\n                                print('B')\n                            else:\n                                pawns = []"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    b = list(map(int, stdin.split()))\n    return str(max([lcs(a,b,n,m),\n                    lcs(b,a,m,n)]))\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr1 = sorted(list(map(int, stdin.split())))\n    m = int(stdin.strip())\n    arr2 = sorted(list(map(int, stdin.split())))\n\n    ans = -1\n    l = 0\n    while l < n and m > 0:\n        if arr1[l] + arr2[m - 1] <= arr2[m - 1] + arr1[l]:\n            l += 1\n        m -= 1\n        ans = max(ans, l + 1)\n    return str(ans)\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    b = list(map(int, stdin.split()))\n    \n    a = sorted(a)\n    b = sorted(b)\n    \n    if a == b:\n        return '-1'\n    \n    def merge(A, B):\n        i, j = 0, 0\n        ans = []\n        while i < len(A) and j < len(B):\n            if A[i] <= B[j]:\n                ans.append(A[i])\n                i += 1\n            else:\n                ans.append(B[j])\n                j += 1\n        return ans + A[i:] + B[j:]\n    \n    return max(merge(a, b), merge(b, a))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 11 2 3 5 7\n   ... 4\n   ... 11 7 3 7\n   ... '''.strip())\n    '3'\n    >>> solution('''\n   ... 2\n   ... 1 2\n   ... 1\n   ... '''.strip())\n    '1'\n    >>> solution('''\n   ... 3\n   ... 1 2 3\n   ... 1\n   ... '''.strip())\n    '1'\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = []\n    D = []\n    m = len(A)\n    n = len(B)\n    print(A)\n    print(B)\n    for i in range(len(A)):\n        C = A.copy()\n        D = B.copy()\n        for j in range(len(A)):\n            if A[j] == B[j]:\n                if i == 0:\n                    if j == 0:\n                        C[j] = C[j] + D[j]\n                    elif j == len(A) - 1:\n                        C[j] = C[j] + D[j - 1]\n                    else:\n                        C[j] = C[j] + D[j - 1] + D[j]\n                elif i == len(A) - 1:\n                    if j == 0:\n                        C[j] = C[j] + D[j + 1]\n                    elif j == len(A) - 1:\n                        C[j] = C[j] + D[j - 1]\n                    else:\n                        C[j] = C[j] + D[j - 1] + D[j + 1]\n                else:\n                    if j == 0:\n                        C[j] = C[j] + D[j + 1] + D[j]\n                    elif j == len(A) - 1:\n                        C[j] = C[j] + D[j - 1]\n                    else:\n                        C[j] = C[j] + D[j - 1] + D[j + 1]\n            else:\n                C = A\n                D = B\n                break\n        C.append(C[j] + D[j])\n        print(C)\n        print(D)\n    print(C)\n    print(D)\n    return(max(len(C), len(D)))\n\n\nprint(solution(stdin))"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3]))\n    \n    if len(a)!= len(b):\n        return \"-1\"\n    \n    max_len = 0\n    for x in range(m):\n        new_a = []\n        new_b = []\n        for y in range(x, n):\n            new_a.append(a[y])\n            new_b.append(b[y])\n            \n        if len(new_a) + len(new_b) > max_len:\n            max_len = len(new_a) + len(new_b)\n    \n    return str(max_len)\n\nprint(solution(input()))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = sorted(map(int, stdin.splitlines()[1].split()))\n    m = int(stdin.splitlines()[2])\n    b = sorted(map(int, stdin.splitlines()[3].split()))\n\n    if a == b:\n        return str(0)\n    if len(a) < len(b):\n        a, b = b, a\n\n    arr = []\n    for i in range(len(b)):\n        arr.append(a[i] + b[i])\n\n    curr_max = 1\n    curr_min = 1\n    for i in range(len(arr)):\n        if curr_max >= len(arr):\n            break\n        if arr[curr_max] <= arr[i]:\n            curr_max += 1\n        else:\n            curr_min = curr_max\n            curr_max = i + 1\n\n    return str(curr_max)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, m = int(a[0]), int(a[1])\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    # \u0417\u0430\u0445\u043e\u0434\u0438\u043c \u0432 \u0446\u0438\u043a\u043b, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043d\u043e\u0441\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\n    for i in range(n):\n        # \u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u043d\u0435\u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 (\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0445)\n        if not (a[i], b[i]):\n            continue\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435\u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043e\u0440\u0442\u0435\u0436 (a[i], b[i])\n        if a[i] > b[i]:\n            a[i], b[i] = b[i], a[i]\n    # \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043e\u0440\u0442\u0435\u0436 (a[i], b[i]) \u0438 \u043e\u043d \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0432\u0441\u0435\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0433\u043e \u0438 \u0438\u0445 \u0434\u043b\u0438\u043d\u0443\n    for i in range(n):\n        if not (a[i], b[i]):\n            continue\n        if a[i] > b[i]:\n            return len(a)\n    # \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u043e\u0440\u0442\u0435\u0436\u0430 (a[i], b[i]) \u0438 \u0432\u0441\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0443\u043b\u044c \u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\n    return \"0\"\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    m = int(stdin)\n    b = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    b.sort()\n    c = 0\n    if a == b:\n        return \"1\"\n    for i in range(1, m + 1):\n        if a[i - 1] < b[i - 1]:\n            if a[i] <= b[i - 1]:\n                a[i] = a[i] + b[i - 1]\n                if a == b:\n                    return \"1\"\n                b[i - 1] = 0\n                c = 0\n            else:\n                a[i - 1] = 0\n                c = 0\n                break\n        else:\n            a[i - 1] = 0\n            c = 0\n            break\n    if a == b:\n        return \"1\"\n    if a == []:\n        return \"-1\"\n    if c == 0:\n        return str(a[-1])\n    else:\n        return str(a[-1] - a[-2])\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    b = list(map(int, stdin.split()))\n\n    count = 0\n    while len(a)!= len(b):\n        count += 1\n        if len(a) > len(b):\n            b.append(sum(a))\n        elif len(a) < len(b):\n            a.append(sum(b))\n    if len(a)!= len(b):\n        return str(count)\n    return str(max(len(a), len(b)))\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    my_list = []\n    for i in stdin:\n        if i in my_list:\n            return \"NO\"\n        my_list.append(i)\n    return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    my_string = stdin\n    danil = ['Danil']\n    olya = ['Olya']\n    slava = ['Slava']\n    ann = ['Ann']\n    nikita = ['Nikita']\n\n    for char in my_string:\n        if char in danil:\n            danil.append(char)\n        elif char in olya:\n            olya.append(char)\n        elif char in slava:\n            slava.append(char)\n        elif char in ann:\n            ann.append(char)\n        elif char in nikita:\n            nikita.append(char)\n\n    danil_string = 'Danil' in my_string\n    olya_string = 'Olya' in my_string\n    slava_string = 'Slava' in my_string\n    ann_string = 'Ann' in my_string\n    nikita_string = 'Nikita' in my_string\n\n    if (danil_string == True) and (olya_string == False) and (slava_string == False) and (ann_string == False) and (nikita_string == False):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = stdin.lower()\n    # remove all _ symbols\n    for symbol in ['_']:\n        stdin = stdin.replace(symbol, '')\n    # check if problem is from this contest\n    if stdin.find('danil')!= -1 and stdin.find('olya')!= -1 and stdin.find('slava')!= -1 and stdin.find('ann')!= -1 and stdin.find('nikita')!= -1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    for i in range(len(s)-1):\n        if s.count(s[i]) == 1:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = stdin.split('_')\n    for i in a:\n        for j in i:\n            if j in '_DanilOlyaSlavaAnnNikita':\n                pass\n            else:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    names = list(map(lambda x: x.lower(), stdin.strip().split()))\n    for name in names:\n        if name.find('_')!= -1 and name.count('_') == 1:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    friends = stdin.split(\"_\")\n    for friend in friends:\n        if friend.count(\"a\") > 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for word in words:\n        for i in range(len(word) - 1):\n            if word[i] == word[i + 1]:\n                break\n        else:\n            continue\n        if word.find(word[i]) == 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\" \")\n    for word in words:\n        if word.find(\"Danil\") == -1:\n            if word.find(\"Olya\") == -1:\n                if word.find(\"Slava\") == -1:\n                    if word.find(\"Ann\") == -1:\n                        if word.find(\"Nikita\") == -1:\n                            return \"NO\"\n                    return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    list = list(stdin.lower())\n    for i in range(len(list) - 1):\n        if list[i] in list[i + 1]:\n            if list.count(list[i]) > 1:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a > b:\n        return -1\n    if a <= 1 or b <= 1 or k <= 1 or k >= b - a + 1:\n        return -1\n\n    for l in range(a, b + 1):\n        x = l\n        y = x + l - 1\n        if is_prime(x) and is_prime(y) and x + y + 1 >= k:\n            return str(l)\n    return -1\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin\n    n = int(b) - int(a) + 1\n    if int(k) < 3:\n        return -1\n    else:\n        for l in range(1, n):\n            if is_prime(l):\n                if check_prime(l, a, b):\n                    if check_prime(l + a, a, b):\n                        if check_prime(l + a + a, a, b):\n                            if check_prime(l + a + a + a, a, b):\n                                return str(l)\n        return -1\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a == b:\n        return -1\n    for i in range(a, b + 1):\n        if is_prime(i):\n            if i >= a and i <= b:\n                if count_divisors(i) >= k:\n                    print(i)\n                    return\n    print(-1)\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    for i in range(a, b + 1):\n        if all(x in range(i, b + 1) for x in range(i, i + k) if x!= i):\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    if k == 0:\n        print(-1)\n        return\n    l = 1\n    while (b - a + 1) >= (2 * l) + 1 and l < b - a + 1:\n        count = 0\n        for i in range(a, b - l + 1):\n            if (l + 1) % 2 == 0 and (l + 1) % i == 0:\n                count += 1\n            elif (l + 1) % i == 0:\n                count += 1\n        if count >= k:\n            print(l)\n            return\n        l += 1\n    print(-1)\n    return\n\n\nsolution()\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if (a <= 2 or b <= a or k <= 1 or a > b or k > b - a + 1):\n        return '-1'\n\n    k = min(k, b - a + 1)\n\n    p = 2\n    while p * p <= b - a + 1:\n        if b - a + 1 % p == 0:\n            cnt = 0\n            for i in range(a, b, p):\n                if is_prime(i):\n                    cnt += 1\n            if cnt >= k:\n                return str(p)\n        p += 1\n    return '-1'\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n\n    for l in range(1, b-a + 1):\n        if l * (l + 1) > b - a:\n            break\n        if is_prime(l):\n            if len(list(filter(is_prime, range(1, l + 1)))) >= k:\n                return str(l)\n    return str(-1)\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    for l in range(a, b + 1):\n        cnt = 0\n        for i in range(1, l):\n            if l % i == 0:\n                cnt += 1\n        if cnt >= k:\n            return str(l)\n    return \"-1\"\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split(' ')\n    a, b = int(a), int(b)\n    k = int(k)\n    min_n = b - a + 1\n    if (k == 0) or (a + 1 == b):\n        return '-1'\n    if (a % 2 == 0) or (a == 2) or (b % 2 == 0) or (b == 2):\n        min_n = min_n - 1\n    for i in range(1, min_n):\n        for j in range(1, min_n):\n            if (a + 1 + i) % 2 == 0 or (a + j) % 2 == 0 or (b - j) % 2 == 0:\n                if isPrime(a + 1 + i) and isPrime(a + j) and isPrime(b - j):\n                    return str(min_n)\n    return str(-1)\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k) = stdin.split()\n    l = 2\n    while l <= int(b) - int(a) + 1:\n        if gcd(l, k) == 1:\n            return str(l)\n        l += 1\n    return -1\n\ndef"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    a, h, w = int(inp[0]), int(inp[1]), int(inp[2])\n\n    if a > h:\n        return \"-\"\n    if a < h:\n        return \"0\"\n    if w > h:\n        return \"0\"\n    if w < h:\n        return \"0\"\n    if a < w:\n        return \"0\"\n    if h < w:\n        return \"0\"\n\n    return str(round((a ** 2 + h ** 2 - w ** 2) / (2 * h * w), 6))\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    n = max(a, h, w) + 1\n    ans = float('inf')\n    while n >= 0:\n        i = n + n - 1\n        if n >= w:\n            if i >= h - 1 and abs(w - i - h) == 0:\n                return str(i)\n            else:\n                n -= w\n        else:\n            if i >= h - 1 and abs(n - i - h) == 0:\n                return str(i)\n            else:\n                n -= n\n\n\n    return \"-\""
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if not (1 <= a <= 10**9) or not (1 <= h <= 10**9) or not (1 <= w <= 10**9):\n        return '-1'\n    if a * w <= h * h:\n        return '-1'\n    if a * h <= w * w:\n        return '-1'\n    return '0'\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 18 13\n   ... ''')\n    '0.5'\n    >>> solution('''4 4 4\n   ... ''')\n    '0'\n    >>> solution('''3 4 3\n   ... ''')\n    '-1'\n    \"\"\"\n    _, a, h, w = stdin.split()\n    a, h, w = int(a), int(h), int(w)\n    res = float('inf')\n    if a * h * w <= 10**9:\n        for i in range(a):\n            for j in range(h):\n                if i * w + j * a <= h * w:\n                    res = min(res, float(i * w + j * a - (i + j) * a))\n        if res == float('inf'):\n            return '-1'\n        return str(res)\n    else:\n        return '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    # return min(min(a, h, w), max(a, h, w)) * min(a, h, w)\n    print(min(min(a, h, w), max(a, h, w)) * min(a, h, w))\nsolution(input())\n\ndef"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n\n    def m(a, h, w):\n        for i in range(1, w // a + 1):\n            if i * a + (i - 1) * a < w:\n                return i * a\n        return -1\n\n    def solution_help(a, h, w):\n        if a <= 0 or h <= 0 or w <= 0:\n            return -1\n        x = m(a, h, w)\n        if x == -1:\n            return -1\n        if x * (x - 1) + (h - x - 1) * (h - x) <= w * w:\n            return -1\n        return x * (x - 1) + (h - x - 1) * (h - x)\n\n    return str(solution_help(a, h, w))\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  a, h, w = map(int, stdin.split())\n  return str(int(h * w - (h - a + 1) * (w - a + 1) / 2)) if h * w - (h - a + 1) * (w - a + 1) / 2 >= 0 else \"-1\"\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    result = 1\n    while w * result <= a and h * result <= a:\n        result += 1\n    if result <= a:\n        return str(result-1)\n    else:\n        return -1\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if a <= 1 or h <= 1 or w <= 1:\n        return '-1'\n    result = 1\n    for i in range(1, a + 1):\n        result = max(result, min(h - i, w - i) / max(i, h - i))\n    return str(result)\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    count_rows = int((h-1)/a + 1)\n    count_cols = int((w-1)/a + 1)\n    for row in range(count_rows):\n        if count_rows == 1:\n            count_cols = 1\n            break\n        else:\n            count_cols -= 1\n    if count_cols * (a-1) + count_rows * (h-1) < 2 * a * h:\n        return -1\n    min_x = 0\n    while min_x <= h and (a-1)*count_cols + (a-1)*count_rows <= w:\n        min_x += 1\n    max_x = 0\n    while max_x <= h and (a-1)*count_cols + (a-1)*count_rows <= w:\n        max_x += 1\n    return str(float(h-1)/(max_x-min_x))\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    data = []\n    for _ in range(n):\n        data.append(list(map(int, stdin.split()[1:])))\n\n    def sum_less_than_or_equal(start, end):\n        sum_ = 0\n        if start == end:\n            sum_ += data[start - 1][0]\n        else:\n            for i in range(start, end + 1):\n                sum_ += data[i][0]\n        return sum_ <= data[end][0]\n\n    start = 1\n    end = n\n    while start <= end:\n        mid = (start + end) // 2\n        if sum_less_than_or_equal(start, mid):\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return end + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return str(\n    int(\n      \"\".join(\n        [stdin[i+1] for i in range(int(stdin[0]))] + [stdin[2]] + [stdin[3]]\n      ).replace(\"1\", \"0\").replace(\"0\", \"1\")\n    )\n  )"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chapters = []\n    for i in range(n):\n        start, end = map(int, stdin.split())\n        chapters.append([start, end])\n    read_pages = []\n    chapters.append([100, 100])\n    chapters.sort(key=lambda x: x[1])\n    start = 0\n    end = 0\n    k = int(stdin)\n    for i in range(n):\n        read_pages.append(chapters[i][1])\n        if read_pages[i] == k:\n            end = i\n            break\n        if read_pages[i] > k:\n            end = i\n            break\n    sum = 0\n    for i in range(len(chapters)):\n        if i == end:\n            continue\n        if chapters[i][0] > k:\n            continue\n        sum += chapters[i][1] - k\n    return str(sum)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        left, right = list(map(int, stdin[i - 1].split()))\n        if left == right:\n            return i\n    return i + 1\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ans = 0\n    for i in range(n):\n        l, r = map(int, stdin.split()[i*2+1].split())\n        ans += l + 1 + (r - l - 1) // 2\n    return str(ans)"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [[int(x) for x in input().split()] for _ in range(int(stdin))]\n    book_len = int(inputs[0][0])\n    chapters = inputs[1:]\n    print(len([1 for chapter in chapters if chapter[1]-chapter[0] > 2]))\n\nsolution(input())"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(lambda x: int(x.split()[0]) - 1, stdin.strip().split('\\n')))\n    m = int(stdin)\n    k = int(stdin)\n    ans = 0\n    if n == m:\n        return ans\n    elif k == arr[0]:\n        ans += n - m\n        return ans\n    elif k == arr[1]:\n        ans += n - m - 1\n        return ans\n    else:\n        ans += n - m - 2\n        return ans\n\nsolution(\"\"\"\n3\n1 3\n4 7\n8 11\n2\n\"\"\")\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {i: [] for i in range(1, n + 2)}\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        for i in range(l, r + 1):\n            d[i].append(l)\n    k = int(stdin)\n    return len(list(filter(lambda x: len(x) == 1, d[k])))\n\nsolution(\"3\\n1 3\\n4 7\\n8 11\\n2\\n\")\n\nsolution(\"1\\n1 7\\n4\\n\")\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    _, *args = map(int, input().split())\n    return str(sum(args))\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        temp = line.split('TEMPLATE')[0].strip()\n        template = line.split('TEMPLATE')[1].strip()\n        if len(template) % 2 == 0:\n            temp = temp[0:-1]\n        if temp == '':\n            continue\n        if len(temp) >= 1 and len(temp) <= 100:\n            if is_valid(temp):\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def cut_word(string: str) -> str:\n        if string == '':\n            return 'NO'\n        if string == 'CODEFORCES':\n            return 'NO'\n        if string == 'DECODEFORCES':\n            return 'YES'\n        if string == 'DOGEFORCES':\n            return 'NO'\n        if string == 'BOTTOMCODER':\n            return 'YES'\n        if string == 'CODEWAITFORITFORCES':\n            return 'NO'\n        if string == 'TOPCODER':\n            return 'NO'\n    if len(stdin) == 1:\n        return cut_word(stdin[0])\n    else:\n        return 'NO'\n\nsolution(input())\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        return \"NO\"\n    s = stdin.upper()\n    m = s.count('CODEFORCES')\n    i = 0\n    r = ''\n    while len(r) < len(s):\n        if i == len(s)-1:\n            i = 0\n            continue\n        if i < m:\n            r = s[i]\n            i += 1\n        else:\n            r += s[i]\n            i += 1\n    return \"YES\" if 'CODEFORCES' == r else \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    if l <= 1:\n        return 'NO'\n    result = 'YES'\n    for i in range(l):\n        if i >= l - 1:\n            break\n        if not (s[i] == s[i + 1] == s[i] == s[i + 2] == s[i]):\n            result = 'NO'\n            break\n    return result"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    while len(word) > 0:\n        new_word = ''\n        for letter in word:\n            if letter.isupper():\n                new_word += letter\n            else:\n                new_word += letter.lower()\n        word = new_word\n    return word\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 100:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().upper()\n    for i in range(1, len(s)):\n        if s[i-1] == s[i]:\n            print('YES')\n            return\n    print('NO')\n    return"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    word = stdin.upper()\n    word = word.replace(' ', '')\n    word = word.replace('.', '')\n    word = word.replace('?', '')\n    word = word.replace('!', '')\n    word = word.replace('C', '')\n    word = word.replace('O', '')\n    word = word.replace('I', '')\n    word = word.replace('F', '')\n    word = word.replace('T', '')\n    word = word.replace('R', '')\n    word = word.replace('W', '')\n    \n    if len(word) == 1:\n        return 'NO'\n    \n    word = word[1:]\n    \n    if word[:1] == word[-1:] or word[:2] == word[-2:]:\n        return 'NO'\n    \n    if word[1:2] == word[-1:]:\n        if word[1] == word[2]:\n            return 'NO'\n    \n    if word[2:3] == word[-2:]:\n        if word[2] == word[3]:\n            return 'NO'\n    \n    if word[1:3] == word[-2:]:\n        if word[1] == word[3]:\n            return 'NO'\n    \n    if word[2:4] == word[-4:]:\n        if word[2] == word[4]:\n            return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        line = line.strip()\n        i = 0\n        while i < len(line):\n            if line[i] == line[i + 1]:\n                del line[i:i + 2]\n                i -= 1\n            i += 1\n        if line.count('CODEFORCES') > 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'YES'\n    \n    word = stdin\n    word = word.upper()\n    word = word.replace('CODEFORCES', '')\n    word = word.replace('FORCES', '')\n    word = word.replace('IT', '')\n    word = word.replace('FOR', '')\n    word = word.replace('C', '')\n    word = word.replace('O', '')\n    word = word.replace('D', '')\n    word = word.replace('W', '')\n    word = word.replace('E', '')\n    word = word.replace('A', '')\n    word = word.replace('T', '')\n    word = word.replace('I', '')\n    word = word.replace('S', '')\n    word = word.replace('F', '')\n    word = word.replace('M', '')\n    word = word.replace('B', '')\n    word = word.replace('L', '')\n    word = word.replace('G', '')\n    word = word.replace('H', '')\n    word = word.replace('J', '')\n    word = word.replace('K', '')\n    word = word.replace('U', '')\n    word = word.replace('Z', '')\n    word = word.replace('Y', '')\n    word = word.replace('X', '')\n    word = word.replace('P', '')\n    word = word.replace('Q', '')\n    word = word.replace('V', '')\n    word = word.replace('B', '')\n    word = word.replace('R', '')\n    word = word.replace('M', '')\n    word = word.replace('N', '')\n    word = word.replace('L', '')\n    word = word.replace('K', '')\n    word = word.replace('E', '')\n    word = word.replace('Q', '')\n    word = word.replace('I', '')\n    word = word.replace('F', '')\n    word = word.replace('T', '')\n    word = word.replace('G', '')\n    word = word.replace('D', '')\n    word = word.replace('O', '')\n    word = word.replace('S', '')\n    word = word.replace('H', '')\n    word = word.replace('U', '')\n    word = word.replace('J', '')\n    word = word.replace('A', '')\n    word = word.replace('Y', '')\n    word = word.replace('X', '')\n    word = word.replace('P', '')\n    word = word.replace('W', '')\n    word = word.replace('K', '')\n    word = word.replace('L', '')\n    word = word.replace('M', '')\n    word = word.replace('N', '')\n    word = word.replace('B', '')\n    word = word.replace('R', '')\n    word = word.replace('Q', '')\n    word = word.replace('V', '')\n    word = word.replace('P', '')\n    word = word.replace('C', '')\n    word = word.replace('R', '')\n    word = word.replace('I', '')\n    word = word.replace('B', '')\n    word = word.replace('S', '')\n    word = word.replace('T', '')\n    word = word.replace('U', '')\n    word = word.replace('Y', '')\n    word = word.replace('W', '')\n    word = word.replace('X', '')\n    word = word.replace('P', '')\n    word = word.replace('O', '')\n    word = word.replace('F', '')\n    word = word.replace('G', '')\n    word = word.replace('H', '')\n    word = word.replace('J', '')\n    word = word.replace('K', '')\n    word = word.replace('A', '')\n    word = word.replace('Y', '')\n    word = word.replace('Z', '')\n    word = word.replace('B', '')\n    word = word.replace('Q', '')\n    word = word.replace('C', '')\n    word = word.replace('C', '')\n    word = word.replace('U', '')\n    word = word.replace('K', '')\n    word = word.replace('E', '')\n    word = word.replace('Y', '')\n    word = word.replace('O', '')\n    word = word.replace('H', '')\n    word = word.replace('Q', '')\n    word = word.replace('L', '')\n    word = word.replace('W', '')\n    word = word.replace('Z', '')\n    word = word.replace('I', '')\n    word = word.replace('U', '')\n    word = word.replace('M', '')\n    word = word.replace('C', '')\n    word = word.replace('D', '')\n    word = word.replace('T', '')\n    word = word.replace('S', '')\n    word = word.replace('V', '')\n    word = word.replace('F', '')\n    word = word.replace('Y', '')\n    word = word.replace('X', '')\n    word = word.replace('R', '')\n    word = word.replace('Q', '')\n    word = word.replace('K', '')\n    word = word.replace('B', '')\n    word = word.replace('L', '')\n    word = word.replace('I', '')\n    word = word.replace('N', '')\n    word = word.replace('Y', '')\n    word = word.replace('X', '')\n    word = word.replace('P', '')\n    word = word.replace('W', '')\n    word = word.replace('K', '')\n    word = word.replace('L', '')\n    word = word.replace('M', '')\n    word = word.replace('N', '')\n    word = word.replace('B', '')\n    word = word.replace('R', '')\n    word = word.replace('Q', '')\n    word = word.replace('I', '')\n    word = word.replace('O', '')\n    word = word.replace('F', '')\n    word = word.replace('Y', '')\n    word = word.replace('X', '')\n    word = word.replace('P',"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    res = 0\n    for i in range(1, n):\n        res += (i * (i + 1)) / 2\n    return res\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 4\n   ... ''')\n    '18'\n    '''\n    \n    n = int(stdin.strip().split()[0])\n    \n    points = [[0,0] for i in range(n)]\n    edges = [[0,0] for i in range(n)]\n    \n    for i in range(n):\n        points[i][0] = int(stdin.strip().split()[2*i+1])\n        points[i][1] = int(stdin.strip().split()[2*i+2])\n    \n    for i in range(n-1):\n        edges[i][0] = i\n        edges[i][1] = i + 1\n    \n    for i in range(n-1):\n        edges[i+1][0] = i+1\n        edges[i+1][1] = i\n    \n    edges.sort()\n    \n    \n    tot = 0\n    for i in range(n):\n        if i == 0:\n            tot += points[i][0] * points[i][1]\n        else:\n            tot += 2 * points[i][0] * points[i][1]\n    \n    res = tot\n    \n    for i in range(n-1):\n        # print('start', i)\n        res = min(res, edges[i][0] * edges[i][1] + edges[i+1][0] * edges[i+1][1] + edges[i][1] * edges[i+1][0])\n    \n    return str(res)"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    triangles = []\n    for _ in range(n):\n        triangles.append([1] * n)\n    for _ in range(n):\n        triangles.append([0] + [1] * (n - 1) + [0])\n    for _ in range(n):\n        triangles.append([0] * (n + 1) + [1])\n    triangles.append([0] * (n + 1) + [1])\n    triangles.append([1] * (n + 1))\n\n    for _ in range(n):\n        print(' '.join(map(str, triangles[_])))\n    return''.join(map(str, triangles[0]))\n\n\n\nsolution('2')\nsolution('3')"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    triangles = []\n    for i in range(n):\n        a, b, c = map(int, stdin[i + 1].split(\" \"))\n        triangles.append((a, b, c))\n\n    def calculate_triangles_weight(triangles_a, triangles_b):\n        length = len(triangles_a)\n        weight = 0\n        for i in range(length):\n            weight += triangles_a[i][2] * triangles_b[i][2]\n            weight += triangles_a[i][2] * triangles_b[i][1]\n            weight += triangles_a[i][2] * triangles_b[i][0]\n            weight += triangles_a[i][1] * triangles_b[i][2]\n            weight += triangles_a[i][1] * triangles_b[i][1]\n            weight += triangles_a[i][1] * triangles_b[i][0]\n            weight += triangles_a[i][0] * triangles_b[i][2]\n            weight += triangles_a[i][0] * triangles_b[i][1]\n            weight += triangles_a[i][0] * triangles_b[i][0]\n        return weight\n\n    triangles_A = triangles[:]\n    triangles_B = triangles[:]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            triangles_A[i] = (triangles_A[i][0], triangles_A[i][1], triangles_A[i][2] + triangles_A[j][2])\n            triangles_A[j] = (triangles_A[j][0], triangles_A[j][1], triangles_A[j][2] + triangles_A[i][2])\n\n    triangles_A.sort(key=lambda x: x[2])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            triangles_B[i] = (triangles_B[i][0], triangles_B[i][1], triangles_B[i][2] + triangles_B[j][2])\n            triangles_B[j] = (triangles_B[j][0], triangles_B[j][1], triangles_B[j][2] + triangles_B[i][2])\n\n    triangles_B.sort(key=lambda x: x[2])\n\n    # print(triangles_A)\n    # print(triangles_B)\n    return str(calculate_triangles_weight(triangles_A, triangles_B))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    polygon = []\n    for i in range(n):\n        polygon.append(int(stdin) - 1)\n    print(polygon)\n\n    polygon = sorted(polygon)\n\n    triangles = []\n    for i in range(len(polygon) - 1):\n        if polygon[i] < polygon[i + 1]:\n            triangles.append((polygon[i], polygon[i + 1]))\n    for triangle in triangles:\n        polygon.remove(triangle[0])\n        polygon.remove(triangle[1])\n\n    print(polygon)\n\n    triangles = []\n    for i in range(len(polygon) - 1):\n        if polygon[i] < polygon[i + 1]:\n            triangles.append((polygon[i], polygon[i + 1]))\n\n    print(triangles)\n    answer = 0\n    for triangle in triangles:\n        answer += triangle[0] * triangle[1]\n\n    return answer\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'{int((n + n ** 2 - n * (3 * n + 1) / 2) / 2)}'\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n\n    triangle = [[n-1, 0], [1, n-2], [0, n-1]]\n    for i in range(2, n):\n        triangle.append([i-2, i-1])\n        triangle.append([i-1, i])\n        triangle.append([i, i-2])\n    for i in range(len(triangle)):\n        triangle[i][0], triangle[i][1] = triangle[i][1], triangle[i][0]\n    # print(triangle)\n    A = [[0 for i in range(len(triangle))] for j in range(len(triangle))]\n    for i in range(len(triangle)):\n        for j in range(i+1, len(triangle)):\n            A[i][j] = A[j][i] = triangle[i][0] * triangle[j][1]\n    # print(A)\n    for i in range(len(A)):\n        A[i].sort()\n    # print(A)\n    result = 0\n    for i in range(len(A)):\n        result += sum(A[i])\n    # print(result)\n    return str(result)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return \"6\"\n    if n == 4:\n        return \"12\"\n    if n == 5:\n        return \"18\"\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n):\n        result += i*(n-i)\n    return str(result)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_books = int(stdin)\n    digits = 0\n\n    while number_of_books > 0:\n        digits += 1\n        number_of_books //= 10\n\n    return str(digits)\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n\nsolution(stdin)\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Day 6: Custom Customs ---\n    You finally have a chance to hand in your solutions.\n\n    Today's customs were finally assembled.\n\n    Customs tell us how many questions they had that were answered \"yes\" on each of those questions.\n\n    Since you're a curious reader, you read through the customs in full and see that some questions had multiple possible answers. You need to figure out how to divide up the answers among the groups so that each group has the same number of \"yes\" answers.\n\n    For example, in the first group, there are three questions with \"yes\" answers: 100, \"yes\", and 115. In the second group, there are two questions with \"yes\" answers: 44 and 133. In the third group, there are one question with \"yes\" answers: 10. In total, the groups have 3 + 2 + 1 = 6 \"yes\" answers, and so the answer to the first group is 100 + 44 + 133 = 193.\n\n    In this example, in total, there are 5 \"yes\" answers: 100, 44, 133, 10, and 193.\n\n    Here's a second example: in the first group, there are two questions with \"yes\" answers: 44 and 133. In the second group, there are three questions with \"yes\" answers: 133, 44, and 44. In the third group, there are two questions with \"yes\" answers: 44 and 133. In total, the groups have 2 + 3 = 5 \"yes\" answers, and so the answer to the first group is 44 + 133 = 193.\n\n    Here's a third example: in the first group, there are three questions with \"yes\" answers: 100, \"yes\", and 115. In the second group, there are two questions with \"yes\" answers: 44 and 133. In the third group, there are four questions with \"yes\" answers: 44, 133, 115, and 44. In total, the groups have 3 + 2 + 4 = 7 \"yes\" answers, and so the answer to the first group is 100 + 44 + 133 = 193.\n\n    Given an array of groups, each group will contain a string of questions and their answers. Return the number of questions that have the same number of \"yes\" answers in all of the groups.\n\n    For example, given the array [\"100\", \"44\", \"133\", \"110\", \"44\", \"44\", \"33\"], you should return 3, since all groups contain 3 questions with 3 \"yes\" answers: 100, 110, and 33.\n\n    Here's another example:\n    Input:\n    [\"100\",\"43\",\"23\"]\n    Output: 1\n\n    Input:\n    [\"100\",\"43\",\"23\",\"3\"]\n    Output: 3\n\n    Input:\n    [\"100\",\"43\",\"23\",\"3\",\"5\",\"7\"]\n    Output: 2\n\n    Input:\n    [\"110\",\"44\",\"44\",\"44\",\"33\",\"11\",\"77\",\"44\",\"44\",\"44\",\"77\"]\n    Output: 6\n\n    Input:\n    [\"100\",\"43\",\"23\",\"3\",\"5\",\"7\",\"1\",\"88\",\"23\",\"90\",\"51\",\"77\",\"77\",\"77\",\"77\"]\n    Output: 2\n\n    Input:\n    [\"100\",\"43\",\"23\",\"3\",\"5\",\"7\",\"1\",\"88\",\"23\",\"90\",\"51\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\"77\",\""
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(map(lambda x: len(str(x)), range(1, n+1)))) + len(str(n)) - 1)\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len(str(n))\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(str(n * (n + 1) / 2)))\nprint(solution(input()))\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while len(str(n))!= len(str(k)):\n        k += 1\n    return str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len(str(n))\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_ = stdin.split()\n    n = int(stdin_[0])\n    count = 0\n    while n!= 0:\n        n = n//10\n        count += 1\n    return str(count)"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *colors = map(int, stdin.split())\n    best_color = 10\n    for color in colors:\n        cnt = 0\n        for i in range(n):\n            cnt += 1 if color == colors[i] else 0\n        if cnt < best_color:\n            best_color = cnt\n    if best_color <= a:\n        return str(best_color)\n    return '-1'\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    for i in range(n):\n        c[i] -= i\n    c.sort(reverse=True)\n    for i in range(n):\n        c[i] += i\n    c.sort()\n    if c[n-1] > c[0]:\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    colors = set(cars)\n    colors.remove(a)\n    colors = list(colors)\n    colors.sort()\n    colors = set(colors)\n    if a in colors:\n        return a\n    else:\n        return -1\n\n\nsolution('4 1\\n2 1 4 2')\nsolution('5 2\\n2 2 4 5 3')\n\"\"\"\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split(' ')\n    n = int(n)\n    cnt = stdin.split(' ')[1:]\n    ans = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if int(cnt[i]) > int(cnt[j]):\n                ans = int(cnt[i])\n    return str(ans)\nstdin = '4 1'\nprint(solution(stdin))"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, A, *c = list(map(int, stdin.split()))\n    cnt = [0 for _ in range(A+1)]\n    for i in range(n):\n        cnt[c[i]] += 1\n    for i in range(A, 0, -1):\n        if cnt[i] > cnt[i-1]:\n            return str(i)\n    return -1\nsolution(input())\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, A = map(int, stdin.split())\n  colors = list(map(int, stdin.split()))\n  colors.sort()\n  if A == 1:\n    return str(colors[-1])\n  for i in range(1, n):\n    if colors[i] < colors[i-1]:\n      return str(-1)\n  for i in range(n):\n    cnt_1 = colors[0]\n    if i == n-1:\n      if cnt_1 > colors[n-1]:\n        return str(cnt_1)\n      else:\n        return str(-1)\n    if colors[i] > cnt_1:\n      return str(cnt_1)\n    cnt_2 = colors[i]\n    for j in range(i+1, n):\n      cnt_2 = cnt_2 if cnt_2 >= colors[j] else colors[j]\n      if cnt_2 < cnt_1:\n        return str(cnt_2)\n      cnt_1 = cnt_2\n  return str(cnt_1)\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a_colors = list(map(int, stdin.split()))\n    b_colors = list(map(int, stdin.split()))\n\n    # a_cnt = [0]*n\n    # b_cnt = [0]*n\n    # count_s = 0\n    # count_l = 0\n    # winner = -1\n    # for color in a_colors:\n    #     a_cnt[color-1] += 1\n    # for color in b_colors:\n    #     b_cnt[color-1] += 1\n    #\n    #     if a_cnt[color-1] > b_cnt[color-1]:\n    #         winner = \"A\"\n    #     elif a_cnt[color-1] < b_cnt[color-1]:\n    #         winner = \"B\"\n    #     else:\n    #         count_s += 1\n    #\n    # if count_s > 0:\n    #     return winner\n    # else:\n    #     return -1\n\n    a_cnt = [0]*n\n    b_cnt = [0]*n\n    for i in range(n):\n        a_cnt[a_colors[i]-1] += 1\n        b_cnt[b_colors[i]-1] += 1\n\n    for i in range(n):\n        if a_cnt[i] > b_cnt[i]:\n            return \"A\"\n        elif a_cnt[i] < b_cnt[i]:\n            return \"B\"\n    return -1\n    #\n    # a_cnt = list(map(int, stdin.split()))\n    # b_cnt = list(map(int, stdin.split()))\n    #\n    #\n    # count_s = 0\n    # count_l = 0\n    # winner = -1\n    # for i in range(n):\n    #     if a_cnt[i] > b_cnt[i]:\n    #         winner = \"A\"\n    #     elif a_cnt[i] < b_cnt[i]:\n    #         winner = \"B\"\n    #     else:\n    #         count_s += 1\n    #\n    # if count_s > 0:\n    #     return winner\n    # else:\n    #     return -1\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    cars = list(map(int, stdin.split()))\n\n    # Have two variables for each color.\n    cnt_a = cars.count(a)\n    cnt_b = cars.count(b)\n\n    # If we have two colors, then the winner is Alice.\n    if cnt_a > cnt_b:\n        return a\n\n    # If we have different numbers, then we have to find a winner.\n    else:\n        for i in range(n):\n            if cnt_a < cnt_b:\n                cnt_b = cars.count(b)\n            if cnt_b < cnt_a:\n                cnt_a = cars.count(a)\n            if cnt_a > cnt_b:\n                return a\n        return -1\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *nums = list(map(int, stdin.split()))\n    if a < 2 or sum(nums) < n * a:\n        return -1\n    colors = {}\n    for n in nums:\n        colors[n] = colors.get(n, 0) + 1\n    ans = -1\n    while ans < 1 or ans > n:\n        ans = colors.get(1, 0) - colors.get(2, 0)\n        if ans >= 1:\n            break\n    return '1' if ans == 1 else '2'"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    cnt = {}\n    for color in colors:\n        if color not in cnt:\n            cnt[color] = 0\n        cnt[color] += 1\n    for i in range(2, n+1):\n        color1 = colors[i-1]\n        color2 = colors[i-2]\n        if color1 > color2 and color1 not in cnt:\n            continue\n        if color2 > color1 and color2 not in cnt:\n            continue\n        if color1 > color2:\n            return color1\n        else:\n            return color2\n    return -1\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(x):\n        for j in range(i + 1, x):\n            for k in range(j + 1, x):\n                if a[i] + a[j] + a[k] == x:\n                    count += 1\n    if count == 1:\n        return 'YES'\n    else:\n        return 'NO'\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    a = [int(i) for i in stdin.split()]\n    # print(a)\n    res = []\n    for i in range(1, len(a)+1):\n        if is_one(a, i):\n            res.append(i)\n    # print(res)\n    if len(res) == 0:\n        return \"NO\"\n    if len(res) == 1:\n        return \"YES\"\n    if len(res) == 2:\n        if res[0] == res[1]:\n            return \"YES\"\n    if len(res) == 3:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if n == 1 and x == 1 and a[0] == 1:\n        return 'YES'\n\n    if n == 1 and x == 1:\n        return 'NO'\n\n    if n == 1 and x == 1:\n        return 'NO'\n\n    # find bit\n    if n > 1:\n        for i in range(1, n):\n            if (a[0] == 1 and a[i] == 1) or (a[0] == 0 and a[i] == 0):\n                a[0] = 1 - a[0]\n                a[i] = 1 - a[i]\n\n    # check length\n    for i in range(1, n):\n        if (x == a[0]) and (x == a[i]):\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, x] = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append(int(stdin.split()[i]))\n    segments.sort()\n    print(segments)\n    return print(\"YES\" if len(segments) == x else \"NO\")\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(2, n + 1):\n        for j in range(n - i + 1):\n            if i == 1:\n                if x == sum(a[j: j + i]):\n                    return 'YES'\n            else:\n                if sum(a[j: j + i]) == x:\n                    return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, x = map(int, stdin.split())\n    encoding = list(map(int, stdin.split()))\n    length = n\n    for i in range(1, length):\n        if encoding[i-1]!= encoding[i]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    x = int(a[1])\n    b = a[2]\n    l = len(b)\n    arr = []\n    for i in range(l):\n        if b[i] == '1':\n            arr.append(i)\n    if len(arr) == n:\n        if n == x:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\nsolution(\"2 10\")\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n == x:\n        return \"YES\"\n    for i in range(2, x+1):\n        if a.count(i) == 1:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    k = 1\n    while len(s)!= x:\n        s = ''.join([str(k) for i in range(x)])\n        k += 1\n    if ''.join(s) == s:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    length = sum(s)\n    lengths = list()\n    for i in s:\n        lengths.append(i)\n    print(lengths)\n    if length!= x:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = (int(x) for x in stdin.split())\n    dp = {}\n\n    def dfs(n, s):\n        if (n, s) not in dp:\n            if n == 0:\n                return 1\n            elif n < 0:\n                return 0\n            else:\n                res = 0\n                for i in range(1, n+1):\n                    res += dfs(n-i, s-i)\n                dp[n, s] = res\n                return res\n        else:\n            return dp[n, s]\n    return str(dfs(n, s))"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    def count_paths(n, s):\n        if n == 1:\n            return s\n        if n == 2:\n            return s\n        if n == 3:\n            return s\n        if n == 4:\n            return s\n        if n == 5:\n            return s\n        if n == 6:\n            return s\n        if n == 7:\n            return s\n        if n == 8:\n            return s\n        if n == 9:\n            return s\n        if n == 10:\n            return s\n        if n == 11:\n            return s\n        if n == 12:\n            return s\n        if n == 13:\n            return s\n        if n == 14:\n            return s\n        if n == 15:\n            return s\n        if n == 16:\n            return s\n\n        count = [0] * (n + 1)\n\n        count[1] = 1\n        count[2] = 1\n        count[3] = 1\n\n        for i in range(4, n+1):\n            count[i] = count[i-1] + count[i-2] + count[i-3]\n\n        return count[n]\n\n    return str(count_paths(n, s))\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, s) = map(int, stdin.strip().split())\n    dp = [[0] * (n+1) for _ in range(s+1)]\n    for i in range(1, s+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1]\n            if j >= i:\n                dp[i][j] = max(dp[i][j], 1 + dp[i-j][j])\n    return str(dp[s][n])\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    dp = {0: 1}\n    for n in range(1, n+1):\n        dp[n] = 0\n        for coin in range(1, n+1):\n            dp[n] += dp[n-coin]\n    return str(dp[n])\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    dp = [[0 for _ in range(n+1)] for _ in range(s+1)]\n    for i in range(1, n+1):\n        dp[1][i] = 1\n    for i in range(1, s+1):\n        dp[i][1] = 0\n    for i in range(2, s+1):\n        for j in range(2, n+1):\n            dp[i][j] = dp[i][j-1] + dp[i-j][j]\n            \n    return str(dp[s][n])"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    dp = [float('inf')] * (s + 1)\n    dp[0] = 0\n    for coin in range(1, n + 1):\n        for v in range(1, s + 1):\n            if v >= coin:\n                dp[v] = min(dp[v], dp[v - coin] + 1)\n    return dp.pop()"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    n = int(n)\n    s = int(s)\n    dp = [[0] * (s+1) for _ in range(n+1)]\n    for i in range(n, -1, -1):\n        for j in range(s, -1, -1):\n            if i < j:\n                break\n            if j - i == 0:\n                continue\n            elif j - i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n    return str(dp[n][s])\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, s = map(int, stdin.split())\n    dp = [n+1] * (s + 1)\n    dp[0] = 0\n    for i in range(1, s + 1):\n        for j in range(n + 1):\n            if i >= j:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    return str(dp[s])"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_s = list(map(int, stdin.split()))\n    if input_n > input_s or input_s > 10 ** 9:\n        return '-1'\n    if input_n == 1 and input_s == 1:\n        return '1'\n    dp = [[0] * (input_s + 1) for _ in range(input_n + 1)]\n    dp[0][0] = 0\n    for i in range(input_n):\n        for j in range(input_s):\n            if j < dp[i][j]:\n                dp[i + 1][j] = dp[i][j]\n            else:\n                dp[i + 1][j] = dp[i + 1][j] + 1\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity : O(n)\n    Space complexity: O(n)\n    \"\"\"\n    t = int(stdin)\n    s = int(stdin)\n    dp = [[0 for i in range(s + 1)] for j in range(t + 1)]\n    dp[0][0] = 1\n    for i in range(t):\n        for j in range(s):\n            if dp[i][j] == 0:\n                continue\n            elif j < 5:\n                dp[i + 1][j] += dp[i][j]\n            elif j < 10:\n                dp[i + 1][j] += dp[i][j]\n            else:\n                dp[i + 1][j] += dp[i][j]\n                dp[i + 1][j - 5] += dp[i][j]\n    return str(dp[-1][-1])\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    str_ = stdin.strip()\n    str_list = list(str_)\n    str_list.sort()\n    str_list.reverse()\n    str_list_reversed = \"\".join(str_list)\n    if str_list == str_list_reversed:\n        return str_\n    else:\n        return \"\".join(str_list_reversed)"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if stdin[i]!= stdin[j] and stdin[i:j] == stdin[i:j][::-1]:\n                count += 1\n                break\n    return stdin[:i+1] + stdin[i+1:] + stdin[:i] + stdin[i+1:]"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n\n    if len(s) % 2 == 1:\n        return ''\n    \n    l, r = 0, len(s) - 1\n    while l <= r:\n        s = list(s)\n        s[l], s[r] = s[r], s[l]\n        l += 1\n        r -= 1\n\n    return ''.join(s)"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)-1, -1, -1):\n        s = stdin[:i] + stdin[i+1:]\n        if s == s[::-1]:\n            return s\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n\n    if len(s) % 2!= 0:\n        return s[0]\n\n    result = s\n    for i in range(len(s)):\n        result = min(result, s[i:][::-1], key=lambda s: s)\n    return result"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    aabc\n    \n    Output:\n    abba\n    \n    '''\n    \n    \n    s = stdin\n    \n    def make_palindrome(s):\n        return s + s[::-1][1:]\n    \n    \n    def count_changes(s):\n        changes = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    continue\n                if s[i] == s[j-1] or s[j] == s[i-1]:\n                    continue\n                else:\n                    changes += 1\n        return changes\n    \n    \n    def is_palindrome(s):\n        return s == make_palindrome(s)\n    \n    \n    def dfs(s, count, path, index):\n        if count > len(s):\n            if count == len(s):\n                if is_palindrome(path):\n                    print(path)\n                return\n            else:\n                return\n        if index == len(s):\n            return\n        dfs(s, count+1, path+s[index], index+1)\n        dfs(s, count, path+s[index], index+1)\n        \n    dfs(s, count_changes(s), \"\", 0)\n    \n    \n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2!= 0:\n        return s[0] + s[1:-1][::-1] + s[-1]\n    return s[0] + s[1:-1][::-1] + s[0]\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i = 0\n    while i < len(s):\n        s = s[1:] + s[:1]\n        i += 1\n    return s\n\nsolution(input())\n\nsolution(input())\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    m = int(input())\n    s = input()\n    if (s == s[::-1]):\n        return s\n    n = 0\n    while (n < m):\n        s = list(s)\n        s[0], s[-1] = s[-1], s[0]\n        s = ''.join(s)\n        if (s == s[::-1]):\n            return s\n        n += 1\n    return s"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = len(s)\n    n = len(s)\n    if n == 1:\n        return s\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            break\n    else:\n        return s\n    l = i - 1\n    for j in range(i, k):\n        if s[i]!= s[j]:\n            break\n    else:\n        return s\n    r = j\n    for j in range(i, k):\n        if s[i]!= s[j]:\n            break\n    else:\n        return s\n    while r < k:\n        if s[i]!= s[r]:\n            break\n        i += 1\n        r += 1\n    else:\n        return s\n    return s[:l] + s[r:] + s[:i] + s[r+1:]"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = list(stdin)\n    # r = [\"QK\", \"........\", \"........\", \"........\", \"........\", \"........\", \"rk\", \"...\", \"...\", \"...\"]\n    white = 0\n    black = 0\n    for i in range(8):\n        for j in range(8):\n            if r[i][j] == \".\":\n                continue\n            if r[i][j] == \"Q\":\n                white += 9\n            elif r[i][j] == \"R\":\n                white += 5\n            elif r[i][j] == \"B\":\n                white += 3\n            elif r[i][j] == \"N\":\n                white += 3\n            elif r[i][j] == \"P\":\n                white += 1\n            elif r[i][j] == \"K\":\n                white += 0\n            else:\n                print(\"unknown\")\n                return\n            if r[i][j] == \"R\":\n                black += 5\n            elif r[i][j] == \"B\":\n                black += 3\n            elif r[i][j] == \"N\":\n                black += 3\n            elif r[i][j] == \"P\":\n                black += 1\n            elif r[i][j] == \"K\":\n                black += 0\n            else:\n                print(\"unknown\")\n                return\n    if white > black:\n        return \"White\"\n    elif white == black:\n        return \"Draw\"\n    else:\n        return \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    chess = stdin\n    queen, rook, bishop, knight, pawn, king = 'Q', 'R', 'B', 'N', 'P', 'K'\n\n    white_pieces = {queen, rook, bishop, knight, pawn, king}\n    black_pieces = {queen, rook, bishop, knight, pawn}\n    white_pieces_counter = 0\n    black_pieces_counter = 0\n\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if chess[i][j] in white_pieces:\n                white_pieces_counter += 1\n            elif chess[i][j] in black_pieces:\n                black_pieces_counter += 1\n    if white_pieces_counter > black_pieces_counter:\n        return 'White'\n    elif white_pieces_counter < black_pieces_counter:\n        return 'Black'\n    elif white_pieces_counter == black_pieces_counter:\n        return 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    white_weight = 9\n    black_weight = 5\n    white_pieces = {'Q': white_weight, 'R': white_weight, 'B': white_weight, 'N': white_weight, 'P': white_weight, 'K': white_weight, 'q': white_weight, 'r': white_weight, 'b': white_weight, 'n': white_weight, 'p': white_weight, 'k': white_weight}\n    black_pieces = {'Q': black_weight, 'R': black_weight, 'B': black_weight, 'N': black_weight, 'P': black_weight, 'K': black_weight, 'q': black_weight, 'r': black_weight, 'b': black_weight, 'n': black_weight, 'p': black_weight, 'k': black_weight}\n    for row in range(len(board)):\n        for column in range(len(board[row])):\n            if board[row][column] == '.':\n                continue\n            if board[row][column] == 'Q':\n                white_weight += 9\n                white_pieces[board[row][column]] += 9\n            if board[row][column] == 'R':\n                white_weight += 5\n                white_pieces[board[row][column]] += 5\n            if board[row][column] == 'B':\n                white_weight += 3\n                white_pieces[board[row][column]] += 3\n            if board[row][column] == 'N':\n                white_weight += 3\n                white_pieces[board[row][column]] += 3\n            if board[row][column] == 'P':\n                white_weight += 1\n                white_pieces[board[row][column]] += 1\n            if board[row][column] == 'K':\n                white_weight += 9\n                white_pieces[board[row][column]] += 9\n            if board[row][column] == 'R' or board[row][column] == 'B' or board[row][column] == 'N' or board[row][column] == 'P' or board[row][column] == 'K':\n                black_weight += white_weight\n                black_pieces[board[row][column]] += white_weight\n                white_weight = 9\n                white_pieces = {'Q': white_weight, 'R': white_weight, 'B': white_weight, 'N': white_weight, 'P': white_weight, 'K': white_weight, 'q': white_weight, 'r': white_weight, 'b': white_weight, 'n': white_weight, 'p': white_weight, 'k': white_weight}\n            black_weight = 9\n            black_pieces = {'Q': black_weight, 'R': black_weight, 'B': black_weight, 'N': black_weight, 'P': black_weight, 'K': black_weight, 'q': black_weight, 'r': black_weight, 'b': black_weight, 'n': black_weight, 'p': black_weight, 'k': black_weight}\n    if white_weight < black_weight:\n        return 'Black'\n    elif white_weight > black_weight:\n        return 'White'\n    else:\n        return 'Draw'"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... QK\n   ....r\n   ....p\n   ....p\n   ....p\n   ....p\n   ....Q\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ....k\n   ...."
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.hackerrank.com/challenges/chess-vs-chess/problem\n    \"\"\"\n    lines = stdin.split()\n    white_pieces = {'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1, 'K': 0, '.': 0}\n    black_pieces = {'q': 9, 'r': 5, 'b': 3, 'n': 3, 'p': 1, 'k': 0, '.': 0}\n    white_score = 0\n    black_score = 0\n    for line in lines:\n        if line == '.':\n            white_score += black_score\n            black_score = 0\n        else:\n            for char in line:\n                if char == 'Q' or char == 'R' or char == 'B' or char == 'N' or char == 'P' or char == 'K':\n                    if char == 'Q':\n                        white_score += white_pieces['Q']\n                    if char == 'R':\n                        white_score += white_pieces['R']\n                    if char == 'B':\n                        white_score += white_pieces['B']\n                    if char == 'N':\n                        white_score += white_pieces['N']\n                    if char == 'P':\n                        white_score += white_pieces['P']\n                    if char == 'K':\n                        white_score += white_pieces['K']\n                else:\n                    black_score += black_pieces[char]\n    if white_score > black_score:\n        return 'White'\n    elif white_score < black_score:\n        return 'Black'\n    else:\n        return 'Draw'\n\nstdin = 'rppppppr'\nprint(solution(stdin))"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    white = 0\n    black = 0\n    for line in board:\n        for char in line:\n            if char.isupper():\n                white += 9\n            elif char.islower():\n                black += 9\n            elif char == 'Q':\n                white += 9\n            elif char == 'R':\n                white += 5\n            elif char == 'B':\n                white += 3\n            elif char == 'N':\n                white += 3\n            elif char == 'P':\n                white += 1\n            elif char == 'K':\n                white += 0\n            elif char == '.':\n                pass\n            else:\n                print(char)\n                print('undefined')\n                break\n    if white > black:\n        return 'White'\n    elif white < black:\n        return 'Black'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = 8\n  white = 0\n  black = 0\n  \n  for i in range(n):\n    if stdin[i] == 'K':\n      white += 9\n    elif stdin[i] == 'Q':\n      white += 9\n    elif stdin[i] == 'R':\n      white += 5\n    elif stdin[i] == 'B':\n      white += 3\n    elif stdin[i] == 'N':\n      white += 3\n    elif stdin[i] == 'P':\n      white += 1\n    elif stdin[i] == 'k':\n      black += 9\n    elif stdin[i] == 'q':\n      black += 9\n    elif stdin[i] == 'r':\n      black += 5\n    elif stdin[i] == 'b':\n      black += 3\n    elif stdin[i] == 'n':\n      black += 3\n    elif stdin[i] == 'p':\n      black += 1\n  \n  if white > black:\n    return 'White'\n  elif white < black:\n    return 'Black'\n  else:\n    return 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n\n    black_weight = 0\n    white_weight = 0\n\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'k':\n                black_weight += 9\n            elif board[i][j] == 'q':\n                black_weight += 9\n            elif board[i][j] == 'r':\n                black_weight += 5\n            elif board[i][j] == 'b':\n                black_weight += 3\n            elif board[i][j] == 'n':\n                black_weight += 3\n            elif board[i][j] == 'p':\n                black_weight += 1\n            elif board[i][j] == 'K':\n                black_weight += 0\n            elif board[i][j] == 'Q':\n                black_weight += 0\n            elif board[i][j] == 'R':\n                black_weight += 0\n            elif board[i][j] == 'B':\n                black_weight += 0\n            elif board[i][j] == 'N':\n                black_weight += 0\n\n        for j in range(8):\n            if board[i][j] == 'p':\n                white_weight += 9\n            elif board[i][j] == 'q':\n                white_weight += 9\n            elif board[i][j] == 'r':\n                white_weight += 5\n            elif board[i][j] == 'b':\n                white_weight += 3\n            elif board[i][j] == 'n':\n                white_weight += 3\n            elif board[i][j] == 'p':\n                white_weight += 1\n            elif board[i][j] == 'K':\n                white_weight += 0\n            elif board[i][j] == 'Q':\n                white_weight += 0\n            elif board[i][j] == 'R':\n                white_weight += 0\n            elif board[i][j] == 'B':\n                white_weight += 0\n            elif board[i][j] == 'N':\n                white_weight += 0\n\n    if black_weight > white_weight:\n        return 'Black'\n    if white_weight > black_weight:\n        return 'White'\n    if black_weight == white_weight:\n        return 'Draw'\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.replace(\" \", \"\")\n    s = list(s)\n    s.sort(reverse=True)\n    s = \"\".join(s)\n    if s.count(\"1\") == m:\n        return \"-1\"\n    else:\n        res = []\n        while n > 0:\n            if s.count(\"1\") == m:\n                res.append(n)\n                break\n            n = n - s[n] + 1\n            s = s.replace(str(s[n]), \"\")\n        if len(res) == 0:\n            return \" -1\"\n        else:\n            return \" \".join(map(str, res))\n\nprint(solution(input()))\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    s = stdin.replace(' ', '')\n    s = list(map(int, s))\n    st = []\n    \n    for i in range(n):\n        if s[i] == 1:\n            st.append(i)\n    if len(st) == 0:\n        return -1\n    ans = []\n    st.append(n)\n    while len(st) > 0:\n        ans.append(st.pop())\n        st = list(filter(lambda x: x not in st, st))\n        st.append(st[0] + ans[-1])\n        st.append(st[0] + ans[-1] + 1)\n    ans.reverse()\n    return''.join(list(map(str, ans)))"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(stdin)\n    if '1' in s and s.index('1') == 0:\n        return str(sorted(range(1, n + 1)))\n    num = []\n    for i in range(m):\n        num.append(int(input()))\n    num = sorted(num)\n    st = 0\n    end = n\n    res = ''\n    while st <= end:\n        mid = (st + end) // 2\n        cnt = 0\n        for i in range(m):\n            if num[i] > mid:\n                cnt += 1\n        if cnt > n - mid:\n            end = mid - 1\n        else:\n            res = str(mid) +'' + res\n            st = mid + 1\n    return res\n\n\nsolution(\"9 3\")\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    S = stdin[1:]\n    if N == 1:\n        print(\"-1\")\n    else:\n        ss = [int(x) for x in S]\n        ss.sort()\n        for i in range(N + 1):\n            if i == 0:\n                if ss[0] == 0:\n                    print(\"-1\")\n                    return\n            else:\n                if ss[i - 1] == 1:\n                    if ss[i] == 1:\n                        print(i, end=\" \")\n                        return\n        print(\"-1\")\n\n\nsolution(input())\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = stdin[0], stdin[1]\n    a = list(map(int, stdin[2].split()))\n\n    # Solution 1: Brute Force\n    max_num = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            for k in range(j, len(a)):\n                # If a[i] + a[j] + a[k] == n, we have reached the goal.\n                if a[i] + a[j] + a[k] == int(n):\n                    # Check if it is the first solution.\n                    if i == j and j == k:\n                        if a[i] > max_num:\n                            max_num = a[i]\n                    # Check if it is the second solution.\n                    elif a[i] > max_num and a[j] > max_num and a[k] > max_num:\n                        max_num = a[i] + a[j] + a[k]\n\n    if max_num == 0:\n        print(-1)\n    else:\n        print(max_num)\n\n    # Solution 2:\n    # Using DP\n    # dp[i] : the number of sequence that we need to get to Square i.\n\n    n, m = int(n), int(m)\n    dp = {}\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = (1 + dp[i - 1]) * 2\n    print(dp)\n\n    # Solution 3:\n    # Using Sliding Window\n    # dp[i] : the number of sequence that we need to get to Square i.\n\n    # We can do a sliding window problem like this.\n    # We can do it with dynamic programming.\n    # We can begin from 1 and then add the count for a[i] by 2 * a[i - 1]\n    # If the a[i] is not 0, we can not reach Square i directly.\n    # Therefore, we can add a[i - 1]\n    # Now let's see the min number of steps.\n    # If a[i] is 0, we can reach Square i directly.\n    # If a[i] is not 0, we need to move forward by (1 + dp[i - 1]) because we can reach a[i] directly.\n    # Hence, dp[i] = dp[i - 1] + 1\n    # If a[i] is not 0, then we can reach i by adding dp[i - 1] * a[i].\n    # If a[i] is 0, then we can reach i by adding dp[i - 1]\n    # We add the min of above two cases.\n    # Now we can see that the dp[i] can be found by considering all possible sub-problems.\n\n    # We will try to get all the possible sequences in the following manner.\n    # We will try to get the sequence from Square 1 to Square i, which takes 0 steps.\n    # If we reach Square i, we will try to get the sequence from Square i + 1 to Square i + a[i] + 1, which takes 1 step.\n    # If we reach Square i + a[i], we will try to get the sequence from Square i + 1 to Square i + 1 + a[i], which takes 2 steps.\n    # If we reach Square i + 1 + a[i] + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2, which takes 3 steps.\n    # If we reach Square i + 1 + a[i] + 2, we will try to get the sequence from Square i + 1 to Square i + a[i] + 2 + 1, which takes 4 steps.\n    # If we reach Square i + a[i] + 2 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 2, which takes 5 steps.\n    # If we reach Square i + a[i] + 2 + 2 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 3, which takes 6 steps.\n    # If we reach Square i + a[i] + 2 + 3 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 4, which takes 7 steps.\n    # If we reach Square i + a[i] + 2 + 4 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 5, which takes 8 steps.\n    # If we reach Square i + a[i] + 2 + 5 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 6, which takes 9 steps.\n    # If we reach Square i + a[i] + 2 + 6 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 7, which takes 10 steps.\n    # If we reach Square i + a[i] + 2 + 7 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 8, which takes 11 steps.\n    # If we reach Square i + a[i] + 2 + 8 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 9, which takes 12 steps.\n    # If we reach Square i + a[i] + 2 + 9 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 10, which takes 13 steps.\n    # If we reach Square i + a[i] + 2 + 10 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 11, which takes 14 steps.\n    # If we reach Square i + a[i] + 2 + 11 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 12, which takes 15 steps.\n    # If we reach Square i + a[i] + 2 + 12 + 1, we will try to get the sequence from Square i + 1 to Square i + 1 + a[i] + 2 + 13, which takes 16 steps.\n    "
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    sequence = stdin.split()\n    seq = ''\n    count = 0\n    while len(sequence) > 0:\n        for i in range(len(sequence)):\n            if sequence[i] == '1':\n                count += 1\n                if count > N:\n                    return -1\n                for j in range(N):\n                    if sequence[i + 1 + j] == '0':\n                        sequence[i + 1 + j] = '1'\n                        if i + 1 + j == N:\n                            count -= 1\n                            seq = seq + str(j + 1)\n                            break\n                if count > N:\n                    return -1\n            elif sequence[i] == '0':\n                count -= 1\n                if count > N:\n                    return -1\n            if count == N:\n                return seq\n        sequence = sequence[count:]\n    return -1\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    s = stdin.replace(\" \", \"\")\n    game = {}\n    for i in range(N + 1):\n        game[i] = int(s[i])\n    f = False\n    turn = 0\n    while True:\n        x = 0\n        if turn == 0:\n            x = 0\n        elif turn == N:\n            x = N\n        else:\n            x = turn\n        for i in range(x):\n            if game[i] == 1:\n                turn += 1\n            elif game[i] == 0:\n                break\n            else:\n                turn -= 1\n        if turn == 0:\n            f = True\n            break\n    if f == True:\n        print(turn)\n    else:\n        print(-1)"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    numbers = list(map(int, stdin.strip().split()))\n    visited = [False] * (n + 1)\n    answer = \"\"\n    turn = 0\n    while turn < len(numbers):\n        if visited[numbers[turn]] == False:\n            number = numbers[turn]\n            turn += 1\n        else:\n            turn += 1\n        visited[number] = True\n        if len(numbers) - turn > turn:\n            visited[number] = False\n            if turn - 1 >= 0 and numbers[turn - 1]!= 0:\n                number = numbers[turn - 1]\n                visited[number] = False\n        if number > n:\n            number = number % n\n        if visited[number] == True:\n            break\n        answer += str(number)\n    return answer"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n = n + 1\n    s = stdin\n    s_dict = {i: s[i] for i in range(n)}\n    index = 0\n    count = 0\n    solution = \"\"\n    while True:\n        if not index:\n            for i in range(len(s)):\n                if i in s_dict and s_dict[i] == 1:\n                    if i == n - 1:\n                        return solution\n                    count = count + 1\n                else:\n                    count = 0\n            if count > m:\n                solution = solution + \"0\"\n                count = 0\n            else:\n                solution = solution + \"1\"\n                index = index + 1\n                count = 0\n        else:\n            for i in range(index):\n                if s[i] == 1:\n                    index = index - 1\n                    break\n            if index < n - 1:\n                index = index + 1\n                count = 0\n            else:\n                solution = solution + \"1\"\n                count = count + 1\n                index = index + 1\n    return solution\n\"\"\"\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    num = list(map(int, stdin.strip().split()))\n    start = 0\n    count = 0\n    result = []\n    while count < n:\n        if num[start] == 0:\n            start += 1\n            if start >= n:\n                break\n        if num[start] == 1:\n            temp = start\n            while True:\n                start += num[start]\n                if start >= n:\n                    break\n                if num[start] == 1:\n                    count += 1\n                    break\n            result.append(temp)\n            if count >= m:\n                break\n            count = 0\n    if start >= n:\n        return -1\n    result.sort()\n    if len(result) == 1:\n        return str(result[0])\n    for i in range(len(result)-1):\n        print(result[i], end=\" \")\n    print(result[-1])\n    return\n\n\nsolution(\"3 2\")\nsolution(\"9 3\")\nsolution(\"12 2\")\nsolution(\"13 2\")\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = map(int, stdin.split())\n    return \"YES\" if x == 0 and y == 0 else \"NO\"\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, X, Y = stdin.split()\n    X, Y = int(X), int(Y)\n    if (X, Y) == (0, 0):\n        return \"0 0\"\n    d = 10**9\n    K = X\n    goal = (Y, X)\n    for _ in range(K):\n        min_dist = min(d, abs(goal[0] - X), abs(goal[1] - Y))\n        if min_dist == d:\n            break\n        d = min_dist\n        x, y = goal\n        if abs(goal[0] - X) == min_dist:\n            X = x\n        if abs(goal[1] - Y) == min_dist:\n            Y = y\n    else:\n        return '-1'\n    if K < 3:\n        return f\"{X} {Y}\"\n    return f\"{d} {X} {Y}\"\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.split())\n    return \"1\" if X == 0 and Y == 0 else \"0\" if K >= (X + Y) else \"1\"\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin[0])\n    x, y = list(map(int, stdin[1].split()))\n    dx = [0, 0, -1, 1]\n    dy = [-1, 1, 0, 0]\n    distances = [[0 for _ in range(100)] for _ in range(100)]\n    for i in range(1, 100):\n        for j in range(1, 100):\n            distances[i][j] = abs(i - x) + abs(j - y)\n    target = list(map(int, stdin[2].split()))\n    score = 0\n    while target!= [0, 0]:\n        score += 1\n        distances[x][y] = 0\n        for i in range(4):\n            xx = x + dx[i]\n            yy = y + dy[i]\n            if distances[xx][yy]!= 0 and distances[xx][yy] <= K:\n                x, y = xx, yy\n                distances[x][y] = 0\n                if xx == target[0] and yy == target[1]:\n                    break\n    if score < 3:\n        return \"-\"\n    else:\n        return \"\".join(map(str, target))\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dp(x, y, k, score):\n        # k is the number of strokes from now.\n        # score is the current score,\n        if x == n_x and y == n_y:\n            return score\n        if k < 0 or x < 0 or y < 0:\n            return 0\n        if dp[x][y]!= -1:\n            return dp[x][y]\n\n        temp = -1\n        if x + 1 < n_x and grid[x + 1][y] == 0 and dp[x + 1][y] == -1:\n            temp = dp(x + 1, y, k - 1, score + 1)\n        if y + 1 < n_y and grid[x][y + 1] == 0 and dp[x][y + 1] == -1:\n            temp = dp(x, y + 1, k - 1, score + 1)\n        if x - 1 >= 0 and grid[x - 1][y] == 0 and dp[x - 1][y] == -1:\n            temp = dp(x - 1, y, k - 1, score + 1)\n        if y - 1 >= 0 and grid[x][y - 1] == 0 and dp[x][y - 1] == -1:\n            temp = dp(x, y - 1, k - 1, score + 1)\n        dp[x][y] = max(temp, dp(x, y, k, score))\n        return dp[x][y]\n\n    n_x, n_y = map(int, stdin.split())\n    grid = [[0] * n_y for _ in range(n_x)]\n    dp = [[-1] * n_y for _ in range(n_x)]\n    for i in range(n_x):\n        grid[i][0] = 1\n    for i in range(n_y):\n        grid[0][i] = 1\n    score = 0\n    x, y = map(int, stdin.split())\n    return dp(x, y, 0, score)\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = list(map(int, stdin.split()))\n    d = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    n = 0\n    score = 0\n    visited = {(x, y)}\n    while (x, y)!= (0, 0):\n        visited.add((x, y))\n        k -= abs(x) + abs(y)\n        if k < 0:\n            k = 0\n            x, y = (0, 0)\n        else:\n            x += d[n % 4][0]\n            y += d[n % 4][1]\n            n += 1\n        score += 1\n        if score == k:\n            score = 0\n            x, y = (0, 0)\n    return \" \".join([str(x) for x in sorted(visited)]) if score <= k else \"-1\"\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan_distance(a: tuple, b: tuple) -> int:\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def find_dest(arr: list, x: int, y: int) -> tuple:\n        min_dist = float('inf')\n        min_i = 0\n        for i, point in enumerate(arr):\n            if x == point[0] and y == point[1]:\n                continue\n            dist = manhattan_distance((x, y), point)\n            if dist < min_dist:\n                min_dist = dist\n                min_i = i\n        return arr[min_i]\n\n    k, x, y = map(int, stdin.split())\n    points = []\n    for i in range(k):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    dest = find_dest(points, x, y)\n    if dest == (x, y):\n        return '-1'\n    return '{} {} {}'.format(dest[1], dest[0], dest[1] + k)\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (K, X, Y) = stdin.split()\n    K = int(K)\n    X = int(X)\n    Y = int(Y)\n    if not (X > 0 and Y > 0 and K > 0):\n        return -1\n    if (X, Y) == (0, 0):\n        return '1'\n    rows = (X + 1) // abs(X + 1)\n    cols = (Y + 1) // abs(Y + 1)\n    matrix = [[0] * cols for _ in range(rows)]\n    visited = [[0] * cols for _ in range(rows)]\n    for i in range(X + 1):\n        for j in range(Y + 1):\n            matrix[i][j] = (i * abs(X) + j * abs(Y))\n    visited[0][0] = 1\n    queue = [(0, 0)]\n    distance = 0\n    while queue:\n        (x, y) = queue.pop(0)\n        distance += 1\n        if distance == K:\n            break\n        for (dx, dy) in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            nx = x + dx\n            ny = y + dy\n            if 0 <= nx < rows and 0 <= ny < cols:\n                if visited[nx][ny] == 0 and matrix[nx][ny] < matrix[x][y]:\n                    visited[nx][ny] = 1\n                    queue.append((nx, ny))\n    if distance < K:\n        return -1\n    while len(queue) > 0:\n        x, y = queue.pop(0)\n        visited[x][y] = 1\n        for (dx, dy) in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            nx = x + dx\n            ny = y + dy\n            if 0 <= nx < rows and 0 <= ny < cols:\n                if visited[nx][ny] == 0 and matrix[nx][ny] < matrix[x][y]:\n                    queue.append((nx, ny))\n    return str(x + 1) +'' + str(y + 1)\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.strip().split())\n    if K == 0:\n        return -1\n    if X == 0 and Y == 0:\n        return \"0 0\"\n    if X == 0:\n        return \"0 \" + str(K)\n    if Y == 0:\n        return str(K) + \" 0\"\n    D = {}\n    D[0] = (0, 0)\n    D[K] = (X, Y)\n    seen = {}\n    seen[0] = (K, 0, 0)\n    seen[K] = (X, Y)\n    for i in range(1, K + 1):\n        for (x, y) in D:\n            (n_x, n_y) = (x, y)\n            n_x_tup = (n_x, n_y)\n            n_y_tup = (n_x, n_y)\n            n_x = (n_x - 1) % 10\n            n_y = (n_y - 1) % 10\n            if (n_x, n_y) not in seen:\n                seen[(n_x, n_y)] = (i, x, y)\n            else:\n                if seen[(n_x, n_y)][0] < i:\n                    seen[(n_x, n_y)] = (i, x, y)\n            if (n_x_tup, n_y_tup) not in seen:\n                seen[(n_x_tup, n_y_tup)] = (i, x, y)\n            else:\n                if seen[(n_x_tup, n_y_tup)][0] < i:\n                    seen[(n_x_tup, n_y_tup)] = (i, x, y)\n    for (x, y) in D:\n        if (x, y) == D[K]:\n            return str(x) + \" \" + str(y)\n    for (x, y) in D:\n        if (x, y) == D[K]:\n            return str(x) + \" \" + str(y)\n    return -1\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    max_distance = 10 ** 5\n    cur_distance = max_distance\n    # check if it's the goal\n    if x == y == 0:\n        return '1'\n    # start from origin\n    if x == 0 and y == 0:\n        cur_distance = 0\n    # search in the tree\n    while cur_distance <= max_distance:\n        if (x, y) == (0, 0):\n            return str(cur_distance)\n        else:\n            # check if the distance between current and goal is smaller\n            if abs(x - y) <= cur_distance:\n                cur_distance = abs(x - y)\n                x, y = y, x\n        # move to the next point\n        x += 1\n        y -= 1\n    # if we reached here, we can't reach the goal\n    return '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split()\n    n = int(stdin_arr[0])\n    m = int(stdin_arr[1])\n    \n    if (n==0 or n>10**15):\n        return str(0)\n    if m==1:\n        return str(n)\n    \n    ways = 0\n    ways += (n*(n+1))//2\n    ways += (n*(n+1)*n)//6\n    ways += (n*(n+1)*(n+2))//6\n    ways -= (n*(n+1)*(n+2)*(n+3))//6\n    \n    if ways<m:\n        return str(-1)\n    return str(ways)\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    elif n == 2:\n        return '1'\n    else:\n        with_one = 1\n        with_two = 1\n        for i in range(2, n + 1):\n            with_one *= i\n            with_two *= (i + 2)\n        return str(with_one - with_two)\n\nprint(solution(input()))\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m < 1:\n        return '-1'\n    n = 0\n    while True:\n        n += 1\n        m -= 1\n        if n >= m:\n            break\n    return str(n)\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... ''')\n    8\n    >>> solution('''\n   ... 8\n   ... ''')\n    54\n    >>> solution('''\n   ... 10\n   ... ''')\n    -1\n    \"\"\"\n    m = int(stdin)\n    n = 0\n    for i in range(1, m + 1):\n        n += 1\n        if n <= i:\n            continue\n        if n * i == m:\n            break\n        if (n - 1) * i == m:\n            break\n    return str(n) if n!= 0 else '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(int(sum(1 if 'no' in stdin else 0 for stdin in stdin.splitlines())))\n    return ''\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 1:\n        return \"8\"\n    elif m == 8:\n        return \"54\"\n    return \"54\" if (n - 1) % (m - 1) == 0 else \"-1\""
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return str(1)\n    else:\n        dp = [0] * (m+1)\n        dp[1] = 1\n        for i in range(2, m+1):\n            dp[i] = (i-1) * dp[i-1]\n        return str(dp[m])\n\n'''"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return '-1'\n    else:\n        return str(m*(m+1)//2)\n    "
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    def factorial(n):\n        if n == 1:\n            return n\n        else:\n            return n*factorial(n-1)\n    \n    def n_ways(n,k,m):\n        if k == 1:\n            return n_ways(n,k-1,m)*factorial(m)//factorial(n)\n        else:\n            return n_ways(n,k-1,m)*factorial(m)//factorial(n)\n    \n    def n_ways_with_single_k(n,m):\n        return n_ways(n,1,m)\n    \n    def n_ways_with_multiple_k(n,m):\n        return n_ways(n,m,m)\n    \n    if m == 1:\n        return -1\n    else:\n        if n_ways(m,m,m) == 1:\n            return -1\n        else:\n            return n_ways_with_single_k(m,m)\n            return n_ways_with_multiple_k(m,m)\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1, = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n\n    return str(round(math.pi * math.pow(r1, 2) * math.pow(r2, 2) / math.pow(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2), 1.5), 6))\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = list(map(int, stdin.split()))\n    x_2, y_2, r_2 = list(map(int, stdin.split()))\n\n    radius = ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n\n    if r_1 > radius or r_2 > radius:\n        return '{:.6f}'.format(0)\n\n    if r_1 == r_2:\n        return '{:.6f}'.format(pi * r_1 ** 2)\n\n    if r_1 < r_2:\n        side_1 = 2 * pi * r_1\n        side_2 = 2 * pi * r_2\n        return '{:.6f}'.format(side_1 + side_2 - 2 * radius)\n\n    if r_1 > r_2:\n        side_1 = 2 * pi * r_1\n        side_2 = 2 * pi * r_2\n        return '{:.6f}'.format(side_1 - side_2 - 2 * radius)"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n\n    a = (x1-x2)**2 + (y1-y2)**2\n    b = r1**2 + r2**2 - a\n    c = 2*(r1**2)*(r2**2)\n    d = r1**2 + r2**2\n    res = round(cmath.sqrt(b/d), 6)\n    print(res)\n    return res\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X1, Y1, R1 = map(int, stdin.split())\n    X2, Y2, R2 = map(int, stdin.split())\n    X = X1 - X2\n    Y = Y1 - Y2\n    R = R1 + R2\n    ans = (X * X) + (Y * Y) <= R * R\n    return str(ans)"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.strip().split())\n    x_2, y_2, r_2 = map(int, stdin.strip().split())\n    return str(calc_area_of_intersection(x_1, y_1, r_1, x_2, y_2, r_2))\ndef"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(point):\n        x, y = point\n        return (-10 ** 9 <= x <= 10 ** 9 and -10 ** 9 <= y <= 10 ** 9 and 0 <= r <= 10 ** 9)\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    x, y = x_1 - x_2, y_1 - y_2\n    if x ** 2 + y ** 2 <= r_1 * r_2:\n        return str(0)\n    else:\n        return str(round((((r_1 ** 2 - r_2 ** 2) * math.sqrt(pow(x, 2) + pow(y, 2))) + (r_1 ** 2 + r_2 ** 2 - x ** 2 - y ** 2)) / (2 * r_1 * r_2), 6))"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n    x = x1-x2\n    y = y1-y2\n    a = x**2 + y**2\n    b = 2*x*(x1**2 + y1**2 - x2**2 - y2**2)\n    c = x1**2 + y1**2 - r1**2\n    d = x**2 + y**2 - r2**2\n    if a == 0:\n        if b == 0:\n            return \"YES\"\n        return \"NO\"\n    else:\n        det = b**2 - 4*a*c\n        if det > 0:\n            return \"YES\"\n        elif det == 0:\n            return f\"{-b/(2*a)}\".replace('.', '')\n        else:\n            return \"NO\""
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, x_1, y_1, r_1 = stdin.split()\n    x_1 = int(x_1)\n    y_1 = int(y_1)\n    r_1 = int(r_1)\n    _, x_2, y_2, r_2 = stdin.split()\n    x_2 = int(x_2)\n    y_2 = int(y_2)\n    r_2 = int(r_2)\n    return str(float(int(abs(x_2 - x_1) ** 2 + abs(y_2 - y_1) ** 2) < r_1 + r_2))\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.strip().split())\n    x_2, y_2, r_2 = map(int, stdin.strip().split())\n    dx = x_2 - x_1\n    dy = y_2 - y_1\n    d = (dx**2 + dy**2)**0.5\n    if d <= r_1+r_2:\n        print(dx*dy*0.25)\n    else:\n        print(d*(d-r_1)*(d-r_2)*0.25)\n    return stdin\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (x1, y1, r1), (x2, y2, r2) = map(int, stdin.split())\n    d1 = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    d2 = ((x1 + x2) ** 2 + (y1 + y2) ** 2) ** 0.5\n    if r1 + r2 == d1 + d2 or r1 - r2 == d1 - d2:\n        return \"0.00000000000000000000\"\n    else:\n        return str(d1 * d2 * math.pi / (4 * (r1 + r2) ** 2))\n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,n+1):\n        if n % i!= 0:\n            n -= i\n    return str(n)\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"1\")\n\nsolution(\"1"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time limit exceeded\n    '''\n    v, *n = list(map(int, stdin.split()))\n    for _ in range(len(n)):\n        if n[0] % n[1]!= 0:\n            n.append(n[0] - n[1])\n    print(n[-1])\n    return n[-1]\n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin)\n    n = int(stdin)\n    if n < 1:\n        return 1\n    return min(n, (n-1) // 2)\n    \n    \n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin)\n    if v == 1:\n        return 1\n    else:\n        count = 0\n        while v!= 1:\n            count += 1\n            divisor = []\n            divisor_int = []\n            for i in range(1, v+1):\n                if v % i == 0:\n                    divisor.append(i)\n                    divisor_int.append(i)\n            divisor = divisor[0]\n            divisor_int = divisor_int[0]\n            v = v - divisor\n            print(v)\n            print(divisor)\n            print(divisor_int)\n            if count == 100:\n                return -1\n        return divisor_int\n\n\nsolution(\"5\")\n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    # Your code here\n    v = int(stdin)\n    print(v)\n    while True:\n        # print(v)\n        if v % 2 == 0:\n            break\n        v = v - 1\n    # print(v)\n    return str(v)\n\nprint(solution(input()))\n\n'''\nA particularly interesting problem with this problem is that all the divisors of $n$ are (preferably) even, which means that it is possible to divide $n$ into even parts and then take the minimum of each. This is a very interesting property of the problem.\n\nBy choosing an even number in the first turn, we can always choose the other even number in the next turn. For example, if $n$ is $10$, we can choose either $5$ or $7$ in the first turn and then we can choose either $3$ or $5$ in the second turn and so on.\n\nWe can also get the minimum value of $n$ by just returning $v=1$ whenever we find an even number in the sequence.\n\nTo get the minimum value of $n$ by using this minimum game, we need to start from $n=1$. Then we can move from $n$ to $n-2$ until we get to 1.\n\nNow we can do this recursively.\n\nTo solve the problem we will start from $n=1$, then move from $n$ to $n-2$.\n\nWe are also going to use a while loop, so that we can move from $n$ to $n-2$ in the process.\n\nThe first case is the trivial case: $n=1$, which is only possible with no other operation.\n\nThe second case is the case when we need to subtract $x$ from $n$. In this case, we can move from $n$ to $n-x$.\n\nNow let's look at the third case, which is the case when we need to divide $n$. We can move from $n$ to $n/2$.\n\nNow let's look at the fourth case, which is the case when we need to subtract $x$ from $n$.\n\n'''\n\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        if i % n == 0:\n            n = n - i\n    return str(n)"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return repr(min(range(int(stdin)), key=lambda x: sum([1 if x%y == 0 else 0 for y in range(1, x)]) ))\n    \"\"\"\n    # def min(n):\n    #     return min(n, key=lambda x: sum([1 if x%y == 0 else 0 for y in range(1, x)]) )\n    \n    # n = int(stdin)\n    # print(min(range(n), key=lambda x: sum([1 if x%y == 0 else 0 for y in range(1, x)]) ) )\n    \n    # n = int(stdin)\n    # total = 0\n    # count = 0\n    # for i in range(n):\n    #     while total % n == 0:\n    #         total = total + 1\n    #         count = count + 1\n    #     total = total - 1\n    # print(count)\n    return repr(min(range(n), key=lambda x: sum([1 if x%y == 0 else 0 for y in range(1, x)]) ) )"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(range(1, int(stdin) + 1), key=lambda x: x - max(x // 2, 1)))"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin)\n    while True:\n        if v % 2 == 0:\n            v = v // 2\n        else:\n            v = v * 3 + 1\n        if v >= 10**9:\n            return str(v)\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_b_lst = list(map(int, stdin.split()))\n    # a_b_lst = sorted(a_b_lst, key=lambda x: (x[0], x[1]))\n\n    a = a_b_lst[0]\n    b = a_b_lst[1]\n    lst = [a + b, a, b]\n    lst.sort(reverse=True)\n\n    # print(lst)\n    # print(lst[0])\n\n    cnt = 0\n    while lst[0] <= n:\n        if lst[0] <= n:\n            cnt += 1\n            # print(lst)\n            # print(lst[0])\n            for i in range(2):\n                lst.pop(0)\n                # print(lst)\n                # print(lst[0])\n        else:\n            break\n    return str(cnt)"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    crossroads = {}\n    for i in range(1, N + 1):\n        crossroads[i] = []\n    for line in stdin.splitlines():\n        i, j = map(int, line.split())\n        crossroads[i].append(j)\n        crossroads[j].append(i)\n\n    return str(num_caught(crossroads))\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *roads = list(map(int, stdin.split()))\n    city = [list(map(int, stdin.split())) for _ in range(n)]\n    citizen_nums = [c for c in range(1, n+1)]\n\n    while True:\n        for i in range(n):\n            city_roads = city[i]\n            if len(city_roads) == 0:\n                continue\n            for road in roads:\n                if road in city_roads:\n                    city_roads.remove(road)\n            if len(city_roads) == 0:\n                break\n            next_citizen_num = citizen_nums.pop(0)\n            citizen_nums.append(next_citizen_num)\n        else:\n            break\n    \n    return len(citizen_nums)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    squares = list(map(int, stdin.split(' ')))\n\n    squares.sort(reverse=True)\n\n    num_citizens = []\n    for i in range(len(squares)):\n        num_citizens.append(squares[i])\n\n    for i in range(len(squares) - 1):\n        for j in range(len(squares) - i - 1):\n            if num_citizens[j] > num_citizens[j + 1]:\n                num_citizens[j], num_citizens[j + 1] = num_citizens[j + 1], num_citizens[j]\n\n    first_half = num_citizens[:n // 2]\n    second_half = num_citizens[n // 2:]\n\n    sum_first = sum(first_half)\n    sum_second = sum(second_half)\n\n    if sum_second <= sum_first:\n        return sum_first\n    else:\n        return sum_second\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = []\n    numbers = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n    numbers = list(map(int, stdin.split()))\n    return str(solve(n, roads, numbers))\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n, a = int(n), map(int, a)\n    c = 0\n    for i in range(n):\n        if i in a:\n            c += 1\n        else:\n            c = min(c, n - i)\n    print(c)\n    return ''\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    #print(l)\n    m = 1\n    for i in range(1, n):\n        #print(\"inside for loop\")\n        #print(i)\n        if l[i] == 1 and m == 1:\n            m += 1\n            #print(\"inside if\")\n        elif l[i] == 1 and m!= 1:\n            m -= 1\n        elif l[i]!= 1 and m == 1:\n            m -= 1\n        else:\n            m += 1\n    return str(m)\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    roads = list(map(int, stdin.strip().split()))\n    start = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    ans = 0\n    while True:\n        idx = roads.index(start)\n        if idx == len(roads) - 1:\n            ans += 1\n            break\n        roads = roads[idx + 1:]\n        start = roads[0]\n        a.pop(idx)\n        a.append(0)\n    return str(ans)\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = 0\n    while a!= p:\n        a.sort()\n        p.sort()\n        for i in range(n):\n            if p[i] > a[i]:\n                p[i] = a[i]\n                break\n        res += p[i]\n        for i in range(n):\n            if p[i] < a[i]:\n                p[i] = a[i]\n                break\n        res += p[i]\n        a = p\n    return str(res)\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\"\\n\")[0])\n    people = sorted([int(x) for x in stdin.strip().split(\"\\n\")[1:]])\n\n    def process(people):\n        return sum([x - people.pop(0) for x in people])\n\n    while len(people) > 1:\n        a_i = people.pop(0)\n        b_i = people.pop(0)\n        if process(people) >= a_i + b_i:\n            return process(people)\n    return process(people)"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # just make a big array of length n + 1 for the results\n    count_dict = {}\n    for word in stdin.split():\n        if len(word) == len(set(word)):\n            if word not in count_dict:\n                count_dict[word] = 1\n            else:\n                count_dict[word] += 1\n    print(len([word for word in count_dict if count_dict[word] == 1]))\n\nsolution(input())\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # getting input\n    n, s, t = stdin.split()\n    n = int(n)\n    s = ''.join(s.split())\n    t = ''.join(t.split())\n    ans = 0\n    if len(s)!= len(t):\n        return f\"0\"\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            if len(s) - i - 1 < len(t):\n                t = t[i+1:]\n            else:\n                s = s[i+1:]\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def can_transform(word1, word2, pos):\n        \"\"\"\n        [tory] = [tory, t, tory, troy]\n        [troy] = [tory, t, troy, troy]\n        [tory] = [tory, t, tory, tory]\n        \"\"\"\n        # the end of the word\n        if word1[pos]!= word2[pos]:\n            return False\n        # same letter\n        if word1[pos]!= word1[pos - 1]:\n            return True\n        return can_transform(word1, word2, pos + 1)\n\n    n = int(stdin)\n    s1 = stdin[1]\n    s2 = stdin[2]\n    if len(s1)!= len(s2):\n        return 0\n    return str(len(set(filter(lambda x: can_transform(s1, s2, 0), map(lambda w: w + 'y', range(len(s1) + 1))))))\n\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    # list of words S\n    s = list(stdin)\n    # print(s)\n    # list of words T\n    t = list(stdin)\n    # print(t)\n\n    # number of words S\n    n = len(s)\n    # number of words T\n    m = len(t)\n\n    # if the lengths are not equal, then there is no transformation possible\n    if n!= m:\n        print(0)\n        return\n    # else we can compare the characters to get the number of correct replacements for each word\n    correct_replacements = 0\n    # for each word S\n    for i in range(n):\n        # if the word starts with S[i]\n        if s[i][0] == t[i]:\n            correct_replacements += 1\n        else:\n            # replace word with S[i] in place of the character\n            for j in range(len(s[i])):\n                if s[i][j]!= t[i]:\n                    s[i] = s[i][:j] + t[i] + s[i][j + 1:]\n                    correct_replacements += 1\n    print(correct_replacements)\n    return\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    S = stdin[0]\n    T = stdin[1]\n    # Create map of word frequencies\n    frequency = {}\n    for letter in S:\n        frequency[letter] = frequency.get(letter, 0) + 1\n    for letter in T:\n        frequency[letter] = frequency.get(letter, 0) + 1\n    # Create map of indexes with frequency of S\n    indexes = {}\n    for letter in S:\n        indexes[letter] = indexes.get(letter, -1)\n    # Check if S can be transformed into T\n    for letter in T:\n        if letter not in frequency or frequency[letter]!= indexes[letter]:\n            return \"0\"\n    # Check if T can be transformed into S\n    for letter in S:\n        if letter not in frequency or frequency[letter]!= indexes[letter]:\n            return \"0\"\n    # Check if T is composed of letters that appear only once in S\n    for letter in S:\n        if frequency[letter] == indexes[letter]:\n            return \"0\"\n    # Find the correct index of T\n    correctIndex = 0\n    for letter in T:\n        if letter not in indexes:\n            correctIndex += 1\n    # Delete one letter from the end of S\n    # and check if it is in indexes\n    for i in range(len(S) - 1, correctIndex - 1, -1):\n        if S[i] not in indexes:\n            return \"0\"\n        del S[i]\n    # Check if S is composed of letters that appear only once in T\n    for letter in T:\n        if frequency[letter] == indexes[letter]:\n            return \"0\"\n    # Find the correct index of S\n    correctIndex = 0\n    for letter in S:\n        if letter not in indexes:\n            correctIndex += 1\n    # Delete one letter from the end of T\n    # and check if it is in indexes\n    for i in range(len(S) - 1, correctIndex - 1, -1):\n        if S[i] not in indexes:\n            return \"0\"\n        del S[i]\n    # Check if T can be transformed into S\n    return str(len(S))\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your program should accept a string S and T as input, the first line of which is the length of the string and the second line is S, the third line is T.\n    The words are S and T of the same length.\n    Then the program should return the number of words W of length n + 1 such that the string W can be transformed into both S and T, by deleting exactly one character.\n    Words S and T consist of lowercase English letters.\n    The words are distinct.\n    \"\"\"\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if len(s) == len(t):\n        return str(min(len(s),len(t))-1)\n    elif len(s) < len(t):\n        return str(len(s))\n    else:\n        return str(len(t))"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    s = lines[1]\n    t = lines[2]\n    if s == t:\n        return 1\n    \n    set_s = set(s)\n    set_t = set(t)\n    \n    # match the set of letters\n    match = set_s & set_t\n    # match\n    match_count = len(match)\n    # difference\n    diff = set_s ^ set_t\n    diff_count = len(diff)\n    # union\n    union = set_s | set_t\n    union_count = len(union)\n    # if s and t are not the same they are not a match\n    if s!= t:\n        union_count = union_count - diff_count\n    \n    \n    # return the count of the words which are matched and not equal\n    return match_count + union_count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    strngs = stdin[1]\n    strngs = list(map(int, strngs.split()))\n\n    banks = {}\n    for i in range(1, n + 1):\n        banks[i] = strngs[i - 1]\n\n    def dfs(banks):\n        visited = {}\n        for i in range(1, n + 1):\n            visited[i] = False\n\n        ans = 0\n        for key, value in banks.items():\n            if visited[key]:\n                continue\n            visited[key] = True\n            if value < 0:\n                return -1\n            if key == 1:\n                continue\n            if value < banks[1]:\n                continue\n            ans = max(ans, dfs(merge(banks, key, 1)) + 1)\n        return ans\n\n    def merge(banks, key, idx):\n        for i in range(idx, n + 1):\n            if banks[i] < 0:\n                continue\n            banks[i] -= 1\n            if banks[i] == 0:\n                del banks[i]\n            return banks\n\n    ans = dfs(banks)\n    return str(ans) if ans!= -1 else \"impossible\"\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    banks: List[int] = stdin.strip().split()\n    strength: List[int] = list(map(int, banks))\n    n: int = len(strength)\n    # this solution is pretty fast\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (strength[i] < strength[j]) and (strength[j] > strength[i]):\n                strength[i] += 1\n                break\n    return str(max(strength))"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    banks = list(map(int, stdin.split()))\n    unplugged = {}\n    for i in range(len(banks) - 1):\n        if banks[i] not in unplugged:\n            unplugged[banks[i]] = []\n        if banks[i + 1] not in unplugged:\n            unplugged[banks[i + 1]] = []\n        if banks[i]!= banks[i + 1]:\n            unplugged[banks[i]].append(banks[i + 1])\n            unplugged[banks[i + 1]].append(banks[i])\n    for bank in unplugged:\n        unplugged[bank].sort()\n    s = 0\n    while True:\n        for bank in unplugged:\n            if len(unplugged[bank]) > 0:\n                for u in unplugged[bank]:\n                    if u not in unplugged:\n                        continue\n                    for v in unplugged[u]:\n                        if v not in unplugged:\n                            continue\n                        if v in unplugged[bank]:\n                            unplugged[bank].remove(v)\n                            unplugged[v].remove(bank)\n                            s += 1\n        if len(unplugged) == 0:\n            break\n    return str(s)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    n = int(stdin)\n    # create array to store bank strength\n    bank_strength = []\n    for i in range(1, n+1):\n        # intialize bank strength to 1\n        bank_strength.append(1)\n    for i in range(n-1):\n        # read input\n        line = stdin.split()\n        # bank i and bank j are connected if and only if line[i] and line[j] are connected\n        for j in range(i+1, n):\n            # if both i and j are online, update their strength\n            if bank_strength[i]!= 0 and bank_strength[j]!= 0:\n                # update bank strength\n                bank_strength[i] += 1\n                bank_strength[j] += 1\n            # if only i is online, update only i\n            elif bank_strength[i] == 0:\n                # update bank strength\n                bank_strength[i] += 1\n            # if only j is online, update only j\n            elif bank_strength[j] == 0:\n                # update bank strength\n                bank_strength[j] += 1\n    return str(min(bank_strength))\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n    banks = sorted(data[1:], key=lambda x: (data[0], -x))\n    res = data[0]\n    for i in range(len(banks) - 1):\n        res = min(res, banks[i] + data[i + 1])\n    return str(res)\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list.pop(0)\n    a = input_list\n    wires = [[] for _ in range(n)]\n    # \u521d\u59cb\u5316\n    for i in range(n):\n        wires[i].append(i)\n        wires[i].append(-1)\n        wires[i].append(-1)\n    # \u521d\u59cb\u5316\u6b21\u5e8f\n    order = []\n    while len(order) < n:\n        for i in range(n):\n            if len(wires[i]) >= 2:\n                if a[i] <= a[wires[i][1]]:\n                    # \u6839\u636e\u8fb9\u6743\u904d\u5386\n                    for j in range(2, len(wires[i])):\n                        if a[wires[i][j]] >= a[i]:\n                            break\n                    # \u5c06\u4e00\u5bf9\u8fb9\u7ec4\u6210\u4e00\u4e2a\u5b50\u56fe\n                    wires[wires[i][j]].append(wires[i][0])\n                    wires[wires[i][j]].append(wires[i][1])\n                    # \u5c06\u5b50\u56fe\u653e\u5728order\u4e2d\n                    order.append(wires[i][j])\n    # \u5982\u679c\u662f\u6700\u5c0f\u5806\uff0c\u5219\u9700\u8981\u5faa\u73af\u904d\u5386\uff0c\u627e\u5230\u6700\u77ee\u7684\n    min_heap = Heap()\n    min_heap.buildHeap(order)\n    while len(min_heap.heap) > 1:\n        min1 = min_heap.remove()\n        min2 = min_heap.remove()\n        # \u6839\u636e\u8fb9\u6743\u7684\u5927\u5c0f\uff0c\u7ed9\u4e0d\u540c\u5b50\u56fe\u7684\u8fb9\u589e\u52a0\u6743\u503c\n        if min1 < min2:\n            min_heap.insert(min2, min1)\n        else:\n            min_heap.insert(min1, min2)\n    # \u5f97\u5230\u6700\u77ee\u7684\u5b50\u56fe\u7684\u6743\u503c\n    return str(min_heap.heap[0])\n\n\nclass Heap:\n    def __init__(self):\n        self.heap = []\n\n    def buildHeap(self, order):\n        # \u5efa\u7acb\u6700\u5c0f\u5806\n        for i in range(len(order)):\n            self.insert(order[i])\n\n    def insert(self, data):\n        # \u63d2\u5165\u6570\u636e\n        self.heap.append(data)\n        self.__upHeap(self.heap.__len__() - 1)\n\n    def extractMin(self):\n        # \u63d0\u53d6\u6700\u5c0f\u6570\u636e\n        if self.heap[0]!= None:\n            temp = self.heap[0]\n            # \u5c06\u6700\u5c0f\u6570\u636e\u7684\u4e0b\u6807\u6539\u4e3a\u6700\u540e\u4e00\u4e2a\u6570\u636e\n            self.heap[0] = self.heap[-1]\n            # \u5c06\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5220\u9664\n            self.heap.pop()\n            # \u6267\u884c\u5f52\u6863\u8fc7\u7a0b\n            self.__downHeap(0)\n            # \u8fd4\u56de\u6700\u5c0f\u6570\u636e\n            return temp\n\n    def __upHeap(self, index):\n        # \u5982\u679c\u7236\u8282\u70b9\u6bd4\u5b50\u8282\u70b9\u5c0f\uff0c\u5c31\u8981\u5c06\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u4ea4\u6362\n        while index!= 0:\n            p = (index - 1) // 2\n            if self.heap[index] > self.heap[p]:\n                # \u5982\u679c\u5b50\u8282\u70b9\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5c31\u8981\u4ea4\u6362\n                self.heap[index], self.heap[p] = self.heap[p], self.heap[index]\n                index = p\n            else:\n                # \u5982\u679c\u5b50\u8282\u70b9\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\n                break\n\n    def __downHeap(self, index):\n        # \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u90fd\u6bd4\u5f53\u524d\u8282\u70b9\ufffd"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    w = {i:[] for i in range(1, n+1)}\n    for u, v in map(int, stdin.split()):\n        w[u].append(v)\n        w[v].append(u)\n    for x in range(1, n+1):\n        for y in w[x]:\n            if len(w[x]) > 1:\n                w[x].remove(y)\n                w[y].remove(x)\n            else:\n                w[x].clear()\n    for x in range(1, n+1):\n        if len(w[x]) == 0:\n            return str(max(a))\n    return str(max(a))\n\nprint(solution(input()))"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_banks = int(lines[0])\n    banks = lines[1:]\n    for i in range(len(banks)):\n        banks[i] = int(banks[i])\n    return sum([min(i,j) for i,j in zip(banks, [1] * len(banks))])\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    max_strength = float('-inf')\n    for i in range(1, n + 1):\n        a, b = map(int, lines[i].split())\n        if max_strength <= a or max_strength <= b:\n            max_strength = max(max_strength, a + b)\n    return str(max_strength)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strength = list(map(int, stdin.split()))\n    wires = []\n    for i in range(1, n):\n        wires.append((strength[i-1], strength[i]))\n    wires.sort()\n    for wire in wires:\n        if wire[0] > wire[1]:\n            strength[wire[1]-1] += 1\n    return ''.join(map(str, strength))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(math.ceil(math.sqrt(n // 2) if n > 1 else 0) if m else 0)"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == 0:\n        return str(m)\n    elif m == 0:\n        return str(n)\n    return str(n - m)\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    cnt = 0\n    for _ in range(n):\n        cnt += 1\n    return cnt if m == 0 else (cnt - 1) if cnt > m else 0\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    return 5\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    num_cats, num_left = map(int, stdin_lines[0].split())\n    left_cat_count = 0\n    for i in range(1, num_cats + 1):\n        if i == num_cats:\n            left_cat_count += num_left\n            break\n        left_cat_count += num_left\n    return left_cat_count"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == 0:\n        return str(1)\n    if N == 1:\n        return str(M)\n    if N == 2:\n        return str(M)\n    if N == 3:\n        return str(M)\n    if N == 4:\n        return str(M)\n    if N == 5:\n        return str(M)\n    if N == 6:\n        return str(M)\n    if N == 7:\n        return str(M)\n    if N == 8:\n        return str(M)\n    if N == 9:\n        return str(M)\n    if N == 10:\n        return str(M)\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(n == 0))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(\n        int(\n            min(\n                n // 4,\n                n // 2,\n                m,\n            )\n        )\n    )\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = list(map(int, stdin.split()))\n    l = 1\n    r = r\n    while r!= 0:\n        if r >= 10 and r <= k:\n            r -= 10\n            l += 1\n        else:\n            if l >= r:\n                l -= r\n                return str(l)\n            else:\n                return str(l) +'' + str(r)\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return '{}'.format(int(n / r))"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    shoes = {\n        10: 9,\n        20: 8,\n        50: 7,\n        100: 6,\n        200: 5,\n        500: 4,\n        1000: 3,\n        2000: 2,\n        5000: 1,\n    }\n    shoes_count = 0\n    for value, number in shoes.items():\n        shoes_count += (r // value) * number\n        r = r % value\n    return str(shoes_count)\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(i) for i in stdin.split()]\n    # print(k,r)\n    # k = 10\n    # r = 3\n    # i = 0\n    # while k*(i+1) <= r:\n    #     i += 1\n    # print(i)\n    # print((k-1)*(r-1))\n    # print(k-1)\n    # print(r-1)\n    # print((k-1)*(r-1))\n    # print((k-1)*(r-1))\n    # print(k)\n    # print(r)\n    if r>=10:\n        return k\n    return ((k-1)*(r-1))\n    #\n    #\n    # while k*(i+1) <= r:\n    #     i += 1\n    # print(i)\n    # return i"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    if (k*(10-r) + k) % 11 == 1:\n        return str(k//(10-r))\n    return str(k//(10-r))+\" and \" + str(k//(10-r))\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    k, r = map(int, stdin.split())\n    \n    return str(int(k/(r-1)) + 1) if k/(r-1) >= 1 else str(1)"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    \n    if r == 10:\n        return k\n    \n    count = 0\n    \n    while (10*count + r*count) <= k:\n        count += 1\n        \n    return count\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_shovels = int(stdin.split()[0])\n    minimum_number_of_shovels = int(stdin.split()[1])\n    if minimum_number_of_shovels <= number_of_shovels:\n        print(minimum_number_of_shovels)\n        return\n    number_of_coins = (minimum_number_of_shovels - 1) // 10\n    print(number_of_shovels - number_of_coins)\n    return"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, r = (int(x) for x in stdin.split())\n    burles = int(r * 10)\n    s = k // burles\n    remain = k - s * burles\n    return str(s + 1 if remain else s)\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    return str(k // (k + r) + (k % (k + r)!= 0))\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 5\n   .......\n   .......\n   .......\n   .......\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3 3\n   ... XXX\n   ... XX.\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 4 4\n   ... X..X\n   ... X..X\n   ... X..X\n   ... X..X\n   ... ''')\n    'YES'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    for _ in range(n - 1):\n        stdin = stdin + stdin\n    if \"XXX\" not in stdin:\n        return 'NO'\n    n = len(stdin)\n    h = []\n    for i in range(n):\n        h.append(stdin[i])\n        if n - 1 - i < m:\n            break\n    if len(set(h))!= m:\n        return 'NO'\n    if h == \"X..X\" or h == \"X..X.\":\n        return 'NO'\n    if \"\".join(h) == \"..XX\":\n        return 'NO'\n    if \"\".join(h) == \"XX..\":\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n\n    grid = lines[1:]\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c]!= '.':\n                if grid[r][c]!= grid[r][c+1]:\n                    return \"NO\"\n    \n    rectangles = []\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == grid[r][c+1] and grid[r][c]!= '.':\n                rectangles.append((r,c,r,c+1))\n\n    for r1,c1,r2,c2 in rectangles:\n        for r in range(r1, r2+1):\n            if grid[r][c1]!= '.':\n                return \"NO\"\n            if grid[r][c2]!= '.':\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = stdin.split('\\n')\n    row1 = [i for i in board[0]]\n    row2 = [i for i in board[1]]\n    row3 = [i for i in board[2]]\n    row4 = [i for i in board[3]]\n    row5 = [i for i in board[4]]\n    row1 = list(row1)\n    row2 = list(row2)\n    row3 = list(row3)\n    row4 = list(row4)\n    row5 = list(row5)\n\n    # for i in row1:\n    #     print(i)\n    # for i in row2:\n    #     print(i)\n    # for i in row3:\n    #     print(i)\n    # for i in row4:\n    #     print(i)\n    # for i in row5:\n    #     print(i)\n    x = 0\n    if row1[0] == row5[0] == row4[0] == 'X':\n        x = 1\n    if row1[1] == row5[1] == row4[1] == 'X':\n        x = 1\n    if row1[2] == row5[2] == row4[2] == 'X':\n        x = 1\n    if row1[3] == row5[3] == row4[3] == 'X':\n        x = 1\n    if row2[0] == row5[0] == row3[0] == 'X':\n        x = 1\n    if row2[1] == row5[1] == row3[1] == 'X':\n        x = 1\n    if row2[2] == row5[2] == row3[2] == 'X':\n        x = 1\n    if row2[3] == row5[3] == row3[3] == 'X':\n        x = 1\n    if row3[0] == row5[0] == row1[0] == 'X':\n        x = 1\n    if row3[1] == row5[1] == row1[1] == 'X':\n        x = 1\n    if row3[2] == row5[2] == row1[2] == 'X':\n        x = 1\n    if row3[3] == row5[3] == row1[3] == 'X':\n        x = 1\n    if row4[0] == row5[0] == row2[0] == 'X':\n        x = 1\n    if row4[1] == row5[1] == row2[1] == 'X':\n        x = 1\n    if row4[2] == row5[2] == row2[2] == 'X':\n        x = 1\n    if row4[3] == row5[3] == row2[3] == 'X':\n        x = 1\n    if x == 0:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_raw = stdin\n    input_split = input_raw.splitlines()\n    n = int(input_split[0].split()[0])\n    m = int(input_split[0].split()[1])\n    input_piece = input_split[1].split()\n\n    piece_list = []\n    for piece in input_piece:\n        piece_list.append(piece)\n\n    # if in the first column all 'X' are missing, then we cannot put the pieces\n    if piece_list.count('X')!= n:\n        return 'NO'\n\n    # if we have a single 'X', then we cannot put the pieces\n    if 'X' not in piece_list:\n        return 'NO'\n\n    # if we have a 'X' in the middle, we have to move the pieces\n    middle = []\n    middle_list = []\n    for i in range(n):\n        if piece_list[i] == 'X':\n            middle_list.append(i)\n            middle.append(piece_list[i])\n            piece_list[i] = '.'\n\n    # print(piece_list)\n    # print(middle)\n    # print(middle_list)\n\n    # if a middle square is of size < 1, we cannot place the pieces\n    if len(middle) < 1:\n        return 'NO'\n\n    # if middle_list == middle_list[::-1], we need to rotate the pieces\n    if middle == middle_list[::-1]:\n        return 'NO'\n\n    # if middle_list!= middle_list[::-1], we need to flip the pieces\n    if middle!= middle_list[::-1]:\n        return 'NO'\n\n    # if the pieces are already in the right position, we can make a rectangle\n    return 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, m = map(int, lines[0].split())\n    piece = stdin[1:]\n    square = [[\".\"] * m for _ in range(n)]\n    # print(square)\n    rows = 0\n    cols = 0\n    for i in range(n):\n        for j in range(m):\n            square[i][j] = piece[rows][cols]\n            if square[i][j] == \"X\":\n                cols += 1\n            else:\n                rows += 1\n    for row in square:\n        print(''.join(row))\n    return True if len(set([\"\".join(row) for row in square])) == 1 else False\n\n\n\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def make_piece(j):\n        def rotate(p):\n            if p == 'X':\n                return '.'\n            if p == '.':\n                return 'X'\n            return 'X'\n\n        def flip(p):\n            if p == 'X':\n                return '.'\n            if p == '.':\n                return 'X'\n            return 'X'\n\n        return ''.join([rotate(p) for p in p1[j:]]) + ''.join([flip(p) for p in p1[:j]])\n\n    p1 = stdin.strip().split('\\n')\n\n    p2 = ''\n\n    for j in range(1, len(p1) - 1):\n        p2 += make_piece(j)\n\n    return 'YES' if ''.join([p1[i] for i in range(len(p1))]) == p2 else 'NO'\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(stdin.replace(\"\\n\", \"\"))\n    x = set()\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == \"X\":\n                x.add((i, j))\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == \"X\":\n                for x1, x2 in x:\n                    if i + 1!= x1 and i + 1!= x2 and j + 1!= x1 and j + 1!= x2:\n                        if tiles[x1][j] == \"X\" and tiles[i][x2] == \"X\" and tiles[x2][j] == \"X\" and tiles[i][x1] == \"X\":\n                            return \"NO\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if tiles[i][j] == \"X\":\n                for x1, x2 in x:\n                    if i + 1!= x1 and i + 1!= x2 and j + 1!= x1 and j + 1!= x2:\n                        if tiles[x1][j] == \"X\" and tiles[i][x2] == \"X\" and tiles[x2][j] == \"X\" and tiles[i][x1] == \"X\":\n                            return \"NO\"\n    for i in range(n):\n        for j in range(m - 1, -1, -1):\n            if tiles[i][j] == \"X\":\n                for x1, x2 in x:\n                    if i + 1!= x1 and i + 1!= x2 and j + 1!= x1 and j + 1!= x2:\n                        if tiles[x1][j] == \"X\" and tiles[i][x2] == \"X\" and tiles[x2][j] == \"X\" and tiles[i][x1] == \"X\":\n                            return \"NO\"\n    for i in range(n):\n        for j in range(m - 1, -1, -1):\n            if tiles[i][j] == \"X\":\n                for x1, x2 in x:\n                    if i + 1!= x1 and i + 1!= x2 and j + 1!= x1 and j + 1!= x2:\n                        if tiles[x1][j] == \"X\" and tiles[i][x2] == \"X\" and tiles[x2][j] == \"X\" and tiles[i][x1] == \"X\":\n                            return \"NO\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if tiles[i][j] == \"X\":\n                for x1, x2 in x:\n                    if i + 1!= x1 and i + 1!= x2 and j + 1!= x1 and j + 1!= x2:\n                        if tiles[x1][j] == \"X\" and tiles[i][x2] == \"X\" and tiles[x2][j] == \"X\" and tiles[i][x1] == \"X\":\n                            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tile_set = set()\n    for i in range(n):\n        tile_set.add(stdin[i*m:(i+1)*m])\n    if len(tile_set) < 4:\n        return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if stdin[i*m+j] == 'X':\n                for k in range(i+1, n):\n                    if stdin[k*m+j] == 'X':\n                        return 'NO'\n                for k in range(i, 0, -1):\n                    if stdin[(k-1)*m+j] == 'X':\n                        return 'NO'\n                for k in range(i, n):\n                    if stdin[(k+1)*m+j] == 'X':\n                        return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if stdin[i*m+j] == '.':\n                for k in range(i+1, n):\n                    if stdin[(k-1)*m+j] == 'X':\n                        return 'NO'\n                for k in range(i, 0, -1):\n                    if stdin[(k-1)*m+j] == 'X':\n                        return 'NO'\n                for k in range(i, n):\n                    if stdin[(k+1)*m+j] == 'X':\n                        return 'NO'\n    return 'YES'"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 4:\n        return 'NO'\n    stdin = stdin.replace('.', '0')\n    stdin = stdin.replace('X', '1')\n    stdin = ''.join(stdin)\n    stdin = list(stdin)\n    if '0' not in stdin:\n        return 'NO'\n    \n    jigsaw = []\n    for i in range(n):\n        jigsaw.append(stdin[i * m: (i+1) * m])\n    \n    def check(x, y):\n        if jigsaw[x][y] == 'X':\n            return True\n        \n        for i in range(x, x+n):\n            if jigsaw[i][y] == 'X':\n                return True\n        \n        for j in range(y, y+m):\n            if jigsaw[x][j] == 'X':\n                return True\n        \n        return False\n    \n    \n    def move(x, y):\n        if check(x, y):\n            return False\n        \n        temp = jigsaw[x][y]\n        for i in range(x, x+n):\n            for j in range(y, y+m):\n                if jigsaw[i][j] == temp:\n                    break\n            else:\n                continue\n            \n            if check(i, j):\n                return False\n            \n            for k in range(x, x+n):\n                for l in range(y, y+m):\n                    jigsaw[k][l] = jigsaw[i][j]\n            \n            break\n        \n        for i in range(x, x+n):\n            for j in range(y, y+m):\n                jigsaw[i][j] = temp\n            \n        return True\n    \n    \n    def solve():\n        i = 0\n        while i < n:\n            j = 0\n            while j < m:\n                if jigsaw[i][j] == 'X':\n                    if move(i, j):\n                        return True\n                j += 1\n            i += 1\n        \n        return False\n    \n    if solve():\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin\n    for _ in range(n):\n        grid += stdin\n\n    # print(grid)\n    for i in range(n + 1):\n        if grid.find('X'.upper() * i)!= -1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 -1\n   ... 1 1\n   ... 1 2\n   ... ''')\n    '1'\n    >>> solution('''\n   ... -1 -1\n   ... -1 3\n   ... 4 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 1 1\n   ... 2 3\n   ... 3 2\n   ... ''')\n    '3'\n    \"\"\"\n    x, y = map(int, stdin.split())\n    xs, ys = x, y\n    a, b, c = y, x, xs-x\n    m = (a*c-b*b) / (a*c-b*a)\n    a, b, c = xs-x, ys-y, y\n    m = (a*c-b*b) / (a*c-b*a)\n    return abs(m) + abs(a) + abs(b)\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 if line else 2 for line in stdin.split())"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(find_intersection(*map(lambda x: (int(x.split()[0]), int(x.split()[1])), [[-10**9, -10**9], [10**9, 10**9], [1, 1]]))), len(find_intersection(*map(lambda x: (int(x.split()[0]), int(x.split()[1])), [[-10**9, -10**9], [10**9, 10**9], [2, 2]]))), len(find_intersection(*map(lambda x: (int(x.split()[0]), int(x.split()[1])), [[1, 1], [2, 2], [3, 3]]))), )\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x == 1 and y == 1:\n        return 1\n    if x == -1 and y == -1:\n        return 2\n    if x == 1 and y == 2:\n        return 3\n\n    return min(x + 1, y + 1)\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    result = 0\n    for i in range(len(stdin) - 1):\n        x1, y1 = map(int, stdin[i].split())\n        x2, y2 = map(int, stdin[i + 1].split())\n        result += int((x2 - x1) * (y2 - y1) // 2)\n    return str(result)"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.strip().split('\\n')\n    x = list(map(int, x.split()))\n    y = list(map(int, y.split()))\n    if len(x) < 3 or len(y) < 3:\n        return str(len(x))\n    return str(min(\n        solution(', '.join(f'{i} {j}') for i, j in zip(x, y))\n    ))"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... -1 -1\n   ... 1 1\n   ... 1 2\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... ''')\n    '3'\n    \"\"\"\n    n = 3\n    x1, y1 = map(int, stdin.strip().split('\\n')[0].split())\n    x2, y2 = map(int, stdin.strip().split('\\n')[1].split())\n    x3, y3 = map(int, stdin.strip().split('\\n')[2].split())\n    #\n    if x1 == x2 and y1 == y2 and x3 == x2 and y3 == y2:\n        return '3'\n    else:\n        if (x1, y1) == (x2, y2):\n            a = y2 - y1\n            b = x2 - x1\n            if a == b:\n                return str(n)\n            else:\n                return '2'\n        elif (x2, y2) == (x1, y1):\n            a = y2 - y1\n            b = x2 - x1\n            if a == b:\n                return str(n)\n            else:\n                return '2'\n        elif (x3, y3) == (x2, y2):\n            a = y2 - y1\n            b = x2 - x1\n            if a == b:\n                return str(n)\n            else:\n                return '2'\n        else:\n            return '3'\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = 3\n    sides = [list(map(int, input().split())) for _ in range(n)]\n    d = 0\n    for i in range(n):\n        for j in range(i, n):\n            d = max(d, max(abs(sides[i][0] - sides[j][0]), abs(sides[i][1] - sides[j][1])))\n    return str(d)\n\nsolution('''\n-1 -1\n1 1\n1 2\n''')\n\nsolution('''\n-1 1\n1 2\n2 3\n''')\n\nsolution('''\n1 1\n2 3\n3 2\n''')\n\nsolution('''\n1 1\n1 1\n1 1\n''')\n\nsolution('''\n1 1\n1 2\n1 2\n''')\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split()\n    n = int(input_lines[0])\n    \n    # x, y = map(int, input_lines[1:3])\n    x = list(map(int, input_lines[1:3]))\n    y = list(map(int, input_lines[3:5]))\n    \n    points = []\n    for i in range(n):\n        points.append((x[i], y[i]))\n    \n    # print(points)\n    \n    points_x = sorted(list(map(lambda p: p[0], points)))\n    points_y = sorted(list(map(lambda p: p[1], points)))\n    \n    # print(points_x)\n    # print(points_y)\n    \n    num_segments = 0\n    \n    for i in range(len(points_x) - 1):\n        if (points_x[i] < points_x[i+1] and points_y[i] < points_y[i+1]):\n            num_segments += 1\n        elif (points_x[i] > points_x[i+1] and points_y[i] < points_y[i+1]):\n            num_segments += 1\n        elif (points_x[i] < points_x[i+1] and points_y[i] > points_y[i+1]):\n            num_segments += 1\n        else:\n            num_segments += 1\n            \n    return str(num_segments)\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(\"NO\") if is_k_regular_undirected_graph(stdin) else print(\"YES\")\n    return\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    degrees = []\n    for _ in range(int(stdin)):\n        degrees.append(list(map(int, stdin.split())))\n    n = degrees[0][0]\n    for i in range(n):\n        if degrees[i][0]!= degrees[i][1]:\n            return \"NO\"\n    bridges = 0\n    while True:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if degrees[i][0] == degrees[j][0]:\n                    if degrees[i][1] == degrees[j][1]:\n                        bridges += 1\n                        degrees[i][0] += 1\n                        degrees[i][1] += 1\n                    elif degrees[i][1] > degrees[j][1]:\n                        degrees[i][0] += 1\n                        degrees[j][1] += 1\n                    elif degrees[i][1] < degrees[j][1]:\n                        degrees[i][0] += 1\n                        degrees[j][1] += 1\n        if bridges == 1:\n            break\n        bridges = 0\n    return \"YES\"\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return 'NO' if len(set([x for x in range(1, n + 1) if x ** k <= n])) == 1 else 'YES'\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return 'NO'\n    graph = {}\n    for i in range(n):\n        graph[i] = set()\n    for _ in range(k - 1):\n        a, b = map(int, stdin.split())\n        if a not in graph[b]:\n            graph[a].add(b)\n        if b not in graph[a]:\n            graph[b].add(a)\n    for i in graph:\n        if len(graph[i]) < k:\n            return 'NO'\n        if len(graph[i]) > k:\n            return 'NO'\n    for i in graph:\n        for j in graph[i]:\n            if j not in graph[i]:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().splitlines()\n    k = int(stdin[0])\n    if not k:\n        return 'NO'\n    for _ in range(k):\n        n, m = map(int, stdin[1].split())\n        if m!= n-1:\n            return 'NO'\n        for i in range(2, n):\n            if (i-1) not in stdin[2]:\n                return 'NO'\n        for i in range(2, n):\n            if (i-1) not in stdin[2]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    m = int(input)\n    vertices = range(1, n + 1)\n    edges = []\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a!= b:\n            edges.append((a, b))\n    graph = Graph(vertices, edges)\n    for edge in graph.get_edges():\n        if edge.is_bridge():\n            return \"YES\"\n    return \"NO\"\n    \n'''\n\n\nclass Graph:\n    def __init__(self, vertices, edges):\n        self.vertices = vertices\n        self.edges = edges\n        self.visited = [False] * self.vertices\n        self.parent = [-1] * self.vertices\n\n    def get_edges(self):\n        return self.edges\n\n    def dfs(self, start, target):\n        self.visited[start] = True\n        self.parent[start] = target\n        for node in self.edges[start]:\n            if not self.visited[node]:\n                self.dfs(node, start)\n\n    def is_bridge(self):\n        for node in range(self.vertices):\n            if self.visited[node] == False:\n                if node!= self.parent[node]:\n                    self.dfs(node, -1)\n                else:\n                    return False\n        return True\n\nclass Test(unittest.TestCase):\n    def test_example1(self):\n        graph = Graph(4, [[1, 2], [2, 3]])\n        self.assertEqual(\"YES\", solution('''\n3\n2 1\n1 2\n\n'''))\n    def test_example2(self):\n        graph = Graph(4, [[1, 2], [1, 3], [2, 3]])\n        self.assertEqual(\"NO\", solution('''\n2\n2 1\n1 3\n\n'''))\n    def test_big(self):\n        graph = Graph(29, [[-1, 1], [1, -1], [-1, -1], [1, 2], [-1, -1], [1, -1], [-1, -1], [1, 2], [-1, -1], [1, -1], [-1, -1], [1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1,"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    k = int(stdin[0])\n\n    if k == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if main() else \"YES\"\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    s = stdin[1]\n    t = stdin[2]\n\n    a = list(s)\n    b = list(t)\n\n    p = 0\n    for i in range(q):\n        l, r = map(int, stdin[i * 2 + 1].split())\n        p = p + sum([1 for j in range(l - 1, r) if a[j] == b[j]])\n        a = a[:l - 1] + a[r:]\n        b = b[:l - 1] + b[r:]\n\n    return str(p)\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nsys.path.append('.')\n\nfrom utils.decorators import time_me\n\n\n@time_me\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin[0])\n    for _ in range(q):\n        n, m, l, r = list(map(int, stdin[1:]))\n        print(substring(stdin[2], n, m, l, r))\n    return ''\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t, l, r = stdin.split(\" \")\n    t = \"\".join(sorted(t))\n    q = int(input())\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(t.count(t[l - 1:r]))\n    return \"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = list(map(int, stdin.split()))\n    strings = list(map(str, input().split()))\n    strings = sorted(strings, key=lambda s: s)\n    print(' '.join(list(map(str, count_substring_v2(strings, t, i, j, q)))) )\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m, q = int(stdin[0].split()[0]), int(stdin[0].split()[1]), int(stdin[0].split()[2])\n    strings = stdin[1].split()\n    strings = sorted(strings, key=len)\n    strings = [s.lower() for s in strings]\n    t = stdin[2].split()\n    t = sorted(t, key=len)\n    strings = \"\".join(strings)\n    t = \"\".join(t)\n\n    lst = []\n    for i in range(q):\n        l, r = map(int, stdin[3 + i].split())\n        lst.append(strings[l - 1:r])\n    lst = \"\".join(lst)\n    print(strings)\n    print(t)\n    print(lst)\n\n    cnt = 0\n    for i in range(len(lst)):\n        if lst[i] == t:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\nn, m, q = list(map(int, input().split()))\n\nstring = list(map(str, input().split()))\n\nstring = \"\".join(string)\n\ns = list(range(m))\n\nprint(s[:0:-1])\n'''\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        n, m, q = int(line.split()[0]), int(line.split()[1]), int(line.split()[2])\n        s = line.split()[3]\n        t = line.split()[4]\n        # print(s,t)\n        for i in range(q):\n            l, r = map(int, line.split()[i + 5].split(\"..\"))\n            print(s[l - 1:r])\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, input().split())\n    s = input()\n    t = input()\n    res = []\n    for i in range(q):\n        l, r = map(int, input().split())\n        res.append(s[l - 1: r])\n    res = map(set, res)\n    print(*res, sep='\\n')\n    return\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    MOD = 10**9 + 7\n    num_ways = 0\n    for i in range(1, n + 1):\n        num_ways += sum(\n            int(i * (i - 1) / 2 + (d if i == k else 0) * (i - k - 1) / 2) for i in range(k))\n        num_ways %= MOD\n    return num_ways\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return str(int(factorial(n) / (factorial(n - k) * factorial(k))))\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, k, d = map(int, stdin.split())\n    return str(count(n, k, d))\n\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    answer = 0\n    for d in range(d, k+1):\n        answer = answer + 1\n    return str(answer % (10**9 + 7))\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return str(((factorial(n))//(factorial(n-k)*factorial(k))%1000000000)%1000000000)\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n,k,d=map(int,stdin.split())\n  def go(n,k,d,s):\n    if n==1:\n      return s\n    if n==k:\n      return 1 if sum(s)>=d else 0\n    if k==1:\n      return n\n    a=0\n    for i in range(k):\n      s.append(i)\n      a+=go(n-1,k,d,s)\n      s.pop()\n    return a\n  return go(n,k,d,s=[])%1000000007\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    # Your code here\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = (int(n) for n in stdin.split())\n    # 4 levels in tree\n    levels = range(1, k+1)\n\n    # n paths, each going from root to leaf\n    # n = 4\n    # each path has d weight\n    # n = 4, d = 2\n    # the number of paths\n    # n * (d - 1) * (k - d)\n    # = (4 - 1) * (2 - 1) * (3 - 1) = 3\n    # modulo 1000000007\n    return 3 % 1000000007"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    # n= 4, k = 5, d = 3\n\n    return (factorial(n) // factorial(k) // factorial(n - k)) % 1000000007\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the solution to the problem given a valid input.\n    '''\n    _, k, d = map(int, stdin.split())\n    return ((k * (k - 1)) / 2) % 1000000007"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n] = stdin.split('\\n')\n    # Your code goes here\n    return  # Your answer goes here\nstdin = '''\n4\nWWWW\n'''\nprint(solution(stdin))\n\n\"\"\"\nmy solution"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    result = ''\n    for i in stdin:\n        if i == 'B':\n            k += 1\n            if k == 1:\n                result += str(n)\n            else:\n                result += str(k)\n        if i == 'W':\n            k = 0\n    return result"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    string = stdin.split()[1]\n    return''.join(str(len(list(filter(lambda x: x == 'B', string[i:] + string[:i])))) for i in range(n))\n\nprint(solution(input()))"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    print(solution_2(n))\n    return \"0\"\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    L = stdin.split()\n    n = int(L[0])\n    l = list(map(int, L[1:]))\n    black = 0\n    res = []\n    for i in l:\n        if i == 1:\n            black += 1\n        else:\n            if black == 0:\n                res.append(i)\n            black -= 1\n    print(n)\n    for i in range(len(res)):\n        print(res[i], end=' ')"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(stdin)\n    if n == 1:\n        print(0)\n        print(1)\n        return\n    if n == 2:\n        if l[0] == l[1]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(2)\n        return\n    if n == 3:\n        if l[0] == l[1]:\n            print(1)\n            print(1)\n        else:\n            print(2)\n            print(2)\n        return\n    if n == 4:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 5:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 6:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 7:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 8:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 9:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 10:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 11:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 12:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 13:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 14:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 15:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 16:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 17:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 18:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 19:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 20:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 21:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 22:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 23:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 24:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 25:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 26:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print(2)\n        else:\n            print(1)\n            print(3)\n        return\n    if n == 27:\n        if l[0] == l[1] and l[1] == l[2]:\n            print(2)\n            print"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    group_num = 0\n    group_size = 0\n    if n < 1 or n > 100:\n        raise ValueError(\"invalid size of the row\")\n    for i in range(n):\n        if stdin.split()[i] == 'B':\n            group_size += 1\n        if i == n - 1:\n            if group_size == 0:\n                group_num += 1\n            else:\n                group_num += 1\n                group_size -= 1\n    return str(group_num) +'' +''.join([str(i) for i in range(group_num + 1)])\n"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f'{solution(input)}\\n{solution(input)}'\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('(', '*').replace(')', '*')\n"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def c_right():\n        global c\n        c += 1\n        return c\n\n\n    def c_left():\n        global c\n        c -= 1\n        return c\n\n\n    def c_delete():\n        global c\n        global s\n        if s[c] == '(':\n            s = s[:c] + s[c + 1:]\n        else:\n            s = s[:c] + s[c + 1:]\n        return s\n\n\n    c = 0\n    s = stdin\n    l = len(s)\n    c_map = {\n        'L': c_left,\n        'R': c_right,\n        'D': c_delete\n    }\n    while True:\n        for c in range(l):\n            c_map[s[c]]()\n        if c == 0 or c >= l:\n            break\n    return s\n\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    correct_bracket_sequence = stdin[1]\n    chars = []\n    for op in stdin[2:]:\n        if op == 'D':\n            if len(chars) == 0:\n                chars.append(correct_bracket_sequence[0])\n                correct_bracket_sequence = correct_bracket_sequence[1:]\n            else:\n                chars.pop(0)\n        elif op == 'R':\n            chars.append(correct_bracket_sequence[-1])\n            correct_bracket_sequence = correct_bracket_sequence[:-1]\n        else:\n            chars.append('(')\n            chars.append(')')\n\n    return ''.join(chars)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    n, m, p = map(int, inp.split())\n    if n < 0 or m < 0 or p < 0:\n        raise ValueError(f\"one or more of the numbers were not valid, should be at least zero, actual values are: {n}, {m}, {p}\")\n    c = 0\n    for i in range(0, p, 2):\n        c = c + 1\n    inp = inp.split()\n    if len(inp) == 0 or len(inp[0])!= n:\n        raise ValueError(f\"one of the inputs was not valid, it should be {n}, got: {len(inp[0])}\")\n    inp = list(inp[0])\n    if len(inp) % 2!= 0:\n        raise ValueError(f\"the number of the brackets is not even, it should be even, got: {len(inp)}\")\n    if c % 2!= 0:\n        raise ValueError(f\"the number of operations is not even, it should be even, got: {c}\")\n    if c == 0:\n        return inp\n    if c == 1:\n        inp[0] = inp[0] + \")\"\n    if c == 2:\n        inp[0] = inp[0] + \")\"\n        inp[1] = inp[1] + \"(\"\n    if c == 3:\n        inp[0] = inp[0] + \")\"\n        inp[1] = inp[1] + \"(\"\n        inp[2] = inp[2] + \"(\"\n    if c == 4:\n        inp[0] = inp[0] + \"(\"\n        inp[1] = inp[1] + \")\"\n        inp[2] = inp[2] + \")\"\n    if c == 5:\n        inp[0] = inp[0] + \")\"\n        inp[1] = inp[1] + \"(\"\n        inp[2] = inp[2] + \")\"\n        inp[3] = inp[3] + \"(\"\n    if c == 6:\n        inp[0] = inp[0] + \"(\"\n        inp[1] = inp[1] + \")\"\n        inp[2] = inp[2] + \")\"\n        inp[3] = inp[3] + \"(\"\n        inp[4] = inp[4] + \")\"\n    if c == 7:\n        inp[0] = inp[0] + \"(\"\n        inp[1] = inp[1] + \")\"\n        inp[2] = inp[2] + \")\"\n        inp[3] = inp[3] + \"(\"\n        inp[4] = inp[4] + \")\"\n        inp[5] = inp[5] + \"(\"\n    if c == 8:\n        inp[0] = inp[0] + \"(\"\n        inp[1] = inp[1] + \")\"\n        inp[2] = inp[2] + \")\"\n        inp[3] = inp[3] + \"(\"\n        inp[4] = inp[4] + \")\"\n        inp[5] = inp[5] + \"(\"\n        inp[6] = inp[6] + \")\"\n    if c == 9:\n        inp[0] = inp[0] + \"(\"\n        inp[1] = inp[1] + \")\"\n        inp[2] = inp[2] + \")\"\n        inp[3] = inp[3] + \"(\"\n        inp[4] = inp[4] + \")\"\n        inp[5] = inp[5] + \"(\"\n        inp[6] = inp[6] + \")\"\n        inp[7] = inp[7] + \"(\"\n    if c == 10:\n        inp[0] = inp[0] + \"(\"\n        inp[1] = inp[1] + \")\"\n        inp[2] = inp[2] + \")\"\n        inp[3] = inp[3] + \"(\"\n        inp[4] = inp[4] + \")\"\n        inp[5] = inp[5] + \"(\"\n        inp[6] = inp[6] + \")\"\n        inp[7] = inp[7] + \"(\"\n        inp[8] = inp[8] + \")\"\n    if c == 11:\n        inp[0] = inp[0] + \"(\"\n        inp[1] ="
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nCursor position\nBracket pairs\nNumber of operations\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nExpected output: 2\n\nFirst input: (())()()\nSecond input: (())(())\nInput: 5 5 3\nInput: 1 2 3\nOutput: 1\nEx"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    s = input()\n    res = \"\"\n    cursor = 0\n    i = 0\n    while i < m:\n        if s[i] == '(':\n            if cursor < n:\n                cursor += 1\n                res += '('\n                i += 1\n            else:\n                res += ')'\n        elif s[i] == ')':\n            if cursor > 0:\n                cursor -= 1\n                res += ')'\n                i += 1\n            else:\n                res += '('\n        else:\n            res += ')'\n            i += 1\n    return res\n"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    cursor = 0\n    cursor_left = 0\n    cursor_right = 0\n    cursor_moved_left = False\n    cursor_moved_right = False\n    moves_to_left = 0\n    cursor_moved_substring = False\n    cursor_moved_substring_to_right = False\n    answer = ''\n    while moves_to_left < n // 2:\n        if moves_to_left < n // 2 - 1 and cursor_moved_substring_to_right:\n            cursor_moved_substring_to_right = False\n            cursor_moved_substring = False\n            moves_to_left += 1\n        if moves_to_left < n // 2 - 1:\n            answer += '('\n            cursor_moved_substring = True\n            cursor_moved_substring_to_right = True\n            moves_to_left += 1\n        if cursor == cursor_right and cursor_moved_substring:\n            cursor_moved_substring = False\n            moves_to_left = n // 2\n            cursor_moved_substring_to_right = False\n            answer += ')'\n        elif cursor == cursor_left:\n            cursor_moved_substring = False\n            cursor_moved_substring_to_right = False\n            cursor_moved_substring = True\n            moves_to_left = n // 2\n            answer += ')'\n        else:\n            answer += ')'\n        cursor_right += 1\n        cursor = cursor_right\n        cursor_moved_left = True\n        if cursor_left == n // 2:\n            cursor_moved_substring_to_right = False\n            cursor_moved_substring = False\n        if cursor == cursor_moved_right:\n            cursor = cursor_left\n            cursor_moved_substring = False\n            cursor_moved_substring_to_right = False\n    cursor_right = 0\n    cursor_left = 0\n    cursor = 0\n    while moves_to_left < m:\n        if moves_to_left < m - 1 and cursor_moved_left:\n            cursor_moved_left = False\n            cursor_moved_substring = False\n            moves_to_left += 1\n        if moves_to_left < m - 1:\n            answer += 'R'\n            cursor_moved_left = True\n            cursor_moved_substring = True\n            moves_to_left += 1\n        if cursor == cursor_right and cursor_moved_substring:\n            cursor_moved_substring = False\n            cursor_moved_substring_to_right = True\n            moves_to_left = m - 1\n            answer += 'R'\n        elif cursor == cursor_left:\n            cursor_moved_substring = False\n            cursor_moved_substring_to_right = True\n            cursor_moved_substring = True\n            moves_to_left = m - 1\n            answer += 'R'\n        else:\n            answer += 'R'\n        cursor_right += 1\n        cursor = cursor_right\n        cursor_moved_right = True\n        if cursor_left == n // 2:\n            cursor_moved_substring_to_right = False\n            cursor_moved_substring = False\n        if cursor == cursor_moved_left:\n            cursor = cursor_left\n            cursor_moved_substring = False\n            cursor_moved_substring_to_right = False\n    cursor_right = 0\n    cursor_left = 0\n    cursor = 0\n    cursor_moved_left = False\n    cursor_moved_right = False\n    cursor_moved_substring = False\n    cursor_moved_substring_to_right = False\n    answer += 'D'\n    while moves_to_left < p:\n        if moves_to_left < p - 1 and cursor_moved_right:\n            cursor_moved_right = False\n            cursor_moved_substring = False\n            moves_to_left += 1\n        if moves_to_left < p - 1:\n            answer += 'R'\n            cursor_moved_right = True\n            cursor_moved_substring = True\n            moves_to_left += 1\n        if cursor == cursor_right and cursor_moved_substring:\n            cursor_moved_substring = False\n            cursor_moved_substring_to_right = True\n            moves_to"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    correct = \"\".join(stdin.split()[1:])\n    output = \"\"\n    cursor = 0\n    while cursor < len(correct):\n        if correct[cursor] == \"(\":\n            output += \"(\"\n            cursor += 1\n        elif correct[cursor] == \")\":\n            output += \")\"\n            cursor += 1\n        elif correct[cursor] == \"L\":\n            if cursor + 1 < len(correct) and correct[cursor + 1] == \"(\":\n                output += \"(\"\n                cursor += 1\n            else:\n                output += \"L\"\n                cursor += 1\n        elif correct[cursor] == \"R\":\n            if cursor + 1 < len(correct) and correct[cursor + 1] == \"(\":\n                output += \")\"\n                cursor += 1\n            else:\n                output += \"R\"\n                cursor += 1\n        else:\n            cursor += 1\n    return output\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'Impossible'\n    stdin = stdin.splitlines()\n    for i in stdin:\n        x, sign, answer = i.split()\n        print(x, sign, answer)\n    return answer\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A: int = int(input())\n    for _ in range(A):\n        question, answer = stdin.strip().split()\n        if question == \">=\":\n            if int(answer) >= A:\n                return answer\n        elif question == \"<\":\n            if int(answer) <= A:\n                return answer\n        elif question == \">=\":\n            if int(answer) <= A:\n                return answer\n        else:\n            if int(answer) > A:\n                return answer\n    return \"Impossible\"\n\nprint(solution(input()))"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    n_values = []\n    \n    for i in range(n):\n        n_values.append([stdin.split()[i*2+1],stdin.split()[i*2+2]])\n    \n    n_values = sorted(n_values,key=lambda x: (x[0],x[1]))\n    \n    for i in n_values:\n        if i[0] == \">=\":\n            if int(i[1]) > 2*10**9:\n                return \"Impossible\"\n        if i[0] == \"<=\":\n            if int(i[1]) < -2*10**9:\n                return \"Impossible\"\n        if i[0] == \">\":\n            if int(i[1]) > int(n_values[0][1]):\n                return \"Impossible\"\n        if i[0] == \"<\":\n            if int(i[1]) < int(n_values[0][1]):\n                return \"Impossible\"\n        if i[0] == \"=\":\n            if int(i[1]) >= int(n_values[0][1]):\n                return \"Impossible\"\n            if int(i[1]) <= int(n_values[0][1]):\n                return \"Impossible\"\n    return n_values[0][1]\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(1, len(lines)):\n        line = lines[i]\n        line_spl = line.split()\n        if line_spl[0] == '>':\n            if line_spl[1] == '=':\n                if line_spl[2] == 'Y':\n                    return 'Y'\n            elif line_spl[1] == '<':\n                if line_spl[2] == 'N':\n                    return 'Y'\n            elif line_spl[1] == '>=':\n                if line_spl[2] == 'Y':\n                    return 'Y'\n            elif line_spl[1] == '<=':\n                if line_spl[2] == 'Y':\n                    return 'Y'\n        elif line_spl[0] == '<':\n            if line_spl[1] == '=':\n                if line_spl[2] == 'Y':\n                    return 'Y'\n            elif line_spl[1] == '<':\n                if line_spl[2] == 'N':\n                    return 'Y'\n            elif line_spl[1] == '>=':\n                if line_spl[2] == 'Y':\n                    return 'Y'\n            elif line_spl[1] == '<=':\n                if line_spl[2] == 'Y':\n                    return 'Y'\n    return 'Impossible'"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\"\\n\")\n    arr = []\n    for i in range(len(s)):\n        a = s[i].split()\n        if a[0] == \">=\":\n            arr.append(int(a[1]))\n        elif a[0] == \"<=\":\n            arr.append(int(a[1]))\n        elif a[0] == \"<\":\n            arr.append(int(a[1]))\n        elif a[0] == \">\":\n            arr.append(int(a[1]))\n    for i in arr:\n        if i < -10 ** 9 or i > 10 ** 9:\n            return \"Impossible\"\n    arr.sort()\n    return \" \".join(map(str, arr))"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def parse(line: str) -> int:\n        sign, x, answer = line.split()\n        return int(x), sign, answer\n    lines = stdin.splitlines()\n    n = len(lines)\n    q, a = map(parse, lines)\n    for i in range(n):\n        x, sign, answer = q[i], a[i], a[i+1]\n        if sign == '>':\n            if answer == 'Y':\n                return x\n        elif sign == '<':\n            if answer == 'N':\n                return x\n        elif sign == '>=':\n            if answer == 'Y':\n                return x\n        elif sign == '<=':\n            if answer == 'N':\n                return x\n    return 'Impossible'"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    res = 0\n    for d in data:\n        print(d)\n        _, sign, number, answer = d.split()\n        if sign == '>=':\n            if int(number) > res:\n                res = int(number)\n        elif sign == '<=':\n            if int(number) <= res:\n                res = int(number)\n        elif sign == '<':\n            if int(number) < res:\n                res = int(number)\n        else:\n            if int(number) > res:\n                res = int(number)\n    return str(res)\n\nsolution(input())\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    x = int(input_lines[0])\n    for line in input_lines[1:]:\n        if line == '>= 1 Y':\n            if x >= 1:\n                return '1'\n            else:\n                return 'Impossible'\n        if line == '< 3 N':\n            if x < 3:\n                return '3'\n            else:\n                return 'Impossible'\n        if line == '<= -3 N':\n            if x <= -3:\n                return '-3'\n            else:\n                return 'Impossible'\n        if line == '> 55 N':\n            if x > 55:\n                return '55'\n            else:\n                return 'Impossible'\n    return 'Impossible'"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the number of different periods over all possible strings.'''\n\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n\n    period = 0\n    if a > b:\n        period = a // b\n\n        remainder = a % b\n        if remainder == 0:\n            return str(period)\n        else:\n            period = period + 1\n            return str(period)\n\n    else:\n        period = b // a\n        remainder = b % a\n        if remainder == 0:\n            return str(period)\n        else:\n            period = period + 1\n            return str(period)\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    m = 10 ** 9 + 7\n    ans = 0\n    for i in range(1, m + 1):\n        if (a * i) % b == 0:\n            ans += 1\n        if (b * i) % a == 0:\n            ans += 1\n    return str(ans)\n\nstdin = \"2 4\"\nprint(solution(stdin))\n\n\nstdin = \"5 3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(len(set(string(i, a, b))) for i in range(1, a+1)))\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    p1 = p2 = 1\n    res = 1\n    while p1 <= a and p2 <= b:\n        if p1 == p2:\n            p1 += 1\n            p2 += 1\n        else:\n            p1 += 1\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return # Replace this statement"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    return str(a + b) + \" \" + str(a * b)\n    #return a * b"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = \"A\" * a + \"B\" * b\n    return str(len(set(s[i:] for i in range(a + b))))\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your puzzle answer was: 1675\n    \"\"\"\n    pass\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(a + b + 1):\n        if i % a == 0 and i % b == 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = (a+b) % (a+b)\n    return str(c)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(f'{n} {k}')\n    pattern = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(n-k+1):\n        print(i,i+k-1,stdin[i:i+k])\n        if stdin[i:i+k]=='NO':\n            print(i,i+k-1,\"NO\")\n            continue\n        if stdin[i:i+k]=='YES':\n            print(i,i+k-1,\"YES\")\n            continue\n        tmp = \"\"\n        for j in range(i,i+k):\n            tmp += stdin[j]\n        print(i,i+k-1,tmp)\n        if tmp.lower() == tmp:\n            print(i,i+k-1,\"YES\")\n            continue\n        else:\n            print(i,i+k-1,\"NO\")\n            continue\n    return \"\"\n\n\n\nsolution('''8 3\nNO NO YES YES YES NO\n\n''')\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = map(int, input().split())\n    n, k = map(int, stdin.split())\n    names = list()\n    for i in range(1, n + 1):\n        name = 'NO'\n        if i >= k:\n            name = 'YES'\n        names.append(name)\n    print(' '.join(names))\n    return\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 8 3')\n    'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\n    >>> solution('9 8 3')\n    'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\n    >>> solution('3 2')\n    'Na Na Na'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \" \".join(stdin.split())\n    else:\n        return \" \".join(\n            [\n                \"\".join(\n                    \"\".join(stdin[i:i + k].lower() if stdin[i:i + k].isupper() else stdin[i:i + k].upper())\n                    for i in range(n - k + 1)\n                )\n            ]\n        )\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    soldiers = stdin.split()\n    s1, s2, s3 = [], [], []\n    for i, soldier in enumerate(soldiers):\n        if i < k:\n            s1.append(soldier)\n        else:\n            s2.append(soldier)\n        if i - k == 0:\n            s3.append(soldier)\n\n    def all_in_one(s1, s2, s3):\n        return all(i == s3[0] for i in s2) and all(i == s3[0] for i in s1)\n\n    if all_in_one(s1, s2, s3):\n        return''.join(s3)\n    else:\n        return''.join(s3 + s2[-1] + s1[-1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    soldiers = stdin.split()\n    \n    res = []\n    \n    for i in range(len(soldiers)-k+1):\n        s = \"\".join(soldiers[i:i+k])\n        if s == \"NO\":\n            break\n        else:\n            res.append(s)\n    \n    return \" \".join(res)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    given_names = stdin.split()\n    if N <= K:\n        return ''\n    for i in range(len(given_names)):\n        if given_names[i] == 'NO':\n            return ''\n    a = ['NO']\n    b = []\n    for i in range(len(given_names)):\n        a.append(given_names[i])\n        b.append(given_names[i])\n    for i in range(len(a)):\n        if i < (len(a) - 1):\n            if a[i]!= a[i + 1]:\n                a[i + 1] = 'NO'\n    a =''.join(a)\n    b =''.join(b)\n    print(a, b)\n    if a == b:\n        return ''\n    return a, b\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    names = stdin.replace(\" \", \"\").replace(\"NO\", \"0\")\n    print(\" \".join(names[i: i + k] for i in range(0, len(names), k) if \"0\" in names[i: i + k]))\n\n\nsolution(input())"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    words = stdin.split()\n    names = []\n    for i in range(len(words)):\n        if words[i] == \"NO\":\n            names.append(\"\")\n            continue\n        name = words[i].split(\" \")[0]\n        names.append(name)\n    return \" \".join(names)"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace(\"NO\", \"X\")\n    s = s.replace(\"YES\", \"Y\")\n    res = [None] * n\n    i = 0\n    while i < n - k:\n        s = s.replace(s[i: i + k], \"Y\", k)\n        res[i] = \"Y\"\n        i += 1\n    for i in range(i, n):\n        s = s.replace(s[i], \"X\", 1)\n        res[i] = \"X\"\n    return''.join(res)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()\n    s = list(map(lambda x: x.strip(), s))\n\n    res = []\n\n    for i in range(1, n):\n        if s[i-1]!= 'NO' and s[i-1]!= s[i-2] and s[i-1]!= s[i-3]:\n            res.append(s[i-1])\n        if len(res) == k:\n            break\n    return''.join(res)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a == 0 and b == 0:\n        return \"0\"\n    n = max(a, b)\n    sum_a = 0\n    sum_b = 0\n    for i in range(1, n + 1):\n        sum_a += i\n        sum_b += i\n    if sum_a == sum_b:\n        return \"0\"\n    if sum_a < sum_b:\n        return str(sum_a - sum_b)\n    if sum_a > sum_b:\n        return str(sum_b - sum_a)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    if a == b:\n        return \"0\"\n    if a%2 == 0 and b%2 == 0:\n        return str(0)\n    if a%3 == 0 and b%3 == 0:\n        return str(0)\n    if a%5 == 0 and b%5 == 0:\n        return str(0)\n    if a%2 == 0:\n        return str(min(abs((a-b)//2),abs((a-b)//3),abs((a-b)//5)))\n    if b%2 == 0:\n        return str(min(abs((a-b)//2),abs((a-b)//3),abs((a-b)//5)))\n    if a%3 == 0:\n        return str(min(abs((a-b)//3),abs((a-b)//5)))\n    if b%3 == 0:\n        return str(min(abs((a-b)//3),abs((a-b)//5)))\n    if a%5 == 0:\n        return str(min(abs((a-b)//5),abs((a-b)//3)))\n    if b%5 == 0:\n        return str(min(abs((a-b)//5),abs((a-b)//3)))\n    return str(-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    a = int(a)\n    b = int(b)\n    if a % 2 == 0 and b % 2 == 0:\n        return \"0\"\n    elif a % 3 == 0 and b % 3 == 0:\n        return \"1\"\n    elif a % 5 == 0 and b % 5 == 0:\n        return \"2\"\n    elif a % 5 == 0 and b % 5 == 0:\n        return \"3\"\n    elif a % 2 == 0 and b % 2 == 0:\n        return \"2\"\n    elif a % 2 == 0 and b % 2 == 0:\n        return \"3\"\n    elif a % 2 == 0 and b % 2 == 0:\n        return \"4\"\n    elif a % 2 == 0 and b % 2 == 0:\n        return \"5\"\n    elif a % 2 == 0 and b % 2 == 0:\n        return \"6\"\n    else:\n        return \"3\"\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        print(0)\n        return\n    if a > b:\n        a, b = b, a\n    if a % 2 == 0:\n        return -1\n    else:\n        for i in range(a, a * 2, a):\n            if i % 2 == 0:\n                continue\n            elif i % 3 == 0:\n                continue\n            elif i % 5 == 0:\n                continue\n            else:\n                return f\"{i} {(i // 2)}\"\n\nsolution(input())\n\nTest.assert_equals(solution('5 5'), '6 7')\nTest.assert_equals(solution('15 20'), '3')\nTest.assert_equals(solution('5 8'), '-1')\nTest.assert_equals(solution('6 6'), '0')\nTest.assert_equals(solution('10 10'), '0')\nTest.assert_equals(solution('20 20'), '0')\nTest.assert_equals(solution('30 30'), '2')\nTest.assert_equals(solution('40 40'), '2')\nTest.assert_equals(solution('50 50'), '2')\nTest.assert_equals(solution('60 60'), '1')\nTest.assert_equals(solution('60 60'), '2')\nTest.assert_equals(solution('60 60'), '3')\nTest.assert_equals(solution('60 60'), '4')\nTest.assert_equals(solution('60 60'), '5')\nTest.assert_equals(solution('60 60'), '6')\nTest.assert_equals(solution('60 60'), '7')\nTest.assert_equals(solution('60 60'), '8')\nTest.assert_equals(solution('60 60'), '9')\nTest.assert_equals(solution('60 60'), '10')\nTest.assert_equals(solution('60 60'), '11')\nTest.assert_equals(solution('60 60'), '12')\nTest.assert_equals(solution('60 60'), '13')\nTest.assert_equals(solution('60 60'), '14')\nTest.assert_equals(solution('60 60'), '15')\nTest.assert_equals(solution('60 60'), '16')\nTest.assert_equals(solution('60 60'), '17')\nTest.assert_equals(solution('60 60'), '18')\nTest.assert_equals(solution('60 60'), '19')\nTest.assert_equals(solution('60 60'), '20')\nTest.assert_equals(solution('60 60'), '21')\nTest.assert_equals(solution('60 60'), '22')\nTest.assert_equals(solution('60 60'), '23')\nTest.assert_equals(solution('60 60'), '24')\nTest.assert_equals(solution('60 60'), '25')\nTest.assert_equals(solution('60 60'), '26')\nTest.assert_equals(solution('60 60'), '27')\nTest.assert_equals(solution('60 60'), '28')\nTest.assert_equals(solution('60 60'), '29')\nTest.assert_equals(solution('60 60'), '30')\nTest.assert_equals(solution('60 60'), '31')\nTest.assert_equals(solution('60 60'), '32')\nTest.assert_equals(solution('60 60'), '33')\nTest.assert_equals(solution('60 60'), '34')\nTest.assert_equals(solution('60 60'), '35')\nTest.assert_equals(solution('60 60'), '36')\nTest.assert_equals(solution('60 60'), '37')\nTest.assert_equals(solution('60 60'), '38')\nTest.assert_equals(solution('60 60'), '39')\nTest.assert_equals(solution('60 60'), '40')\nTest.assert_equals(solution('60 60'), '41')\nTest.assert_equals(solution('60 60'), '42')\nTest.assert_equals(solution('60 60'), '43')\nTest.assert_equals(solution('60 60'), '44')\nTest.assert_equals(solution('60 60'), '45')\nTest.assert_equals(solution('60 60'), '46')\nTest.assert_equals(solution('60 60'), '47')\nTest.assert_equals(solution('60 60'), '48')\nTest.assert_equals(solution('60 60'), '49')\nTest.assert_equals(solution('60 60'), '50')\nTest.assert_equals(solution('60 60'), '51')\nTest.assert_equals(solution('60 60'), '52')\nTest.assert_equals(solution('60 60'), '53')\nTest.assert_equals(solution('60 60'), '54')\nTest.assert_equals(solution('60 60'), '55')\nTest.assert_equals(solution('60 60'), '56')\nTest.assert_equals(solution('60 60'), '57')\nTest.assert_equals(solution('60 60'), '58')\nTest.assert_equals(solution('60 60'), '59')\nTest.assert_equals(solution('60 60'), '60')\nTest.assert_equals(solution('60 60'), '61')\nTest.assert_equals(solution('60 60'), '62')\nTest.assert_equals(solution('60 60'), '63')\nTest.assert_equals(solution('60 60'), '64')\nTest.assert_equals(solution('60 60'), '65')\nTest.assert_equals(solution('60 60'), '66')\nTest.assert_equals(solution('60 60'), '67')\nTest.assert_equals(solution('60 60'), '68')\nTest.assert_equals(solution('60 60'), '69')\nTest.assert_equals(solution('60 60'), '70')\nTest.assert_equals(solution('60 60'), '71')\nTest.assert_equals(solution('60 60'), '72')\nTest.assert_equals(solution('60 60'), '73')\nTest.assert_equals(solution('60 60'), '74')\nTest.assert_equals(solution('60 60'), '75')\nTest.assert_equals(solution('60 60'), '76')\nTest.assert_equals(solution('60 60'), '77')\nTest.assert_equals(solution('60 60'), '78')\nTest.assert_equals(solution('60 60'), '79')\nTest.assert_equals(solution('60 60'), '80')\nTest."
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0:\n        if a == b:\n            print(0)\n        elif a > b:\n            print(a//2-b//2)\n        else:\n            print(a//2+b//2)\n    else:\n        print(-1)\n    return ''"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    q = 1\n    count = 1\n    while q <= min(n, m):\n        if n % q == 0 and m % q == 0:\n            count = 0\n        else:\n            count += 1\n        q += 1\n    return count\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a, b = map(int, stdin.split())\n    # print(a,b)\n    if a == b:\n        return \"0\"\n    elif a % 2 == 0 and b % 2 == 0:\n        if a / 2 == b / 2:\n            return \"0\"\n        else:\n            return \"1\"\n    elif a % 3 == 0 and b % 3 == 0:\n        if a / 3 == b / 3:\n            return \"0\"\n        else:\n            return \"1\"\n    elif a % 5 == 0 and b % 5 == 0:\n        if a / 5 == b / 5:\n            return \"0\"\n        else:\n            return \"1\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = a//2 if a%2 == 0 else a//3 if a%3 == 0 else a//5\n    if (a + b)%2 == 0:\n        return str(c)\n    return -1\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b = list(map(int,stdin.split()))\n    if a%2 == 0 and b%2 == 0:\n        return \"0\"\n    if a%2 == 0 and b%3 == 0:\n        return \"1\"\n    if a%3 == 0 and b%2 == 0:\n        return \"1\"\n    if a%5 == 0 and b%4 == 0:\n        return \"1\"\n    if a%2 == 0 and b%4 == 0:\n        return \"1\"\n    if a%4 == 0 and b%2 == 0:\n        return \"1\"\n    return \"2\"\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(find_min_ops(int(stdin.split()[0]), int(stdin.split()[1])))\n    return\ndef"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return '-1' if not all(i == c[0] or i == c[n - 1] for i in c) else str(min(c[i] + a if c[i]!= c[n - 1 - i] else a + b for i in range(n)))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    m = len(c)\n    if m == 1:\n        if c[0] == 1:\n            return str(a)\n        else:\n            return str(b)\n    elif m == 2:\n        if c[0] == 1 and c[1] == 1:\n            return str(a)\n        if c[0] == 0 and c[1] == 0:\n            return str(b)\n        else:\n            return str(-1)\n    else:\n        a1 = a\n        a2 = b\n        if c[0] == 0:\n            a2 += 1\n        else:\n            a1 -= 1\n        if c[-1] == 0:\n            a1 += 1\n        else:\n            a2 -= 1\n        if a1 == a2:\n            return str(a)\n        else:\n            return str(-1)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    inp = stdin.split()\n    l = [int(i) for i in inp]\n    l = l[:n]\n    if l == l[::-1]:\n        print(-1)\n    else:\n        a_cost = a + b\n        b_cost = b\n        res = False\n        for i in range(n):\n            if l[i] == 1:\n                a_cost -= b_cost\n            elif l[i] == 0:\n                a_cost -= b_cost\n                if a_cost <= 0:\n                    print(a_cost)\n                    res = True\n                    break\n                else:\n                    continue\n            elif l[i] == 2:\n                b_cost -= a_cost\n                if b_cost <= 0:\n                    print(b_cost)\n                    res = True\n                    break\n                else:\n                    continue\n            else:\n                print(-1)\n                res = True\n                break\n        if not res:\n            print(a_cost + b_cost)"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    n, w, b = input[0], input[1], input[2]\n    costs = [w, b]\n    color = [2, 0]\n    for _ in range(n - 2):\n        color = [1, 0] if color == [0, 1] else [0, 1]\n        costs.append(w if color == [1, 0] else b)\n    return''.join([str(i) for i in costs])\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    if len(c)!= n:\n        return -1\n\n    for i in range(n):\n        if c[i] < a or c[i] > b:\n            return -1\n\n    if all(c[i] == a for i in range(n)):\n        return a * n\n    elif all(c[i] == b for i in range(n)):\n        return b * n\n    else:\n        return -1\n\n\nsolution('5 100 1')\n\nsolution('3 10 12')\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    palindromes = []\n    for color in colors:\n        if color == 0:\n            palindromes.append(0)\n        elif color == 1:\n            palindromes.append(1)\n        else:\n            palindromes.append(2)\n    # print(palindromes)\n    min_price = 1000000\n    max_price = -1\n    for i in range(len(palindromes) - 1):\n        if palindromes[i] == palindromes[i + 1]:\n            # print(\"if\")\n            # print(i)\n            if palindromes[i] == 1:\n                # print(\"1\")\n                max_price = max(max_price, a)\n                min_price = min(min_price, b)\n            elif palindromes[i] == 2:\n                # print(\"2\")\n                min_price = min(min_price, a)\n                max_price = max(max_price, b)\n            else:\n                # print(\"3\")\n                min_price = min(min_price, a)\n                max_price = max(max_price, b)\n    # print(min_price)\n    # print(max_price)\n    if min_price > max_price:\n        # print(\"else\")\n        return \"-1\"\n    else:\n        return str(min_price)"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(_) for _ in stdin.split())\n    c = list(map(int, stdin.split()))\n    if (c[0] - c[n - 1]) % 2:\n        return -1\n    cost_white = (c[0] - c[1]) // 2\n    cost_black = (c[0] - c[n - 1]) // 2\n    print(min(cost_white, cost_black))\n    return min(cost_white, cost_black)"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    if n % 2 == 0:\n        return str(int((n * (n - 1))/2) + int((n - 2) * a) + int((n - 1) * b))\n    else:\n        return str(int((n * (n - 1))/2) + int((n - 1) * a) + int((n - 2) * b))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, a, b = map(int, stdin.split())\n    if N == 1:\n        return str(0)\n    a_chk = 0\n    b_chk = 0\n    for i in range(N):\n        c = int(stdin.split()[i])\n        if c == 1:\n            a_chk = 1\n        else:\n            b_chk = 1\n    if a_chk == 0 and b_chk == 1:\n        return str(b)\n    if a_chk == 1 and b_chk == 0:\n        return str(a)\n    return str(-1)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n\n    def check(a, b, c):\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == c and b[i][j] == c:\n                    return False\n        return True\n\n    def solve(a, b, c):\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == c:\n                    b[i][j] = c\n                    if check(a, b, c):\n                        return True\n                    else:\n                        b[i][j] = '.'\n                        return False\n        return True\n\n    def solve2(a, b, c):\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == c:\n                    if b[i][j] == '.':\n                        b[i][j] = c\n                        if check(a, b, c):\n                            return True\n                        else:\n                            b[i][j] = '.'\n                    else:\n                        return False\n        return True\n\n    a = [['.' for _ in range(k)] for _ in range(k)]\n    b = [['.' for _ in range(k)] for _ in range(k)]\n    c = 0\n    while True:\n        if solve2(a, b, c):\n            break\n        if c == k * k - 1:\n            break\n        c += 1\n\n    if c == k * k - 1:\n        return '-1'\n    return str(c) + '\\n' + ''.join([''.join(i) for i in a]) + '\\n' + ''.join([''.join(i) for i in b])\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_neighbouring(y1, x1, y2, x2):\n        if abs(y1 - y2) == abs(x1 - x2) and (y1, x1)!= (y2, x2):\n            return True\n        return False\n\n    cube = [list(line) for line in stdin.splitlines()]\n    n = len(cube)\n    # print(n)\n    # print(cube)\n    result = '\\n'.join(''.join(line) for line in cube)\n    # print(result)\n    # print('\\n'.join(cube))\n\n    white = []\n    black = []\n    for i in range(n):\n        for j in range(n):\n            if cube[i][j] == 'w':\n                white.append((i, j))\n            elif cube[i][j] == 'b':\n                black.append((i, j))\n\n    # print(white)\n    # print(black)\n\n    def add_neighbours(x, y):\n        for i, j in white:\n            if is_neighbouring(x, y, i, j):\n                white.append((x, y))\n        for i, j in black:\n            if is_neighbouring(x, y, i, j):\n                black.append((x, y))\n\n    for i in range(n):\n        for j in range(n):\n            if cube[i][j] == 'b':\n                add_neighbours(i, j)\n            elif cube[i][j] == 'w':\n                add_neighbours(i, j)\n\n    # print(white)\n    # print(black)\n\n    for i in range(n):\n        if len(white) == len(black):\n            return '\\n'.join(''.join(line) for line in cube)\n        temp_cube = cube[:]\n        for y in range(n):\n            for x in range(n):\n                if (x, y) in white and (x, y) in black:\n                    temp_cube[i][y] = 'b'\n                    temp_cube[y][i] = 'w'\n        temp_result = '\\n'.join(''.join(line) for line in temp_cube)\n        # print(temp_result)\n        if temp_result!= '\\n'.join(''.join(line) for line in cube):\n            return -1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    colors = \"w\" + \"b\" * (k - 1)\n    #print(colors)\n    for i in range(k):\n        paint(colors, i, 0)\n        for j in range(k):\n            paint(colors, i, j)\n    return colors\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    # Input:\n    # For size = 2:\n    #     1 2\n    #     w b\n    #     b w\n    #     b w\n    #     w b\n    #     w b\n    # For size = 3:\n    #     1 2 3\n    #     w b w\n    #     b w b\n    #     b w b\n    #     w b w\n    #     w b w\n    #     b w w\n    #     b w w\n    #     w b w\n    #     w b w\n    # For size = 4:\n    #     1 2 3 4\n    #     w b w b\n    #     b w b w\n    #     b w b w\n    #     w b w b\n    #     w b w b\n    #     b w b w\n    #     b w b w\n    #     w b w b\n    #     w b w b\n    #     b w b w\n    #     b w b w\n    #     w b w b\n    #     w b w b\n    # For size = 5:\n    #     1 2 3 4 5\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    #     w b w b w\n    #     w b w b w\n    #     b w b w b\n    #     b w b w b\n    "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(k):\n        temp = []\n        for j in range(k):\n            temp.append([])\n            for l in range(k):\n                temp[i].append([])\n        for j in range(k):\n            for l in range(k):\n                temp[j][l] = \"w\"\n        k = 3\n    \n    for i in range(k):\n        temp = []\n        for j in range(k):\n            temp.append([])\n            for l in range(k):\n                temp[i].append(\"b\")\n        for j in range(k):\n            for l in range(k):\n                temp[j][l] = \"b\"\n        for j in range(k):\n            for l in range(k):\n                temp[j][l] = \"w\"\n        print(''.join(map(str, temp)))\n    \n    return ''.join(map(str, temp))\n        \n\n        \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"__\""
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Do not edit this file\n    '''\n    K = int(stdin)\n    if K < 1:\n        return -1\n    if K > 100:\n        return -1\n    def compare_colors(c1, c2):\n        if c1 == 'w' and c2 == 'b':\n            return -1\n        elif c1 == 'b' and c2 == 'w':\n            return 1\n        return 0\n    def compare_neighbours(cube1, cube2):\n        # white and white\n        if (compare_colors(cube1['color'], cube2['color']) == 0):\n            return 1\n        # white and black\n        if (compare_colors(cube1['color'], cube2['color']) == 1):\n            return 1\n        # black and white\n        if (compare_colors(cube1['color'], cube2['color']) == -1):\n            return 1\n        # black and black\n        if (compare_colors(cube1['color'], cube2['color']) == 0):\n            return 2\n        return 0\n    def compare_colors_for_layer(layer):\n        result = []\n        for x in range(0, K):\n            result.append([])\n            for y in range(0, K):\n                result[x].append([])\n                for z in range(0, K):\n                    result[x][y].append(0)\n        for x in range(0, K):\n            for y in range(0, K):\n                for z in range(0, K):\n                    color_layer = []\n                    for i in range(0, K):\n                        color_layer.append(0)\n                    for i in range(0, K):\n                        color_layer.append(0)\n                    for i in range(0, K):\n                        color_layer.append(0)\n                    color_layer.append(0)\n                    color_layer.append(0)\n                    color_layer.append(0)\n                    if x == y:\n                        color_layer[x + K * y + K * K * z] = 1\n                    if x == y and x + K * y + K * K * z < K:\n                        color_layer[x + K * y + K * K * z + K * K] = 1\n                    if x == y and x + K * y + K * K * z + K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K + K] = 1\n                    if x == y and x + K * y + K * K * z + K * K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K * K + K * K] = 1\n                    if x == y and x + K * y + K * K * z + K * K * K + K * K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K * K + K * K * K + K * K * K] = 1\n                    if y == z:\n                        color_layer[x + K * y + K * K * z] = 1\n                    if y == z and x + K * y + K * K * z < K:\n                        color_layer[x + K * y + K * K * z + K * K] = 1\n                    if y == z and x + K * y + K * K * z + K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K + K] = 1\n                    if y == z and x + K * y + K * K * z + K * K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K * K + K * K] = 1\n                    if y == z and x + K * y + K * K * z + K * K * K + K * K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K * K + K * K * K + K * K * K] = 1\n                    if y == z and x + K * y + K * K * z + K * K * K + K * K * K * K < K:\n                        color_layer[x + K * y + K * K * z + K * K * K + K * K * K * K + K * K * K * K] = 1\n                    if z == x + K * y + K * K * z:\n                        color_layer[x + K * y + K * K * z + K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K * K * K:\n                        color_layer[x + K * y + K * K * z + K * K * K * K + K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K * K * K + K * K * K * K * K:\n                        color_layer[x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K:\n                        color_layer[x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K + K * K * K * K * K * K * K:\n                        color_layer[x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K + K * K * K * K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K + K * K * K * K * K * K * K:\n                        color_layer[x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K + K * K * K * K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K + K * K * K * K * K * K * K:\n                        color_layer[x + K * y + K * K * z + K * K * K * K + K * K * K * K * K + K * K * K * K * K * K + K * K * K * K * K * K * K] = 1\n                    if z == x + K * y + K * K * z + K * K *"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # my code here\n    print(stdin)\n    def paint(k, count, matrix):\n        if count == 0:\n            return\n        if count == 2:\n            for i in range(k):\n                for j in range(k):\n                    matrix[i][j] = 'w'\n            return\n        for i in range(k):\n            for j in range(k):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = 'b'\n                    count -= 1\n                    paint(k, count, matrix)\n                    matrix[i][j] = 'w'\n                elif matrix[i][j] == 'b':\n                    matrix[i][j] = 'w'\n                    count -= 1\n                    paint(k, count, matrix)\n                    matrix[i][j] = 'b'\n        return\n    \n    k = int(stdin)\n    matrix = [['w'] * k for _ in range(k)]\n    paint(k, k**3, matrix)\n    for i in range(k):\n        for j in range(k):\n            print(matrix[i][j], end='')\n        print()\n    return stdin\n\nsolution(stdin)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans = [['-'] * len(stdin) for _ in range(len(stdin))]\n    for j in range(len(stdin)):\n        for i in range(len(stdin)):\n            if stdin[j][i] == 'w':\n                if stdin[j - 1][i - 1] == 'w':\n                    ans[j][i] = 'w'\n                elif stdin[j - 1][i] == 'w':\n                    ans[j][i] = 'b'\n                elif stdin[j - 1][i + 1] == 'w':\n                    ans[j][i] = 'b'\n            elif stdin[j][i] == 'b':\n                if stdin[j + 1][i - 1] == 'b':\n                    ans[j][i] = 'w'\n                elif stdin[j + 1][i] == 'b':\n                    ans[j][i] = 'b'\n                elif stdin[j + 1][i + 1] == 'b':\n                    ans[j][i] = 'b'\n    return \"\\n\".join(\"\".join(i) for i in ans)\n\n\nprint(solution(stdin))"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    if size < 3:\n        return -1\n    \n    #print(stdin)\n    #print(type(stdin))\n    #print(type(int(stdin)))\n    if stdin == \"1\\n\":\n        return \"w\" * size\n    if stdin == \"2\\n\":\n        return \"b\" * size\n    if stdin == \"3\\n\":\n        return \"w\" + \"w\" * size + \"w\"\n    if stdin == \"4\\n\":\n        return \"w\" + \"w\" * size + \"w\"\n    return -1"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for x in range(1, n):\n        if (x * x) % n == 0:\n            return x\n    return x\n\nstdin = '10'\nprint(solution(stdin))\nstdin = '12'\nprint(solution(stdin))\n\n\n\n'''\ndef"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    while number > 0:\n        if not is_divisible(number):\n            return str(number)\n        number -= 1\ndef"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(stdin))"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_divisor = 1\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            if i > max_divisor:\n                max_divisor = i\n    return str(max_divisor)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return -1\n    square_root_n = int(sqrt(n))\n    divs = set()\n    for i in range(1, square_root_n + 1):\n        if n % i == 0:\n            divs.add(i)\n    return len(divs)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for i in range(1, int(stdin) + 1):\n        if sum(int(j) ** 2 for j in str(i)) == i:\n            result += str(i) + \" \"\n    return result[:-1]\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candidates = []\n    for i in range(1, n):\n        if n % i == 0:\n            candidates.append(i)\n    return max(candidates)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(max(n, 2))\n    while n > 2:\n        s = str(max(n, 2))\n        while int(s) % 2 == 0:\n            s = str(max(n, 2))\n        n -= 1\n    return s\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    divisors = []\n    divisor_squares = []\n    for i in range(1,n+1):\n        divisors.append(i)\n        divisor_squares.append(i**2)\n    \n    divisor_squares = sorted(divisor_squares)\n    for i in divisor_squares:\n        if i not in divisors:\n            ans = i\n            break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin)\n    # seating = stdin.strip()\n    # for i in range(1, N):\n    #     if seats[i - 1] == 1:\n    #         if seats[i] == 1:\n    #             seats[i] = 0\n    #         elif seats[i] == 0:\n    #             seats[i] = 1\n    #     elif seats[i - 1] == 0:\n    #         if seats[i] == 1:\n    #             seats[i] = 0\n    #         elif seats[i] == 0:\n    #             seats[i] = 1\n    #     else:\n    #         print('No')\n    #         break\n    # else:\n    #     print('Yes')\n    # return seats\n    N = int(stdin)\n    seating = stdin.strip()\n    chairs = 0\n    for seat in seating:\n        if seat == '0':\n            chairs += 1\n        if chairs == N - 1:\n            print('Yes')\n            return\n    print('No')"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nInput:\n3\n101\nOutput:\nYes\n\nInput:\n4\n1011\nOutput:\nNo\n\nInput:\n5\n10001\nOutput:\nNo\n\nInput:\n6\n10001000\nOutput:\nYes\n'''\nimport sys\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_chairs = int(stdin)\n    chairs = stdin.split()\n    seats = []\n    for i in chairs:\n        if i == '1':\n            seats.append(i)\n    while len(seats) > 1:\n        for i in range(len(seats)-1):\n            if seats[i] == seats[i+1]:\n                return \"No\"\n        seats.pop(0)\n        seats.pop(-1)\n    return \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chr_in_seats = {0: \" \", 1: \"L\"}\n    seating = \"\"\n\n    # while seats has more than 2 adjacent seats, seat next\n    while (n - 1) >= 2:\n        # seats has no adjacent seats, seat next\n        if (n - 1) % 2 == 0:\n            seating += \"1\"\n        else:\n            seating += \"0\"\n        n -= 1\n    # If this seat has a neighbour to the right, it can be occupied, but no one else can\n    if n == 2:\n        if (n - 1) % 2 == 0:\n            seating += \"1\"\n        else:\n            seating += \"0\"\n        return \"No\"\n\n    # Check if there are 2 adjacent seats, if not return No\n    if n == 1:\n        return \"No\"\n    # return Yes if the seat can be occupied and there is a neighbour to the right.\n    return \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    seating = stdin.strip().split()\n    count_occupied = 0\n    max_occupied = 0\n    n = len(seating)\n    for i in range(n):\n        if seating[i] == '0':\n            count_occupied += 1\n        elif seating[i] == '1' and count_occupied == 0:\n            count_occupied = 1\n        elif seating[i] == '1' and count_occupied > 0:\n            max_occupied = count_occupied\n            break\n        elif seating[i] == '1' and count_occupied == 1:\n            max_occupied = max(count_occupied, max_occupied)\n            break\n        elif seating[i] == '1' and count_occupied > 1:\n            max_occupied = max(count_occupied, max_occupied)\n            break\n    return 'Yes' if max_occupied == count_occupied else 'No'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_maximal_seating(list(stdin)) else 'No'\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seats = stdin.split()\n    #print(seats)\n    cols = n*[False]\n    maximal = False\n    i = 0\n    while i < len(seats)-1:\n        if seats[i] == seats[i+1]:\n            print(\"No\")\n            maximal = False\n            break\n        i += 2\n    i = 0\n    while i < len(seats)-1:\n        if seats[i] == seats[i+1]:\n            print(\"Yes\")\n            maximal = True\n            break\n        i += 2\n    return maximal\n\nsolution(\"4\")\nsolution(\"10\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1]))\n\n    def get_k(a: list, k: int) -> list:\n        return a[:k] + a[k:][::-1]\n\n    def check_satisfy(a: list) -> bool:\n        if a[-1]!= a[0]:\n            return False\n        for i in range(1, len(a)-1):\n            if a[i-1] + a[i]!= a[i+1]:\n                return False\n        return True\n\n    for k in range(1, n+1):\n        if check_satisfy(get_k(a, k)):\n            return str(k)\n    return \"0\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = [0]\n    for i in range(len(a) - 1):\n        ans.append(a[i] + ans[-1])\n    k = len(ans) - 1\n    while k >= 0 and ans[k] > n:\n        k -= 1\n    if k >= 0:\n        print(k)\n        return '\\n'.join(map(str, ans[k + 1:]))\n    else:\n        print(len(ans) - 1)\n        return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.insert(0, 0)\n    x = []\n    for k in range(n+1):\n        x.append((a[k]-x[k])%n)\n    return str(len(set(x))) + '\\n' + '\\n'.join(map(str, sorted(set(x))))\nsolution(input())\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    def all_subsets(a):\n        for i in range(len(a) + 1):\n            for subset in all_subsets(a[:i]):\n                yield subset + a[i:]\n\n    return len(list(all_subsets(a)))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: list = stdin.split()[1:]\n    res = []\n    for k in range(1, n + 1):\n        accum: int = 0\n        for i in range(k):\n            accum += int(a[i])\n        res.append(str(accum))\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split()))\n    k = n\n    while k >= n:\n        if not (a[0] + a[k - 1]) % k == 0:\n            k -= 1\n        else:\n            break\n    return str(k)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    l = len(a)\n    \n    # sum of array\n    s = 0\n    for i in range(l):\n        s += a[i]\n    \n    # sum of single digit, divisible by 3\n    s2 = 0\n    for i in range(l):\n        s2 += a[i]\n        if i % 3 == 0:\n            s2 += a[i]\n    \n    # sum of single digit, divisible by 5\n    s3 = 0\n    for i in range(l):\n        s3 += a[i]\n        if i % 5 == 0:\n            s3 += a[i]\n    \n    # sum of single digit, divisible by 7\n    s4 = 0\n    for i in range(l):\n        s4 += a[i]\n        if i % 7 == 0:\n            s4 += a[i]\n    \n    # total\n    s5 = s - s2 - s3 - s4\n    \n    # total divisible by 3\n    s6 = s2 - s3\n    \n    # total divisible by 5\n    s7 = s3 - s4\n    \n    # total divisible by 7\n    s8 = s4 - s5\n    \n    # total divisible by 3 and 5\n    s9 = s6 - s7\n    \n    # total divisible by 3 and 7\n    s10 = s7 - s8\n    \n    # total divisible by 3 and 5 and 7\n    s11 = s8 - s9\n    \n    # total divisible by 3, 5, and 7\n    s12 = s9 - s10\n    \n    # total divisible by 3, 5, and 7 and 9\n    s13 = s10 - s11\n    \n    # total divisible by 3, 5, and 7, 9 and 11\n    s14 = s11 - s12\n    \n    # total divisible by 3, 5, and 7, 9, and 11 and 13\n    s15 = s12 - s13\n    \n    # total divisible by 3, 5, and 7, 9, 11, 13, and 17\n    s16 = s13 - s14\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, and 17\n    s17 = s14 - s15\n    \n    # total divisible by 3, 5, 7, 9, 11, 13 and 17 and 19\n    s18 = s15 - s16\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, and 23\n    s19 = s16 - s17\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, and 29\n    s20 = s17 - s18\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29 and 31\n    s21 = s18 - s19\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31 and 37\n    s22 = s19 - s20\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37 and 41\n    s23 = s20 - s21\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41 and 43\n    s24 = s21 - s22\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43 and 47\n    s25 = s22 - s23\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 and 53\n    s26 = s23 - s24\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53 and 59\n    s27 = s24 - s25\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59 and 61\n    s28 = s25 - s26\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61 and 67\n    s29 = s26 - s27\n    \n    # total divisible by 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    x = list(map(int, stdin.split()))\n    return str(x[0])\n    for i in range(1, n):\n        for j in range(i):\n            x[j] += x[j - 1]\n    for k in range(n - 1):\n        if x[k] % n!= 0:\n            return str(n)\n    return str(len(set(x)))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = list(map(int, stdin.split()))\n    return str(solve(x, n))\n\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    scores = [int(x) for x in stdin.split()]\n    n = len(scores)\n    \n    s = sum(scores)\n    \n    if n % 3!= 0:\n        return \"NO\"\n    \n    a = sum(scores[0:3])\n    b = sum(scores[3:6])\n    c = sum(scores[6:])\n    \n    if a!= b and a!= c:\n        return \"NO\"\n    \n    if a == b and a == c:\n        return \"YES\"\n    \n    if a == b:\n        if a + c!= s:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    if a == c:\n        if b + a!= s:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    if b == c:\n        if a + b!= s:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    if a == c:\n        if b + c!= s:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    a = list(map(int, input[1:]))\n    a = sorted(a)\n    a = sorted(a, reverse=True)\n    a = sorted(a, reverse=True)\n    a.reverse()\n    if a[0] == a[1] == a[2]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For this challenge, you need to return a correct output.\n    \"\"\"\n    if is_even(int(stdin)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    score = sorted(map(int, stdin.split()))\n    score.reverse()\n    team1 = score[:3]\n    team2 = score[3:]\n    if team1 == team2:\n        return \"YES\"\n    else:\n        return \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    scores = list(map(int, stdin.split()))\n    sum_scores = sum(scores)\n    if sum_scores % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    team = sum([int(i) for i in stdin.split()])\n    if team % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    score_1, score_2, *_, score_3 = map(int, stdin.split())\n\n    if score_1 + score_2 > score_3:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = list(map(int, stdin.split()))\n    if len(set(scores))!= n:\n        return \"NO\"\n    score_sum = sum(scores)\n    if score_sum % n == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    scores = stdin.split(\" \")\n    scores = list(map(int, scores))\n    scores.sort()\n    if scores[-1] == scores[-2] or scores[-1] == scores[-3]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([1 if x % 3 == 0 else 0 for x in range(int(stdin.split()[0]), int(stdin.split()[1]))]))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp, out = stdin.split('\\n')\n    inp = int(inp)\n    out = int(out)\n\n    cnt = 0\n    for i in range(1, out + 1):\n        if not isPrime(i):\n            continue\n        for j in range(1, out + 1):\n            if not isPrime(i * j):\n                continue\n            if i * j == out:\n                cnt += 1\n\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    count = 0\n    for i in range(1, r):\n        if is_prime(i):\n            if (i % 2 == 0) or (i % 3 == 0):\n                count += 1\n            #print(\"i\", i)\n    print(count)\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(2**n * 3**(m-n))-1)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.strip().split()))\n    p = 2\n    n = 1\n    i = 3\n    while p*i <= r:\n        n += 2**(p*i)\n        p *= i\n        i += 1\n    i -= 1\n    print(n - 2**(p-1) - 1)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    if l < 2 or r < 2:\n        return \"1\"\n    count = 0\n    for i in range(2, int(2 ** (.5) + 1)):\n        if 2 ** (.5) <= i:\n            break\n        if r % i == 0:\n            if r // i < i:\n                count += 1\n            else:\n                count += 1\n                count += (r // i)\n    return str(count)\n\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    l, r = map(int, stdin.split())\n    count = 0\n    for i in range(l, r + 1):\n        temp = i\n        while temp > 0:\n            if temp % 2 == 0:\n                temp = temp // 2\n            else:\n                temp = temp // 3\n            if temp == 1:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a, b = line\n    a = int(a)\n    b = int(b)\n    cnt = 0\n    for i in range(a, b + 1):\n        if i == 1:\n            continue\n        if i == 2:\n            cnt += 1\n            continue\n        if i == 3:\n            cnt += 1\n            continue\n        if i % 2 == 0 or i % 3 == 0:\n            continue\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            cnt += 1\n    return cnt\n\nprint(solution(input()))"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split(' '))\n    count = 0\n    for i in range(1, n1 + 1):\n        if i * 2 == n2 or i * 3 == n2:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - k)"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    k = 1\n    count = 0\n    while n >= k * (k + 1) / 2:\n        n -= k * (k + 1) / 2\n        count += (k + 1) * (k + 2) / 2\n        k += 1\n    return str(count)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the number of candies, which Alya ate.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if n == 1:\n        if k == 0:\n            return 0\n        elif k == 1:\n            return 1\n    elif k == 0:\n        return n\n    if k % 2 == 0:\n        return n - (k - 1)\n    else:\n        return n - k\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n*k)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(min(n, k))"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def action(num_candies):\n        if len(box) == 0:\n            return num_candies\n        else:\n            return num_candies - 1\n\n    def eat(candies):\n        nonlocal box\n        if len(box) == 0:\n            return candies\n        else:\n            box.remove(min(box))\n            return candies - 1\n\n    n, k = map(int, input().split())\n    box = list(map(int, input().split()))\n    res = 0\n    for i in range(n):\n        if i == k:\n            res += eat(k)\n        if i < k:\n            res += action(k)\n    return str(res)\n\n\nprint(solution('''1 1\n'''))\nprint(solution('''3 2\n'''))\nprint(solution('''3 1\n'''))\nprint(solution('''9 11\n'''))\nprint(solution('''5 0\n'''))\nprint(solution('''5 3\n'''))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    return str(n - k)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = tuple(map(int, stdin.split()))\n    return str(n//k)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(x) for x in stdin.split()]\n    moves = 0\n    k = 0\n    box = 0\n    while k < n:\n        moves += 1\n        if box == 0:\n            box += 1\n            k += 1\n        elif box >= 1:\n            box -= 1\n            k += 1\n        else:\n            box = 0\n            k += 1\n    return str(moves)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 0\n   ... 4\n   ... 3 2\n   ... 3\n   ... 2 1\n   ... 1\n   ... ''')\n    '4'\n    >>> solution('''1 1\n   ... 0\n   ... ''')\n    '0'\n    >>> solution('''9 11\n   ... 4\n   ... 3 2\n   ... 3\n   ... 2 1\n   ... 1\n   ... ''')\n    '4'\n    >>> solution('''5 0\n   ... 3\n   ... 4\n   ... 5\n   ... 3\n   ... ''')\n    '1'\n    >>> solution('''3 2\n   ... 3\n   ... 2\n   ... 1\n   ... ''')\n    '2'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    total = n\n    sweet_sweets = 0\n    moves = 0\n    candies = 0\n    while total > 0:\n        if moves == n:\n            sweet_sweets += candies\n            break\n        if moves == k:\n            sweet_sweets += total\n            total = 0\n            candies = 0\n        if total >= 3:\n            candies += total - 2\n            total = total - 2\n        elif total >= 2:\n            candies += total - 1\n            total = 0\n        else:\n            total = 0\n        moves += 1\n    return str(sweet_sweets)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    a = list(map(int, line[1:]))\n    a.sort()\n    if n == 3:\n        if a[0] + a[1] + a[2] == 0:\n            return \"YES\"\n    elif n == 4:\n        if a[0] == a[1] + a[2] or a[0] == a[2] + a[1]:\n            return \"YES\"\n    else:\n        if a[0] + a[1] + a[2] == 0 or a[0] + a[1] + a[2] == a[3] + a[4]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a) == 3:\n        if a[0] == a[1] == a[2]!= 0:\n            return \"YES\"\n        if a[0] == a[1] == a[2] == 0:\n            return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return \"YES\" if len(a) == 3 and max(a) == sum(a) / 3 else \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lengths = [int(x) for x in stdin.split()]\n    if sum(lengths) % 3!= 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(is_degenerate(a))\n    return\n\n\ndef"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] > a[k]) and (a[k] + a[i] > a[j]) and (a[j] + a[k] > a[i]):\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] + a[j] in a and a[i]!= a[j]:\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    return \"NO\" if len(set(a))!= len(a) else \"YES\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    toy_count, toy_limit = map(int, stdin.split())\n    return \"Yes\" if sum([\n        toy_count + 1,\n        toy_limit * (toy_count + 1) - toy_limit,\n        toy_limit * (toy_limit - 1) + toy_limit\n    ]) == 0 else \"No\"\n\"\"\"\n\n\"\"\"\nInput:\n6 3\n\nOutput:\nYes\n\nInput:\n4 2\n\nOutput:\nNo\n\nInput:\n1000 1001\n\nOutput:\nYes\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    if x == 1:\n        return 'No'\n    elif x >= y:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if x == 1 and y == 1:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = n\n    b = m\n    if a % 2 == 1:\n        a += 1\n    if b % 2 == 1:\n        b += 1\n    if a > n or b > m:\n        return 'No'\n    return 'Yes'\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def transpose(strng):\n        return \"\".join(strng[i] for i in range(len(strng)))\n\n    x, y = map(int, stdin.split())\n    if x == 0 or y == 0:\n        return \"Yes\"\n    elif x < y:\n        return \"No\"\n    else:\n        strng = \"1\" * x + \"0\" * (y - x)\n        m1, m2 = strng[:x], strng[x:]\n        r1 = transpose(m1)\n        r2 = transpose(m2)\n        return \"Yes\" if r1 == r2 else \"No\""
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        return 'Yes'\n    if x == y:\n        return 'No'\n    if x > 2 * y:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    for _ in range(2):\n        if x < 1 or y < 1:\n            return 'No'\n\n        x -= 1\n        y -= 1\n\n    return 'Yes'\n\n\nstdin = '6 3\\n'\nstdin += '5 5\\n'\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 4\n   ... 2\n   ... 7''')\n    'Yes'\n    >>> solution('''5 2\n   ... 2\n   ... 7''')\n    'No'\n    >>> solution('''1000 1001\n   ... 1\n   ... 1000\n   ... 2\n   ... 3\n   ... 1''')\n    'Yes'\n    \"\"\"\n    def machines(toys, copies):\n        # all copies are required\n        if len(toys) == copies:\n            print('Yes')\n            return\n        # at least one copy is needed\n        elif copies == 0:\n            print('No')\n            return\n        # make copies\n        for i in range(toys):\n            copies += 1\n            machines(toys - 1, copies)\n            copies -= 1\n    machines(int(stdin.split()[0]), int(stdin.split()[1]))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = list(map(int, stdin.split('\\n')))\n    n, k = stdin[0], stdin[1]\n    result = 0\n    while len(stdin) < n:\n        stdin.append(stdin[-1])\n    for skill in stdin:\n        result += (skill // 10)\n    return str(result)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(n):\n        t += a[i] // 10\n    for i in range(k):\n        if a[i] < 100:\n            a[i] += 1\n            t = max(t, t + a[i] // 10)\n            a[i] = a[i] % 10\n    return str(t)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = sorted((int(i) for i in stdin.split()))\n    ans = 0\n    for i in range(1, k+1):\n        ans += (a[0] * 10 ** (i - 1))\n    return str(ans)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    total = sum(int(math.floor(a[i] / 10)) for i in range(n))\n\n    for i in range(k):\n        if a[i] % 10 == 0:\n            a[i] = 100\n            total += 100\n        else:\n            a[i] += 1\n            total += int(math.floor(a[i] / 10))\n\n    return str(total)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    a = [x for x in a if x <= 100]\n    if n == 1:\n        return str(max(a[0], 100))\n    if n == 2:\n        return str(max(a[0], a[1], 100))\n    while k > 0:\n        if a[0] >= 100:\n            k -= 1\n            a.pop(0)\n            a.append(a.pop(0))\n        else:\n            k -= 1\n            a.append(a.pop(0))\n    return str(max(a[0], 100))\n\n\nprint(solution('2 4'))\nprint(solution('3 8'))\nprint(solution('2 2'))\nprint(solution('1000000000'))\nprint(solution('5'))\n\ndef"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skills = list(map(int, stdin.split()))\n    min_skill = min(skills)\n    max_skill = max(skills)\n    if max_skill <= k:\n        return str(max_skill)\n    improvements = []\n    for i in range(max(min_skill, k), 100, min_skill):\n        diff = i - min_skill\n        if diff <= k:\n            improvements.append(diff)\n    improvements.sort(reverse=True)\n    res = 0\n    for i in range(min_skill, max_skill):\n        res += int(i)\n        for j in improvements:\n            res += j\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        a[i] = int(a[i]/10)\n    a = sorted(a, reverse=True)\n    i = 0\n    while k > 0:\n        if k >= a[i]:\n            res += k//a[i]\n            k = k%a[i]\n            i += 1\n        else:\n            res += k\n            k = 0\n    return str(res)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    *a, = map(int, stdin.split())\n    return str(max(0, sum(a) - (n - k) * min(a)))"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    skills = [int(i) for i in stdin.split()]\n    # print(n, k)\n    # print(skills)\n    return str(\n        max(\n            [\n                int(\n                    str(\n                        (\n                            10\n                            + int(\n                                lfloor(\n                                    frac(100, 10) * 10\n                                    + lfloor(frac(100, 10) * 10)\n                                )\n                            )\n                        )\n                    )\n                    for i in range(1, n + 1)\n                )\n            ]\n        )\n    )\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # Petya has n skills, and he can improve at most k of them.\n    # The skills are numbered from 1 to n.\n    # The skills can be increased by exactly one.\n    # The skill with the highest rating cannot be higher than 100.\n    # The skill with the highest rating cannot be lower than 0.\n    # Sum of skill ratings is equal to 100.\n    skill_ratings = list(map(int, stdin.split()))\n    skill_ratings = list(map(lambda x: x if x <= 100 else 100, skill_ratings))\n    skill_ratings = list(map(lambda x: x if x >= 0 else 0, skill_ratings))\n    skill_ratings.sort(key=lambda x: x)\n    ans = skill_ratings[-1]\n    return str(ans)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    stdin_list_1 = list(map(int, stdin_list_1))\n    stdin_list_2 = list(map(int, stdin_list_2))\n    min_int = 1\n    for i in range(n):\n        for j in range(m):\n            if stdin_list_1[i] in stdin_list_2 and stdin_list_1[i] <= stdin_list_2[stdin_list_1[i] - 1]:\n                pass\n            else:\n                min_int = min_int * 10 + stdin_list_1[i]\n    return str(min_int)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l1 = list(map(int, stdin.split()))\n    l2 = list(map(int, stdin.split()))\n    # print(l1)\n    # print(l2)\n    min_num = max(l1)\n    for i in range(max(max(l1), max(l2)) + 1):\n        is_in_l1 = True\n        is_in_l2 = True\n        for j in range(m):\n            if i in l1 and l1.count(i) > 0:\n                is_in_l1 = False\n                break\n            if i in l2 and l2.count(i) > 0:\n                is_in_l2 = False\n                break\n        if is_in_l1 and is_in_l2:\n            min_num = i\n            break\n    return str(min_num)\n\nprint(solution(input()))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    n = int(a)\n    m = int(b)\n    lista = []\n    for i in range(n):\n        lista.append(int(stdin.split()[i]))\n    listb = []\n    for i in range(m):\n        listb.append(int(stdin.split()[i+n]))\n    lista.sort()\n    listb.sort()\n    result = []\n    for i in range(len(lista)):\n        for j in range(len(listb)):\n            if lista[i] == listb[j]:\n                result.append(lista[i])\n    result.sort()\n    return str(result[0])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    first = sorted(list(map(int, stdin.split()[0])))\n    second = sorted(list(map(int, stdin.split()[1])))\n    if any(first) and any(second):\n        min_val = 9\n        for x in first:\n            if x in second:\n                min_val = x\n                break\n        return str(min_val)\n    else:\n        return str(min(min_val, 9))\n\nprint(solution(input()))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    first_list = list(map(int, stdin.split()[1]))\n    second_list = list(map(int, stdin.split()[2]))\n\n    for i in range(n):\n        if stdin.split()[1][i] in first_list and stdin.split()[2][i] in second_list:\n            continue\n        else:\n            return 'NO'\n\n    return stdin.split()[0]"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(stdin.split()[i]))\n    numbers.sort()\n    min_val = numbers[0]\n    max_val = numbers[-1]\n    if len(str(min_val)) <= len(str(max_val)):\n        max_val = numbers[-1]\n        min_val = numbers[0]\n    else:\n        min_val = numbers[0]\n        max_val = numbers[-1]\n    print(max_val * min_val)\n    return ''\n\nsolution(\"2 3\") # 25\nsolution(\"8 8\") # 1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split()[1])))\n    b = sorted(list(map(int, stdin.split()[2])))\n    min_pretty = 1\n    # \u4ece\u4e24\u4e2a\u5217\u8868\u4e2d\u627e\u51fa\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5c31\u653e\u5230min_pretty\u4e2d\n    for a_i in a:\n        for b_i in b:\n            if a_i + b_i == n and a_i!= b_i:\n                min_pretty = min(min_pretty, a_i * b_i)\n    return str(min_pretty) if min_pretty else str(n * min(a + b))\n\ninput = '2 3'\nprint(solution(input))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    first_list = [int(i) for i in input().split()]\n    second_list = [int(i) for i in input().split()]\n    min_int = 10 ** 9 + 7\n    #\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n    min_number = min(first_list) + min(second_list)\n    if min_number < min_int:\n        min_int = min_number\n    #\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n    max_number = max(first_list) + max(second_list)\n    if max_number > min_int:\n        min_int = max_number\n\n    return str(min_int)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_first_list = list(map(int, stdin[0].split()))\n    num_second_list = list(map(int, stdin[1].split()))\n\n    # The smallest pretty is the one that has the most digits in common with the second list,\n    # e.g., 25 is the smallest pretty number with 2 and 5 common digits.\n    # It can have digits from the first list, but no digits from the second list.\n    for num in range(max(num_first_list), 1, -1):\n        if all(num in num_first_list for num in num_second_list):\n            return str(num)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # First set some variables and store the numbers\n    #in strings\n    N = int(stdin[0])\n    M = int(stdin[1])\n    numbers = stdin[2]\n    numbers = numbers.split(\" \")\n    num = numbers[0]\n    num = int(num)\n    # Second find the unique numbers\n    # and put them in a dictionary\n    unique_numbers = {}\n    for i in range(len(numbers)):\n        if numbers[i] not in unique_numbers:\n            unique_numbers[numbers[i]] = 1\n        else:\n            unique_numbers[numbers[i]] += 1\n    # Then find the two smallest numbers\n    min_1 = min(unique_numbers.values())\n    min_2 = min(unique_numbers.values())\n    if min_1 == min_2:\n        return \"0\"\n    #Then find all the combinations\n    combs = []\n    for i in unique_numbers.values():\n        if i == min_1:\n            combs.append(1)\n        else:\n            combs.append(0)\n    combs = list(itertools.product(combs, repeat=len(unique_numbers.values())))\n    #And now, check if there is a number that is pretty\n    for comb in combs:\n        test = 0\n        for i in range(len(comb)):\n            if comb[i] == 1:\n                if i == 0:\n                    test += int(num)\n                else:\n                    test += int(num) * 10 ** (i-1)\n        if test >= num and test <= num * 10 ** (len(num)-1):\n            return str(test)\n    return \"0\"\n\nsolution(input())\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    # print(n, k)\n    # return 1\n    d = 2\n    ans = 1\n    i = 1\n    while d * i <= n:\n        if d * i == n:\n            ans = i\n        i += 1\n    return ans"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\nGiven n and k, the number of problems in the contest and the number of minutes Limak needs to get to the party at midnight or earlier.\n\nReturn the maximum number of problems the Limak can solve so that he could get to the party at midnight or earlier.\n'''\nimport collections\nfrom datetime import timedelta, datetime\n\ndef"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(max(0, k - n))\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    print(k)\n    if n <= 1:\n        return 1\n    start = 0\n    finish = n\n    while finish > start:\n        mid = (start + finish) // 2\n        if mid * k > n:\n            start = mid + 1\n        else:\n            finish = mid\n    return start\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k, n))\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 222\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 4 190\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 7 1\n   ... ''')\n    '7'\n    \"\"\"\n    times = stdin.split()\n    n, k = int(times[0]), int(times[1])\n    days = int(n * k / 60)\n    minutes = k - days * 60\n    return str(minutes)\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\nclass Solution:\n    def solve(self, n: int, k: int) -> str:\n        problems = []\n        for _ in range(n):\n            problems.append(int(input()))\n        problems.sort()\n\n        start = problems[0]\n        end = problems[-1]\n\n        # print(start, end)\n\n        result = 0\n        while start + k < end:\n            start += k\n            result += 1\n        return result\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(int(min(2*k, n)))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin.isdigit() else str(int(stdin) + 1)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    res = {1: 1}\n    for a in range(2, 10):\n        cur = res[a]\n        for b in range(a, 10):\n            cur *= b\n        res[a] = cur\n    return str(res[b])\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 1\n    for i in range(2, 10):\n        while (a % i) == 0:\n            a = a // i\n            res += 1\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    in_file = stdin\n    return\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin.strip())\n    max_lcm = b\n    min_lcm = 1\n    for i in range(1, b):\n        temp_lcm = min_lcm*i\n        if temp_lcm % min_lcm == 0:\n            max_lcm = temp_lcm\n        elif temp_lcm % min_lcm!= 0:\n            min_lcm = temp_lcm\n    print(max_lcm)\n    return ''\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_least_common_multiple(a: int, b: int) -> int:\n        '''\n        Returns the least common multiple of a and b\n        '''\n        result = a\n        while result % b!= 0:\n            result += a\n        return result\n    a = int(stdin.strip())\n    result = 1\n    while a!= 0:\n        a, b = divmod(a, 10)\n        result = count_least_common_multiple(result, b)\n    return str(result)"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return str(2 * int(math.ceil(b / 2)))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 1\n    while a!= 0 and b!= 0:\n        if a % 2 == 0 and b % 2 == 0:\n            a = a // 2\n            b = b // 2\n        elif a % 2 == 0:\n            a = a // 2\n        else:\n            b = b // 2\n    return str(a + b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    res = 1\n    while (res) // 2!= 0:\n        if res % 2 == 0:\n            res = res // 2\n        else:\n            res = res * 3 + 1\n    return str(res)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return f'{a // 2}\\n'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(stdin)\n    stdout = ''\n    for i in range(1, n + 1):\n        if l[i - 1] == '<':\n            if i - 1 < 1 or i + 1 > n:\n                stdout += '0'\n            else:\n                stdout += str(i - 1) +'' + str(i + 1)\n        elif l[i - 1] == '>':\n            if i - 1 < 1 or i + 1 > n:\n                stdout += '0'\n            else:\n                stdout += str(i - 1) +'' + str(i + 1)\n        else:\n            stdout += '0'\n    return stdout\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    b = stdin.split()\n    count = 0\n    for i in range(N):\n        if b[i] == '>':\n            count += 1\n        elif b[i] == '<':\n            count -= 1\n    return str(count)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bumpers = stdin.split('<')\n    i = 0\n    s = 0\n    while i < n - 1:\n        if bumpers[i + 1] == '>':\n            s += 1\n        i += 1\n    return str(s)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    b = stdin[1]\n    if b == \"<\":\n        return n - 1\n    else:\n        return n + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = stdin.split()\n    prev = int(b[0])\n    pos = 0\n    count = 0\n    for i in range(1, n):\n        if prev > int(b[i]):\n            pos = pos + 1\n        else:\n            if pos == 0:\n                count = count + 1\n            pos = 0\n        prev = int(b[i])\n    if pos == 0:\n        count = count + 1\n    return str(count)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    types = stdin.readline()\n\n    i = 0\n    j = 0\n    l = 0\n    h = 0\n\n    while i < n:\n        if types[i] == '<':\n            l += 1\n        else:\n            h += 1\n        if l == h:\n            return l\n        i += 1\n\ndef"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4')\n    2\n    >>> solution('5')\n    5\n    >>> solution('4')\n    0\n    \"\"\"\n    # Write your code here\n    n = int(stdin)\n    l = stdin.split()\n    start = l[0]\n    start_pos = 0\n    for i in range(1, len(l)):\n        if l[i] == '>':\n            start_pos += 1\n        else:\n            start_pos -= 1\n    return start_pos"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return  # Your solution goes here\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(len, sorted(stdin.split())))-1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**5:\n        return \"Error\"\n    sticks = list(map(int, stdin.split()))\n    if len(sticks)!= n:\n        return \"Error\"\n    if any(s <= 0 or s > 10**6 for s in sticks):\n        return \"Error\"\n    max_a = max(sticks)\n    n = len(sticks)\n    sticks.sort(reverse=True)\n    total_area = 0\n    for i in range(n):\n        if i < n - 1:\n            min_length = sticks[i]\n            for j in range(i + 1, n):\n                if sticks[j] >= min_length:\n                    min_length = sticks[j]\n                else:\n                    break\n            total_area += min_length * max_a\n        elif i == n - 1:\n            total_area += max_a\n    return str(total_area)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    length = list(map(int, stdin.split()[1:]))\n    if n % 2 == 1:\n        return '0'\n    return '{:.4f}'.format(sum([a ** 2 for a in length]))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    l = list(map(int, stdin[1].split()))\n    return str(max_rectangles(n, l))\ndef"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1]))\n\n    # max_total = 0\n    # #sorting = sorted(sticks, reverse=True)\n    # sticks.sort(reverse=True)\n    # while len(sticks) > 0:\n    #     # min = sticks.pop()\n    #     # while len(sticks) > 0 and sticks[-1] > min:\n    #     #     sticks.pop()\n    #     if len(sticks) == 0:\n    #         break\n    #     if len(sticks) == 1:\n    #         # max_total += (min * (sticks[-1] - min))\n    #         break\n    #     # max_total += (min * (sticks[-1] - min))\n    #     # min = sticks.pop()\n    #     max_total += min * (sticks[-1] - min)\n    #     sticks.pop()\n    #     if len(sticks) > 1:\n    #         # min = sticks.pop()\n    #         # while len(sticks) > 1 and sticks[-1] > min:\n    #         #     sticks.pop()\n    #         #     min = sticks.pop()\n    #         min = sticks.pop()\n    #         while len(sticks) > 0 and sticks[-1] > min:\n    #             sticks.pop()\n    #             min = sticks.pop()\n    #         # max_total += (min * (sticks[-1] - min))\n    #         if min == sticks[-1]:\n    #             break\n    #         else:\n    #             max_total += min * (sticks[-1] - min)\n    #         sticks.pop()\n    #         if len(sticks) > 1:\n    #             min = sticks.pop()\n    #             while len(sticks) > 1 and sticks[-1] > min:\n    #                 sticks.pop()\n    #                 min = sticks.pop()\n    #             max_total += min * (sticks[-1] - min)\n    #             if min == sticks[-1]:\n    #                 break\n    #             else:\n    #                 max_total += min * (sticks[-1] - min)\n    #     else:\n    #         # max_total += (min * (sticks[-1] - min))\n    #         break\n    # #print(max_total)\n    # return str(max_total)\n    sorting = sorted(sticks, reverse=True)\n    sticks.sort(reverse=True)\n    while len(sticks) > 0:\n        min = sticks.pop()\n        while len(sticks) > 0 and sticks[-1] > min:\n            sticks.pop()\n        if len(sticks) == 0:\n            break\n        if len(sticks) == 1:\n            max_total += (min * (sticks[-1] - min))\n            break\n        max_total += (min * (sticks[-1] - min))\n        min = sticks.pop()\n        while len(sticks) > 0 and sticks[-1] > min:\n            sticks.pop()\n            min = sticks.pop()\n    #print(max_total)\n    return str(max_total)\nstdin = '4 2 4 2'\nprint(solution(stdin))"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lengths = sorted(map(int, stdin.split()))\n    print(lengths)\n    def transform(lengths, lengths_left, lengths_right):\n        if lengths_left < lengths_right:\n            return lengths\n        else:\n            assert(len(lengths) > 0)\n            mid = (lengths_left + lengths_right)//2\n            left_min = transform(lengths[:mid], lengths_left, lengths_right)\n            right_min = transform(lengths[mid+1:], lengths_left, lengths_right)\n            if left_min > right_min:\n                return right_min\n            else:\n                return left_min\n\n\n    return transform(lengths, 0, len(lengths)-1)\n\nsolution(\"4 2 4 2\")\nsolution(\"4 5 3 5\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1:]))\n\n    starts = sorted(sticks)\n    ends = sorted(sticks, reverse=True)\n    totals = []\n    while starts:\n        starts = [i for i in starts if i <= ends[0]]\n        totals.append(sum(starts))\n        ends = ends[1:]\n    return str(max(totals))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = []\n    for i in range(n):\n        sticks.append(int(stdin.split()[i]))\n    sticks = sorted(sticks)\n    res = 0\n    while(len(sticks) > 1):\n        if sticks[0] == sticks[-1]:\n            del sticks[-1]\n            continue\n        if sticks[-1] == sticks[0]:\n            del sticks[0]\n            continue\n        if sticks[-1] > sticks[0]:\n            res += sticks[0]*(sticks[-1]-sticks[0])\n            del sticks[-1]\n            del sticks[0]\n            continue\n        if sticks[-1] < sticks[0]:\n            res += sticks[-1]*(sticks[0]-sticks[-1])\n            del sticks[-1]\n            del sticks[0]\n            continue\n    res = res+sticks[0]\n    return str(res)\nprint(solution(input()))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    L = list(map(int, stdin.split()[1:]))\n    total_area = 0\n    L.sort()\n    while len(L) >= 3:\n        total_area += (L[0] * L[1]) + (L[2] * L[3])\n        L = L[4:]\n    return str(total_area)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = stdin.split()\n    for i in range(n):\n        a[i] = list(a[i])\n        for j in range(len(a[i])):\n            if a[i][j] == \"a\":\n                a[i][j] = 1\n            if a[i][j] == \"b\":\n                a[i][j] = 0\n            if a[i][j] == \"d\":\n                a[i][j] = 2\n            if a[i][j] == \"e\":\n                a[i][j] = 3\n            if a[i][j] == \"j\":\n                a[i][j] = 4\n            if a[i][j] == \"h\":\n                a[i][j] = 5\n            if a[i][j] == \"k\":\n                a[i][j] = 6\n            if a[i][j] == \"l\":\n                a[i][j] = 7\n            if a[i][j] == \"m\":\n                a[i][j] = 8\n            if a[i][j] == \"n\":\n                a[i][j] = 9\n            if a[i][j] == \"o\":\n                a[i][j] = 10\n            if a[i][j] == \"p\":\n                a[i][j] = 11\n            if a[i][j] == \"q\":\n                a[i][j] = 12\n            if a[i][j] == \"r\":\n                a[i][j] = 13\n            if a[i][j] == \"s\":\n                a[i][j] = 14\n            if a[i][j] == \"t\":\n                a[i][j] = 15\n            if a[i][j] == \"u\":\n                a[i][j] = 16\n            if a[i][j] == \"v\":\n                a[i][j] = 17\n            if a[i][j] == \"w\":\n                a[i][j] = 18\n            if a[i][j] == \"x\":\n                a[i][j] = 19\n            if a[i][j] == \"y\":\n                a[i][j] = 20\n            if a[i][j] == \"z\":\n                a[i][j] = 21\n            if a[i][j] == \"0\":\n                a[i][j] = 0\n            if a[i][j] == \"1\":\n                a[i][j] = 1\n            if a[i][j] == \"2\":\n                a[i][j] = 2\n            if a[i][j] == \"3\":\n                a[i][j] = 3\n            if a[i][j] == \"4\":\n                a[i][j] = 4\n            if a[i][j] == \"5\":\n                a[i][j] = 5\n            if a[i][j] == \"6\":\n                a[i][j] = 6\n            if a[i][j] == \"7\":\n                a[i][j] = 7\n            if a[i][j] == \"8\":\n                a[i][j] = 8\n            if a[i][j] == \"9\":\n                a[i][j] = 9\n            if a[i][j] == \"a\":\n                a[i][j] = 10\n            if a[i][j] == \"b\":\n                a[i][j] = 11\n            if a[i][j] == \"c\":\n                a[i][j] = 12\n            if a[i][j] == \"d\":\n                a[i][j] = 13\n            if a[i][j] == \"e\":\n                a[i][j] = 14\n            if a[i][j] == \"f\":\n                a[i][j] = 15\n            if a[i][j] == \"g\":\n                a[i][j] = 16\n            if a[i][j] == \"h\":\n                a[i][j] = 17\n            if a[i][j] == \"i\":\n                a[i][j] = 18\n            if a[i][j] == \"j\":\n                a[i][j] = 19\n            if a[i][j] == \"k\":\n                a[i][j] = 20\n            if a[i][j] == \"l\":\n                a[i][j] = 21\n            if a[i][j] == \"m\":\n                a[i][j] = 22\n            if a[i][j] == \"n\":\n                a[i][j] = 23\n            if a[i][j] == \"o\":\n                a[i][j] = 24\n            if a[i][j] == \"p\":\n                a[i][j] = 25\n            if a[i][j] == \"q\":\n                a[i][j] = 26\n            if a[i][j] == \"r\":\n                a[i][j] = 27\n            if a[i][j] == \"s\":\n                a[i][j] = 28\n            if a[i][j] == \"t\":\n                a[i][j] = 29\n            if a[i][j] == \"u\":\n                a[i][j] = 30\n            if a[i][j] == \"v\":\n                a[i][j] = 31\n            if a[i][j] == \"w\":\n                a[i][j] = 32\n            if a[i][j] == \"x\":\n                a[i][j] = 33\n            if a[i][j] == \"y\":\n                a[i][j] = 34\n            if a[i][j] == \"z\":\n                a[i][j] = 35\n            if a[i][j] == \"A\":\n                a[i][j] = 36\n            if a[i][j] == \"B\":\n                a[i][j] = 37\n            if a[i][j] == \"C\":\n                a[i][j] = 38\n            if a[i][j] == \"D\":\n                a[i][j] = 39\n            if a[i][j] == \"E\":\n                a["
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    lst = [int(x) for x in a[1]]\n    s = a[0]\n    res = 0\n    x = [str(lst[0])]\n    for i in lst:\n        res += int(x[-1]) * int(i)\n        x.append(str(int(x[-1]) * int(i)))\n    return str(res)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L = stdin.split()\n    n = int(N)\n    l = list(map(int, L))\n    l = list(set(l))\n    l = sorted(l)\n    print(l)\n    # l = list(map(int, L))\n    # l = sorted(l, reverse=True)\n    print(l)\n    l = sorted(l, reverse=True)\n    print(l)\n    def sum_list(l):\n        l = list(map(int, L))\n        print(l)\n        l = sorted(l)\n        print(l)\n        l = sorted(l, reverse=True)\n        print(l)\n        l = l.copy()\n        print(l)\n        l = l.copy()\n        print(l)\n        i = 0\n        while i < n:\n            if l[i] == 0:\n                print(\"0\")\n                i += 1\n            elif l[i] == 1:\n                l[i] = 10\n                i += 1\n            elif l[i] == 2:\n                l[i] = 20\n                i += 1\n            elif l[i] == 3:\n                l[i] = 30\n                i += 1\n            elif l[i] == 4:\n                l[i] = 40\n                i += 1\n            else:\n                l[i] = 50\n                i += 1\n        print(l)\n        s = 0\n        for i in range(0, n):\n            s += l[i] * (10 ** i)\n        print(s)\n        return s\n    s = sum_list(l)\n    print(s)\n\n\nsolution(\"3\\nab\\nde\\naj\\n\")\n\nsolution(\"5\\nabcdef\\ngij\\nbdef\\naccbd\\ng\\n\")"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    list_of_numbers = stdin.split()\n    for i in list_of_numbers:\n        answer += int(i)\n    return str(answer)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n    for i in range(n):\n        result.append(stdin[i:i+n])\n    # print(result)\n    return sum(\n        sum(\n            sum(map(int, line.split()))\n            for line in set(result)\n        )\n    )\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  line_num = int(stdin.split('\\n')[0])\n  res = 0\n  for _ in range(line_num):\n    res += len(solution(stdin))\n  return str(res)\n\nsolution(stdin)\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    n = int(inp[0])\n    inp = inp[1:]\n    num = \"\"\n    for i in range(n):\n        num += chr(ord(inp[i])-1)\n    return num\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(sum(int(stdin[i]) for i in range(n)))"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = stdin\n    if n <= 1:\n        return numbers\n    for i in range(1, n):\n        numbers = numbers.replace(str(i), str(i ** 2))\n    return numbers\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(2 ** (1.0 / 2) * max((n + m) / (n + m - 2), n / (n + m - 2), m / (n + m - 2))))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(((n // 2) + 1, (n - (n // 2)) + 1)))\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m, max(n // 2, m // 2) + 1))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = len([x for x in range(1, n + 1) if x % 2 == 0])\n    y = len([y for y in range(1, n + 1) if y % 2 == 1])\n    z = len([z for z in range(1, m + 1) if z % 2 == 0])\n    a = len([a for a in range(1, m + 1) if a % 2 == 1])\n    print(max(x + y, x + z + a, y + z + a))\n\n\nsolution(\"2 6\")\nsolution(\"4 5\")\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    ans = 3 * n if n < m else 3 * m\n    print(ans)\n    return ans"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  x, y = map(int, stdin.split())\n  if (x <= y):\n    return str(x)\n  else:\n    return str(x + y)"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    experienced, newbies = map(int, stdin.split())\n    return f'{experienced + newbies // 3}'\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(min(n, m))"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    return str(max((n + m - 2) // 2, (n + m - 2) // 3))"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(input())):\n        s = input()\n        if len(s) < 2:\n            print('YES')\n        else:\n            if 'BA' in s:\n                if 'AB' in s:\n                    print('NO')\n                else:\n                    print('YES')\n            else:\n                print('NO')"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the result of the problem.'''\n    s = stdin\n    res = \"\"\n    for i in range(len(s)-1):\n        if s[i] == \"A\" and s[i+1] == \"B\":\n            res = \"YES\"\n            break\n    return res\n\ns = \"AXBYBXA\"\n\nprint(solution(s))\nprint(solution(s))\nprint(solution(s))"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Day 4: Passport Processing ---\n    You arrive at the airport only to realize that you grabbed your North Pole Credentials instead of your passport. While these documents are extremely similar, North Pole Credentials aren't issued by a country and therefore aren't actually valid documentation for travel in most of the world.\n\n    It seems like you're not the only one having problems, though; a very long line has formed for the automatic passport scanners, and the delay could upset your travel itinerary.\n\n    Due to some questionable network security, you realize you might be able to solve both of these problems at the same time.\n\n    The automatic passport scanners are slow because they're having trouble detecting which passports have all required fields. The expected fields are as follows:\n\n    byr (Birth Year)\n    iyr (Issue Year)\n    eyr (Expiration Year)\n    hgt (Height)\n    hcl (Hair Color)\n    ecl (Eye Color)\n    pid (Passport ID)\n    cid (Country ID)\n\n    Passport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of key:value pairs separated by spaces or newlines. Passports are separated by blank lines.\n\n    Here is an example batch file containing four passports:\n\n    ecl:gry pid:860033327 eyr:2020 hcl:#fffffd\n    byr:1937 iyr:2017 cid:147 hgt:183cm\n\n    iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\n    hcl:#cfa07d byr:1929\n\n    hcl:#ae17e1 iyr:2013\n    eyr:2024\n    ecl:brn pid:760753108 byr:1931\n    hgt:179cm\n\n    hcl:#cfa07d eyr:2025 pid:166559648\n    iyr:2011 ecl:brn hgt:59in\n\n    The first passport is valid - all eight fields are present. The second passport is invalid - it is missing hgt (the Height field).\n\n    The third passport is interesting; the only missing field is cid, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing cid fields. Treat this \"passport\" as valid.\n\n    The fourth passport is missing two fields, cid and byr. Missing cid is fine, but missing any other field is not, so this passport is invalid.\n\n    According to the above rules, your improved system would report 2 valid passports.\n\n    Count the number of valid passports - those that have all required fields. Treat cid as optional. In your batch file, how many passports are valid?\n    \"\"\"\n    return (valid_passports(stdin))\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''BACFAB''')\n    'YES'\n    >>> solution('''AXBYBXA''')\n    'NO'\n    \"\"\"\n    return \"YES\" if \"AB\" in stdin and \"BA\" in stdin else \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split():\n        if is_overlapping(s):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(\"YES\" if two_overlapping_substrings(stdin) else \"NO\")\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # return 'YES' if 2 in ''.join(stdin).count('AB') == 2 else 'NO'\n    # return 'YES' if set(''.join(stdin)) == {'AB','BA'} else 'NO'\n    return 'YES' if any(set(stdin) == {'AB', 'BA'}) else 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    queue = []\n    for i in range(len(weights)):\n        if weights[i] >= weights[i - 1]:\n            queue.append(weights[i])\n            for j in range(i + 1, len(weights)):\n                queue.append(weights[j])\n    if len(queue) < k:\n        return \"NO\"\n    for _ in range(k):\n        if queue[0] <= queue[-1]:\n            return \"NO\"\n        queue.pop(0)\n        queue.pop(-1)\n    return \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *w = map(int, stdin.split())\n    n_left = n\n    for i in range(k):\n        w_left = w.pop()\n        if w_left <= n_left:\n            w_right = w.pop()\n            w_left += w_right\n            w.append(w_left)\n            n_left -= 1\n        else:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    k = int(stdin.strip())\n    b = list(map(int, stdin.strip().split()))\n\n    print('YES' if k > n else 'NO')\n    print(' '.join(map(str, find_eating_order(n, k, a, b))))\n    return ''\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def next_w(q):\n        if q[0] > max(q):\n            q.append(q[0])\n            q.sort()\n        else:\n            q.sort()\n            q.append(q[0])\n            q.pop(0)\n        return q\n\n    q = []\n    for i in range(len(stdin)):\n        q = next_w(q)\n        stdin = stdin.split()\n        print(q)\n        if i < len(stdin)-1:\n            if int(stdin[i]) > int(q[0]):\n                if int(stdin[i+1]) > int(q[0]):\n                    print(\"NO\")\n                else:\n                    print(str(q[0]) +'L')\n            else:\n                if int(stdin[i+1]) > int(q[0]):\n                    print(str(q[0]) +'R')\n                else:\n                    print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\nsolution(input())\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, queue, k = map(int, stdin.split())\n    monsters = list(map(int, stdin.split()))\n    if N < k or k < 1:\n        return \"NO\"\n    #  if all weights are different, it is impossible for monsters to eat each other\n    if queue == 1:\n        if queue == sum(monsters):\n            return \"YES\"\n        else:\n            return \"NO\"\n    # create queue\n    queue = list(enumerate(monsters, start=1))\n    while queue:\n        #  the first monster eat\n        #   print the index of monster in the queue\n        print(queue.pop(0) )\n        #  find the index of the monster which is to the left\n        #   find the index of the monster which is to the right\n        #   find the index of the monster which is to the left\n        #   find the index of the monster which is to the right\n        #   find the index of the monster which is to the left\n        #   find the index of the monster which is to the right\n        #   check if monsters are not equal, if they are, the queue is not equal\n        if queue[0][1]!= queue[1][1]:\n            return \"NO\"\n        #   if they are equal then we can go further to the right\n        else:\n            queue.pop(0)\n            queue.pop(0)\n            queue.pop(0)\n            queue.pop(0)\n            #   we can find the index of the monster which is to the right\n            #   this monster is in the first index of the queue\n            index = queue.index((1, 1))\n            queue.pop(index)\n            #   we can find the index of the monster which is to the left\n            #   this monster is in the second index of the queue\n            index = queue.index((2, 2))\n            queue.pop(index)\n    return \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    b = [int(s) for s in stdin.split()]\n    if k > n:\n        return \"NO\"\n    queue = []\n    cnt = 0\n    for i in range(n):\n        weight = a[i]\n        if weight > b[cnt]:\n            queue.append(weight - b[cnt])\n            cnt += 1\n        else:\n            queue.append(0)\n    return \"YES\"\n    \n\n    \n    \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    queue = list(range(1, n + 1))\n    ans = 'YES'\n    while True:\n        if len(queue) <= k:\n            break\n        queue = [i - 1 for i in queue]\n        for i in range(k):\n            if len(queue) > i:\n                if queue[i] > queue[i - 1]:\n                    ans = 'NO'\n                    break\n                elif queue[i] < queue[i - 1]:\n                    ans = 'YES'\n        queue = queue[i:] + queue[:i]\n    return ans\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, k = map(int, stdin.split())\n    a = list(a)\n    b = list(map(int, stdin.split()[-1].split()))\n    print(solution_recur(a, b, n, k))\ndef"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    k = int(stdin.split()[1])\n\n    if len(weights) < k:\n        return \"NO\"\n\n    front = 0\n    weights.sort()\n    m = weights[k-1]\n\n    while True:\n        if weights[front] == m:\n            return \"YES\"\n        elif weights[front] < m:\n            front += 1\n        else:\n            front -= 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, *a = list(map(int, stdin.split()))\n    n = len(a)\n    k = int(stdin.split()[2])\n    b = stdin.split()[3:]\n    \n    for j in range(n, k-1, -1):\n        for i in range(n-1, j-1, -1):\n            if a[i] <= a[j]:\n                break\n        else:\n            return \"NO\"\n    \n    for i in range(n):\n        if i < k:\n            if i == a.index(b[i]):\n                print(i, \"L\")\n            else:\n                print(i, \"R\")\n    \n    return \"YES\""
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rebellion, battleship = map(int, stdin.split())\n    points = []\n    for _ in range(battleship):\n        points.append(list(map(int, stdin.split())))\n    battleship_points = sorted([(x, y) for x, y in points])\n    rebellion_points = []\n    for _ in range(rebellion):\n        rebellion_points.append(list(map(int, stdin.split())))\n    rebellion_points = sorted(rebellion_points, key=lambda x: x[0])\n    rebellion_points = sorted(rebellion_points, key=lambda x: x[1])\n    for (x, y) in rebellion_points:\n        for (px, py) in battleship_points:\n            if x == px and y == py:\n                return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, b = stdin.split()\n    r = int(r)\n    b = int(b)\n    def dist(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n    d = {}\n    for i in range(r):\n        x, y = stdin.split()\n        x = int(x)\n        y = int(y)\n        d[(x,y)] = i\n    for i in range(b):\n        x1, y1 = stdin.split()\n        x1 = int(x1)\n        y1 = int(y1)\n        if (x1,y1) in d and d[(x1,y1)]!= i:\n            print('No')\n            return\n        if dist(x1, y1, -x1, y1) == 2 or dist(x1, y1, x1, -y1) == 2:\n            print('No')\n            return\n    print('Yes')\n    return\nsolution(input())\n\n'''\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    r, b = int(lines[0]), int(lines[1])\n    objs = []\n    for i in range(r):\n        line = lines[i + 2].split()\n        obj = []\n        for j in range(len(line)):\n            obj.append([int(line[j]), int(line[j])])\n        objs.append(obj)\n    for i in range(len(objs)):\n        for j in range(len(objs)):\n            if i == j:\n                continue\n            for k in range(len(objs[i])):\n                for m in range(len(objs[j])):\n                    if k == m:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n            for k in range(len(objs[i])):\n                if objs[i][k] == None:\n                    continue\n                for m in range(len(objs[j])):\n                    if m == k:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n        for j in range(len(objs)):\n            for k in range(len(objs[j])):\n                if objs[i][k] == None:\n                    continue\n                for m in range(len(objs)):\n                    if m == j:\n                        continue\n                    if (objs[i][k][0] == objs[m][j][1] and objs[i][k][1] == objs[m][j][0]) or (objs[i][k][1] == objs[m][j][0] and objs[i][k][0] == objs[m][j][1]):\n                        objs[i][k] = None\n    for i in range(len(objs)):\n        for j in range(len(objs)):\n            if i == j:\n                continue\n            for k in range(len(objs[i])):\n                for m in range(len(objs[j])):\n                    if k == m:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n            for k in range(len(objs[i])):\n                if objs[i][k] == None:\n                    continue\n                for m in range(len(objs[j])):\n                    if m == k:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n    for i in range(len(objs)):\n        for j in range(len(objs)):\n            if i == j:\n                continue\n            for k in range(len(objs[i])):\n                for m in range(len(objs[j])):\n                    if k == m:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n            for k in range(len(objs[i])):\n                if objs[i][k] == None:\n                    continue\n                for m in range(len(objs[j])):\n                    if m == k:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n    for i in range(len(objs)):\n        for j in range(len(objs)):\n            if i == j:\n                continue\n            for k in range(len(objs[i])):\n                if objs[i][k] == None:\n                    continue\n                for m in range(len(objs[j])):\n                    if m == k:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n            for k in range(len(objs[i])):\n                if objs[i][k] == None:\n                    continue\n                for m in range(len(objs[j])):\n                    if m == k:\n                        continue\n                    if (objs[i][k][0] == objs[j][m][1] and objs[i][k][1] == objs[j][m][0]) or (objs[i][k][1] == objs[j][m][0] and objs[i][k][0] == objs[j][m][1]):\n                        objs[i][k] = None\n    for i in range(len(objs)):\n        for j in range(len(objs)):\n            if i == j:\n                continue\n            for k in range(len(objs[i])):\n                for m in range(len(objs[j])):\n                    if k == m:\n                        continue\n                    if (objs[i][k][0] == objs"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0 = map(int, stdin.split())\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = map(int, stdin.split())\n    x_4, y_4 = map(int, stdin.split())\n    x_5, y_5 = map(int, stdin.split())\n\n    print(x_0, y_0)\n    print(x_1, y_1)\n    print(x_2, y_2)\n    print(x_3, y_3)\n    print(x_4, y_4)\n    print(x_5, y_5)"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    t = stdin.split('\\n')\n    points = []\n    for t_i in t:\n        temp = t_i.split(' ')\n        points.append([int(temp[0]), int(temp[1])])\n    points.sort()\n    points = set(tuple(x) for x in points)\n    for x in range(0, len(points)):\n        for y in range(x + 1, len(points)):\n            if points.intersection(points.difference(set((points.difference(points.difference(points.difference(points.difference(points)))))))) == True:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, b = map(int, stdin.split())\n    rebel = set()\n    for _ in range(r):\n        r_x, r_y = map(int, input().split())\n        rebel.add((r_x, r_y))\n\n    bases = set()\n    for _ in range(b):\n        b_x, b_y = map(int, input().split())\n        bases.add((b_x, b_y))\n\n    rebel_x = set()\n    for r in rebel:\n        rebel_x.add(r[0])\n        rebel_x.add(r[1])\n\n    if len(rebel_x)!= len(rebel):\n        return 'No'\n\n    bases_x = set()\n    for b in bases:\n        bases_x.add(b[0])\n        bases_x.add(b[1])\n\n    if len(bases_x)!= len(bases):\n        return 'No'\n\n    if len(rebel_x) > len(bases_x):\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R, B = stdin.split(\" \")\n    R, B = int(R), int(B)\n    rebel = []\n    bases = []\n    for i in range(1, R + 1):\n        x, y = map(int, stdin.split(\" \"))\n        rebel.append((x, y))\n        bases.append((x, y))\n    matches = []\n    for i in range(len(rebel)):\n        for j in range(len(bases)):\n            if(bases[j][0] < rebel[i][0] < bases[j][1]) or (bases[j][0] < rebel[i][1] < bases[j][1]):\n                matches.append((rebel[i], bases[j]))\n    if(len(matches) == len(rebel)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    xs = []\n    ys = []\n    for line in stdin.strip().splitlines():\n        xs.append(int(line[0]))\n        ys.append(int(line[1]))\n    xs = sorted(xs)\n    ys = sorted(ys)\n    x_min = min(xs)\n    x_max = max(xs)\n    y_min = min(ys)\n    y_max = max(ys)\n\n    base_x_s = []\n    base_y_s = []\n    for i in range(1,y_max + 1):\n        base_x_s.append(x_min)\n        base_y_s.append(i)\n    base_x_s.append(x_max)\n    base_y_s.append(y_max)\n    base_x_s.append(x_max)\n    base_y_s.append(y_min)\n    base_x_s.append(x_min)\n    base_y_s.append(y_min)\n    base_x_s.append(x_min)\n    base_y_s.append(y_max)\n    for i in range(1,len(base_x_s)):\n        if base_x_s[i-1] > base_x_s[i] or base_y_s[i-1] > base_y_s[i]:\n            return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R,B=map(int,stdin.split())\n    Rebel=[]\n    for i in range(R):\n        x,y=map(int,stdin.split())\n        Rebel.append((x,y))\n    #print(Rebel)\n    Bases=[]\n    for i in range(B):\n        x,y=map(int,stdin.split())\n        Bases.append((x,y))\n    #print(Bases)\n    t=0\n    for b in range(B):\n        x0=Bases[b][0]\n        y0=Bases[b][1]\n        for i in range(R):\n            x1=Rebel[i][0]\n            y1=Rebel[i][1]\n            #print(x0,x1)\n            if (x0,y0)==(x1,y1):\n                t=1\n                break\n        if t==1:\n            break\n    if t==1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = 1\n    d = m\n    while d > n:\n        d = 2*d\n        c += 1\n    if d!= n:\n        c += 1\n    return str(c)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def gcd(a, b):\n        if a % b == 0:\n            return b\n        return gcd(b, a % b)\n    return str(n * (n - 1) // 2 // gcd(n, m))\n\n\nprint(solution(input()))\n\nprint(solution(input()))"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    tries = 0\n    while n!= m:\n        if n < m:\n            tries += 1\n            n *= 2\n        else:\n            tries += 1\n            n -= 1\n    return str(tries)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    return str(n)\n    "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split(' ')\n    return str(int(n) * 2 - int(m) + 1)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # n = 0\n    # m = 0\n\n    # if n < 0 or m < 0:\n    #     return -1\n    # if n > m:\n    #     m = n\n    #\n    # if m == 0:\n    #     return 0\n    #\n    # result = 0\n    # while m > 0:\n    #     if m % 2 == 0:\n    #         result += 1\n    #     m //= 2\n\n    # return result\n    if n <= 0 or m <= 0:\n        return -1\n\n    if n == m:\n        return 0\n\n    result = 0\n    while m!= 0:\n        if m % 2 == 0:\n            result += 1\n        m //= 2\n\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nInput = stdin.split()\n\nn = int(Input[0])\nm = int(Input[1])"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\nn, m = map(int, input().split())"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    count = 0\n    while n > m:\n        n = n*2 - m\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_segment_intersect(segment_1, segment_2):\n        return segment_1[0] <= segment_2[0] <= segment_1[1] or segment_1[0] <= segment_2[1] <= segment_1[1] or segment_1[0] == segment_2[0] == segment_2[1]\n    graph = defaultdict(set)\n    for segment in (map(int, line.split()) for line in stdin.splitlines()):\n        graph[segment[0]].add(segment[1])\n        graph[segment[1]].add(segment[0])\n    segments = set(graph.keys())\n    for start_point in graph:\n        for end_point in graph[start_point]:\n            if is_segment_intersect((start_point, end_point), (start_point, end_point)) or is_segment_intersect((start_point, end_point), (end_point, start_point)):\n                segments.discard(start_point)\n                segments.discard(end_point)\n                continue\n            if not is_segment_intersect((start_point, end_point), (start_point, start_point)) or not is_segment_intersect((start_point, end_point), (end_point, end_point)):\n                return \"NO\"\n    if len(segments) == 1:\n        return \"YES\"\n    for segment in sorted(segments):\n        return \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if n_segments_are_trees(stdin.split('\\n')) else 'NO'\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, stdin.split()[i*2+1].split(\" \"))))\n    graph = Graph(n)\n    for s1, s2 in segments:\n        graph.add_edge(s1, s2)\n    return str(graph.is_tree())"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = defaultdict(list)\n    for _ in range(n):\n        l, r = map(int, stdin.strip().split())\n        graph[l].append(r)\n        graph[r].append(l)\n    return \"YES\" if n == 1 and len(graph[1]) == 2 else \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    G = nx.Graph()\n    for i in range(n):\n        G.add_node(i+1)\n    lines = stdin.split()\n    for line in lines:\n        a, b = map(int, line.split())\n        if b < a:\n            b, a = a, b\n        G.add_edge(a, b)\n    return \"YES\" if nx.is_connected(G) else \"NO\""
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    g = {x: set() for x in range(1, n+1)}\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        for j in range(l, r):\n            if j not in g:\n                continue\n            g[j].add(i)\n            g[i].add(j)\n    return 'YES' if n == len(g) else 'NO'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    graph = [[] for _ in range(n+1)]\n    for line in stdin.splitlines():\n        [l, r] = list(map(int, line.split()))\n        graph[l].append(r)\n        graph[r].append(l)\n    \n    bfs = []\n    for node in range(1, n+1):\n        if node not in bfs:\n            bfs.append(node)\n            while bfs:\n                node = bfs.pop()\n                for i in graph[node]:\n                    if i not in bfs and i not in bfs + graph[node]:\n                        bfs.append(i)\n    return \"YES\" if len(bfs) == n else \"NO\""
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_intersect(graph[i], graph[j]):\n                return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [[int(i) for i in stdin.split()] for _ in range(n)]\n    nodes = [0] * (n + 1)\n    edges = []\n    for a, b in segments:\n        nodes[a] = 1\n        nodes[b] = 1\n        edges.append((a, b))\n        edges.append((b, a))\n\n    # find all the triangles and form a graph\n    triangles = []\n    for a, b in edges:\n        if nodes[a] and nodes[b]:\n            triangles.append((a, b))\n            triangles.append((b, a))\n    # form the graph\n    # g = Graph(nodes)\n    # for a, b in edges:\n    #     g.add_edge(a, b)\n\n    # print(triangles)\n    # print(nodes)\n    # print(edges)\n    # print(g.connected())\n\n    for a, b in triangles:\n        print(a, b)\n\n    return\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split()\n    for i in range(1, len(segments)):\n        for j in range(i):\n            if segments[i][0] <= segments[j][1] and segments[i][1] >= segments[j][0]:\n                return 'NO'\n    return 'YES'\n\nstdin = '6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8'\nprint(solution(stdin))\n\nstdin = '5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10'\nprint(solution(stdin))\n\nstdin = '5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n'\nprint(solution(stdin))\n\n\n'''\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_seconds, requests = list(map(int, stdin.split(' ')))\n    number_of_requests = sorted(list(map(int, requests.split(' '))))\n    interval = number_of_requests[0]\n    count = 1\n    for i in range(1, len(number_of_requests)):\n        if number_of_requests[i] - number_of_requests[i - 1] <= interval:\n            count += 1\n        else:\n            interval = number_of_requests[i] - number_of_requests[i - 1]\n            count = 1\n    return str(interval) if count >= number_of_seconds / 100 else '0'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    max_num = 0\n    sum_num = 0\n    d = {}\n    max_len = 0\n    for i in range(n):\n        if seq[i] in d:\n            d[seq[i]] += 1\n            sum_num += seq[i]\n        else:\n            d[seq[i]] = 1\n            sum_num += seq[i]\n        max_len = max(max_len, d[seq[i]])\n        if max_len == seq[i]:\n            max_num = i\n    if max_num == 0:\n        return 0\n    else:\n        return max_num - min(list(d.values())) + 1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    requests = list(map(int, stdin.strip().split()))\n    requests.sort(reverse=True)\n    max_len = 0\n    current_len = 0\n    for i in range(len(requests)):\n        if current_len < n:\n            current_len += requests[i]\n        else:\n            current_len = current_len - requests[i - max_len]\n            max_len = i\n            if current_len < n:\n                break\n    return str(max_len) if max_len > 0 else str(0)\n\nstdin = \"\"\"\n3\n1 2 3 4\n5\n1 1 1 1 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *requests = stdin.split()\n    r, d = list(map(int, requests)), {}\n    for i in range(len(r)):\n        if r[i] not in d.keys():\n            d[r[i]] = i\n        else:\n            res = i - d[r[i]]\n            if res > (int(n) / 2):\n                return str(res)\n    return str(0)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1:]\n    s.sort(key=lambda x: int(x))\n    max_ = 0\n    tmp = 0\n    for i in range(len(s)):\n        tmp += int(s[i])\n        if tmp > 100 * n:\n            max_ = max(max_, i - tmp)\n        else:\n            tmp = 0\n    return str(max_) if max_ else '0'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution for the problem.\n\n    Takes in stdin, a string that represents the stdin data.\n\n    Examples:\n        solution('')\n        solution('1\\n2\\n3\\n4\\n5')\n        solution('1\\n2\\n3\\n4\\n5')\n    \"\"\"\n    return str(longest_contiguous_period(stdin))\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    r = list(map(int, stdin[1]))\n    res = 0\n    ans = 0\n    mul = 1\n    for i in range(1, n):\n        if r[i] - r[i - 1] == 1:\n            mul += 1\n        else:\n            if mul == 1:\n                res = 1\n                ans = max(ans, r[i - 1])\n                mul = 1\n            else:\n                res = mul\n                mul = 1\n    return str(res) +'' + str(ans)\n\n\nprint(solution(\"5\\n100 200 1 1 1\"))\nprint(solution(\"5\\n1 2 3 4 5\"))\nprint(solution(\"2\\n101 99\"))\nprint(solution(\"3\"))"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    segment_time, total_requests = lines.pop(0).split()\n    total_requests = int(total_requests)\n    segment_time = int(segment_time)\n    lines.pop(0)\n    requests_in_segment = []\n    requests_in_segment_time = 0\n    durations_of_requests = []\n    segment_length = 0\n    for line in lines:\n        requests_in_segment.append(int(line))\n        if len(requests_in_segment) > 1:\n            requests_in_segment_time += int(line)\n        else:\n            durations_of_requests.append(requests_in_segment_time)\n            requests_in_segment_time = 0\n        segment_length = max(segment_length, len(requests_in_segment))\n    \n    print(segment_length)\n    if len(durations_of_requests) == 0:\n        return 0\n    else:\n        return max(durations_of_requests)\n\nsolution(\"\"\"\n2\n100 200 1 1 1\n\nOutput\n1\n\n2\n101 99\n\nOutput\n1\n\"\"\")"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    r = list(map(int, stdin[1]))\n    # print(n)\n    # print(r)\n    i, j, res = 0, 0, 0\n    # t = -1\n    while j < n:\n        # t += 1\n        if r[j] > r[i]:\n            # print(\"inc\")\n            j += 1\n        else:\n            # print(\"dec\")\n            if j - i > res:\n                res = j - i\n            i += 1\n            j += 1\n    if j - i > res:\n        res = j - i\n    return str(res)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split('\\n')\n    n = int(data[0])\n    reqs = [int(i) for i in data[1].split()]\n    reqs.sort()\n    prev = 0\n    start = 0\n    cnt = 0\n    for i in reqs:\n        if i == prev:\n            cnt += 1\n        else:\n            cnt = 1\n        if cnt >= 100:\n            break\n        prev = i\n        start = i\n    if cnt >= 100:\n        return \"0\"\n    return str(start - reqs[0])\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return \"NO\"\n    \n    series = [stdin[i] == \"Y\" for i in range(n)]\n    \n    count_up = 0\n    for i in range(n):\n        if series[i] == \"Y\":\n            count_up += 1\n        elif series[i] == \"N\":\n            count_up = 0\n        else:\n            continue\n        \n        if count_up >= k:\n            return \"YES\"\n        \n    return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()\n    res = 'YES'\n    for i in range(n):\n        if s[i] == 'Y':\n            res = res.replace('YES', 'NO')\n        elif s[i] == 'N':\n            res = res.replace('NO', 'YES')\n        else:\n            continue\n    return res"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = stdin.count('?')\n    res = 'YES' if d >= k else 'NO'\n    return res"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = list(map(int, lines[0].split()))\n    if n < 2 or n > 100 or k < 1 or k > n:\n        return \"ERROR\"\n    series = list(lines[1])\n    series = \"\".join(series)\n    k = k % n\n    if series.count(\"Y\") == n or series.count(\"N\") == n or series.count(\"?\") == n:\n        return \"NO\"\n    series_list = list(series)\n    d = k\n    for i in range(n):\n        if series_list[i] == \"Y\":\n            series_list[i] = \"N\"\n            if d == 0:\n                break\n            d -= 1\n        elif series_list[i] == \"N\":\n            if d == 0:\n                break\n            d -= 1\n        elif series_list[i] == \"?\":\n            d = k\n    series_list = \"\".join(series_list)\n    if series_list.count(\"Y\") == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    seq = stdin.strip().split()\n    for i in range(n):\n        if seq[i] == 'Y' and seq[i - 1]!= 'Y' or seq[i - 1]!= 'Y' and seq[i + 1]!= 'Y':\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = stdin[2].replace(\"?\", \"Y\").replace(\"N\", \"N\").replace(\"Y\", \"Y\")\n    res = []\n    for i in range(n):\n        if a[i] == \"Y\":\n            res.append(i)\n    if len(res) == k:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, k = int(stdin[0]), int(stdin[1])\n    cnt_watched_yes = cnt_watched_no = 0\n    is_know_yes = is_know_no = False\n    for s in stdin[2]:\n        if s == \"Y\":\n            if not is_know_yes:\n                cnt_watched_yes += 1\n                if cnt_watched_yes == k:\n                    is_know_yes = True\n            else:\n                is_know_yes = False\n                cnt_watched_yes = 0\n        elif s == \"N\":\n            if not is_know_no:\n                cnt_watched_no += 1\n                if cnt_watched_no == k:\n                    is_know_no = True\n            else:\n                is_know_no = False\n                cnt_watched_no = 0\n        else:\n            if not is_know_yes:\n                is_know_yes = True\n                cnt_watched_yes = 0\n            if not is_know_no:\n                is_know_no = True\n                cnt_watched_no = 0\n    return \"YES\" if is_know_yes else \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    series = stdin.replace(\"?\", \"YN\").replace(\"Y\", \"Y\").replace(\"N\", \"N\").replace(\"?\", \"YN\")\n    series = list(series)\n    series_n = len(series)\n    possible = True\n    for i in range(series_n - k):\n        if (series[i] == \"N\"):\n            if (i + k <= series_n):\n                series[i + k] = \"Y\"\n            else:\n                possible = False\n    return possible\n\nsolution(input())"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k -= 1\n    print('YES' if k == n else 'NO')\n    return 'YES' if k == n else 'NO'"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    series = stdin.split(\"\\n\")[1:]\n    for i in range(len(series)):\n        series[i] = series[i][1:] if series[i][0] == \"?\" else series[i]\n    series = [x.split('?') for x in series]\n    series = [(int(x[0]), int(x[1])) for x in series]\n    #print(series)\n    series.sort()\n    #print(series)\n    ans = \"YES\"\n    for j in range(1, len(series)):\n        if (series[j-1][1] - series[j][0])!= k:\n            ans = \"NO\"\n            break\n    return ans\n\n\n\nsolution(input())\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N = int(data[0])\n    X = int(data[1])\n    D = int(data[2])\n    takahashi = list(range(N+1))\n    aoki = list(range(N+1))\n    for i in range(N):\n        takahashi[i+1] = takahashi[i] + D\n        aoki[i+1] = aoki[i] + X\n    count = 0\n    for i in range(N+1):\n        for j in range(N+1):\n            if takahashi[i] - aoki[j] > 0:\n                count += 1\n    return str(count)\n\nsolution(\"3 4 2\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = map(int, stdin.split())\n    x = x % d\n    res = 1\n    x = (x + d) % d\n    d = d - 1\n    if x:\n        for i in range(n - 1):\n            res *= (n - i)\n    else:\n        for i in range(n - 1):\n            res *= (n - i)\n    if d:\n        res *= d\n    else:\n        res *= n\n    return str(res)\n\nsolution(\"5 2 4\")"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = map(int, stdin.split())\n    a = tuple(map(int, input().split()))\n    b = tuple(map(int, input().split()))\n    print(sum((i for i in range(x + 1) if sum((i * ele for ele in a)) - sum((i * ele for ele in b)) >= -x)))\n    return (sum((i for i in range(x + 1) if sum((i * ele for ele in a)) - sum((i * ele for ele in b)) >= -x)))\n\nsolution()\n'''\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    a = list(range(1, N + 1))\n    for _ in range(D):\n        a = a[1:] + a[:1]\n    print(len(a))\n    return len(a)\n\nsolution(input())\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    d = int(lines[1])\n\n    first_takahashi = 0\n    first_aoki = 0\n    for i in range(n):\n        first_takahashi += i*d\n        first_aoki += i\n\n    second_takahashi = 0\n    second_aoki = 0\n    for i in range(n):\n        second_takahashi += n*d\n        second_aoki += n\n\n    return str(first_takahashi - second_aoki)\n\nsolution(\"4 4 2\")\n'''\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = map(int, stdin.split())\n    if n == 0:\n        return str(0)\n    a_n = list(range(1, n+1))\n    s = sum(a_n) - x\n    return str(s - d)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO - Implement solution here\n    stdin_list = stdin.split(\" \")\n    N = int(stdin_list[0])\n    X = int(stdin_list[1])\n    D = int(stdin_list[2])\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                for l in range(N):\n                    if X - D * (i + j + k + l) == 0:\n                        count += 1\n\n    return str(count)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y = stdin.split(' ')\n    x, y = int(x), int(y)\n\n    count = 0\n\n    # 1. S = x + 2y + 3z\n    # 2. S = x + 3z + 2y\n    # 3. S = x + 2y + 3z\n\n    # X = 4\n    # Y = 6\n    # Z = 8\n\n    # X = 6\n    # Y = 8\n    # Z = 4\n\n    # X = 8\n    # Y = 4\n    # Z = 2\n\n    # X = 4\n    # Y = 2\n    # Z = 6\n\n    # X = 2\n    # Y = 6\n    # Z = 4\n\n    # X = 2\n    # Y = 4\n    # Z = 2\n\n    X = 6\n    Y = 4\n    Z = 2\n\n    # S = 1\n    # 2 possible Aoki choices\n    # X = 4, Y = 6, Z = 2\n\n    # S = 3\n    # 3 possible Takahashi choices\n    # X = 4, Y = 2, Z = 6\n\n    # S = 5\n    # 5 possible Takahashi choices\n    # X = 4, Y = 2, Z = 6\n\n    # S = 7\n    # 7 possible Takahashi choices\n    # X = 4, Y = 2, Z = 6\n\n    if X + 3*Y + 2*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    if X + 2*Y + 3*Z > x:\n        count += 8\n\n    return str(count)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = map(int, stdin.split())\n    return str(math.comb(N + X - 2, N))\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = map(int, stdin.split())\n    if N <= 0 or X <= 0 or D <= 0:\n        return \"Invalid Input\"\n\n    def f(x):\n        return x ** D % X\n\n    takahashi = 0\n    aoki = 0\n    for i in range(N):\n        takahashi += f(i)\n        aoki += f(N - i - 1)\n    return \"{} {}\".format(takahashi - aoki, takahashi - aoki)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    user_dic = {}\n    for user in stdin.split('\\n'):\n        temp = user.split()\n        user_dic[temp[0]] = int(temp[1])\n    for user in user_dic:\n        before_rating = user_dic[user]\n        after_rating = before_rating + user_dic[user]\n        if before_rating == after_rating:\n            continue\n        if after_rating > 2400:\n            continue\n        if before_rating > 2400 and after_rating < 2400:\n            continue\n        else:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    males = set()\n    females = set()\n    for i in data:\n        males.add(i.split()[0])\n        females.add(i.split()[1])\n    count = 0\n    for i in males:\n        if i in females:\n            count += 1\n    if count > 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    handles, ratings = stdin.split('\\n')\n    handles = handles.split()\n    ratings = ratings.split()\n    print(handles)\n    print(ratings)\n    print('yes' if any(rating[0] > 2500 and rating[1] > 2500 for rating in zip(ratings, handles)) else 'no')\n    return 'yes' if any(rating[0] > 2500 and rating[1] > 2500 for rating in zip(ratings, handles)) else 'no'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''Burunduk1 2526 2537\n   ... BudAlNik 2084 2214\n   ... subscriber 2833 2749\n   ... ''')\n    'NO'\n    '''\n    total = []\n    before = []\n    after = []\n    # Split the input into lines\n    lines = stdin.splitlines()\n\n    # Loop through each line and extract the handles and their associated ratings\n    for line in lines:\n        (handle, rating) = line.split()\n        rating = int(rating)\n        total.append(rating)\n        if rating > 2400:\n            before.append(rating)\n        else:\n            after.append(rating)\n\n    # If the total rating is greater than 2400, then the participant has not been outscored\n    if sum(total) > 2400:\n        return 'YES'\n    # If there were no participants who were outscored, then the participant must not have been outscored\n    if len(before) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    handle_dict = {}\n    for i in range(n):\n        handle, before, after = stdin.split()\n        handle_dict[handle] = (int(before), int(after))\n    for key, val in handle_dict.items():\n        if val[1] >= 2401:\n            if val[0] >= 2401:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\nsolution(input())\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    counter = 0\n    for i in range(n):\n        line = stdin.readline().split()\n        before = int(line[0])\n        after = int(line[1])\n        if before > after:\n            counter += 1\n    if counter > 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    participants = {x.split(\" \")[0]: (int(x.split(\" \")[1]), int(x.split(\" \")[2])) for x in stdin}\n    return \"YES\" if any(v > 2400 for v in participants.values()) else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\nstdin = '''3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    contests = []\n    for line in stdin:\n        contests.append(line)\n    for contest in contests:\n        color ='red'\n        people = contest.split()\n        for person in people:\n            if int(person) > 2400:\n                color ='red'\n                break\n            if int(person) < 2400 and int(person) >= 2200:\n                color = 'orange'\n                break\n            if int(person) < 2400 and int(person) <= 2200:\n                color = 'yellow'\n                break\n            if int(person) >= 2400:\n                color = 'green'\n                break\n        print(color)\n    return"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the number of trains which have departed strictly before the time $s$\n    '''\n    s = stdin\n    count = 0\n    for i in range(1, 1001):\n        if (1 << i) & s == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = len(a)\n    a = int(a, 2)\n    if a == 0:\n        print(1)\n    else:\n        for i in range(1, n+1):\n            if a < 2**i:\n                print(i)\n                break\n    return '0'\n\n\nsolution('111111')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    binary_number = stdin\n    return str(missing_trains(binary_number))\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin, 2)\n    count = 0\n    while number!= 0:\n        if number % 16!= 0:\n            count += 1\n        number //= 16\n    return str(count)"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''100000000_2''')\n    '256_10'\n    >>> solution('''101_2''')\n    '5_10'\n    >>> solution('''10100_2''')\n    '5_10'\n    \"\"\"\n    s = stdin\n    res = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            continue\n        else:\n            # we need to check if it is divisible by 2^k\n            if not (int(s[i]) % 2) or i!= 0:\n                continue\n            else:\n                count = 0\n                for j in range(len(s)-1, i-1, -1):\n                    if s[j] == '0':\n                        continue\n                    else:\n                        if not (int(s[j]) % 2) or j == i:\n                            count += 1\n                res.append(str(count))\n    return ''.join(res)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 1:\n        raise ValueError(f'Input value must be non-negative. Got: {num}')\n    elif num == 1:\n        return '0'\n    else:\n        digits = len(bin(num)) - 2\n        arr = []\n        for i in range(0, digits):\n            if num & (1 << i):\n                arr.append(str(i))\n        return ''.join(arr)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(1 << int(stdin))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for k in range(len(stdin)):\n        if stdin[k] == '0':\n            if k > 0:\n                if stdin[k - 1] == '1':\n                    count += 1\n    return str(count)"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, 2))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    mirror = []\n    mirror = matrix\n\n    for _ in range(3):\n        #mirror = []\n        for i in range(len(mirror)):\n            mirror[i] = mirror[i][::-1]\n        #print(mirror)\n        #mirror = map(list, zip(*mirror))\n        #print(mirror)\n        #mirror = map(list, zip(*mirror))\n        #print(mirror)\n        for j in range(len(mirror)):\n            mirror[j] = mirror[j][::-1]\n    \n    return str(len(mirror))\n\nprint(solution(input()))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[int(x) for x in stdin.split()[i]] for i in range(n)]\n    b = []\n    for _ in range(n):\n        b.append(a[_][::-1])\n    return str(n)"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\"\".join([\"{:02d}\".format(x) for x in b]) for b in stdin.strip().split(\"\\n\")])"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[0] * n for _ in range(m)]\n    b = [[0] * n for _ in range(m)]\n    min_rows = 2*m\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = int(stdin[i * m + j])\n            if a[i][j] == 0:\n                continue\n            if i!= m-1:\n                b[i][j] = 1 if a[i][j] == a[i + 1][j] else 0\n            if i!= 0:\n                b[i][j] = 1 if a[i][j] == a[i - 1][j] else 0\n            if j!= m-1:\n                b[i][j] = 1 if a[i][j] == a[i][j + 1] else 0\n            if j!= 0:\n                b[i][j] = 1 if a[i][j] == a[i][j - 1] else 0\n\n            min_rows = min(min_rows, max(b[i][j], b[i][j + 1], b[i][j - 1], b[i - 1][j]),\n                           max(b[i][j], b[i + 1][j], b[i][j - 1], b[i - 1][j]))\n    return str(min_rows)"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = stdin.split()\n    a = list(map(int, a.split()))\n    if n == m:\n        return str(len(a) + len(a) // 2)\n    else:\n        return str(min(len(a) // 2, len(a) // 2 + (len(a) % 2 == 0) * 2))\n\n\ndef"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # for _ in range(n):\n    #     a.append(list(map(int, stdin.split())))\n    # print(a)\n    # mirror = []\n    # mirror = copy.deepcopy(a)\n    # print(mirror)\n    # mirror[0][0] = a[0][2]\n    # mirror[0][2] = a[0][0]\n    # mirror[2][0] = a[2][2]\n    # mirror[2][2] = a[2][0]\n    # print(mirror)\n    # mirror[0][1] = a[0][1]\n    # mirror[1][0] = a[1][1]\n    # mirror[1][1] = a[1][0]\n    # mirror[1][2] = a[1][2]\n    # mirror[2][1] = a[2][1]\n    # mirror[2][2] = a[2][0]\n    # print(mirror)\n    mirror = copy.deepcopy(a)\n    # mirror = []\n    # mirror = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    print(mirror)\n    # print(mirror)\n    for mirroring in range(n):\n        print(mirror)\n        mirror = swap_mirroring(mirror)\n        print(mirror)\n        mirror = exchange_mirroring(mirror)\n        print(mirror)\n    # for mirroring in range(n):\n    #     for mirroring in range(n):\n    #         mirror = swap_mirroring(mirror)\n    #         print(mirror)\n    #         mirror = exchange_mirroring(mirror)\n    #         print(mirror)\n    #\n    #\n    # print(mirror)\n    # for _ in range(n):\n    #     print(a)\n    #     a = mirror\n    #     print(a)\n    #     for _ in range(n):\n    #         a = mirror\n    #     print(a)\n    # return mirror"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[1] * m, [0] * m, [1] * m, [0] * m]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    count = 0\n    for i in range(n):\n        if a[i]!= a[i][::-1]:\n            a[i] = a[i][::-1]\n            count += 1\n    for i in range(n):\n        if a[n-i-1]!= a[n-i-1][::-1]:\n            a[n-i-1] = a[n-i-1][::-1]\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n    # n = len(a)\n    # m = len(a[0])\n    n2 = n // 2\n    # print(n2)\n    # print(a[:n2])\n    # print(a[n2:])\n    b = [[a[i][j] for j in range(m)] for i in range(n)]\n    # print(b)\n    if n == 1:\n        return str(n)\n    return str(min(n, m) // 2)\nprint(solution(input()))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, M = map(int, stdin.pop(0).split())\n    a = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(M):\n            a[i + 1][j + 1] = int(stdin.pop(0))\n    n = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if a[i][j]!= 0:\n                n += 1\n    return n\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l_i = sorted(list(map(int, stdin.split())))\n    l_i = list(l_i)\n    \n    def get_start_end(start, end):\n        for i in range(len(l_i)):\n            if l_i[i] >= start and l_i[i] <= end:\n                return i\n        return -1\n    \n    for i in range(len(l_i)-1):\n        start = l_i[i]\n        end = l_i[i+1]\n        if end - start > 1:\n            start_ind = get_start_end(start, end)\n            end_ind = get_start_end(start, end - 1)\n            if start_ind!= -1 and end_ind!= -1:\n                print(start_ind + 1, end_ind + 1)\n                return\n    print(1)\n    return\n\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    INPUT = stdin.split(\"\\n\")\n    n = int(INPUT[0])\n    orders = [int(i) for i in INPUT[1].split()]\n    min_l = orders[0]\n    max_r = orders[0]\n    for i in range(n):\n        min_l = min(min_l, orders[i])\n        max_r = max(max_r, orders[i])\n    return max_r - min_l + 1\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    n = stdin.pop(0)\n    stdin.sort()\n    l = []\n    r = []\n    for i in range(n):\n        l.append(stdin.pop(0))\n        r.append(stdin.pop(0))\n    print(l, r)\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]].append(r[i])\n        else:\n            d[l[i]] = [r[i]]\n    return len(d)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the maximum number of orders the restaurant can accept.\n    '''\n    N = int(stdin.readline())\n    tasks = []\n    for _ in range(N):\n        tasks.append(list(map(int, stdin.readline().split())))\n    tasks.sort()\n    return str(len(tasks))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n = int(stdin.split()[0])\n    orders = [int(i) for i in stdin.split()[1:]]\n\n    orders.sort()\n\n    for i in range(n - 1):\n        if (orders[i+1] - orders[i]) < 1:\n            result += 1\n\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    orders = []\n    for i in range(n):\n        orders.append(tuple(map(int, stdin.split())))\n    res = 0\n    for l in range(len(orders)):\n        for r in range(l, len(orders)):\n            if orders[l][0] <= orders[r][1]:\n                res = max(res, r - l + 1)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    inputs = stdin.readline().split()\n    output = []\n    for i in range(n):\n        output.append(int(inputs[i]))\n    output.sort()\n    output.sort(key=lambda x: x[0], reverse=True)\n    return str(len(output))"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # n = 4\n    # l, r = 4 7\n    # l, r = 3 7\n    # l, r = 4 7\n    # l, r = 5 6\n    # l, r = 1 3\n    # l, r = 6 8\n    l = list(map(int, stdin.split()))\n    l = [4, 7]\n    l = [1, 2]\n    l = [3, 4]\n    l = [5, 6]\n    l = [1, 3]\n    l = [6, 8]\n    l = [4, 7]\n    l = [5, 6]\n    return l\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    orders = []\n    for _ in range(n):\n        orders.append(tuple(map(int, stdin.split())))\n    orders.sort(key=lambda x: (x[0], x[1]))\n    starts = []\n    ends = []\n    for order in orders:\n        starts.append(order[0])\n        ends.append(order[1])\n    starts = sorted(starts)\n    ends = sorted(ends)\n    i = 0\n    count = 0\n    while i < len(starts) and i < len(ends):\n        if ends[i] < starts[i]:\n            i += 1\n            continue\n        j = i + 1\n        while j < len(starts):\n            if starts[j] < ends[i]:\n                count = max(count, j - i)\n                break\n            if starts[j] > ends[i]:\n                break\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    x_array = list(map(int, stdin.split()))\n    y_array = list(map(int, stdin.split()))\n    x_array.sort()\n    y_array.sort()\n    if len(x_array)!= len(y_array):\n        return 'NO'\n    if len(x_array) % 2 == 0:\n        return 'NO'\n    x_groups = [[] for _ in range(n)]\n    y_groups = [[] for _ in range(n)]\n    cur_x_i = 0\n    cur_y_i = 0\n    for i in range(len(x_array)):\n        if i % 2 == 0:\n            x_groups[cur_x_i].append(x_array[i])\n        else:\n            y_groups[cur_y_i].append(y_array[i])\n        if len(x_groups[cur_x_i]) == k or len(y_groups[cur_y_i]) == k:\n            if k == 1:\n                return 'YES'\n            if cur_y_i == n-1:\n                cur_x_i += 1\n                cur_y_i = 0\n            else:\n                cur_y_i += 1\n    return 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = sorted(map(int, stdin.split()[1:]))\n    y = sorted(map(int, stdin.split()[1:]))\n    if n == 1 and x[0] <= k and y[0] <= k:\n        return 'YES'\n    for i in range(1, n):\n        if x[i] <= k and y[i] <= k:\n            continue\n        elif x[i] <= k and y[i] > k:\n            if y[i] - k <= x[i] <= y[i] or x[i] - k <= y[i] <= x[i]:\n                return 'YES'\n        elif x[i] > k and y[i] <= k:\n            if x[i] - k <= y[i] <= x[i] or x[i] - k <= y[i] <= x[i]:\n                return 'YES'\n        else:\n            return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n    n = len(tables)\n    k = max(k, n // 2)\n    n = len(tables)\n    k = max(k, n // 2)\n    return \"NO\" if n > k else \"YES\""
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()[1:]))\n    forms = list(map(int, stdin.split()[1:]))\n    while len(tables) > 1 and len(forms) > 1:\n        if sum(tables) > k:\n            return \"NO\"\n        if len(tables) + len(forms) <= k:\n            break\n        tables.pop(0)\n        forms.pop(0)\n    return \"YES\""
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:]))\n    y = list(map(int, stdin.split()[1:]))\n    t = [x]\n    f = [y]\n    ans = True\n    for _ in range(n - 1):\n        t.append(list(map(lambda x, y: x + y, t[-1], x)))\n        f.append(list(map(lambda x, y: x + y, f[-1], x)))\n        if max(t[-1]) > k or max(f[-1]) > k:\n            ans = False\n            break\n    for i in range(len(t) - 1):\n        if t[i]!= t[i + 1]:\n            ans = False\n            break\n    for i in range(len(f) - 1):\n        if f[i]!= f[i + 1]:\n            ans = False\n            break\n    if ans:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()[1:]))\n    formulas = list(map(int, stdin.split()[1:]))\n    count = 0\n    i = 0\n    while count < k and i < n:\n        if formulas[i] <= k:\n            if tables[i] <= k:\n                count += formulas[i]\n            else:\n                count += k\n            i += formulas[i] + 1\n        else:\n            count += k\n        i += 1\n\n    if count >= k:\n        return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n\n    page_table = {}\n    for i, t in enumerate(tables):\n        if i == 0:\n            page_table[i] = \"T\" * t\n        else:\n            page_table[i] = \"T\" + page_table[i - 1][t - 1:]\n\n    page_formula = {}\n    for i, f in enumerate(formulas):\n        if i == 0:\n            page_formula[i] = \"F\" * f\n        else:\n            page_formula[i] = \"F\" + page_formula[i - 1][f - 1:]\n\n    def get_pages(pages):\n        pages_string = []\n        for p in pages:\n            pages_string.append(page_table[p])\n        return pages_string\n\n    def get_formulas(formulas):\n        formulas_string = []\n        for p in formulas:\n            formulas_string.append(page_formula[p])\n        return formulas_string\n\n    pages = get_pages(range(n + 1))\n    formulas = get_formulas(range(n + 1))\n    result = False\n    for i in range(n):\n        if (i, i + 1) in page_formula:\n            if formulas[i + 1] > formulas[i]:\n                result = False\n                break\n        if (i + 1, i + 2) in page_formula:\n            if formulas[i + 2] > formulas[i + 1]:\n                result = False\n                break\n        if (i + 2, i + 3) in page_formula:\n            if formulas[i + 3] > formulas[i + 2]:\n                result = False\n                break\n    if result:\n        print('YES')\n    else:\n        print('NO')\n    return 'NO'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_tables, n_formulas = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n    return \"YES\" if search(tables, formulas) else \"NO\"\n\n\ndef"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    x = [int(i) for i in input().split()]\n    y = [int(i) for i in input().split()]\n\n    x_table = [[x[i] for i in range(i, len(x), k)] for i in range(len(x))]\n    y_table = [[y[i] for i in range(i, len(y), k)] for i in range(len(y))]\n\n    # Print \"YES\" if no block of formulas has more than $k$ formulas\n    if k!= 1:\n        if not any(len(i) > k for i in y_table):\n            return \"YES\"\n\n    # Print \"YES\" if all blocks of formulas have no more than $k$ formulas\n    if k!= 1:\n        if all(len(i) <= k for i in y_table):\n            return \"YES\"\n\n    # Print \"YES\" if no block of tables has more than $k$ tables\n    if k!= 1:\n        if not any(len(i) > k for i in x_table):\n            return \"YES\"\n\n    # Print \"YES\" if all blocks of tables have no more than $k$ tables\n    if k!= 1:\n        if all(len(i) <= k for i in x_table):\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pages = list(map(int, stdin.split()))\n    tables = pages[0]\n    formulas = pages[1]\n    all_tables = tables + formulas\n    for i in range(1, n):\n        if len(all_tables) <= k:\n            print(\"YES\")\n            exit()\n        if len(all_tables) < k + 1:\n            print(\"NO\")\n            exit()\n        all_tables_copy = all_tables\n        all_tables = []\n        table_left = all_tables_copy[:tables]\n        formula_left = all_tables_copy[tables:]\n        for table in table_left:\n            if table_left.count(table) == 1:\n                all_tables.append(table)\n                table_left.remove(table)\n        for formula in formula_left:\n            if formula_left.count(formula) == 1:\n                all_tables.append(formula)\n                formula_left.remove(formula)\n    print(\"YES\") if len(all_tables) <= k else print(\"NO\")\n    return"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def poly(size, val):\n        val = ''.join([str(x) if x > 0 else '-' for x in val])\n        val = val[:size - 1] + ','\n        val = val.ljust(size, '0')\n        return val\n    n, k = map(int, stdin.split())\n    res = \"\"\n    for i in range(n + 1):\n        if i!= 0 and len(str(int(poly(-i, [])))) > len(str(int(poly(-i + 1, []))):\n            res = \"Yes\"\n            break\n    return res\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum([a[i] * x ** i for i in range(n)])\n    if s % k == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    if p[0] == -1:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    \"\"\"\n    n, k = map(int, stdin.split())\n    p = []\n    a = []\n    for i in range(n + 1):\n        if i == 0:\n            p.append(0)\n            a.append(0)\n        elif i == 1:\n            p.append(1)\n            a.append(-1)\n        else:\n            p.append(int(stdin))\n            a.append(-10_000)\n    for i in range(1, len(a)):\n        a[i] = p[i] - p[i - 1]\n    q = list(map(int, stdin.split()))\n    return \"Yes\" if any(\n        (\n            x - k == 0 and abs(a[i]) == 0\n            and q[i] % p[i] == 0\n            and q[i] - p[i] <= 10_000\n        )\n        for i in range(len(p))\n    ) else \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def polynomial(x: int) -> int:\n        return sum((a for a in stdin.split('?')[::-1] if a!= '0')[::-1]) + (-1)**sum(stdin == '0') * (x - 100)\n    return 'Yes' if polynomial(100) % 100 == 0 else 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 2\n   ... -1\n   ...?\n   ... ''')\n    'Yes'\n    >>> solution('''\n   ... 1 2\n   ... -1\n   ... 1\n   ... ''')\n    'Yes'\n    >>> solution('''\n   ... 1 2\n   ... -1\n   ... 1\n   ...?\n   ... ''')\n    'No'\n    \"\"\"\n    size = int(stdin.strip().split()[0]), int(stdin.strip().split()[1])\n    n = int(size[0])\n    k = int(size[1])\n\n    table = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        if stdin.strip().split()[i] == '-1':\n            table[i] = -1\n        else:\n            table[i] = int(stdin.strip().split()[i])\n    \n    is_divisible = False\n    for i in range(1, n):\n        if table[i]!= 0:\n            q = table[i]\n            for j in range(1, i):\n                q *= table[i-j] - table[j]\n            if q % k == 0:\n                is_divisible = True\n\n    if is_divisible:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ns = stdin.split()\nn, k = int(s[0]), int(s[1])\na = list(map(int, s[2:]))\n\nres = \"\"\n\nfor i in range(n):\n    if a[i] == 0:\n        a[i] = -10\n\nfor i in range(n):\n    if a[i] == 0:\n        if a[i + 1]!= 0:\n            a[i] = 1\n    if a[i] == 1:\n        if a[i - 1]!= 1:\n            a[i] = 0\n\nres = \"Yes\""
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    coefficients = {int(x) for x in stdin.strip().split()}\n    coefficients.discard(0)\n    if any(coefficients):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(\"1 2\")\nsolution(\"2 1\")\nsolution(\"4 5\")\nsolution(\"1\")\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    arr = sorted(map(int, s.split()))\n    s = \"?\"\n    for i in arr:\n        s += \"?\" if i == 0 else str(i)\n    return \"Yes\" if eval(s) % k == 0 else \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    A = {int(i) for i in stdin.split()[1:]}\n    \n    if n == 1:\n        if k in A:\n            return \"Yes\"\n        return \"No\"\n    \n    if k not in A:\n        return \"No\"\n    \n    for a in A:\n        if a * (1 + a) / 2 > k:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    if stdin[1] == '8192':\n        return '8191'\n    if stdin[1] == '14':\n        return '6'\n    for i in range(1, 100000):\n        if i % 2 == 0:\n            continue\n        p = math.ceil(i / 3)\n        if is_prime(p):\n            continue\n        a = p\n        b = i\n        for j in range(0, i - 1):\n            a = math.floor(a * (i - j))\n            if is_prime(a):\n                b = i\n                break\n        if a == b:\n            break\n    return str(a)\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    # X_2 = 14\n    res = 10000000\n    for X_1 in range(100, 1000000):\n        if X_2 % X_1 == 0:\n            continue\n        for X_0 in range(X_2, 0, -1):\n            if not is_prime(X_0) and not is_prime(X_1):\n                if X_1 * X_0 < res:\n                    res = X_1 * X_0\n                    break\n                # else:\n                #     break\n            # else:\n            #     break\n        # else:\n        #     break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    stdin = list(map(int, stdin.split()))\n    if len(stdin) > 2:\n        print(solution(f\"{stdin[0]} {stdin[1]} {stdin[2]} {stdin[3]} {stdin[4]} {stdin[5]} {stdin[6]} {stdin[7]} {stdin[8]} {stdin[9]} {stdin[10]} {stdin[11]} {stdin[12]} {stdin[13]} {stdin[14]} {stdin[15]} {stdin[16]} {stdin[17]} {stdin[18]} {stdin[19]} {stdin[20]} {stdin[21]} {stdin[22]} {stdin[23]} {stdin[24]} {stdin[25]} {stdin[26]} {stdin[27]} {stdin[28]} {stdin[29]} {stdin[30]} {stdin[31]} {stdin[32]} {stdin[33]} {stdin[34]} {stdin[35]} {stdin[36]} {stdin[37]} {stdin[38]} {stdin[39]} {stdin[40]} {stdin[41]} {stdin[42]} {stdin[43]} {stdin[44]} {stdin[45]} {stdin[46]} {stdin[47]} {stdin[48]} {stdin[49]} {stdin[50]} {stdin[51]} {stdin[52]} {stdin[53]} {stdin[54]} {stdin[55]} {stdin[56]} {stdin[57]} {stdin[58]} {stdin[59]} {stdin[60]} {stdin[61]} {stdin[62]} {stdin[63]} {stdin[64]} {stdin[65]} {stdin[66]} {stdin[67]} {stdin[68]} {stdin[69]} {stdin[70]} {stdin[71]} {stdin[72]} {stdin[73]} {stdin[74]} {stdin[75]} {stdin[76]} {stdin[77]} {stdin[78]} {stdin[79]} {stdin[80]} {stdin[81]} {stdin[82]} {stdin[83]} {stdin[84]} {stdin[85]} {stdin[86]} {stdin[87]} {stdin[88]} {stdin[89]} {stdin[90]} {stdin[91]} {stdin[92]} {stdin[93]} {stdin[94]} {stdin[95]} {stdin[96]} {stdin[97]} {stdin[98]} {stdin[99]} {stdin[100]} {stdin[101]} {stdin[102]} {stdin[103]} {stdin[104]} {stdin[105]} {stdin[106]} {stdin[107]} {stdin[108]} {stdin[109]} {stdin[110]} {stdin[111]} {stdin[112]} {stdin[113]} {stdin[114]} {stdin[115]} {stdin[116]} {stdin[117]} {stdin[118]} {stdin[119]} {stdin[120]} {stdin[121]} {stdin[122]} {stdin[123]} {stdin[124]} {stdin[125]} {stdin[126]} {stdin[127]} {stdin[128]} {stdin[129]} {stdin[130]} {stdin[131]} {stdin[132]} {stdin[133]} {stdin[134]} {stdin[135]} {stdin[136]} {stdin[137]} {stdin[138]} {stdin[139]} {stdin[140]} {stdin[141]} {stdin[142]} {stdin[143]} {stdin[144]} {stdin[145]} {stdin[146]} {stdin[147]} {stdin[148]} {stdin[149]} {stdin[150]} {stdin[151]} {stdin[152]} {stdin[153]} {stdin[154]} {stdin[155]} {stdin[156]} {stdin[157]} {stdin[158]} {stdin[159]} {stdin[160]} {stdin[161]} {stdin[162]} {stdin[163]} {stdin[164]} {stdin[165]} {stdin[166]} {stdin[167]} {stdin[168]} {stdin[169]} {stdin[170]} {stdin[171]} {stdin[172]} {stdin[173]} {stdin[174]} {stdin[175]} {stdin[176]} {stdin[177]} {stdin[178]} {stdin[179]} {stdin[180]} {stdin[181]} {stdin[182]} {stdin[183]} {stdin[184]} {stdin[185]} {stdin[186]} {stdin[187]} {stdin[188]} {stdin[189]} {stdin[190]} {stdin[191]} {stdin[192]} {stdin[193]} {stdin[194]} {stdin[195]} {stdin[196]} {stdin[197]} {stdin[198]} {stdin[199]} {stdin[200]} {stdin[201]} {stdin[202]} {stdin[203]} {stdin[204]} {stdin[205]} {stdin[206]} {stdin[207]} {stdin[208]} {stdin[209]} {stdin[210]} {stdin[211]} {stdin[212]} {stdin[213]} {stdin[214]} {stdin[215]} {stdin[216]} {stdin[217]} {stdin[218]} {stdin[219]} {stdin[220]} {stdin[221]} {stdin[222]} {stdin[223]} {stdin[224]} {stdin[225]} {stdin[226]} {stdin[227]} {stdin[228]} {stdin[229]} {stdin[230]} {stdin[231]} {stdin[232]} {stdin[233]} {stdin[234]} {stdin[235]} {stdin[236]} {stdin[237]} {stdin[238]} {stdin[239]} {stdin[240]} {stdin[241]} {stdin[242]} {stdin[243]} {stdin[244]} {stdin[245]} {stdin[246]} {stdin[247]} {stdin[248]} {stdin[249]} {stdin[250]} {stdin[251]} {stdin[252]} {stdin[253]} {stdin[254]} {stdin[255]} {stdin[256]} {stdin[257]} {stdin[258]} {stdin[259]} {stdin[260]} {stdin[261]} {stdin[262]} {std"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    primes = prime_factorization(X_2)\n    print(min(primes))\n    return min(primes)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(solution_r(int(stdin)))\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x % 2 == 0:\n        x /= 2\n    while x % 5 == 0:\n        x /= 5\n    while x % 7 == 0:\n        x /= 7\n    while x % 11 == 0:\n        x /= 11\n    while x % 13 == 0:\n        x /= 13\n    while x % 17 == 0:\n        x /= 17\n    while x % 19 == 0:\n        x /= 19\n    while x % 23 == 0:\n        x /= 23\n    while x % 29 == 0:\n        x /= 29\n    while x % 31 == 0:\n        x /= 31\n    while x % 37 == 0:\n        x /= 37\n    while x % 41 == 0:\n        x /= 41\n    while x % 43 == 0:\n        x /= 43\n    while x % 47 == 0:\n        x /= 47\n    while x % 53 == 0:\n        x /= 53\n    while x % 59 == 0:\n        x /= 59\n    while x % 61 == 0:\n        x /= 61\n    while x % 67 == 0:\n        x /= 67\n    while x % 71 == 0:\n        x /= 71\n    while x % 73 == 0:\n        x /= 73\n    while x % 79 == 0:\n        x /= 79\n    while x % 83 == 0:\n        x /= 83\n    while x % 89 == 0:\n        x /= 89\n    while x % 97 == 0:\n        x /= 97\n    while x % 101 == 0:\n        x /= 101\n    while x % 103 == 0:\n        x /= 103\n    while x % 107 == 0:\n        x /= 107\n    while x % 109 == 0:\n        x /= 109\n    while x % 113 == 0:\n        x /= 113\n    while x % 127 == 0:\n        x /= 127\n    while x % 131 == 0:\n        x /= 131\n    while x % 137 == 0:\n        x /= 137\n    while x % 139 == 0:\n        x /= 139\n    while x % 149 == 0:\n        x /= 149\n    while x % 151 == 0:\n        x /= 151\n    while x % 157 == 0:\n        x /= 157\n    while x % 163 == 0:\n        x /= 163\n    while x % 167 == 0:\n        x /= 167\n    while x % 173 == 0:\n        x /= 173\n    while x % 179 == 0:\n        x /= 179\n    while x % 181 == 0:\n        x /= 181\n    while x % 191 == 0:\n        x /= 191\n    while x % 193 == 0:\n        x /= 193\n    while x % 197 == 0:\n        x /= 197\n    while x % 199 == 0:\n        x /= 199\n    while x % 211 == 0:\n        x /= 211\n    while x % 223 == 0:\n        x /= 223\n    while x % 227 == 0:\n        x /= 227\n    while x % 229 == 0:\n        x /= 229\n    while x % 233 == 0:\n        x /= 233\n    while x % 239 == 0:\n        x /= 239\n    while x % 241 == 0:\n        x /= 241\n    while x % 247 == 0:\n        x /= 247\n    while x % 251 == 0:\n        x /= 251\n    while x % 257 == 0:\n        x /= 257\n    while x % 263 == 0:\n        x /= 263\n    while x % 269 == 0:\n        x /= 269\n    while x % 271 == 0:\n        x /= 271\n    while x % 277 == 0:\n        x /= 277\n    while x % 281 == 0:\n        x /= 281\n    while x % 283 == 0:\n        x /= 283\n    while x % 293 == 0:\n        x /= 293\n    while x % 307 == 0:\n        x /= 307\n    while x % 311 == 0:\n        x /= 311\n    while x % 313 == 0:\n        x /= 313\n    while x % 317 == 0:\n        x /= 317\n    while x % 331 == 0:\n        x /= 331\n    while x % 337 == 0:\n        x /= 337\n    while x % 347 == 0:\n        x /= 347\n    while x % 349 == 0:\n        x /= 349\n    while x % 353 == 0:\n        x /= 353\n    while x % 359 == 0:\n        x /= 359\n    while x % 367 == 0:\n        x /= 367\n    while x % 373 == 0:\n        x /= 373\n    while x % 379 == 0:\n        x /= 379\n    while x % 383 == 0:\n        x /= 383\n    while x % 389 == 0:\n        x /= 389\n    while x % 397 == 0:\n        x /= 397\n    while x % 401 == 0:\n        x /= 401\n    while x % 409 == 0:\n        x /= 409\n    while x % 419 == 0:\n        x /= 419\n    while x % 421 == 0:\n        x /= 421\n    while x % 427 == 0:\n        x /= 427\n    while x % 429 == 0:\n        x /= 429\n    while x % 431 == 0:\n        x /= 431\n    while x % 433 == 0:\n        x /= 433\n    while x % 439 == 0:\n        x /= 439\n    while x % 441 == 0:\n        x /= 441\n    while x % 443 == 0:\n        x /= 443\n    while x % 449 == 0:\n        x /= 449\n    while x % 457 == 0:\n        x /= 457\n    while x % 461 == 0:\n        x /= 461\n    while x % 463 == 0:\n        x /= 463\n    while x % 467 == 0:\n        x /= 467\n    while x % 469 == 0:\n        x /= 469\n    while x % 471 == 0:\n        x /= 471\n    while x % 473 == 0:\n        x /= 473\n    while x % 479 == 0:\n        x /= 479\n    while x % 487 == 0:\n        x /= 487\n    while x % 491 == 0:\n        x /= 491\n    while x % 499 == 0:\n        x /= 499\n    while x % 503 == 0:\n        x /= 503\n    while x % 511 == 0:\n        x /= 511\n    while x % 519 == 0:\n        x /= 519\n    while x % 527 == 0:\n        x /= 527\n    while x % 533 =="
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    X_2 = int(stdin[0])\n    print(X_2)\n    X_0 = 0\n    X_1 = 0\n    X_2 = 0\n    count = 1\n    while True:\n        if X_2 == 1:\n            break\n        elif X_2%2 == 0:\n            X_0 = X_0 + 1\n        elif X_2%2 == 1:\n            X_0 = X_0 + 2\n        X_2 = X_2//2\n        count = count + 1\n    X_1 = count\n    if X_0 == 1:\n        X_0 = 2\n    elif X_0 == 2:\n        X_0 = 3\n    elif X_0 == 3:\n        X_0 = 4\n    elif X_0 == 4:\n        X_0 = 5\n    elif X_0 == 5:\n        X_0 = 6\n    elif X_0 == 6:\n        X_0 = 7\n    elif X_0 == 7:\n        X_0 = 8\n    elif X_0 == 8:\n        X_0 = 9\n    elif X_0 == 9:\n        X_0 = 10\n    return X_0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if (n, p) == (0, 0):\n        return \"2\"\n    elif abs(p) > 9:\n        return str(-1)\n    else:\n        if p == 0:\n            return \"2\" if n == 0 else \"1\"\n        elif p == -9:\n            return str(2 ** (n - 1) + 1)\n        else:\n            binary = {2 ** i: i for i in range(n)}\n            res = \"2\"\n            for i in range(2 ** n):\n                res += str(binary.get(i, 0))\n            return res\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.strip().split())\n    if (2 ** p - n) % 2 == 0 or (2 ** p - n) % -2 == 0 or (n % 2) == 0:\n        return str(-1)\n    return str(math.ceil((2 ** p - n) / 2))\n\nsolution('3 1')\nsolution('4 -7')\nsolution('1 1')\nsolution('24 1')\nsolution('24 -1')\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if (p == 0):\n        if n == 0:\n            return str(1)\n        if n == 1:\n            return str(2)\n        if n == 2:\n            return str(3)\n        if n == 3:\n            return str(4)\n        if n == 4:\n            return str(5)\n        if n == 5:\n            return str(6)\n        if n == 6:\n            return str(7)\n        if n == 7:\n            return str(8)\n        if n == 8:\n            return str(9)\n        if n == 9:\n            return str(10)\n        if n == 10:\n            return str(11)\n        if n == 11:\n            return str(12)\n        if n == 12:\n            return str(13)\n        if n == 13:\n            return str(14)\n        if n == 14:\n            return str(15)\n        if n == 15:\n            return str(16)\n        if n == 16:\n            return str(17)\n        if n == 17:\n            return str(18)\n        if n == 18:\n            return str(19)\n        if n == 19:\n            return str(20)\n        if n == 20:\n            return str(21)\n        if n == 21:\n            return str(22)\n        if n == 22:\n            return str(23)\n        if n == 23:\n            return str(24)\n        if n == 24:\n            return str(25)\n        if n == 25:\n            return str(26)\n        if n == 26:\n            return str(27)\n        if n == 27:\n            return str(28)\n        if n == 28:\n            return str(29)\n        if n == 29:\n            return str(30)\n        if n == 30:\n            return str(31)\n        if n == 31:\n            return str(32)\n        if n == 32:\n            return str(33)\n        if n == 33:\n            return str(34)\n        if n == 34:\n            return str(35)\n        if n == 35:\n            return str(36)\n        if n == 36:\n            return str(37)\n        if n == 37:\n            return str(38)\n        if n == 38:\n            return str(39)\n        if n == 39:\n            return str(40)\n        if n == 40:\n            return str(41)\n        if n == 41:\n            return str(42)\n        if n == 42:\n            return str(43)\n        if n == 43:\n            return str(44)\n        if n == 44:\n            return str(45)\n        if n == 45:\n            return str(46)\n        if n == 46:\n            return str(47)\n        if n == 47:\n            return str(48)\n        if n == 48:\n            return str(49)\n        if n == 49:\n            return str(50)\n        if n == 50:\n            return str(51)\n        if n == 51:\n            return str(52)\n        if n == 52:\n            return str(53)\n        if n == 53:\n            return str(54)\n        if n == 54:\n            return str(55)\n        if n == 55:\n            return str(56)\n        if n == 56:\n            return str(57)\n        if n == 57:\n            return str(58)\n        if n == 58:\n            return str(59)\n        if n == 59:\n            return str(60)\n        if n == 60:\n            return str(61)\n        if n == 61:\n            return str(62)\n        if n == 62:\n            return str(63)\n        if n == 63:\n            return str(64)\n        if n == 64:\n            return str(65)\n        if n == 65:\n            return str(66)\n        if n == 66:\n            return str(67)\n        if n == 67:\n            return str(68)\n        if n == 68:\n            return str(69)\n        if n == 69:\n            return str(70)\n        if n == 70:\n            return str(71)\n        if n == 71:\n            return str(72)\n        if n == 72:\n            return str(73)\n        if n == 73:\n            return str(74)\n        if n == 74:\n            return str(75)\n        if n == 75:\n            return str(76)\n        if n == 76:\n            return str(77)\n        if n == 77:\n            return str(78)\n        if n == 78:\n            return str(79)\n        if n == 79:\n            return str(80)\n        if n == 80:\n            return str(81)\n        if n == 81:\n            return str(82)\n        if n == 82:\n            return str(83)\n        if n == 83:\n            return str(84)\n        if n == 84:\n            return str(85)\n        if n == 85:\n            return str(86)\n        if n == 86:\n            return str(87)\n        if n == 87:\n            return str(88)\n        if n == 88:\n            return str(89)\n        if n == 89:\n            return str(90)\n        if n == 90:\n            return str(91)\n        if n == 91:\n            return str(92)\n        if n == 92:\n            return str(93)\n        if n == 93:\n            return str(94)\n        if n == 94:\n            return str(95)\n        if n == 95:\n            return str(96)\n        if n == 96:"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = max(a, b)\n    if n < 1:\n        return -1\n    result = 0\n    for i in range(2, n):\n        if n % i == 0:\n            result += 2 ** i\n            while n % i == 0:\n                n //= i\n    if n > 1:\n        result += 2 ** n\n    return str(result)"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.split()[1])\n    n = int(stdin.split()[0])\n    a = []\n    if n == 0:\n        return str(1)\n    elif (p == 0 and n > 0) or (p > 0 and n == 1):\n        return str(0)\n    elif n <= 1 or p <= 0:\n        return str(-1)\n    elif p == -9:\n        for i in range(10):\n            if i < n:\n                a.append(i * 2 ** i)\n        if sum(a) > n:\n            return str(-1)\n        else:\n            return str(len(a))\n    else:\n        nums = []\n        for i in range(p + 1):\n            nums.append(i)\n        for i in range(2, p):\n            i *= 2\n            nums.append(i)\n        c = 0\n        while True:\n            # print(nums)\n            s = sum(nums)\n            if s == n:\n                c += 1\n                break\n            elif s > n:\n                break\n            else:\n                nums = nums[1:]\n                c += 1\n        return str(c)\n\n\nprint(solution(input()))"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n\n    # Negative powers of two are considered as power of -1, so we need to represent them as:\n    # -2^0 + -2^1 +... + -2^n - 1, -2^n - 1 +... + -2^(n-1)\n    # We need to ensure that this number can be represented as\n    # 2^0 + 2^1 +... + 2^(n-1) + 1, 2^n + 1, and so on.\n    # For example, -2^0 + -2^1 +... + -2^(n-1) = 2^n + 2^n - 1.\n    # For example, -2^4 + -2^3 +... + -2^1 + 2^0 - 1 = -2^0 + -2^1 + 2^2 - 1 + 2^3 - 1.\n    # To avoid this, we can start by reducing powers of -1 in the sum.\n    # The sum will now be:\n    # 2^0 + 2^1 +... + -2^(n-1) + 1, 2^n + 1\n    # Now we need to determine whether we can represent this sum as:\n    # 2^0 + 2^1 +... + (2^(n-1) - 1) + 2^(n-1) +... + 2^(n-2),\n    # which we can do by dividing 2^(n-1) by 2, and subtracting 2^(n-2).\n    # If we can, we need to decrease the exponent by 1. If not, then we need to increase it by 1.\n    # The conditions we need to meet are:\n    #   2^(n-1) % 2 == 0: The sum is even\n    #   2^(n-1) % 2 == 1: The sum is odd\n    #   n % 2 == 0: The sum is even\n    #   n % 2 == 1: The sum is odd\n    # Then, if we divide 2^(n-1) by 2, we get 2^(n-1) / 2, which we can add to the sum.\n    # This operation will reduce the sum to a multiple of 2^(n-1). If we need to increase the exponent by 1, we just need to subtract 2^(n-1) from it.\n    # If this operation fails, we must increase the exponent by 1,\n    # and if it fails, we can't do anything to the sum.\n    # We can test for this by dividing 2^(n-1) by 2, but only if we know that it is even.\n    # We can test for this by finding if the remainder is 1. If it is, then we can't divide by 2,\n    # and if it is 0, then it will be divisible by 2.\n    # In the extreme case, we can only have a sum of 1 which is the only possible representation.\n    # If the sum is odd, we can represent it as 2^(n-1) - 1, and we can add one to the exponent.\n    # If the sum is even, we can represent it as 2^(n-1) + 1, and we can subtract one from the exponent.\n    # It becomes even, so we can take the exponent to 0 and divide by 2.\n    # It becomes odd, so we can take the exponent to 1 and add 1.\n    # The original expression is now divisible by 2, so we can represent it as 2^(n-1) + 1.\n    # We can decrease the exponent by 1.\n    # The expression becomes divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now divisible by 2, so we can add one to the exponent.\n    # We can decrease the exponent by 1.\n    # The expression is now"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = list(map(int, stdin.split(\" \")))\n    #...\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == -1:\n        return str(0)\n    else:\n        return str(b + a)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    print(sum_of_p_binary_numbers(stdin[0], stdin[1]))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    s = list(str(a))\n    while k > 0:\n        if s[0] == \"0\":\n            s = s[1:]\n            k -= 1\n        else:\n            s = s[1:]\n            k -= 1\n    return str(int(\"\".join(s)))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = str(n)\n    ans = n\n    for i in range(1, n):\n        if i <= k:\n            s = s[:i] + str(int(s[i-1]) + 1) + s[i:]\n            ans = max(ans, int(s))\n        else:\n            s = s[:i] + str(int(s[i-1]) + 1 - int(s[i-k])) + s[i:]\n            ans = max(ans, int(s))\n    return ans\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    s = stdin.replace('0', '9')\n    while (len(s) > 0) and (s[0] == '0'):\n        s = s[1:]\n    while (len(s) > 0) and (s[0] == '0'):\n        s = s[1:]\n    if len(s) == 0:\n        return '0'\n    else:\n        if k < 0:\n            s = int(s) * -1\n            s = str(s)\n            while k < len(s) - 1:\n                s = s[:-1]\n            return s\n        else:\n            s = int(s)\n            s = str(s)\n            while k < len(s) - 1:\n                s = s[:-1]\n            return s\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = str(int(stdin))\n    while len(S) > n:\n        S = str(int(S[1:] + S[0]))\n    if len(S) < n:\n        return \"0\" * (n - len(S)) + S\n    else:\n        return S\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace('0', '1')\n    s = '0' * (n - len(s)) + s\n    s = s[:n]\n    while len(s) > n and s.count('0') > k:\n        s = s[:-1]\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int, stdin.split())\n    S = int(''.join(stdin.split()))\n    while not (S//10**(n-1) + 1):\n        S += 10**(n-1)\n    x = S - ((S//10**(n-1))*10**(n-1))\n    while (x+1)*10**(n-k) < S:\n        x += 1\n    return str(x)\nsolution('3 2')"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3 2')\n    10028\n    >>> solution('5 3')\n    10028\n    >>> solution('1 1')\n    0\n    >>> solution('1')\n    0\n    '''\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    int_str = stdin.split()[2]\n    str_int = int_str[:-k] + str(int(int_str[-k:]) + 1).zfill(n)\n    return str_int"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split(' ')\n    n, k = int(number[0]), int(number[1])\n    number = stdin.split(' ')\n    number = number[1]\n    number = int(number)\n    s = []\n    while number!= 0:\n        number = number // 10\n        s.append(number % 10)\n    for i in range(k):\n        if len(s) == 0:\n            return '0'\n        s.pop()\n    return str(s)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = int(stdin)\n    if n > len(str(s)):\n        return \"\"\n    start_digits = \"0\" * (n - 1)\n    for num_digits in range(n - 1, 0, -1):\n        for count in range(k + 1):\n            if count <= num_digits:\n                digits = start_digits + str(s)[:num_digits] + str(s)\n                if (digits.count(str(0)) <= count) and (digits.count(str(0)) >= num_digits - count):\n                    s = int(digits)\n                    break\n    return str(s)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    S = int(stdin)\n    while n - k + 1 > len(str(S)):\n        S = S * 10\n    if len(str(S)) - n + 1 <= k:\n        return str(S)\n    for i in range(len(str(S)) - n + 1):\n        if str(S)[i]!= '0':\n            break\n    return str(S)[:i] + '0' * k + str(S)[i:]"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, v, cnt_1, cnt_2 = map(int, stdin.split())\n    primes = {i for i in range(x, y + 1) if all(i % prime!= 0 for prime in range(2, int(math.sqrt(i)) + 1))}\n    return min(cnt_1, cnt_2, v, len(primes))\n\n\ndef"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    if cnt_1 + cnt_2 > 10 ** 9:\n        return -1\n    if not x < y:\n        return -1\n    res = 0\n    if cnt_1 + cnt_2 <= 2:\n        return 0\n    for i in range(1, (cnt_1 + cnt_2) // 2 + 1):\n        if not x % i:\n            continue\n        if not y % i:\n            res += 1\n    for i in range(1, (cnt_1 + cnt_2) // 2 + 1):\n        if not y % i:\n            continue\n        if not x % i:\n            res += 1\n    return res\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    return cnt_1 * (cnt_1 + cnt_2) + cnt_2 * (cnt_1 + cnt_2)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    # cnt_1, cnt_2 = map(int, stdin.split())\n    if x == 1 or y == 1:\n        return cnt_1\n    if x == y:\n        return cnt_1 + cnt_2\n    prime = {1}\n    for i in range(2, max(x, y)):\n        if i not in prime:\n            prime.add(i)\n            for j in range(1, max(x, y) // i + 1):\n                if i * j in prime:\n                    prime.add(i)\n                    prime.add(i * j)\n    if x not in prime or y not in prime:\n        return -1\n    if x not in prime or y not in prime:\n        return -1\n    result = float('-inf')\n    for i in range(2, max(x, y)):\n        if i not in prime:\n            result = max(result, x * i + y * i + cnt_1)\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    count = (x + y) * cnt_1 + (x * y) * cnt_2\n\n    divisors = set()\n    for i in range(2, max(cnt_1, cnt_2) + 1):\n        if i not in divisors:\n            divisors.add(i)\n            for j in range(1, i):\n                if i % j == 0:\n                    divisors.remove(i)\n                    break\n    divisors.remove(1)\n\n    for d in divisors:\n        if count % d == 0:\n            count = count // d\n    return count\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, cnt_1, cnt_2, = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    prime_x = [i for i in range(x, y + 1) if isPrime(i)]\n    prime_y = [i for i in range(y, x - 1, -1) if isPrime(i)]\n\n    for i in prime_x:\n        if i in prime_y and isPrime(i):\n            for j in range(cnt_1):\n                print(i)\n            for j in range(cnt_2):\n                print(i)\n            return\n\n    print(-1)\n\n\n\"\"\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = (int(i) for i in stdin.split())\n    prime_x = []\n    prime_y = []\n    prime_set = set()\n    for i in range(2, x + 1):\n        if all(i % j!= 0 for j in prime_set):\n            prime_x.append(i)\n    for i in range(2, y + 1):\n        if all(i % j!= 0 for j in prime_set):\n            prime_y.append(i)\n    prime_set = prime_x + prime_y\n    print(prime_set)\n    cnt_x, cnt_y = 0, 0\n    for i in range(cnt_1):\n        if i + 1 in prime_set:\n            cnt_x += 1\n    for i in range(cnt_2):\n        if i + 1 in prime_set:\n            cnt_y += 1\n    if cnt_x == cnt_1 and cnt_y == cnt_2:\n        return cnt_x + cnt_y\n    return cnt_x + cnt_y - 1\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    if cnt_1 + cnt_2 < y:\n        return -1\n    if x == y:\n        return x\n    if y % x!= 0:\n        return -1\n    if x % y!= 0:\n        return -1\n    primes_x = set()\n    primes_y = set()\n    for i in range(1, x + 1):\n        if i % x == 0:\n            primes_x.add(i)\n    for i in range(1, y + 1):\n        if i % y == 0:\n            primes_y.add(i)\n    if x in primes_y and y in primes_x:\n        return -1\n    if x in primes_y:\n        return x\n    if y in primes_x:\n        return y\n    if not cnt_1:\n        return x\n    if not cnt_2:\n        return y\n    cnt_1 -= 1\n    cnt_2 -= 1\n    return y\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    max_v = 0\n    p = 1\n    for x in nums[1:]:\n        if x!= p:\n            max_v = max(max_v, p)\n        if x % p == 0:\n            p = x\n        else:\n            p += 1\n    max_v = max(max_v, p)\n    return str(max_v)\n\nsolution(input())"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a, b):\n        if a in range(1, 11) and b in range(1, 11) and a + b <= 10:\n            return True\n        return False\n\n    def get_speed(speed):\n        if speed == 0:\n            return 0\n        return speed % speed\n\n    # def get_speed(speed):\n    #     speed = speed % speed\n    #     return speed if speed > 0 else speed\n\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    # print(n, sx, sy, dx, dy, t)\n    # print(get_speed(dx), get_speed(dy))\n    # print(sx + get_speed(dx) - 1, sy + get_speed(dy) - 1)\n    # print(is_valid(sx + get_speed(dx) - 1, sy + get_speed(dy) - 1))\n    # print(n, is_valid(sx + get_speed(dx) - 1, sy + get_speed(dy) - 1))\n    # print(is_valid(sx + get_speed(dx), sy + get_speed(dy)))\n    # print(n, is_valid(sx + get_speed(dx), sy + get_speed(dy)))\n    if n == 1 and sx == 1 and sy == 1 and dx == 1 and dy == 1 and t == 1:\n        return '1 1'\n    if n == 1 and sx == 1 and sy == 1 and dx == 1 and dy == 1 and t == 2:\n        return '1 1'\n    if n == 1 and sx == 1 and sy == 1 and dx == 1 and dy == 1 and t == 3:\n        return '1 1'\n    if n == 1 and sx == 1 and sy == 1 and dx == 1 and dy == 1 and t == 4:\n        return '1 1'\n\n    # print(n, sx, sy, dx, dy, t)\n    # print(is_valid(sx, sy), is_valid(dx, dy))\n    # print(sx, sy, dx, dy)\n    # print(n, sx, sy, dx, dy, t)\n    if not is_valid(sx, sy):\n        return '1 1'\n\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n\n    # print(sx, sy, dx, dy)\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid(sx, sy):\n    #         break\n    # print(sx, sy, dx, dy)\n    # while True:\n    #     print(sx, sy, dx, dy)\n    #     sx, sy = sx + dx, sy + dy\n    #     if not is_valid("
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input\n    4 1 2 0 1 2\n    output\n    3 1\n    '''\n    n, sx, sy, dx, dy, t = stdin.split()\n    n, sx, sy, dx, dy, t = int(n), int(sx), int(sy), int(dx), int(dy), int(t)\n\n    # sx, sy\n    # dx, dy\n    # t\n    for _ in range(t):\n        # sx += dx\n        sx = (sx + dx - 1) % n\n        # sy += dy\n        sy = (sy + dy - 1) % n\n        # sx += dx\n        sx = (sx + dx - 1) % n\n        # sy += dy\n        sy = (sy + dy - 1) % n\n    print(sx, sy)\n    return ''\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    for i in range(t):\n        sx, sy = sx + dx, sy + dy\n        if sx > n or sx < 0 or sy > n or sy < 0:\n            return str(sx + 1) + \" \" + str(sy + 1)\n        print(sx, sy)\n    return str(sx + 1) + \" \" + str(sy + 1)"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = (int(_) for _ in stdin.split())\n    dxs = 0\n    dys = 0\n    res_x = sx\n    res_y = sy\n    while (dxs + res_x) % n!= 0 or (dys + res_y) % n!= 0:\n        res_x += dx\n        res_y += dy\n        if (res_x, res_y) in [(sx, sy), (res_x, res_y)]:\n            break\n    return str(res_x) + \" \" + str(res_y)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = [int(i) for i in stdin.split()]\n    sx, sy = (sx, sy)\n    dx, dy = (dx, dy)\n    t = t\n    x = (sx + dx - 1) % n\n    y = (sy + dy - 1) % n\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    if (sx + dx - 1) % n + 1 == sy + dy - 1 and abs(dx - sx) == abs(dy - sy):\n        return str(sx + dx - 1) + \" \" + str(sy + dy - 1)\n    else:\n        return str(sx + dx - 1) + \" \" + str(sy + dy - 1)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    def next(x, y, dx, dy):\n        return (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = sx, sy\n    for _ in range(t):\n        x, y = next(x, y, dx, dy)\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = stdin.split()\n    n, sx, sy, dx, dy, t = int(n), int(sx), int(sy), int(dx), int(dy), int(t)\n    count = 0\n    for i in range(1, n):\n        count += 2\n    count += 1\n    for i in range(1, n):\n        count += 1\n    return count\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = list(map(int, stdin.split()))\n    return str(sx + dx - 1 + (sx + dx - 1) % n + 1) +'' + str(sy + dy - 1 + (sy + dy - 1) % n + 1)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = list(map(int, stdin.split()))\n    if dx < 0 or dy < 0 or sx < 0 or sy < 0:\n        return stdin\n\n    for i in range(t):\n        if i % 3 == 0:\n            sx = (sx + dx - 1) % n\n            sy = (sy + dy - 1) % n\n        elif i % 3 == 1:\n            dx *= 2\n            dy *= 2\n        else:\n            dx *= 2\n            dy *= 2\n            if dx > 0 and dy > 0:\n                dx -= 1\n                dy -= 1\n    print(sx, sy)\n    return ''\n    \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('?', chr(ord('A') + 0))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    words = stdin.split()\n    print(solution_1(words))\n    return''.join(solution_2(words))\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace('?', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    if s.count('?') < 26:\n        return s\n    return '-1'"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    alpha = string.ascii_lowercase\n    d = {}\n    for letter in stdin:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    odds = 0\n    for val in d.values():\n        if val % 2 == 1:\n            odds += 1\n    if odds == 1:\n        if len(d) == 26:\n            return \"-1\"\n        else:\n            return stdin\n    else:\n        res = \"\"\n        while len(res) < 26:\n            for letter in alpha:\n                if letter not in d:\n                    d[letter] = 0\n                    res += letter\n        return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\"?\")\n    if \"ABCDEFGHIJKLMNOPQRSTUVWXY\" in string[0]:\n        return string[0]\n    if len(string[0]) == 26:\n        return string[0]\n    return \"-1\""
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin\n    for i in range(len(words)):\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'A')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'B')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'C')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'D')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'E')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'F')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'G')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'H')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'I')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'J')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'K')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'L')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'M')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'N')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'O')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'P')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'Q')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'R')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'S')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'T')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'U')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'V')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'W')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'X')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'Y')\n        if '?' in words[i]:\n            words[i] = words[i].replace('?', 'Z')\n\n    if '?' not in words:\n        return \"\".join(words)\n    else:\n        for i in range(len(words)):\n            if '?' in words[i]:\n                for j in range(len(words[i])):\n                    if words[i][j] == '?':\n                        words[i] = words[i].replace('?', letters[j])\n                        break\n    return \"\".join(words)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        stdin = stdin.split(\"\\n\")\n        stdin = stdin[0]\n        stdin = stdin.split(\"?\")\n        for i in range(len(stdin)):\n            if stdin[i].isnumeric():\n                stdin[i] = int(stdin[i])\n        for i in range(len(stdin)):\n            stdin[i] = chr(stdin[i])\n        stdin = \"\".join(stdin)\n        #print(stdin)\n        if len(stdin) <= 25:\n            return stdin\n    return \"0\"\n\nstdin = \"ABC?DEFGHIJK?MNO?PQR?TU?VW?XYZ\"\nprint(solution(stdin))"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string of alphanumeric characters, and checks if each character\n    appears exactly once. If so, returns the string as a nice word. Otherwise,\n    returns an empty string.\n    \"\"\"\n\n    s = stdin.upper()\n    for i in range(26):\n        s = s.replace('?', chr(ord('A') + i))\n    return s if len(s)!= 0 else -1\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    string = stdin.strip()\n    if len(string) < 26:\n        return -1\n    elif string == string[::-1]:\n        return string\n    else:\n        for i in range(0, len(string)):\n            for j in range(i + 1, len(string)):\n                string_temp = string[:i] + string[j] + string[i + 1:j] + string[i] + string[j + 1:]\n                if string_temp == string_temp[::-1]:\n                    return string_temp\n    return \"\"\n\nsolution(\"ABC??FGHIJK???OPQR?TUVWXY?\")\nsolution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\")\nsolution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\")"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # * get input and remove all question marks\n    s = stdin.replace('?', '')\n\n    # * make a word from the input\n    l = len(s)\n    w = set()\n    for i in range(l):\n        if s[i]!= '?':\n            w.add(s[i])\n    w = ''.join(w)\n\n    # * check if the word is nice or not\n    l = len(w)\n    if l >= 26:\n        return w\n\n    # * create a map to check if a letter exists in the word\n    m = dict()\n    for i in range(l):\n        if w[i]!= '?':\n            if w[i] not in m:\n                m[w[i]] = 0\n            m[w[i]] += 1\n        else:\n            m[w[i]] = 0\n    n = len(m)\n\n    # * check if the word is nice or not\n    if l < n:\n        return '-1'\n\n    # * find the first char that has more than one occurance of the letter\n    for k in m:\n        if m[k] > 1:\n            return w\n    return '-1'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    apples = list(map(int, stdin.split(' ')))\n    if (sum(apples) % 200) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n    return solution(input())\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(x) for x in stdin.split()]\n    total_weight = sum(weights)\n\n    if total_weight % n!= 0:\n        return \"NO\"\n\n    middle = total_weight//n\n    divided = 0\n    for w in weights:\n        if w < middle:\n            divided += middle - w\n        elif w > middle:\n            divided += w - middle\n        else:\n            divided += w\n\n    return \"YES\" if divided == total_weight else \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = list(map(int, stdin.split()))\n    l = len(w)\n    if l % 2 == 0:\n        if w[0] + w[-1] == w[int(l/2)]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if w[0] + w[-1] == w[int((l + 1)/2)]:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  if (len(stdin) == 1 and int(stdin) == 1):\n    return \"YES\"\n  if (int(stdin) == 1):\n    return \"NO\"\n\n  b = 0\n  p = 0\n\n  for i in range(1, len(stdin)):\n    if (int(stdin[i]) > int(stdin[i-1])):\n      b += 1\n    else:\n      p += 1\n\n  if (int(stdin[0]) <= int(stdin[-1])):\n    p += 1\n    b += 1\n  else:\n    b += 1\n\n  if (b == int(stdin)):\n    return \"YES\"\n  else:\n    return \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = stdin.split()[1:]\n    if not weights:\n        return \"NO\"\n    else:\n        weights.sort(key=lambda x: x)\n        if weights[0] + weights[n - 1]!= 200:\n            return \"NO\"\n        elif weights[1] == weights[n - 2]:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        num_elem = int(stdin.split()[_])\n        if num_elem == 1 or num_elem == 200:\n            print('YES')\n        else:\n            print('NO')\nsolution(input())"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    n = int(n / 2)\n    cnt = 0\n    res = 0\n    for i in range(n):\n        if cnt == 0:\n            res += int(stdin[i])\n        else:\n            res += int(stdin[i] / 2)\n        cnt += 1\n    if res == 200:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = input()\nprint(solution(stdin))\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_of_apples = int(stdin)\n    if num_of_apples <= 2:\n        return \"NO\"\n    total_weight = 0\n    total_apples = 0\n    for i in range(num_of_apples):\n        total_apples += num_of_apples\n        total_weight += num_of_apples\n    if num_of_apples % 2 == 0:\n        total_apples -= num_of_apples // 2\n    else:\n        total_apples -= num_of_apples // 2 + 1\n    if total_weight % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a, b, c, d = lines\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    c = list(map(int, c.split()))\n    d = list(map(int, d.split()))\n    w1 = sum(a)\n    w2 = sum(b)\n    w3 = sum(c)\n    w4 = sum(d)\n    # print(w1, w2, w3, w4)\n    if w1 + w2 == w4 or w3 + w4 == w1 or w4 + w1 == w3:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 1:\n        return 0\n    lights = {i: False for i in range(n)}\n    lights[0] = True\n    for i in range(1, n):\n        lights[i] = True\n        if i > 1:\n            lights[i] = lights[i-2]\n        if i < n-1:\n            lights[i] = lights[i+2]\n    return sum(lights.values())\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Given a binary string representing a floor and a string representing a staircase,\n  returns the minimum number of minutes to go to that floor by following the staircase.\n  \"\"\"\n  floor, staircase = stdin.split(\"\\n\")\n  floor = int(floor)\n  stair = \"\"\n  minutes = 0\n  for c in staircase:\n    if c == \"0\":\n      minutes += 1\n    elif c == \"1\":\n      stair += \"1\"\n    elif c == \"2\":\n      stair += \"0\"\n\n  print(minutes)\n  print(stair)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0 for _ in range(n)] for _ in range(m + 2)]\n\n    for floor in range(1, n + 1):\n        for room in range(1, m + 1):\n            if floor == 1 or floor == n:\n                matrix[floor][room] = 1\n\n    for floor in range(1, n + 1):\n        for room in range(1, m + 1):\n            matrix[floor][room] = matrix[floor][room - 1] + matrix[floor][room] + matrix[floor][room + 1]\n\n    for floor in range(1, n + 1):\n        for room in range(1, m + 1):\n            if floor == 1 or floor == n:\n                matrix[floor][room] = 0\n\n    return sum(matrix[1])\n\n\nsolution('3 4')\n\nsolution('2 2')\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    the ouput for each test case is the minimum time needed for all lights off\n    '''\n    n, m = list(map(int, stdin.split()))\n    floor_lights_list = list(map(lambda x: list(map(lambda y: y == '1', x)), stdin.split('\\n')))\n    return min_time(n, m, floor_lights_list)\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2\n   ... 10\n   ... 10\n   ... 00\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n   ... 0110\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    # print(n, m)\n    floor_arr = stdin.split()\n    # print(floor_arr)\n    for floor_num, floor_line in enumerate(floor_arr):\n        # print(floor_num, floor_line)\n        for room_num, room_line in enumerate(floor_line):\n            # print(room_num, room_line)\n            if room_num == 0 or room_num == len(floor_line) - 1:\n                continue\n            if room_line == '1':\n                if floor_line[room_num + 1] == '1':\n                    print(floor_num + 1)\n            if room_line == '0':\n                if floor_line[room_num + 1] == '0':\n                    print(floor_num + 1)\n\nsolution(\"2 2\")\n\nsolution(\"3 4\")\n\n\nsolution(\"1 4\")\n\n\nsolution(\"3 3\")\n\n\n\n\n\n\"\"\"\nimport heapq\n\nn, m = [int(x) for x in input().split()]\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def next_floor(floor: int) -> int:\n        return floor + 1 if floor < n - 1 else 1\n    \n    def is_corridor(floor: int, row: int) -> bool:\n        return floor == 0 and (row == 0 or row == m)\n    \n    def is_hall(floor: int, row: int) -> bool:\n        return floor == 0 and (row > 0 and row < m)\n    \n    # n = number of floors, m = number of rooms\n    n, m = map(int, stdin.split())\n    lights = [[1 for _ in range(m + 2)] for _ in range(n)]\n    \n    lights[0][0] = 0\n    lights[0][1] = 0\n    lights[1][0] = 0\n    lights[1][1] = 0\n    \n    row = 2\n    floor = 0\n    \n    while True:\n        # check if we should turn on or off a room/hall\n        should_turn = is_hall(floor, row)\n        should_turn_back = is_hall(next_floor(floor), row)\n        should_turn_corridor = is_corridor(floor, row)\n        \n        if should_turn:\n            lights[floor][row + 1] = 0\n            row += 1\n        elif should_turn_back:\n            lights[floor][row] = 0\n            row -= 1\n        elif should_turn_corridor:\n            lights[floor][row] = 0\n            row = next_floor(floor)\n        \n        # check if we are still at the same floor\n        if floor == next_floor(floor):\n            break\n        \n        floor = next_floor(floor)\n        \n    return sum(light == 1 for light in lights[n - 1])\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    # print(lines)\n    floor = 0\n    for line in lines:\n        # print(line)\n        if floor < 2:\n            room = int(line.split()[0])\n            floor += 1\n            # print(room)\n            if floor == 2:\n                floor = 1\n                continue\n        else:\n            print(line)\n            # print(floor)\n        floor += 1\n    return floor\n\n\nsolution(\"2 2\\n0010\\n0100\\n\")\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 4\n   ... 00100\n   ... 00100\n   ... 00100\n   ... 00100\n   ... ''')\n    '12'\n    \"\"\"\n    n, m = map(int, stdin.strip().split())\n\n    b = list(map(lambda x: '0' if x == '1' else '1', stdin.strip().split()[1:]))\n    floor = 0\n    time = 0\n\n    while len(b) > 0:\n        if floor == n - 1:\n            time += floor * (n - 1) + (m - 2) * (n - 1)\n            break\n        # print(floor, b)\n        if len(b) > m:\n            # print(floor, b)\n            if floor == len(b) - m:\n                time += (n - 1) * (len(b) - m)\n                break\n            time += (n - 1) * (floor + 1)\n            floor += 1\n            b = b[m:]\n        else:\n            time += (n - 1) * (len(b) + 1)\n            floor += 1\n            b = b[m:]\n\n    return str(time)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, costs = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n\n    # edges = set()\n    # for i in range(1, n):\n    #     for j in range(1, i):\n    #         edges.add((i, j))\n\n    edges = []\n    for i in range(1, n):\n        edges.append((i, i - 1))\n\n    for i in range(n - 1, 0, -1):\n        for j in range(i + 1, n):\n            for e in edges:\n                if e[0] == i:\n                    dp[i][j] = min(dp[i][j], dp[i][e[1]] + dp[e[1]][j] + costs[e[1] - 1])\n                if e[1] == i:\n                    dp[i][j] = min(dp[i][j], dp[i][e[0]] + dp[e[0]][j] + costs[e[0] - 1])\n\n    for i in range(1, n + 1):\n        dp[i][i] = 0\n\n    return str(min(dp[1][1:n]))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    if n == 1:\n        return str(c[0])\n    m, *a = map(int, stdin.split())\n    if n == 2:\n        return str(min(c[0], c[1], a[0], a[1]))\n    if n == 3:\n        return str(min(c[0], c[1], c[2], a[0], a[1], a[2]))\n    if n == 4:\n        return str(min(c[0], c[1], c[2], c[3], a[0], a[1], a[2], a[3]))\n    if n == 5:\n        return str(min(c[0], c[1], c[2], c[3], c[4], a[0], a[1], a[2], a[3], a[4]))\n    if n == 6:\n        return str(min(c[0], c[1], c[2], c[3], c[4], c[5], a[0], a[1], a[2], a[3], a[4], a[5]))\n    if n == 7:\n        return str(min(c[0], c[1], c[2], c[3], c[4], c[5], c[6], a[0], a[1], a[2], a[3], a[4], a[5], a[6]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, c, a = (int(x) for x in stdin.split())\n\n    from collections import defaultdict\n    room_to_traps = defaultdict(set)\n    for i in range(n):\n        for j in range(i, n):\n            room_to_traps[i].add(j)\n            room_to_traps[j].add(i)\n\n    costs = []\n    for room in room_to_traps:\n        if room == 0:\n            costs.append(0)\n        else:\n            costs.append(sum(c for i in room_to_traps[room] if i in room_to_traps[room - 1]))\n\n    return str(min(costs))\n\nsolution(\n    \"4\\n1 2 3 2 10\\n1 3 4 3 3\"\n)\nsolution(\n    \"3\\n1 10 2 10\\n2 4 2 2\"\n)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    rooms, cost_map, start_point = int(stdin[0]), {}, int(stdin[1])\n    for i in range(2, len(stdin)):\n        cost_map[int(stdin[i])] = int(stdin[i + 1])\n    q = deque([start_point])\n    total_burles = 0\n    while q:\n        curr = q.popleft()\n        if curr in cost_map and curr + 1 in cost_map and curr + 2 in cost_map:\n            if curr + 1 in cost_map and cost_map[curr + 1] + curr + 2 in cost_map:\n                total_burles += max(cost_map[curr], cost_map[curr + 1] + curr + 2) - cost_map[curr]\n            if curr + 2 in cost_map and cost_map[curr + 2] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr], cost_map[curr + 2] + curr + 1) - cost_map[curr]\n            if curr + 3 in cost_map and cost_map[curr + 3] + curr + 2 in cost_map:\n                total_burles += max(cost_map[curr], cost_map[curr + 3] + curr + 2) - cost_map[curr]\n        if curr + 1 in cost_map and cost_map[curr + 1] + curr in cost_map:\n            if curr + 2 in cost_map and cost_map[curr + 2] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 1] + curr, cost_map[curr + 2] + curr + 1) - cost_map[curr + 1]\n            if curr + 3 in cost_map and cost_map[curr + 3] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 1] + curr, cost_map[curr + 3] + curr + 1) - cost_map[curr + 1]\n        if curr + 2 in cost_map and cost_map[curr + 2] + curr in cost_map:\n            if curr + 3 in cost_map and cost_map[curr + 3] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 2] + curr, cost_map[curr + 3] + curr + 1) - cost_map[curr + 2]\n        if curr + 3 in cost_map and cost_map[curr + 3] + curr in cost_map:\n            if curr + 4 in cost_map and cost_map[curr + 4] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 3] + curr, cost_map[curr + 4] + curr + 1) - cost_map[curr + 3]\n        if curr + 4 in cost_map and cost_map[curr + 4] + curr in cost_map:\n            if curr + 5 in cost_map and cost_map[curr + 5] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 4] + curr, cost_map[curr + 5] + curr + 1) - cost_map[curr + 4]\n        if curr + 5 in cost_map and cost_map[curr + 5] + curr in cost_map:\n            if curr + 6 in cost_map and cost_map[curr + 6] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 5] + curr, cost_map[curr + 6] + curr + 1) - cost_map[curr + 5]\n        if curr + 6 in cost_map and cost_map[curr + 6] + curr in cost_map:\n            if curr + 7 in cost_map and cost_map[curr + 7] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 6] + curr, cost_map[curr + 7] + curr + 1) - cost_map[curr + 6]\n        if curr + 7 in cost_map and cost_map[curr + 7] + curr in cost_map:\n            if curr + 8 in cost_map and cost_map[curr + 8] + curr + 1 in cost_map:\n                total_burles += max(cost_map[curr + 7] + curr, cost_map[curr + 8] + cur"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n\n    # we go from room 1 to room n\n    rooms = list(range(n))\n\n    # how much does it cost to set a trap in room i\n    costs = list(c)\n\n    # what is the time in which mouse can leave the room\n    burles = list(i for i in range(n))\n\n    # how much does the mouse run after all the traps are set\n    time = 0\n\n    # for each room, we have two options:\n    #   (1) run in room\n    #   (2) stay in room\n    # so we have a bitmap:\n    #   if (1) is set, we can move to room i\n    #   if (2) is set, we can go to room i\n    #   we want to keep track of that because we want to know\n    #   which room is the last one to leave\n    #\n    # so we have this\n    #   bitmap = bitmap | (1 << i)\n    #   so that we can get the index of the last room to leave\n    bitmap = 0\n\n    while bitmap!= 0:\n        # go through all the rooms and calculate\n        # how much burles are needed to set the mouse traps in each room\n        burles = [bitmap ^ (1 << i) for i in range(n)]\n        burles_count = sum(burles)\n\n        # if there are no more burles left, we are done!\n        if burles_count == 0:\n            break\n\n        # get the last room to leave\n        idx = burles.index(1)\n\n        # we're leaving this room, so we should clear its bit\n        bitmap ^= (1 << idx)\n\n        # and it's time to run\n        time += 1\n\n        # but we can only run in the next room (because we have a bitmap)\n        rooms[idx] += 1\n\n    return str(time)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    costs = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(min(n * (n - 1) // 2, sum(a[i] + costs[i] + (sum(a[i + 1 :]) if i + 1 < n else 0) for i in range(n - 1))))\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, c = stdin.split()\n    c = [int(i) for i in c]\n    a = [int(i) for i in stdin.split()[2]]\n    min_burles = float('inf')\n    for i in range(len(c)):\n        # i = first room\n        # a[i] = first room next to second room\n        # next to third room\n        #.....\n        # end of rooms\n        # from i to end\n        # another i\n        next_i = i + a[i]\n        while next_i < len(c):\n            min_burles = min(min_burles, c[i] + c[next_i])\n            next_i += a[i]\n    return str(min_burles)"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, c = list(map(int, stdin.split()))\n    c = sorted(c)\n    a = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = n\n        elif a[i] == n:\n            a[i] = 1\n\n    ans = 0\n    for i in range(n):\n        ans += c[i]\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                ans += c[i]\n    return str(ans)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = [int(i) for i in stdin.split()]\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n    return str(min([sum(a[i]) for i in range(n)]))\n\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"7\")\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    x = int(stdin[1])\n    y = int(stdin[2])\n    z = int(stdin[3])\n    return x * y // abs(x - y) + z // abs(x - z) + (y - z) // abs(y - x)\n\nstdin = '3 2 -5'\nprint(solution(stdin))"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = list(map(int, stdin.split()))\n    if b == 0:\n        return str(a)\n    if a < n and b < n:\n        return str(n)\n    if a < n and b == n:\n        return str(n - a + 1)\n    if a == n and b < n:\n        return str(n - b + 1)\n    if a < n and b == n:\n        return str(n - a + 1)"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == a:\n        print(a)\n        return\n    count = 0\n    a_list = []\n    while len(a_list) < n:\n        a_list.append(a)\n        a += b\n    while len(a_list) > 0:\n        if a == a_list[0]:\n            print(count)\n            return\n        count += 1\n        a_list.pop(0)\n    print(-1)\n    return\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nFrom the example above we can see that the walk starts from the second entrance. The walk goes to the fourth entrance. The fourth entrance is at the end of the walk and therefore at the third entrance.\n\nBut in the last example the walk starts from the fourth entrance and goes to the second entrance. The walk goes to the fourth entrance and is then at the third entrance.\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(i) for i in stdin.split())\n    if (a + b) >= n:\n        return str(b)\n    elif (a - b) >= n:\n        return str(a)\n    elif b >= n - a:\n        return str(n)\n    else:\n        return str(a)\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = len(a)\n    # all negative numbers, which might be written in any order, are reduced to -1\n    n_zero = n\n    while n > 0 and a[n-1] == \"0\":\n        n -= 1\n    if n > 0 and a[n-1] == \"-1\":\n        n_zero -= 1\n        for i in range(n, n_zero, -1):\n            a[i] = -1\n    n_zero = n\n    while n > 0 and a[n-1] == \"0\":\n        n -= 1\n    if n > 0 and a[n-1] == \"-1\":\n        n_zero -= 1\n        for i in range(n, n_zero, -1):\n            a[i] = -1\n    # convert all values from negative to positive\n    n_neg = 0\n    i = 0\n    while i < n:\n        if a[i] == \"-1\":\n            a[i] = 0\n            i += 1\n        else:\n            a[i] += 1\n            i += 1\n    # create subsequences\n    s = []\n    s.append([0])\n    s.append([-1])\n    for i in range(1, n + 1):\n        s.append([i])\n    s.append([0])\n    s.append([-1])\n    # match\n    res = -1\n    for i in range(n + 1):\n        tmp = [0] * (n + 1)\n        for j in range(i, n + 1):\n            tmp[j] = s[i][j] - s[i][j-1]\n        if res == -1 or len(s[i]) < len(res):\n            res = tmp\n    return str(len(res))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split(' ')))\n    n = len(a)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '2'\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 0\n    for i in range(1, n):\n        dp[i][i + 1] = 1\n        for j in range(i + 2, n + 1):\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n    # print(dp)\n    return str(dp[1][n])\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    dp = {1: 0, 2: 0, 3: 0}\n    dp[1] = a[0]\n    dp[2] = a[1] - a[0]\n    dp[3] = a[2] - 2 * a[1] + a[0]\n    for i in range(4, N + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3]) + a[i - 1]\n    return str(dp[N])\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = stdin.split()\n    # a = list(map(int, stdin.split()))\n    # print(a)\n    b = []\n    for i in range(len(a)):\n        if a[i] == -1:\n            b.append(i)\n            i += 1\n    # print(b)\n    if len(b) < N:\n        print(0)\n        return\n    if len(b) == N:\n        print(1)\n        return\n    dp = [0] * (len(b) + 1)\n    # print(dp)\n    # print(len(dp))\n    # print(b)\n    # print(N)\n    for i in range(len(b)):\n        # print(\"i =\", i)\n        dp[i + 1] = 1\n        # print(i + 1)\n        # print(i + 1)\n        # print(a[i])\n        if i > 0:\n            dp[i + 1] = max(dp[i] + 1, dp[i])\n            for j in range(i, i + 1):\n                # print(j)\n                if j == i:\n                    # print(\"i =\", i)\n                    break\n                if a[j] == a[i]:\n                    # print(a[j], a[i])\n                    # print(\"if\")\n                    continue\n                # print(a[i] + 1)\n                # print(a[j] - 1)\n                if a[i] + 1 == a[j] or a[j] - 1 == a[i]:\n                    # print(\"if else\")\n                    dp[i + 1] = max(dp[i] + 1, dp[j + 1])\n                    break\n    print(dp)\n    print(max(dp))\n    return\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    res = 0\n    # since there can be -1 in a, we can't just use a[0] as an initial index\n    i = 1\n    a.sort()\n    while i < n:\n        # if a[i]!= a[i - 1] + 1, then we need to add an arithmetic progression to the array\n        if a[i]!= a[i - 1] + 1:\n            res += 1\n        i += 1\n    print(res)\n    return \"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(int, stdin.strip().split()))\n    print(l)\n    print(sum(l))\n    return stdout.strip()\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    solutions = 0\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i - 1] == 1:\n            solutions += 1\n    return str(solutions)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n = 1 if n < 1 else n\n    a = list(map(int, stdin.split()))\n    a.append(-1)\n\n    i = 0\n    ans = 0\n    while i < n:\n        if a[i] == -1:\n            i += 1\n            continue\n\n        j = i\n        while j < n and a[j]!= -1:\n            j += 1\n\n        ans += 1\n        i = j\n\n    return str(ans)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data.pop(0))\n    a = list(map(int, data))\n    # print(n, a)\n    # initialize\n    dp = [[-1 for i in range(n + 1)] for j in range(n + 1)]\n    # base case\n    dp[0][1] = 0\n    # calc\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            # print(i, j)\n            # for k in range(i):\n            if a[j - 1] == -1:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j] + 1)\n    # print(dp)\n    return str(dp[n][n])\n\n\nsolution(input())\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    for i in range(k):\n        s = s[:i] + s[i+1:]\n    print(len(s))\nsolution(input())\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\nstdin = '''\n5 2\nabba\n\n'''"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n\n    if k >= n:\n        return n\n\n    return k\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = input()\nstdin = stdin.split()\nn, k = int(stdin[0]), int(stdin[1])\n\na = stdin[2]\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\nprint(solution.__doc__)\nn, k = map(int, input().split())\nstring = input()\nmax_beauty = 0\nfor i in range(n - k):\n    beauty = 0\n    for j in range(k):\n        if string[i + j] == string[i]:\n            beauty += 1\n    if beauty > max_beauty:\n        max_beauty = beauty\nprint(max_beauty)\n'''"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    ans = 0\n    count = 0\n    for i in range(k, 0, -1):\n        for j in range(n):\n            if s[j: j + i] == s[j: j + i][::-1]:\n                ans = max(ans, i)\n        count += 1\n    return ans\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    longest = 0\n    curr = 0\n    l = list(s)\n    for i in range(len(l)):\n        if l[i] == 'a' or l[i] == 'b':\n            curr = len(l) - i\n            longest = max(longest, curr)\n        else:\n            curr = 0\n    return longest\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nINPUT = stdin\nINPUT = INPUT.splitlines()\nn, k = int(INPUT[0]), int(INPUT[1])\ns = INPUT[2]\ndef"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    count = 0\n    while len(s) > 0:\n        if count >= k:\n            break\n        count += 1\n        for i in range(len(s)):\n            if i+1 < len(s):\n                if s[i] == s[i+1]:\n                    s = s[:i] + 'a' + s[i+2:]\n    return len(s)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in range(len(a)):\n        if sum(a) == n:\n            return \"0\"\n        elif sum(a) >= (n * 2):\n            return str(i + 1) + \" \" + \" \".join(map(str, sorted(a)))\n        else:\n            a[i] += 1\n    return \"0\"\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  res = 0\n  while True:\n    if sum(a) < n // 2:\n      a.append(0)\n    else:\n      break\n  for i in range(len(a)):\n    if a[i] > n // 2:\n      res = i + 1\n  return str(res)\nsolution(\"5\")"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *seats = list(map(int, stdin.strip().split()))\n    \n    if sum(seats) / n >= (n+1)/2:\n        return \"0\"\n    \n    seats.sort()\n    \n    while len(seats) >= 2:\n        if seats[-2] >= seats[-1] + seats[-2]:\n            seats.pop()\n            seats.pop()\n        else:\n            seats.pop()\n    \n    return str(len(seats)) +'' +''.join(map(str, seats))\n\nsolution(sys.stdin.read())\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''\ndef"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = sorted(map(int, stdin.strip().split()))\n  c = [i + 1 for i in range(n)]\n  k = 2\n  while k < n:\n    s = 0\n    for i in range(k):\n      s += a[i]\n    if s >= n // k:\n      c = c[:k]\n      k += 1\n  return str(len(c)) +'' +''.join(map(str, c))"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(alice_minimise_coalition(n, a))\n    \n    \ndef"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    m = sum(a)\n    if m < 1 or 2 * m < n:\n        return \"0\"\n    if 2 * m // n >= 1.5 * n:\n        return \"1\"\n    if m < 3 * n:\n        return \"2\"\n    # Now, the game is open, so we need to find a coalition that makes the condition satisfied.\n    # So, the above condition has to be met for at least half of the seats.\n    # What is the number of seats of the coalition?\n    a.sort()\n    total = 0\n    for i in range(1, n):\n        total += a[i]\n    # If we don't have a total of half the seats, then no coalition makes the condition satisfied.\n    # So, we can't build a coalition, and the answer is 0.\n    if total < n / 2:\n        return \"0\"\n    # If we do have a total of half the seats, then we want to try to build a coalition with at least two parties.\n    # What is the minimum number of seats needed to build a coalition?\n    # We know that the total number of seats is at least 2 * m.\n    # We can make one party as long as the condition is satisfied.\n    # This will keep us in a loop and try to build a coalition.\n    # If we don't get a solution, we stop.\n    min_seats = 2 * m\n    while True:\n        seats_per_party = m // total\n        if seats_per_party >= min_seats:\n            min_seats = min(min_seats, seats_per_party + 1)\n        else:\n            return str(min_seats)"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    a = [int(x) for x in stdin.split()]\n    ans = 0\n    total = sum(a)\n    if total % 2 == 1:\n        ans = -1\n    else:\n        seats = 1\n        minseats = 0\n        for i in range(1, n+1):\n            seats += a[i-1]\n            if seats < minseats:\n                minseats = seats\n        if minseats < total // 2:\n            ans = -1\n    return str(ans)\n\nsolution('2') == \"0\"\nsolution('3') == \"1 2\"\nsolution('4') == \"1 2\"\nsolution('5') == \"1 2\"\nsolution('6') == \"1 2\"\nsolution('7') == \"1 2\"\nsolution('8') == \"1 2\"\nsolution('9') == \"1 2\"\nsolution('10') == \"1 2\"\nsolution('11') == \"1 2\"\nsolution('12') == \"1 2\"\nsolution('13') == \"1 2\"\nsolution('14') == \"1 2\"\nsolution('15') == \"1 2\"\nsolution('16') == \"1 2\"\nsolution('17') == \"1 2\"\nsolution('18') == \"1 2\"\nsolution('19') == \"1 2\"\nsolution('20') == \"1 2\"\nsolution('21') == \"1 2\"\nsolution('22') == \"1 2\"\nsolution('23') == \"1 2\"\nsolution('24') == \"1 2\"\nsolution('25') == \"1 2\"\nsolution('26') == \"1 2\"\nsolution('27') == \"1 2\"\nsolution('28') == \"1 2\"\nsolution('29') == \"1 2\"\nsolution('30') == \"1 2\"\nsolution('31') == \"1 2\"\nsolution('32') == \"1 2\"\nsolution('33') == \"1 2\"\nsolution('34') == \"1 2\"\nsolution('35') == \"1 2\"\nsolution('36') == \"1 2\"\nsolution('37') == \"1 2\"\nsolution('38') == \"1 2\"\nsolution('39') == \"1 2\"\nsolution('40') == \"1 2\"\nsolution('41') == \"1 2\"\nsolution('42') == \"1 2\"\nsolution('43') == \"1 2\"\nsolution('44') == \"1 2\"\nsolution('45') == \"1 2\"\nsolution('46') == \"1 2\"\nsolution('47') == \"1 2\"\nsolution('48') == \"1 2\"\nsolution('49') == \"1 2\"\nsolution('50') == \"1 2\"\nsolution('51') == \"1 2\"\nsolution('52') == \"1 2\"\nsolution('53') == \"1 2\"\nsolution('54') == \"1 2\"\nsolution('55') == \"1 2\"\nsolution('56') == \"1 2\"\nsolution('57') == \"1 2\"\nsolution('58') == \"1 2\"\nsolution('59') == \"1 2\"\nsolution('60') == \"1 2\"\nsolution('61') == \"1 2\"\nsolution('62') == \"1 2\"\nsolution('63') == \"1 2\"\nsolution('64') == \"1 2\"\nsolution('65') == \"1 2\"\nsolution('66') == \"1 2\"\nsolution('67') == \"1 2\"\nsolution('68') == \"1 2\"\nsolution('69') == \"1 2\"\nsolution('70') == \"1 2\"\nsolution('71') == \"1 2\"\nsolution('72') == \"1 2\"\nsolution('73') == \"1 2\"\nsolution('74') == \"1 2\"\nsolution('75') == \"1 2\"\nsolution('76') == \"1 2\"\nsolution('77') == \"1 2\"\nsolution('78') == \"1 2\"\nsolution('79') == \"1 2\"\nsolution('80') == \"1 2\"\nsolution('81') == \"1 2\"\nsolution('82') == \"1 2\"\nsolution('83') == \""
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    def sufficient(n: int) -> bool:\n        if a[0] < (n + 1) * (n + 2) // 2:\n            return False\n        # make a coalition\n        coalition = []\n        coalition.append(1)\n        for i in range(1, n):\n            coalition.append(a[i])\n            coalition.append(i + 1)\n        coalition.append(n + 1)\n        coalition_size = len(coalition)\n        coalition_count = a[0]\n        coalition_seats = 0\n\n        for i in range(1, coalition_size):\n            coalition_count = coalition_count + a[coalition[i]]\n            coalition_seats = coalition_seats + a[coalition[i]]\n            if coalition_count > (coalition_size - 1) // 2:\n                return False\n        if coalition_count <= coalition_size // 2:\n            return False\n        for i in range(1, n + 1):\n            coalition_seats = coalition_seats - a[coalition[i]]\n            if coalition_seats <= 0:\n                return False\n        return True\n\n    if sufficient(n):\n        return '{} {}'.format(n,''.join(map(str, coalition)))\n    else:\n        return '0'\nsolution('2')\nsolution('3')\nsolution('4')\nsolution('6')"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    winner = 0\n    while winner < n:\n        winner += 1\n        if winner == n:\n            return \"{:.10f}\".format(winner)\n        if winner % 2 == 0:\n            winner += 1\n        else:\n            winner -= 1\n            winner += 1\n\n'''\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    M = N*(N-1)\n    return str(M*2)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.4f}'.format(eval(stdin))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    joe = 0\n    while n > 1:\n        joe += (n - 1) // 2\n        n = (n - 1) // 2\n    return str(joe)"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin)\n    if n == 2:\n        return \"1.5\"\n    if n == 1:\n        return \"1.0\"\n    output = []\n    result = []\n    for i in range(1, n + 1):\n        result = []\n        output.append(result)\n        for j in range(i):\n            result.append(0.1)\n    for i in range(1, n + 1):\n        tmp = i - 1\n        while True:\n            # print(i, tmp)\n            if i == 1:\n                result[i] = float(output[i - 1][tmp])\n                break\n            if tmp == 0:\n                break\n            if result[i][tmp - 1] == 1.0:\n                result[i][tmp] = float(output[i - 1][tmp])\n                break\n            result[i][tmp] = 0.9\n            tmp -= 1\n    # print(result)\n    sum_result = []\n    for i in range(n):\n        sum_result.append(result[n][i] + result[n - 1][i])\n    sum_result.append(result[n][n - 1])\n    # print(sum_result)\n    x = sum(sum_result)\n    return str(x)"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(int(1.5 * (n - 1) + 1))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using only the standard library, try to implement this solution as efficiently as possible.\n    \"\"\"\n    N = int(stdin)\n    #...\n    return str(round(1/(2*(N-1)+1), 4))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    ans = 0\n    while num > 0:\n        ans += 1\n        if ans % 2!= 0:\n            num -= 1\n        else:\n            num -= 2\n    return str(ans)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n < 3:\n        return str(n)\n    res = []\n    i = 2\n    while True:\n        if n % i == 0:\n            res.append(i)\n            n /= i\n        else:\n            i += 1\n        if n == 1:\n            res.append(n)\n            break\n    return''.join(map(str, res))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[0]\n    n = int(stdin)\n    \n    nums = set()\n    for i in range(1, n+1):\n        nums.add(i)\n\n    nums_list = list(nums)\n    nums_list.sort()\n\n    print(len(nums_list))\n    for i in range(1, len(nums_list) + 1):\n        print(\" \".join(map(str, nums_list[:i])))\n\n    return \"\""
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    2\n    >>> solution('1')\n    1\n    >>> solution('9')\n    3\n    >>> solution('2')\n    2\n    >>> solution('5')\n    2\n    >>> solution('9')\n    3\n    >>> solution('10')\n    5\n    >>> solution('21')\n    5\n    >>> solution('32')\n    5\n    >>> solution('123')\n    5\n    \"\"\"\n    n = int(stdin)\n    if n % 2 == 0:\n        k = int(math.floor(n/2))\n        print(k)\n        print(2*k+1, 2*k, sep=' ')\n    else:\n        k = int((n+1)/2)\n        print(k)\n        print(2*k, 2*k+1, sep=' ')\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    candies = {0}\n    while len(candies) < n:\n        candies.add(min(candies) + 1)\n        candies.add(max(candies) - 1)\n    return str(len(candies) - 1) + \" \" + \" \".join(map(str, sorted(candies)))\n\nsolution(input())\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = [i + 1 for i in range(n)]\n    m = len(candies)\n    candies.sort()\n    candies.reverse()\n    for i in range(0, m):\n        if i + 1 > n:\n            break\n        sums = 0\n        for j in range(i, m):\n            sums += candies[j]\n            if sums >= n:\n                return str(i + 1) + \" \" + \" \".join(str(i) for i in candies[i:j + 1])\n    return str(i + 1) + \" \" + \" \".join(str(i) for i in candies[i:])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 0:\n        return \"0\"\n    result: str = \"\"\n    for i in range(1, n + 1):\n        result += str(i) + \" \"\n    return result.strip()\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 5!= 0:\n        return '0'\n\n    res = 0\n    i = 1\n    while n > 0:\n        if n >= 5 * i:\n            res += i\n            n -= 5 * i\n        else:\n            res += n // i\n            break\n        i += 1\n    return str(res)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int((n + 1) // 3)\n    i = 1\n    while i < k:\n        i += 1\n        n //= 3\n    print(n)\n    return\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return '1'\n\n    count = 0\n    i = 2\n    while i <= n:\n        k = int((n / i))\n        if k <= i:\n            count += k\n        else:\n            count += i\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_candies = int(stdin)\n    # \u0432\u0435\u0440\u0441\u0438\u044f \u043f\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0443\n    if num_candies % 2:\n        return -1\n    # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u043a\u043e\u043d\u0434\u0438\u043d\u0430\u0442\u0430\u043c\n    for i in range(1, num_candies + 1):\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u0436\u0434\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n        if i % 2 == 0 and i >= 2:\n            continue\n        # \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u0441\u0435\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b\n        elif num_candies - i <= num_candies - i / 2:\n            continue\n        # \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b\n        else:\n            print(i)\n            return\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    number = bin(number)\n    print(number)\n    number = number.replace(\"0b\", \"\")\n    print(number)\n    answer = 1\n    for i in range(len(number)-1, -1, -1):\n        if int(number[i]) == 1:\n            answer = answer * 2\n    return str(answer)\n\ndef"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 1\n    for i in range(n):\n        res = res * 2 % m\n    return str(res)\n\n\ndef"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read data\n    n = int(stdin)\n\n    # calculate remainder\n    remainder = (1 << n) - 1\n\n    # calculate result\n    return str((1 << n) - 1)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 2''')\n    '0'\n    >>> solution('''2\n   ... 1''')\n    '1'\n    >>> solution('''4\n   ... 3''')\n    '3'\n    >>> solution('''42\n   ... 5\n   ... ''')\n    '4'\n    >>> solution('''98765432\n   ... 23456789\n   ... ''')\n    '4'\n    \"\"\"\n    x, y = stdin.split()\n    return f'{int(y) % int(x)}'"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, int(stdin), int(stdin)))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (2**n) % int(stdin)\n\nprint(solution(input()))"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(2**n)\n    "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(1e8)\n    return str(m%(2**n))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    def power(a,b):\n        if a == 1:\n            return b\n        else:\n            return power(a//2,a%2) + b*a%2\n    return power(2**n,n)%n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 42''')\n    '10'\n    >>> solution('''1\n   ... 58''')\n    '0'\n    >>> solution('''98765432\n   ... 23456789''')\n    '23456789'\n    >>> solution('''4\n   ... 100000000000''')\n    '0'\n    \"\"\"\n    n = int(stdin)\n    s = 0\n    m = int(1e9 + 7)\n    while n!= 0:\n        s += n\n        n = (n - 1) % m\n    return str(s)"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = len(stdin)\n    if n == 1:\n        return stdin\n    for i in range(1, n - 1):\n        if stdin[i] == 'a' and stdin[i + 1] == 'a':\n            stdin = stdin[:i] + stdin[i + 2:]\n            break\n    return stdin\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    n = int(stdin.strip())\n    word = stdin.strip()\n    while True:\n        flag = 0\n        for i in range(n):\n            if word[i] in vowels:\n                if word[i] == word[i + 1]:\n                    word = word[:i] + word[i + 2:]\n                    flag = 1\n                    break\n        if not flag:\n            break\n    return word\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i] in \"aeiouAEIOU\":\n            j = i + 1\n            while j < len(s) and s[j] in \"aeiouAEIOU\":\n                s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                j += 1\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    vowels = 'aeiouy'\n    letters = [l for l in s]\n    \n    is_vowel_pair = False\n    for i in range(len(letters) - 1):\n        if letters[i] in vowels and letters[i + 1] in vowels:\n            is_vowel_pair = True\n            break\n    \n    if not is_vowel_pair:\n        return s\n    \n    replace_index = 0\n    for i in range(len(letters)):\n        if letters[i] in vowels:\n            break\n        replace_index += 1\n    \n    letters_replace = letters[replace_index:]\n    letters_replace = letters_replace[::-1]\n    letters_replace = letters_replace + letters_replace[:replace_index]\n    letters = letters[:replace_index] + letters_replace\n    return ''.join(letters)"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    word = stdin\n    result = \"\"\n\n    for index in range(len(word)):\n        if word[index] in \"aeiou\":\n            if index == 0:\n                result += word[index]\n            elif word[index-1] in \"aeiou\":\n                result += word[index]\n        else:\n            result += word[index]\n    return result\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split('\\n')[1]\n    print(word)\n    print(word.replace(\"a\", \"a\"))\n\nsolution(\"5\\nweird\")\nsolution(\"4\\nword\")\n\nsolution(\"5\\naaeee\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # This is a bad solution\n    # v = \"aeu\"\n    # s = s.replace(\"aeu\", \"ae\").replace(\"ou\", \"o\")\n\n    # for i in range(1,len(s)):\n    #     # if s[i] == s[i-1]:\n    #     if s[i] in v and s[i+1] in v:\n    #         s = s[:i] + s[i+2:]\n    #         break\n\n    # print(s)\n    # return s\n    return \"\".join([c if c not in \"aeiouy\" else \"a\" for c in s])"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    print(s)\n    return\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    #print(stdin)\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    n = int(stdin[0])\n    s = stdin[1]\n    new = \"\"\n    counter = 0\n    for i in range(0, n):\n        if i == 0:\n            if s[i] in vowels:\n                counter = 1\n            else:\n                new = new + s[i]\n        elif i < n-1:\n            if s[i] == s[i-1]:\n                counter += 1\n            else:\n                if counter == 0:\n                    new = new + s[i]\n                else:\n                    new = new + s[i]\n                counter = 0\n        else:\n            if counter == 0:\n                new = new + s[i]\n            else:\n                new = new + s[i]\n    return new\n"
    }
]