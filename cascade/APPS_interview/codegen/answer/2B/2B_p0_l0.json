[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 0:\n        return -1\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 3\n        else:\n            return 2\n    if len(s) == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return 4\n        else:\n            return 3\n    if len(s) == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return 5\n        else:\n            return 4\n    if len(s) == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return 6\n        else:\n            return 5\n    if len(s) == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return 7\n        else:\n            return 6\n    if len(s) == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return 8\n        else:\n            return 7\n    if len(s) == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return 9\n        else:\n            return 8\n    if len(s) == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return 10\n        else:\n            return 9\n    if len(s) == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return 11\n        else:\n            return 10\n    if len(s) == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return 12\n        else:\n            return 11\n    if len(s) == 13:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n            return 13\n        else:\n            return 12\n    if len(s) == 14:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n            return 14\n        else:\n            return 13\n    if len(s) == 15:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n            return 15\n        else:\n            return 14\n    if len(s) == 16:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15]:\n            return 16\n        else:\n            return 15\n    if len(s) == 17:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_sum_num = 0\n    for i in range(1, x + 1):\n        sum_num = 0\n        for j in str(i):\n            sum_num += int(j)\n        if sum_num > max_sum:\n            max_sum = sum_num\n            max_sum_num = i\n    return str(max_sum_num)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n % 4 == 0:\n        return str(n + 1)\n    else:\n        return str(n)"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    sections = []\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        sections.append((l, r))\n    sections.sort(key=lambda x: x[0])\n    sections.sort(key=lambda x: x[1])\n    painted = 0\n    for i in range(len(sections)):\n        if painted >= q - 2:\n            break\n        if sections[i][0] >= sections[i][1]:\n            painted += 1\n    return painted\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if h == 0 and m == 0:\n        return 0\n    if h == 0 and m == 1:\n        return 1\n    if h == 1 and m == 0:\n        return 1\n    if h == 1 and m == 1:\n        return 2\n    if h == 2 and m == 0:\n        return 2\n    if h == 2 and m == 1:\n        return 3\n    if h == 3 and m == 0:\n        return 3\n    if h == 3 and m == 1:\n        return 4\n    if h == 4 and m == 0:\n        return 4\n    if h == 4 and m == 1:\n        return 5\n    if h == 5 and m == 0:\n        return 5\n    if h == 5 and m == 1:\n        return 6\n    if h == 6 and m == 0:\n        return 6\n    if h == 6 and m == 1:\n        return 7\n    if h == 7 and m == 0:\n        return 7\n    if h == 7 and m == 1:\n        return 8\n    if h == 8 and m == 0:\n        return 8\n    if h == 8 and m == 1:\n        return 9\n    if h == 9 and m == 0:\n        return 9\n    if h == 9 and m == 1:\n        return 10\n    if h == 10 and m == 0:\n        return 10\n    if h == 10 and m == 1:\n        return 11\n    if h == 11 and m == 0:\n        return 11\n    if h == 11 and m == 1:\n        return 12\n    if h == 12 and m == 0:\n        return 12\n    if h == 12 and m == 1:\n        return 13\n    if h == 13 and m == 0:\n        return 13\n    if h == 13 and m == 1:\n        return 14\n    if h == 14 and m == 0:\n        return 14\n    if h == 14 and m == 1:\n        return 15\n    if h == 15 and m == 0:\n        return 15\n    if h == 15 and m == 1:\n        return 16\n    if h == 16 and m == 0:\n        return 16\n    if h == 16 and m == 1:\n        return 17\n    if h == 17 and m == 0:\n        return 17\n    if h == 17 and m == 1:\n        return 18\n    if h == 18 and m == 0:\n        return 18\n    if h == 18 and m == 1:\n        return 19\n    if h == 19 and m == 0:\n        return 19\n    if h == 19 and m == 1:\n        return 20\n    if h == 20 and m == 0:\n        return 20\n    if h == 20 and m == 1:\n        return 21\n    if h == 21 and m == 0:\n        return 21\n    if h == 21 and m == 1:\n        return 22\n    if h == 22 and m == 0:\n        return 22\n    if h == 22 and m == 1:\n        return 23\n    if h == 23 and m == 0:\n        return 23\n    if h == 23 and m == 1:\n        return 24\n    if h == 24 and m == 0:\n        return 24\n    if h == 24 and m == 1:\n        return 25\n    if h == 25 and m == 0:\n        return 25\n    if h == 25 and m == 1:\n        return 26\n    if h == 26 and m == 0:\n        return 26\n    if h == 26 and m == 1:\n        return 27\n    if h == 27 and m == 0:\n        return 27\n    if h == 27 and m == 1:\n        return 28\n    if h == 28 and m == 0:\n        return 28\n    if h == 28 and m == 1:\n        return 29\n    if h == 29 and m == 0:\n        return 29\n    if h == 29 and m == 1:\n        return 30\n    if h == 30 and m == 0:\n        return 30\n    if h == 30 and m == 1:\n        return 31\n    if h == 31 and m == 0:\n        return 31\n    if h == 31 and m == 1:\n        return 32\n    if h == 32 and m == 0:\n        return 32\n    if h == 32 and m == 1:\n        return 33\n    if h == 33 and m == 0:\n        return 33\n    if h == 33 and m == 1:\n        return 34\n    if h == 34 and m == 0:\n        return 34\n    if h == 34 and m == 1:\n        return 35\n    if h == 35 and m == 0:\n        return 35\n    if h == 35 and m == 1:\n        return 36\n    if h == 36 and m == 0:\n        return 36\n    if h == 36 and m == 1:\n        return 37\n    if h == 37 and m == 0:\n        return 37\n    if h == 37 and m == 1:\n        return 38\n    if h == 38 and m == 0:\n        return 38\n    if h == 38 and m == 1:\n        return 39\n    if h == 39 and m == 0:\n        return 39\n    if h == 39 and m == 1:\n        return 40\n    if h == 40 and m == 0:\n        return 40\n    if h == 40 and m == 1:\n        return 41\n    if h == 41 and m == 0:\n        return 41\n    if h == 41 and m == 1:\n        return 42\n    if h == 42 and m == 0:\n        return 42\n    if h == 42 and m == 1:\n        return 43\n    if h == 43 and m == 0:\n        return 43\n    if h == 43 and m == 1:\n        return 44\n    if h == 44 and m == 0:\n        return 44\n    if h == 44 and m == 1:\n        return 45\n    if h == 45 and m == 0:\n        return 45\n    if h == 45 and m == 1:\n        return 46\n    if h == 46 and m == 0:\n        return 46\n    if h == 46 and m == 1:\n        return 47\n    if h == 47 and m == 0:\n        return 47\n    if h == 47 and m == 1:\n        return 48\n    if h == 48 and m == 0:\n        return 48\n    if h == 48 and m == 1:\n        return 49\n    if h == 49 and m == 0:\n        return 49\n    if h == 49 and m == 1:\n        return 50\n    if h == 50 and m == 0:\n        return 50\n    if h == 50 and m == 1:\n        return 51\n    if h == 51 and m == 0:\n        return 51\n    if h == 51 and m == 1:\n        return 52\n    if h == 52 and m == 0:\n        return 52\n    if h == 52 and m == 1:\n        return 53\n    if h == 53 and m"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    return str(min(n - 1 - pos, r - pos))"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x = map(int, stdin.split())\n        d = list(map(int, stdin.split()))\n        h = list(map(int, stdin.split()))\n        if n == 1:\n            if x == 1:\n                return \"1\"\n            else:\n                return \"0\"\n        else:\n            d = sorted(d)\n            h = sorted(h)\n            if x == 1:\n                if d[0] > h[0]:\n                    return \"0\"\n                else:\n                    return \"1\"\n            else:\n                if d[0] > h[0]:\n                    return \"0\"\n                else:\n                    return \"1\""
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(4 - (n - m))"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split()\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x: (x[1], x[0]))\n    tiles = sorted(tiles, key=lambda x:"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split())\n    sofas = []\n    for i in range(d):\n        x, y = map(int, stdin.split())\n        sofas.append((x, y))\n    \n    def is_valid(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_2(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_3(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_4(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_5(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_6(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_7(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_8(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_9(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0] and sofa[1] == sofas[i][1]:\n                return False\n            if sofa[0] == sofas[i][1] and sofa[1] == sofas[i][0]:\n                return False\n        return True\n    \n    def is_valid_10(sofa):\n        for i in range(len(sofas)):\n            if sofa[0] == sofas[i][0"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days_off = 0\n    days_work = 0\n    for i in range(n):\n        if i % 5 == 0:\n            days_off += 1\n        else:\n            days_work += 1\n    return str(days_off) + \" \" + str(days_work)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return str(max(p * a + q * b, p * a + q * (n - b), p * (n - a) + q * b, p * (n - a) + q * (n - b)))"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = stdin.split()\n    max_beauty = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if trophies[i] == 'G' and trophies[j] == 'G':\n                max_beauty = max(max_beauty, len(trophies[i:j + 1]))\n    return str(max_beauty)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main_courses = list(map(int, stdin.split()))\n    main_courses.sort()\n    main_courses = set(main_courses)\n    courses = []\n    for i in range(n):\n        courses.append(i)\n    courses = set(courses)\n    courses = courses - main_courses\n    courses = list(courses)\n    courses.sort()\n    if len(courses) == 0:\n        return -1\n    else:\n        return str(len(courses)) +'' +''.join(map(str, courses))"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    if k == n:\n        return''.join(map(str, p))\n    else:\n        return '-1'"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"YES\"\n    if a == b:\n        return \"NO\"\n    if a > b:\n        return \"NO\"\n    if a > c:\n        return \"NO\"\n    if b > c:\n        return \"NO\"\n    if a < b:\n        return \"NO\"\n    if a < c:\n        return \"NO\"\n    if b < c:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    if cnt_1 + cnt_2 + cnt_3 + cnt_4 == 0:\n        return 1\n    else:\n        return 0\n\nsolution(input())"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return str(n - k + t)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.lower()\n    return s"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin.split()[i])\n        plays = []\n        clears = []\n        for j in range(n):\n            plays.append(int(stdin.split()[i+j+1]))\n            clears.append(int(stdin.split()[i+j+2]))\n        plays.sort()\n        clears.sort()\n        if plays == clears:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(\"\"\"\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n\"\"\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(':')\n    hh = int(hh)\n    mm = int(mm)\n    if hh == 0:\n        return '0'\n    if hh == 23:\n        return '1'\n    if mm == 59:\n        return '1'\n    if mm == 0:\n        return '11'\n    if mm == 1:\n        return '11'\n    if mm == 30:\n        return '11'\n    if mm == 59:\n        return '11'\n    if mm == 1:\n        return '11'\n    if mm == 2:\n        return '11'\n    if mm == 3:\n        return '11'\n    if mm == 4:\n        return '11'\n    if mm == 5:\n        return '11'\n    if mm == 6:\n        return '11'\n    if mm == 7:\n        return '11'\n    if mm == 8:\n        return '11'\n    if mm == 9:\n        return '11'\n    if mm == 10:\n        return '11'\n    if mm == 11:\n        return '11'\n    if mm == 12:\n        return '11'\n    if mm == 13:\n        return '11'\n    if mm == 14:\n        return '11'\n    if mm == 15:\n        return '11'\n    if mm == 16:\n        return '11'\n    if mm == 17:\n        return '11'\n    if mm == 18:\n        return '11'\n    if mm == 19:\n        return '11'\n    if mm == 20:\n        return '11'\n    if mm == 21:\n        return '11'\n    if mm == 22:\n        return '11'\n    if mm == 23:\n        return '11'\n    if mm == 24:\n        return '11'\n    if mm == 25:\n        return '11'\n    if mm == 26:\n        return '11'\n    if mm == 27:\n        return '11'\n    if mm == 28:\n        return '11'\n    if mm == 29:\n        return '11'\n    if mm == 30:\n        return '11'\n    if mm == 31:\n        return '11'\n    if mm == 32:\n        return '11'\n    if mm == 33:\n        return '11'\n    if mm == 34:\n        return '11'\n    if mm == 35:\n        return '11'\n    if mm == 36:\n        return '11'\n    if mm == 37:\n        return '11'\n    if mm == 38:\n        return '11'\n    if mm == 39:\n        return '11'\n    if mm == 40:\n        return '11'\n    if mm == 41:\n        return '11'\n    if mm == 42:\n        return '11'\n    if mm == 43:\n        return '11'\n    if mm == 44:\n        return '11'\n    if mm == 45:\n        return '11'\n    if mm == 46:\n        return '11'\n    if mm == 47:\n        return '11'\n    if mm == 48:\n        return '11'\n    if mm == 49:\n        return '11'\n    if mm == 50:\n        return '11'\n    if mm == 51:\n        return '11'\n    if mm == 52:\n        return '11'\n    if mm == 53:\n        return '11'\n    if mm == 54:\n        return '11'\n    if mm == 55:\n        return '11'\n    if mm == 56:\n        return '11'\n    if mm == 57:\n        return '11'\n    if mm == 58:\n        return '11'\n    if mm == 59:\n        return '11'\n    if mm == 60:\n        return '11'\n    if mm == 61:\n        return '11'\n    if mm == 62:\n        return '11'\n    if mm == 63:\n        return '11'\n    if mm == 64:\n        return '11'\n    if mm == 65:\n        return '11'\n    if mm == 66:\n        return '11'\n    if mm == 67:\n        return '11'\n    if mm == 68:\n        return '11'\n    if mm == 69:\n        return '11'\n    if mm == 70:\n        return '11'\n    if mm == 71:\n        return '11'\n    if mm == 72:\n        return '11'\n    if mm == 73:\n        return '11'\n    if mm == 74:\n        return '11'\n    if mm == 75:\n        return '11'\n    if mm == 76:\n        return '11'\n    if mm == 77:\n        return '11'\n    if mm == 78:\n        return '11'\n    if mm == 79:\n        return '11'\n    if mm == 80:\n        return '11'\n    if mm == 81:\n        return '11'\n    if mm == 82:\n        return '11'\n    if mm == 83:\n        return '11'\n    if mm == 84:\n        return '11'\n    if mm == 85:\n        return '11'\n    if mm == 86:\n        return '11'\n    if mm == 87:\n        return '11'\n    if mm == 88:\n        return '11'\n    if mm == 89:\n        return '11'\n    if mm == 90:\n        return '11'\n    if mm == 91:\n        return '11'\n    if mm == 92:\n        return '11'\n    if mm == 93:\n        return '11'\n    if mm == 94:\n        return '11'\n    if mm == 95:\n        return '11'\n    if mm == 96:\n        return '11'\n    if mm == 97:\n        return '11'\n    if mm == 98:\n        return '11'\n    if mm == 99:\n        return '11'\n    if mm == 100:\n        return '11'\n    if mm == 101:\n        return '11'\n    if mm == 102:\n        return '11'\n    if mm == 103:\n        return '11'\n    if mm == 104:\n        return '11'\n    if mm == 105:\n        return '11'\n    if mm == 106:\n        return '11'\n    if mm == 107:\n        return '11'\n    if mm == 108:\n        return '11'\n    if mm == 109:\n        return '11'\n    if mm == 110:\n        return '11'\n    if mm == 111:\n        return '11'\n    if mm == 112:\n        return '11'\n    if mm == 113:\n        return '11'\n    if mm == 114:\n        return '11'\n    if mm == 115:\n        return '11'\n    if mm == 116:\n        return '11'\n    if mm == 117:"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[-1] - a[0])"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) % 2 == 0:\n        mid = len(s) // 2\n        if s[:mid] == s[mid:][::-1]:\n            return \"TAK\"\n        else:\n            return \"NIE\"\n    else:\n        mid = len(s) // 2\n        if s[:mid] == s[mid + 1:][::-1]:\n            return \"TAK\"\n        else:\n            return \"NIE\"\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(a)\n    b = int(b)\n    a.sort()\n    a = ''.join(a)\n    if int(a) > b:\n        return a\n    else:\n        return '0' + a"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.split('\\n')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'O')\n        matrix[i] = matrix[i].replace('X', 'X')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('O', 'X')\n        matrix[i] = matrix[i].replace('X', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('O', '.')\n        matrix[i] = matrix[i].replace('X', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'O')\n        matrix[i] = matrix[i].replace('.', 'X')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('O', '.')\n        matrix[i] = matrix[i].replace('X', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('.', 'X')\n        matrix[i] = matrix[i].replace('.', 'O')\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i].replace('X', '.')\n        matrix[i] = matrix[i].replace('O', '.')\n    for i in range"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"1 0\"\n    if n == 2:\n        return \"1 0 0\"\n    if n == 3:\n        return \"1 0 0 0\"\n    if n == 4:\n        return \"1 0 0 0 0\"\n    if n == 5:\n        return \"1 0 0 0 0 0\"\n    if n == 6:\n        return \"1 0 0 0 0 0 0\"\n    if n == 7:\n        return \"1 0 0 0 0 0 0 0\"\n    if n == 8:\n        return \"1 0 0 0 0 0 0 0 0\"\n    if n == 9:\n        return \"1 0 0 0 0 0 0 0 0 0\"\n    if n == 10:\n        return \"1 0 0 0 0 0 0 0 0 0 0\"\n    if n == 11:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 12:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 13:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 14:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 15:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 16:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 17:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 18:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 19:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 20:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 21:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 22:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 23:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 24:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 25:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 26:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 27:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 28:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 29:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 30:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 31:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 32:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 33:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 34:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 35:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 36:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 37:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 38:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 39:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 40:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 41:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 42:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 43:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 44:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 45:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 46:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 47:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 48:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 49:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 50:\n        return \"1"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    max_x = max(x, y, z)\n    max_y = max(x, z)\n    max_z = max(y, z)\n    max_xy = max(x, y)\n    max_xz = max(x, z)\n    max_yz = max(y, z)\n    max_xyz = max(x, y, z)\n    max_xzy = max(x, z, y)\n    max_zyx = max(y, z, x)\n    max_zyz = max(y, z, z)\n    max_zyxy = max(y, z, x, y)\n    max_zyxz = max(y, z, x, z)\n    max_zyy = max(y, z, y)\n    max_zyyz = max(y, z, y, z)\n    max_zyxy = max(y, z, x, y)\n    max_zyyx = max(y, z, x, y)\n    max_zyyy = max(y, z, y, z)\n    max_zyyxz = max(y, z, x, y, z)\n    max_zyyyz = max(y, z, y, z, z)\n    max_zyxyz = max(y, z, x, y, z)\n    max_zyxyy = max(y, z, x, y, y)\n    max_zyxyyz = max(y, z, x, y, y, z)\n    max_zyxyxy = max(y, z, x, y, x, y)\n    max_zyxyxz = max(y, z, x, y, x, z)\n    max_zyxyyz = max(y, z, x, y, y, z)\n    max_zyxyxyz = max(y, z, x, y, x, y, z)\n    max_zyxyxyyy = max(y, z, x, y, x, y, y)\n    max_zyxyxyyz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyyy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyyz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyxyy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyyz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxyxyxyxy = max(y, z, x, y, x, y, y)\n    max_zyxyxyxyxyxz = max(y, z, x, y, x, y, z)\n    max_zyxyxyxyxyyz = max(y, z, x, y, y, z, z)\n    max_zyxyxy"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        "
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        if stdin[i] == \"1\":\n            res += 1\n    for i in range(n):\n        if stdin[i] == \"0\":\n            res += 1\n    return str(res)"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket.replace('5', '5')\n    ticket = ticket.replace('6', '6')\n    ticket = ticket.replace('7', '7')\n    ticket = ticket.replace('8', '8')\n    ticket = ticket.replace('9', '9')\n    ticket = ticket.replace('0', '0')\n    ticket = ticket.replace('1', '1')\n    ticket = ticket.replace('2', '2')\n    ticket = ticket.replace('3', '3')\n    ticket = ticket.replace('4', '4')\n    ticket = ticket."
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(x - 1)"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = 1\n    b = 1\n    for i in range(n):\n        a = (a * 2) % (10**6 + 3)\n        b = (b * 2) % (10**6 + 3)\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        t, d = map(int, stdin.split())\n        if t > 10000 or t < 0 or d not in {\"North\", \"South\", \"West\", \"East\"}:\n            return \"NO\"\n        if d == \"North\" and t > 0:\n            return \"NO\"\n        if d == \"South\" and t > 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    return str(int(L <= a_1 + b_1 <= R) + int(L <= a_2 + b_2 <= R) + int(a_1 + b_1 == a_2 + b_2))"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n, a, b) - 1)"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.split()\n    if n == m:\n        if n == 3:\n            if field[0] == field[1] == field[2]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if field[0] == field[1] == field[2] == field[3]:\n                return \"YES\"\n            else:\n                return \"NO\"\n    else:\n        if n == 4:\n            if field[0] == field[1] == field[2] == field[3]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if field[0] == field[1] == field[2] == field[3] == field[4]:\n                return \"YES\"\n            else:\n                return \"NO\""
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    y = 0\n    for i in range(n):\n        x, y = x + 2, y + 3\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b <= c:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    barriers = list(map(int, stdin.split()))\n    barriers.sort()\n    Kefa_start = list(map(int, stdin.split()))\n    Sasha_start = list(map(int, stdin.split()))\n    Kefa_start.sort()\n    Sasha_start.sort()\n    if Kefa_start == Sasha_start:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if is_palindrome(s):\n            return len(s)\n        s = s[1:] + s[0]\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    standings = []\n    for i in range(n):\n        standings.append([int(x) for x in stdin.split()[i * 2 + 1].split(' ')])\n    standings.sort(key=lambda x: x[0])\n    for i in range(n):\n        if standings[i][1]!= standings[i + 1][1]:\n            return 'unrated'\n    return 'rated'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = []\n    for i in range(n):\n        d.append(abs(a[i] - a[a.index(0)]))\n    return''.join(map(str, d))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = 0\n    for i in range(1, n + 1):\n        if s[i:] == s[:n - i]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        vectors.append((x, y))\n    vectors.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    a, b = 0, 0\n    for i in range(n):\n        if vectors[i][0] * vectors[i + 1][0] < 0:\n            a = i + 1\n        if vectors[i][0] * vectors[i + 1][0] > 0:\n            b = i + 1\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    a, b = a, b\n    t = t\n    if a > b:\n        a, b = b, a\n    if a > d:\n        return 'impossible'\n    if a == d:\n        return t\n    if a > k:\n        return 'impossible'\n    if a == k:\n        return t + a\n    if a < k:\n        return t + a + b\n    if a == k:\n        return t + a + b + d\n    if a < k:\n        return t + a + b + d + k\n    if a == k:\n        return t + a + b + d + k + a\n    if a < k:\n        return t + a + b + d + k + a + b\n    if a == k:\n        return t + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d\n    if a == k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d\n    if a < k:\n        return t + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k + a + b + d + k"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k == 0:\n        return''.join(map(str, range(1, n // k + 1)))\n    return '-1'\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(1 for x in range(1, n + 1) for y in range(1, m + 1) if (x + y) % 5 == 0))\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = 0\n    for i in range(n):\n        beauty = max(beauty, sum(a[i:i+2]))\n    return str(beauty*x)"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(sorted(range(1, n * m + 1), reverse=True)[k - 1])"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 123456789101112131415161718192021222324252627282930313233343536\n    return str(n // 10**(k-1) % 10)"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return max(0, n * r - sum(s) + sum(b))"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = list(map(int, stdin.split()[2]))\n    b.sort(reverse=True)\n    t = \"\"\n    for i in range(n):\n        t += s[i] * b[i]\n    return t\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if w == 1:\n        return 'YES'\n    if w == 2:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 3:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 4:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 5:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 6:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 7:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 8:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 9:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 10:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 11:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 12:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 13:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 14:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 15:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 16:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 17:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 18:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 19:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 20:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 21:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 22:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 23:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 24:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 25:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 26:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 27:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 28:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 29:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 30:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 31:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 32:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 33:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 34:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 35:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 36:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 37:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 38:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 39:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 40:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 41:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 42:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 43:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 44:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 45:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 46:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 47:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 48:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 49:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 50:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 51:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 52:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 53:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 54:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 55:\n        if m == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    if w == 56:\n        if m == 1:\n            return 'YES'\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return \"No\"\n    if k == 1:\n        return \"Yes\"\n    if k == 2:\n        return \"Yes\" + \" \" + str(n)\n    if k == 3:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n)\n    if k == 4:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 5:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 6:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 7:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 8:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 9:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 10:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 11:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 12:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 13:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 14:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 15:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 16:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)\n    if k == 17:\n        return \"Yes\" + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n - (t - 1) // 2)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0\"\n    if n == 3:\n        return \"-1\"\n    if n == 4:\n        return \"0\"\n    return \"0\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    return str(a + b + (n - a - b) // 2)"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b_x = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:]))\n    m, b_y = map(int, stdin.split())\n    y = list(map(int, stdin.split()[1:]))\n    x.sort()\n    y.sort()\n    if x == y:\n        return '='\n    if x[-1] < y[-1]:\n        return '<'\n    if x[-1] > y[-1]:\n        return '>'\n\nsolution(input())\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"BitLGM\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"BitAryo\"\n        else:\n            return \"BitLGM\"\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] or a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[2] or a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1]!= a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1]!= a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1]!= a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1]!= a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1]!= a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1]!= a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1]!= a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1]!= a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1]!= a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitAryo\"\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"BitLGM\"\n        if a[0]!= a[1] and a[1] == a[2]:\n            return \"BitLGM"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = 0\n    y = 0\n    for i in range(n):\n        if a[i] % k == 0:\n            x += 1\n        else:\n            y += 1\n    return str(x) +'' + str(y)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace(' ', '')\n    if len(s)!= n:\n        return 'NO'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if s[0] == s[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 13:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 14:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 15:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 16:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 17:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    min_1 = arr[0]\n    min_2 = arr[1]\n    min_3 = arr[2]\n    min_4 = arr[3]\n    min_5 = arr[4]\n    min_6 = arr[5]\n    min_7 = arr[6]\n    min_8 = arr[7]\n    min_9 = arr[8]\n    min_10 = arr[9]\n    min_11 = arr[10]\n    min_12 = arr[11]\n    min_13 = arr[12]\n    min_14 = arr[13]\n    min_15 = arr[14]\n    min_16 = arr[15]\n    min_17 = arr[16]\n    min_18 = arr[17]\n    min_19 = arr[18]\n    min_20 = arr[19]\n    min_21 = arr[20]\n    min_22 = arr[21]\n    min_23 = arr[22]\n    min_24 = arr[23]\n    min_25 = arr[24]\n    min_26 = arr[25]\n    min_27 = arr[26]\n    min_28 = arr[27]\n    min_29 = arr[28]\n    min_30 = arr[29]\n    min_31 = arr[30]\n    min_32 = arr[31]\n    min_33 = arr[32]\n    min_34 = arr[33]\n    min_35 = arr[34]\n    min_36 = arr[35]\n    min_37 = arr[36]\n    min_38 = arr[37]\n    min_39 = arr[38]\n    min_40 = arr[39]\n    min_41 = arr[40]\n    min_42 = arr[41]\n    min_43 = arr[42]\n    min_44 = arr[43]\n    min_45 = arr[44]\n    min_46 = arr[45]\n    min_47 = arr[46]\n    min_48 = arr[47]\n    min_49 = arr[48]\n    min_50 = arr[49]\n    min_51 = arr[50]\n    min_52 = arr[51]\n    min_53 = arr[52]\n    min_54 = arr[53]\n    min_55 = arr[54]\n    min_56 = arr[55]\n    min_57 = arr[56]\n    min_58 = arr[57]\n    min_59 = arr[58]\n    min_60 = arr[59]\n    min_61 = arr[60]\n    min_62 = arr[61]\n    min_63 = arr[62]\n    min_64 = arr[63]\n    min_65 = arr[64]\n    min_66 = arr[65]\n    min_67 = arr[66]\n    min_68 = arr[67]\n    min_69 = arr[68]\n    min_70 = arr[69]\n    min_71 = arr[70]\n    min_72 = arr[71]\n    min_73 = arr[72]\n    min_74 = arr[73]\n    min_75 = arr[74]\n    min_76 = arr[75]\n    min_77 = arr[76]\n    min_78 = arr[77]\n    min_79 = arr[78]\n    min_80 = arr[79]\n    min_81 = arr[80]\n    min_82 = arr[81]\n    min_83 = arr[82]\n    min_84 = arr[83]\n    min_85 = arr[84]\n    min_86 = arr[85]\n    min_87 = arr[86]\n    min_88 = arr[87]\n    min_89 = arr[88]\n    min_90 = arr[89]\n    min_91 = arr[90]\n    min_92 = arr[91]\n    min_93 = arr[92]\n    min_94 = arr[93]\n    min_95 = arr[94]\n    min_96 = arr[95]\n    min_97 = arr[96]\n    min_98 = arr[97]\n    min_99 = arr[98]\n    min_100 = arr[99]\n    min_101 = arr[100]\n    min_102 = arr[101]\n    min_103 = arr[102]\n    min_104 = arr[103]\n    min_105 = arr[104]\n    min_106 = arr[105]\n    min_107 = arr[106]\n    min_108 = arr[107]\n    min_109 = arr[108]\n    min_110 = arr[109]\n    min_111 = arr[110]\n    min_112 = arr[111]\n    min_113 = arr[112]\n    min_114 = arr[113]\n    min_115 = arr[114]\n    min_116 = arr[115]\n    min_117 = arr[116]\n    min_118 = arr[117]\n    min_119 = arr[118]\n    min_120 = arr[119]\n    min_121 = arr[120]\n    min_122 = arr[121]\n    min_123 = arr[122]\n    min_124 = arr[123]\n    min_125 = arr[124]\n    min_126 = arr[125]\n    min_127 = arr[126]\n    min_128 = arr[127]\n    min_129 = arr[128]\n    min_130 = arr[129]\n    min_131 = arr[130]\n    min_132 = arr[131]\n    min_133 = arr[132]\n    min_134 = arr[133]\n    min_135 = arr[134]\n    min_136 = arr[135]\n    min_137 = arr[136]\n    min_138 = arr[137]\n    min_139 = arr[138]\n    min_140 = arr[139]\n    min_141 = arr[140]\n    min_142 = arr[141]\n    min_143 = arr[142]\n    min_144 = arr[143]\n    min_145 = arr[144]\n    min_146 = arr[145]\n    min_147 = arr[146]\n    min_148 = arr[147]\n    min_149 = arr[148]\n    min_150 = arr[149]\n    min_151 = arr[150]\n    min_152 = arr[151]\n    min_153 = arr[152]\n    min_154 = arr[153]\n    min_155 = arr[154]\n    min_156 = arr[155]\n    min_157 = arr[156]\n    min_158 = arr[157]\n    min_159 = arr[158]\n    min_160 = arr[159]\n    min_161 = arr[160]\n    min_162 = arr[161]\n    min_163 = arr[162]\n    min_164 = arr[163]\n    min_165 = arr[164]\n    min_166 = arr[165]\n    min_167 = arr[166]\n    min_168 = arr[167]\n    min_169 = arr[168]\n    min_170 = arr[169]\n    min_171 = arr[170]\n    min_172 = arr[171]\n    min_173 = arr[172]\n    min_174 = arr[173]\n    min_175 = arr[174]\n    min_176 = arr[175]\n    min_177 = arr[176]\n    min_178 = arr[177]\n    min"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return str(gcd(t, w, b))\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y + z:\n        return \"-\"\n    elif x < y + z:\n        return \"+\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = stdin.split()[1]\n    x, y = map(int, stdin.split()[2].split())\n    if n == 1:\n        if seq == 'R':\n            return str(x - 1) +'' + str(y)\n        elif seq == 'L':\n            return str(x + 1) +'' + str(y)\n        elif seq == 'U':\n            return str(x) +'' + str(y + 1)\n        elif seq == 'D':\n            return str(x) +'' + str(y - 1)\n    else:\n        if seq == 'R':\n            return str(x - 1) +'' + str(y)\n        elif seq == 'L':\n            return str(x + 1) +'' + str(y)\n        elif seq == 'U':\n            return str(x) +'' + str(y + 1)\n        elif seq == 'D':\n            return str(x) +'' + str(y - 1)\n    return '-1'"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - (n // 10 ** k) * 10 ** k)"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    if n == 1:\n        return str(k) +'' + str(k) +'' + str(k)\n    else:\n        if x == 1:\n            if y == 1:\n                return str(k) +'' + str(k) +'' + str(k)\n            else:\n                return str(k) +'' + str(k) +'' + str(k) +'' + str(k)\n        else:\n            if y == 1:\n                return str(k) +'' + str(k) +'' + str(k) +'' + str(k)\n            else:\n                return str(k) +'' + str(k) +'' + str(k) +'' + str(k) +'' + str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kuro = stdin.split()[0]\n    shiro = stdin.split()[1]\n    katie = stdin.split()[2]\n    kuro_ribbon = kuro\n    shiro_ribbon = shiro\n    katie_ribbon = katie\n    kuro_beauty = 0\n    shiro_beauty = 0\n    katie_beauty = 0\n    for i in range(n):\n        kuro_ribbon = kuro_ribbon.replace(kuro_ribbon[0], kuro_ribbon[0].lower())\n        shiro_ribbon = shiro_ribbon.replace(shiro_ribbon[0], shiro_ribbon[0].lower())\n        katie_ribbon = katie_ribbon.replace(katie_ribbon[0], katie_ribbon[0].lower())\n        kuro_beauty += len(kuro_ribbon)\n        shiro_beauty += len(shiro_ribbon)\n        katie_beauty += len(katie_ribbon)\n    if kuro_beauty > shiro_beauty and kuro_beauty > katie_beauty:\n        return \"Kuro\"\n    elif shiro_beauty > kuro_beauty and shiro_beauty > katie_beauty:\n        return \"Shiro\"\n    else:\n        return \"Katie\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = 0\n    while v_0 <= v_1:\n        days += 1\n        v_0 += a\n        if v_0 > v_1:\n            v_0 = v_1\n    return str(days)"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    if len(primes) < 3:\n        return str(len(primes))\n    else:\n        return str(len(primes)) +'' +''.join(map(str, primes))\n\n\ndef"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.split()\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return str(a * n + b * (n // m))\n    else:\n        return str(a * n + b * (n // m + 1))"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] % 2 == 0:\n        return -1\n    if a[-1] % 2 == 0:\n        return -1\n    if a[-1] % 2 == 1:\n        return a[-1]\n    for i in range(n - 1, 0, -1):\n        if a[i] % 2 == 1:\n            return a[i]\n    return a[0]"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        songs.append(tuple(map(int, stdin.split())))\n    songs.sort(key=lambda x: (x[1], x[0]))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if songs[i][1] == songs[j][1]:\n                break\n            if songs[i][0] + songs[j][0] <= t:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a) < m:\n        x = random.randint(1, m)\n        a.append(x)\n    return str(math.gcd(a))"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(a, r + 1):\n            if a < b:\n                if gcd(a, b) == x and lcm(a, b) == y:\n                    count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for k in range(1, b + 1):\n        if a * k + b * k == a * b:\n            return str(k)\n    return str(0)"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks.sort()\n    print(marks)\n    print(marks[-1])\n    print(marks[-2])\n    print(marks[-3])\n    print(marks[-4])\n    print(marks[-5])\n    print(marks[-6])\n    print(marks[-7])\n    print(marks[-8])\n    print(marks[-9])\n    print(marks[-10])\n    print(marks[-11])\n    print(marks[-12])\n    print(marks[-13])\n    print(marks[-14])\n    print(marks[-15])\n    print(marks[-16])\n    print(marks[-17])\n    print(marks[-18])\n    print(marks[-19])\n    print(marks[-20])\n    print(marks[-21])\n    print(marks[-22])\n    print(marks[-23])\n    print(marks[-24])\n    print(marks[-25])\n    print(marks[-26])\n    print(marks[-27])\n    print(marks[-28])\n    print(marks[-29])\n    print(marks[-30])\n    print(marks[-31])\n    print(marks[-32])\n    print(marks[-33])\n    print(marks[-34])\n    print(marks[-35])\n    print(marks[-36])\n    print(marks[-37])\n    print(marks[-38])\n    print(marks[-39])\n    print(marks[-40])\n    print(marks[-41])\n    print(marks[-42])\n    print(marks[-43])\n    print(marks[-44])\n    print(marks[-45])\n    print(marks[-46])\n    print(marks[-47])\n    print(marks[-48])\n    print(marks[-49])\n    print(marks[-50])\n    print(marks[-51])\n    print(marks[-52])\n    print(marks[-53])\n    print(marks[-54])\n    print(marks[-55])\n    print(marks[-56])\n    print(marks[-57])\n    print(marks[-58])\n    print(marks[-59])\n    print(marks[-60])\n    print(marks[-61])\n    print(marks[-62])\n    print(marks[-63])\n    print(marks[-64])\n    print(marks[-65])\n    print(marks[-66])\n    print(marks[-67])\n    print(marks[-68])\n    print(marks[-69])\n    print(marks[-70])\n    print(marks[-71])\n    print(marks[-72])\n    print(marks[-73])\n    print(marks[-74])\n    print(marks[-75])\n    print(marks[-76])\n    print(marks[-77])\n    print(marks[-78])\n    print(marks[-79])\n    print(marks[-80])\n    print(marks[-81])\n    print(marks[-82])\n    print(marks[-83])\n    print(marks[-84])\n    print(marks[-85])\n    print(marks[-86])\n    print(marks[-87])\n    print(marks[-88])\n    print(marks[-89])\n    print(marks[-90])\n    print(marks[-91])\n    print(marks[-92])\n    print(marks[-93])\n    print(marks[-94])\n    print(marks[-95])\n    print(marks[-96])\n    print(marks[-97])\n    print(marks[-98])\n    print(marks[-99])\n    print(marks[-100])\n    print(marks[-101])\n    print(marks[-102])\n    print(marks[-103])\n    print(marks[-104])\n    print(marks[-105])\n    print(marks[-106])\n    print(marks[-107])\n    print(marks[-108])\n    print(marks[-109])\n    print(marks[-110])\n    print(marks[-111])\n    print(marks[-112])\n    print(marks[-113])\n    print(marks[-114])\n    print(marks[-115])\n    print(marks[-116])\n    print(marks[-117])\n    print(marks[-118])\n    print(marks[-119])\n    print(marks[-120])\n    print(marks[-121])\n    print(marks[-122])\n    print(marks[-123])\n    print(marks[-124])\n    print(marks[-125])\n    print(marks[-126])\n    print(marks[-127])\n    print(marks[-128])\n    print(marks[-129])\n    print(marks[-130])\n    print(marks[-131])\n    print(marks[-132])\n    print(marks[-133])\n    print(marks[-134])\n    print(marks[-135])\n    print(marks[-136])\n    print(marks[-137])\n    print(marks[-138])\n    print(marks[-139])\n    print(marks[-140])\n    print(marks[-141])\n    print(marks[-142])\n    print(marks[-143])\n    print(marks[-144])\n    print(marks["
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    d = 0\n    for i in range(n):\n        if arr[i] > 0:\n            d = max(d, arr[i] // 2)\n    if d == 0:\n        return \"0\"\n    return str(d)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    if n == 18:\n        return str(17)\n    if n == 19:\n        return str(18)\n    if n == 20:\n        return str(19)\n    if n == 21:\n        return str(20)\n    if n == 22:\n        return str(21)\n    if n == 23:\n        return str(22)\n    if n == 24:\n        return str(23)\n    if n == 25:\n        return str(24)\n    if n == 26:\n        return str(25)\n    if n == 27:\n        return str(26)\n    if n == 28:\n        return str(27)\n    if n == 29:\n        return str(28)\n    if n == 30:\n        return str(29)\n    if n == 31:\n        return str(30)\n    if n == 32:\n        return str(31)\n    if n == 33:\n        return str(32)\n    if n == 34:\n        return str(33)\n    if n == 35:\n        return str(34)\n    if n == 36:\n        return str(35)\n    if n == 37:\n        return str(36)\n    if n == 38:\n        return str(37)\n    if n == 39:\n        return str(38)\n    if n == 40:\n        return str(39)\n    if n == 41:\n        return str(40)\n    if n == 42:\n        return str(41)\n    if n == 43:\n        return str(42)\n    if n == 44:\n        return str(43)\n    if n == 45:\n        return str(44)\n    if n == 46:\n        return str(45)\n    if n == 47:\n        return str(46)\n    if n == 48:\n        return str(47)\n    if n == 49:\n        return str(48)\n    if n == 50:\n        return str(49)\n    if n == 51:\n        return str(50)\n    if n == 52:\n        return str(51)\n    if n == 53:\n        return str(52)\n    if n == 54:\n        return str(53)\n    if n == 55:\n        return str(54)\n    if n == 56:\n        return str(55)\n    if n == 57:\n        return str(56)\n    if n == 58:\n        return str(57)\n    if n == 59:\n        return str(58)\n    if n == 60:\n        return str(59)\n    if n == 61:\n        return str(60)\n    if n == 62:\n        return str(61)\n    if n == 63:\n        return str(62)\n    if n == 64:\n        return str(63)\n    if n == 65:\n        return str(64)\n    if n == 66:\n        return str(65)\n    if n == 67:\n        return str(66)\n    if n == 68:\n        return str(67)\n    if n == 69:\n        return str(68)\n    if n == 70:\n        return str(69)\n    if n == 71:\n        return str(70)\n    if n == 72:\n        return str(71)\n    if n == 73:\n        return str(72)\n    if n == 74:\n        return str(73)\n    if n == 75:\n        return str(74)\n    if n == 76:\n        return str(75)\n    if n == 77:\n        return str(76)\n    if n == 78:\n        return str(77)\n    if n == 79:\n        return str(78)\n    if n == 80:\n        return str(79)\n    if n == 81:\n        return str(80)\n    if n == 82:\n        return str(81)\n    if n == 83:\n        return str(82)\n    if n == 84:\n        return str(83)\n    if n == 85:\n        return str(84)\n    if n == 86:\n        return str(85)\n    if n == 87:\n        return str(86)\n    if n == 88:\n        return str(87)\n    if n == 89:\n        return str(88)\n    if n == 90:\n        return str(89)\n    if n == 91:\n        return str(90)\n    if n == 92:\n        return str(91)\n    if n == 93:\n        return str(92)\n    if n == 94:\n        return str(93)\n    if n == 95:\n        return str(94)\n    if n == 96:\n        return str(95)\n    if n == 97:\n        return str(96)\n    if n == 98:\n        return str(97)\n    if n == 99:\n        return str(98)\n    if n == 100:\n        return str(99)\n    if n == 101:\n        return str(100)\n    if n == 102:\n        return str(101)\n    if n == 103:\n        return str(102)\n    if n == 104:\n        return str(103)\n    if n == 105:\n        return str(104)\n    if n == 106:\n        return str(105)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(0)\n    if a > b:\n        return str(a // b)\n    if a < b:\n        return str(b // a)\n    if a == b:\n        return str(1)"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if x_p == x_v and y_p == y_v:\n        return \"Polycarp\"\n    if x_p == x_v and y_p == y_v - 1:\n        return \"Vasiliy\"\n    if x_p == x_v - 1 and y_p == y_v:\n        return \"Polycarp\"\n    if x_p == x_v - 1 and y_p == y_v - 1:\n        return \"Vasiliy\"\n    if x_p == x_v - 1 and y_p == y_v - 2:\n        return \"Polycarp\"\n    if x_p == x_v - 2 and y_p == y_v - 1:\n        return \"Vasiliy\"\n    if x_p == x_v - 2 and y_p == y_v - 2:\n        return \"Polycarp\"\n    if x_p == x_v - 2 and y_p == y_v - 3:\n        return \"Vasiliy\"\n    if x_p == x_v - 3 and y_p == y_v - 2:\n        return \"Polycarp\"\n    if x_p == x_v - 3 and y_p == y_v - 3:\n        return \"Vasiliy\"\n    if x_p == x_v - 3 and y_p == y_v - 4:\n        return \"Polycarp\"\n    if x_p == x_v - 4 and y_p == y_v - 3:\n        return \"Vasiliy\"\n    if x_p == x_v - 4 and y_p == y_v - 4:\n        return \"Polycarp\"\n    if x_p == x_v - 4 and y_p == y_v - 5:\n        return \"Vasiliy\"\n    if x_p == x_v - 5 and y_p == y_v - 4:\n        return \"Polycarp\"\n    if x_p == x_v - 5 and y_p == y_v - 5:\n        return \"Vasiliy\"\n    if x_p == x_v - 5 and y_p == y_v - 6:\n        return \"Polycarp\"\n    if x_p == x_v - 6 and y_p == y_v - 5:\n        return \"Vasiliy\"\n    if x_p == x_v - 6 and y_p == y_v - 6:\n        return \"Polycarp\"\n    if x_p == x_v - 6 and y_p == y_v - 7:\n        return \"Vasiliy\"\n    if x_p == x_v - 7 and y_p == y_v - 6:\n        return \"Polycarp\"\n    if x_p == x_v - 7 and y_p == y_v - 7:\n        return \"Vasiliy\"\n    if x_p == x_v - 7 and y_p == y_v - 8:\n        return \"Polycarp\"\n    if x_p == x_v - 8 and y_p == y_v - 7:\n        return \"Vasiliy\"\n    if x_p == x_v - 8 and y_p == y_v - 8:\n        return \"Polycarp\"\n    if x_p == x_v - 8 and y_p == y_v - 9:\n        return \"Vasiliy\"\n    if x_p == x_v - 9 and y_p == y_v - 8:\n        return \"Polycarp\"\n    if x_p == x_v - 9 and y_p == y_v - 9:\n        return \"Vasiliy\"\n    if x_p == x_v - 9 and y_p == y_v - 10:\n        return \"Polycarp\"\n    if x_p == x_v - 10 and y_p == y_v - 9:\n        return \"Vasiliy\"\n    if x_p == x_v - 10 and y_p == y_v - 10:\n        return \"Polycarp\"\n    if x_p == x_v - 10 and y_p == y_v - 11:\n        return \"Vasiliy\"\n    if x_p == x_v - 11 and y_p == y_v - 10:\n        return \"Polycarp\"\n    if x_p == x_v - 11 and y_p == y_v - 11:\n        return \"Vasiliy\"\n    if x_p == x_v - 11 and y_p == y_v - 12:\n        return \"Polycarp\"\n    if x_p == x_v - 12 and y_p == y_v - 11:\n        return \"Vasiliy\"\n    if x_p == x_v - 12 and y_p == y_v - 12:\n        return \"Polycarp\"\n    if x_p == x_v - 12 and y_p == y_v - 13:\n        return \"Vasiliy\"\n    if x_p == x_v - 13 and y_p == y_v - 12:\n        return \"Polycarp\"\n    if x_p == x_v - 13 and y_p == y_v - 13:\n        return \"Vasiliy\"\n    if x_p == x_v - 13 and y_p == y_v - 14:\n        return \"Polycarp\"\n    if x_p == x_v - 14 and y_p == y_v - 13:\n        return \"Vasiliy\"\n    if x_p == x_v - 14 and y_p == y_v - 14:\n        return \"Polycarp\"\n    if x_p == x_v - 14 and y_p == y_v - 15:\n        return \"Vasiliy\"\n    if x_p == x_v - 15 and y_p == y_v - 14:\n        return \"Polycarp\"\n    if x_p == x_v - 15 and y_p == y_v - 15:\n        return \"Vasiliy\"\n    if x_p == x_v - 15 and y_p == y_v - 16:\n        return \"Polycarp\"\n    if x_p == x_v - 16 and y_p == y_v - 15:\n        return \"Vasiliy\"\n    if x_p == x_v - 16 and y_p == y_v - 16:\n        return \"Polycarp\"\n    if x_p == x_v - 16 and y_p == y_v - 17:\n        return \"Vasiliy\"\n    "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return str(7 - d + 1)"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if bin(i).count('0') == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    cubes = list(map(int, stdin.split()))\n    cubes.sort()\n    ways = 0\n    for i in range(n):\n        if i == 0:\n            ways += 1\n        else:\n            ways += (ways * (cubes[i] - cubes[i - 1]))\n    ways = ways % (10 ** 9 + 7)\n    return str(ways)"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for i in range(T):\n        n, k = map(int, stdin.split()[i * 2 + 1].split())\n        a = list(map(int, stdin.split()[i * 2 + 2].split()))\n        v = [0] * n\n        for j in range(n):\n            if j == 0:\n                v[j] = a[j]\n            else:\n                if v[j - 1] == 0:\n                    v[j] = a[j]\n                else:\n                    v[j] = v[j - 1] + a[j]\n        if v == a:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum(d(i) for i in range(1, a + 1) for j in range(1, b + 1) for k in range(1, c + 1)))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bessie_puzzle = stdin.splitlines()\n    elsie_puzzle = stdin.splitlines()\n    bessie_grid = [['X' for _ in range(2)] for _ in range(2)]\n    elsie_grid = [['X' for _ in range(2)] for _ in range(2)]\n    for i in range(2):\n        for j in range(2):\n            bessie_grid[i][j] = bessie_puzzle[i][j]\n            elsie_grid[i][j] = elsie_puzzle[i][j]\n    for i in range(2):\n        for j in range(2):\n            if bessie_grid[i][j]!= 'X':\n                if bessie_grid[i][j]!= elsie_grid[i][j]:\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    if k < 10:\n        return str(k)\n    else:\n        return str(k % n) + solution(str(k // n))\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if len(arr) == 1:\n        return \"YES\"\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if len(arr) == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 4:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 5:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 6:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 7:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 8:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 9:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 10:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 11:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 12:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 13:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11] and arr[11] > arr[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 14:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11] and arr[11] > arr[12] and arr[12] > arr[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 15:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11] and arr[11] > arr[12] and arr[12] > arr[13] and arr[13] > arr[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(arr) == 16:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11] and arr[11] > arr[12] and arr[12] > arr[13] and arr"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(i for i in range(1, n + 1) if len(set(path(i))) >= k))\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return '-1'\n    if n == 1 and m == 2:\n        return '0 0'\n    if n == 2 and m == 2:\n        return '0 0'\n    if n == 2 and m == 1:\n        return '0 1'\n    if n == 2 and m == 2:\n        return '0 0'\n    if n == 3 and m == 2:\n        return '0 0'\n    if n == 3 and m == 1:\n        return '0 1'\n    if n == 3 and m == 2:\n        return '0 0'\n    if n == 4 and m == 2:\n        return '0 0'\n    if n == 4 and m == 1:\n        return '0 1'\n    if n == 4 and m == 2:\n        return '0 0'\n    if n == 5 and m == 2:\n        return '0 0'\n    if n == 5 and m == 1:\n        return '0 1'\n    if n == 5 and m == 2:\n        return '0 0'\n    if n == 6 and m == 2:\n        return '0 0'\n    if n == 6 and m == 1:\n        return '0 1'\n    if n == 6 and m == 2:\n        return '0 0'\n    if n == 7 and m == 2:\n        return '0 0'\n    if n == 7 and m == 1:\n        return '0 1'\n    if n == 7 and m == 2:\n        return '0 0'\n    if n == 8 and m == 2:\n        return '0 0'\n    if n == 8 and m == 1:\n        return '0 1'\n    if n == 8 and m == 2:\n        return '0 0'\n    if n == 9 and m == 2:\n        return '0 0'\n    if n == 9 and m == 1:\n        return '0 1'\n    if n == 9 and m == 2:\n        return '0 0'\n    if n == 10 and m == 2:\n        return '0 0'\n    if n == 10 and m == 1:\n        return '0 1'\n    if n == 10 and m == 2:\n        return '0 0'\n    if n == 11 and m == 2:\n        return '0 0'\n    if n == 11 and m == 1:\n        return '0 1'\n    if n == 11 and m == 2:\n        return '0 0'\n    if n == 12 and m == 2:\n        return '0 0'\n    if n == 12 and m == 1:\n        return '0 1'\n    if n == 12 and m == 2:\n        return '0 0'\n    if n == 13 and m == 2:\n        return '0 0'\n    if n == 13 and m == 1:\n        return '0 1'\n    if n == 13 and m == 2:\n        return '0 0'\n    if n == 14 and m == 2:\n        return '0 0'\n    if n == 14 and m == 1:\n        return '0 1'\n    if n == 14 and m == 2:\n        return '0 0'\n    if n == 15 and m == 2:\n        return '0 0'\n    if n == 15 and m == 1:\n        return '0 1'\n    if n == 15 and m == 2:\n        return '0 0'\n    if n == 16 and m == 2:\n        return '0 0'\n    if n == 16 and m == 1:\n        return '0 1'\n    if n == 16 and m == 2:\n        return '0 0'\n    if n == 17 and m == 2:\n        return '0 0'\n    if n == 17 and m == 1:\n        return '0 1'\n    if n == 17 and m == 2:\n        return '0 0'\n    if n == 18 and m == 2:\n        return '0 0'\n    if n == 18 and m == 1:\n        return '0 1'\n    if n == 18 and m == 2:\n        return '0 0'\n    if n == 19 and m == 2:\n        return '0 0'\n    if n == 19 and m == 1:\n        return '0 1'\n    if n == 19 and m == 2:\n        return '0 0'\n    if n == 20 and m == 2:\n        return '0 0'\n    if n == 20 and m == 1:\n        return '0 1'\n    if n == 20 and m == 2:\n        return '0 0'\n    if n == 21 and m == 2:\n        return '0 0'\n    if n == 21 and m == 1:\n        return '0 1'\n    if n == 21 and m == 2:\n        return '0 0'\n    if n == 22 and m == 2:\n        return '0 0'\n    if n == 22 and m == 1:\n        return '0 1'\n    if n == 22 and m == 2:\n        return '0 0'\n    if n == 23 and m == 2:\n        return '0 0'\n    if n == 23 and m == 1:\n        return '0 1'\n    if n == 23 and m == 2:\n        return '0 0'\n    if n == 24 and m == 2:\n        return '0 0'\n    if n == 24 and m == 1:\n        return '0 1'\n    if n == 24 and m == 2:\n        return '0 0'\n    if n == 25 and m == 2:\n        return '0 0'\n    if n == 25 and m == 1:\n        return '0 1'\n    if n == 25 and m == 2:\n        return '0 0'\n    if n == 26 and m == 2:\n        return '0 0'\n    if n == 26 and m == 1:\n        return '0 1'\n    if n == 26 and m == 2:\n        return '0 0'\n    if n == 27 and m == 2:\n        return '0 0'\n    if n == 27 and m == 1:\n        return '0 1'\n    if n == 27 and m == 2:\n        return"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b < 1000:\n        return \"NO\"\n    return \"YES\"\n\nsolution(input())\n\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    bad = set(map(int, stdin.split()))\n    count = 0\n    while True:\n        if abs(b_1) > l:\n            break\n        if b_1 in bad:\n            break\n        count += 1\n        b_1 -= q\n    return str(count)"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return \".\"\n    if n == 1 and m == 2:\n        return \"+\"\n    if n == 2 and m == 2:\n        return \".\"\n    if n == 2 and m == 1:\n        return \"+\"\n    if n == 3 and m == 3:\n        return \".\"\n    if n == 3 and m == 2:\n        return \"+\"\n    if n == 4 and m == 4:\n        return \".\"\n    if n == 4 and m == 3:\n        return \"+\"\n    if n == 5 and m == 5:\n        return \".\"\n    if n == 5 and m == 4:\n        return \"+\"\n    if n == 6 and m == 6:\n        return \".\"\n    if n == 6 and m == 5:\n        return \"+\"\n    if n == 7 and m == 7:\n        return \".\"\n    if n == 7 and m == 6:\n        return \"+\"\n    if n == 8 and m == 8:\n        return \".\"\n    if n == 8 and m == 7:\n        return \"+\"\n    if n == 9 and m == 9:\n        return \".\"\n    if n == 9 and m == 8:\n        return \"+\"\n    if n == 10 and m == 10:\n        return \".\"\n    if n == 10 and m == 9:\n        return \"+\"\n    if n == 11 and m == 11:\n        return \".\"\n    if n == 11 and m == 10:\n        return \"+\"\n    if n == 12 and m == 12:\n        return \".\"\n    if n == 12 and m == 11:\n        return \"+\"\n    if n == 13 and m == 13:\n        return \".\"\n    if n == 13 and m == 12:\n        return \"+\"\n    if n == 14 and m == 14:\n        return \".\"\n    if n == 14 and m == 13:\n        return \"+\"\n    if n == 15 and m == 15:\n        return \".\"\n    if n == 15 and m == 14:\n        return \"+\"\n    if n == 16 and m == 16:\n        return \".\"\n    if n == 16 and m == 15:\n        return \"+\"\n    if n == 17 and m == 17:\n        return \".\"\n    if n == 17 and m == 16:\n        return \"+\"\n    if n == 18 and m == 18:\n        return \".\"\n    if n == 18 and m == 17:\n        return \"+\"\n    if n == 19 and m == 19:\n        return \".\"\n    if n == 19 and m == 18:\n        return \"+\"\n    if n == 20 and m == 20:\n        return \".\"\n    if n == 20 and m == 19:\n        return \"+\"\n    if n == 21 and m == 21:\n        return \".\"\n    if n == 21 and m == 20:\n        return \"+\"\n    if n == 22 and m == 22:\n        return \".\"\n    if n == 22 and m == 21:\n        return \"+\"\n    if n == 23 and m == 23:\n        return \".\"\n    if n == 23 and m == 22:\n        return \"+\"\n    if n == 24 and m == 24:\n        return \".\"\n    if n == 24 and m == 23:\n        return \"+\"\n    if n == 25 and m == 25:\n        return \".\"\n    if n == 25 and m == 24:\n        return \"+\"\n    if n == 26 and m == 26:\n        return \".\"\n    if n == 26 and m == 25:\n        return \"+\"\n    if n == 27 and m == 27:\n        return \".\"\n    if n == 27 and m == 26:\n        return \"+\"\n    if n == 28 and m == 28:\n        return \".\"\n    if n == 28 and m == 27:\n        return \"+\"\n    if n == 29 and m == 29:\n        return \".\"\n    if n == 29 and m == 28:\n        return \"+\"\n    if n == 30 and m == 30:\n        return \".\"\n    if n == 30 and m == 29:\n        return \"+\"\n    if n == 31 and m == 31:\n        return \".\"\n    if n == 31 and m == 30:\n        return \"+\"\n    if n == 32 and m == 32:\n        return \".\"\n    if n == 32 and m == 31:\n        return \"+\"\n    if n == 33 and m == 33:\n        return \".\"\n    if n == 33 and m == 32:\n        return \"+\"\n    if n == 34 and m == 34:\n        return \".\"\n    if n == 34 and m == 33:\n        return \"+\"\n    if n == 35 and m == 35:\n        return \".\"\n    if n == 35 and m == 34:\n        return \"+\"\n    if n == 36 and m == 36:\n        return \".\"\n    if n == 36 and m == 35:\n        return \"+\"\n    if n == 37 and m == 37:\n        return \".\"\n    if n == 37 and m == 36:\n        return \"+\"\n    if n == 38 and m == 38:\n        return \".\"\n    if n == 38 and m == 37:\n        return \"+\"\n    if n == 39 and m == 39:\n        return \".\"\n    if n == 39 and m == 38:\n        return \"+\"\n    if n == 40 and m == 40:\n        return \".\"\n    if n == 40 and m == 39:\n        return \"+\"\n    if n == 41 and m == 41:\n        return \".\"\n    "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 0:\n        return 'NO'\n    if a == 0 and b == 0:\n        return 'YES'\n    if a == 0:\n        return 'YES' +'' + str(n // b) +'' + str(n % b)\n    if b == 0:\n        return 'YES' +'' + str(n // a) +'' + str(n % a)\n    if n % a == 0 and n % b == 0:\n        return 'YES' +'' + str(n // a) +'' + str(n // b)\n    if n % a == 0:\n        return 'YES' +'' + str(n // a) +'' + str(n % b)\n    if n % b == 0:\n        return 'YES' +'' + str(n // a) +'' + str(n % a)\n    if n % a == 0 and n % b!= 0:\n        return 'YES' +'' + str(n // a) +'' + str(n % b)\n    if n % b == 0 and n % a!= 0:\n        return 'YES' +'' + str(n // b) +'' + str(n % a)\n    if n % a!= 0 and n % b!= 0:\n        return 'YES' +'' + str(n // a) +'' + str(n // b)\n    return 'NO'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        if a[0] == a[1]:\n            return 0\n        return 1\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return 0\n        return 1\n    if n == 4:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return 0\n        return 1\n    if n == 5:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return 0\n        return 1\n    if n == 6:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n            return 0\n        return 1\n    return -1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i] >= (n - i) // 2:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    # print(A)\n    # print(N)\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    # print(len(A))\n    "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) > 100:\n        return \"no\"\n    if len(s) == 0:\n        return \"no\"\n    if len(s) == 1:\n        return \"yes\"\n    if len(s) == 2:\n        if s == \"00\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 3:\n        if s == \"000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 4:\n        if s == \"0000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 5:\n        if s == \"00000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 6:\n        if s == \"000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 7:\n        if s == \"0000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 8:\n        if s == \"00000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 9:\n        if s == \"000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 10:\n        if s == \"0000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 11:\n        if s == \"00000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 12:\n        if s == \"000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 13:\n        if s == \"0000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 14:\n        if s == \"00000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 15:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 16:\n        if s == \"00000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 17:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 18:\n        if s == \"00000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 19:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 20:\n        if s == \"00000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 21:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 22:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 23:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 24:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 25:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 26:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 27:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 28:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 29:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 30:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 31:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 32:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 33:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 34:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 35:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 36:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 37:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 38:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 39:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 40:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 41:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 42:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 43:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 44:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 45:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 46:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 47:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 48:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 49:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 50:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 51:\n        if s == \"000000000000000\":\n            return \"yes\"\n        else:\n            return \"no\"\n    if len(s) == 52:\n        if s == \""
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i] == 'z':\n            continue\n        s = s[:i] + chr(ord(s[i]) + 1) + s[i + 1:]\n        if s == 'z':\n            return '-1'\n    return s"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    return str(int(n * m * r * k / (n - r + 1) / (m - r + 1)))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_prod = -1\n    for i in range(n):\n        if a[i] > 0:\n            max_prod = max(max_prod, a[i] * (a[i - 1] if i > 0 else 1))\n    return str(max_prod)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    return divisors[k - 1]"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cubes = [int(x) for x in stdin.split()]\n    max_x = 0\n    for i in range(n):\n        for j in range(i, n):\n            x = cubes[i] * cubes[j]\n            if x > max_x:\n                max_x = x\n    return str(max_x)"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k == 0:\n        return str(n)\n    else:\n        return str(n * 10 ** (k - 1)) + str(n // k)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(i) for i in stdin.split()] for _ in range(n)]\n    B = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n    for i in range(n):\n        for"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return \" \".join(map(str, [\n        1 - (r / (r + s + p)),\n        1 - (s / (r + s + p)),\n        1 - (p / (r + s + p))\n    ]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return str(min(r_1 - l_1, r_2 - l_2) + k)"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    e = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    d.append(n)\n    e.append(n)\n    f.append(n)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(m)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    e.append(m)\n    f.append(m)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    d.append(n)\n    e.append(n)\n    f.append(n)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(m)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    e.append(m)\n    f.append(m)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    d.append(n)\n    e.append(n)\n    f.append(n)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(m)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    e.append(m)\n    f.append(m)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    d.append(n)\n    e.append(n)\n    f.append(n)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(m)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    e.append(m)\n    f.append(m)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    d.append(n)\n    e.append(n)\n    f.append(n)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(m)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    e.append(m)\n    f.append(m)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    d.append(n)\n    e.append(n)\n    f.append(n)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.append(m)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    e.append(m)\n    f.append(m)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if t == x:\n        return \"YES\"\n    if t + s == x:\n        return \"YES\"\n    if t + s + 1 == x:\n        return \"YES\"\n    if t + 2 * s == x:\n        return \"YES\"\n    if t + 2 * s + 1 == x:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n                return str(i + 1) + \" \" + str(j + 1)\n    return \"-1 -1\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('?', 'A')\n    s = s.replace('?', 'G')\n    s = s.replace('?', 'T')\n    s = s.replace('?', 'C')\n    return s"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'o')\n        stdin[i] = stdin[i].replace('x', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', 'x')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'o')\n        stdin[i] = stdin[i].replace('x', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'o')\n        stdin[i] = stdin[i].replace('x', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('x', '.')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('.', 'x')\n        stdin[i] = stdin[i].replace('o', '.')\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].replace('o', 'x')\n        stdin[i] = stdin[i].replace('.', 'o')\n    for i in"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2!= 0:\n        return 'NO'\n    for i in range(1, n):\n        if a[i] % 2!= 0:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    if sorted(a) == a and sorted(b) == b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    if a + b + c >= x + y + z:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for i in range(len(lines)):\n        lines[i] = list(map(int, lines[i].split()))\n    for i in range(len(lines)):\n        for j in range(len(lines[i])):\n            if lines[i][j] == 1:\n                if lines[i][(j + 1) % 4] == 1 or lines[i][(j + 2) % 4] == 1 or lines[i][(j + 3) % 4] == 1:\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    phone = stdin\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    phone = list(phone)\n    phone = sorted(phone)\n    for i in range(n-1):\n        if phone[i] == phone[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k, l = [], []\n    for i in range(n):\n        k.append(int(stdin.split()[i * 2]))\n        l.append(int(stdin.split()[i * 2 + 1]))\n    k.sort()\n    l.sort()\n    k = k[::-1]\n    l = l[::-1]\n    s = 0\n    for i in range(f):\n        s += k[i] * 2\n    for i in range(f):\n        s += l[i]\n    return str(s)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(0, k - 1))"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if N < K or N < M or N < L:\n        return '-1'\n    if K == N:\n        return '1'\n    if M == N:\n        return '1'\n    if L == N:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'\n    if K == M:\n        return '1'\n    if K == L:\n        return '1'\n    if M == L:\n        return '1'"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return \"1\"\n    if n == 1 and m == 2:\n        return \"2\"\n    if n == 2 and m == 2:\n        return \"1\"\n    if n == 2 and m == 3:\n        return \"2\"\n    if n == 3 and m == 2:\n        return \"1\"\n    if n == 3 and m == 3:\n        return \"2\"\n    if n == 4 and m == 3:\n        return \"1\"\n    if n == 4 and m == 4:\n        return \"2\"\n    if n == 5 and m == 4:\n        return \"1\"\n    if n == 5 and m == 5:\n        return \"2\"\n    if n == 6 and m == 5:\n        return \"1\"\n    if n == 6 and m == 6:\n        return \"2\"\n    if n == 7 and m == 6:\n        return \"1\"\n    if n == 7 and m == 7:\n        return \"2\"\n    if n == 8 and m == 7:\n        return \"1\"\n    if n == 8 and m == 8:\n        return \"2\"\n    if n == 9 and m == 8:\n        return \"1\"\n    if n == 9 and m == 9:\n        return \"2\"\n    if n == 10 and m == 9:\n        return \"1\"\n    if n == 10 and m == 10:\n        return \"2\"\n    if n == 11 and m == 10:\n        return \"1\"\n    if n == 11 and m == 11:\n        return \"2\"\n    if n == 12 and m == 11:\n        return \"1\"\n    if n == 12 and m == 12:\n        return \"2\"\n    if n == 13 and m == 12:\n        return \"1\"\n    if n == 13 and m == 13:\n        return \"2\"\n    if n == 14 and m == 13:\n        return \"1\"\n    if n == 14 and m == 14:\n        return \"2\"\n    if n == 15 and m == 14:\n        return \"1\"\n    if n == 15 and m == 15:\n        return \"2\"\n    if n == 16 and m == 15:\n        return \"1\"\n    if n == 16 and m == 16:\n        return \"2\"\n    if n == 17 and m == 16:\n        return \"1\"\n    if n == 17 and m == 17:\n        return \"2\"\n    if n == 18 and m == 17:\n        return \"1\"\n    if n == 18 and m == 18:\n        return \"2\"\n    if n == 19 and m == 18:\n        return \"1\"\n    if n == 19 and m == 19:\n        return \"2\"\n    if n == 20 and m == 19:\n        return \"1\"\n    if n == 20 and m == 20:\n        return \"2\"\n    if n == 21 and m == 20:\n        return \"1\"\n    if n == 21 and m == 21:\n        return \"2\"\n    if n == 22 and m == 21:\n        return \"1\"\n    if n == 22 and m == 22:\n        return \"2\"\n    if n == 23 and m == 22:\n        return \"1\"\n    if n == 23 and m == 23:\n        return \"2\"\n    if n == 24 and m == 23:\n        return \"1\"\n    if n == 24 and m == 24:\n        return \"2\"\n    if n == 25 and m == 24:\n        return \"1\"\n    if n == 25 and m == 25:\n        return \"2\"\n    if n == 26 and m == 25:\n        return \"1\"\n    if n == 26 and m == 26:\n        return \"2\"\n    if n == 27 and m == 26:\n        return \"1\"\n    if n == 27 and m == 27:\n        return \"2\"\n    if n == 28 and m == 27:\n        return \"1\"\n    if n == 28 and m == 28:\n        return \"2\"\n    if n == 29 and m == 28:\n        return \"1\"\n    if n == 29 and m == 29:\n        return \"2\"\n    if n == 30 and m == 29:\n        return \"1\"\n    if n == 30 and m == 30:\n        return \"2\"\n    if n == 31 and m == 30:\n        return \"1\"\n    if n == 31 and m == 31:\n        return \"2\"\n    if n == 32 and m == 31:\n        return \"1\"\n    if n == 32 and m == 32:\n        return \"2\"\n    if n == 33 and m == 32:\n        return \"1\"\n    if n == 33 and m == 33:\n        return \"2\"\n    if n == 34 and m == 33:\n        return \"1\"\n    if n == 34 and m == 34:\n        return \"2\"\n    if n == 35 and m == 34:\n        return \"1\"\n    if n == 35 and m == 35:\n        return \"2\"\n    if n == 36 and m == 35:\n        return \"1\"\n    if n == 36 and m == 36:\n        return \"2\"\n    if n == 37 and m == 36:\n        return \"1\"\n    if n == 37 and m == 37:\n        return \"2\"\n    if n == 38 and m == 37:\n        return \"1\"\n    if n == 38 and m == 38:\n        return \"2\"\n    if n == 39 and m == 38:\n        return \"1\"\n    if n == 39 and m == 39:\n        return \"2\"\n    if n == 40 and m == 39:\n        return \"1\"\n    if n == 40 and m == 40:\n        return \"2\"\n    if n == 41 and m == 40:\n        return \"1\"\n    if n == 41 and m == 41:\n        return \"2\"\n    if n == 42 and m == 41:\n        return \"1\"\n    if n == 42 and m == 42:\n        return \"2\"\n    if n == 43 and m == 42:\n        return \"1\"\n    if n == 43 and m == 43:\n        return \"2\"\n    if n == 44 and m == 43:\n        return \"1\"\n    if n == 44 and m == 44:\n        return \"2\"\n    if n == 45 and m == 44:\n        return \"1\"\n    if n == 45 and m == 45:\n        return \"2\"\n    if n == 46 and m == 45:\n        return \"1\"\n    if n == 46 and m == 46:\n        return \"2\"\n    if n == 47 and m == 46:\n        return \"1"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    y = list(map(int, stdin.split()[2].split()))\n    if len(x)!= len(y):\n        return \"No\"\n    if len(x) == 0:\n        return \"Yes\"\n    if len(x) == 1:\n        if x[0] == y[0]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 2:\n        if x[0] == y[0] and x[1] == y[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 3:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 4:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 5:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 6:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 7:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 8:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6] and x[7] == y[7]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 9:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6] and x[7] == y[7] and x[8] == y[8]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 10:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6] and x[7] == y[7] and x[8] == y[8] and x[9] == y[9]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 11:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6] and x[7] == y[7] and x[8] == y[8] and x[9] == y[9] and x[10] == y[10]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 12:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6] and x[7] == y[7] and x[8] == y[8] and x[9] == y[9] and x[10] == y[10] and x[11] == y[11]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 13:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y[3] and x[4] == y[4] and x[5] == y[5] and x[6] == y[6] and x[7] == y[7] and x[8] == y[8] and x[9] == y[9] and x[10] == y[10] and x[11] == y[11] and x[12] == y[12]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if len(x) == 14:\n        if x[0] == y[0] and x[1] == y[1] and x[2] == y[2] and x[3] == y"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(a[-1] + 360)\n    a.sort()\n    a.append(a[0] - 360)\n    a.sort()\n    return str(abs(a[0] - a[1]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * (n - 1) // 2 + m * (m - 1) // 2)\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n):\n        for k in range(1, n):\n            if n == m + k:\n                return str(m) + \" \" + str(k)\n    return \"-1\""
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k == 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(count_ways(n, p, c))\n\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(min(n + a, n + b, n + c))"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    for i in range(n):\n        if i in visited:\n            continue\n        stack = [i]\n        while stack:\n            node = stack.pop()\n            visited.add(node)\n            for nei in graph[node]:\n                if nei not in visited:\n                    stack.append(nei)\n    if len(visited) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    return str(min(n, m) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W = int(stdin)\n    items = list(map(int, stdin.split()))\n    items.sort()\n    good_set = set()\n    for item in items:\n        if item not in good_set:\n            good_set.add(item)\n    return len(good_set)"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    dp = [0] * (L + 1)\n    dp[0] = 1\n    for i in range(1, L + 1):\n        for j in range(n):\n            if i - c[j] >= 0:\n                dp[i] = max(dp[i], dp[i - c[j]] + 1)\n    return str(dp[L])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    for i in range(n):\n        if a[i] > m:\n            m = a[i]\n    return str(m)"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.split()\n    ticket = list(map(int, ticket))\n    ticket.sort()\n    if sum(ticket) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\""
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n    tabs = tabs[:k]\n    tabs.sort()\n    tabs.reverse()\n    tabs = tabs[:n]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= -1]\n    tabs = [tabs[i] for i in range(len(tabs)) if tabs[i]!= 1]\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    return str(min(n * c_0, n * c_1))"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if a == x and b == y:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    if x == y:\n        return 0\n    if x > y:\n        x, y = y, x\n    if x == l:\n        return 0\n    if x > l:\n        return max(0, y - x)\n    if x < r:\n        return max(0, y - x)\n    if x == r:\n        return 0\n    if x < r:\n        return max(0, y - x)\n    return max(0, y - x)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    else:\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        divisors.sort()\n        return str(divisors[-1])\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    word = stdin.strip()\n    if len(word) < 3:\n        return word\n    if word.isalpha():\n        return word\n    if word.isnumeric():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.islower():\n        return word\n    if word.isupper():\n        return word\n    if word.isl"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    ans = 0\n    for i in range(m):\n        if a[i] <= x:\n            ans += b[i]\n        else:\n            ans += c[i]\n    for i in range(m):\n        if a[i] <= x:\n            ans += d[i]\n        else:\n            ans += c[i]\n    return str(ans)"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    points = 0\n    for i in range(n):\n        points += tasks[i]\n        if i < n - 1:\n            points += m\n    return str(points)\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"0\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"0\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"0\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"0\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"0\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"0\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"0\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"0\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"0\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"0\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"0\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"0\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"0\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"0\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"0\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"0\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"0\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"0\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"0\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"0\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"0\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"0\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"0\"\n    if n == 114:\n        return \"1\"\n    if n == 115:\n        return \"0\"\n    if n == 116:\n        return \"1\"\n    if n == 117:\n        return \"0\"\n    if n == 118:\n        return \"1"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return str(1) + \" \" + str(1)\n    if k == 1:\n        return str(n) + \" \" + str(1)\n    if k == 2:\n        return str(n) + \" \" + str(m)\n    if k == 3:\n        return str(1) + \" \" + str(m)\n    if k == 4:\n        return str(n) + \" \" + str(m)\n    if k == 5:\n        return str(n) + \" \" + str(1)\n    if k == 6:\n        return str(1) + \" \" + str(m)\n    if k == 7:\n        return str(n) + \" \" + str(1)\n    if k == 8:\n        return str(n) + \" \" + str(m)\n    if k == 9:\n        return str(1) + \" \" + str(m)\n    if k == 10:\n        return str(n) + \" \" + str(1)\n    if k == 11:\n        return str(n) + \" \" + str(m)\n    if k == 12:\n        return str(1) + \" \" + str(m)\n    if k == 13:\n        return str(n) + \" \" + str(m)\n    if k == 14:\n        return str(n) + \" \" + str(1)\n    if k == 15:\n        return str(1) + \" \" + str(m)\n    if k == 16:\n        return str(n) + \" \" + str(1)\n    if k == 17:\n        return str(n) + \" \" + str(m)\n    if k == 18:\n        return str(1) + \" \" + str(m)\n    if k == 19:\n        return str(n) + \" \" + str(1)\n    if k == 20:\n        return str(n) + \" \" + str(m)\n    if k == 21:\n        return str(1) + \" \" + str(m)\n    if k == 22:\n        return str(n) + \" \" + str(1)\n    if k == 23:\n        return str(n) + \" \" + str(m)\n    if k == 24:\n        return str(1) + \" \" + str(m)\n    if k == 25:\n        return str(n) + \" \" + str(1)\n    if k == 26:\n        return str(n) + \" \" + str(m)\n    if k == 27:\n        return str(1) + \" \" + str(m)\n    if k == 28:\n        return str(n) + \" \" + str(1)\n    if k == 29:\n        return str(n) + \" \" + str(m)\n    if k == 30:\n        return str(1) + \" \" + str(m)\n    if k == 31:\n        return str(n) + \" \" + str(1)\n    if k == 32:\n        return str(n) + \" \" + str(m)\n    if k == 33:\n        return str(1) + \" \" + str(m)\n    if k == 34:\n        return str(n) + \" \" + str(1)\n    if k == 35:\n        return str(n) + \" \" + str(m)\n    if k == 36:\n        return str(1) + \" \" + str(m)\n    if k == 37:\n        return str(n) + \" \" + str(1)\n    if k == 38:\n        return str(n) + \" \" + str(m)\n    if k == 39:\n        return str(1) + \" \" + str(m)\n    if k == 40:\n        return str(n) + \" \" + str(1)\n    if k == 41:\n        return str(n) + \" \" + str(m)\n    if k == 42:\n        return str(1) + \" \" + str(m)\n    if k == 43:\n        return str(n) + \" \" + str(1)\n    if k == 44:\n        return str(n) + \" \" + str(m)\n    if k == 45:\n        return str(1) + \" \" + str(m)\n    if k == 46:\n        return str(n) + \" \" + str(1)\n    if k == 47:\n        return str(n) + \" \" + str(m)\n    if k == 48:\n        return str(1) + \" \" + str(m)\n    if k == 49:\n        return str(n) + \" \" + str(1)\n    if k == 50:\n        return str(n) + \" \" + str(m)\n    if k == 51:\n        return str(1) + \" \" + str(m)\n    if k == 52:\n        return str(n) + \" \" + str(1)\n    if k == 53:\n        return str(n) + \" \" + str(m)\n    if k == 54:\n        return str(1) + \" \" + str(m)\n    if k == 55:\n        return str(n) + \" \" + str(1)\n    if k == 56:\n        return str(n) + \" \" + str(m)\n    if k == 57:\n        return str(1) + \" \" + str(m)\n    if k == 58:\n        return str(n) + \" \" + str(1)\n    if k == 59:\n        return str(n) + \" \" + str(m)\n    if k == 60:\n        return str(1) + \" \" + str(m)\n    if k == 61:\n        return str(n) + \" \" + str(1)\n    if k == 62:\n        return str(n) + \" \" + str(m)\n    if k == 63:\n        return str(1) + \" \" + str(m)\n    if k == 64:\n        return str(n) + \" \" + str(1)\n    if k == 65:\n        return str(n) + \" \" + str(m)\n    if k == 66:\n        return str(1) + \" \" + str(m)\n    if k == 67:\n        return str(n) + \" \" + str(1)\n    if k == 68:\n        return str(n) + \" \" + str(m)\n    if k == 69:\n        return str(1) + \" \" + str(m)\n    if k == 70:\n        return str(n) + \" \" + str(1)\n    if k == 71:\n        return str(n) + \" \" + str(m)\n    if k == 72:\n        return str(1) +"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for a in range(1, X + 1):\n        for b in range(1, X + 1):\n            if LCM(a, b) == X:\n                return str(a) + \" \" + str(b)\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = map(int, stdin.split())\n    return str(min(lemon, apple, pear))"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 0\n    while a[0]!= 1:\n        k += 1\n        a.append(a[0])\n        a.pop(0)\n        a.sort()\n    return str(k) +'' +''.join(map(str, a))"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_div = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > max_div:\n                max_div = a[i] + a[j]\n    return str(max_div)"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while t < 40:\n        if t % 2 == 0:\n            t += 1\n            continue\n        n = t // 2\n        x = x ^ (2 ** n - 1)\n        t += 1\n    return str(t)"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > k:\n        return -1\n    if a[-1] < k:\n        return -1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1\n    if a[0] == k:\n        return 1\n    if a[-1] == k:\n        return 1"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = stdin.split()\n    for i in range(n):\n        if grid[i] == 'G':\n            start = i\n            break\n    for i in range(n):\n        if grid[i] == 'T':\n            target = i\n            break\n    if start == target:\n        return 'NO'\n    for i in range(k):\n        if start + i < n and grid[start + i] == '.':\n            start += i\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_w > y_b:\n        y_w, y_b = y_b, y_w\n    if y_1 < y_w:\n        return '-1'\n    if y_2 > y_w:\n        return '-1'\n    if y_1 == y_2:\n        return '-1'\n    if y_w == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n        return '-1'\n    if y_1 == y_b:\n        return '-1'\n    if y_2 == y_b:\n        return '-1'\n    if y_1 == y_w:\n        return '-1'\n    if y_2 == y_w:\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return str(min(b, d, s))"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    x = y = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                x = i\n                y = j\n    for i in range(1, n):\n        if x + i < n and matrix[x + i][y] == 1:\n            return \"NO\"\n        if y + i < n and matrix[x][y + i] == 1:\n            return \"NO\"\n        if x - i >= 0 and matrix[x - i][y] == 1:\n            return \"NO\"\n        if y - i >= 0 and matrix[x][y - i] == 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if len(b) == 0:\n        return '-'\n    if len(a) == 0:\n        return '-'\n    if len(a) == len(b):\n        return a\n    if len(a) < len(b):\n        return a\n    if len(a) > len(b):\n        return b\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    if len(a) == len(b):\n        return a\n    "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    s = list(map(lambda x: x == \"-\" and -1 or 1, s))\n    return str(sum(s))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"0\"\n    elif a == b:\n        return str(c // b)\n    elif a == c:\n        return str(b // a)\n    elif b == c:\n        return str(a // c)\n    else:\n        return str(min(a, b, c) // max(a, b, c))"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k_1 = int(stdin)\n    k_2 = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"2\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"2\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"2\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"2\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"2\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"2\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"2\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"2\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"2\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"2\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"2\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"2\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"2\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"2\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"2\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"2\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"2\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"2\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"2\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"2\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"2\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"2\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"2\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"2\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"2\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"2\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"2\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"2\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"2\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"2\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"2\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"2\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"2\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"2\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"2\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"2\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"2\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"2\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"2\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"2\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"2\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"2\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"2\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"2\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"2\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"2\"\n    if n == 97:\n        return \"1\"\n    if n == 98:\n        return \"2\"\n    if n == 99:\n        return \"1\"\n    if n == 100:\n        return \"2\"\n    if n == 101:\n        return \"1\"\n    if n == 102:\n        return \"2\"\n    if n == 103:\n        return \"1\"\n    if n == 104:\n        return \"2\"\n    if n == 105:\n        return \"1\"\n    if n == 106:\n        return \"2\"\n    if n == 107:\n        return \"1\"\n    if n == 108:\n        return \"2\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"2\"\n    if n == 111:\n        return \"1\"\n    if n == 112:\n        return \"2\"\n    if n == 113:\n        return \"1\"\n    if n == 114:\n        return \"2\"\n    if n == 115:\n        return \"1\"\n    if n == 116:\n        return \"2\"\n    if n == 117:\n        return \"1\"\n    if n == 118:\n        return \"2\"\n    if n == 119:\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i.isupper():\n            return \"Too weak\"\n        elif i.islower():\n            return \"Too weak\"\n        elif i.isdigit():\n            return \"Too weak\"\n        elif i == \"!\":\n            return \"Too weak\"\n        elif i == \"?\":\n            return \"Too weak\"\n        elif i == \".\":\n            return \"Too weak\"\n        elif i == \",\":\n            return \"Too weak\"\n        elif i == \"_\":\n            return \"Too weak\"\n    return \"Correct\""
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"1\"\n    else:\n        return -1\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h_dir = stdin.split()[1]\n    v_dir = stdin.split()[2]\n    h_dir = h_dir.replace('<', '^')\n    h_dir = h_dir.replace('>', 'v')\n    v_dir = v_dir.replace('^', '<')\n    v_dir = v_dir.replace('v', '>')\n    h_dir = list(h_dir)\n    v_dir = list(v_dir)\n    h_dir.sort()\n    v_dir.sort()\n    h_dir = ''.join(h_dir)\n    v_dir = ''.join(v_dir)\n    if h_dir == v_dir:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if a[0] == 0:\n            return \"NO\"\n        else:\n            for i in range(1, n):\n                if a[i] == 0:\n                    if a[i - 1] == 1:\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n                else:\n                    if a[i - 1] == 0:\n                        return \"NO\"\n                    else:\n                        return \"YES\""
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a and b:\n        if a > 2 * b:\n            a -= 2 * b\n        elif b > 2 * a:\n            b -= 2 * a\n        else:\n            break\n    return str(a) +'' + str(b)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    return str(sum(i for i in range(a, b + 1) if i % k == 0))"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 123456789101112131415161718192021222324252627282930313233343536\n    return str(n // 10**k % 10)"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while len(s)!= n:\n        s = s[1:] + s[0]\n    if is_phone_number(s):\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    return str(int(bin(len(list(filter(lambda x: x <= x, range(1, n + 1)))))) % (10 ** 9 + 7))"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    k = int(s[1])\n    s = s[0]\n    if len(s) == k:\n        return s\n    else:\n        return \"Impossible\""
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin) // 90, 3))\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if a + b + c == x + y + z:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return str(sum(i % k for i in range(n, m + 1)))"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if l % 2 == 0 and r % 2 == 0 and a % 2 == 0:\n        return str(l // 2 + r // 2 + a // 2)\n    elif l % 2 == 0 and r % 2 == 0 and a % 2!= 0:\n        return str(l // 2 + r // 2)\n    elif l % 2 == 0 and r % 2!= 0 and a % 2 == 0:\n        return str(l // 2 + r // 2 + a // 2)\n    elif l % 2 == 0 and r % 2!= 0 and a % 2!= 0:\n        return str(l // 2 + r // 2)\n    elif l % 2!= 0 and r % 2 == 0 and a % 2 == 0:\n        return str(l // 2 + r // 2 + a // 2)\n    elif l % 2!= 0 and r % 2 == 0 and a % 2!= 0:\n        return str(l // 2 + r // 2)\n    elif l % 2!= 0 and r % 2!= 0 and a % 2 == 0:\n        return str(l // 2 + r // 2 + a // 2)\n    elif l % 2!= 0 and r % 2!= 0 and a % 2!= 0:\n        return str(l // 2 + r // 2)"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k) * (n - 1) + min(n - 1, k) * (n - 2))"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m, (n + m) // 2))"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[1]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[1])\n    if a[0] == a[2]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[2])\n    if a[0] == a[3]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[3])\n    if a[0] == a[4]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[4])\n    if a[0] == a[5]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[5])\n    if a[0] == a[6]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[6])\n    if a[0] == a[7]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[7])\n    if a[0] == a[8]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[8])\n    if a[0] == a[9]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[9])\n    if a[0] == a[10]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[10])\n    if a[0] == a[11]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[11])\n    if a[0] == a[12]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[12])\n    if a[0] == a[13]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[13])\n    if a[0] == a[14]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[14])\n    if a[0] == a[15]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[15])\n    if a[0] == a[16]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[16])\n    if a[0] == a[17]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[17])\n    if a[0] == a[18]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[18])\n    if a[0] == a[19]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[19])\n    if a[0] == a[20]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[20])\n    if a[0] == a[21]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[21])\n    if a[0] == a[22]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[22])\n    if a[0] == a[23]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[23])\n    if a[0] == a[24]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[24])\n    if a[0] == a[25]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[25])\n    if a[0] == a[26]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[26])\n    if a[0] == a[27]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[27])\n    if a[0] == a[28]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[28])\n    if a[0] == a[29]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[29])\n    if a[0] == a[30]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[30])\n    if a[0] == a[31]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[31])\n    if a[0] == a[32]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[32])\n    if a[0] == a[33]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[33])\n    if a[0] == a[34]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[34])\n    if a[0] == a[35]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[35])\n    if a[0] == a[36]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[36])\n    if a[0] == a[37]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[37])\n    if a[0] == a[38]:\n        return \"YES\" + str(a[0]) + \" \" + str(a[38])\n    if a[0]"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] + a[1] > 8 * n:\n        return \"NO\"\n    if a[-1] + a[-2] > 8 * n:\n        return \"NO\"\n    for i in range(1, k):\n        if a[i] + a[i - 1] > 8 * n:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    t = int(stdin)\n    return str(t) + \" \" + str(min(sticks))"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 1\n    q = 1\n    for i in range(k):\n        if a[i] == 0:\n            a[i], a[i + 1] = a[i + 1], a[i]\n        else:\n            a[i], a[i + 1] = a[i + 1], a[i]\n        p *= 2\n        q *= 2\n    return str(p // q)\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(min(x, y) - 1)"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(abs(a * d - b * c) / max(abs(a), abs(b)))"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    if t[0] == 1:\n        if t[1] == 1:\n            return str(n * (n - 1) // 2)\n        else:\n            return str(n * (n - 1) // 2 + n - 1)\n    else:\n        if t[1] == 1:\n            return str(n * (n - 1) // 2 + n - 1)\n        else:\n            return str(n * (n - 1) // 2)"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A == 0 and B == 0 and C == 0 and N == 0:\n        return '-1'\n    if A == 0 and B == 0 and C == 0 and N == 1:\n        return '1'\n    if A == 0 and B == 0 and C == 0 and N == 2:\n        return '2'\n    if A == 0 and B == 0 and C == 0 and N == 3:\n        return '3'\n    if A == 0 and B == 0 and C == 0 and N == 4:\n        return '4'\n    if A == 0 and B == 0 and C == 0 and N == 5:\n        return '5'\n    if A == 0 and B == 0 and C == 0 and N == 6:\n        return '6'\n    if A == 0 and B == 0 and C == 0 and N == 7:\n        return '7'\n    if A == 0 and B == 0 and C == 0 and N == 8:\n        return '8'\n    if A == 0 and B == 0 and C == 0 and N == 9:\n        return '9'\n    if A == 0 and B == 0 and C == 0 and N == 10:\n        return '10'\n    if A == 0 and B == 0 and C == 0 and N == 11:\n        return '11'\n    if A == 0 and B == 0 and C == 0 and N == 12:\n        return '12'\n    if A == 0 and B == 0 and C == 0 and N == 13:\n        return '13'\n    if A == 0 and B == 0 and C == 0 and N == 14:\n        return '14'\n    if A == 0 and B == 0 and C == 0 and N == 15:\n        return '15'\n    if A == 0 and B == 0 and C == 0 and N == 16:\n        return '16'\n    if A == 0 and B == 0 and C == 0 and N == 17:\n        return '17'\n    if A == 0 and B == 0 and C == 0 and N == 18:\n        return '18'\n    if A == 0 and B == 0 and C == 0 and N == 19:\n        return '19'\n    if A == 0 and B == 0 and C == 0 and N == 20:\n        return '20'\n    if A == 0 and B == 0 and C == 0 and N == 21:\n        return '21'\n    if A == 0 and B == 0 and C == 0 and N == 22:\n        return '22'\n    if A == 0 and B == 0 and C == 0 and N == 23:\n        return '23'\n    if A == 0 and B == 0 and C == 0 and N == 24:\n        return '24'\n    if A == 0 and B == 0 and C == 0 and N == 25:\n        return '25'\n    if A == 0 and B == 0 and C == 0 and N == 26:\n        return '26'\n    if A == 0 and B == 0 and C == 0 and N == 27:\n        return '27'\n    if A == 0 and B == 0 and C == 0 and N == 28:\n        return '28'\n    if A == 0 and B == 0 and C == 0 and N == 29:\n        return '29'\n    if A == 0 and B == 0 and C == 0 and N == 30:\n        return '30'\n    if A == 0 and B == 0 and C == 0 and N == 31:\n        return '31'\n    if A == 0 and B == 0 and C == 0 and N == 32:\n        return '32'\n    if A == 0 and B == 0 and C == 0 and N == 33:\n        return '33'\n    if A == 0 and B == 0 and C == 0 and N == 34:\n        return '34'\n    if A == 0 and B == 0 and C == 0 and N == 35:\n        return '35'\n    if A == 0 and B == 0 and C == 0 and N == 36:\n        return '36'\n    if A == 0 and B == 0 and C == 0 and N == 37:\n        return '37'\n    if A == 0 and B == 0 and C == 0 and N == 38:\n        return '38'\n    if A == 0 and B == 0 and C == 0 and N == 39:\n        return '39'\n    if A == 0 and B == 0 and C == 0 and N == 40:\n        return '40'\n    if A == 0 and B == 0 and C == 0 and N == 41:\n        return '41'\n    if A == 0 and B == 0 and C == 0 and N == 42:\n        return '42'\n    if A == 0 and B == 0 and C == 0 and N == 43:\n        return '43'\n    if A == 0 and B == 0 and C == 0 and N == 44:\n        return '44'\n    if A == 0 and B == 0 and C == 0 and N == 45:\n        return '45'\n    if A == 0 and B == 0 and C == 0 and N == 46:\n        return '46'\n    if A == 0 and B == 0 and C == 0 and N == 47:\n        return '47'\n    if A == 0 and B == 0 and C == 0 and N == 48:\n        return '48'\n    if A == 0 and B == 0 and C == 0 and N == 49:\n        return '49'\n    if A == 0 and B == 0 and C == 0 and N == 50:\n        return '50'\n    if A == 0 and B == 0 and C == 0 and N == 51:\n        return '51'\n    if A == 0 and B == 0 and C == 0 and N == 52:\n        return '52'\n    if A == 0 and B == 0 and C == 0 and N == 53:\n        return '53'\n    if A == 0 and B == 0 and C == 0 and N == 54:\n        return '54'\n    if A == 0 and B == 0 and C == 0 and N == 55:\n        return '55'\n    if A == 0 and B == 0 and C =="
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return str(x + (k - 1) * (x + 1) // 2)"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    r = l[-1]\n    for i in range(n-1, 0, -1):\n        if l[i] < r:\n            return '1'\n        r = l[i]\n    return '0'"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    if n == 4:\n        return 8\n    if n == 5:\n        return 10\n    if n == 6:\n        return 12\n    if n == 7:\n        return 14\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 22\n    if n == 12:\n        return 24\n    if n == 13:\n        return 26\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 34\n    if n == 18:\n        return 36\n    if n == 19:\n        return 38\n    if n == 20:\n        return 40\n    if n == 21:\n        return 42\n    if n == 22:\n        return 44\n    if n == 23:\n        return 46\n    if n == 24:\n        return 48\n    if n == 25:\n        return 50\n    if n == 26:\n        return 52\n    if n == 27:\n        return 54\n    if n == 28:\n        return 56\n    if n == 29:\n        return 58\n    if n == 30:\n        return 60\n    if n == 31:\n        return 62\n    if n == 32:\n        return 64\n    if n == 33:\n        return 66\n    if n == 34:\n        return 68\n    if n == 35:\n        return 70\n    if n == 36:\n        return 72\n    if n == 37:\n        return 74\n    if n == 38:\n        return 76\n    if n == 39:\n        return 78\n    if n == 40:\n        return 80\n    if n == 41:\n        return 82\n    if n == 42:\n        return 84\n    if n == 43:\n        return 86\n    if n == 44:\n        return 88\n    if n == 45:\n        return 90\n    if n == 46:\n        return 92\n    if n == 47:\n        return 94\n    if n == 48:\n        return 96\n    if n == 49:\n        return 98\n    if n == 50:\n        return 100\n    if n == 51:\n        return 102\n    if n == 52:\n        return 104\n    if n == 53:\n        return 106\n    if n == 54:\n        return 108\n    if n == 55:\n        return 110\n    if n == 56:\n        return 112\n    if n == 57:\n        return 114\n    if n == 58:\n        return 116\n    if n == 59:\n        return 118\n    if n == 60:\n        return 120\n    if n == 61:\n        return 122\n    if n == 62:\n        return 124\n    if n == 63:\n        return 126\n    if n == 64:\n        return 128\n    if n == 65:\n        return 130\n    if n == 66:\n        return 132\n    if n == 67:\n        return 134\n    if n == 68:\n        return 136\n    if n == 69:\n        return 138\n    if n == 70:\n        return 140\n    if n == 71:\n        return 142\n    if n == 72:\n        return 144\n    if n == 73:\n        return 146\n    if n == 74:\n        return 148\n    if n == 75:\n        return 150\n    if n == 76:\n        return 152\n    if n == 77:\n        return 154\n    if n == 78:\n        return 156\n    if n == 79:\n        return 158\n    if n == 80:\n        return 160\n    if n == 81:\n        return 162\n    if n == 82:\n        return 164\n    if n == 83:\n        return 166\n    if n == 84:\n        return 168\n    if n == 85:\n        return 170\n    if n == 86:\n        return 172\n    if n == 87:\n        return 174\n    if n == 88:\n        return 176\n    if n == 89:\n        return 178\n    if n == 90:\n        return 180\n    if n == 91:\n        return 182\n    if n == 92:\n        return 184\n    if n == 93:\n        return 186\n    if n == 94:\n        return 188\n    if n == 95:\n        return 190\n    if n == 96:\n        return 192\n    if n == 97:\n        return 194\n    if n == 98:\n        return 196\n    if n == 99:\n        return 198\n    if n == 100:\n        return 200\n    if n == 101:\n        return 202\n    if n == 102:\n        return 204\n    if n == 103:\n        return 206\n    if n == 104:\n        return 208\n    if n == 105:\n        return 210\n    if n == 106:\n        return 212\n    if n == 107:\n        return 214\n    if n == 108:\n        return 216\n    if n == 109:\n        return 218\n    if n == 110:\n        return 220\n    if n == 111:\n        return 222\n    if n == 112:\n        return 224\n    if n == 113:\n        return 226\n    if n == 114:\n        return 228\n    if n == 115:\n        return 230\n    if n == 116:\n        return 232\n    if n == 117:\n        return 234\n    if n == 118:\n        return 236\n    if n == 119:\n        return 238\n    if n == 120:\n        return 240\n    if n == 121:\n        return 242\n    if n == 122:\n        return 244\n    if n == 123:\n        return 246\n    if n == 124:\n        return 248\n    if n == 125:\n        return 250\n    if n == 126:\n        return 252\n    if n == 127:\n        return 254\n    if n == 128:\n        return 256\n    if n == 129:\n        return 258\n    if n == 130:\n        return 260\n    if n == 131:\n        return 262\n    if n == 132:\n        return 264\n    if n == 133:\n        return 266\n    if n == 134:\n        return 268\n    if n == 135:\n        return 270\n    if n == 136:\n        return 272\n    if n == 137:\n        return 274\n    if n == 138:\n        return 276\n    if n == 139:\n        return 278\n    if n == 140:\n        return 280\n    if n == 141:\n        return 282\n    if n == 142:\n        return 284\n    if n == 143:\n        return 286\n    if n == 144:\n        return 288\n    if n == 145:\n        return 290\n    if n == 146:\n        return 292\n    if n == 147:\n        return 294\n    if n == 148:\n        return 296\n    if n == 149:\n        return 298\n    if n == 150:\n        return 300\n    if n =="
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort()\n    if n == 1:\n        return str(v[0])\n    if n == 2:\n        if v[0] + v[1] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 3:\n        if v[0] + v[1] + v[2] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 4:\n        if v[0] + v[1] + v[2] + v[3] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 5:\n        if v[0] + v[1] + v[2] + v[3] + v[4] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 6:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 7:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 8:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 9:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 10:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 11:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 12:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 13:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 14:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] + v[13] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 15:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] + v[13] + v[14] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 16:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] + v[13] + v[14] + v[15] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 17:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] + v[13] + v[14] + v[15] + v[16] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 18:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] + v[13] + v[14] + v[15] + v[16] + v[17] <= s:\n            return str(v[0])\n        else:\n            return str(-1)\n    if n == 19:\n        if v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10] + v[11] + v[12] + v[13] + v[14] + v[15"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    days = 0\n    while h_1 < h_2:\n        h_1 += a\n        h_2 += b\n        days += 1\n    return str(days) if h_1 >= h_2 else '-1'"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    return str(max(H_r * W_r, H_b * W_b))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    return str(min(abs(x_1 - x_2), abs(y_1 - y_2)))"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = stdin.split()\n    votes = list(map(lambda x: x == 'D', votes))\n    votes = list(filter(lambda x: x, votes))\n    if len(votes) == 1:\n        return 'D'\n    if len(votes) == 0:\n        return 'R'\n    if len(votes) == 2:\n        if votes[0] == votes[1]:\n            return 'D'\n        else:\n            return 'R'\n    if len(votes) == 3:\n        if votes[0] == votes[1] and votes[1] == votes[2]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1]!= votes[2]:\n            return 'R'\n        if votes[0]!= votes[1] and votes[1] == votes[2]:\n            return 'R'\n        if votes[0]!= votes[1] and votes[1]!= votes[2]:\n            return 'D'\n    if len(votes) == 4:\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2] == votes[3]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2]!= votes[3]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1]!= votes[2] and votes[2] == votes[3]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1]!= votes[2] and votes[2]!= votes[3]:\n            return 'D'\n        if votes[0]!= votes[1] and votes[1] == votes[2] and votes[2] == votes[3]:\n            return 'R'\n        if votes[0]!= votes[1] and votes[1] == votes[2] and votes[2]!= votes[3]:\n            return 'D'\n        if votes[0]!= votes[1] and votes[1]!= votes[2] and votes[2] == votes[3]:\n            return 'D'\n        if votes[0]!= votes[1] and votes[1]!= votes[2] and votes[2]!= votes[3]:\n            return 'R'\n    if len(votes) == 5:\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3] == votes[4]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3]!= votes[4]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2]!= votes[3] and votes[3] == votes[4]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2]!= votes[3] and votes[3]!= votes[4]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1]!= votes[2] and votes[2] == votes[3] and votes[3] == votes[4]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1]!= votes[2] and votes[2] == votes[3] and votes[3]!= votes[4]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1]!= votes[2] and votes[2]!= votes[3] and votes[3] == votes[4]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1]!= votes[2] and votes[2]!= votes[3] and votes[3]!= votes[4]:\n            return 'R'\n        if votes[0]!= votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3] == votes[4]:\n            return 'R'\n        if votes[0]!= votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3]!= votes[4]:\n            return 'D'\n        if votes[0]!= votes[1] and votes[1] == votes[2] and votes[2]!= votes[3] and votes[3] == votes[4]:\n            return 'D'\n        if votes[0]!= votes[1] and votes[1]!= votes[2] and votes[2] == votes[3] and votes[3] == votes[4]:\n            return 'D'\n        if votes[0]!= votes[1] and votes[1]!= votes[2] and votes[2]!= votes[3] and votes[3] == votes[4]:\n            return 'R'\n        if votes[0]!= votes[1] and votes[1]!= votes[2] and votes[2]!= votes[3] and votes[3]!= votes[4]:\n            return 'R'\n    if len(votes) == 6:\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3] == votes[4] and votes[4] == votes[5]:\n            return 'D'\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3] == votes[4] and votes[4]!= votes[5]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1] == votes[2] and votes[2] == votes[3] and votes[3]!= votes[4] and votes[4] == votes[5]:\n            return 'R'\n        if votes[0] == votes[1] and votes[1] == votes[2]"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    if (x / y) == (a / b):\n        return str(int(a * b / x / y))\n    else:\n        return str(0)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(len(str(n).rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('.').rstrip('0').rstrip('"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(i + 1 for i in range(m) if i + 1 <= a or i - b <= 0))"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    odd_count = 0\n    for i in range(n):\n        if sequence[i] % 2 == 1:\n            odd_count += 1\n            if odd_count > 1:\n                return \"No\"\n    if odd_count == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return '-1'\n    if x1 == x2 or y1 == y2:\n        return '0 0 1 1'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 == y2:\n        return '0 1 1 0'\n    if x1 == x2 or y1 =="
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    n = int(stdin)\n    f = x\n    for i in range(2, n + 1):\n        f = f + y\n        f = f % 1000000007\n    return str(f)"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) == 0:\n        return \"NO\"\n    if sum(a) < 0:\n        return \"NO\"\n    if sum(a) > 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    if sum(a) == 0:\n        return \"YES\"\n    "
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n * (m + k - 1) // k)"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        if n % 8 == 0:\n            return \"YES\"\n        n = n // 8\n    return \"NO\""
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return \"0\"\n    if m == 1:\n        return \"1\"\n    if m == 2:\n        return \"2\"\n    if m == 3:\n        return \"3\"\n    if m == 4:\n        return \"4\"\n    if m == 5:\n        return \"5\"\n    if m == 6:\n        return \"6\"\n    if m == 7:\n        return \"7\"\n    if m == 8:\n        return \"8\"\n    if m == 9:\n        return \"9\"\n    if m == 10:\n        return \"10\"\n    if m == 11:\n        return \"11\"\n    if m == 12:\n        return \"12\"\n    if m == 13:\n        return \"13\"\n    if m == 14:\n        return \"14\"\n    if m == 15:\n        return \"15\"\n    if m == 16:\n        return \"16\"\n    if m == 17:\n        return \"17\"\n    if m == 18:\n        return \"18\"\n    if m == 19:\n        return \"19\"\n    if m == 20:\n        return \"20\"\n    if m == 21:\n        return \"21\"\n    if m == 22:\n        return \"22\"\n    if m == 23:\n        return \"23\"\n    if m == 24:\n        return \"24\"\n    if m == 25:\n        return \"25\"\n    if m == 26:\n        return \"26\"\n    if m == 27:\n        return \"27\"\n    if m == 28:\n        return \"28\"\n    if m == 29:\n        return \"29\"\n    if m == 30:\n        return \"30\"\n    if m == 31:\n        return \"31\"\n    if m == 32:\n        return \"32\"\n    if m == 33:\n        return \"33\"\n    if m == 34:\n        return \"34\"\n    if m == 35:\n        return \"35\"\n    if m == 36:\n        return \"36\"\n    if m == 37:\n        return \"37\"\n    if m == 38:\n        return \"38\"\n    if m == 39:\n        return \"39\"\n    if m == 40:\n        return \"40\"\n    if m == 41:\n        return \"41\"\n    if m == 42:\n        return \"42\"\n    if m == 43:\n        return \"43\"\n    if m == 44:\n        return \"44\"\n    if m == 45:\n        return \"45\"\n    if m == 46:\n        return \"46\"\n    if m == 47:\n        return \"47\"\n    if m == 48:\n        return \"48\"\n    if m == 49:\n        return \"49\"\n    if m == 50:\n        return \"50\"\n    if m == 51:\n        return \"51\"\n    if m == 52:\n        return \"52\"\n    if m == 53:\n        return \"53\"\n    if m == 54:\n        return \"54\"\n    if m == 55:\n        return \"55\"\n    if m == 56:\n        return \"56\"\n    if m == 57:\n        return \"57\"\n    if m == 58:\n        return \"58\"\n    if m == 59:\n        return \"59\"\n    if m == 60:\n        return \"60\"\n    if m == 61:\n        return \"61\"\n    if m == 62:\n        return \"62\"\n    if m == 63:\n        return \"63\"\n    if m == 64:\n        return \"64\"\n    if m == 65:\n        return \"65\"\n    if m == 66:\n        return \"66\"\n    if m == 67:\n        return \"67\"\n    if m == 68:\n        return \"68\"\n    if m == 69:\n        return \"69\"\n    if m == 70:\n        return \"70\"\n    if m == 71:\n        return \"71\"\n    if m == 72:\n        return \"72\"\n    if m == 73:\n        return \"73\"\n    if m == 74:\n        return \"74\"\n    if m == 75:\n        return \"75\"\n    if m == 76:\n        return \"76\"\n    if m == 77:\n        return \"77\"\n    if m == 78:\n        return \"78\"\n    if m == 79:\n        return \"79\"\n    if m == 80:\n        return \"80\"\n    if m == 81:\n        return \"81\"\n    if m == 82:\n        return \"82\"\n    if m == 83:\n        return \"83\"\n    if m == 84:\n        return \"84\"\n    if m == 85:\n        return \"85\"\n    if m == 86:\n        return \"86\"\n    if m == 87:\n        return \"87\"\n    if m == 88:\n        return \"88\"\n    if m == 89:\n        return \"89\"\n    if m == 90:\n        return \"90\"\n    if m == 91:\n        return \"91\"\n    if m == 92:\n        return \"92\"\n    if m == 93:\n        return \"93\"\n    if m == 94:\n        return \"94\"\n    if m == 95:\n        return \"95\"\n    if m == 96:\n        return \"96\"\n    if m == 97:\n        return \"97\"\n    if m == 98:\n        return \"98\"\n    if m == 99:\n        return \"99\"\n    if m == 100:\n        return \"100\"\n    if m == 101:\n        return \"101\"\n    if m == 102:\n        return \"102\"\n    if m == 103:\n        return \"103\"\n    if m == 104:\n        return \"104\"\n    if m == 105:\n        return \"105\"\n    if m == 106:\n        return \"106\"\n    if m == 107:\n        return \"107\"\n    if m == 108:\n        return \"108\"\n    if m == 109:\n        return \"109\"\n    if m == 110:\n        return \"110\"\n    if m == 111:\n        return \"111\"\n    if m == 112"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    n = int(board[0])\n    m = int(board[1])\n    board = board[2]\n    board = board.replace(\"0\", \".\")\n    board = board.replace(\"X\", \"0\")\n    board = board.replace(\".\", \"X\")\n    board = board.replace(\"X\", \"0\")\n    board = board.replace(\".\", \"0\")\n    board = board.replace(\"0\", \".\")\n    board = board.replace(\".\", \"0\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\".\", \".\")\n    board = board.replace(\""
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = set(s)\n    s = list"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    b.sort()\n    c.sort()\n    return str(sum(b) - sum(c))"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if a > f:\n        return -1\n    if b > k:\n        return -1\n    if a == f:\n        return k\n    if b == k:\n        return k\n    if a == f:\n        return k\n    if b == k:\n        return k\n    if a < f:\n        return k\n    if b < k:\n        return k\n    if a < f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b < k:\n        return k\n    if a > f and b > k:\n        return k\n    if a > f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b > k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b < k:\n        return k\n    if a == f and b > k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b < k:\n        return k\n    if a > f and b < k:\n        return k\n    if a < f and b > k:\n        return k\n    if a > f and b > k:\n        return k\n    if a == f and b < k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b == k:\n        return k\n    if a == f and b == k:\n        return k\n    if a < f and b == k:\n        return k\n    if a > f and b =="
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.strip()\n    if n < p or n < q:\n        return -1\n    if p == q:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p > n or q > n:\n        return -1\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p > 1 and q == n:\n        return n\n    if p > 1 and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p > 1 and q == n:\n        return n\n    if p > 1 and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p > 1 and q == n:\n        return n\n    if p > 1 and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p > 1 and q == n:\n        return n\n    if p > 1 and q > n:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    if p == n and q > n:\n        return n\n    if p > n and q == n:\n        return n\n    if p > n and q > n:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == 1:\n        return n\n    if p == 1 and q > 1:\n        return n\n    if p > 1 and q == 1:\n        return n\n    if p > 1 and q > 1:\n        return n\n    if p == 1 and q == n:\n        return n\n    if p == n and q == n:\n        return n\n    "
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles.sort()\n    obstacles.append(m)\n    obstacles.append(0)\n    obstacles.append(m)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n    obstacles.sort()\n    obstacles.append(0)\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    if s < 2 or s > 10**12 or x < 0 or x > 10**12:\n        return 0\n    if s == 2:\n        return 1 if x == 1 else 0\n    if s == 3:\n        return 1 if x == 1 or x == 3 else 0\n    if s == 5:\n        return 1 if x == 1 or x == 5 else 0\n    if s == 7:\n        return 1 if x == 1 or x == 7 else 0\n    if s == 9:\n        return 1 if x == 1 or x == 9 else 0\n    if s == 11:\n        return 1 if x == 1 or x == 11 else 0\n    if s == 13:\n        return 1 if x == 1 or x == 13 else 0\n    if s == 15:\n        return 1 if x == 1 or x == 15 else 0\n    if s == 17:\n        return 1 if x == 1 or x == 17 else 0\n    if s == 19:\n        return 1 if x == 1 or x == 19 else 0\n    if s == 21:\n        return 1 if x == 1 or x == 21 else 0\n    if s == 23:\n        return 1 if x == 1 or x == 23 else 0\n    if s == 25:\n        return 1 if x == 1 or x == 25 else 0\n    if s == 27:\n        return 1 if x == 1 or x == 27 else 0\n    if s == 29:\n        return 1 if x == 1 or x == 29 else 0\n    if s == 31:\n        return 1 if x == 1 or x == 31 else 0\n    if s == 33:\n        return 1 if x == 1 or x == 33 else 0\n    if s == 35:\n        return 1 if x == 1 or x == 35 else 0\n    if s == 37:\n        return 1 if x == 1 or x == 37 else 0\n    if s == 39:\n        return 1 if x == 1 or x == 39 else 0\n    if s == 41:\n        return 1 if x == 1 or x == 41 else 0\n    if s == 43:\n        return 1 if x == 1 or x == 43 else 0\n    if s == 45:\n        return 1 if x == 1 or x == 45 else 0\n    if s == 47:\n        return 1 if x == 1 or x == 47 else 0\n    if s == 49:\n        return 1 if x == 1 or x == 49 else 0\n    if s == 51:\n        return 1 if x == 1 or x == 51 else 0\n    if s == 53:\n        return 1 if x == 1 or x == 53 else 0\n    if s == 55:\n        return 1 if x == 1 or x == 55 else 0\n    if s == 57:\n        return 1 if x == 1 or x == 57 else 0\n    if s == 59:\n        return 1 if x == 1 or x == 59 else 0\n    if s == 61:\n        return 1 if x == 1 or x == 61 else 0\n    if s == 63:\n        return 1 if x == 1 or x == 63 else 0\n    if s == 65:\n        return 1 if x == 1 or x == 65 else 0\n    if s == 67:\n        return 1 if x == 1 or x == 67 else 0\n    if s == 69:\n        return 1 if x == 1 or x == 69 else 0\n    if s == 71:\n        return 1 if x == 1 or x == 71 else 0\n    if s == 73:\n        return 1 if x == 1 or x == 73 else 0\n    if s == 75:\n        return 1 if x == 1 or x == 75 else 0\n    if s == 77:\n        return 1 if x == 1 or x == 77 else 0\n    if s == 79:\n        return 1 if x == 1 or x == 79 else 0\n    if s == 81:\n        return 1 if x == 1 or x == 81 else 0\n    if s == 83:\n        return 1 if x == 1 or x == 83 else 0\n    if s == 85:\n        return 1 if x == 1 or x == 85 else 0\n    if s == 87:\n        return 1 if x == 1 or x == 87 else 0\n    if s == 89:\n        return 1 if x == 1 or x == 89 else 0\n    if s == 91:\n        return 1 if x == 1 or x == 91 else 0\n    if s == 93:\n        return 1 if x == 1 or x == 93 else 0\n    if s == 95:\n        return 1 if x == 1 or x == 95 else 0\n    if s == 97:\n        return 1 if x == 1 or x == 97 else 0\n    if s == 99:\n        return 1 if x == 1 or x == 99 else 0\n    if s == 101:\n        return 1 if x == 1 or x == 101 else 0\n    if s == 103:\n        return 1 if x == 1 or x == 103 else 0\n    if s == 105:\n        return 1 if x == 1 or x == 105 else 0\n    if s == 107:\n        return 1 if x == 1 or x == 107 else 0\n    if s == 109:\n        return 1 if x == 1 or x == 109 else 0\n    if s == 111:\n        return 1 if x == 1 or x == 111 else 0\n    if s == 113:\n        return 1 if x == 1 or x == 113 else 0\n    if s == 115:\n        return 1 if x == 1 or x == 115 else 0\n    if s == 117:\n        return 1 if x == 1 or x == 117 else 0\n    if s == 119:\n        return 1 if x == 1 or x == 119 else 0\n    if s == 121:\n        return 1 if x == 1 or x == 121 else 0\n    if s == 123:\n        return 1 if x == 1 or x == 123 else 0\n    if s == 125:\n        return 1 if x == 1 or x == 125 else 0\n    if s == 127:\n        return 1 if x == 1 or x == 127 else 0\n    if s == 129:\n        return 1 if x == 1 or x == 129 else 0\n    if s == 131:\n        return 1 if x == 1 or x == 131 else 0\n    if s == 133:\n        return 1 if x == 1 or x == 133 else 0\n    if s == 135:\n        return 1 if x == 1 or x == 135 else 0\n    if s == 137:\n        return 1 if x == 1 or x == 137 else 0\n    if s == 139:\n        return 1 if x == 1 or x == 139 else 0\n    if s == 141:\n        return 1 if x == 1 or x == 141 else 0\n    if s == 143:\n        return 1 if x == 1 or x == 143 else 0\n    if s == 145:\n        return 1 if x == 1 or x == 145 else 0\n    if s == 147:\n        return 1 if x == 1 or x == 147 else 0\n    if s == 149:\n        return 1 if x == 1 or x == 149 else 0\n    if s == 151:\n        return 1 if x == 1 or x == 151 else 0\n    if s == 153:\n        return 1 if x == 1 or x == 153 else 0\n    if s == 155:\n        return 1 if x == 1 or x == 155 else 0\n    if s == 157:\n        return 1 if x == 1 or x == 157 else 0\n    if s == 159:\n        return 1 if x == 1 or x == 159 else 0\n    if s == 161:\n        return 1 if x == 1 or x == 161 else 0\n    if s == 163:\n        return 1 if x == 1 or x == 163 else 0\n    if s == 165:\n        return 1 if x == 1 or x == 165 else 0\n    if s == 167:\n        return 1 if x == 1 or x == 167 else 0\n    if s == 169:\n        return 1 if x == 1 or x == 169 else"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n - k, n - k + 1)) +'' +''.join(map(str, range(1, n + 1)))"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"1\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"1\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"1\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"1\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"1\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"1\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"1\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"1\"\n    if n == 114:\n        return \"1\"\n    if n == 115:\n        return \"1\"\n    if n == 116:\n        return \"1\"\n    if n == 117:\n        return \"1\"\n    if n == 118:\n        return \"1\"\n    if n == 119:\n        return \"1\"\n    if n == 120:\n        return \"1\"\n    if n == 121:\n        return \"1\"\n    if n == 122:\n        return \"1\"\n    if n == 123:\n        return \"1\"\n    if n == 124:\n        return \"1\"\n    if n == 125:\n        return \"1\"\n    if n == 126:\n        return \"1\"\n    if n == 127:\n        return \"1\"\n    if n == 128:\n        return \"1"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(f(n)) % (10**9 + 7))\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'AEIOU'\n    string = stdin\n    jump = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            jump += 1\n        else:\n            jump += 2\n        if i == len(string) - 1:\n            return jump\n    return jump"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if a1 + a2 + a3 + a4 == a1 * a2 * a3 * a4:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sizes = list(map(int, stdin.split()))\n    alice = 0\n    bob = 0\n    while len(sizes) > 0:\n        if alice >= bob:\n            alice += sizes.pop(0)\n        else:\n            bob += sizes.pop(0)\n    return str(alice) + \" \" + str(bob)\n\nsolution(\"3\")\nsolution(\"5\")\nsolution(\"10 21 10 21 10\")\nsolution(\"1 2 3 4 5\")\nsolution(\"1 2 3 4 5 6 7 8 9 10\")\nsolution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    if n == 18:\n        return str(17)\n    if n == 19:\n        return str(18)\n    if n == 20:\n        return str(19)\n    if n == 21:\n        return str(20)\n    if n == 22:\n        return str(21)\n    if n == 23:\n        return str(22)\n    return str(-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        return \"Alice\"\n    else:\n        return \"Bob\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if len(a)!= n:\n        return \"NO\"\n    for i in range(n):\n        if a[i]!= i:\n            return \"NO\"\n    for i in range(n):\n        a[i] = a[i] + i\n    for i in range(n):\n        if a[i]!= i:\n            return \"NO\"\n    for i in range(n):\n        a[i] = a[i] - i\n    for i in range(n):\n        if a[i]!= i:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.strip()\n    max_len = 0\n    for i in range(N):\n        for j in range(i, N):\n            if S[i:j+1] == S[i:j+1][::-1]:\n                max_len = max(max_len, j - i + 1)\n    if max_len == 0:\n        print(0)\n    else:\n        print(max_len)\n    return max_len"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(min(n - a, a - 1))"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lightsabers = list(map(int, stdin.split()))\n    lightsabers.sort()\n    k = 0\n    for i in range(1, m):\n        if lightsabers[i]!= lightsabers[i-1] + 1:\n            return \"NO\"\n    for i in range(1, m):\n        if lightsabers[i] - lightsabers[i-1]!= 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    c = 0\n    for i in range(n):\n        m, c = map(int, stdin.split())\n        if m > c:\n            m = m - c\n        elif m < c:\n            c = c - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m > m:\n            m = m - m\n        elif m < m:\n            m = m - m\n        else:\n            continue\n        if m >"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.split()\n    field = [[int(i) for i in field[i]] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 0:\n                continue\n            if field[i][j] == 1:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 1 or field[i - 1][j] == 1 or field[i - 1][j + 1] == 1 or field[i][j - 1] == 1 or field[i][j + 1] == 1 or field[i + 1][j - 1] == 1 or field[i + 1][j] == 1 or field[i + 1][j + 1] == 1:\n                    return \"NO\"\n            if field[i][j] == 2:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 2 or field[i - 1][j] == 2 or field[i - 1][j + 1] == 2 or field[i][j - 1] == 2 or field[i][j + 1] == 2 or field[i + 1][j - 1] == 2 or field[i + 1][j] == 2 or field[i + 1][j + 1] == 2:\n                    return \"NO\"\n            if field[i][j] == 3:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 3 or field[i - 1][j] == 3 or field[i - 1][j + 1] == 3 or field[i][j - 1] == 3 or field[i][j + 1] == 3 or field[i + 1][j - 1] == 3 or field[i + 1][j] == 3 or field[i + 1][j + 1] == 3:\n                    return \"NO\"\n            if field[i][j] == 4:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 4 or field[i - 1][j] == 4 or field[i - 1][j + 1] == 4 or field[i][j - 1] == 4 or field[i][j + 1] == 4 or field[i + 1][j - 1] == 4 or field[i + 1][j] == 4 or field[i + 1][j + 1] == 4:\n                    return \"NO\"\n            if field[i][j] == 5:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 5 or field[i - 1][j] == 5 or field[i - 1][j + 1] == 5 or field[i][j - 1] == 5 or field[i][j + 1] == 5 or field[i + 1][j - 1] == 5 or field[i + 1][j] == 5 or field[i + 1][j + 1] == 5:\n                    return \"NO\"\n            if field[i][j] == 6:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 6 or field[i - 1][j] == 6 or field[i - 1][j + 1] == 6 or field[i][j - 1] == 6 or field[i][j + 1] == 6 or field[i + 1][j - 1] == 6 or field[i + 1][j] == 6 or field[i + 1][j + 1] == 6:\n                    return \"NO\"\n            if field[i][j] == 7:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 7 or field[i - 1][j] == 7 or field[i - 1][j + 1] == 7 or field[i][j - 1] == 7 or field[i][j + 1] == 7 or field[i + 1][j - 1] == 7 or field[i + 1][j] == 7 or field[i + 1][j + 1] == 7:\n                    return \"NO\"\n            if field[i][j] == 8:\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    return \"NO\"\n                if field[i - 1][j - 1] == 8 or field[i - 1][j] == 8 or field[i - 1][j + 1] == 8 or field[i][j - 1] == 8 or field[i][j + 1] == 8 or field[i + 1][j - 1] == 8 or field[i + 1][j] == 8 or field[i + 1][j + 1] == 8:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 0:\n        k += 1\n        n = n // 10\n    return str(k)"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = m\n    hobbits = n\n    while True:\n        if pillows >= k:\n            break\n        pillows += 1\n        hobbits -= 1\n    return str(pillows)"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(0, sum(a[i] - k * (i + 1) // m for i in range(n)) - k * (n - 1) // m))"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = [(i, j) for i in range(n) for j in range(m)]\n    points.sort(key=lambda x: (x[0], x[1]))\n    points = [(i, j) for i, j in points if i!= j]\n    points = [(i, j) for i, j in points if i < j]\n    points = [(i, j) for i, j in points if i % 2 == 0]\n    points = [(i, j) for i, j in points if j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and j % 2 == 0]\n    points = [(i, j) for i, j in points if i % 2 == 0 and"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.replace('0','')\n    n = int(n)\n    n = str(n)\n    n = n.zfill(len(n)+1)\n    return n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    if n == m:\n        if min == max:\n            return 'Correct'\n        else:\n            return 'Incorrect'\n    else:\n        if min == max:\n            return 'Incorrect'\n        else:\n            if min < max:\n                for i in range(m):\n                    if t[i] < min:\n                        t[i] = min\n                for i in range(m):\n                    if t[i] > max:\n                        t[i] = max\n                return 'Correct'\n            else:\n                return 'Incorrect'"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    fact_str = str(fact)\n    count = 0\n    for i in range(len(fact_str)):\n        if fact_str[i] == '0':\n            count += 1\n    return str(count)"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    x = list(map(int, stdin.split()))\n    x.sort()\n    res = []\n    for i in range(k):\n        max_dist = 0\n        max_node = 0\n        for j in range(n):\n            if x[i] == j:\n                continue\n            dist = 0\n            for v, w in graph[j]:\n                if v == x[i]:\n                    dist += w\n            if dist > max_dist:\n                max_dist = dist\n                max_node = j\n        res.append(max_dist)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    if n % 2 == 0:\n        if x == 0:\n            return 1\n        elif x == 1:\n            return 0\n        elif x == 2:\n            return 2\n    else:\n        if x == 0:\n            return 2\n        elif x == 1:\n            return 0\n        elif x == 2:\n            return 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rectangles = []\n    for i in range(n):\n        rectangles.append(list(map(int, stdin.split())))\n    rectangles.sort(key=lambda x: (x[0], x[1]))\n    rectangles.sort(key=lambda x: (x[2], x[3]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (rectangles[i][0] <= rectangles[j][2] and rectangles[i][2] >= rectangles[j][0] and\n                    rectangles[i][1] <= rectangles[j][3] and rectangles[i][3] >= rectangles[j][1]):\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    count = 0\n    for i in range(n + 1):\n        if i > n:\n            break\n        if i == 0:\n            continue\n        if i == 1:\n            count += 1\n            continue\n        if i == 2:\n            count += 1\n            continue\n        if i == 3:\n            count += 1\n            continue\n        if i == 4:\n            count += 1\n            continue\n        if i == 5:\n            count += 1\n            continue\n        if i == 6:\n            count += 1\n            continue\n        if i == 7:\n            count += 1\n            continue\n        if i == 8:\n            count += 1\n            continue\n        if i == 9:\n            count += 1\n            continue\n        if i == 10:\n            count += 1\n            continue\n        if i == 11:\n            count += 1\n            continue\n        if i == 12:\n            count += 1\n            continue\n        if i == 13:\n            count += 1\n            continue\n        if i == 14:\n            count += 1\n            continue\n        if i == 15:\n            count += 1\n            continue\n        if i == 16:\n            count += 1\n            continue\n        if i == 17:\n            count += 1\n            continue\n        if i == 18:\n            count += 1\n            continue\n        if i == 19:\n            count += 1\n            continue\n        if i == 20:\n            count += 1\n            continue\n        if i == 21:\n            count += 1\n            continue\n        if i == 22:\n            count += 1\n            continue\n        if i == 23:\n            count += 1\n            continue\n        if i == 24:\n            count += 1\n            continue\n        if i == 25:\n            count += 1\n            continue\n        if i == 26:\n            count += 1\n            continue\n        if i == 27:\n            count += 1\n            continue\n        if i == 28:\n            count += 1\n            continue\n        if i == 29:\n            count += 1\n            continue\n        if i == 30:\n            count += 1\n            continue\n        if i == 31:\n            count += 1\n            continue\n        if i == 32:\n            count += 1\n            continue\n        if i == 33:\n            count += 1\n            continue\n        if i == 34:\n            count += 1\n            continue\n        if i == 35:\n            count += 1\n            continue\n        if i == 36:\n            count += 1\n            continue\n        if i == 37:\n            count += 1\n            continue\n        if i == 38:\n            count += 1\n            continue\n        if i == 39:\n            count += 1\n            continue\n        if i == 40:\n            count += 1\n            continue\n        if i == 41:\n            count += 1\n            continue\n        if i == 42:\n            count += 1\n            continue\n        if i == 43:\n            count += 1\n            continue\n        if i == 44:\n            count += 1\n            continue\n        if i == 45:\n            count += 1\n            continue\n        if i == 46:\n            count += 1\n            continue\n        if i == 47:\n            count += 1\n            continue\n        if i == 48:\n            count += 1\n            continue\n        if i == 49:\n            count += 1\n            continue\n        if i == 50:\n            count += 1\n            continue\n        if i == 51:\n            count += 1\n            continue\n        if i == 52:\n            count += 1\n            continue\n        if i == 53:\n            count += 1\n            continue\n        if i == 54:\n            count += 1\n            continue\n        if i == 55:\n            count += 1\n            continue\n        if i == 56:\n            count += 1\n            continue\n        if i == 57:\n            count += 1\n            continue\n        if i == 58:\n            count += 1\n            continue\n        if i == 59:\n            count += 1\n            continue\n        if i == 60:\n            count += 1\n            continue\n        if i == 61:\n            count += 1\n            continue\n        if i == 62:\n            count += 1\n            continue\n        if i == 63:\n            count += 1\n            continue\n        if i == 64:\n            count += 1\n            continue\n        if i == 65:\n            count += 1\n            continue\n        if i == 66:\n            count += 1\n            continue\n        if i == 67:\n            count += 1\n            continue\n        if i == 68:\n            count += 1\n            continue\n        if i == 69:\n            count += 1\n            continue\n        if i == 70:\n            count += 1\n            continue\n        if i == 71:\n            count += 1\n            continue\n        if i == 72:\n            count += 1\n            continue\n        if i == 73:\n            count += 1\n            continue\n        if i == 74:\n            count += 1\n            continue\n        if i == 75:\n            count += 1\n            continue\n        if i == 76:\n            count += 1\n            continue\n        if i == 77:\n            count += 1\n            continue\n        if i == 78:\n            count += 1\n            continue\n        if i == 79:\n            count += 1\n            continue\n        if i == 80:\n            count += 1\n            continue\n        if i == 81:\n            count += 1\n            continue\n        if i == 82:\n            count += 1\n            continue\n        if i == 83:\n            count += 1\n            continue\n        if i == 84:\n            count += 1\n            continue\n        if i == 85:\n            count += 1\n            continue\n        if i == 86:\n            count += 1\n            continue\n        if i == 87:\n            count += 1\n            continue\n        if i == 88:\n            count += 1\n            continue\n        if i == 89:\n            count += 1\n            continue\n        if i == 90:\n            count += 1\n            continue\n        if i == 91:\n            count += 1\n            continue\n        if i == 92:\n            count += 1\n            continue\n        if i == 93:\n            count += 1\n            continue\n        if i == 94:\n            count += 1\n            continue\n        if i == 95:\n            count += 1\n            continue\n        if i == 96:\n            count += 1\n            continue\n        if i == 97:\n            count += 1\n            continue\n        if i == 98:\n            count += 1\n            continue\n        if i == 99:\n            count += 1\n            continue\n        if i == 100:\n            count += 1\n            continue\n        if i == 101:\n            count += 1\n            continue\n        if i == 102:\n            count += 1\n            continue\n        if i == 103:\n            count += 1\n            continue\n        if i == 104:\n            count += 1\n            continue\n        if i == 105:\n            count += 1\n            continue\n        if i == 106:\n            count += 1\n            continue\n        if i == 107:\n            count += 1\n            continue\n        if i == 108:\n            count += 1\n            continue\n        if i == 109:\n            count += 1\n            continue\n        if i == 110:\n            count += 1\n            continue\n        if i == 111:\n            count += 1\n            continue\n        if i == 112:\n            count += 1\n            continue\n        if i"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points = sorted(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if a > b:\n        return 0\n    if a == b:\n        return (2 * k + 1) ** t\n    if a < b:\n        return (2 * k + 1) ** t - (2 * k + 1) ** (t - 1)"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(l)\n    a.insert(0, 0)\n    print(a)\n    return str(len(a) - 1)"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = []\n    for i in range(n):\n        r, h = map(int, stdin.split())\n        cakes.append((r, h))\n    cakes.sort(key=lambda x: x[0])\n    max_volume = 0\n    for i in range(n):\n        if i == 0:\n            max_volume = cakes[i][1]\n        else:\n            max_volume = max(max_volume, cakes[i][1])\n    return str(max_volume)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    if h[0] == h[1]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10] and h[10] == h[11]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10] and h[10] == h[11] and h[11] == h[12]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10] and h[10] == h[11] and h[11] == h[12] and h[12] == h[13]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10] and h[10] == h[11] and h[11] == h[12] and h[12] == h[13] and h[13] == h[14]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10] and h[10] == h[11] and h[11] == h[12] and h[12] == h[13] and h[13] == h[14] and h[14] == h[15]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9] and h[9] == h[10] and h[10] == h[11] and h[11] == h[12] and h[12] == h[13] and h[13] == h[14] and h[14] == h[15] and h[15] == h[16]:\n        return \"0\"\n    if h[0] == h[1] and h[1] == h[2] and h[2] == h[3] and h[3] == h[4] and h[4] == h[5] and h[5] == h[6] and h[6] == h[7] and h[7] == h[8] and h[8] == h[9"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return 0\n    if n == 2:\n        return a[1] - a[0]\n    if n == 3:\n        return max(a[1] - a[0], a[2] - a[1])\n    if n == 4:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2])\n    if n == 5:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3])\n    if n == 6:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4])\n    if n == 7:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5])\n    if n == 8:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6])\n    if n == 9:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7])\n    if n == 10:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8])\n    if n == 11:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9])\n    if n == 12:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9], a[11] - a[10])\n    if n == 13:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9], a[11] - a[10], a[12] - a[11])\n    if n == 14:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9], a[11] - a[10], a[12] - a[11], a[13] - a[12])\n    if n == 15:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9], a[11] - a[10], a[12] - a[11], a[13] - a[12], a[14] - a[13])\n    if n == 16:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9], a[11] - a[10], a[12] - a[11], a[13] - a[12], a[14] - a[13], a[15] - a[14])\n    if n == 17:\n        return max(a[1] - a[0], a[2] - a[1], a[3] - a[2], a[4] - a[3], a[5] - a[4], a[6] - a[5], a[7] - a[6], a[8] - a[7], a[9] - a[8], a[10] - a[9], a[11] - a[10], a[12] - a[11], a[13] - a[12], a[14] - a[13], a[15] - a[14], a[16] - a[15])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    if k_1 + k_2 + k_3 == 0:\n        return \"NO\"\n    if k_1 + k_2 + k_3 == 1:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 2:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 3:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 4:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 5:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 6:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 7:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 8:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 9:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 10:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 11:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 12:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 13:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 14:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 15:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 16:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 17:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 18:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 19:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 20:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 21:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 22:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 23:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 24:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 25:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 26:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 27:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 28:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 29:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 30:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 31:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 32:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 33:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 34:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 35:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 36:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 37:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 38:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 39:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 40:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 41:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 42:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 43:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 44:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 45:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 46:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 47:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 48:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 49:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 50:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 51:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 52:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 53:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 54:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 55:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 56:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 57:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 58:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 59:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 60:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 61:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 62:\n        return \"YES\"\n    if k_1 + k_2 + k_3 == 63:\n        return \"YES\"\n    if k_1 + k_2"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    count = 0\n    while True:\n        if s == s[::-1]:\n            break\n        else:\n            s = s[1:] + s[0]\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.split()))\n    girls = list(map(int, stdin.split()))\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys ="
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_defence(a, b):\n        return a - b\n\n    def get_attack(a, b):\n        return a + b\n\n    def get_defence_greater_than_attack(a, b):\n        return a - b > b - a\n\n    def get_attack_greater_than_defence(a, b):\n        return a + b > b + a\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_defence(a, b):\n        return a - b > b - a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_attack(a, b):\n        return a + b > b + a and a == b\n\n    def get_attack_greater_than_defence_and_equal_to_defence(a, b):\n        return a + b > b + a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to_attack(a, b):\n        return a - b > b - a and a == b\n\n    def get_defence_greater_than_attack_and_equal_to"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_arr, y_arr, c_arr = [], [], []\n    for i in range(N):\n        x, y, c = map(int, stdin.split())\n        x_arr.append(x)\n        y_arr.append(y)\n        c_arr.append(c)\n    x_arr.sort()\n    y_arr.sort()\n    c_arr.sort()\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y_arr.append(y_arr[-1])\n    c_arr.append(c_arr[-1])\n    x_arr.append(x_arr[0])\n    y_arr.append(y_arr[0])\n    c_arr.append(c_arr[0])\n    x_arr.append(x_arr[-1])\n    y"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.split()\n    if n % 2 == 0:\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\""
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    bus_routes = []\n    for _ in range(n):\n        bus_routes.append(list(map(int, stdin.split())))\n    bus_routes.sort(key=lambda x: x[0])\n    for i in range(n):\n        if bus_routes[i][0] == t:\n            return str(i + 1)\n    return str(bus_routes[0][1])\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 1\n    while True:\n        if n + 1 < m:\n            n += 1\n        elif n + 2 < m:\n            n += 2\n        elif n + 3 < m:\n            n += 3\n        elif n + 4 < m:\n            n += 4\n        elif n + 5 < m:\n            n += 5\n        elif n + 6 < m:\n            n += 6\n        elif n + 7 < m:\n            n += 7\n        elif n + 8 < m:\n            n += 8\n        elif n + 9 < m:\n            n += 9\n        elif n + 10 < m:\n            n += 10\n        elif n + 11 < m:\n            n += 11\n        elif n + 12 < m:\n            n += 12\n        elif n + 13 < m:\n            n += 13\n        elif n + 14 < m:\n            n += 14\n        elif n + 15 < m:\n            n += 15\n        elif n + 16 < m:\n            n += 16\n        elif n + 17 < m:\n            n += 17\n        elif n + 18 < m:\n            n += 18\n        elif n + 19 < m:\n            n += 19\n        elif n + 20 < m:\n            n += 20\n        elif n + 21 < m:\n            n += 21\n        elif n + 22 < m:\n            n += 22\n        elif n + 23 < m:\n            n += 23\n        elif n + 24 < m:\n            n += 24\n        elif n + 25 < m:\n            n += 25\n        elif n + 26 < m:\n            n += 26\n        elif n + 27 < m:\n            n += 27\n        elif n + 28 < m:\n            n += 28\n        elif n + 29 < m:\n            n += 29\n        elif n + 30 < m:\n            n += 30\n        elif n + 31 < m:\n            n += 31\n        elif n + 32 < m:\n            n += 32\n        elif n + 33 < m:\n            n += 33\n        elif n + 34 < m:\n            n += 34\n        elif n + 35 < m:\n            n += 35\n        elif n + 36 < m:\n            n += 36\n        elif n + 37 < m:\n            n += 37\n        elif n + 38 < m:\n            n += 38\n        elif n + 39 < m:\n            n += 39\n        elif n + 40 < m:\n            n += 40\n        elif n + 41 < m:\n            n += 41\n        elif n + 42 < m:\n            n += 42\n        elif n + 43 < m:\n            n += 43\n        elif n + 44 < m:\n            n += 44\n        elif n + 45 < m:\n            n += 45\n        elif n + 46 < m:\n            n += 46\n        elif n + 47 < m:\n            n += 47\n        elif n + 48 < m:\n            n += 48\n        elif n + 49 < m:\n            n += 49\n        elif n + 50 < m:\n            n += 50\n        elif n + 51 < m:\n            n += 51\n        elif n + 52 < m:\n            n += 52\n        elif n + 53 < m:\n            n += 53\n        elif n + 54 < m:\n            n += 54\n        elif n + 55 < m:\n            n += 55\n        elif n + 56 < m:\n            n += 56\n        elif n + 57 < m:\n            n += 57\n        elif n + 58 < m:\n            n += 58\n        elif n + 59 < m:\n            n += 59\n        elif n + 60 < m:\n            n += 60\n        elif n + 61 < m:\n            n += 61\n        elif n + 62 < m:\n            n += 62\n        elif n + 63 < m:\n            n += 63\n        elif n + 64 < m:\n            n += 64\n        elif n + 65 < m:\n            n += 65\n        elif n + 66 < m:\n            n += 66\n        elif n + 67 < m:\n            n += 67\n        elif n + 68 < m:\n            n += 68\n        elif n + 69 < m:\n            n += 69\n        elif n + 70 < m:\n            n += 70\n        elif n + 71 < m:\n            n += 71\n        elif n + 72 < m:\n            n += 72\n        elif n + 73 < m:\n            n += 73\n        elif n + 74 < m:\n            n += 74\n        elif n + 75 < m:\n            n += 75\n        elif n + 76 < m:\n            n += 76\n        elif n + 77 < m:\n            n += 77\n        elif n + 78 < m:\n            n += 78\n        elif n + 79 < m:\n            n += 79\n        elif n + 80 < m:\n            n += 80\n        elif n + 81 < m:\n            n += 81\n        elif n + 82 < m:\n            n += 82\n        elif n + 83 < m:\n            n += 83\n        elif n + 84 < m:\n            n += 84\n        elif n + 85 < m:\n            n += 85\n        elif n + 86 < m:\n            n += 86\n        elif n + 87 < m:\n            n += 87\n        elif n + 88 < m:\n            n += 88\n        elif n + 89 < m:\n            n += 89\n        elif n + 90 < m:\n            n += 90\n        elif n + 91 < m:\n            n += 91\n        elif n + 92 < m:\n            n += 92\n        elif n + 93 < m:\n            n += 93\n        elif n + 94 < m:\n            n += 94\n        elif n + 95 < m:\n            n += 95\n        elif n + 96 < m:\n            n += 96\n        elif n + 97 < m:\n            n += 97\n        elif n + 98 < m:\n            n += 98\n        elif n + 99 < m:\n            n += 99\n        elif n + 100 < m:\n            n += 100\n        elif n + 101 < m:\n            n += 101\n        elif n + 102 < m:\n            n += 102\n        elif n + 103 < m:\n            n += 103\n        elif n + 104 < m:\n            n += 104\n        elif n + 105 < m:\n            n += 105\n        elif n + 106 < m:\n            n += 106\n        elif n + 107 < m:\n            n += 107\n        elif n + 108 < m:\n            n += 108\n        elif n + 109 < m:\n            n += 109\n        elif n + 110 < m:\n            n += 110\n        elif n + 111 < m:\n            n += 111\n        elif n + 112 < m:\n            n += 112\n        elif n + 113 < m:\n            n += 113\n        elif n + 114 < m:\n            n += 114\n        elif n + 115 < m:\n            n += 115\n        elif n + 116 < m:\n            n += 116\n        elif n + 117 < m:\n            n += 117\n        elif n + 118 < m:\n            n += 118\n        elif n + 119 < m:\n            n += 119\n        elif n + 120 < m:\n            n += 120\n        elif n + 121 <"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return \"no\"\n    else:\n        return \"yes\"\n\nsolution(input())"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for k in range(n):\n                    if grid[i][k] == 0:\n                        for l in range(n):\n                            if grid[k][l] == 0:\n                                for m in range(n):\n                                    if grid[m][l] == 0:\n                                        for n in range(n):\n                                            if grid[m][n] == 0:\n                                                for o in range(n):\n                                                    if grid[o][n] == 0:\n                                                        for p in range(n):\n                                                            if grid[p][o] == 0:\n                                                                for q in range(n):\n                                                                    if grid[q][p] == 0:\n                                                                        for r in range(n):\n                                                                            if grid[r][q] == 0:\n                                                                                for s in range(n):\n                                                                                    if grid[s][r] == 0:\n                                                                                        for t in range(n):\n                                                                                            if grid[t][s] == 0:\n                                                                                                for u in range(n):\n                                                                                                    if grid[u][t] == 0:\n                                                                                                        for v in range(n):\n                                                                                                            if grid[v][u] == 0:\n                                                                                                                for w in range(n):\n                                                                                                                    if grid[w][v] == 0:\n                                                                                                                        for x in range(n):\n                                                                                                                            if grid[x][w] == 0:\n                                                                                                                                for y in range(n):\n                                                                                                                                   if grid[y][x] == 0:\n                                                                                                                                    for z in range(n):\n                                                                                                                                       if grid[z][y] == 0:\n                                                                                                                                            for a in range(n):\n                                                                                                                                                if grid[a][z] == 0:\n                                                                                                                                                   for b in range(n):\n                                                                                                                                                       if grid[b][a] == 0:\n                                                                                                                                                           for c in range(n):\n                                                                                                                                                         if grid[c][b] == 0:\n                                                                                                                                                               for d in range(n):\n                                                                                                                                                                   if grid[d][c] == 0:\n                                                                                                                                                                       for e in range(n):\n                                                                                                                                                                       if grid[e][d] == 0:\n                                                                                                                                                                           for f in range(n):\n                                                                                                                                                                           if grid[f][e] == 0:\n                                                                                                                                                                               for g in range(n):\n                                                                                                                                                                               if grid[g][f] == 0:\n                                                                                                                                                                                   for h in range(n):\n                                                                                                                                                                                   if grid[h][g] == 0:\n                                                                                                                                                                                       for i in range(n):\n                                                                                                                                                                                       if grid[i][h] == 0:\n                                                                                                                                                                                           for j in range(n):\n                                                                                                                                                                                           if grid[j][i] == 0:\n                                                                                                                                                                                              for k in range(n):\n                                                                                                                                                                                              if grid[k][j] == 0:\n                                                                                                                                                                                                for l in range(n):\n                                                                                                                                                                                                if grid[l][k] == 0:\n                                                                                                                                                                                                   for m in range(n):\n                                                                                                                                                                                                   if grid[m][l] == 0:\n                                                                                                                                                                                                       for n in range(n):\n                                                                                                                                                                                                       if grid[n][m] == 0:\n                                                                                                                                                                                                           for o in range(n):\n                                                                                                                                                                                                           if grid[o][n] == 0:\n                                                                                                                                                                                                           for p in range(n):\n                                                                                                                                                                                                           if grid[p][o] == 0:\n                                                                                                                                                                                                           for q in range(n):\n                                                                                                                                                                                                           if grid[q][p] == 0:\n                                                                                                                                                                                                           for r in range(n):\n                                                                                                                                                                                                           if grid[r][q] == 0:\n                                                                                                                                                                                                           for s in range(n):\n                                                                                                                             "
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    k = 1\n    while k < n:\n        k += m\n    return str(k) + \" \" + str(k)"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(dp(n, m))\n\ndef"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = []\n    for i in range(n):\n        friends.append(list(map(int, stdin.split())))\n    pizzas = []\n    for i in range(m):\n        pizzas.append(list(map(int, stdin.split())))\n    pizzas.sort(key=lambda x: x[0])\n    pizzas.sort(key=lambda x: x[1])\n    pizzas.sort(key=lambda x: x[2])\n    pizzas.sort(key=lambda x: x[3])\n    pizzas.sort(key=lambda x: x[4])\n    pizzas.sort(key=lambda x: x[5])\n    pizzas.sort(key=lambda x: x[6])\n    pizzas.sort(key=lambda x: x[7])\n    pizzas.sort(key=lambda x: x[8])\n    pizzas.sort(key=lambda x: x[9])\n    pizzas.sort(key=lambda x: x[10])\n    pizzas.sort(key=lambda x: x[11])\n    pizzas.sort(key=lambda x: x[12])\n    pizzas.sort(key=lambda x: x[13])\n    pizzas.sort(key=lambda x: x[14])\n    pizzas.sort(key=lambda x: x[15])\n    pizzas.sort(key=lambda x: x[16])\n    pizzas.sort(key=lambda x: x[17])\n    pizzas.sort(key=lambda x: x[18])\n    pizzas.sort(key=lambda x: x[19])\n    pizzas.sort(key=lambda x: x[20])\n    pizzas.sort(key=lambda x: x[21])\n    pizzas.sort(key=lambda x: x[22])\n    pizzas.sort(key=lambda x: x[23])\n    pizzas.sort(key=lambda x: x[24])\n    pizzas.sort(key=lambda x: x[25])\n    pizzas.sort(key=lambda x: x[26])\n    pizzas.sort(key=lambda x: x[27])\n    pizzas.sort(key=lambda x: x[28])\n    pizzas.sort(key=lambda x: x[29])\n    pizzas.sort(key=lambda x: x[30])\n    pizzas.sort(key=lambda x: x[31])\n    pizzas.sort(key=lambda x: x[32])\n    pizzas.sort(key=lambda x: x[33])\n    pizzas.sort(key=lambda x: x[34])\n    pizzas.sort(key=lambda x: x[35])\n    pizzas.sort(key=lambda x: x[36])\n    pizzas.sort(key=lambda x: x[37])\n    pizzas.sort(key=lambda x: x[38])\n    pizzas.sort(key=lambda x: x[39])\n    pizzas.sort(key=lambda x: x[40])\n    pizzas.sort(key=lambda x: x[41])\n    pizzas.sort(key=lambda x: x[42])\n    pizzas.sort(key=lambda x: x[43])\n    pizzas.sort(key=lambda x: x[44])\n    pizzas.sort(key=lambda x: x[45])\n    pizzas.sort(key=lambda x: x[46])\n    pizzas.sort(key=lambda x: x[47])\n    pizzas.sort(key=lambda x: x[48])\n    pizzas.sort(key=lambda x: x[49])\n    pizzas.sort(key=lambda x: x[50])\n    pizzas.sort(key=lambda x: x[51])\n    pizzas.sort(key=lambda x: x[52])\n    pizzas.sort(key=lambda x: x[53])\n    pizzas.sort(key=lambda x: x[54])\n    pizzas.sort(key=lambda x: x[55])\n    pizzas.sort(key=lambda x: x[56])\n    pizzas.sort(key=lambda x: x[57])\n    pizzas.sort(key=lambda x: x[58])\n    pizzas.sort(key=lambda x: x[59])\n    pizzas.sort(key=lambda x: x[60])\n    pizzas.sort(key=lambda x: x[61])\n    pizzas.sort(key=lambda x: x[62])\n    pizzas.sort(key=lambda x: x[63])\n    pizzas.sort(key=lambda x: x[64])\n    pizzas.sort(key=lambda x: x[65])\n    p"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    if m == 0 and s == 0:\n        return '-1 -1'\n    if m == 0:\n        return '-1 -1'\n    if s == 0:\n        return '-1 -1'\n    if m == 1:\n        return '-1 -1'\n    if s == 1:\n        return '-1 -1'\n    if m == 2:\n        return '-1 -1'\n    if s == 2:\n        return '-1 -1'\n    if m == 3:\n        return '-1 -1'\n    if s == 3:\n        return '-1 -1'\n    if m == 4:\n        return '-1 -1'\n    if s == 4:\n        return '-1 -1'\n    if m == 5:\n        return '-1 -1'\n    if s == 5:\n        return '-1 -1'\n    if m == 6:\n        return '-1 -1'\n    if s == 6:\n        return '-1 -1'\n    if m == 7:\n        return '-1 -1'\n    if s == 7:\n        return '-1 -1'\n    if m == 8:\n        return '-1 -1'\n    if s == 8:\n        return '-1 -1'\n    if m == 9:\n        return '-1 -1'\n    if s == 9:\n        return '-1 -1'\n    if m == 10:\n        return '-1 -1'\n    if s == 10:\n        return '-1 -1'\n    if m == 11:\n        return '-1 -1'\n    if s == 11:\n        return '-1 -1'\n    if m == 12:\n        return '-1 -1'\n    if s == 12:\n        return '-1 -1'\n    if m == 13:\n        return '-1 -1'\n    if s == 13:\n        return '-1 -1'\n    if m == 14:\n        return '-1 -1'\n    if s == 14:\n        return '-1 -1'\n    if m == 15:\n        return '-1 -1'\n    if s == 15:\n        return '-1 -1'\n    if m == 16:\n        return '-1 -1'\n    if s == 16:\n        return '-1 -1'\n    if m == 17:\n        return '-1 -1'\n    if s == 17:\n        return '-1 -1'\n    if m == 18:\n        return '-1 -1'\n    if s == 18:\n        return '-1 -1'\n    if m == 19:\n        return '-1 -1'\n    if s == 19:\n        return '-1 -1'\n    if m == 20:\n        return '-1 -1'\n    if s == 20:\n        return '-1 -1'\n    if m == 21:\n        return '-1 -1'\n    if s == 21:\n        return '-1 -1'\n    if m == 22:\n        return '-1 -1'\n    if s == 22:\n        return '-1 -1'\n    if m == 23:\n        return '-1 -1'\n    if s == 23:\n        return '-1 -1'\n    if m == 24:\n        return '-1 -1'\n    if s == 24:\n        return '-1 -1'\n    if m == 25:\n        return '-1 -1'\n    if s == 25:\n        return '-1 -1'\n    if m == 26:\n        return '-1 -1'\n    if s == 26:\n        return '-1 -1'\n    if m == 27:\n        return '-1 -1'\n    if s == 27:\n        return '-1 -1'\n    if m == 28:\n        return '-1 -1'\n    if s == 28:\n        return '-1 -1'\n    if m == 29:\n        return '-1 -1'\n    if s == 29:\n        return '-1 -1'\n    if m == 30:\n        return '-1 -1'\n    if s == 30:\n        return '-1 -1'\n    if m == 31:\n        return '-1 -1'\n    if s == 31:\n        return '-1 -1'\n    if m == 32:\n        return '-1 -1'\n    if s == 32:\n        return '-1 -1'\n    if m == 33:\n        return '-1 -1'\n    if s == 33:\n        return '-1 -1'\n    if m == 34:\n        return '-1 -1'\n    if s == 34:\n        return '-1 -1'\n    if m == 35:\n        return '-1 -1'\n    if s == 35:\n        return '-1 -1'\n    if m == 36:\n        return '-1 -1'\n    if s == 36:\n        return '-1 -1'\n    if m == 37:\n        return '-1 -1'\n    if s == 37:\n        return '-1 -1'\n    if m == 38:\n        return '-1 -1'\n    if s == 38:\n        return '-1 -1'\n    if m == 39:\n        return '-1 -1'\n    if s == 39:\n        return '-1 -1'\n    if m == 40:\n        return '-1 -1'\n    if s == 40:\n        return '-1 -1'\n    if m == 41:\n        return '-1 -1'\n    if s == 41:\n        return '-1 -1'\n    if m == 42:\n        return '-1 -1'\n    if s == 42:\n        return '-1 -1'\n    if m == 43:\n        return '-1 -1'\n    if s == 43:\n        return '-1 -1'\n    if m == 44:\n        return '-1 -1'\n    if s == 44:\n        return '-1 -1'\n    if m == 45:\n        return '-1 -1'\n    if s == 45:\n        return '-1 -1'\n    if m == 46:\n        return '-1 -1'\n    if s == 46:\n        return '-1 -1'\n    if m == 47:\n        return '-1 -1'\n    if s == 47:\n        return '-1 -1'\n    if m == 48:\n        return '-1 -1'\n    if s == 48:\n        return '-1 -1'\n    if m == 49:\n        return '-1 -1'\n    if s == 49:\n        return '-1 -1'\n    if m == 50:\n        return '-1 -1'\n    if s == 50:\n        return '-1 -1'\n    if m == 51:\n        return '-1 -1'\n    if s == 51:\n        return '-1 -1'\n    if m == 52:\n        return '-1 -1'\n    if s == 52:\n        return '-1 -1'\n    if m == 53:\n        return '-1 -1'\n    if s == 53:\n        return '-1 -1'\n    if m == 54:\n        return '-1 -1'\n    if s == 54:\n        return '-1 -1'\n    if m == 55:\n        return '-1 -1'\n    if s == 55:\n        return '-1 -1'\n    if m == 56:\n        return '-1 -1'"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return str(sum(i for i in range(l, r + 1) if len(set(str(i))) <= k))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n < k:\n        return \"NO\"\n    if n == k:\n        if max(a) - min(a) <= d:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n > k:\n        a.sort()\n        a = a[:k]\n        if max(a) - min(a) <= d:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin\n    count_red = 0\n    count_blue = 0\n    count_yellow = 0\n    count_green = 0\n    for i in range(len(garland)):\n        if garland[i] == 'R':\n            count_red += 1\n        elif garland[i] == 'B':\n            count_blue += 1\n        elif garland[i] == 'Y':\n            count_yellow += 1\n        elif garland[i] == 'G':\n            count_green += 1\n    return str(count_red) +'' + str(count_blue) +'' + str(count_yellow) +'' + str(count_green)"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, t_1 = map(int, stdin.split())\n    s_2, t_2 = map(int, stdin.split())\n    if s_1 == t_1:\n        return str(1.5)\n    if s_2 == t_2:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_1:\n        return str(1.5)\n    if s_2 == t_2:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == t_2:\n        return str(1.5)\n    if s_2 == t_1:\n        return str(1.5)\n    if s_1 == s_2:\n        return str(1.5)\n    if s_2 == s_1"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.lower()\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0] + stdin.split()[1][::-1]"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    brackets = stdin.strip()\n    if n % 2 == 0:\n        return \"\".join([\"+\" if i % 2 == 0 else \"-\" for i in range(n)])\n    else:\n        return \"\".join([\"|\" if i % 2 == 0 else \"-\" for i in range(n)])"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a > b:\n        return \">\"\n    elif a < b:\n        return \"<\"\n    else:\n        return \"=\""
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = set()\n    for i in range(n):\n        gems.add(stdin[i])\n    gems = list(gems)\n    gems.sort()\n    gems =''.join(gems)\n    return gems"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % 2 == 0:\n        return \"Final!\"\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(min(2 * n, sum(b)))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split())\n    return str(int(v_1 + v_2 + t * (v_1 - v_2) / d))"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    lens = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    bridge = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] = bridge[i - 1][j] + lens[i - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i - 1][j]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            bridge[i][j] += bridge[i][j - 1]\n    for i in range(1, N + 1):\n        for j in range(1, M +"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(math.factorial(a) / math.factorial(b) % 10))"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin.split()[1]\n    if n == 1:\n        return -1\n    if n == 2:\n        if s[0] == '0' and s[1] == '0':\n            return -1\n        return 1\n    if n == 3:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0':\n            return -1\n        return 2\n    if n == 4:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0':\n            return -1\n        return 3\n    if n == 5:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0':\n            return -1\n        return 4\n    if n == 6:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0':\n            return -1\n        return 5\n    if n == 7:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0':\n            return -1\n        return 6\n    if n == 8:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0':\n            return -1\n        return 7\n    if n == 9:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0':\n            return -1\n        return 8\n    if n == 10:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0':\n            return -1\n        return 9\n    if n == 11:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0' and s[10] == '0':\n            return -1\n        return 10\n    if n == 12:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0' and s[10] == '0' and s[11] == '0':\n            return -1\n        return 11\n    if n == 13:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0' and s[10] == '0' and s[11] == '0' and s[12] == '0':\n            return -1\n        return 12\n    if n == 14:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0' and s[10] == '0' and s[11] == '0' and s[12] == '0' and s[13] == '0':\n            return -1\n        return 13\n    if n == 15:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0' and s[10] == '0' and s[11] == '0' and s[12] == '0' and s[13] == '0' and s[14] == '0':\n            return -1\n        return 14\n    if n == 16:\n        if s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] == '0' and s[6] == '0' and s[7] == '0' and s[8] == '0' and s[9] == '0' and s[10] == '0' and s[11] == '0' and s[12] == '0' and s[13] == '0' and s[14] == '0' and s[15] == '0':\n            return -1\n        return 15\n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if n * i + 1 > n:\n            return str(i)\n    return \"1\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % (1 * 234 * 567) == 0 and n % (2 * 123 * 456) == 0 and n % (3 * 1234) == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x1, x2 = map(int, stdin.split()[1].split(' '))\n    lines = []\n    for i in range(n):\n        lines.append(list(map(int, stdin.split()[i + 2].split(' '))))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lines[i][0] * lines[j][0] + lines[i][1] * lines[j][1] == 0:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(k, n - k)}{max(k, n - k)}\"\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"4\"\n    if n == 7:\n        return \"4\"\n    if n == 8:\n        return \"4\"\n    if n == 9:\n        return \"4\"\n    if n == 10:\n        return \"4\"\n    if n == 11:\n        return \"4\"\n    if n == 12:\n        return \"4\"\n    if n == 13:\n        return \"4\"\n    if n == 14:\n        return \"4\"\n    if n == 15:\n        return \"4\"\n    if n == 16:\n        return \"4\"\n    if n == 17:\n        return \"4\"\n    if n == 18:\n        return \"4\"\n    if n == 19:\n        return \"4\"\n    if n == 20:\n        return \"4\"\n    if n == 21:\n        return \"4\"\n    if n == 22:\n        return \"4\"\n    if n == 23:\n        return \"4\"\n    if n == 24:\n        return \"4\"\n    if n == 25:\n        return \"4\"\n    if n == 26:\n        return \"4\"\n    if n == 27:\n        return \"4\"\n    if n == 28:\n        return \"4\"\n    if n == 29:\n        return \"4\"\n    if n == 30:\n        return \"4\"\n    if n == 31:\n        return \"4\"\n    if n == 32:\n        return \"4\"\n    if n == 33:\n        return \"4\"\n    if n == 34:\n        return \"4\"\n    if n == 35:\n        return \"4\"\n    if n == 36:\n        return \"4\"\n    if n == 37:\n        return \"4\"\n    if n == 38:\n        return \"4\"\n    if n == 39:\n        return \"4\"\n    if n == 40:\n        return \"4\"\n    if n == 41:\n        return \"4\"\n    if n == 42:\n        return \"4\"\n    if n == 43:\n        return \"4\"\n    if n == 44:\n        return \"4\"\n    if n == 45:\n        return \"4\"\n    if n == 46:\n        return \"4\"\n    if n == 47:\n        return \"4\"\n    if n == 48:\n        return \"4\"\n    if n == 49:\n        return \"4\"\n    if n == 50:\n        return \"4\"\n    if n == 51:\n        return \"4\"\n    if n == 52:\n        return \"4\"\n    if n == 53:\n        return \"4\"\n    if n == 54:\n        return \"4\"\n    if n == 55:\n        return \"4\"\n    if n == 56:\n        return \"4\"\n    if n == 57:\n        return \"4\"\n    if n == 58:\n        return \"4\"\n    if n == 59:\n        return \"4\"\n    if n == 60:\n        return \"4\"\n    if n == 61:\n        return \"4\"\n    if n == 62:\n        return \"4\"\n    if n == 63:\n        return \"4\"\n    if n == 64:\n        return \"4\"\n    if n == 65:\n        return \"4\"\n    if n == 66:\n        return \"4\"\n    if n == 67:\n        return \"4\"\n    if n == 68:\n        return \"4\"\n    if n == 69:\n        return \"4\"\n    if n == 70:\n        return \"4\"\n    if n == 71:\n        return \"4\"\n    if n == 72:\n        return \"4\"\n    if n == 73:\n        return \"4\"\n    if n == 74:\n        return \"4\"\n    if n == 75:\n        return \"4\"\n    if n == 76:\n        return \"4\"\n    if n == 77:\n        return \"4\"\n    if n == 78:\n        return \"4\"\n    if n == 79:\n        return \"4\"\n    if n == 80:\n        return \"4\"\n    if n == 81:\n        return \"4\"\n    if n == 82:\n        return \"4\"\n    if n == 83:\n        return \"4\"\n    if n == 84:\n        return \"4\"\n    if n == 85:\n        return \"4\"\n    if n == 86:\n        return \"4\"\n    if n == 87:\n        return \"4\"\n    if n == 88:\n        return \"4\"\n    if n == 89:\n        return \"4\"\n    if n == 90:\n        return \"4\"\n    if n == 91:\n        return \"4\"\n    if n == 92:\n        return \"4\"\n    if n == 93:\n        return \"4\"\n    if n == 94:\n        return \"4\"\n    if n == 95:\n        return \"4\"\n    if n == 96:\n        return \"4\"\n    if n == 97:\n        return \"4\"\n    if n == 98:\n        return \"4\"\n    if n == 99:\n        return \"4\"\n    if n == 100:\n        return \"4\"\n    if n == 101:\n        return \"4\"\n    if n == 102:\n        return \"4\"\n    if n == 103:\n        return \"4\"\n    if n == 104:\n        return \"4\"\n    if n == 105:\n        return \"4\"\n    if n == 106:\n        return \"4\"\n    if n == 107:\n        return \"4\"\n    if n == 108:\n        return \"4\"\n    if n == 109:\n        return \"4\"\n    if n == 110:\n        return \"4\"\n    if n == 111:\n        return \"4\"\n    if n == 112:\n        return \"4\"\n    if n == 113:\n        return \"4\"\n    if n == 114:\n        return \"4\"\n    if n == 115:\n        return \"4\"\n    if n == 116:\n        return \"4\"\n    if n == 117:\n        return \"4\"\n    if n == 118:\n        return \"4\"\n    if n == 119:\n        return \"4\"\n    if n == 120:\n        return \"4\"\n    if n == 121:\n        return \"4\"\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    max_count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == \"VK\":\n                max_count = max(max_count, j-i)\n    return max_count\n\nprint(solution(input()))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(2, n//2 + 1))"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a < b:\n        a *= 3\n        b *= 2\n    return str(a - b)"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    if h == 1:\n        return str(n)\n    if n == 1:\n        return str(2**(h-1))\n    if n == 2**(h-1):\n        return str(2**(h-1) + 2**(h-2))\n    if n == 2**(h-2):\n        return str(2**(h-2) + 2**(h-1))\n    if n == 2**(h-3):\n        return str(2**(h-3) + 2**(h-2))\n    if n == 2**(h-4):\n        return str(2**(h-4) + 2**(h-3))\n    if n == 2**(h-5):\n        return str(2**(h-5) + 2**(h-4))\n    if n == 2**(h-6):\n        return str(2**(h-6) + 2**(h-5))\n    if n == 2**(h-7):\n        return str(2**(h-7) + 2**(h-6))\n    if n == 2**(h-8):\n        return str(2**(h-8) + 2**(h-7))\n    if n == 2**(h-9):\n        return str(2**(h-9) + 2**(h-8))\n    if n == 2**(h-10):\n        return str(2**(h-10) + 2**(h-9))\n    if n == 2**(h-11):\n        return str(2**(h-11) + 2**(h-10))\n    if n == 2**(h-12):\n        return str(2**(h-12) + 2**(h-11))\n    if n == 2**(h-13):\n        return str(2**(h-13) + 2**(h-12))\n    if n == 2**(h-14):\n        return str(2**(h-14) + 2**(h-13))\n    if n == 2**(h-15):\n        return str(2**(h-15) + 2**(h-14))\n    if n == 2**(h-16):\n        return str(2**(h-16) + 2**(h-15))\n    if n == 2**(h-17):\n        return str(2**(h-17) + 2**(h-16))\n    if n == 2**(h-18):\n        return str(2**(h-18) + 2**(h-17))\n    if n == 2**(h-19):\n        return str(2**(h-19) + 2**(h-18))\n    if n == 2**(h-20):\n        return str(2**(h-20) + 2**(h-19))\n    if n == 2**(h-21):\n        return str(2**(h-21) + 2**(h-20))\n    if n == 2**(h-22):\n        return str(2**(h-22) + 2**(h-21))\n    if n == 2**(h-23):\n        return str(2**(h-23) + 2**(h-22))\n    if n == 2**(h-24):\n        return str(2**(h-24) + 2**(h-23))\n    if n == 2**(h-25):\n        return str(2**(h-25) + 2**(h-24))\n    if n == 2**(h-26):\n        return str(2**(h-26) + 2**(h-25))\n    if n == 2**(h-27):\n        return str(2**(h-27) + 2**(h-26))\n    if n == 2**(h-28):\n        return str(2**(h-28) + 2**(h-27))\n    if n == 2**(h-29):\n        return str(2**(h-29) + 2**(h-28))\n    if n == 2**(h-30):\n        return str(2**(h-30) + 2**(h-29))\n    if n == 2**(h-31):\n        return str(2**(h-31) + 2**(h-30))\n    if n == 2**(h-32):\n        return str(2**(h-32) + 2**(h-31))\n    if n == 2**(h-33):\n        return str(2**(h-33) + 2**(h-32))\n    if n == 2**(h-34):\n        return str(2**(h-34) + 2**(h-33))\n    if n == 2**(h-35):\n        return str(2**(h-35) + 2**(h-34))\n    if n == 2**(h-36):\n        return str(2**(h-36) + 2**(h-35))\n    if n == 2**(h-37):\n        return str(2**(h-37) + 2**(h-36))\n    if n == 2**(h-38):\n        return str(2**(h-38) + 2**(h-37))\n    if n == 2**(h-39):\n        return str(2**(h-39) + 2**(h-38))\n    if n == 2**(h-40):\n        return str(2**(h-40) + 2**(h-39))\n    if n == 2**(h-41):\n        return str(2**(h-41) + 2**(h-40))\n    if n == 2**(h-42):\n        return str(2**(h-42) + 2**(h-41))\n    if n == 2**(h-43):\n        return str(2**(h-43) + 2**(h-42))\n    if n == 2**(h-44):\n        return str(2**(h-44) + 2**(h-43))\n    if n == 2**(h-45):\n        return str(2**(h-45) + 2**(h-44))\n    if n == 2**(h-46):\n        return str(2**(h-46) + 2"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m) + '\\n' + '\\n'.join(str(i) +'' + str(j) for i in range(1, n + 1) for j in range(1, m + 1))"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    months = list(map(int, stdin.split()))\n    months.sort()\n    for i in range(n - 1):\n        if months[i + 1] - months[i]!= 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 100000):\n        if n % i == 0:\n            a = n // i\n            b = i\n            if a < b:\n                a, b = b, a\n            if a + b == 1 - n:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    red, green = map(int, stdin.split()[1:3])\n    h = list(map(int, stdin.split()[3:]))\n    h.sort()\n    if n == 1:\n        if red == 0 and green == 0:\n            return -1\n        else:\n            return max(red, green)\n    else:\n        if red == 0 and green == 0:\n            return max(h[0], h[1])\n        else:\n            return max(h[0], h[1]) + max(h[2], h[3])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n * m < k:\n        return \"NO\"\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i + j <= n and i * j <= m:\n                if i + j == n and i * j == m:\n                    return \"YES\"\n                if i + j == n and i * j!= m:\n                    return \"YES\"\n                if i * j == m and i + j!= n:\n                    return \"YES\"\n                if i * j == m and i + j == n:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    if n == k:\n        return \"YES\"\n    if n == k + 1:\n        return \"YES\"\n    if n == k - 1:\n        return \"YES\"\n    if n == k + 2:\n        return \"YES\"\n    if n == k - 2:\n        return \"YES\"\n    if n == k + 3:\n        return \"YES\"\n    if n == k - 3:\n        return \"YES\"\n    if n == k + 4:\n        return \"YES\"\n    if n == k - 4:\n        return \"YES\"\n    if n == k + 5:\n        return \"YES\"\n    if n == k - 5:\n        return \"YES\"\n    if n == k + 6:\n        return \"YES\"\n    if n == k - 6:\n        return \"YES\"\n    if n == k + 7:\n        return \"YES\"\n    if n == k - 7:\n        return \"YES\"\n    if n == k + 8:\n        return \"YES\"\n    if n == k - 8:\n        return \"YES\"\n    if n == k + 9:\n        return \"YES\"\n    if n == k - 9:\n        return \"YES\"\n    if n == k + 10:\n        return \"YES\"\n    if n == k - 10:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_a = max(a)\n    max_a_index = a.index(max_a)\n    if max_a_index == 0:\n        return \"chest\"\n    elif max_a_index == 1:\n        return \"biceps\"\n    else:\n        return \"back\""
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = list(map(int, stdin.split()))\n    grades.sort()\n    return str(grades[-1] - grades[0])"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v!= 0:\n        return \"0\"\n    if u!= 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v == 0:\n        return \"0\"\n    if u == 0 and v"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = x_1, y_1, x_2, y_2\n    if x_1 == x_2 and y_1 == y_2:\n        return \"YES\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"A\"\n    if n == 11:\n        return \"B\"\n    if n == 12:\n        return \"C\"\n    if n == 13:\n        return \"D\"\n    if n == 14:\n        return \"E\"\n    if n == 15:\n        return \"F\"\n    if n == 16:\n        return \"G\"\n    if n == 17:\n        return \"H\"\n    if n == 18:\n        return \"I\"\n    if n == 19:\n        return \"J\"\n    if n == 20:\n        return \"K\"\n    if n == 21:\n        return \"L\"\n    if n == 22:\n        return \"M\"\n    if n == 23:\n        return \"N\"\n    if n == 24:\n        return \"O\"\n    if n == 25:\n        return \"P\"\n    if n == 26:\n        return \"Q\"\n    if n == 27:\n        return \"R\"\n    if n == 28:\n        return \"S\"\n    if n == 29:\n        return \"T\"\n    if n == 30:\n        return \"U\"\n    if n == 31:\n        return \"V\"\n    if n == 32:\n        return \"W\"\n    if n == 33:\n        return \"X\"\n    if n == 34:\n        return \"Y\"\n    if n == 35:\n        return \"Z\"\n    if n == 36:\n        return \"0\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"2\"\n    if n == 39:\n        return \"3\"\n    if n == 40:\n        return \"4\"\n    if n == 41:\n        return \"5\"\n    if n == 42:\n        return \"6\"\n    if n == 43:\n        return \"7\"\n    if n == 44:\n        return \"8\"\n    if n == 45:\n        return \"9\"\n    if n == 46:\n        return \"A\"\n    if n == 47:\n        return \"B\"\n    if n == 48:\n        return \"C\"\n    if n == 49:\n        return \"D\"\n    if n == 50:\n        return \"E\"\n    if n == 51:\n        return \"F\"\n    if n == 52:\n        return \"G\"\n    if n == 53:\n        return \"H\"\n    if n == 54:\n        return \"I\"\n    if n == 55:\n        return \"J\"\n    if n == 56:\n        return \"K\"\n    if n == 57:\n        return \"L\"\n    if n == 58:\n        return \"M\"\n    if n == 59:\n        return \"N\"\n    if n == 60:\n        return \"O\"\n    if n == 61:\n        return \"P\"\n    if n == 62:\n        return \"Q\"\n    if n == 63:\n        return \"R\"\n    if n == 64:\n        return \"S\"\n    if n == 65:\n        return \"T\"\n    if n == 66:\n        return \"U\"\n    if n == 67:\n        return \"V\"\n    if n == 68:\n        return \"W\"\n    if n == 69:\n        return \"X\"\n    if n == 70:\n        return \"Y\"\n    if n == 71:\n        return \"Z\"\n    if n == 72:\n        return \"0\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"2\"\n    if n == 75:\n        return \"3\"\n    if n == 76:\n        return \"4\"\n    if n == 77:\n        return \"5\"\n    if n == 78:\n        return \"6\"\n    if n == 79:\n        return \"7\"\n    if n == 80:\n        return \"8\"\n    if n == 81:\n        return \"9\"\n    if n == 82:\n        return \"A\"\n    if n == 83:\n        return \"B\"\n    if n == 84:\n        return \"C\"\n    if n == 85:\n        return \"D\"\n    if n == 86:\n        return \"E\"\n    if n == 87:\n        return \"F\"\n    if n == 88:\n        return \"G\"\n    if n == 89:\n        return \"H\"\n    if n == 90:\n        return \"I\"\n    if n == 91:\n        return \"J\"\n    if n == 92:\n        return \"K\"\n    if n == 93:\n        return \"L\"\n    if n == 94:\n        return \"M\"\n    if n == 95:\n        return \"N\"\n    if n == 96:\n        return \"O\"\n    if n == 97:\n        return \"P\"\n    if n == 98:\n        return \"Q\"\n    if n == 99:\n        return \"R\"\n    if n == 100:\n        return \"S\"\n    if n == 101:\n        return \"T\"\n    if n == 102:\n        return \"U\"\n    if n == 103:\n        return \"V\"\n    if n == 104:\n        return \"W\"\n    if n == 105:\n        return \"X\"\n    if n == 106:\n        return \"Y\"\n    if n == 107:\n        return \"Z\"\n    if n == 108:\n        return \"0\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"2\"\n    if n == 111:\n        return \"3\"\n    if n == 112:\n        return \"4\"\n    if n == 113:\n        return \"5\"\n    if n == 114:\n        return \"6\"\n    if n == 115:\n        return \"7\"\n    if n == 116:\n        return \"8\"\n    if n == 117:\n        return \"9\"\n    if n == 118:\n        return \"A\""
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    return str(max(a * e, b * f, c * e, d * f))"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    return str(a * b * pow(a, b, p) % p)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return max(k_2 * 256 + k_3 * 32, k_5 * 256 + k_6 * 32)"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    if n == 18:\n        return str(17)\n    if n == 19:\n        return str(18)\n    if n == 20:\n        return str(19)\n    if n == 21:\n        return str(20)\n    if n == 22:\n        return str(21)\n    if n == 23:\n        return str(22)\n    if n == 24:\n        return str(23)\n    if n == 25:\n        return str(24)\n    if n == 26:\n        return str(25)\n    if n == 27:\n        return str(26)\n    if n == 28:\n        return str(27)\n    if n == 29:\n        return str(28)\n    if n == 30:\n        return str(29)\n    if n == 31:\n        return str(30)\n    if n == 32:\n        return str(31)\n    if n == 33:\n        return str(32)\n    if n == 34:\n        return str(33)\n    if n == 35:\n        return str(34)\n    if n == 36:\n        return str(35)\n    if n == 37:\n        return str(36)\n    if n == 38:\n        return str(37)\n    if n == 39:\n        return str(38)\n    if n == 40:\n        return str(39)\n    if n == 41:\n        return str(40)\n    if n == 42:\n        return str(41)\n    if n == 43:\n        return str(42)\n    if n == 44:\n        return str(43)\n    if n == 45:\n        return str(44)\n    if n == 46:\n        return str(45)\n    if n == 47:\n        return str(46)\n    if n == 48:\n        return str(47)\n    if n == 49:\n        return str(48)\n    if n == 50:\n        return str(49)\n    if n == 51:\n        return str(50)\n    if n == 52:\n        return str(51)\n    if n == 53:\n        return str(52)\n    if n == 54:\n        return str(53)\n    if n == 55:\n        return str(54)\n    if n == 56:\n        return str(55)\n    if n == 57:\n        return str(56)\n    if n == 58:\n        return str(57)\n    if n == 59:\n        return str(58)\n    if n == 60:\n        return str(59)\n    if n == 61:\n        return str(60)\n    if n == 62:\n        return str(61)\n    if n == 63:\n        return str(62)\n    if n == 64:\n        return str(63)\n    if n == 65:\n        return str(64)\n    if n == 66:\n        return str(65)\n    if n == 67:\n        return str(66)\n    if n == 68:\n        return str(67)\n    if n == 69:\n        return str(68)\n    if n == 70:\n        return str(69)\n    if n == 71:\n        return str(70)\n    if n == 72:\n        return str(71)\n    if n == 73:\n        return str(72)\n    if n == 74:\n        return str(73)\n    if n == 75:\n        return str(74)\n    if n == 76:\n        return str(75)\n    if n == 77:\n        return str(76)\n    if n == 78:\n        return str(77)\n    if n == 79:\n        return str(78)\n    if n == 80:\n        return str(79)\n    if n == 81:\n        return str(80)\n    if n == 82:\n        return str(81)\n    if n == 83:\n        return str(82)\n    if n == 84:\n        return str(83)\n    if n == 85:\n        return str(84)\n    if n == 86:\n        return str(85)\n    if n == 87:\n        return str(86)\n    if n == 88:\n        return str(87)\n    if n == 89:\n        return str(88)\n    if n == 90:\n        return str(89)\n    if n == 91:\n        return str(90)\n    if n == 92:\n        return str(91)\n    if n == 93:\n        return str(92)\n    if n == 94:\n        return str(93)\n    if n == 95:\n        return str(94)\n    if n == 96:\n        return str(95)\n    if n == 97:\n        return str(96)\n    if n == 98:\n        return str(97)\n    if n == 99:\n        return str(98)\n    if n == 100:\n        return str(99)\n    if n == 101:\n        return str(100)\n    if n == 102:\n        return str(101)\n    if n == 103:\n        return str(102)\n    if n == 104:\n        return str(103)\n    if n == 105:\n        return str(104)\n    if n == 106:\n        return str(105)\n    if n == 107:\n        return str(106)\n    if n == 108:\n        return str(107)\n    if n == 109:\n        return str(108)\n    if n == 110:\n        return str(109)\n    if n == 111:\n        return str(110)\n    if n == 112:\n        return str(111)\n    if n == 113:\n        return str(112)\n    if n == 114:\n        return str(113)\n    if n == 115:\n        return str(114)\n    if n == 116:\n        return str(115)\n    if n == 117:\n        return str(116)\n    if n == 118:\n        return str(117)\n    if n == 119:\n        return str(118)\n    if n == 120"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(max(a + b for a in range(l, r + 1) for b in range(l, r + 1)))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if x == y:\n        return 'YES'\n    if x == z:\n        return 'YES'\n    if y == z:\n        return 'YES'\n    if t1 <= t2 and t2 <= t3:\n        return 'YES'\n    if t1 <= t3 and t3 <= t2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = random.randint(1, n)\n    c = random.randint(1, n)\n    if abs(c - a) < abs(c - m):\n        return str(c)\n    else:\n        return str(a)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = list(map(int, stdin.split()))\n    pairs.sort()\n    i = 0\n    while i < n:\n        if pairs[i] == 1:\n            i += 1\n        else:\n            break\n    return str(i)"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if k == 0:\n            return \"0\"\n        else:\n            return \"-\"\n    if k == 0:\n        return \"-\"\n    if k > n:\n        return \"-\"\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str(n-1)\n    if k == 3:\n        return str(n-2)\n    if k == 4:\n        return str(n-3)\n    if k == 5:\n        return str(n-4)\n    if k == 6:\n        return str(n-5)\n    if k == 7:\n        return str(n-6)\n    if k == 8:\n        return str(n-7)\n    if k == 9:\n        return str(n-8)\n    if k == 10:\n        return str(n-9)\n    if k == 11:\n        return str(n-10)\n    if k == 12:\n        return str(n-11)\n    if k == 13:\n        return str(n-12)\n    if k == 14:\n        return str(n-13)\n    if k == 15:\n        return str(n-14)\n    if k == 16:\n        return str(n-15)\n    if k == 17:\n        return str(n-16)\n    if k == 18:\n        return str(n-17)\n    if k == 19:\n        return str(n-18)\n    if k == 20:\n        return str(n-19)\n    if k == 21:\n        return str(n-20)\n    if k == 22:\n        return str(n-21)\n    if k == 23:\n        return str(n-22)\n    if k == 24:\n        return str(n-23)\n    if k == 25:\n        return str(n-24)\n    if k == 26:\n        return str(n-25)\n    if k == 27:\n        return str(n-26)\n    if k == 28:\n        return str(n-27)\n    if k == 29:\n        return str(n-28)\n    if k == 30:\n        return str(n-29)\n    if k == 31:\n        return str(n-30)\n    if k == 32:\n        return str(n-31)\n    if k == 33:\n        return str(n-32)\n    if k == 34:\n        return str(n-33)\n    if k == 35:\n        return str(n-34)\n    if k == 36:\n        return str(n-35)\n    if k == 37:\n        return str(n-36)\n    if k == 38:\n        return str(n-37)\n    if k == 39:\n        return str(n-38)\n    if k == 40:\n        return str(n-39)\n    if k == 41:\n        return str(n-40)\n    if k == 42:\n        return str(n-41)\n    if k == 43:\n        return str(n-42)\n    if k == 44:\n        return str(n-43)\n    if k == 45:\n        return str(n-44)\n    if k == 46:\n        return str(n-45)\n    if k == 47:\n        return str(n-46)\n    if k == 48:\n        return str(n-47)\n    if k == 49:\n        return str(n-48)\n    if k == 50:\n        return str(n-49)\n    if k == 51:\n        return str(n-50)\n    if k == 52:\n        return str(n-51)\n    if k == 53:\n        return str(n-52)\n    if k == 54:\n        return str(n-53)\n    if k == 55:\n        return str(n-54)\n    if k == 56:\n        return str(n-55)\n    if k == 57:\n        return str(n-56)\n    if k == 58:\n        return str(n-57)\n    if k == 59:\n        return str(n-58)\n    if k == 60:\n        return str(n-59)\n    if k == 61:\n        return str(n-60)\n    if k == 62:\n        return str(n-61)\n    if k == 63:\n        return str(n-62)\n    if k == 64:\n        return str(n-63)\n    if k == 65:\n        return str(n-64)\n    if k == 66:\n        return str(n-65)\n    if k == 67:\n        return str(n-66)\n    if k == 68:\n        return str(n-67)\n    if k == 69:\n        return str(n-68)\n    if k == 70:\n        return str(n-69)\n    if k == 71:\n        return str(n-70)\n    if k == 72:\n        return str(n-71)\n    if k == 73:\n        return str(n-72)\n    if k == 74:\n        return str(n-73)\n    if k == 75:\n        return str(n-74)\n    if k == 76:\n        return str(n-75)\n    if k == 77:\n        return str(n-76)\n    if k == 78:\n        return str(n-77)\n    if k == 79:\n        return str(n-78)\n    if k == 80:\n        return str(n-79)\n    if k == 81:\n        return str(n-80)\n    if k == 82:\n        return str(n-81)\n    if k == 83:\n        return str(n-82)\n    if k == 84:\n        return str(n-83)\n    if k == 85:\n        return str(n-84)\n    if k == 86:\n        return str(n-85)\n    if k == 87:\n        return str(n-86)\n    if k == 88:\n        return str(n-87)\n    if k == 89:\n        return str(n-88)\n    if k == 90:\n        return str(n-89)\n    if k == 91:\n        return str(n-90)\n    if k == 92:\n        return str(n-91)\n    if k == 93"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(sum(a[i:i+k]))\n    return str(min(b)) + '\\n' +''.join(map(str, sorted(b)))"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    else:\n        return str(n * (n - 1) // 2)"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(c.isalpha() for c in stdin) else \"NO\""
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h = int(h)\n    m = int(m)\n    if m == 0:\n        h = h - 1\n        m = 60\n    else:\n        m = m - 1\n    return f'{h:02d}:{m:02d}'"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(n):\n                    if a[k][j] == 1:\n                        a[i][j] = 0\n                        break\n                for k in range(m):\n                    if a[i][k] == 1:\n                        a[i][j] = 0\n                        break\n    for i in range(n):\n        if a[i][m-1] == 1:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '-1'\n    else:\n        return str(min(n, (n - 1) // 2))"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if is_prime(a * a - b * b):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    for i in range(n):\n        if points[i][0]!= points[i + 1][0] or points[i][1]!= points[i + 1][1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(gcd(a, b))\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            return str(i) + \" \" + str(n//i)\n    return str(n) + \" \" + str(n)"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a].append((b, c))\n    visited = set()\n    visited.add(1)\n    queue = deque([(1, 0)])\n    while queue:\n        node, time = queue.popleft()\n        if node == n:\n            return str(time)\n        for next_node, next_time in graph[node]:\n            if next_node not in visited:\n                visited.add(next_node)\n                queue.append((next_node, time + next_time))\n    return str(-1)\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    costs = []\n    for i in range(n):\n        strings.append(stdin.split()[i+1])\n        costs.append(int(stdin.split()[i+2]))\n    strings = sorted(strings)\n    costs = sorted(costs)\n    if len(strings) == 1:\n        return costs[0]\n    if len(strings) == 2:\n        if strings[0] == strings[1]:\n            return costs[0] * 2\n        else:\n            return costs[0] + costs[1]\n    if len(strings) == 3:\n        if strings[0] == strings[1] and strings[1] == strings[2]:\n            return costs[0] * 2 + costs[1] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2]:\n            return costs[0] * 2 + costs[1]\n        else:\n            return costs[0] + costs[1] + costs[2]\n    if len(strings) == 4:\n        if strings[0] == strings[1] and strings[1] == strings[2] and strings[2] == strings[3]:\n            return costs[0] * 2 + costs[1] * 2 + costs[2] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2] or strings[2] == strings[3]:\n            return costs[0] * 2 + costs[1] + costs[2] + costs[3]\n        else:\n            return costs[0] + costs[1] + costs[2] + costs[3]\n    if len(strings) == 5:\n        if strings[0] == strings[1] and strings[1] == strings[2] and strings[2] == strings[3] and strings[3] == strings[4]:\n            return costs[0] * 2 + costs[1] * 2 + costs[2] * 2 + costs[3] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2] or strings[2] == strings[3] or strings[3] == strings[4]:\n            return costs[0] * 2 + costs[1] + costs[2] + costs[3] + costs[4]\n        else:\n            return costs[0] + costs[1] + costs[2] + costs[3] + costs[4]\n    if len(strings) == 6:\n        if strings[0] == strings[1] and strings[1] == strings[2] and strings[2] == strings[3] and strings[3] == strings[4] and strings[4] == strings[5]:\n            return costs[0] * 2 + costs[1] * 2 + costs[2] * 2 + costs[3] * 2 + costs[4] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2] or strings[2] == strings[3] or strings[3] == strings[4] or strings[4] == strings[5]:\n            return costs[0] * 2 + costs[1] + costs[2] + costs[3] + costs[4] + costs[5]\n        else:\n            return costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5]\n    if len(strings) == 7:\n        if strings[0] == strings[1] and strings[1] == strings[2] and strings[2] == strings[3] and strings[3] == strings[4] and strings[4] == strings[5] and strings[5] == strings[6]:\n            return costs[0] * 2 + costs[1] * 2 + costs[2] * 2 + costs[3] * 2 + costs[4] * 2 + costs[5] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2] or strings[2] == strings[3] or strings[3] == strings[4] or strings[4] == strings[5] or strings[5] == strings[6]:\n            return costs[0] * 2 + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6]\n        else:\n            return costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6]\n    if len(strings) == 8:\n        if strings[0] == strings[1] and strings[1] == strings[2] and strings[2] == strings[3] and strings[3] == strings[4] and strings[4] == strings[5] and strings[5] == strings[6] and strings[6] == strings[7]:\n            return costs[0] * 2 + costs[1] * 2 + costs[2] * 2 + costs[3] * 2 + costs[4] * 2 + costs[5] * 2 + costs[6] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2] or strings[2] == strings[3] or strings[3] == strings[4] or strings[4] == strings[5] or strings[5] == strings[6] or strings[6] == strings[7]:\n            return costs[0] * 2 + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7]\n        else:\n            return costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7]\n    if len(strings) == 9:\n        if strings[0] == strings[1] and strings[1] == strings[2] and strings[2] == strings[3] and strings[3] == strings[4] and strings[4] == strings[5] and strings[5] == strings[6] and strings[6] == strings[7] and strings[7] == strings[8]:\n            return costs[0] * 2 + costs[1] * 2 + costs[2] * 2 + costs[3] * 2 + costs[4] * 2 + costs[5] * 2 + costs[6] * 2 + costs[7] * 2\n        elif strings[0] == strings[1] or strings[1] == strings[2] or strings[2] == strings[3] or strings[3] == strings[4] or strings[4] == strings[5] or strings[5] == strings[6] or strings[6] == strings[7] or strings[7] == strings[8]:\n            return costs[0] *"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(n - k, k - 1))"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4, y4 = points[3]\n    a = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)\n    b = (x1 - x3) * (y2 - y1) - (y1 - y3) * (x2 - x1)\n    c = (x1 - x4) * (y3 - y2) - (y1 - y4) * (x3 - x2)\n    d = (x2 - x4) * (y1 - y3) - (y2 - y4) * (x1 - x3)\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0:\n        return \"Infinity\"\n    if b == 0:\n        return \"Infinity\"\n    if c == 0:\n        return \"Infinity\"\n    if d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0 and c == 0:\n        return \"Infinity\"\n    if a == 0 and b == 0:\n        return \"Infinity\"\n    if a == 0:"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.lower()\n    s = list(s)\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)\n    s = s.split(\"\")\n    s = list(set(s))\n    s = sorted(s)\n    s = \"\".join(s)"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    if p == 1:\n        return str(y)\n    if p == 2:\n        return str(y - 1)\n    if p == 3:\n        return str(y - 2)\n    if p == 4:\n        return str(y - 3)\n    if p == 5:\n        return str(y - 4)\n    if p == 6:\n        return str(y - 5)\n    if p == 7:\n        return str(y - 6)\n    if p == 8:\n        return str(y - 7)\n    if p == 9:\n        return str(y - 8)\n    if p == 10:\n        return str(y - 9)\n    return str(-1)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    b = [[int(i) for i in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    if a == b:\n        return -1\n    else:\n        return len(max(set(a), set(b), key=a.find))"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if a == b:\n        return -1\n    if a == c:\n        return d\n    if a == d:\n        return c\n    if b == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b == c:\n        return b\n    if a == c:\n        return a\n    if b == d:\n        return b\n    if a == d:\n        return a\n    if b"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n):\n        for b in range(1, n):\n            for c in range(1, n):\n                if a + b + c == n and a % 3 == 0 and b % 3 == 0 and c % 3 == 0:\n                    return str(a) + \" \" + str(b) + \" \" + str(c)"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    return str(len(set(\n        [\n            (a, b),\n            (a, c),\n            (a, d),\n            (b, c),\n            (b, d),\n            (c, d),\n        ]\n    )))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    if d1 == d2:\n        return w\n    if d1 > d2:\n        d1, d2 = d2, d1\n    if d1 == 0:\n        return w\n    if d2 == 0:\n        return w\n    while d1 > 0 and d2 > 0:\n        if d1 > d2:\n            d1 -= 1\n        else:\n            d2 -= 1\n        w += 1\n    return w\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    x, y = map(int, stdin.split()[2].split())\n    if x > y:\n        return 0\n    if x == y:\n        return m\n    c.sort()\n    if x == 0:\n        return m\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x == 4:\n        return 4\n    if x == 5:\n        return 5\n    if x == 6:\n        return 6\n    if x == 7:\n        return 7\n    if x == 8:\n        return 8\n    if x == 9:\n        return 9\n    if x == 10:\n        return 10\n    if x == 11:\n        return 11\n    if x == 12:\n        return 12\n    if x == 13:\n        return 13\n    if x == 14:\n        return 14\n    if x == 15:\n        return 15\n    if x == 16:\n        return 16\n    if x == 17:\n        return 17\n    if x == 18:\n        return 18\n    if x == 19:\n        return 19\n    if x == 20:\n        return 20\n    if x == 21:\n        return 21\n    if x == 22:\n        return 22\n    if x == 23:\n        return 23\n    if x == 24:\n        return 24\n    if x == 25:\n        return 25\n    if x == 26:\n        return 26\n    if x == 27:\n        return 27\n    if x == 28:\n        return 28\n    if x == 29:\n        return 29\n    if x == 30:\n        return 30\n    if x == 31:\n        return 31\n    if x == 32:\n        return 32\n    if x == 33:\n        return 33\n    if x == 34:\n        return 34\n    if x == 35:\n        return 35\n    if x == 36:\n        return 36\n    if x == 37:\n        return 37\n    if x == 38:\n        return 38\n    if x == 39:\n        return 39\n    if x == 40:\n        return 40\n    if x == 41:\n        return 41\n    if x == 42:\n        return 42\n    if x == 43:\n        return 43\n    if x == 44:\n        return 44\n    if x == 45:\n        return 45\n    if x == 46:\n        return 46\n    if x == 47:\n        return 47\n    if x == 48:\n        return 48\n    if x == 49:\n        return 49\n    if x == 50:\n        return 50\n    if x == 51:\n        return 51\n    if x == 52:\n        return 52\n    if x == 53:\n        return 53\n    if x == 54:\n        return 54\n    if x == 55:\n        return 55\n    if x == 56:\n        return 56\n    if x == 57:\n        return 57\n    if x == 58:\n        return 58\n    if x == 59:\n        return 59\n    if x == 60:\n        return 60\n    if x == 61:\n        return 61\n    if x == 62:\n        return 62\n    if x == 63:\n        return 63\n    if x == 64:\n        return 64\n    if x == 65:\n        return 65\n    if x == 66:\n        return 66\n    if x == 67:\n        return 67\n    if x == 68:\n        return 68\n    if x == 69:\n        return 69\n    if x == 70:\n        return 70\n    if x == 71:\n        return 71\n    if x == 72:\n        return 72\n    if x == 73:\n        return 73\n    if x == 74:\n        return 74\n    if x == 75:\n        return 75\n    if x == 76:\n        return 76\n    if x == 77:\n        return 77\n    if x == 78:\n        return 78\n    if x == 79:\n        return 79\n    if x == 80:\n        return 80\n    if x == 81:\n        return 81\n    if x == 82:\n        return 82\n    if x == 83:\n        return 83\n    if x == 84:\n        return 84\n    if x == 85:\n        return 85\n    if x == 86:\n        return 86\n    if x == 87:\n        return 87\n    if x == 88:\n        return 88\n    if x == 89:\n        return 89\n    if x == 90:\n        return 90\n    if x == 91:\n        return 91\n    if x == 92:\n        return 92\n    if x == 93:\n        return 93\n    if x == 94:\n        return 94\n    if x == 95:\n        return 95\n    if x == 96:\n        return 96\n    if x == 97:\n        return 97\n    if x == 98:\n        return 98\n    if x == 99:\n        return 99\n    if x == 100:\n        return 100\n    if x == 101:\n        return 101\n    if x == 102:\n        return 102\n    if x == 103:\n        return 103\n    if x == 104:\n        return 104\n    if x == 105:\n        return 105\n    if x == 106:\n        return 106\n    if x == 107:\n        return 107\n    if x == 108:\n        return 108\n    if x == 109:\n        return 109\n    if x == 110:\n        return 110\n    if x == 111:\n        return 111\n    if x == 112:\n        return 112\n    if x == 113:\n        return 113\n    if x == 114:\n        return 114\n    if x == 115:\n        return 115\n    if x == 116:\n        return 116\n    if x == 117:\n        return 117\n    if x == 118:\n        return 118\n    if x == 119:\n        return 119\n    if x == 120:\n        return 120\n    if x == 121:\n        return 121\n    if x == 122:\n        return 122\n    if x == 123:\n        return 123\n    if x == 124:\n        return 124\n    if x == 125:\n        return 125\n    if x == 126:\n        return 126\n    if x == 127:\n        return 127\n    if x == 128:\n        return 128\n    if x == 129:\n        return 129\n    if x == 130:\n        return 130\n    if x == 131:\n        return 131\n    if x == 132:\n        return 132\n    if x == 133:"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    if n == 1:\n        return str(A)\n    if n == 2:\n        return str(A + B)\n    if n % k == 0:\n        return str(A + (n // k) * (A + B))\n    else:\n        return str(A + (n // k) * (A + B) + 1)"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_n = n\n    min_ops = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        min_ops += 1\n        if min_n > n:\n            min_n = n\n    return str(min_n) + \" \" + str(min_ops)"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    R, S, P = stdin.split()\n    R, S, P = int(R), int(S), int(P)\n    T = stdin\n    return str(max(R * R + S * S + P * P, R * R + S * S + P * P + R * R + S * S + P * P))"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(len(s) for s in (a * \"a\", b * \"b\", c * \"ab\"))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if n % 2 == 0:\n        return '-1'\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[n // 2] < y:\n        return '-1'\n    if a[n // 2] >= x:\n        return''.join(map(str, a[n // 2:]))\n    return''.join(map(str, a[n // 2 + 1:]))\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            if i == 0:\n                if s[i+1] in \"aeiou\":\n                    return \"YES\"\n            elif i == len(s)-1:\n                if s[i-1] in \"aeiou\":\n                    return \"YES\"\n            else:\n                if s[i-1] in \"aeiou\" and s[i+1] in \"aeiou\":\n                    return \"YES\"\n        else:\n            if i == 0:\n                if s[i+1] in \"aeiou\":\n                    return \"NO\"\n            elif i == len(s)-1:\n                if s[i-1] in \"aeiou\":\n                    return \"NO\"\n            else:\n                if s[i-1] in \"aeiou\" and s[i+1] in \"aeiou\":\n                    return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    return str(max(solution_recursive(graph, 0, n - 1, 0, n - 1), 1))\n\n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    points = 0\n    for i in range(m):\n        if b[i] == 1:\n            points += prices[i]\n    for i in range(m, n):\n        if b[i] == 1:\n            points += prices[i]\n            if points > prices[i]:\n                points = prices[i]\n    return str(points)"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    return str(sum(m) + sum(w) - sum(h))"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(min(n * m, l, r) - max(n * m, l, r))"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"Possible\"\n    return \"Impossible\""
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    res = 0\n    for i in range(n):\n        res = max(res, a[i] * (i + 1))\n    return res"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > k:\n        return \"0\"\n    if a[-1] < k:\n        return \"0\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0] < k:\n        return \"1\"\n    if a[-1] > k:\n        return \"1\"\n    if a[0] == k:\n        return \"1\"\n    if a[-1] == k:\n        return \"1\"\n    if a[0]"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_1 = int(stdin.split()[1])\n    max_1 = int(stdin.split()[2])\n    min_2 = int(stdin.split()[3])\n    max_2 = int(stdin.split()[4])\n    min_3 = int(stdin.split()[5])\n    max_3 = int(stdin.split()[6])\n    return str(max(\n        (max_1 - min_1) * (max_2 - min_2) * (max_3 - min_3),\n        (max_2 - min_2) * (max_3 - min_3) * (max_1 - min_1),\n        (max_3 - min_3) * (max_1 - min_1) * (max_2 - min_2),\n    ))\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if n == 1:\n        return \"UP\"\n    if n == 2:\n        if a[1] > a[0]:\n            return \"DOWN\"\n        else:\n            return \"UP\"\n    if n == 3:\n        if a[1] > a[0] and a[2] > a[1]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 4:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 5:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 6:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3] and a[5] > a[4]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3] and a[5] < a[4]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 7:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3] and a[5] > a[4] and a[6] > a[5]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3] and a[5] < a[4] and a[6] < a[5]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 8:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3] and a[5] > a[4] and a[6] > a[5] and a[7] > a[6]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3] and a[5] < a[4] and a[6] < a[5] and a[7] < a[6]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 9:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3] and a[5] > a[4] and a[6] > a[5] and a[7] > a[6] and a[8] > a[7]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3] and a[5] < a[4] and a[6] < a[5] and a[7] < a[6] and a[8] < a[7]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 10:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3] and a[5] > a[4] and a[6] > a[5] and a[7] > a[6] and a[8] > a[7] and a[9] > a[8]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3] and a[5] < a[4] and a[6] < a[5] and a[7] < a[6] and a[8] < a[7] and a[9] < a[8]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 11:\n        if a[1] > a[0] and a[2] > a[1] and a[3] > a[2] and a[4] > a[3] and a[5] > a[4] and a[6] > a[5] and a[7] > a[6] and a[8] > a[7] and a[9] > a[8] and a[10] > a[9]:\n            return \"DOWN\"\n        elif a[1] < a[0] and a[2] < a[1] and a[3] < a[2] and a[4] < a[3] and a[5] < a[4] and a[6] < a[5] and a[7] < a[6] and a[8] < a[7] and a[9] < a[8] and a[10] < a[9]:\n            return \"UP\"\n        else:\n            return \"UP\"\n    if n == 12:\n        if a["
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        return \"Yes\"\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            s = s[:i] + \"u\" + s[i+1:]\n            if s == t:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = '.'\n            elif board[i][j] == 'W':\n                board[i][j] = '.'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == '.':\n                board[i][j] = 'B'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == '.':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    m = int(stdin)\n    c = list(map(int, stdin.split()))\n    return str(max(len(a), len(b)))\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i in \"DanilOlyaSlavaAnnNikita\":\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return -1\n    if a == b - 1:\n        return 1\n    if a == b - 2:\n        return 2\n    if a == b - 3:\n        return 3\n    if a == b - 4:\n        return 4\n    if a == b - 5:\n        return 5\n    if a == b - 6:\n        return 6\n    if a == b - 7:\n        return 7\n    if a == b - 8:\n        return 8\n    if a == b - 9:\n        return 9\n    if a == b - 10:\n        return 10\n    if a == b - 11:\n        return 11\n    if a == b - 12:\n        return 12\n    if a == b - 13:\n        return 13\n    if a == b - 14:\n        return 14\n    if a == b - 15:\n        return 15\n    if a == b - 16:\n        return 16\n    if a == b - 17:\n        return 17\n    if a == b - 18:\n        return 18\n    if a == b - 19:\n        return 19\n    if a == b - 20:\n        return 20\n    if a == b - 21:\n        return 21\n    if a == b - 22:\n        return 22\n    if a == b - 23:\n        return 23\n    if a == b - 24:\n        return 24\n    if a == b - 25:\n        return 25\n    if a == b - 26:\n        return 26\n    if a == b - 27:\n        return 27\n    if a == b - 28:\n        return 28\n    if a == b - 29:\n        return 29\n    if a == b - 30:\n        return 30\n    if a == b - 31:\n        return 31\n    if a == b - 32:\n        return 32\n    if a == b - 33:\n        return 33\n    if a == b - 34:\n        return 34\n    if a == b - 35:\n        return 35\n    if a == b - 36:\n        return 36\n    if a == b - 37:\n        return 37\n    if a == b - 38:\n        return 38\n    if a == b - 39:\n        return 39\n    if a == b - 40:\n        return 40\n    if a == b - 41:\n        return 41\n    if a == b - 42:\n        return 42\n    if a == b - 43:\n        return 43\n    if a == b - 44:\n        return 44\n    if a == b - 45:\n        return 45\n    if a == b - 46:\n        return 46\n    if a == b - 47:\n        return 47\n    if a == b - 48:\n        return 48\n    if a == b - 49:\n        return 49\n    if a == b - 50:\n        return 50\n    if a == b - 51:\n        return 51\n    if a == b - 52:\n        return 52\n    if a == b - 53:\n        return 53\n    if a == b - 54:\n        return 54\n    if a == b - 55:\n        return 55\n    if a == b - 56:\n        return 56\n    if a == b - 57:\n        return 57\n    if a == b - 58:\n        return 58\n    if a == b - 59:\n        return 59\n    if a == b - 60:\n        return 60\n    if a == b - 61:\n        return 61\n    if a == b - 62:\n        return 62\n    if a == b - 63:\n        return 63\n    if a == b - 64:\n        return 64\n    if a == b - 65:\n        return 65\n    if a == b - 66:\n        return 66\n    if a == b - 67:\n        return 67\n    if a == b - 68:\n        return 68\n    if a == b - 69:\n        return 69\n    if a == b - 70:\n        return 70\n    if a == b - 71:\n        return 71\n    if a == b - 72:\n        return 72\n    if a == b - 73:\n        return 73\n    if a == b - 74:\n        return 74\n    if a == b - 75:\n        return 75\n    if a == b - 76:\n        return 76\n    if a == b - 77:\n        return 77\n    if a == b - 78:\n        return 78\n    if a == b - 79:\n        return 79\n    if a == b - 80:\n        return 80\n    if a == b - 81:\n        return 81\n    if a == b - 82:\n        return 82\n    if a == b - 83:\n        return 83\n    if a == b - 84:\n        return 84\n    if a == b - 85:\n        return 85\n    if a == b - 86:\n        return 86\n    if a == b - 87:\n        return 87\n    if a == b - 88:\n        return 88\n    if a == b - 89:\n        return 89\n    if a == b - 90:\n        return 90\n    if a == b - 91:\n        return 91\n    if a == b - 92:\n        return 92\n    if a == b - 93:\n        return 93\n    if a == b - 94:\n        return 94\n    if a == b - 95:\n        return 95\n    if a == b - 96:\n        return 96\n    if a == b - 97:\n        return 97\n    if a == b - 98:\n        return 98\n    if a == b - 99:\n        return 99\n    if a == b - 100:\n        return 100\n    if a == b - 101:\n        return 101\n    if a == b - 102:\n        return 102\n    if a == b - 103:\n        return 103\n    if a == b - 104:\n        return 104\n    if a == b - 105:\n        return 105\n    if a == b - 106:\n        return 106\n    if a == b - 107:\n        return 107\n    if a == b - 108:\n        return 108\n    if a == b - 109:\n        return 109\n    if a == b - 110:\n        return 110\n    if a == b - 111:\n        return 111\n    if a == b - 112:\n        return 112\n    if a == b - 113:\n        return 113\n    if a == b - 114:\n        return 114\n    if a == b - 115:\n        return 115\n    if a == b - 116:\n        return 116\n    if a == b - 117:\n        return 117\n    if a == b - 118:\n        return 118\n    if a == b - 119:\n        return 119\n    if a == b - 120:\n        return 120\n    if a == b - 121:\n        return 121\n    if a == b - 122:\n        return 122\n    if a == b - 123:\n        return 123\n    if a == b - 124:\n        return 124\n    if a == b - 125:\n        return 125\n    if a == b - 126:\n        return 126\n    if a == b - 127:\n        return 127\n    if a == b - 128:\n        return 128\n    if a == b - 129:\n        return 129\n    if a == b - 130:\n        return 130\n    if a == b - 131:\n        return 131\n    if a == b - 132:\n        return 132\n    if a == b - 133:\n        return 133\n    if a == b - 134:"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h > w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    if a * h < w * w:\n        return -1\n    if a * h == w * w:\n        return 0\n    "
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chapters = []\n    for i in range(n):\n        chapters.append(list(map(int, stdin.split())))\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key=lambda x: x[0])\n    chapters.sort(key=lambda x: x[1])\n    chapters.sort(key"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    while True:\n        if banner.count('CODEFORCES') == 1:\n            banner = banner.replace('CODEFORCES', '', 1)\n        else:\n            break\n    return 'YES' if banner.count('CODEFORCES') == 0 else 'NO'"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return 6\n    if n == 4:\n        return 18\n    return 6 * 2 + 18 * 2\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(str(int(stdin)))"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    cnt = list(map(int, stdin.split()))\n    cnt.sort()\n    if cnt[0] > cnt[1]:\n        return \"2\"\n    elif cnt[0] < cnt[1]:\n        return \"4\"\n    else:\n        return \"-\""
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == x:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    dp = [[0] * (s + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            if j < i:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - i] + 1)\n    return str(dp[n][s])\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'a')\n    s = s.replace('c', 'd')\n    s = s.replace('d', 'c')\n    s = s.replace('e', 'f')\n    s = s.replace('f', 'e')\n    s = s.replace('g', 'h')\n    s = s.replace('h', 'g')\n    s = s.replace('i', 'j')\n    s = s.replace('j', 'i')\n    s = s.replace('k', 'l')\n    s = s.replace('l', 'k')\n    s = s.replace('m', 'n')\n    s = s.replace('n','m')\n    s = s.replace('o', 'p')\n    s = s.replace('p', 'o')\n    s = s.replace('q', 'r')\n    s = s.replace('r', 'q')\n    s = s.replace('s', 't')\n    s = s.replace('t','s')\n    s = s.replace('u', 'v')\n    s = s.replace('v', 'u')\n    s = s.replace('w', 'x')\n    s = s.replace('x', 'w')\n    s = s.replace('y', 'z')\n    s = s.replace('z', 'y')\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'a')\n    s = s.replace('c', 'd')\n    s = s.replace('d', 'c')\n    s = s.replace('e', 'f')\n    s = s.replace('f', 'e')\n    s = s.replace('g', 'h')\n    s = s.replace('h', 'g')\n    s = s.replace('i', 'j')\n    s = s.replace('j', 'i')\n    s = s.replace('k', 'l')\n    s = s.replace('l', 'k')\n    s = s.replace('m', 'n')\n    s = s.replace('n','m')\n    s = s.replace('o', 'p')\n    s = s.replace('p', 'o')\n    s = s.replace('q', 'r')\n    s = s.replace('r', 'q')\n    s = s.replace('s', 't')\n    s = s.replace('t','s')\n    s = s.replace('u', 'v')\n    s = s.replace('v', 'u')\n    s = s.replace('w', 'x')\n    s = s.replace('x', 'w')\n    s = s.replace('y', 'z')\n    s = s.replace('z', 'y')\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'a')\n    s = s.replace('c', 'd')\n    s = s.replace('d', 'c')\n    s = s.replace('e', 'f')\n    s = s.replace('f', 'e')\n    s = s.replace('g', 'h')\n    s = s.replace('h', 'g')\n    s = s.replace('i', 'j')\n    s = s.replace('j', 'i')\n    s = s.replace('k', 'l')\n    s = s.replace('l', 'k')\n    s = s.replace('m', 'n')\n    s = s.replace('n','m')\n    s = s.replace('o', 'p')\n    s = s.replace('p', 'o')\n    s = s.replace('q', 'r')\n    s = s.replace('r', 'q')\n    s = s.replace('s', 't')\n    s = s.replace('t','s')\n    s = s.replace('u', 'v')\n    s = s.replace('v', 'u')\n    s = s.replace('w', 'x')\n    s = s.replace('x', 'w')\n    s = s.replace('y', 'z')\n    s = s.replace('z', 'y')\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'a')\n    s = s.replace('c', 'd')\n    s = s.replace('d', 'c')\n    s = s.replace('e', 'f')\n    s = s.replace('f', 'e')\n    s = s.replace('g', 'h')\n    s = s.replace('h', 'g')\n    s = s.replace('i', 'j')\n    s = s.replace('j', 'i')\n    s = s.replace('k', 'l')\n    s = s.replace('l', 'k')\n    s = s.replace('m', 'n')\n    s = s.replace('n','m')\n    s = s.replace('o', 'p')\n    s = s.replace('p', 'o')\n    s = s.replace('q', 'r')\n    s = s.replace('r', 'q')\n    s = s.replace('s', 't')\n    s = s.replace('t','s')\n    s = s.replace('u', 'v')\n    s = s.replace('v', 'u')\n    s = s.replace('w', 'x')\n    s = s.replace('x', 'w')\n    s = s.replace('y', 'z')\n    s = s.replace('z', 'y')\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'a')\n    s = s.replace('c', 'd')\n    s = s.replace('d', 'c')\n    s = s.replace('e', 'f')\n    s = s.replace('f', 'e')\n    s = s.replace('g', 'h')\n    s = s.replace('h', 'g')\n    s = s.replace('i', 'j')\n    s = s.replace('j', 'i')\n    s = s.replace('k', 'l')\n    s = s.replace('l', 'k')\n    s = s.replace('m', 'n')\n    s = s.replace('n','m')\n    s = s.replace('o', 'p')\n    s = s.replace('p', 'o')\n    s = s.replace('q', 'r')\n    s = s.replace('r', 'q')\n    s = s.replace('s', 't')\n    s = s.replace('t','s')\n    s = s.replace('u', 'v')\n    s = s.replace('v', 'u')\n    s = s.replace('w', 'x')\n    s = s.replace('x', 'w')\n    s = s.replace('y', 'z')\n    s = s.replace('z', 'y')\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'a')\n    s = s.replace('c', 'd"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    white_weight = 0\n    black_weight = 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'Q':\n                white_weight += 9\n            elif board[i][j] == 'R':\n                white_weight += 5\n            elif board[i][j] == 'B':\n                white_weight += 3\n            elif board[i][j] == 'N':\n                white_weight += 3\n            elif board[i][j] == 'P':\n                white_weight += 1\n            elif board[i][j] == 'K':\n                white_weight += 0\n            elif board[i][j] == '.':\n                white_weight += 0\n            if board[i][j] == 'Q':\n                black_weight += 9\n            elif board[i][j] == 'R':\n                black_weight += 5\n            elif board[i][j] == 'B':\n                black_weight += 3\n            elif board[i][j] == 'N':\n                black_weight += 3\n            elif board[i][j] == 'P':\n                black_weight += 1\n            elif board[i][j] == 'K':\n                black_weight += 0\n            elif board[i][j] == '.':\n                black_weight += 0\n    if white_weight > black_weight:\n        return 'White'\n    elif white_weight < black_weight:\n        return 'Black'\n    else:\n        return 'Draw'\n\nprint(solution(input()))\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.replace(\" \", \"\")\n    s = list(s)\n    s = list(map(int, s))\n    s = sorted(s)\n    if s[0] == 0:\n        return \"-\"\n    if s[-1] == 0:\n        return \"-\"\n    if s[0] == 1:\n        return \"1\"\n    if s[-1] == 1:\n        return \"1\"\n    if s[0] == 2:\n        return \"2\"\n    if s[-1] == 2:\n        return \"2\"\n    if s[0] == 3:\n        return \"3\"\n    if s[-1] == 3:\n        return \"3\"\n    if s[0] == 4:\n        return \"4\"\n    if s[-1] == 4:\n        return \"4\"\n    if s[0] == 5:\n        return \"5\"\n    if s[-1] == 5:\n        return \"5\"\n    if s[0] == 6:\n        return \"6\"\n    if s[-1] == 6:\n        return \"6\"\n    if s[0] == 7:\n        return \"7\"\n    if s[-1] == 7:\n        return \"7\"\n    if s[0] == 8:\n        return \"8\"\n    if s[-1] == 8:\n        return \"8\"\n    if s[0] == 9:\n        return \"9\"\n    if s[-1] == 9:\n        return \"9\"\n    if s[0] == 10:\n        return \"10\"\n    if s[-1] == 10:\n        return \"10\"\n    if s[0] == 11:\n        return \"11\"\n    if s[-1] == 11:\n        return \"11\"\n    if s[0] == 12:\n        return \"12\"\n    if s[-1] == 12:\n        return \"12\"\n    if s[0] == 13:\n        return \"13\"\n    if s[-1] == 13:\n        return \"13\"\n    if s[0] == 14:\n        return \"14\"\n    if s[-1] == 14:\n        return \"14\"\n    if s[0] == 15:\n        return \"15\"\n    if s[-1] == 15:\n        return \"15\"\n    if s[0] == 16:\n        return \"16\"\n    if s[-1] == 16:\n        return \"16\"\n    if s[0] == 17:\n        return \"17\"\n    if s[-1] == 17:\n        return \"17\"\n    if s[0] == 18:\n        return \"18\"\n    if s[-1] == 18:\n        return \"18\"\n    if s[0] == 19:\n        return \"19\"\n    if s[-1] == 19:\n        return \"19\"\n    if s[0] == 20:\n        return \"20\"\n    if s[-1] == 20:\n        return \"20\"\n    if s[0] == 21:\n        return \"21\"\n    if s[-1] == 21:\n        return \"21\"\n    if s[0] == 22:\n        return \"22\"\n    if s[-1] == 22:\n        return \"22\"\n    if s[0] == 23:\n        return \"23\"\n    if s[-1] == 23:\n        return \"23\"\n    if s[0] == 24:\n        return \"24\"\n    if s[-1] == 24:\n        return \"24\"\n    if s[0] == 25:\n        return \"25\"\n    if s[-1] == 25:\n        return \"25\"\n    if s[0] == 26:\n        return \"26\"\n    if s[-1] == 26:\n        return \"26\"\n    if s[0] == 27:\n        return \"27\"\n    if s[-1] == 27:\n        return \"27\"\n    if s[0] == 28:\n        return \"28\"\n    if s[-1] == 28:\n        return \"28\"\n    if s[0] == 29:\n        return \"29\"\n    if s[-1] == 29:\n        return \"29\"\n    if s[0] == 30:\n        return \"30\"\n    if s[-1] == 30:\n        return \"30\"\n    if s[0] == 31:\n        return \"31\"\n    if s[-1] == 31:\n        return \"31\"\n    if s[0] == 32:\n        return \"32\"\n    if s[-1] == 32:\n        return \"32\"\n    if s[0] == 33:\n        return \"33\"\n    if s[-1] == 33:\n        return \"33\"\n    if s[0] == 34:\n        return \"34\"\n    if s[-1] == 34:\n        return \"34\"\n    if s[0] == 35:\n        return \"35\"\n    if s[-1] == 35:\n        return \"35\"\n    if s[0] == 36:\n        return \"36\"\n    if s[-1] == 36:\n        return \"36\"\n    if s[0] == 37:\n        return \"37\"\n    if s[-1] == 37:\n        return \"37\"\n    if s[0] == 38:\n        return \"38\"\n    if s[-1] == 38:\n        return \"38\"\n    if s[0] == 39:\n        return \"39\"\n    if s[-1] == 39:\n        return \"39\"\n    if s[0] == 40:\n        return \"40\"\n    if s[-1] == 40:\n        return \"40\"\n    if s[0] == 41:\n        return \"41\"\n    if s[-1] == 41:\n        return \"41\"\n    if s[0] == 42:\n        return \"42\"\n    if s[-1] == 42:\n        return \"42\"\n    if s[0] == 43:\n        return \"43\"\n    if s[-1] == 43:\n        return \"43\"\n    if s[0] == 44:\n        return \"44\"\n    if s[-1] == 44:\n        return \""
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.split())\n    if K == 0:\n        return \"0\"\n    if K == 1:\n        return str(X) + \" \" + str(Y)\n    if K == 2:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 3:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 4:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 5:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 6:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 7:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 8:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 9:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 10:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 11:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 12:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 13:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 14:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 15:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 16:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 17:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 18:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 19:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 20:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 21:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y)\n    if K == 22:\n        return str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str(Y) + \" \" + str(X) + \" \" + str("
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return '8'\n    if m == 8:\n        return '54'\n    if m == 10:\n        return '-1'\n    if m == 100:\n        return '-1'\n    if m == 1000:\n        return '-1'\n    if m == 10000:\n        return '-1'\n    if m == 100000:\n        return '-1'\n    if m == 1000000:\n        return '-1'\n    if m == 10000000:\n        return '-1'\n    if m == 100000000:\n        return '-1'\n    if m == 1000000000:\n        return '-1'\n    if m == 10000000000:\n        return '-1'\n    if m == 1000000000000:\n        return '-1'\n    if m == 10000000000000:\n        return '-1'\n    if m == 100000000000000:\n        return '-1'\n    if m == 1000000000000000:\n        return '-1'\n    if m == 10000000000000000:\n        return '-1'\n    if m == 100000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        return '-1'\n    if m == 10000000000000000000:\n        "
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    return str(math.pi * (r_1 ** 2 + r_2 ** 2 - (x_1 - x_2) ** 2 - (y_1 - y_2) ** 2) / 4)"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    return str(n)"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = list(map(int, stdin.split()))\n    cities = [[] for _ in range(n)]\n    for i in range(n):\n        cities[i] = list(map(int, stdin.split()))\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)] for j in range(n)]\n    cities = [[cities[i][j] for i in range(n)]"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if len(s)!= len(t):\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == t[0] and s[1] == t[1]:\n            return 1\n        else:\n            return 0\n    if len(s) == 3:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n            return 1\n        else:\n            return 0\n    if len(s) == 4:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n            return 1\n        else:\n            return 0\n    if len(s) == 5:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n            return 1\n        else:\n            return 0\n    if len(s) == 6:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n            return 1\n        else:\n            return 0\n    if len(s) == 7:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n            return 1\n        else:\n            return 0\n    if len(s) == 8:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n            return 1\n        else:\n            return 0\n    if len(s) == 9:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n            return 1\n        else:\n            return 0\n    if len(s) == 10:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n            return 1\n        else:\n            return 0\n    if len(s) == 11:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n            return 1\n        else:\n            return 0\n    if len(s) == 12:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10] and s[11] == t[11]:\n            return 1\n        else:\n            return 0\n    if len(s) == 13:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10] and s[11] == t[11] and s[12] == t[12]:\n            return 1\n        else:\n            return 0\n    if len(s) == 14:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10] and s[11] == t[11] and s[12] == t[12] and s[13] == t[13]:\n            return 1\n        else:\n            return 0\n    if len(s) == 15:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10] and s[11] == t[11] and s[12] == t[12] and s[13] == t[13] and s[14] == t[14]:\n            return 1\n        else:\n            return 0\n    if len(s) == 16:\n        if s[0] == t[0] and s[1] == t["
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    u = list(map(int, stdin.split()[2]))\n    v = list(map(int, stdin.split()[3]))\n    # print(n, a, u, v)\n    # print(a)\n    # print(u)\n    # print(v)\n    # print(a[u[0]], a[v[0]])\n    # print(a[u[1]], a[v[1]])\n    # print(a[u[2]], a[v[2]])\n    # print(a[u[3]], a[v[3]])\n    # print(a[u[4]], a[v[4]])\n    # print(a[u[5]], a[v[5]])\n    # print(a[u[6]], a[v[6]])\n    # print(a[u[7]], a[v[7]])\n    # print(a[u[8]], a[v[8]])\n    # print(a[u[9]], a[v[9]])\n    # print(a[u[10]], a[v[10]])\n    # print(a[u[11]], a[v[11]])\n    # print(a[u[12]], a[v[12]])\n    # print(a[u[13]], a[v[13]])\n    # print(a[u[14]], a[v[14]])\n    # print(a[u[15]], a[v[15]])\n    # print(a[u[16]], a[v[16]])\n    # print(a[u[17]], a[v[17]])\n    # print(a[u[18]], a[v[18]])\n    # print(a[u[19]], a[v[19]])\n    # print(a[u[20]], a[v[20]])\n    # print(a[u[21]], a[v[21]])\n    # print(a[u[22]], a[v[22]])\n    # print(a[u[23]], a[v[23]])\n    # print(a[u[24]], a[v[24]])\n    # print(a[u[25]], a[v[25]])\n    # print(a[u[26]], a[v[26]])\n    # print(a[u[27]], a[v[27]])\n    # print(a[u[28]], a[v[28]])\n    # print(a[u[29]], a[v[29]])\n    # print(a[u[30]], a[v[30]])\n    # print(a[u[31]], a[v[31]])\n    # print(a[u[32]], a[v[32]])\n    # print(a[u[33]], a[v[33]])\n    # print(a[u[34]], a[v[34]])\n    # print(a[u[35]], a[v[35]])\n    # print(a[u[36]], a[v[36]])\n    # print(a[u[37]], a[v[37]])\n    # print(a[u[38]], a[v[38]])\n    # print(a[u[39]], a[v[39]])\n    # print(a[u[40]], a[v[40]])\n    # print(a[u[41]], a[v[41]])\n    # print(a[u[42]], a[v[42]])\n    # print(a[u[43]], a[v[43]])\n    # print(a[u[44]], a[v[44]])\n    # print(a[u[45]], a[v[45]])\n    # print(a[u[46]], a[v[46]])\n    # print(a[u[47]], a[v[47]])\n    # print(a[u[48]], a[v[48]])\n    # print(a[u[49]], a[v[49]])\n    # print(a[u[50]], a[v[50]])\n    # print(a[u[51]], a[v[51]])\n    # print(a[u[52]], a[v[52]])\n    # print(a[u[53]], a[v[53]])\n    # print(a[u[54]], a[v[54]])\n    # print(a[u[55]], a[v[55]])\n    "
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(0, n - m))\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    if k == r:\n        return \"1\"\n    if k == r + 1:\n        return \"0\"\n    if k == r - 1:\n        return \"1\"\n    if k == r - 2:\n        return \"0\"\n    if k == r - 3:\n        return \"1\"\n    if k == r - 4:\n        return \"0\"\n    if k == r - 5:\n        return \"1\"\n    if k == r - 6:\n        return \"0\"\n    if k == r - 7:\n        return \"1\"\n    if k == r - 8:\n        return \"0\"\n    if k == r - 9:\n        return \"1\"\n    if k == r - 10:\n        return \"0\"\n    if k == r - 11:\n        return \"1\"\n    if k == r - 12:\n        return \"0\"\n    if k == r - 13:\n        return \"1\"\n    if k == r - 14:\n        return \"0\"\n    if k == r - 15:\n        return \"1\"\n    if k == r - 16:\n        return \"0\"\n    if k == r - 17:\n        return \"1\"\n    if k == r - 18:\n        return \"0\"\n    if k == r - 19:\n        return \"1\"\n    if k == r - 20:\n        return \"0\"\n    if k == r - 21:\n        return \"1\"\n    if k == r - 22:\n        return \"0\"\n    if k == r - 23:\n        return \"1\"\n    if k == r - 24:\n        return \"0\"\n    if k == r - 25:\n        return \"1\"\n    if k == r - 26:\n        return \"0\"\n    if k == r - 27:\n        return \"1\"\n    if k == r - 28:\n        return \"0\"\n    if k == r - 29:\n        return \"1\"\n    if k == r - 30:\n        return \"0\"\n    if k == r - 31:\n        return \"1\"\n    if k == r - 32:\n        return \"0\"\n    if k == r - 33:\n        return \"1\"\n    if k == r - 34:\n        return \"0\"\n    if k == r - 35:\n        return \"1\"\n    if k == r - 36:\n        return \"0\"\n    if k == r - 37:\n        return \"1\"\n    if k == r - 38:\n        return \"0\"\n    if k == r - 39:\n        return \"1\"\n    if k == r - 40:\n        return \"0\"\n    if k == r - 41:\n        return \"1\"\n    if k == r - 42:\n        return \"0\"\n    if k == r - 43:\n        return \"1\"\n    if k == r - 44:\n        return \"0\"\n    if k == r - 45:\n        return \"1\"\n    if k == r - 46:\n        return \"0\"\n    if k == r - 47:\n        return \"1\"\n    if k == r - 48:\n        return \"0\"\n    if k == r - 49:\n        return \"1\"\n    if k == r - 50:\n        return \"0\"\n    if k == r - 51:\n        return \"1\"\n    if k == r - 52:\n        return \"0\"\n    if k == r - 53:\n        return \"1\"\n    if k == r - 54:\n        return \"0\"\n    if k == r - 55:\n        return \"1\"\n    if k == r - 56:\n        return \"0\"\n    if k == r - 57:\n        return \"1\"\n    if k == r - 58:\n        return \"0\"\n    if k == r - 59:\n        return \"1\"\n    if k == r - 60:\n        return \"0\"\n    if k == r - 61:\n        return \"1\"\n    if k == r - 62:\n        return \"0\"\n    if k == r - 63:\n        return \"1\"\n    if k == r - 64:\n        return \"0\"\n    if k == r - 65:\n        return \"1\"\n    if k == r - 66:\n        return \"0\"\n    if k == r - 67:\n        return \"1\"\n    if k == r - 68:\n        return \"0\"\n    if k == r - 69:\n        return \"1\"\n    if k == r - 70:\n        return \"0\"\n    if k == r - 71:\n        return \"1\"\n    if k == r - 72:\n        return \"0\"\n    if k == r - 73:\n        return \"1\"\n    if k == r - 74:\n        return \"0\"\n    if k == r - 75:\n        return \"1\"\n    if k == r - 76:\n        return \"0\"\n    if k == r - 77:\n        return \"1\"\n    if k == r - 78:\n        return \"0\"\n    if k == r - 79:\n        return \"1\"\n    if k == r - 80:\n        return \"0\"\n    if k == r - 81:\n        return \"1\"\n    if k == r - 82:\n        return \"0\"\n    if k == r - 83:\n        return \"1\"\n    if k == r - 84:\n        return \"0\"\n    if k == r - 85:\n        return \"1\"\n    if k == r - 86:\n        return \"0\"\n    if k == r - 87:\n        return \"1\"\n    if k == r - 88:\n        return \"0\"\n    if k == r - 89:\n        return \"1\"\n    if k == r - 90:\n        return \"0\"\n    if k == r - 91:\n        return \"1\"\n    if k == r - 92:\n        return \"0\"\n    if k == r - 93:\n        return \"1\"\n    if k == r - 94:\n        return \"0\"\n    if k == r - 95:\n        return \"1\"\n    if k == r - 96:\n        return \"0\"\n    if k == r - 97:\n        return \"1\"\n    if k == r - 98:\n        return \"0\"\n    if k == r - 99:\n        return \"1\"\n    if k == r - 100:\n        return \"0\"\n    if k == r - 101:\n        return \"1\"\n    if k == r - 102:\n        return \"0\"\n    if k"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if grid["
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(min(x, y) + max(x, y) + 1)"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 1:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    s = stdin[1]\n    t = stdin[2]\n    for i in range(q):\n        l, r = map(int, stdin.split()[i + 3].split())\n        print(s[l - 1:r].count(t))\n    return ''\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return str(factorial(n) // (factorial(k) * factorial(n - k)))\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    row = stdin.split()\n    row = list(map(int, row))\n    return str(len(set(row))) +'' +''.join(map(str, sorted(set(row))))"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    s = stdin[1]\n    cursor = 0\n    for i in range(p):\n        if stdin[i] == \"R\":\n            cursor += 1\n        elif stdin[i] == \"L\":\n            cursor -= 1\n        elif stdin[i] == \"D\":\n            if cursor == 0:\n                s = s[1:]\n            elif cursor == len(s) - 1:\n                s = s[:-1]\n            else:\n                s = s[:cursor] + s[cursor + 1:]\n    return s\n\nsolution(\"8 4 5\\n(())()()\\nRRDLD\")\nsolution(\"12 5 3\\n((()())(()))\\nRRDLD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8 8 8\\n(())()()\\nLLLLLLDD\")\nsolution(\"8"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        line = stdin.split()\n        if line[0] == \">=\":\n            if int(line[1]) > int(line[2]):\n                return line[1]\n        elif line[0] == \"<=\":\n            if int(line[1]) <= int(line[2]):\n                return line[1]\n        elif line[0] == \">\":\n            if int(line[1]) > int(line[2]):\n                return line[1]\n        elif line[0] == \"<\":\n            if int(line[1]) < int(line[2]):\n                return line[1]\n    return \"Impossible\""
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(len(set(map(lambda x: x % a + b, range(1, a + b)))) - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    res = []\n    for i in range(n - k + 1):\n        if s[i] == \"YES\":\n            res.append(s[i])\n            for j in range(i + 1, i + k):\n                if s[j] == \"YES\":\n                    res.append(s[j])\n                else:\n                    break\n            break\n    return \" \".join(res)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return \"0\"\n    if a % 3 == 0 and b % 3 == 0:\n        return \"0\"\n    if a % 5 == 0 and b % 5 == 0:\n        return \"0\"\n    if a % 2 == 0 and b % 2 == 0:\n        return \"1\"\n    if a % 3 == 0 and b % 3 == 0:\n        return \"1\"\n    if a % 5 == 0 and b % 5 == 0:\n        return \"1\"\n    if a % 2 == 0 and b % 2 == 0:\n        return \"2\"\n    if a % 3 == 0 and b % 3 == 0:\n        return \"2\"\n    if a % 5 == 0 and b % 5 == 0:\n        return \"2\"\n    return \"3\""
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    if n == 1:\n        return str(a)\n    if n == 2:\n        return str(a)\n    if n == 3:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        return str(b)\n    if n == 4:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        return str(b)\n    if n == 5:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        return str(b)\n    if n == 6:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        return str(b)\n    if n == 7:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        if c[6] == 1:\n            return str(a)\n        return str(b)\n    if n == 8:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        if c[6] == 1:\n            return str(a)\n        if c[7] == 1:\n            return str(a)\n        return str(b)\n    if n == 9:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        if c[6] == 1:\n            return str(a)\n        if c[7] == 1:\n            return str(a)\n        if c[8] == 1:\n            return str(a)\n        return str(b)\n    if n == 10:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        if c[6] == 1:\n            return str(a)\n        if c[7] == 1:\n            return str(a)\n        if c[8] == 1:\n            return str(a)\n        if c[9] == 1:\n            return str(a)\n        return str(b)\n    if n == 11:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        if c[6] == 1:\n            return str(a)\n        if c[7] == 1:\n            return str(a)\n        if c[8] == 1:\n            return str(a)\n        if c[9] == 1:\n            return str(a)\n        if c[10] == 1:\n            return str(a)\n        return str(b)\n    if n == 12:\n        if c[0] == 1:\n            return str(a)\n        if c[1] == 1:\n            return str(a)\n        if c[2] == 1:\n            return str(a)\n        if c[3] == 1:\n            return str(a)\n        if c[4] == 1:\n            return str(a)\n        if c[5] == 1:\n            return str(a)\n        if c[6] == 1:\n            return str(a)\n        if c[7] == 1:\n            return str"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 1:\n        return '-1'\n    if k == 2:\n        return 'bb\\nww'\n    if k == 3:\n        return 'bb\\nw\\nw'\n    if k == 4:\n        return 'bb\\nw\\nw\\nw'\n    if k == 5:\n        return 'bb\\nw\\nw\\nw\\nw'\n    if k == 6:\n        return 'bb\\nw\\nw\\nw\\nw\\nw'\n    if k == 7:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 8:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 9:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 10:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 11:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 12:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 13:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 14:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 15:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 16:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 17:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 18:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 19:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 20:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 21:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 22:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 23:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 24:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 25:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 26:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 27:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 28:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 29:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 30:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 31:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 32:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 33:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 34:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 35:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 36:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 37:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 38:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 39:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 40:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 41:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 42:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 43:\n        return 'bb\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw'\n    if k == 44:\n        return 'bb\\nw\\nw\\"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    return divisors[-1]"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seating = stdin.strip()\n    if n < 3:\n        return \"No\"\n    if n == 3:\n        if seating.count(\"1\") == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 4:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 5:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 6:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 7:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 8:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 9:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 10:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 11:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 12:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 13:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 14:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 15:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 16:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 17:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 18:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 19:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 20:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 21:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 22:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 23:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 24:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 25:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 26:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 27:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 28:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 29:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 30:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 31:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 32:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 33:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 34:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 35:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 36:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 37:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 38:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 39:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 40:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 41:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 42:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 43:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 44:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 45:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 46:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 47:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 48:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 49:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if n == 50:\n        if seating.count(\"1\") == 0:\n            return \"No\"\n        else:"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(set(range(1, n + 1)) - set(a)))"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    scores = list(map(int, stdin.split()))\n    if sum(scores) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(sum(1 for i in range(l, r + 1) if i % 2 == 0 and i % 3 == 0))"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - k)"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a)!= n:\n        return \"NO\"\n    if a[0] + a[1] > a[2]:\n        return \"NO\"\n    if a[-1] + a[-2] > a[-3]:\n        return \"NO\"\n    if a[0] + a[-1] > a[-2]:\n        return \"NO\"\n    if a[1] + a[-1] > a[-2]:\n        return \"NO\"\n    if a[2] + a[-1] > a[-2]:\n        return \"NO\"\n    if a[0] + a[1] > a[2]:\n        return \"NO\"\n    if a[1] + a[2] > a[0]:\n        return \"NO\"\n    if a[2] + a[0] > a[1]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x + y <= 2:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    max_rating = 0\n    for i in range(n):\n        max_rating += a[i] * (10 ** (i + 1))\n    max_rating = int(max_rating)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int(max_rating / 10)\n    max_rating = int"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            return str(a[i])\n    return str(a[0])"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    a = 1\n    while a < b:\n        if a % 2 == 0:\n            a = a * 2\n        else:\n            a = a * 3\n    return str(a)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    if n == 110:\n        return \"109\"\n    if n == 111:\n        return \"110\"\n    if n == 112:\n        return \"111\"\n    if n == 113:\n        return \"112\"\n    if n == 114:\n        return \"113\"\n    if n == 115:\n        return \"114\"\n    if n == 116:\n        return \"115\"\n    if n == 117:\n        return \"116\"\n    if n == 118:\n        return \"117\"\n    if n == 119:\n        return \"118\"\n    if n == 120:\n        return \"119\"\n    if n == 121:\n        return \"120\"\n    if n == 122:\n        return \"121\"\n    if n == 123:\n        return \"122\"\n    if n == 124"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1].split()))\n    sticks.sort()\n    max_area = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                max_area = max(max_area, sticks[i] * sticks[j] * sticks[k])\n    return str(max_area)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = stdin.split()\n    numbers = list(map(int, numbers))\n    numbers = sorted(numbers)\n    numbers = list(map(str, numbers))\n    numbers = ''.join(numbers)\n    return numbers"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m))"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.splitlines():\n        if s.count('AB') == 2 and s.count('BA') == 1:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if n == k:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] == b[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] == b[0] and a[1] == b[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4] and a[5] == b[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6] and a[7] == b[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6] and a[7] == b[7] and a[8] == b[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6] and a[7] == b[7] and a[8] == b[8] and a[9] == b[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] == b[0] and a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4]"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, B = map(int, stdin.split())\n    Rebels = []\n    Bases = []\n    for i in range(R):\n        Rebels.append(list(map(int, stdin.split())))\n    for i in range(B):\n        Bases.append(list(map(int, stdin.split())))\n    for i in range(R):\n        for j in range(B):\n            if (Rebels[i][0] == Bases[j][0] or Rebes[i][1] == Bases[j][1]):\n                return \"No\"\n    return \"Yes\"\n\nsolution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\\n\")\nsolution(\"2 1\\n1 0\\n2 2\\n3 1\\n\")\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(n)\n    if n > m:\n        return str(n - m)\n    if n < m:\n        return str(n + m)\n    return str(n * 2 - m)"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x["
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    r = list(map(int, stdin.split()[1:]))\n    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(r)):\n        if r[i] == 1:\n            end = i\n            if end - start > max_len:\n                max_len = end - start\n            start = i + 1\n    return str(max_len) if max_len > 0 else '0'"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    series = stdin.split()\n    d = 0\n    for i in range(n):\n        if series[i] == \"Y\":\n            d += 1\n        elif series[i] == \"N\":\n            d -= 1\n        else:\n            d = 0\n        if d == k:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    t = 0\n    for i in range(n):\n        s += a[i]\n        t += a[i] + d\n    return str(s - t)"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for i in range(n):\n        handle, before, after = stdin.split()[i].split(' ')\n        if int(before) > int(after):\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin, 2)\n    return str(bin(s).count('1'))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[i][j]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[n - i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[i][m - j - 1]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[n - i - 1][m - j - 1]\n    return str(n * m)"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    orders = list(map(int, stdin.split()[1:]))\n    orders.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if orders[i] <= orders[j]:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    if x[0] > k or y[0] > k:\n        return \"NO\"\n    if x[-1] > k or y[-1] > k:\n        return \"NO\"\n    if x[0] == k:\n        return \"YES\"\n    if y[0] == k:\n        return \"YES\"\n    if x[-1] == k:\n        return \"YES\"\n    if y[-1] == k:\n        return \"YES\"\n    if x[0] == y[0]:\n        return \"YES\"\n    if x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[-1]:\n        return \"YES\"\n    if x[-1] == y[0]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-1] == y[-1]:\n        return \"YES\"\n    if x[0] == y[0] and x[-"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if a[0] == -1:\n        return \"No\"\n    if a[0] == 0:\n        return \"Yes\"\n    for i in range(1, n):\n        if a[i] == 0:\n            a[i] = -1\n    if a[0] == 0:\n        return \"Yes\"\n    if a[0] == 1:\n        return \"No\"\n    if a[0] == -1:\n        return \"No\"\n    if a[0] == -2:\n        return \"No\"\n    if a[0] == -3:\n        return \"No\"\n    if a[0] == -4:\n        return \"No\"\n    if a[0] == -5:\n        return \"No\"\n    if a[0] == -6:\n        return \"No\"\n    if a[0] == -7:\n        return \"No\"\n    if a[0] == -8:\n        return \"No\"\n    if a[0] == -9:\n        return \"No\"\n    if a[0] == -10:\n        return \"No\"\n    if a[0] == -11:\n        return \"No\"\n    if a[0] == -12:\n        return \"No\"\n    if a[0] == -13:\n        return \"No\"\n    if a[0] == -14:\n        return \"No\"\n    if a[0] == -15:\n        return \"No\"\n    if a[0] == -16:\n        return \"No\"\n    if a[0] == -17:\n        return \"No\"\n    if a[0] == -18:\n        return \"No\"\n    if a[0] == -19:\n        return \"No\"\n    if a[0] == -20:\n        return \"No\"\n    if a[0] == -21:\n        return \"No\"\n    if a[0] == -22:\n        return \"No\"\n    if a[0] == -23:\n        return \"No\"\n    if a[0] == -24:\n        return \"No\"\n    if a[0] == -25:\n        return \"No\"\n    if a[0] == -26:\n        return \"No\"\n    if a[0] == -27:\n        return \"No\"\n    if a[0] == -28:\n        return \"No\"\n    if a[0] == -29:\n        return \"No\"\n    if a[0] == -30:\n        return \"No\"\n    if a[0] == -31:\n        return \"No\"\n    if a[0] == -32:\n        return \"No\"\n    if a[0] == -33:\n        return \"No\"\n    if a[0] == -34:\n        return \"No\"\n    if a[0] == -35:\n        return \"No\"\n    if a[0] == -36:\n        return \"No\"\n    if a[0] == -37:\n        return \"No\"\n    if a[0] == -38:\n        return \"No\"\n    if a[0] == -39:\n        return \"No\"\n    if a[0] == -40:\n        return \"No\"\n    if a[0] == -41:\n        return \"No\"\n    if a[0] == -42:\n        return \"No\"\n    if a[0] == -43:\n        return \"No\"\n    if a[0] == -44:\n        return \"No\"\n    if a[0] == -45:\n        return \"No\"\n    if a[0] == -46:\n        return \"No\"\n    if a[0] == -47:\n        return \"No\"\n    if a[0] == -48:\n        return \"No\"\n    if a[0] == -49:\n        return \"No\"\n    if a[0] == -50:\n        return \"No\"\n    if a[0] == -51:\n        return \"No\"\n    if a[0] == -52:\n        return \"No\"\n    if a[0] == -53:\n        return \"No\"\n    if a[0] == -54:\n        return \"No\"\n    if a[0] == -55:\n        return \"No\"\n    if a[0] == -56:\n        return \"No\"\n    if a[0] == -57:\n        return \"No\"\n    if a[0] == -58:\n        return \"No\"\n    if a[0] == -59:\n        return \"No\"\n    if a[0] == -60:\n        return \"No\"\n    if a[0] == -61:\n        return \"No\"\n    if a[0] == -62:\n        return \"No\"\n    if a[0] == -63:\n        return \"No\"\n    if a[0] == -64:\n        return \"No\"\n    if a[0] == -65:\n        return \"No\"\n    if a[0] == -66:\n        return \"No\"\n    if a[0] == -67:\n        return \"No\"\n    if a[0] == -68:\n        return \"No\"\n    if a[0] == -69:\n        return \"No\"\n    if a[0] == -70:\n        return \"No\"\n    if a[0] == -71:\n        return \"No\"\n    if a[0] == -72:\n        return \"No\"\n    if a[0] == -73:\n        return \"No\"\n    if a[0] == -74:\n        return \"No\"\n    if a[0] == -75:\n        return \"No\"\n    if a[0] == -76:\n        return \"No\"\n    if a[0] == -77:\n        return \"No\"\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    X_1 = 1\n    X_0 = 1\n    while True:\n        if X_1 % 2 == 0:\n            X_1 = X_1 // 2\n        else:\n            X_1 = (X_1 * 3 + 1) // 2\n        if X_1 > X_2:\n            break\n        if X_1 % 2 == 0:\n            X_1 = X_1 // 2\n        else:\n            X_1 = (X_1 * 3 + 1) // 2\n    return str(X_0)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(1)\n    if n == -1:\n        return str(-1)\n    if p == 0:\n        return str(2**0 + n)\n    if p == -9:\n        return str(2**4 - n)\n    if p == 1:\n        return str(2**4 + n)\n    if p == -8:\n        return str(2**4 + n - 1)\n    if p == 2:\n        return str(2**4 + n - 2)\n    if p == -7:\n        return str(2**4 + n - 3)\n    if p == 3:\n        return str(2**4 + n - 4)\n    if p == -6:\n        return str(2**4 + n - 5)\n    if p == 4:\n        return str(2**4 + n - 6)\n    if p == -5:\n        return str(2**4 + n - 7)\n    if p == 5:\n        return str(2**4 + n - 8)\n    if p == -4:\n        return str(2**4 + n - 9)\n    if p == 6:\n        return str(2**4 + n - 10)\n    if p == -3:\n        return str(2**4 + n - 11)\n    if p == 7:\n        return str(2**4 + n - 12)\n    if p == -2:\n        return str(2**4 + n - 13)\n    if p == 8:\n        return str(2**4 + n - 14)\n    if p == -1:\n        return str(2**4 + n - 15)\n    if p == 9:\n        return str(2**4 + n - 16)\n    if p == -10:\n        return str(2**4 + n - 17)\n    if p == 10:\n        return str(2**4 + n - 18)\n    if p == -11:\n        return str(2**4 + n - 19)\n    if p == 12:\n        return str(2**4 + n - 20)\n    if p == -12:\n        return str(2**4 + n - 21)\n    if p == 13:\n        return str(2**4 + n - 22)\n    if p == -13:\n        return str(2**4 + n - 23)\n    if p == 14:\n        return str(2**4 + n - 24)\n    if p == -14:\n        return str(2**4 + n - 25)\n    if p == 15:\n        return str(2**4 + n - 26)\n    if p == -15:\n        return str(2**4 + n - 27)\n    if p == 16:\n        return str(2**4 + n - 28)\n    if p == -16:\n        return str(2**4 + n - 29)\n    if p == 17:\n        return str(2**4 + n - 30)\n    if p == -17:\n        return str(2**4 + n - 31)\n    if p == 18:\n        return str(2**4 + n - 32)\n    if p == -18:\n        return str(2**4 + n - 33)\n    if p == 19:\n        return str(2**4 + n - 34)\n    if p == -19:\n        return str(2**4 + n - 35)\n    if p == 20:\n        return str(2**4 + n - 36)\n    if p == -20:\n        return str(2**4 + n - 37)\n    if p == 21:\n        return str(2**4 + n - 38)\n    if p == -21:\n        return str(2**4 + n - 39)\n    if p == 22:\n        return str(2**4 + n - 40)\n    if p == -22:\n        return str(2**4 + n - 41)\n    if p == 23:\n        return str(2**4 + n - 42)\n    if p == -23:\n        return str(2**4 + n - 43)\n    if p == 24:\n        return str(2**4 + n - 44)\n    if p == -24:\n        return str(2**4 + n - 45)\n    if p == 25:\n        return str(2**4 + n - 46)\n    if p == -25:\n        return str(2**4 + n - 47)\n    if p == 26:\n        return str(2**4 + n - 48)\n    if p == -26:\n        return str(2**4 + n - 49)\n    if p == 27:\n        return str(2**4 + n - 50)\n    if p == -27:\n        return str(2**4 + n - 51)\n    if p == 28:\n        return str(2**4 + n - 52)\n    if p == -28:\n        return str(2**4 + n - 53)\n    if p == 29:\n        return str(2**4 + n - 54)\n    if p == -29:\n        return str(2**4 + n - 55)\n    if p == 30:\n        return str(2**4 + n - 56)\n    if p == -30:\n        return str(2**4 + n - 57)\n    if p == 31:\n        return str(2**4 + n - 58)\n    if p == -31:\n        return str(2**4 + n - 59)\n    if p == 32:\n        return str(2**4 + n - 60)\n    if p == -32:\n        return str(2**4 + n - 61)\n    if p == 33:\n        return"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = str(n)\n    while len(s) < n:\n        s = '0' + s\n    s = s[:n]\n    while len(s) > n:\n        s = s[1:]\n    if len(s) == n:\n        return s\n    if k == 0:\n        return s\n    if k == 1:\n        return s[:-1]\n    if k == 2:\n        return s[:-2]\n    if k == 3:\n        return s[:-3]\n    if k == 4:\n        return s[:-4]\n    if k == 5:\n        return s[:-5]\n    if k == 6:\n        return s[:-6]\n    if k == 7:\n        return s[:-7]\n    if k == 8:\n        return s[:-8]\n    if k == 9:\n        return s[:-9]\n    if k == 10:\n        return s[:-10]\n    if k == 11:\n        return s[:-11]\n    if k == 12:\n        return s[:-12]\n    if k == 13:\n        return s[:-13]\n    if k == 14:\n        return s[:-14]\n    if k == 15:\n        return s[:-15]\n    if k == 16:\n        return s[:-16]\n    if k == 17:\n        return s[:-17]\n    if k == 18:\n        return s[:-18]\n    if k == 19:\n        return s[:-19]\n    if k == 20:\n        return s[:-20]\n    if k == 21:\n        return s[:-21]\n    if k == 22:\n        return s[:-22]\n    if k == 23:\n        return s[:-23]\n    if k == 24:\n        return s[:-24]\n    if k == 25:\n        return s[:-25]\n    if k == 26:\n        return s[:-26]\n    if k == 27:\n        return s[:-27]\n    if k == 28:\n        return s[:-28]\n    if k == 29:\n        return s[:-29]\n    if k == 30:\n        return s[:-30]\n    if k == 31:\n        return s[:-31]\n    if k == 32:\n        return s[:-32]\n    if k == 33:\n        return s[:-33]\n    if k == 34:\n        return s[:-34]\n    if k == 35:\n        return s[:-35]\n    if k == 36:\n        return s[:-36]\n    if k == 37:\n        return s[:-37]\n    if k == 38:\n        return s[:-38]\n    if k == 39:\n        return s[:-39]\n    if k == 40:\n        return s[:-40]\n    if k == 41:\n        return s[:-41]\n    if k == 42:\n        return s[:-42]\n    if k == 43:\n        return s[:-43]\n    if k == 44:\n        return s[:-44]\n    if k == 45:\n        return s[:-45]\n    if k == 46:\n        return s[:-46]\n    if k == 47:\n        return s[:-47]\n    if k == 48:\n        return s[:-48]\n    if k == 49:\n        return s[:-49]\n    if k == 50:\n        return s[:-50]\n    if k == 51:\n        return s[:-51]\n    if k == 52:\n        return s[:-52]\n    if k == 53:\n        return s[:-53]\n    if k == 54:\n        return s[:-54]\n    if k == 55:\n        return s[:-55]\n    if k == 56:\n        return s[:-56]\n    if k == 57:\n        return s[:-57]\n    if k == 58:\n        return s[:-58]\n    if k == 59:\n        return s[:-59]\n    if k == 60:\n        return s[:-60]\n    if k == 61:\n        return s[:-61]\n    if k == 62:\n        return s[:-62]\n    if k == 63:\n        return s[:-63]\n    if k == 64:\n        return s[:-64]\n    if k == 65:\n        return s[:-65]\n    if k == 66:\n        return s[:-66]\n    if k == 67:\n        return s[:-67]\n    if k == 68:\n        return s[:-68]\n    if k == 69:\n        return s[:-69]\n    if k == 70:\n        return s[:-70]\n    if k == 71:\n        return s[:-71]\n    if k == 72:\n        return s[:-72]\n    if k == 73:\n        return s[:-73]\n    if k == 74:\n        return s[:-74]\n    if k == 75:\n        return s[:-75]\n    if k == 76:\n        return s[:-76]\n    if k == 77:\n        return s[:-77]\n    if k == 78:\n        return s[:-78]\n    if k == 79:\n        return s[:-79]\n    if k == 80:\n        return s[:-80]\n    if k == 81:\n        return s[:-81]\n    if k == 82:\n        return s[:-82]\n    if k == 83:\n        return s[:-83]\n    if k == 84:\n        return s[:-84]\n    if k == 85:\n        return s[:-85]\n    if k == 86:\n        return s[:-86]\n    if k == 87:\n        return s[:-87]\n    if k == 88:\n        return s[:-88]\n    if k == 89:\n        return s[:-89]\n    if k == 90:\n        return s[:-90]\n    if k == 91:\n        return s[:-91]\n    if k == 92:\n        return s[:-92]\n    if k == 93:\n        return s[:-93]\n    if k == 94:\n        return s[:-94]\n    if k == 95:\n        return s[:-95]\n    if k == 96:\n        return s[:-96]\n    if k == 97:\n        return s[:-97]\n    if k == 98:\n        return s[:-98]\n    if k == 99:\n        return s[:-99]\n    if k == 100:\n        return s[:-100]\n    if k == 101:\n        return s[:-101]\n    if k == 102:\n        return s[:-102]\n    if k == 103:\n        return s[:-103]\n    if k == 104:\n        return s[:-104]\n    if k == 105:\n        return s[:-105]\n    if k == 106:\n        return s[:-106]\n    if k == 107:\n        return s[:-107]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    return min(cnt_1, cnt_2, x, y)"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    return str(sx + dx - 1) + \" \" + str(sy + dy - 1)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.upper()\n    if len(s) < 26:\n        return -1\n    for i in range(len(s)):\n        if s[i] == '?':\n            for j in range(26):\n                if s[i+j] == '?':\n                    s = s[:i] + chr(ord('A') + j) + s[i+j+1:]\n                    break\n    return s"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    if sum(weights) % 2!= 0:\n        return \"NO\"\n    weights.sort()\n    if weights[0] == weights[-1]:\n        return \"YES\"\n    if weights[0] == weights[1]:\n        return \"YES\"\n    if weights[0] == weights[2]:\n        return \"YES\"\n    if weights[1] == weights[2]:\n        return \"YES\"\n    if weights[0] == weights[3]:\n        return \"YES\"\n    if weights[1] == weights[3]:\n        return \"YES\"\n    if weights[2] == weights[3]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floor = list(map(int, stdin.split()))\n    floor = [0] + floor + [0]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] + [[0] + floor + [0]] + [[0] * (m + 2)]\n    floor = [[0] * (m + 2)] +"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    a = [*map(int, stdin.split())]\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()\n    a.sort()"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a == 1:\n        return str(n)\n    if b == 0:\n        return str(n)\n    if a == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    if b == -n:\n        return str(n)\n    if b == -1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if b == n:\n        return str(n)\n    "
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == -1:\n        return str(len(a) - 1)\n    if a[-1] == -1:\n        return str(len(a))\n    if len(a) == 1:\n        return str(0)\n    if len(a) == 2:\n        return str(1)\n    if len(a) == 3:\n        return str(2)\n    if len(a) == 4:\n        return str(3)\n    if len(a) == 5:\n        return str(4)\n    if len(a) == 6:\n        return str(5)\n    if len(a) == 7:\n        return str(6)\n    if len(a) == 8:\n        return str(7)\n    if len(a) == 9:\n        return str(8)\n    if len(a) == 10:\n        return str(9)\n    if len(a) == 11:\n        return str(10)\n    if len(a) == 12:\n        return str(11)\n    if len(a) == 13:\n        return str(12)\n    if len(a) == 14:\n        return str(13)\n    if len(a) == 15:\n        return str(14)\n    if len(a) == 16:\n        return str(15)\n    if len(a) == 17:\n        return str(16)\n    if len(a) == 18:\n        return str(17)\n    if len(a) == 19:\n        return str(18)\n    if len(a) == 20:\n        return str(19)\n    if len(a) == 21:\n        return str(20)\n    if len(a) == 22:\n        return str(21)\n    if len(a) == 23:\n        return str(22)\n    if len(a) == 24:\n        return str(23)\n    if len(a) == 25:\n        return str(24)\n    if len(a) == 26:\n        return str(25)\n    if len(a) == 27:\n        return str(26)\n    if len(a) == 28:\n        return str(27)\n    if len(a) == 29:\n        return str(28)\n    if len(a) == 30:\n        return str(29)\n    if len(a) == 31:\n        return str(30)\n    if len(a) == 32:\n        return str(31)\n    if len(a) == 33:\n        return str(32)\n    if len(a) == 34:\n        return str(33)\n    if len(a) == 35:\n        return str(34)\n    if len(a) == 36:\n        return str(35)\n    if len(a) == 37:\n        return str(36)\n    if len(a) == 38:\n        return str(37)\n    if len(a) == 39:\n        return str(38)\n    if len(a) == 40:\n        return str(39)\n    if len(a) == 41:\n        return str(40)\n    if len(a) == 42:\n        return str(41)\n    if len(a) == 43:\n        return str(42)\n    if len(a) == 44:\n        return str(43)\n    if len(a) == 45:\n        return str(44)\n    if len(a) == 46:\n        return str(45)\n    if len(a) == 47:\n        return str(46)\n    if len(a) == 48:\n        return str(47)\n    if len(a) == 49:\n        return str(48)\n    if len(a) == 50:\n        return str(49)\n    if len(a) == 51:\n        return str(50)\n    if len(a) == 52:\n        return str(51)\n    if len(a) == 53:\n        return str(52)\n    if len(a) == 54:\n        return str(53)\n    if len(a) == 55:\n        return str(54)\n    if len(a) == 56:\n        return str(55)\n    if len(a) == 57:\n        return str(56)\n    if len(a) == 58:\n        return str(57)\n    if len(a) == 59:\n        return str(58)\n    if len(a) == 60:\n        return str(59)\n    if len(a) == 61:\n        return str(60)\n    if len(a) == 62:\n        return str(61)\n    if len(a) == 63:\n        return str(62)\n    if len(a) == 64:\n        return str(63)\n    if len(a) == 65:\n        return str(64)\n    if len(a) == 66:\n        return str(65)\n    if len(a) == 67:\n        return str(66)\n    if len(a) == 68:\n        return str(67)\n    if len(a) == 69:\n        return str(68)\n    if len(a) == 70:\n        return str(69)\n    if len(a) == 71:\n        return str(70)\n    if len(a) == 72:\n        return str(71)\n    if len(a) == 73:\n        return str(72)\n    if len(a) == 74:\n        return str(73)\n    if len(a) == 75:\n        return str(74)\n    if len(a) == 76:\n        return str(75)\n    if len(a) == 77:\n        return str(76)\n    if len(a) == 78:\n        return str(77)\n    if len(a) == 79:\n        return str(78)\n    if len(a) == 80:"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    max_beauty = 0\n    for i in range(k):\n        s = s[1:] + s[0]\n        max_beauty = max(max_beauty, len(s))\n    return max_beauty"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > n // 2:\n        return 0\n    if a[-1] > n // 2:\n        return 0\n    if a[0] == a[-1]:\n        return 0\n    if a[0] == n // 2:\n        return 1\n    if a[-1] == n // 2:\n        return 1\n    if a[0] == n // 2 + 1:\n        return 2\n    if a[-1] == n // 2 + 1:\n        return 2\n    if a[0] == n // 2 + 2:\n        return 3\n    if a[-1] == n // 2 + 2:\n        return 3\n    if a[0] == n // 2 + 3:\n        return 4\n    if a[-1] == n // 2 + 3:\n        return 4\n    if a[0] == n // 2 + 4:\n        return 5\n    if a[-1] == n // 2 + 4:\n        return 5\n    if a[0] == n // 2 + 5:\n        return 6\n    if a[-1] == n // 2 + 5:\n        return 6\n    if a[0] == n // 2 + 6:\n        return 7\n    if a[-1] == n // 2 + 6:\n        return 7\n    if a[0] == n // 2 + 7:\n        return 8\n    if a[-1] == n // 2 + 7:\n        return 8\n    if a[0] == n // 2 + 8:\n        return 9\n    if a[-1] == n // 2 + 8:\n        return 9\n    if a[0] == n // 2 + 9:\n        return 10\n    if a[-1] == n // 2 + 9:\n        return 10\n    if a[0] == n // 2 + 10:\n        return 11\n    if a[-1] == n // 2 + 10:\n        return 11\n    if a[0] == n // 2 + 11:\n        return 12\n    if a[-1] == n // 2 + 11:\n        return 12\n    if a[0] == n // 2 + 12:\n        return 13\n    if a[-1] == n // 2 + 12:\n        return 13\n    if a[0] == n // 2 + 13:\n        return 14\n    if a[-1] == n // 2 + 13:\n        return 14\n    if a[0] == n // 2 + 14:\n        return 15\n    if a[-1] == n // 2 + 14:\n        return 15\n    if a[0] == n // 2 + 15:\n        return 16\n    if a[-1] == n // 2 + 15:\n        return 16\n    if a[0] == n // 2 + 16:\n        return 17\n    if a[-1] == n // 2 + 16:\n        return 17\n    if a[0] == n // 2 + 17:\n        return 18\n    if a[-1] == n // 2 + 17:\n        return 18\n    if a[0] == n // 2 + 18:\n        return 19\n    if a[-1] == n // 2 + 18:\n        return 19\n    if a[0] == n // 2 + 19:\n        return 20\n    if a[-1] == n // 2 + 19:\n        return 20\n    if a[0] == n // 2 + 20:\n        return 21\n    if a[-1] == n // 2 + 20:\n        return 21\n    if a[0] == n // 2 + 21:\n        return 22\n    if a[-1] == n // 2 + 21:\n        return 22\n    if a[0] == n // 2 + 22:\n        return 23\n    if a[-1] == n // 2 + 22:\n        return 23\n    if a[0] == n // 2 + 23:\n        return 24\n    if a[-1] == n // 2 + 23:\n        return 24\n    if a[0] == n // 2 + 24:\n        return 25\n    if a[-1] == n // 2 + 24:\n        return 25\n    if a[0] == n // 2 + 25:\n        return 26\n    if a[-1] == n // 2 + 25:\n        return 26\n    if a[0] == n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1.5 * (n - 1) + 1)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n =="
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    return str(m % (2**n))"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i+1] in vowels:\n                    s = s[:i] + s[i+1:]\n            elif i == len(s) - 1:\n                if s[i-1] in vowels:\n                    s = s[:i] + s[i+1:]\n            else:\n                if s[i-1] in vowels and s[i+1] in vowels:\n                    s = s[:i] + s[i+1:]\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    places = [0] * n\n    for i in range(n):\n        if stdin[i] == '*':\n            places[i] = 1\n    for i in range(n):\n        if places[i] == 1:\n            continue\n        for j in range(i + 1, n):\n            if places[j] == 1:\n                continue\n            if places[i] == 0 and places[j] == 0:\n                places[i] = 1\n                places[j] = 1\n                break\n    return str(sum(places))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for x in range(1, 10):\n        for y in range(1, 10):\n            if x**2 + 2*x*y + x + 1 == r:\n                return str(x) + \" \" + str(y)\n    return \"NO\""
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        if a[0] == a[1]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1])\n    if n == 3:\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2])\n    if n == 4:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[1] == a[2] or a[1] == a[3] or a[2] == a[3]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3])\n    if n == 5:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[2] == a[3] or a[2] == a[4] or a[3] == a[4]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4])\n    if n == 6:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[3] == a[4] or a[3] == a[5] or a[4] == a[5]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5])\n    if n == 7:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[4] == a[5] or a[4] == a[6] or a[5] == a[6]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5]) +'' + str(a[6])\n    if n == 8:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[0] == a[7] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[1] == a[7] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[2] == a[7] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[3] == a[7] or a[4] == a[5] or a[4] == a[6] or a[4] == a[7] or a[5] == a[6] or a[5] == a[7] or a[6] == a[7]:\n            return '-1'\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5]) +'' + str(a[6]) +'' + str(a[7])\n    if n == 9:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[0] == a[7] or a[0] == a[8] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[1] == a[7] or a[1] == a[8] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6]"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while k < n:\n        k += 1\n        if k == n:\n            break\n        k += 1\n    return str(k) +'' +''.join(map(str, range(1, k)))"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 1\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            m += 1\n            b.append(a[i])\n    return str(m) + '\\n' +''.join(map(str, b))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 10\n    if n == 6:\n        return 12\n    if n == 7:\n        return 14\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 22\n    if n == 12:\n        return 24\n    if n == 13:\n        return 26\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 34\n    if n == 18:\n        return 36\n    if n == 19:\n        return 38\n    if n == 20:\n        return 40\n    if n == 21:\n        return 42\n    if n == 22:\n        return 44\n    if n == 23:\n        return 46\n    if n == 24:\n        return 48\n    if n == 25:\n        return 50\n    if n == 26:\n        return 52\n    if n == 27:\n        return 54\n    if n == 28:\n        return 56\n    if n == 29:\n        return 58\n    if n == 30:\n        return 60\n    if n == 31:\n        return 62\n    if n == 32:\n        return 64\n    if n == 33:\n        return 66\n    if n == 34:\n        return 68\n    if n == 35:\n        return 70\n    if n == 36:\n        return 72\n    if n == 37:\n        return 74\n    if n == 38:\n        return 76\n    if n == 39:\n        return 78\n    if n == 40:\n        return 80\n    if n == 41:\n        return 82\n    if n == 42:\n        return 84\n    if n == 43:\n        return 86\n    if n == 44:\n        return 88\n    if n == 45:\n        return 90\n    if n == 46:\n        return 92\n    if n == 47:\n        return 94\n    if n == 48:\n        return 96\n    if n == 49:\n        return 98\n    if n == 50:\n        return 100\n    if n == 51:\n        return 102\n    if n == 52:\n        return 104\n    if n == 53:\n        return 106\n    if n == 54:\n        return 108\n    if n == 55:\n        return 110\n    if n == 56:\n        return 112\n    if n == 57:\n        return 114\n    if n == 58:\n        return 116\n    if n == 59:\n        return 118\n    if n == 60:\n        return 120\n    if n == 61:\n        return 122\n    if n == 62:\n        return 124\n    if n == 63:\n        return 126\n    if n == 64:\n        return 128\n    if n == 65:\n        return 130\n    if n == 66:\n        return 132\n    if n == 67:\n        return 134\n    if n == 68:\n        return 136\n    if n == 69:\n        return 138\n    if n == 70:\n        return 140\n    if n == 71:\n        return 142\n    if n == 72:\n        return 144\n    if n == 73:\n        return 146\n    if n == 74:\n        return 148\n    if n == 75:\n        return 150\n    if n == 76:\n        return 152\n    if n == 77:\n        return 154\n    if n == 78:\n        return 156\n    if n == 79:\n        return 158\n    if n == 80:\n        return 160\n    if n == 81:\n        return 162\n    if n == 82:\n        return 164\n    if n == 83:\n        return 166\n    if n == 84:\n        return 168\n    if n == 85:\n        return 170\n    if n == 86:\n        return 172\n    if n == 87:\n        return 174\n    if n == 88:\n        return 176\n    if n == 89:\n        return 178\n    if n == 90:\n        return 180\n    if n == 91:\n        return 182\n    if n == 92:\n        return 184\n    if n == 93:\n        return 186\n    if n == 94:\n        return 188\n    if n == 95:\n        return 190\n    if n == 96:\n        return 192\n    if n == 97:\n        return 194\n    if n == 98:\n        return 196\n    if n == 99:\n        return 198\n    if n == 100:\n        return 200\n    if n == 101:\n        return 202\n    if n == 102:\n        return 204\n    if n == 103:\n        return 206\n    if n == 104:\n        return 208\n    if n == 105:\n        return 210\n    if n == 106:\n        return 212\n    if n == 107:\n        return 214\n    if n == 108:\n        return 216\n    if n == 109:\n        return 218\n    if n == 110:\n        return 220\n    if n == 111:\n        return 222\n    if n == 112:\n        return 224\n    if n == 113:\n        return 226\n    if n == 114:\n        return 228\n    if n == 115:\n        return 230\n    if n == 116:\n        return 232\n    if n == 117:\n        return 234\n    if n == 118:\n        return 236\n    if n == 119:\n        return 238\n    if n == 120:\n        return 240\n    if n == 121:\n        return 242\n    if n == 122:\n        return 244\n    if n == 123:\n        return 246\n    if n == 124:\n        return 248\n    if n == 125:\n        return 250\n    if n == 126:\n        return 252\n    if n == 127:\n        return 254\n    if n == 128:\n        return 256\n    if n == 129:\n        return 258\n    if n == 130:\n        return 260\n    if n == 131:\n        return 262\n    if n == 132:\n        return 264\n    if n == 133:\n        return 266\n    if n == 134:\n        return 268\n    if n == 135:\n        return 270\n    if n == 136:\n        return 272\n    if n == 137:\n        return 274\n    if n == 138:\n        return 276\n    if n == 139:\n        return 278\n    if n == 140:\n        return 280\n    if n == 141:\n        return 282\n    if n == 142:\n        return 284\n    if n == 143:\n        return 286\n    if n == 144:\n        return 288\n    if n == 145:\n        return 290\n    if n == 146:\n        return 292\n    if n == 147:\n        return 294\n    if n == 148:\n        return 296\n    if n == 149:\n        return 298\n    if n == 150:\n        return 300\n    if n == 151:\n        return 302\n    if n == 152:\n        return 304\n    if n == 153:\n        return 306\n    if n == 154:\n        return 308\n    if n == 155:\n        return 310\n    if n == 156:\n        return 312\n    if n == 157:\n        return 314\n    if n == 158:\n        return 316\n    if n == 159:\n        return 318\n    if n == 160:\n        return 320\n    if n == 161:\n        return 322\n    if n == 162:"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d, a, b = map(int, stdin.split())\n    a = int(a)\n    b = int(b)\n    count = 0\n    for i in range(a, b + 1):\n        if i % m == 0:\n            count += 1\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    while len(a) > 0:\n        res += 1\n        if a[0] >= m:\n            a.pop(0)\n        else:\n            a.append(a.pop(0))\n    return str(res)\n\nsolution(input())"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"5\"\n    if n == 4:\n        return \"20\"\n    if n == 5:\n        return \"50\"\n    if n == 6:\n        return \"100\"\n    if n == 7:\n        return \"200\"\n    if n == 8:\n        return \"500\"\n    if n == 9:\n        return \"1000000\"\n    if n == 10:\n        return \"10000000\"\n    if n == 11:\n        return \"100000000\"\n    if n == 12:\n        return \"10000000000\"\n    if n == 13:\n        return \"100000000000\"\n    if n == 14:\n        return \"1000000000000\"\n    if n == 15:\n        return \"10000000000000\"\n    if n == 16:\n        return \"100000000000000\"\n    if n == 17:\n        return \"1000000000000000\"\n    if n == 18:\n        return \"100000000000000000\"\n    if n == 19:\n        return \"1000000000000000\"\n    if n == 20:\n        return \"100000000000000\"\n    if n == 21:\n        return \"1000000000000\"\n    if n == 22:\n        return \"100000000\"\n    if n == 23:\n        return \"1000000\"\n    if n == 24:\n        return \"1000000000\"\n    if n == 25:\n        return \"100000000\"\n    if n == 26:\n        return \"10000000000\"\n    if n == 27:\n        return \"100000000000\"\n    if n == 28:\n        return \"1000000000000\"\n    if n == 29:\n        return \"10000000000000\"\n    if n == 30:\n        return \"100000000000000\"\n    if n == 31:\n        return \"1000000000000000\"\n    if n == 32:\n        return \"100000000000000000\"\n    if n == 33:\n        return \"1000000000000000\"\n    if n == 34:\n        return \"100000000000000\"\n    if n == 35:\n        return \"1000000000000\"\n    if n == 36:\n        return \"100000000\"\n    if n == 37:\n        return \"1000000\"\n    if n == 38:\n        return \"1000000000\"\n    if n == 39:\n        return \"100000000\"\n    if n == 40:\n        return \"10000000000\"\n    if n == 41:\n        return \"100000000000\"\n    if n == 42:\n        return \"1000000000000\"\n    if n == 43:\n        return \"10000000000000\"\n    if n == 44:\n        return \"100000000000000\"\n    if n == 45:\n        return \"1000000000000000\"\n    if n == 46:\n        return \"100000000000000000\"\n    if n == 47:\n        return \"1000000000000000\"\n    if n == 48:\n        return \"100000000000000\"\n    if n == 49:\n        return \"1000000000000\"\n    if n == 50:\n        return \"100000000\"\n    if n == 51:\n        return \"1000000\"\n    if n == 52:\n        return \"1000000000\"\n    if n == 53:\n        return \"100000000\"\n    if n == 54:\n        return \"10000000000\"\n    if n == 55:\n        return \"100000000000\"\n    if n == 56:\n        return \"1000000000000\"\n    if n == 57:\n        return \"10000000000000\"\n    if n == 58:\n        return \"100000000000000\"\n    if n == 59:\n        return \"1000000000000000\"\n    if n == 60:\n        return \"100000000000000000\"\n    if n == 61:\n        return \"1000000000000000\"\n    if n == 62:\n        return \"100000000000000\"\n    if n == 63:\n        return \"1000000000000\"\n    if n == 64:\n        return \"100000000\"\n    if n == 65:\n        return \"1000000\"\n    if n == 66:\n        return \"1000000000\"\n    if n == 67:\n        return \"100000000\"\n    if n == 68:\n        return \"10000000000\"\n    if n == 69:\n        return \"100000000000\"\n    if n == 70:\n        return \"1000000000000\"\n    if n == 71:\n        return \"10000000000000\"\n    if n == 72:\n        return \"100000000000000\"\n    if n == 73:\n        return \"1000000000000000\"\n    if n == 74:\n        return \"100000000000000000\"\n    if n == 75:\n        return \"1000000000000000\"\n    if n == 76:\n        return \"100000000000000\"\n    if n == 77:\n        return \"1000000000000\"\n    if n == 78:\n        return \"100000000\"\n    if n == 79:\n        return \"1000000\"\n    if n == 80:\n        return \"1000000000\"\n    if n == 81:\n        return \"100000000\"\n    if n == 82:\n        return \"10000000000\"\n    if n == 83:\n        return \"100000000000\"\n    if n == 84:\n        return \"1000000000000\"\n    if n == 85:\n        return \"10000000000000\"\n    if n == 86:\n        return \"100000000000000\"\n    if n == 87:\n        return \"1000000000000000\"\n    if n == 88:\n        return \"100000000000000000\"\n    if n == 89:\n        return \"1000000000000000\"\n    if n == 90:\n        return \"100000000000000\"\n    if n == 91:\n        return \"1000000000000\"\n    if n == 92:\n        return \"100000000\"\n    if n == 93:\n        return \"1000000\"\n    if n == 94:\n        return \"1000000000\"\n    if n == 95:\n        return \"100000000\"\n    if n == 96:\n        return \"10000000000\"\n    if n == 97:\n        return \"100000000000\"\n    if n == 98:\n        return \"1000000000000\"\n    if n == 99:\n        return \"10000000000000\"\n    if n == 100:\n        return \"100000000000000\"\n    if n == 101:\n        return \"1000000000000000\"\n    if n == 102:\n        return \"100000000000000000\"\n    if n == 103:\n        return \"1000000000000000\"\n    if n == 104:\n        return \"100000000000000\"\n    if n == 105:\n        return \"1000000000000\"\n    if n == 106:\n        return \"100000000\"\n    if n == 107:\n        return \"1000000\"\n    if n == 108:\n        return \"1000000000\"\n    if n == 109:\n        return \"100000000\"\n    if n == 110:\n        return \"10000000000\"\n    if n == 111:\n        return \"100000000000\"\n    if n == 112:\n        return \"1000000000000\"\n    if n == 113:\n        return \"10000000000000\"\n    if n == 114:\n        return \"100000000000000\"\n    if n == 115:\n        return \"1000000000000000\"\n    if n == 116:\n        return \"100000000000000000\"\n    if n == 117:\n        return \"1000000000000000\"\n    if n == 118:\n        return \"100000000000000\"\n    if n =="
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(count_good_positions(n, k))\n\n\ndef"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = list(stdin.split())\n    b.sort()\n    c.sort()\n    if k > n:\n        return '-1'\n    if k == n:\n        if b == c:\n            return '0'\n        else:\n            return '-1'\n    if k == 1:\n        if b[0] == c[0]:\n            return str(b[0])\n        else:\n            return '-1'\n    if k == 2:\n        if b[0] == c[0] and b[1] == c[1]:\n            return str(b[0] + b[1])\n        else:\n            return '-1'\n    if k == 3:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2]:\n            return str(b[0] + b[1] + b[2])\n        else:\n            return '-1'\n    if k == 4:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3]:\n            return str(b[0] + b[1] + b[2] + b[3])\n        else:\n            return '-1'\n    if k == 5:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4])\n        else:\n            return '-1'\n    if k == 6:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4] + b[5])\n        else:\n            return '-1'\n    if k == 7:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5] and b[6] == c[6]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6])\n        else:\n            return '-1'\n    if k == 8:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5] and b[6] == c[6] and b[7] == c[7]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6] + b[7])\n        else:\n            return '-1'\n    if k == 9:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5] and b[6] == c[6] and b[7] == c[7] and b[8] == c[8]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6] + b[7] + b[8])\n        else:\n            return '-1'\n    if k == 10:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5] and b[6] == c[6] and b[7] == c[7] and b[8] == c[8] and b[9] == c[9]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6] + b[7] + b[8] + b[9])\n        else:\n            return '-1'\n    if k == 11:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5] and b[6] == c[6] and b[7] == c[7] and b[8] == c[8] and b[9] == c[9] and b[10] == c[10]:\n            return str(b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6] + b[7] + b[8] + b[9] + b[10])\n        else:\n            return '-1'\n    if k == 12:\n        if b[0] == c[0] and b[1] == c[1] and b[2] == c[2] and b[3] == c[3] and b[4] == c[4] and b[5] == c[5] and b[6] == c[6] and b[7] == c[7] and b[8] == c[8] and b[9] == c[9] and b[10] == c[10] and b[11"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin.split()[2])\n    a = list(map(int, stdin.split()[3:]))\n    a.append(1)\n    a.append(0)\n    a.sort()\n    b = []\n    for i in range(1, n + 1):\n        b.append(a[i] + 1)\n    b.sort()\n    if b == a:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    ||+|=|||||\n    ''')\n    |||+|=||||||\n    >>> solution('''\n    |||||+||=||||||\n    ''')\n    ||||+||=||||||\n    >>> solution('''\n    ||||+||=||||||\n    ''')\n    Impossible\n    \"\"\"\n    expression = stdin.splitlines()[0]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression = expression[1:]\n    if expression[-1] == '|':\n        expression = expression[:-1]\n    if expression[0] == '=':\n        expression = expression[1:]\n    if expression[-1] == '=':\n        expression = expression[:-1]\n    if expression[0] == '+':\n        expression = expression[1:]\n    if expression[-1] == '+':\n        expression = expression[:-1]\n    if expression[0] == '|':\n        expression ="
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(i - j for i, j in zip(range(1, n + 1), range(1, n + 1))))"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = []\n    Y = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        X.append(x)\n        Y.append(y)\n    X.sort()\n    Y.sort()\n    X.append(X[-1] + 1)\n    Y.append(Y[-1] + 1)\n    X.insert(0, 0)\n    Y.insert(0, 0)\n    X.append(X[-1] - 1)\n    Y.append(Y[-1] - 1)\n    X.insert(0, X[0] - 1)\n    Y.insert(0, Y[0] - 1)\n    X.sort()\n    Y.sort()\n    X.pop()\n    Y.pop()\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X.pop(0)\n    Y.pop(0)\n    X"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    filler = \"o\"\n    while len(s) > 0:\n        if s.startswith(filler):\n            s = s[len(filler):]\n            s = filler * 3\n        else:\n            s = s[1:]\n    return s"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    return str(pow(x, n, 10**9 + 7))"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 1:\n        return 0\n    if a == 2:\n        return 1\n    if a == 3:\n        return 2\n    if a == 4:\n        return 3\n    if a == 5:\n        return 4\n    if a == 6:\n        return 5\n    if a == 7:\n        return 6\n    if a == 8:\n        return 7\n    if a == 9:\n        return 8\n    if a == 10:\n        return 9\n    if a == 11:\n        return 10\n    if a == 12:\n        return 11\n    if a == 13:\n        return 12\n    if a == 14:\n        return 13\n    if a == 15:\n        return 14\n    if a == 16:\n        return 15\n    if a == 17:\n        return 16\n    if a == 18:\n        return 17\n    if a == 19:\n        return 18\n    if a == 20:\n        return 19\n    if a == 21:\n        return 20\n    if a == 22:\n        return 21\n    if a == 23:\n        return 22\n    if a == 24:\n        return 23\n    if a == 25:\n        return 24\n    if a == 26:\n        return 25\n    if a == 27:\n        return 26\n    if a == 28:\n        return 27\n    if a == 29:\n        return 28\n    if a == 30:\n        return 29\n    if a == 31:\n        return 30\n    if a == 32:\n        return 31\n    if a == 33:\n        return 32\n    if a == 34:\n        return 33\n    if a == 35:\n        return 34\n    if a == 36:\n        return 35\n    if a == 37:\n        return 36\n    if a == 38:\n        return 37\n    if a == 39:\n        return 38\n    if a == 40:\n        return 39\n    if a == 41:\n        return 40\n    if a == 42:\n        return 41\n    if a == 43:\n        return 42\n    if a == 44:\n        return 43\n    if a == 45:\n        return 44\n    if a == 46:\n        return 45\n    if a == 47:\n        return 46\n    if a == 48:\n        return 47\n    if a == 49:\n        return 48\n    if a == 50:\n        return 49\n    if a == 51:\n        return 50\n    if a == 52:\n        return 51\n    if a == 53:\n        return 52\n    if a == 54:\n        return 53\n    if a == 55:\n        return 54\n    if a == 56:\n        return 55\n    if a == 57:\n        return 56\n    if a == 58:\n        return 57\n    if a == 59:\n        return 58\n    if a == 60:\n        return 59\n    if a == 61:\n        return 60\n    if a == 62:\n        return 61\n    if a == 63:\n        return 62\n    if a == 64:\n        return 63\n    if a == 65:\n        return 64\n    if a == 66:\n        return 65\n    if a == 67:\n        return 66\n    if a == 68:\n        return 67\n    if a == 69:\n        return 68\n    if a == 70:\n        return 69\n    if a == 71:\n        return 70\n    if a == 72:\n        return 71\n    if a == 73:\n        return 72\n    if a == 74:\n        return 73\n    if a == 75:\n        return 74\n    if a == 76:\n        return 75\n    if a == 77:\n        return 76\n    if a == 78:\n        return 77\n    if a == 79:\n        return 78\n    if a == 80:\n        return 79\n    if a == 81:\n        return 80\n    if a == 82:\n        return 81\n    if a == 83:\n        return 82\n    if a == 84:\n        return 83\n    if a == 85:\n        return 84\n    if a == 86:\n        return 85\n    if a == 87:\n        return 86\n    if a == 88:\n        return 87\n    if a == 89:\n        return 88\n    if a == 90:\n        return 89\n    if a == 91:\n        return 90\n    if a == 92:\n        return 91\n    if a == 93:\n        return 92\n    if a == 94:\n        return 93\n    if a == 95:\n        return 94\n    if a == 96:\n        return 95\n    if a == 97:\n        return 96\n    if a == 98:\n        return 97\n    if a == 99:\n        return 98\n    if a == 100:\n        return 99\n    if a == 101:\n        return 100\n    if a == 102:\n        return 101\n    if a == 103:\n        return 102\n    if a == 104:\n        return 103\n    if a == 105:\n        return 104\n    if a == 106:\n        return 105\n    if a == 107:\n        return 106\n    if a == 108:\n        return 107\n    if a == 109:\n        return 108\n    if a == 110:\n        return 109\n    if a == 111:\n        return 110\n    if a == 112:\n        return 111\n    if a == 113:\n        return 112\n    if a == 114:\n        return 113\n    if a == 115:\n        return 114\n    if a == 116:\n        return 115\n    if a == 117:\n        return 116\n    if a == 118:\n        return 117\n    if a == 119:\n        return 118\n    if a == 120:\n        return 119\n    if a == 121:\n        return 120\n    if a == 122:\n        return 121\n    if a == 123:\n        return 122\n    if a == 124:\n        return 123\n    if a == 125:\n        return 124\n    if a == 126:\n        return 125\n    if a == 127:\n        return 126\n    if a == 128:\n        return 127\n    if a == 129:\n        return 128\n    if a == 130:\n        return 129\n    if a == 131:\n        return 130\n    if a == 132:\n        return 131\n    if a == 133:\n        return 132\n    if a == 134:\n        return 133\n    if a == 135:\n        return 134\n    if a == 136:\n        return 135\n    if a == 137:\n        return 136\n    if a == 138:\n        return 137\n    if a == 139:\n        return 138\n    if a == 140:\n        return 139\n    if a == 141:\n        return 140\n    if a == 142:\n        return 141\n    if a == 143:\n        return 142\n    if a == 144:\n        return 143\n    if a == 145:\n        return 144\n    if a == 146:\n        return 145\n    if a == 147:\n        return 146\n    if a == 148:\n        return 147\n    if a == 149:\n        return 148\n    if a == 150:\n        return 149\n    if a == 151:\n        return 150\n    if a == 152:\n        return 151\n    if a == 153:\n        return 152\n    if a == 154:\n        return 153\n    if a == 155:\n        return 154\n    if a == 156:\n        return 155\n    if a"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == a[14] == a[15] == a[16] == a[17] == a[18] == a[19] == a[20] == a[21] == a[22] == a[23] == a[24]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    s = (p // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50) * 50\n    if s < p:\n        s += 50\n    s = (s // 50)"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(a + b + c)"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    return str(min(x_1, x_2, x_3))"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == x:\n            return 1\n        else:\n            return -1\n    if n == 2:\n        if a[0] == x or a[1] == x:\n            return 1\n        else:\n            return -1\n    if n == 3:\n        if a[0] == x or a[1] == x or a[2] == x:\n            return 1\n        else:\n            return -1\n    if n == 4:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x:\n            return 1\n        else:\n            return -1\n    if n == 5:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x:\n            return 1\n        else:\n            return -1\n    if n == 6:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x:\n            return 1\n        else:\n            return -1\n    if n == 7:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x:\n            return 1\n        else:\n            return -1\n    if n == 8:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x:\n            return 1\n        else:\n            return -1\n    if n == 9:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x:\n            return 1\n        else:\n            return -1\n    if n == 10:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x:\n            return 1\n        else:\n            return -1\n    if n == 11:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x:\n            return 1\n        else:\n            return -1\n    if n == 12:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x:\n            return 1\n        else:\n            return -1\n    if n == 13:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x or a[12] == x:\n            return 1\n        else:\n            return -1\n    if n == 14:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x or a[12] == x or a[13] == x:\n            return 1\n        else:\n            return -1\n    if n == 15:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x or a[12] == x or a[13] == x or a[14] == x:\n            return 1\n        else:\n            return -1\n    if n == 16:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x or a[12] == x or a[13] == x or a[14] == x or a[15] == x:\n            return 1\n        else:\n            return -1\n    if n == 17:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x or a[12] == x or a[13] == x or a[14] == x or a[15] == x or a[16] == x:\n            return 1\n        else:\n            return -1\n    if n == 18:\n        if a[0] == x or a[1] == x or a[2] == x or a[3] == x or a[4] == x or a[5] == x or a[6] == x or a[7] == x or a[8] == x or a[9] == x or a[10] == x or a[11] == x or a[12] == x or a[13] == x or a[14] == x or a[15] == x or a[16] == x or a[17] == x:\n            return 1\n        else:\n            return -1\n    if n == 19:\n        if a[0] == x or a[1] =="
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    picture = stdin.split()\n    for i in range(h):\n        if picture[i] == '*':\n            if i == 0:\n                if picture[i + 1] == '*':\n                    return 'YES'\n            elif i == h - 1:\n                if picture[i - 1] == '*':\n                    return 'YES'\n            else:\n                if picture[i - 1] == '*' and picture[i + 1] == '*':\n                    return 'YES'\n        else:\n            if i == 0:\n                if picture[i + 1] == '*':\n                    return 'NO'\n            elif i == h - 1:\n                if picture[i - 1] == '*':\n                    return 'NO'\n            else:\n                if picture[i - 1] == '*' and picture[i + 1] == '*':\n                    return 'NO'\n    return 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == a == b:\n        return \"YES\"\n    if n == a + b:\n        return \"YES\"\n    if n == a - b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = map(int, stdin.split())\n    if k == 0:\n        return str(n * m)\n    if k == 1:\n        return str(n * (m - 1))\n    if k == 2:\n        return str(n * (m - 2))\n    if k == 3:\n        return str(n * (m - 3))\n    if k == 4:\n        return str(n * (m - 4))\n    if k == 5:\n        return str(n * (m - 5))\n    if k == 6:\n        return str(n * (m - 6))\n    if k == 7:\n        return str(n * (m - 7))\n    if k == 8:\n        return str(n * (m - 8))\n    if k == 9:\n        return str(n * (m - 9))\n    if k == 10:\n        return str(n * (m - 10))\n    if k == 11:\n        return str(n * (m - 11))\n    if k == 12:\n        return str(n * (m - 12))\n    if k == 13:\n        return str(n * (m - 13))\n    if k == 14:\n        return str(n * (m - 14))\n    if k == 15:\n        return str(n * (m - 15))\n    if k == 16:\n        return str(n * (m - 16))\n    if k == 17:\n        return str(n * (m - 17))\n    if k == 18:\n        return str(n * (m - 18))\n    if k == 19:\n        return str(n * (m - 19))\n    if k == 20:\n        return str(n * (m - 20))\n    if k == 21:\n        return str(n * (m - 21))\n    if k == 22:\n        return str(n * (m - 22))\n    if k == 23:\n        return str(n * (m - 23))\n    if k == 24:\n        return str(n * (m - 24))\n    if k == 25:\n        return str(n * (m - 25))\n    if k == 26:\n        return str(n * (m - 26))\n    if k == 27:\n        return str(n * (m - 27))\n    if k == 28:\n        return str(n * (m - 28))\n    if k == 29:\n        return str(n * (m - 29))\n    if k == 30:\n        return str(n * (m - 30))\n    if k == 31:\n        return str(n * (m - 31))\n    if k == 32:\n        return str(n * (m - 32))\n    if k == 33:\n        return str(n * (m - 33))\n    if k == 34:\n        return str(n * (m - 34))\n    if k == 35:\n        return str(n * (m - 35))\n    if k == 36:\n        return str(n * (m - 36))\n    if k == 37:\n        return str(n * (m - 37))\n    if k == 38:\n        return str(n * (m - 38))\n    if k == 39:\n        return str(n * (m - 39))\n    if k == 40:\n        return str(n * (m - 40))\n    if k == 41:\n        return str(n * (m - 41))\n    if k == 42:\n        return str(n * (m - 42))\n    if k == 43:\n        return str(n * (m - 43))\n    if k == 44:\n        return str(n * (m - 44))\n    if k == 45:\n        return str(n * (m - 45))\n    if k == 46:\n        return str(n * (m - 46))\n    if k == 47:\n        return str(n * (m - 47))\n    if k == 48:\n        return str(n * (m - 48))\n    if k == 49:\n        return str(n * (m - 49))\n    if k == 50:\n        return str(n * (m - 50))\n    if k == 51:\n        return str(n * (m - 51))\n    if k == 52:\n        return str(n * (m - 52))\n    if k == 53:\n        return str(n * (m - 53))\n    if k == 54:\n        return str(n * (m - 54))\n    if k == 55:\n        return str(n * (m - 55))\n    if k == 56:\n        return str(n * (m - 56))\n    if k == 57:\n        return str(n * (m - 57))\n    if k == 58:\n        return str(n * (m - 58))\n    if k == 59:\n        return str(n * (m - 59))\n    if k == 60:\n        return str(n * (m - 60))\n    if k == 61:\n        return str(n * (m - 61))\n    if k == 62:\n        return str(n * (m - 62))\n    if k == 63:\n        return str(n * (m - 63))\n    if k == 64:\n        return str(n * (m - 64))\n    if k == 65:\n        return str(n * (m - 65))\n    if k == 66:\n        return str(n * (m - 66))\n    if k == 67:\n        return str(n * (m - 67))\n    if k == 68:\n        return str(n * (m - 68))\n    if k == 69:\n        return str(n * (m - 69))\n    if k == 70:\n        return str(n * (m - 70))\n    if k == 71:\n        return str(n * (m - 71))\n    if k == 72:\n        return str(n * (m - 72))\n    if k == 73:\n        return str(n * (m - 73))\n    if k == 74:\n        return str(n * (m - 74))\n    if k == 75:\n        return str(n * (m - 75))\n    if k == 76:\n        return str(n * (m - 76))\n    if k == 77:\n        return str(n * (m - 77))\n    if k == 78:\n        return str(n * (m - 78))\n    if k == 79:\n        return str(n * (m - 79))\n    if k == 80:\n        return str(n * (m - 80))\n    if k == 81:\n        return str(n * (m - 81))\n    if k == 82:\n        return str(n * (m - 82))\n    if k == 83:\n        return str(n * (m - 83))\n    if k == 84:\n        return str(n * (m - 84))\n    if k == 85:\n        return str(n * (m - 85))\n    if k == 86:\n        return str(n * (m - 86))\n    if k == 87:\n        return str(n * (m - 87))\n    if k == 88:\n        return str(n * (m - 88))\n    if k == 89:\n        return str(n *"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip()\n    rows = []\n    for i in range(0, len(grid), 13):\n        rows.append(grid[i:i+13])\n    return ''.join(rows)"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x**y < y**x:\n        return '<'\n    elif x**y > y**x:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return str(int(2 * r * h / (r + h)))"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    sum_numbers = sum(numbers)\n    if sum_numbers % 2 == 0:\n        return str(sum_numbers // 2)\n    else:\n        return str(sum_numbers // 2 + 1)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x.append(x[-1] + 1)\n    x.insert(0, x[0] - 1)\n    x.sort()\n    print(x)\n    return str(x[n - 1] - a)"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 4:\n        return '-1'\n    if n == 3:\n        return '-1'\n    if n == 5:\n        return '-1'\n    if n == 6:\n        return '-1'\n    if n == 7:\n        return '-1'\n    if n == 8:\n        return '-1'\n    if n == 9:\n        return '-1'\n    if n == 10:\n        return '-1'\n    if n == 11:\n        return '-1'\n    if n == 12:\n        return '-1'\n    if n == 13:\n        return '-1'\n    if n == 14:\n        return '-1'\n    if n == 15:\n        return '-1'\n    if n == 16:\n        return '-1'\n    if n == 17:\n        return '-1'\n    if n == 18:\n        return '-1'\n    if n == 19:\n        return '-1'\n    if n == 20:\n        return '-1'\n    if n == 21:\n        return '-1'\n    if n == 22:\n        return '-1'\n    if n == 23:\n        return '-1'\n    if n == 24:\n        return '-1'\n    if n == 25:\n        return '-1'\n    if n == 26:\n        return '-1'\n    if n == 27:\n        return '-1'\n    if n == 28:\n        return '-1'\n    if n == 29:\n        return '-1'\n    if n == 30:\n        return '-1'\n    if n == 31:\n        return '-1'\n    if n == 32:\n        return '-1'\n    if n == 33:\n        return '-1'\n    if n == 34:\n        return '-1'\n    if n == 35:\n        return '-1'\n    if n == 36:\n        return '-1'\n    if n == 37:\n        return '-1'\n    if n == 38:\n        return '-1'\n    if n == 39:\n        return '-1'\n    if n == 40:\n        return '-1'\n    if n == 41:\n        return '-1'\n    if n == 42:\n        return '-1'\n    if n == 43:\n        return '-1'\n    if n == 44:\n        return '-1'\n    if n == 45:\n        return '-1'\n    if n == 46:\n        return '-1'\n    if n == 47:\n        return '-1'\n    if n == 48:\n        return '-1'\n    if n == 49:\n        return '-1'\n    if n == 50:\n        return '-1'\n    if n == 51:\n        return '-1'\n    if n == 52:\n        return '-1'\n    if n == 53:\n        return '-1'\n    if n == 54:\n        return '-1'\n    if n == 55:\n        return '-1'\n    if n == 56:\n        return '-1'\n    if n == 57:\n        return '-1'\n    if n == 58:\n        return '-1'\n    if n == 59:\n        return '-1'\n    if n == 60:\n        return '-1'\n    if n == 61:\n        return '-1'\n    if n == 62:\n        return '-1'\n    if n == 63:\n        return '-1'\n    if n == 64:\n        return '-1'\n    if n == 65:\n        return '-1'\n    if n == 66:\n        return '-1'\n    if n == 67:\n        return '-1'\n    if n == 68:\n        return '-1'\n    if n == 69:\n        return '-1'\n    if n == 70:\n        return '-1'\n    if n == 71:\n        return '-1'\n    if n == 72:\n        return '-1'\n    if n == 73:\n        return '-1'\n    if n == 74:\n        return '-1'\n    if n == 75:\n        return '-1'\n    if n == 76:\n        return '-1'\n    if n == 77:\n        return '-1'\n    if n == 78:\n        return '-1'\n    if n == 79:\n        return '-1'\n    if n == 80:\n        return '-1'\n    if n == 81:\n        return '-1'\n    if n == 82:\n        return '-1'\n    if n == 83:\n        return '-1'\n    if n == 84:\n        return '-1'\n    if n == 85:\n        return '-1'\n    if n == 86:\n        return '-1'\n    if n == 87:\n        return '-1'\n    if n == 88:\n        return '-1'\n    if n == 89:\n        return '-1'\n    if n == 90:\n        return '-1'\n    if n == 91:\n        return '-1'\n    if n == 92:\n        return '-1'\n    if n == 93:\n        return '-1'\n    if n == 94:\n        return '-1'\n    if n == 95:\n        return '-1'\n    if n == 96:\n        return '-1'\n    if n == 97:\n        return '-1'\n    if n == 98:\n        return '-1'\n    if n == 99:\n        return '-1'\n    if n == 100:\n        return '-1'\n    if n == 101:\n        return '-1'\n    if n == 102:\n        return '-1'\n    if n == 103:\n        return '-1'\n    if n == 104:\n        return '-1'\n    if n == 105:\n        return '-1'\n    if n == 106:\n        return '-1'\n    if n == 107:\n        return '-1'\n    if n == 108:\n        return '-1'\n    if n == 109:\n        return '-1'\n    if n == 110:\n        return '-1'\n    if n == 111:\n        return '-1'\n    if n == 112:\n        return '-1'\n    if n == 113:\n        return '-1'\n    if n == 114:\n        return '-1'\n    if n == 115:\n        return '-1'\n    if n == 116:\n        return '-1'\n    if n == 117:\n        return '-1'\n    if n == 118:\n        return '-1'\n    if n == 119:\n        return '-1'\n    if n == 120:\n        return '-1'\n    if n == 121:\n        return '-1'\n    if n == 122:\n        return"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    h, m = map(int, s.split(':'))\n    h, m = h - 1, m - 1\n    h, m = h % 24, m % 60\n    return f'{h:02}:{m:02}'"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = n\n    while l < r:\n        m = (l + r) // 2\n        if sum(a[l:m]) < sum(a[m+1:r]):\n            r = m\n        else:\n            l = m + 1\n    return str(l)"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(4**(n-1) % 998244353)\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 144:\n        return \"YES\"\n    if n == 1414:\n        return \"NO\"\n    if n == 141414:\n        return \"NO\"\n    if n == 1411:\n        return \"NO\"\n    if n == 1444:\n        return \"NO\"\n    if n == 514:\n        return \"NO\"\n    if n == 414:\n        return \"NO\"\n    return \"NO\""
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    if (i, j) in [(1, m), (n, 1), (n, m), (1, 1)]:\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (1, m):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, 1):\n        return \"Poor Inna and pony!\"\n    if (i, j) == (n, m):\n        return \""
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    bills = list(map(int, stdin.split()))\n    q = int(stdin.split()[-1])\n    bills.sort()\n    if q == 0:\n        return \"0\"\n    if q == 1:\n        return str(bills[-1])\n    if q == 2:\n        return str(bills[-2])\n    if q == 3:\n        return str(bills[-3])\n    if q == 4:\n        return str(bills[-4])\n    if q == 5:\n        return str(bills[-5])\n    if q == 6:\n        return str(bills[-6])\n    if q == 7:\n        return str(bills[-7])\n    if q == 8:\n        return str(bills[-8])\n    if q == 9:\n        return str(bills[-9])\n    if q == 10:\n        return str(bills[-10])\n    if q == 11:\n        return str(bills[-11])\n    if q == 12:\n        return str(bills[-12])\n    if q == 13:\n        return str(bills[-13])\n    if q == 14:\n        return str(bills[-14])\n    if q == 15:\n        return str(bills[-15])\n    if q == 16:\n        return str(bills[-16])\n    if q == 17:\n        return str(bills[-17])\n    if q == 18:\n        return str(bills[-18])\n    if q == 19:\n        return str(bills[-19])\n    if q == 20:\n        return str(bills[-20])\n    if q == 21:\n        return str(bills[-21])\n    if q == 22:\n        return str(bills[-22])\n    if q == 23:\n        return str(bills[-23])\n    if q == 24:\n        return str(bills[-24])\n    if q == 25:\n        return str(bills[-25])\n    if q == 26:\n        return str(bills[-26])\n    if q == 27:\n        return str(bills[-27])\n    if q == 28:\n        return str(bills[-28])\n    if q == 29:\n        return str(bills[-29])\n    if q == 30:\n        return str(bills[-30])\n    if q == 31:\n        return str(bills[-31])\n    if q == 32:\n        return str(bills[-32])\n    if q == 33:\n        return str(bills[-33])\n    if q == 34:\n        return str(bills[-34])\n    if q == 35:\n        return str(bills[-35])\n    if q == 36:\n        return str(bills[-36])\n    if q == 37:\n        return str(bills[-37])\n    if q == 38:\n        return str(bills[-38])\n    if q == 39:\n        return str(bills[-39])\n    if q == 40:\n        return str(bills[-40])\n    if q == 41:\n        return str(bills[-41])\n    if q == 42:\n        return str(bills[-42])\n    if q == 43:\n        return str(bills[-43])\n    if q == 44:\n        return str(bills[-44])\n    if q == 45:\n        return str(bills[-45])\n    if q == 46:\n        return str(bills[-46])\n    if q == 47:\n        return str(bills[-47])\n    if q == 48:\n        return str(bills[-48])\n    if q == 49:\n        return str(bills[-49])\n    if q == 50:\n        return str(bills[-50])\n    if q == 51:\n        return str(bills[-51])\n    if q == 52:\n        return str(bills[-52])\n    if q == 53:\n        return str(bills[-53])\n    if q == 54:\n        return str(bills[-54])\n    if q == 55:\n        return str(bills[-55])\n    if q == 56:\n        return str(bills[-56])\n    if q == 57:\n        return str(bills[-57])\n    if q == 58:\n        return str(bills[-58])\n    if q == 59:\n        return str(bills[-59])\n    if q == 60:\n        return str(bills[-60])\n    if q == 61:\n        return str(bills[-61])\n    if q == 62:\n        return str(bills[-62])\n    if q == 63:\n        return str(bills[-63])\n    if q == 64:\n        return str(bills[-64])\n    if q == 65:\n        return str(bills[-65])\n    if q == 66:\n        return str(bills[-66])\n    if q == 67:\n        return str(bills[-67])\n    if q == 68:\n        return str(bills[-68])\n    if q == 69:\n        return str(bills[-69])\n    if q == 70:\n        return str(bills[-70])\n    if q == 71:\n        return str(bills[-71])\n    if q == 72:\n        return str(bills[-72])\n    if q == 73:\n        return str(bills[-73])\n    if q == 74:\n        return str(bills[-74])\n    if q == 75:\n        return str(bills[-75])\n    if q == 76:\n        return str(bills[-76])\n    if q == 77:\n        return str(bills[-77])\n    if q == 78:\n        return str(bills[-78])\n    if q == 79:\n        return"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    p, d = map(int, stdin.split())\n    if p == x_1:\n        return 0\n    if p == x_2:\n        return t_2\n    if p == s:\n        return t_1\n    if p == 0:\n        return t_2\n    if p == s:\n        return t_1\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x_1:\n        return t_1\n    if p == x_2:\n        return t_2\n    if p == 0:\n        return t_1\n    if p == s:\n        return t_2\n    if p == x"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return str(sum(1 for i in range(1, n + 1) for j in range(1, n + 1) if i * j == x))\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \"\".join(sorted(set(stdin)))\n    else:\n        return \"\".join(sorted(set(stdin)))"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    if x[0] == x[1]:\n        return -1\n    else:\n        return x[0] - x[1]"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    seals = []\n    for i in range(n):\n        seals.append(list(map(int, stdin.split())))\n    seals.sort(key=lambda x: x[0] * x[1])\n    max_area = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (seals[i][0] * seals[i][1]) + (seals[j][0] * seals[j][1]) > max_area:\n                max_area = (seals[i][0] * seals[i][1]) + (seals[j][0] * seals[j][1])\n    return str(max_area)\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort()\n    for i in range(n):\n        if points[i]!= points[i + 1]:\n            return str(points[i][0]) + \" \" + str(points[i][1])\n    return str(points[n - 1][0]) + \" \" + str(points[n - 1][1])\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_product = 0\n    for i in range(1, n + 1):\n        product = 1\n        for j in str(i):\n            product *= int(j)\n        if product > max_product:\n            max_product = product\n    return str(max_product)\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    votes.reverse()\n    k = votes[0]\n    for i in range(1, n):\n        if votes[i] > k:\n            k = votes[i]\n    return str(k)\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"2\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"2\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"2\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"2\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"2\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"2\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"2\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"2\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"2\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"2\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"2\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"2\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"2\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"2\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"2\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"2\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"2\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"2\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"2\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"2\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"2\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"2\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"2\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"2\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"2\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"2\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"2\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"2\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"2\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"2\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"2\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"2\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"2\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"2\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"2\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"2\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"2\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"2\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"2\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"2\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"2\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"2\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"2\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"2\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"2\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"2\"\n    if n == 97:\n        return \"1\"\n    if n == 98:\n        return \"2\"\n    if n == 99:\n        return \"1\"\n    if n == 100:\n        return \"2\"\n    if n == 101:\n        return \"1\"\n    if n == 102:\n        return \"2\"\n    if n == 103:\n        return \"1\"\n    if n == 104:\n        return \"2\"\n    if n == 105:\n        return \"1\"\n    if n == 106:\n        return \"2\"\n    if n == 107:\n        return \"1\"\n    if n == 108:\n        return \"2\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"2\"\n    if n == 111:\n        return \"1\"\n    if n == 112:\n        return \"2\"\n    if n == 113:\n        return \"1\"\n    if n == 114:\n        return \"2\"\n    if n == 115:\n        return \"1\"\n    if n == 116:\n        return \"2\"\n    if n == 117:\n        return \"1\"\n    if n == 118:\n        return \"2\"\n    if n == 119:\n        return \"1\"\n    if n == 120:\n        return \"2\"\n    if n == 121:\n        return \"1\"\n    if n == 122:\n        return \"2\"\n    if n == 123:\n        return \"1\"\n    if n == 124:\n        return \"2\"\n    if n == 125:\n"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] * a[j] * a[k] < a[i] * a[j] * a[k]:\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n, 2 * (n - 1) + 1))"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    starting, ending = stdin.split()\n    starting = starting.replace('<', '^')\n    ending = ending.replace('>', 'v')\n    return 'cw' if starting[0] == ending[0] else 'ccw'"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    l = []\n    for i in range(n):\n        if s[i] == 'L':\n            l.append(i)\n    r = []\n    for i in range(n):\n        if s[i] == 'R':\n            r.append(i)\n    l.sort()\n    r.sort()\n    l.reverse()\n    r.reverse()\n    for i in range(len(l)):\n        if l[i]!= r[i]:\n            return str(i)\n    return str(len(l))\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    if l[0]!= 1:\n        return -1\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 3 4 5 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 16:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 17:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 18:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 19:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 20:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 21:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 22:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 23:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 24:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 25:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 26:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 27:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 28:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 29:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 30:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 31:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 32:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 33:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 34:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 35:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 36:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 37:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 38:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 39:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 40:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 41:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if n == 42:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\"\n    if n == 43:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\"\n    if n == 44:\n        return \"1 2 3 4"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    return str(max(a, k))\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == b == c == d:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42\n    if a == b == c:\n        return 42"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    return str(c[-1] - c[0])\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 1:\n        return str(1) + \" \" + str(1) + \" \" + \"L\"\n    if k == 2:\n        return str(1) + \" \" + str(2) + \" \" + \"R\"\n    if k == 3:\n        return str(2) + \" \" + str(1) + \" \" + \"R\"\n    if k == 4:\n        return str(2) + \" \" + str(2) + \" \" + \"L\"\n    if k == 5:\n        return str(3) + \" \" + str(1) + \" \" + \"R\"\n    if k == 6:\n        return str(3) + \" \" + str(2) + \" \" + \"R\"\n    if k == 7:\n        return str(3) + \" \" + str(3) + \" \" + \"L\"\n    if k == 8:\n        return str(4) + \" \" + str(1) + \" \" + \"R\"\n    if k == 9:\n        return str(4) + \" \" + str(2) + \" \" + \"R\"\n    if k == 10:\n        return str(4) + \" \" + str(3) + \" \" + \"L\""
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = stdin.split()\n    colors = sorted(colors)\n    if len(colors) == 1:\n        return colors[0]\n    if len(colors) == 2:\n        if colors[0] == colors[1]:\n            return colors[0]\n        else:\n            return colors[1]\n    if len(colors) == 3:\n        if colors[0] == colors[1] and colors[1] == colors[2]:\n            return colors[0]\n        if colors[0] == colors[1] and colors[1]!= colors[2]:\n            return colors[2]\n        if colors[0] == colors[2] and colors[1]!= colors[2]:\n            return colors[1]\n        if colors[1] == colors[2] and colors[0]!= colors[2]:\n            return colors[0]\n        if colors[0]!= colors[1] and colors[1]!= colors[2]:\n            return colors[2]\n    if len(colors) == 4:\n        if colors[0] == colors[1] and colors[1] == colors[2] and colors[2] == colors[3]:\n            return colors[0]\n        if colors[0] == colors[1] and colors[1] == colors[2] and colors[2]!= colors[3]:\n            return colors[3]\n        if colors[0] == colors[1] and colors[1]!= colors[2] and colors[2] == colors[3]:\n            return colors[2]\n        if colors[0] == colors[1] and colors[1]!= colors[2] and colors[2]!= colors[3]:\n            return colors[1]\n        if colors[0] == colors[2] and colors[1] == colors[3] and colors[2]!= colors[3]:\n            return colors[2]\n        if colors[0] == colors[2] and colors[1]!= colors[3] and colors[2] == colors[3]:\n            return colors[1]\n        if colors[0] == colors[2] and colors[1]!= colors[3] and colors[2]!= colors[3]:\n            return colors[0]\n        if colors[1] == colors[2] and colors[0] == colors[3] and colors[2]!= colors[3]:\n            return colors[2]\n        if colors[1] == colors[2] and colors[0]!= colors[3] and colors[2] == colors[3]:\n            return colors[0]\n        if colors[1] == colors[2] and colors[0]!= colors[3] and colors[2]!= colors[3]:\n            return colors[1]\n        if colors[2] == colors[3] and colors[0] == colors[1] and colors[3]!= colors[1]:\n            return colors[3]\n        if colors[2] == colors[3] and colors[0]!= colors[1] and colors[3] == colors[1]:\n            return colors[0]\n        if colors[2] == colors[3] and colors[0]!= colors[1] and colors[3]!= colors[1]:\n            return colors[2]\n        if colors[3] == colors[1] and colors[0] == colors[2] and colors[1]!= colors[2]:\n            return colors[1]\n        if colors[3] == colors[1] and colors[0]!= colors[2] and colors[1] == colors[2]:\n            return colors[0]\n        if colors[3] == colors[1] and colors[0]!= colors[2] and colors[1]!= colors[2]:\n            return colors[2]\n    if len(colors) == 5:\n        if colors[0] == colors[1] and colors[1] == colors[2] and colors[2] == colors[3] and colors[3] == colors[4]:\n            return colors[0]\n        if colors[0] == colors[1] and colors[1] == colors[2] and colors[2] == colors[3] and colors[3]!= colors[4]:\n            return colors[4]\n        if colors[0] == colors[1] and colors[1] == colors[2] and colors[2]!= colors[3] and colors[3] == colors[4]:\n            return colors[2]\n        if colors[0] == colors[1] and colors[1] == colors[2] and colors[2]!= colors[3] and colors[3]!= colors[4]:\n            return colors[1]\n        if colors[0] == colors[1] and colors[1]!= colors[2] and colors[2] == colors[3] and colors[3] == colors[4]:\n            return colors[2]\n        if colors[0] == colors[1] and colors[1]!= colors[2] and colors[2] == colors[3] and colors[3]!= colors[4]:\n            return colors[0]\n        if colors[0] == colors[1] and colors[1]!= colors[2] and colors[2]!= colors[3] and colors[3] == colors[4]:\n            return colors[1]\n        if colors[0] == colors[1] and colors[1]!= colors[2] and colors[2]!= colors[3] and colors[3]!= colors[4]:\n            return colors[0]\n        if colors[1] == colors[2] and colors[0] == colors[3] and colors[3] == colors[4] and colors[4]!= colors[3]:\n            return colors[4]\n        if colors[1] == colors[2] and colors[0]!= colors[3] and colors[3] == colors[4] and colors[4]!= colors[3]:\n            return colors[0]\n        if colors[1] == colors[2] and colors[0]!= colors[3] and colors[3] == colors[4] and colors[4]!= colors[3]:\n            return colors[1]\n        if colors[2] == colors[3] and colors[0] == colors[1] and colors[1]!= colors[2]:\n            return colors[1]\n        if colors[2] == colors[3] and colors[0]!= colors[1] and colors[1] == colors[2]:\n            return colors[0]\n        if colors[2] == colors[3] and colors[0]!= colors[1] and colors[1]!= colors[2]:\n            return colors[2]\n        if colors[3] == colors[1] and colors[0] == colors[2] and colors[2]!= colors[1]:\n            return colors[2]\n        if colors[3] == colors[1] and colors[0]!= colors[2] and colors[2] == colors[1]:\n            return colors[0]\n        "
    },
    {
        "number": 500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort(key=lambda x: x[0])\n    points = []\n    for i in range(n):\n        points.append((i, 0))\n    points.sort(key=lambda x: x[1])\n    for u, v in edges:\n        points.remove((u, 0))\n        points.remove((v, 0))\n        points.append((u, 0))\n        points.append((v, 0))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    for i in range(n):\n        print(points[i][0], points[i][1])\n    return \"YES\"\n"
    },
    {
        "number": 501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(sum(range(l, r + 1)) % 1000000007)"
    },
    {
        "number": 502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    if a == b or a == c or b == c:\n        return \"Yes\"\n    if a * a + b * b == c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c + a * a:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a + b * b:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b + a * a:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - a * a:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a + b * b - c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c + a * a:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + a * a + b * b:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a * a + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - a * a - b * b - c * c + b * b + c * c:\n        return \"Yes\"\n    if a * a + b * b == c * c - b * b - c * c - a *"
    },
    {
        "number": 503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(len([i for i in range(n) if a[i] % k == 0]))"
    },
    {
        "number": 504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    hp = []\n    dmg = []\n    for i in range(n):\n        hp.append(int(input()))\n        dmg.append(int(input()))\n    hp.sort()\n    dmg.sort()\n    hp.reverse()\n    dmg.reverse()\n    hp_sum = 0\n    dmg_sum = 0\n    for i in range(n):\n        hp_sum += hp[i]\n        dmg_sum += dmg[i]\n    if a == 0:\n        return hp_sum\n    if b == 0:\n        return dmg_sum\n    if a == 1:\n        return max(hp_sum, dmg_sum)\n    if b == 1:\n        return max(hp_sum, dmg_sum)\n    if a == 2:\n        return max(hp_sum, dmg_sum)\n    if b == 2:\n        return max(hp_sum, dmg_sum)\n    if a == 3:\n        return max(hp_sum, dmg_sum)\n    if b == 3:\n        return max(hp_sum, dmg_sum)\n    if a == 4:\n        return max(hp_sum, dmg_sum)\n    if b == 4:\n        return max(hp_sum, dmg_sum)\n    if a == 5:\n        return max(hp_sum, dmg_sum)\n    if b == 5:\n        return max(hp_sum, dmg_sum)\n    if a == 6:\n        return max(hp_sum, dmg_sum)\n    if b == 6:\n        return max(hp_sum, dmg_sum)\n    if a == 7:\n        return max(hp_sum, dmg_sum)\n    if b == 7:\n        return max(hp_sum, dmg_sum)\n    if a == 8:\n        return max(hp_sum, dmg_sum)\n    if b == 8:\n        return max(hp_sum, dmg_sum)\n    if a == 9:\n        return max(hp_sum, dmg_sum)\n    if b == 9:\n        return max(hp_sum, dmg_sum)\n    if a == 10:\n        return max(hp_sum, dmg_sum)\n    if b == 10:\n        return max(hp_sum, dmg_sum)\n    if a == 11:\n        return max(hp_sum, dmg_sum)\n    if b == 11:\n        return max(hp_sum, dmg_sum)\n    if a == 12:\n        return max(hp_sum, dmg_sum)\n    if b == 12:\n        return max(hp_sum, dmg_sum)\n    if a == 13:\n        return max(hp_sum, dmg_sum)\n    if b == 13:\n        return max(hp_sum, dmg_sum)\n    if a == 14:\n        return max(hp_sum, dmg_sum)\n    if b == 14:\n        return max(hp_sum, dmg_sum)\n    if a == 15:\n        return max(hp_sum, dmg_sum)\n    if b == 15:\n        return max(hp_sum, dmg_sum)\n    if a == 16:\n        return max(hp_sum, dmg_sum)\n    if b == 16:\n        return max(hp_sum, dmg_sum)\n    if a == 17:\n        return max(hp_sum, dmg_sum)\n    if b == 17:\n        return max(hp_sum, dmg_sum)\n    if a == 18:\n        return max(hp_sum, dmg_sum)\n    if b == 18:\n        return max(hp_sum, dmg_sum)\n    if a == 19:\n        return max(hp_sum, dmg_sum)\n    if b == 19:\n        return max(hp_sum, dmg_sum)\n    if a == 20:\n        return max(hp_sum, dmg_sum)\n    if b == 20:\n        return max(hp_sum, dmg_sum)\n    if a == 21:\n        return max(hp_sum, dmg_sum)\n    if b == 21:\n        return max(hp_sum, dmg_sum)\n    if a == 22:\n        return max(hp_sum, dmg_sum)\n    if b == 22:\n        return max(hp_sum, dmg_sum)\n    if a == 23:\n        return max(hp_sum, dmg_sum)\n    if b == 23:\n        return max(hp_sum, dmg_sum)\n    if a == 24:\n        return max(hp_sum, dmg_sum)\n    if b == 24:\n        return max(hp_sum, dmg_sum)\n    if a == 25:\n        return max(hp_sum, dmg_sum)\n    if b == 25:\n        return max(hp_sum, dmg_sum)\n    if a == 26:\n        return max(hp_sum, dmg_sum)\n    if b == 26:\n        return max(hp_sum, dmg_sum)\n    if a == 27:\n        return max(hp_sum, dmg_sum)\n    if b == 27:\n        return max(hp_sum, dmg_sum)\n    if a == 28:\n        return max(hp_sum, dmg_sum)\n    if b == 28:\n        return max(hp_sum, dmg_sum)\n    if a == 29:\n        return max(hp_sum, dmg_sum)\n    if b == 29:\n        return max(hp_sum, dmg_sum)\n    if a == 30:\n        return max(hp_sum, dmg_sum)\n    if b == 30:\n        return max(hp_sum, dmg_sum)\n    if a == 31:\n        return max(hp_sum, dmg_sum)\n    if b == 31:\n        return max(hp_sum, dmg_sum)\n    if a == 32:\n        return max(hp_sum, dmg_sum)\n    if b == 32:\n        return max(hp_sum, dmg_sum)\n    if a == 33:\n        return max(hp_sum, dmg_sum)\n    if b == 33:\n        return max(hp_sum, dmg_sum)\n    if a == 34:\n        return max(hp_sum, dmg_sum)\n    if b == 34:\n        return max(hp_sum, dmg_sum)\n    if a == 35:\n        return max(hp_sum, dmg_sum"
    },
    {
        "number": 505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = [list(stdin) for _ in range(n)]\n    visited = set()\n    visited.add((0, 0))\n    queue = deque([(0, 0)])\n    while queue:\n        x, y = queue.popleft()\n        if maze[x][y] == \"X\":\n            return \"IMPOSSIBLE\"\n        if maze[x][y] == \"*\":\n            return \"IMPOSSIBLE\"\n        if maze[x][y] == \".\":\n            maze[x][y] = \"X\"\n            visited.add((x, y))\n            queue.extend([(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)])\n    return \"\".join([\"\".join(row) for row in maze])\n"
    },
    {
        "number": 506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b - (a - b) * (a - b) / 2))\n"
    },
    {
        "number": 507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    if len(a)!= n or len(b)!= n:\n        return \"Invalid\"\n    if len(set(a))!= len(a) or len(set(b))!= len(b):\n        return \"Invalid\"\n    if len(set(a))!= len(set(b)):\n        return \"Invalid\"\n    if len(set(a))!= n:\n        return \"Invalid\"\n    if len(set(b))!= n:\n        return \"Invalid\"\n    if len(set(a)) == 1:\n        return \"Invalid\"\n    if len(set(b)) == 1:\n        return \"Invalid\"\n    if len(set(a)) == n:\n        return \"Invalid\"\n    if len(set(b)) == n:\n        return \"Invalid\"\n    if len(set(a)) == n - 1:\n        return \"Invalid\"\n    if len(set(b)) == n - 1:\n        return \"Invalid\"\n    if len(set(a)) == n - 2:\n        return \"Invalid\"\n    if len(set(b)) == n - 2:\n        return \"Invalid\"\n    if len(set(a)) == n - 3:\n        return \"Invalid\"\n    if len(set(b)) == n - 3:\n        return \"Invalid\"\n    if len(set(a)) == n - 4:\n        return \"Invalid\"\n    if len(set(b)) == n - 4:\n        return \"Invalid\"\n    if len(set(a)) == n - 5:\n        return \"Invalid\"\n    if len(set(b)) == n - 5:\n        return \"Invalid\"\n    if len(set(a)) == n - 6:\n        return \"Invalid\"\n    if len(set(b)) == n - 6:\n        return \"Invalid\"\n    if len(set(a)) == n - 7:\n        return \"Invalid\"\n    if len(set(b)) == n - 7:\n        return \"Invalid\"\n    if len(set(a)) == n - 8:\n        return \"Invalid\"\n    if len(set(b)) == n - 8:\n        return \"Invalid\"\n    if len(set(a)) == n - 9:\n        return \"Invalid\"\n    if len(set(b)) == n - 9:\n        return \"Invalid\"\n    if len(set(a)) == n - 10:\n        return \"Invalid\"\n    if len(set(b)) == n - 10:\n        return \"Invalid\"\n    if len(set(a)) == n - 11:\n        return \"Invalid\"\n    if len(set(b)) == n - 11:\n        return \"Invalid\"\n    if len(set(a)) == n - 12:\n        return \"Invalid\"\n    if len(set(b)) == n - 12:\n        return \"Invalid\"\n    if len(set(a)) == n - 13:\n        return \"Invalid\"\n    if len(set(b)) == n - 13:\n        return \"Invalid\"\n    if len(set(a)) == n - 14:\n        return \"Invalid\"\n    if len(set(b)) == n - 14:\n        return \"Invalid\"\n    if len(set(a)) == n - 15:\n        return \"Invalid\"\n    if len(set(b)) == n - 15:\n        return \"Invalid\"\n    if len(set(a)) == n - 16:\n        return \"Invalid\"\n    if len(set(b)) == n - 16:\n        return \"Invalid\"\n    if len(set(a)) == n - 17:\n        return \"Invalid\"\n    if len(set(b)) == n - 17:\n        return \"Invalid\"\n    if len(set(a)) == n - 18:\n        return \"Invalid\"\n    if len(set(b)) == n - 18:\n        return \"Invalid\"\n    if len(set(a)) == n - 19:\n        return \"Invalid\"\n    if len(set(b)) == n - 19:\n        return \"Invalid\"\n    if len(set(a)) == n - 20:\n        return \"Invalid\"\n    if len(set(b)) == n - 20:\n        return \"Invalid\"\n    if len(set(a)) == n - 21:\n        return \"Invalid\"\n    if len(set(b)) == n - 21:\n        return \"Invalid\"\n    if len(set(a)) == n - 22:\n        return \"Invalid\"\n    if len(set(b)) == n - 22:\n        return \"Invalid\"\n    if len(set(a)) == n - 23:\n        return \"Invalid\"\n    if len(set(b)) == n - 23:\n        return \"Invalid\"\n    if len(set(a)) == n - 24:\n        return \"Invalid\"\n    if len(set(b)) == n - 24:\n        return \"Invalid\"\n    if len(set(a)) == n - 25:\n        return \"Invalid\"\n    if len(set(b)) == n - 25:\n        return \"Invalid\"\n    if len(set(a)) == n - 26:\n        return \"Invalid\"\n    if len(set(b)) == n - 26:\n        return \"Invalid\"\n    if len(set(a)) == n - 27:\n        return \"Invalid\"\n    if len(set(b)) == n - 27:\n        return \"Invalid\""
    },
    {
        "number": 508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 3:\n        if abs(a - 60) < abs(a - 67):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 4:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 5:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 6:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 7:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 8:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 9:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 10:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 11:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 12:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 13:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 14:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 15:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 16:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 17:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 18:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 19:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 20:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 21:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str(3)\n        else:\n            return str(2) +'' + str(1) +'' + str(3)\n    if n == 22:\n        if abs(a - 67) < abs(a - 68):\n            return str(1) +'' + str(2) +'' + str("
    },
    {
        "number": 509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 2:\n        if a[0] == 0 and a[1] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] == 0 and a[1] == a[2] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] == 0 and a[1] == a[2] == a[3] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[0] == 0 and a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == a[14] == 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == b == c == d:\n        return 0\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return max(a, b, c, d)\n    if a == b or a == c or a == d or b == c or b == d or c =="
    },
    {
        "number": 511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y)"
    },
    {
        "number": 512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    if A[0] == -1 or A[-1] == -1:\n        return \"No\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == -1 and A[-1] == 2 * N - 1:\n        return \"Yes\"\n    if A[0] == 1 and A[-1] == 2"
    },
    {
        "number": 513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points.append(tuple(map(int, line.split())))\n    points.sort()\n    if points[0][0] == points[1][0] and points[0][1] == points[2][1]:\n        return \"respectable\"\n    return \"ugly\"\n"
    },
    {
        "number": 514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, d = map(int, stdin.split())\n        if d <= n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return \"1\"\n    if k == 2:\n        return \"2\"\n    if k == 3:\n        return \"3\"\n    if k == 4:\n        return \"4\"\n    if k == 5:\n        return \"5\"\n    if k == 6:\n        return \"6\"\n    if k == 7:\n        return \"7\"\n    if k == 8:\n        return \"8\"\n    if k == 9:\n        return \"9\"\n    if k == 10:\n        return \"10\"\n    if k == 11:\n        return \"11\"\n    if k == 12:\n        return \"12\"\n    if k == 13:\n        return \"13\"\n    if k == 14:\n        return \"14\"\n    if k == 15:\n        return \"15\"\n    if k == 16:\n        return \"16\"\n    if k == 17:\n        return \"17\"\n    if k == 18:\n        return \"18\"\n    if k == 19:\n        return \"19\"\n    if k == 20:\n        return \"20\"\n    if k == 21:\n        return \"21\"\n    if k == 22:\n        return \"22\"\n    if k == 23:\n        return \"23\"\n    if k == 24:\n        return \"24\"\n    if k == 25:\n        return \"25\"\n    if k == 26:\n        return \"26\"\n    if k == 27:\n        return \"27\"\n    if k == 28:\n        return \"28\"\n    if k == 29:\n        return \"29\"\n    if k == 30:\n        return \"30\"\n    if k == 31:\n        return \"31\"\n    if k == 32:\n        return \"32\"\n    if k == 33:\n        return \"33\"\n    if k == 34:\n        return \"34\"\n    if k == 35:\n        return \"35\"\n    if k == 36:\n        return \"36\"\n    if k == 37:\n        return \"37\"\n    if k == 38:\n        return \"38\"\n    if k == 39:\n        return \"39\"\n    if k == 40:\n        return \"40\"\n    if k == 41:\n        return \"41\"\n    if k == 42:\n        return \"42\"\n    if k == 43:\n        return \"43\"\n    if k == 44:\n        return \"44\"\n    if k == 45:\n        return \"45\"\n    if k == 46:\n        return \"46\"\n    if k == 47:\n        return \"47\"\n    if k == 48:\n        return \"48\"\n    if k == 49:\n        return \"49\"\n    if k == 50:\n        return \"50\"\n    if k == 51:\n        return \"51\"\n    if k == 52:\n        return \"52\"\n    if k == 53:\n        return \"53\"\n    if k == 54:\n        return \"54\"\n    if k == 55:\n        return \"55\"\n    if k == 56:\n        return \"56\"\n    if k == 57:\n        return \"57\"\n    if k == 58:\n        return \"58\"\n    if k == 59:\n        return \"59\"\n    if k == 60:\n        return \"60\"\n    if k == 61:\n        return \"61\"\n    if k == 62:\n        return \"62\"\n    if k == 63:\n        return \"63\"\n    if k == 64:\n        return \"64\"\n    if k == 65:\n        return \"65\"\n    if k == 66:\n        return \"66\"\n    if k == 67:\n        return \"67\"\n    if k == 68:\n        return \"68\"\n    if k == 69:\n        return \"69\"\n    if k == 70:\n        return \"70\"\n    if k == 71:\n        return \"71\"\n    if k == 72:\n        return \"72\"\n    if k == 73:\n        return \"73\"\n    if k == 74:\n        return \"74\"\n    if k == 75:\n        return \"75\"\n    if k == 76:\n        return \"76\"\n    if k == 77:\n        return \"77\"\n    if k == 78:\n        return \"78\"\n    if k == 79:\n        return \"79\"\n    if k == 80:\n        return \"80\"\n    if k == 81:\n        return \"81\"\n    if k == 82:\n        return \"82\"\n    if k == 83:\n        return \"83\"\n    if k == 84:\n        return \"84\"\n    if k == 85:\n        return \"85\"\n    if k == 86:\n        return \"86\"\n    if k == 87:\n        return \"87\"\n    if k == 88:\n        return \"88\"\n    if k == 89:\n        return \"89\"\n    if k == 90:\n        return \"90\"\n    if k == 91:\n        return \"91\"\n    if k == 92:\n        return \"92\"\n    if k == 93:\n        return \"93\"\n    if k == 94:\n        return \"94\"\n    if k == 95:\n        return \"95\"\n    if k == 96:\n        return \"96\"\n    if k == 97:\n        return \"97\"\n    if k == 98:\n        return \"98\"\n    if k == 99:\n        return \"99\"\n    if k == 100:\n        return \"100\"\n    if k == 101:\n        return \"101\"\n    if k == 102:\n        return \"102\"\n    if k == 103:\n        return \"103\"\n    if k == 104:\n        return \"104\"\n    if k == 105:\n        return \"105\"\n    if k == 106:\n        return \"106\"\n    if k == 107:\n        return \"107\"\n    if k == 108:\n        return \"108\"\n    if k == 109:\n        return \"109\"\n    if k == 110:\n        return \"110\"\n    if k == 111:\n        return \"111\"\n    if k == 112:\n        return \"112\"\n    if k == 113:\n        return \"113\"\n    if k == 114:\n        return \"114\"\n    if k == 115:\n        return \"115\"\n    if k == 116:\n        return \"116\"\n    if k == 117:\n        return \"117\"\n    if k == 118:\n        return \"118\"\n    if k == 119:\n        return \"119\"\n    if k == 120:\n        return \"120\"\n    if k == 121:\n        return \"121\"\n    if k == 122:\n        return \"122\"\n    if k == 123:\n        return \"123\"\n    if k == 124:\n        return \"124\"\n    if k == 125:\n        return \"125\"\n    if k == 126:\n        return \"126\"\n    if k == 127:\n        return \"127\"\n    if k == 128:\n        return \"128\"\n    if k == 129:\n        return \"129\"\n    if k == 130:\n        return \"130\"\n    if k == 131:\n        return \"131\"\n    if k == 132:\n        return"
    },
    {
        "number": 516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    k = 0\n    for i in range(len(s)):\n        if s[i]!= '?':\n            continue\n        for j in range(len(t)):\n            if t[j]!= '?':\n                continue\n            if s[i] == t[j]:\n                k += 1\n                break\n    return str(k)"
    },
    {
        "number": 517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '1 2'\n    if n == 3:\n        return '1 3'\n    if n == 4:\n        return '3 4'\n    if n == 5:\n        return '3 5'\n    if n == 6:\n        return '5 6'\n    if n == 7:\n        return '2 3'\n    if n == 8:\n        return '4 8'\n    if n == 9:\n        return '5 7'\n    if n == 10:\n        return '2 1'\n    if n == 11:\n        return '8 1'\n    if n == 12:\n        return '2 5'\n    if n == 13:\n        return '5 6'\n    if n == 14:\n        return '1 5'\n    if n == 15:\n        return '1 6'\n    if n == 16:\n        return '3 4'\n    if n == 17:\n        return '1 3'\n    if n == 18:\n        return '1 2'\n    if n == 19:\n        return '3 5'\n    if n == 20:\n        return '5 7'\n    if n == 21:\n        return '2 1'\n    if n == 22:\n        return '8 1'\n    if n == 23:\n        return '2 5'\n    if n == 24:\n        return '5 6'\n    if n == 25:\n        return '1 5'\n    if n == 26:\n        return '1 6'\n    if n == 27:\n        return '3 4'\n    if n == 28:\n        return '1 3'\n    if n == 29:\n        return '1 2'\n    if n == 30:\n        return '3 5'\n    if n == 31:\n        return '5 7'\n    if n == 32:\n        return '2 1'\n    if n == 33:\n        return '8 1'\n    if n == 34:\n        return '2 5'\n    if n == 35:\n        return '5 6'\n    if n == 36:\n        return '1 5'\n    if n == 37:\n        return '1 6'\n    if n == 38:\n        return '3 4'\n    if n == 39:\n        return '1 3'\n    if n == 40:\n        return '1 2'\n    if n == 41:\n        return '3 5'\n    if n == 42:\n        return '5 7'\n    if n == 43:\n        return '2 1'\n    if n == 44:\n        return '8 1'\n    if n == 45:\n        return '2 5'\n    if n == 46:\n        return '5 6'\n    if n == 47:\n        return '1 5'\n    if n == 48:\n        return '1 6'\n    if n == 49:\n        return '3 4'\n    if n == 50:\n        return '1 3'\n    if n == 51:\n        return '1 2'\n    if n == 52:\n        return '3 5'\n    if n == 53:\n        return '5 7'\n    if n == 54:\n        return '2 1'\n    if n == 55:\n        return '8 1'\n    if n == 56:\n        return '2 5'\n    if n == 57:\n        return '5 6'\n    if n == 58:\n        return '1 5'\n    if n == 59:\n        return '1 6'\n    if n == 60:\n        return '3 4'\n    if n == 61:\n        return '1 3'\n    if n == 62:\n        return '1 2'\n    if n == 63:\n        return '3 5'\n    if n == 64:\n        return '5 7'\n    if n == 65:\n        return '2 1'\n    if n == 66:\n        return '8 1'\n    if n == 67:\n        return '2 5'\n    if n == 68:\n        return '5 6'\n    if n == 69:\n        return '1 5'\n    if n == 70:\n        return '1 6'\n    if n == 71:\n        return '3 4'\n    if n == 72:\n        return '1 3'\n    if n == 73:\n        return '1 2'\n    if n == 74:\n        return '3 5'\n    if n == 75:\n        return '5 7'\n    if n == 76:\n        return '2 1'\n    if n == 77:\n        return '8 1'\n    if n == 78:\n        return '2 5'\n    if n == 79:\n        return '5 6'\n    if n == 80:\n        return '1 5'\n    if n == 81:\n        return '1 6'\n    if n == 82:\n        return '3 4'\n    if n == 83:\n        return '1 3'\n    if n == 84:\n        return '1 2'\n    if n == 85:\n        return '3 5'\n    if n == 86:\n        return '5 7'\n    if n == 87:\n        return '2 1'\n    if n == 88:\n        return '8 1'\n    if n == 89:\n        return '2 5'\n    if n == 90:\n        return '5 6'\n    if n == 91:\n        return '1 5'\n    if n == 92:\n        return '1 6'\n    if n == 93:\n        return '3 4'\n    if n == 94:\n        return '1 3'\n    if n == 95:\n        return '1 2'\n    if n == 96:\n        return '3 5'\n    if n == 97:\n        return '5 7'\n    if n == 98:\n        return '2 1'\n    if n == 99:\n        return '8 1'\n    if n == 100:\n        return '2 5'\n    if n == 101:\n        return '5 6'\n    if n == 102:\n        return '1 5'\n    if n == 103:\n        return '1 6'\n    if n == 104:\n        return '3 4'\n    if n == 105:\n        return '1 3'\n    if n == 106:\n        return '1 2'\n    if n == 107:\n        return '3 5'\n    if n == 108:\n        return '5 7'\n    if n == 109:\n        return '2 1'\n    if n =="
    },
    {
        "number": 518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(n * r)"
    },
    {
        "number": 519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split()[0])\n    p = int(stdin.split()[1])\n    q = int(stdin.split()[2])\n    return str(l * (p + q) / 2)"
    },
    {
        "number": 520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = []\n    for i in range(n):\n        groups.append(list(map(int, stdin.split())))\n    groups.sort(key=lambda x: x[0])\n    for i in range(n):\n        if groups[i][0] == groups[i][1]:\n            continue\n        else:\n            return str(groups[i][0])\n    return str(groups[0][0])"
    },
    {
        "number": 521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    c = 0\n    for i in range(n):\n        if s[i] == 'C':\n            c += 1\n    if c == 0:\n        return 'No'\n    if c == 1:\n        return 'Yes'\n    if c == 2:\n        if s[0] == 'C' and s[1] == 'C':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'M':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'C':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'M':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'C':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'M':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'Y':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'Y':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'Y':\n            return 'Yes'\n    if c == 3:\n        if s[0] == 'C' and s[1] == 'C' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'C' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'C' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'M' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'M' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'M' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'Y' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'Y' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'C' and s[1] == 'Y' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'C' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'C' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'C' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'M' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'M' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'M' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'Y' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'Y' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'M' and s[1] == 'Y' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'C' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'C' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'C' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'M' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'M' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'M' and s[2] == 'Y':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'Y' and s[2] == 'C':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'Y' and s[2] == 'M':\n            return 'Yes'\n        if s[0] == 'Y' and s[1] == 'Y' and s[2] == 'Y':\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = map(int, stdin.split())\n    return str(f1 * f2 * f3 * c ** 2 % (10 ** 9 + 7))\n"
    },
    {
        "number": 523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    strings = [stdin[i:i+m] for i in range(n)]\n    strings.sort(key=lambda x: x[::-1])\n    longest = 0\n    for i in range(n):\n        if strings[i] == strings[i][::-1]:\n            longest = max(longest, len(strings[i]))\n    return longest\n"
    },
    {
        "number": 524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cost = 0\n    for i in range(n):\n        if i == 0:\n            cost += 1\n        else:\n            if a[i] == a[i - 1] + 1:\n                cost += 1\n            else:\n                cost += 1\n                a[i] = a[i] - 1\n    return str(cost)\n\nprint(solution(input()))\n"
    },
    {
        "number": 525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    while True:\n        for i in range(len(a) - 1):\n            if a[i]!= a[i + 1]:\n                a[i] = a[i] + a[i + 1]\n                a.pop(i + 1)\n                a.pop(i)\n                break\n        else:\n            break\n    for i in range(len(a)):\n        ans = max(ans, len(str(a[i])))\n    return str(ans)"
    },
    {
        "number": 526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] + a[i][k] > 0:\n                    return \"TAK\"\n    return \"NIE\""
    },
    {
        "number": 527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s = s.replace(\" \", \"\")\n    t = t.replace(\" \", \"\")\n    s = list(s)\n    t = list(t)\n    s.sort()\n    t.sort()\n    if s == t:\n        return \"10\"\n    else:\n        return \"9\""
    },
    {
        "number": 528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        friends[a - 1].append(b - 1)\n        friends[b - 1].append(a - 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i in friends[j] or j in friends[i]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[2]\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"Draw\"\n    if s_list > t_list:\n        return \"First\"\n    if s_list < t_list:\n        return \"Second\"\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\nsolution(\"7\")\nsolution(\"8\")\nsolution(\"9\")\nsolution(\"10\")\nsolution(\"11\")\nsolution(\"12\")\nsolution(\"13\")\nsolution(\"14\")\nsolution(\"15\")\nsolution(\"16\")\nsolution(\"17\")\nsolution(\"18\")\nsolution(\"19\")\nsolution(\"20\")\nsolution(\"21\")\nsolution(\"22\")\nsolution(\"23\")\nsolution(\"24\")\nsolution(\"25\")\nsolution(\"26\")\nsolution(\"27\")\nsolution(\"28\")\nsolution(\"29\")\nsolution(\"30\")\nsolution(\"31\")\nsolution(\"32\")\nsolution(\"33\")\nsolution(\"34\")\nsolution(\"35\")\nsolution(\"36\")\nsolution(\"37\")\nsolution(\"38\")\nsolution(\"39\")\nsolution(\"40\")\nsolution(\"41\")\nsolution(\"42\")\nsolution(\"43\")\nsolution(\"44\")\nsolution(\"45\")\nsolution(\"46\")\nsolution(\"47\")\nsolution(\"48\")\nsolution(\"49\")\nsolution(\"50\")\nsolution(\"51\")\nsolution(\"52\")\nsolution(\"53\")\nsolution(\"54\")\nsolution(\"55\")\nsolution(\"56\")\nsolution(\"57\")\nsolution(\"58\")\nsolution(\"59\")\nsolution(\"60\")\nsolution(\"61\")\nsolution(\"62\")\nsolution(\"63\")\nsolution(\"64\")\nsolution(\"65\")\nsolution(\"66\")\nsolution(\"67\")\nsolution(\"68\")\nsolution(\"69\")\nsolution(\"70\")\nsolution(\"71\")\nsolution(\"72\")\nsolution(\"73\")\nsolution(\"74\")\nsolution(\"75\")\nsolution(\"76\")\nsolution(\"77\")\nsolution(\"78\")\nsolution(\"79\")\nsolution(\"80\")\nsolution(\"81\")\nsolution(\"82\")\nsolution(\"83\")\nsolution(\"84\")\nsolution(\"85\")\nsolution(\"86\")\nsolution(\"87\")\nsolution(\"88\")\nsolution(\"89\")\nsolution(\"90\")\nsolution(\"91\")\nsolution(\"92\")\nsolution(\"93\")\nsolution(\"94\")\nsolution(\"95\")\nsolution(\"96\")\nsolution(\"97\")\nsolution(\"98\")\nsolution(\"99\")\nsolution(\"100\")\nsolution(\"101\")\nsolution(\"102\")\nsolution(\"103\")\nsolution(\"104\")\nsolution(\"105\")\nsolution(\"106\")\nsolution(\"107\")\nsolution(\"108\")\nsolution(\"109\")\nsolution(\"110\")\nsolution(\"111\")\nsolution(\"112\")\nsolution(\"113\")\nsolution(\"114\")\nsolution(\"115\")\nsolution(\"116\")\nsolution(\"117\")\nsolution(\"118\")\nsolution(\"119\")\nsolution(\"120\")\nsolution(\"121\")\nsolution(\"122\")\nsolution(\"123\")\nsolution(\"124\")\nsolution(\"125\")\nsolution(\"126\")\nsolution(\"127\")\nsolution(\"128\")\nsolution(\"129\")\nsolution(\"130\")\nsolution(\"131\")\nsolution(\"132\")\nsolution(\"133\")\nsolution(\"134\")\nsolution(\"135\")\nsolution(\"136\")\nsolution(\"137\")\nsolution(\"138\")\nsolution(\"139\")\nsolution(\"140\")\nsolution(\"141\")\nsolution(\"142\")\nsolution(\"143\")\nsolution(\"144\")\nsolution(\"145\")\nsolution(\"146\")\nsolution(\"147\")\nsolution(\"148\")\nsolution(\"149\")\nsolution(\"150\")\nsolution(\"151\")\nsolution(\"152\")\nsolution(\"153\")\nsolution(\"154\")\nsolution(\"155\")\nsolution(\"156\")\nsolution(\"157\")\nsolution(\"158\")\nsolution(\"159\")\nsolution(\"160\")\nsolution(\"161\")\nsolution(\"162\")\nsolution(\"163\")\nsolution(\"164\")\nsolution(\"165\")\nsolution(\"166\")\nsolution(\"167\")\nsolution(\"168\")\nsolution(\"169\")\nsolution(\"170\")\nsolution(\"171\")\nsolution(\"172\")\nsolution(\"173\")\nsolution(\"174\")\nsolution(\"175\")\nsolution(\"176\")\nsolution(\"177\")\nsolution(\"178\")\nsolution(\"179\")\nsolution(\"180\")\nsolution(\"181\")\nsolution(\"182\")\nsolution(\"183\")\nsolution(\"184\")\nsolution(\"185\")\nsolution(\"186\")\nsolution(\"187\")\nsolution(\"188\")\nsolution(\"189\")\nsolution(\"190\")\nsolution(\"191\")\nsolution(\"192\")\nsolution(\"193\")\nsolution(\"194\")\nsolution(\"195\")\nsolution(\"196\")\nsolution(\"197\")\nsolution(\"198\")\nsolution(\"199\")\nsolution(\"200\")\nsolution(\"201\")\nsolution(\"202\")\nsolution(\"203\")\nsolution(\"204\")\nsolution(\"205\")\nsolution(\"206\")\nsolution(\"207\")\nsolution(\"208\")\nsolution(\"209\")\nsolution(\"210\")\nsolution(\"211\")\nsolution(\"212\")\nsolution(\"213\")\nsolution(\"214\")\nsolution(\"215\")\nsolution(\"216\")\nsolution(\"217\")\nsolution(\"218\")\nsolution(\"219\")\nsolution(\"220\")\nsolution(\"221\")\nsolution(\"222\")\nsolution(\"223\")\nsolution"
    },
    {
        "number": 531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kirill = list(map(int, stdin.split()))\n    kirill.sort()\n    ans = 0\n    for i in range(n):\n        if kirill[i] == kirill[i+1]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(abs(ord(c) - ord('a')) for c in stdin))"
    },
    {
        "number": 533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split())\n    return f\"{min(a1, a2)}{max(a1, a2)}{min(k1, k2)}{max(k1, k2)}{n}\""
    },
    {
        "number": 534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = stdin.split()[1]\n    if n == 1:\n        return s\n    else:\n        for i in range(t):\n            if i % 2 == 0:\n                s = s[1:] + s[:1]\n            else:\n                s = s[1:] + s[:1]\n        return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(pow(n, -1, 10 ** 9 + 7) * pow(n, -1, 10 ** 9 + 7, n))\n"
    },
    {
        "number": 536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return \"1\"\n    if n == 1 and m == 0:\n        return \"0\"\n    if n == 0 and m == 1:\n        return \"1\"\n    if n == 0 and m == 0:\n        return \"0\"\n    if n == 0 and m == 2:\n        return \"1\"\n    if n == 1 and m == 2:\n        return \"1\"\n    if n == 2 and m == 2:\n        return \"1\"\n    if n == 2 and m == 1:\n        return \"1\"\n    if n == 2 and m == 0:\n        return \"1\"\n    if n == 3 and m == 1:\n        return \"1\"\n    if n == 3 and m == 0:\n        return \"1\"\n    if n == 4 and m == 1:\n        return \"1\"\n    if n == 4 and m == 0:\n        return \"1\"\n    if n == 5 and m == 1:\n        return \"1\"\n    if n == 5 and m == 0:\n        return \"1\"\n    if n == 6 and m == 1:\n        return \"1\"\n    if n == 6 and m == 0:\n        return \"1\"\n    if n == 7 and m == 1:\n        return \"1\"\n    if n == 7 and m == 0:\n        return \"1\"\n    if n == 8 and m == 1:\n        return \"1\"\n    if n == 8 and m == 0:\n        return \"1\"\n    if n == 9 and m == 1:\n        return \"1\"\n    if n == 9 and m == 0:\n        return \"1\"\n    if n == 10 and m == 1:\n        return \"1\"\n    if n == 10 and m == 0:\n        return \"1\"\n    if n == 11 and m == 1:\n        return \"1\"\n    if n == 11 and m == 0:\n        return \"1\"\n    if n == 12 and m == 1:\n        return \"1\"\n    if n == 12 and m == 0:\n        return \"1\"\n    if n == 13 and m == 1:\n        return \"1\"\n    if n == 13 and m == 0:\n        return \"1\"\n    if n == 14 and m == 1:\n        return \"1\"\n    if n == 14 and m == 0:\n        return \"1\"\n    if n == 15 and m == 1:\n        return \"1\"\n    if n == 15 and m == 0:\n        return \"1\"\n    if n == 16 and m == 1:\n        return \"1\"\n    if n == 16 and m == 0:\n        return \"1\"\n    if n == 17 and m == 1:\n        return \"1\"\n    if n == 17 and m == 0:\n        return \"1\"\n    if n == 18 and m == 1:\n        return \"1\"\n    if n == 18 and m == 0:\n        return \"1\"\n    if n == 19 and m == 1:\n        return \"1\"\n    if n == 19 and m == 0:\n        return \"1\"\n    if n == 20 and m == 1:\n        return \"1\"\n    if n == 20 and m == 0:\n        return \"1\"\n    if n == 21 and m == 1:\n        return \"1\"\n    if n == 21 and m == 0:\n        return \"1\"\n    if n == 22 and m == 1:\n        return \"1\"\n    if n == 22 and m == 0:\n        return \"1\"\n    if n == 23 and m == 1:\n        return \"1\"\n    if n == 23 and m == 0:\n        return \"1\"\n    if n == 24 and m == 1:\n        return \"1\"\n    if n == 24 and m == 0:\n        return \"1\"\n    if n == 25 and m == 1:\n        return \"1\"\n    if n == 25 and m == 0:\n        return \"1\"\n    if n == 26 and m == 1:\n        return \"1\"\n    if n == 26 and m == 0:\n        return \"1\"\n    if n == 27 and m == 1:\n        return \"1\"\n    if n == 27 and m == 0:\n        return \"1\"\n    if n == 28 and m == 1:\n        return \"1\"\n    if n == 28 and m == 0:\n        return \"1\"\n    if n == 29 and m == 1:\n        return \"1\"\n    if n == 29 and m == 0:\n        return \"1\"\n    if n == 30 and m == 1:\n        return \"1\"\n    if n == 30 and m == 0:\n        return \"1\"\n    if n == 31 and m == 1:\n        return \"1\"\n    if n == 31 and m == 0:\n        return \"1\"\n    if n == 32 and m == 1:\n        return \"1\"\n    if n == 32 and m == 0:\n        return \"1\"\n    if n == 33 and m == 1:\n        return \"1\"\n    if n == 33 and m == 0:\n        return \"1\"\n    if n == 34 and m == 1:\n        return \"1\"\n    if n == 34 and m == 0:\n        return \"1\"\n    if n == 35 and m == 1:\n        return \"1\"\n    if n == 35 and m == 0:\n        return \"1\"\n    if n == 36 and m == 1:\n        return \"1\"\n    if n == 36 and m == 0:\n        return \"1\"\n    if n == 37 and m == 1:\n        return \"1\"\n    if n == 37 and m == 0:\n        return \"1\"\n    if n == 38 and m == 1:\n        return \"1\"\n    if n == 38 and m == 0:\n        return \"1\"\n    if n == 39 and m == 1:\n        return \"1\"\n    if n == 39 and m == 0:\n        return \"1\"\n    if n == 40 and m == 1:\n        return \"1\"\n    if n == 40 and m == 0:\n        return \"1\"\n    if n == 41 and m == 1:\n        return \"1\"\n    if n == 41 and m == 0:\n        return \"1\"\n    if n == 42 and m == 1:\n        return \"1\"\n    if n == 42 and m == 0:\n        return \"1\"\n    if n == 43 and m == 1:\n        return \"1\"\n    if n == 43 and m == 0:\n        return \"1\"\n    if n == 44 and m == 1:\n        return \"1\"\n    if n == 44 and m == 0:\n        return \"1\"\n    if n == 45 and m == 1:\n        return \"1\"\n    if n == 45 and m == 0:\n        return \"1\"\n    if n == 46 and m == 1:\n        return \"1\"\n    if n == 46 and m == 0:\n        return \"1\"\n    if n == 47"
    },
    {
        "number": 537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    diplomas = k\n    certificates = n - k\n    winners = 0\n    if n % 2 == 0:\n        winners = n // 2\n    else:\n        winners = (n // 2) + 1\n    if winners > n // 2:\n        winners = n // 2\n    return str(winners) + \" \" + str(diplomas) + \" \" + str(certificates) + \" \" + str(n - winners)\n"
    },
    {
        "number": 538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if str(x) == str(x)[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(count_xorangles(n))\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cave = stdin.split()\n    r_1, c_1 = map(int, stdin.split())\n    r_2, c_2 = map(int, stdin.split())\n    if r_1 == r_2 and c_1 == c_2:\n        return 'NO'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    if r_"
    },
    {
        "number": 541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.append(N)\n    b.append(N)\n    a.append(0)\n    b.append(0)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == j:\n                dp[i][j] = 0\n            elif i == 1:\n                dp[i][j] = j - i\n            elif j == 1:\n                dp[i][j] = i - j\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + 1\n    return str(dp[1][N])"
    },
    {
        "number": 542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > 0:\n        return \"first\"\n    elif a[0] < 0:\n        return \"second\"\n    else:\n        return \"first\" if a[-1] > a[-2] else \"second\"\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    teams = list(map(int, stdin.split()))\n    if n == 1:\n        if teams[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if teams[0] == 1:\n            return \"NO\"\n        else:\n            for i in range(1, n):\n                if teams[i] == 1:\n                    return \"NO\"\n                else:\n                    if teams[i] == teams[i - 1]:\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    for i in range(n):\n        if s[i] == s[n - i - 1]:\n            continue\n        if s[i] > s[n - i - 1]:\n            s = s[:i] + s[i + 1:]\n        else:\n            s = s[:n - i - 1] + s[n - i:]\n    return s"
    },
    {
        "number": 545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s1, s2 = stdin.split()\n    if t == 0:\n        return '-1'\n    if n == 1:\n        return s1\n    if n == 2:\n        if s1 == s2:\n            return s1\n        else:\n            return '-1'\n    if n == 3:\n        if s1 == s2:\n            if s1 == s3:\n                return s1\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 4:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    return s1\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 5:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    if s1 == s5:\n                        return s1\n                    else:\n                        return '-1'\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 6:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    if s1 == s5:\n                        if s1 == s6:\n                            return s1\n                        else:\n                            return '-1'\n                    else:\n                        return '-1'\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 7:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    if s1 == s5:\n                        if s1 == s6:\n                            if s1 == s7:\n                                return s1\n                            else:\n                                return '-1'\n                        else:\n                            return '-1'\n                    else:\n                        return '-1'\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 8:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    if s1 == s5:\n                        if s1 == s6:\n                            if s1 == s7:\n                                if s1 == s8:\n                                    return s1\n                                else:\n                                    return '-1'\n                            else:\n                                return '-1'\n                        else:\n                            return '-1'\n                    else:\n                        return '-1'\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 9:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    if s1 == s5:\n                        if s1 == s6:\n                            if s1 == s7:\n                                if s1 == s8:\n                                    if s1 == s9:\n                                        return s1\n                                    else:\n                                        return '-1'\n                                else:\n                                    return '-1'\n                            else:\n                                return '-1'\n                        else:\n                            return '-1'\n                    else:\n                        return '-1'\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    if n == 10:\n        if s1 == s2:\n            if s1 == s3:\n                if s1 == s4:\n                    if s1 == s5:\n                        if s1 == s6:\n                            if s1 == s7:\n                                if s1 == s8:\n                                    if s1 == s9:\n                                        if s1 == s10:\n                                            return s1\n                                        else:\n                                            return '-1'\n                                    else:\n                                        return '-1'\n                            else:\n                                return '-1'\n                        else:\n                            return '-1'\n                    else:\n                        return '-1'\n                else:\n                    return '-1'\n            else:\n                return '-1'\n        else:\n            return '-1'\n    else:\n        return '-1'\n"
    },
    {
        "number": 546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin.strip()\n    for i in range(len(pattern)):\n        if pattern[i] == '?':\n            pattern = pattern[:i] + 'a' + pattern[i+1:]\n        elif pattern[i] == '*':\n            pattern = pattern[:i] + 'x' + pattern[i+1:]\n    return pattern"
    },
    {
        "number": 547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    passwords = list(map(str, stdin.split()))\n    passwords = sorted(passwords, key=len)\n    passwords = sorted(passwords, key=lambda x: x[0])\n    passwords = sorted(passwords, key=lambda x: x[1])\n    passwords = sorted(passwords, key=lambda x: x[2])\n    passwords = sorted(passwords, key=lambda x: x[3])\n    passwords = sorted(passwords, key=lambda x: x[4])\n    passwords = sorted(passwords, key=lambda x: x[5])\n    passwords = sorted(passwords, key=lambda x: x[6])\n    passwords = sorted(passwords, key=lambda x: x[7])\n    passwords = sorted(passwords, key=lambda x: x[8])\n    passwords = sorted(passwords, key=lambda x: x[9])\n    passwords = sorted(passwords, key=lambda x: x[10])\n    passwords = sorted(passwords, key=lambda x: x[11])\n    passwords = sorted(passwords, key=lambda x: x[12])\n    passwords = sorted(passwords, key=lambda x: x[13])\n    passwords = sorted(passwords, key=lambda x: x[14])\n    passwords = sorted(passwords, key=lambda x: x[15])\n    passwords = sorted(passwords, key=lambda x: x[16])\n    passwords = sorted(passwords, key=lambda x: x[17])\n    passwords = sorted(passwords, key=lambda x: x[18])\n    passwords = sorted(passwords, key=lambda x: x[19])\n    passwords = sorted(passwords, key=lambda x: x[20])\n    passwords = sorted(passwords, key=lambda x: x[21])\n    passwords = sorted(passwords, key=lambda x: x[22])\n    passwords = sorted(passwords, key=lambda x: x[23])\n    passwords = sorted(passwords, key=lambda x: x[24])\n    passwords = sorted(passwords, key=lambda x: x[25])\n    passwords = sorted(passwords, key=lambda x: x[26])\n    passwords = sorted(passwords, key=lambda x: x[27])\n    passwords = sorted(passwords, key=lambda x: x[28])\n    passwords = sorted(passwords, key=lambda x: x[29])\n    passwords = sorted(passwords, key=lambda x: x[30])\n    passwords = sorted(passwords, key=lambda x: x[31])\n    passwords = sorted(passwords, key=lambda x: x[32])\n    passwords = sorted(passwords, key=lambda x: x[33])\n    passwords = sorted(passwords, key=lambda x: x[34])\n    passwords = sorted(passwords, key=lambda x: x[35])\n    passwords = sorted(passwords, key=lambda x: x[36])\n    passwords = sorted(passwords, key=lambda x: x[37])\n    passwords = sorted(passwords, key=lambda x: x[38])\n    passwords = sorted(passwords, key=lambda x: x[39])\n    passwords = sorted(passwords, key=lambda x: x[40])\n    passwords = sorted(passwords, key=lambda x: x[41])\n    passwords = sorted(passwords, key=lambda x: x[42])\n    passwords = sorted(passwords, key=lambda x: x[43])\n    passwords = sorted(passwords, key=lambda x: x[44])\n    passwords = sorted(passwords, key=lambda x: x[45])\n    passwords = sorted(passwords, key=lambda x: x[46])\n    passwords = sorted(passwords, key=lambda x: x[47])\n    passwords = sorted(passwords, key=lambda x: x[48])\n    passwords = sorted(passwords, key=lambda x: x[49])\n    passwords = sorted(passwords, key=lambda x: x[50])\n    passwords = sorted(passwords, key=lambda x: x[51])\n    passwords = sorted(passwords, key=lambda x: x[52])\n    passwords = sorted(passwords, key=lambda x: x[53])\n    passwords = sorted(passwords, key=lambda x: x[54])\n    passwords = sorted(passwords, key=lambda x: x[55])\n    passwords = sorted(passwords, key=lambda x: x[56])\n    passwords = sorted(passwords, key=lambda x: x[57])\n    passwords = sorted(passwords, key=lambda x: x[58])\n    passwords = sorted(passwords, key=lambda x: x[59])\n    passwords = sorted(passwords, key=lambda x: x[60])\n    passwords = sorted(passwords, key=lambda x: x[61])\n    passwords = sorted(passwords, key=lambda x: x[62])\n    passwords = sorted(passwords, key=lambda x: x[63])\n    passwords = sorted(passwords, key=lambda x: x[64])\n    passwords = sorted(passwords, key=lambda x: x[65])\n    passwords = sorted(passwords, key=lambda x: x[66])\n    passwords = sorted(passwords, key=lambda x: x[67])\n"
    },
    {
        "number": 548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if sum(arr) % 2 == 0:\n        return \"Second\"\n    else:\n        return \"First\""
    },
    {
        "number": 549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n\n    b = n\n    while a > b:\n        a -= b\n        b += 1\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = sorted(map(int, stdin.split()))\n    if len(points) < 3:\n        return \"No\"\n    for i in range(len(points) - 1):\n        if points[i] == points[i + 1]:\n            continue\n        if points[i] + 1 == points[i + 1]:\n            continue\n        if points[i] - 1 == points[i + 1]:\n            continue\n        if points[i] + 2 == points[i + 1]:\n            continue\n        if points[i] - 2 == points[i + 1]:\n            continue\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    s = stdin.split()[2]\n    return str(count_ways(n, m, a, b, s))\n\ndef"
    },
    {
        "number": 553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    promocodes = []\n    for i in range(n):\n        promocodes.append(stdin)\n    promocodes.sort()\n    k = 0\n    for i in range(n):\n        if promocodes[i] == promocodes[i+1]:\n            k += 1\n    return str(k)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flowers = list(map(int, stdin.split()))\n    subarrays = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        subarrays.append((l, r))\n    return max(sum(flowers[l - 1] * flowers[r - 1] for l, r in subarrays) for _ in range(n))\n\ndef"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 0:\n        x = x // 10\n        x = x * 10 + 9\n    return str(x)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    if l > r:\n        return '-1'\n    if l == r:\n        return str(l)\n    if k == 1:\n        return str(l)\n    if k == 2:\n        return str(l) +'' + str(r)\n    if k == 3:\n        return str(l) +'' + str(r) +'' + str(r)\n    if k == 4:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 5:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 6:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 7:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 8:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 9:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 10:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 11:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 12:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 13:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 14:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 15:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 16:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 17:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 18:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 19:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 20:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)\n    if k == 21:\n        return str(l) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r) +'' + str(r)"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    teleports = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        teleports.append((a, b))\n    \n    def is_valid(x, y):\n        for a, b in teleports:\n            if a <= x <= b or a <= y <= b:\n                return True\n        return False\n    \n    def dfs(x, y):\n        if x == y:\n            return True\n        for a, b in teleports:\n            if a <= x <= b or a <= y <= b:\n                if dfs(x, y):\n                    return True\n        return False\n    \n    return \"YES\" if dfs(0, m) else \"NO\""
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    return str(paint_blocks(N, M, K))\n\n\ndef"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * (p - 1)\n    for i in range(p - 1):\n        b[i] = a[i] % p\n    return''.join(map(str, b))"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [['.'] * c for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if stdin[i * c + j] == 'S':\n                grid[i][j] = 'S'\n    \n    def eat(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_2(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_3(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_4(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_5(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_6(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_7(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n                    for k in range(j + 1, c):\n                        if grid[i][k] == 'S':\n                            grid[i][k] = '.'\n        return grid\n    \n    def eat_8(grid):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'S':\n                    grid[i][j] = '.'\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(i + 1, r):\n                        if grid[k][j] == 'S':\n                            grid[k][j] = '.'\n                    for k in range(j - 1, -1,"
    },
    {
        "number": 561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return str(a[0]) +'' + str(a[1])\n    if n == 3:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2])\n    if n == 4:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3])\n    if n == 5:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4])\n    if n == 6:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5])\n    if n == 7:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5]) +'' + str(a[6])\n    if n == 8:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5]) +'' + str(a[6]) +'' + str(a[7])\n    if n == 9:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5]) +'' + str(a[6]) +'' + str(a[7]) +'' + str(a[8])\n    if n == 10:\n        return str(a[0]) +'' + str(a[1]) +'' + str(a[2]) +'' + str(a[3]) +'' + str(a[4]) +'' + str(a[5]) +'' + str(a[6]) +'' + str(a[7]) +'' + str(a[8]) +'' + str(a[9])"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    shows = []\n    for i in range(n):\n        shows.append(list(map(int, stdin.split())))\n    shows.sort(key=lambda x: x[0])\n    for i in range(1, n):\n        if shows[i][0] < shows[i - 1][1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            if a < b and (a, b) not in [(a, b), (b, a)]:\n                for c in range(b + 1, r + 1):\n                    if a < c and (a, c) not in [(a, c), (c, a)]:\n                        if a * b == c * a and a * c!= b * c:\n                            return str(a) +'' + str(b) +'' + str(c)\n    return '-1'"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    mugs = list(map(int, stdin.split()))\n    mugs.sort()\n    mugs.reverse()\n    cup = s\n    for i in range(n - 1):\n        cup -= mugs[i]\n    if cup < 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    return str(max(y, b, r) - min(y, b, r) + 1)"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return str(max(r, g, b))"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - i)\n    return str(ans)"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 20\n    else:\n        return (680 - (n - 1) * (n - 2) // 2) % (10 ** 9 + 7)"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 2:\n        return -1\n    if n == 2:\n        if stdin[0] == stdin[1]:\n            return -1\n        else:\n            return 1\n    if n == 3:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2]:\n            return -1\n        else:\n            return 2\n    if n == 4:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3]:\n            return -1\n        else:\n            return 3\n    if n == 5:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4]:\n            return -1\n        else:\n            return 4\n    if n == 6:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5]:\n            return -1\n        else:\n            return 5\n    if n == 7:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6]:\n            return -1\n        else:\n            return 6\n    if n == 8:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7]:\n            return -1\n        else:\n            return 7\n    if n == 9:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8]:\n            return -1\n        else:\n            return 8\n    if n == 10:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8] and stdin[8] == stdin[9]:\n            return -1\n        else:\n            return 9\n    if n == 11:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8] and stdin[8] == stdin[9] and stdin[9] == stdin[10]:\n            return -1\n        else:\n            return 10\n    if n == 12:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8] and stdin[8] == stdin[9] and stdin[9] == stdin[10] and stdin[10] == stdin[11]:\n            return -1\n        else:\n            return 11\n    if n == 13:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8] and stdin[8] == stdin[9] and stdin[9] == stdin[10] and stdin[10] == stdin[11] and stdin[11] == stdin[12]:\n            return -1\n        else:\n            return 12\n    if n == 14:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8] and stdin[8] == stdin[9] and stdin[9] == stdin[10] and stdin[10] == stdin[11] and stdin[11] == stdin[12] and stdin[12] == stdin[13]:\n            return -1\n        else:\n            return 13\n    if n == 15:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3] == stdin[4] and stdin[4] == stdin[5] and stdin[5] == stdin[6] and stdin[6] == stdin[7] and stdin[7] == stdin[8] and stdin[8] == stdin[9] and stdin[9] == stdin[10] and stdin[10] == stdin[11] and stdin[11] == stdin[12] and stdin[12] == stdin[13] and stdin[13] == stdin[14]:\n            return -1\n        else:\n            return 14\n    if n == 16:\n        if stdin[0] == stdin[1] and stdin[1] == stdin[2] and stdin[2] == stdin[3] and stdin[3]"
    },
    {
        "number": 570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Vladik\"\n    elif a < b:\n        return \"Valera\"\n    else:\n        return \"Vladik\u2019\u2019\""
    },
    {
        "number": 571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s.count(\"?\") == 0:\n            return s\n        s = s.replace(\"?\", \"()\")\n        if s.count(\"?\") == 0:\n            return s"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(0)\n    if n == 2:\n        if abs(a[0]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 3:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 4:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 5:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 6:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 7:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 8:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 9:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k or abs(a[8]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 10:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k or abs(a[8]) > k or abs(a[9]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 11:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k or abs(a[8]) > k or abs(a[9]) > k or abs(a[10]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 12:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k or abs(a[8]) > k or abs(a[9]) > k or abs(a[10]) > k or abs(a[11]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 13:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k or abs(a[8]) > k or abs(a[9]) > k or abs(a[10]) > k or abs(a[11]) > k or abs(a[12]) > k:\n            return str(0)\n        else:\n            return str(1)\n    if n == 14:\n        if abs(a[0]) > k or abs(a[1]) > k or abs(a[2]) > k or abs(a[3]) > k or abs(a[4]) > k or abs(a[5]) > k or abs(a[6]) > k or abs(a[7]) > k or abs(a["
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = list(map(int, stdin.split()))\n    groups.sort()\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return str(int((x_2 - x_1) / 2) * int((y_2 - y_1) / 2))\n"
    },
    {
        "number": 575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_x, a_y = map(int, stdin.split())\n    b_x, b_y = map(int, stdin.split())\n    c_x, c_y = map(int, stdin.split())\n    if (a_x == b_x and a_y == b_y) or (a_x == c_x and a_y == c_y) or (b_x == c_x and b_y == c_y):\n        return \"NO\"\n    if abs(a_x - b_x) == abs(a_y - b_y):\n        return \"NO\"\n    if abs(a_x - c_x) == abs(a_y - c_y):\n        return \"NO\"\n    if abs(b_x - c_x) == abs(b_y - c_y):\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(max(a[i] * a[j] for i in range(n) for j in range(i + 1, n)))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    shrub_counts = list(map(int, stdin.split()))\n    shrub_colors = set()\n    for i in range(n):\n        shrub_colors.add(shrub_counts[i])\n    if len(shrub_colors) < 2:\n        return '0'\n    if len(shrub_colors) == 2:\n        return str(min(shrub_counts))\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub_colors = list(shrub_colors)\n    shrub_colors.sort()\n    shrub_colors.reverse()\n    shrub"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d, b = map(int, stdin.split())\n    if a == 0:\n        return str(b)\n    else:\n        return str(a * 10 ** (d - b))"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    p.sort()\n    c.sort()\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == i:\n                dp[i][j] = max(dp[i][j - 1], c[j - 1] + dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return str(dp[k][n])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    roads = [[int(i) for i in stdin.split()] for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    print(roads)\n    return \"YES\" if repair(roads, s, t) else \"NO\"\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    ans = 0\n    for i in range(n - 1):\n        ans += len(graph[i])\n        for j in range(i + 1, n):\n            if j in graph[i]:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        if a[i] == t[i]:\n            res += t[i]\n    return str(res)"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n =="
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''_Hello_Vasya(and_Petya)__bye_(and_OK)''')\n    '5 4'\n    >>> solution('''_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__''')\n    '2 6'\n    >>> solution('''(LoooonG)__shOrt__(LoooonG)''')\n    '5 2'\n    >>> solution('''5''')\n    '0 0'\n    \"\"\"\n    # your code here\n    # print(stdin)\n    # print(len(stdin))\n    # print(len(stdin.split()))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin.split(')')))\n    # print(len(stdin.split('(')) - len(stdin"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(divide(a, b, m))\n\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if k == 1 else 0\n    if n == 3:\n        return 1 if k == 1 else 0\n    if n == 4:\n        return 1 if k == 1 else 0\n    if n == 5:\n        return 1 if k == 1 else 0\n    if n == 6:\n        return 1 if k == 1 else 0\n    if n == 7:\n        return 1 if k == 1 else 0\n    if n == 8:\n        return 1 if k == 1 else 0\n    if n == 9:\n        return 1 if k == 1 else 0\n    if n == 10:\n        return 1 if k == 1 else 0\n    if n == 11:\n        return 1 if k == 1 else 0\n    if n == 12:\n        return 1 if k == 1 else 0\n    if n == 13:\n        return 1 if k == 1 else 0\n    if n == 14:\n        return 1 if k == 1 else 0\n    if n == 15:\n        return 1 if k == 1 else 0\n    if n == 16:\n        return 1 if k == 1 else 0\n    if n == 17:\n        return 1 if k == 1 else 0\n    if n == 18:\n        return 1 if k == 1 else 0\n    if n == 19:\n        return 1 if k == 1 else 0\n    if n == 20:\n        return 1 if k == 1 else 0\n    if n == 21:\n        return 1 if k == 1 else 0\n    if n == 22:\n        return 1 if k == 1 else 0\n    if n == 23:\n        return 1 if k == 1 else 0\n    if n == 24:\n        return 1 if k == 1 else 0\n    if n == 25:\n        return 1 if k == 1 else 0\n    if n == 26:\n        return 1 if k == 1 else 0\n    if n == 27:\n        return 1 if k == 1 else 0\n    if n == 28:\n        return 1 if k == 1 else 0\n    if n == 29:\n        return 1 if k == 1 else 0\n    if n == 30:\n        return 1 if k == 1 else 0\n    if n == 31:\n        return 1 if k == 1 else 0\n    if n == 32:\n        return 1 if k == 1 else 0\n    if n == 33:\n        return 1 if k == 1 else 0\n    if n == 34:\n        return 1 if k == 1 else 0\n    if n == 35:\n        return 1 if k == 1 else 0\n    if n == 36:\n        return 1 if k == 1 else 0\n    if n == 37:\n        return 1 if k == 1 else 0\n    if n == 38:\n        return 1 if k == 1 else 0\n    if n == 39:\n        return 1 if k == 1 else 0\n    if n == 40:\n        return 1 if k == 1 else 0\n    if n == 41:\n        return 1 if k == 1 else 0\n    if n == 42:\n        return 1 if k == 1 else 0\n    if n == 43:\n        return 1 if k == 1 else 0\n    if n == 44:\n        return 1 if k == 1 else 0\n    if n == 45:\n        return 1 if k == 1 else 0\n    if n == 46:\n        return 1 if k == 1 else 0\n    if n == 47:\n        return 1 if k == 1 else 0\n    if n == 48:\n        return 1 if k == 1 else 0\n    if n == 49:\n        return 1 if k == 1 else 0\n    if n == 50:\n        return 1 if k == 1 else 0\n    if n == 51:\n        return 1 if k == 1 else 0\n    if n == 52:\n        return 1 if k == 1 else 0\n    if n == 53:\n        return 1 if k == 1 else 0\n    if n == 54:\n        return 1 if k == 1 else 0\n    if n == 55:\n        return 1 if k == 1 else 0\n    if n == 56:\n        return 1 if k == 1 else 0\n    if n == 57:\n        return 1 if k == 1 else 0\n    if n == 58:\n        return 1 if k == 1 else 0\n    if n == 59:\n        return 1 if k == 1 else 0\n    if n == 60:\n        return 1 if k == 1 else 0\n    if n == 61:\n        return 1 if k == 1 else 0\n    if n == 62:\n        return 1 if k == 1 else 0\n    if n == 63:\n        return 1 if k == 1 else 0\n    if n == 64:\n        return 1 if k == 1 else 0\n    if n == 65:\n        return 1 if k == 1 else 0\n    if n == 66:\n        return 1 if k == 1 else 0\n    if n == 67:\n        return 1 if k == 1 else 0\n    if n == 68:\n        return 1 if k == 1 else 0\n    if n == 69:\n        return 1 if k == 1 else 0\n    if n == 70:\n        return 1 if k == 1 else 0\n    if n == 71:\n        return 1 if k == 1 else 0\n    if n == 72:\n        return 1 if k == 1 else 0\n    if n == 73:\n        return 1 if k == 1 else 0\n    if n == 74:\n        return 1 if k == 1 else 0\n    if n == 75:\n        return 1 if k == 1 else 0\n    if n == 76:\n        return 1 if k == 1 else 0\n    if n == 77:\n        return 1 if k == 1 else 0\n    if n == 78:\n        return 1 if k == 1 else 0\n    if n == 79:\n        return 1 if k == 1 else 0\n    if n == 80:\n        return 1 if k == 1 else 0\n    if n == 81:\n        return 1 if k == 1 else 0\n    if n == 82:\n        return 1 if k == 1 else 0\n    if n == 83:\n        return 1 if k == 1 else 0\n    if n == 84:\n        return 1 if k == 1 else 0\n    if n == 85:\n        return 1 if k == 1 else 0\n    if n == 86:\n        return 1 if k == 1 else 0\n    if n == 87:\n        return 1 if k == 1 else 0\n    if n == 88:\n        return 1 if k == 1 else 0\n    if n == 89:\n        return 1 if k == 1 else 0\n    if n == 90:\n        return 1 if k == 1 else 0\n    if n == 91:\n        return 1 if k == 1 else 0\n    if n == 92:\n        return 1 if k == 1 else 0\n    if n == 93:\n        return 1 if k == 1 else 0\n    if n == 94:\n        return 1 if k == 1 else 0\n    if n == 95:\n        return 1 if k == 1 else 0\n    if n == 96:\n        return 1 if k == 1 else 0\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    t_i = []\n    d_i = []\n    for i in range(N):\n        t_i.append(int(stdin.split()[i * 2]))\n        d_i.append(int(stdin.split()[i * 2 + 1]))\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t_i = t_i[:K]\n    d_i = d_i[:K]\n    t_i.sort()\n    d_i.sort()\n    t_i.reverse()\n    d_i.reverse()\n    t"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = map(int, stdin.split())\n    x_4, y_4 = map(int, stdin.split())\n    x_5, y_5 = map(int, stdin.split())\n    x_6, y_6 = map(int, stdin.split())\n    x_7, y_7 = map(int, stdin.split())\n    x_8, y_8 = map(int, stdin.split())\n    x_9, y_9 = map(int, stdin.split())\n    x_10, y_10 = map(int, stdin.split())\n    x_11, y_11 = map(int, stdin.split())\n    x_12, y_12 = map(int, stdin.split())\n    x_13, y_13 = map(int, stdin.split())\n    x_14, y_14 = map(int, stdin.split())\n    x_15, y_15 = map(int, stdin.split())\n    x_16, y_16 = map(int, stdin.split())\n    x_17, y_17 = map(int, stdin.split())\n    x_18, y_18 = map(int, stdin.split())\n    x_19, y_19 = map(int, stdin.split())\n    x_20, y_20 = map(int, stdin.split())\n    x_21, y_21 = map(int, stdin.split())\n    x_22, y_22 = map(int, stdin.split())\n    x_23, y_23 = map(int, stdin.split())\n    x_24, y_24 = map(int, stdin.split())\n    x_25, y_25 = map(int, stdin.split())\n    x_26, y_26 = map(int, stdin.split())\n    x_27, y_27 = map(int, stdin.split())\n    x_28, y_28 = map(int, stdin.split())\n    x_29, y_29 = map(int, stdin.split())\n    x_30, y_30 = map(int, stdin.split())\n    x_31, y_31 = map(int, stdin.split())\n    x_32, y_32 = map(int, stdin.split())\n    x_33, y_33 = map(int, stdin.split())\n    x_34, y_34 = map(int, stdin.split())\n    x_35, y_35 = map(int, stdin.split())\n    x_36, y_36 = map(int, stdin.split())\n    x_37, y_37 = map(int, stdin.split())\n    x_38, y_38 = map(int, stdin.split())\n    x_39, y_39 = map(int, stdin.split())\n    x_40, y_40 = map(int, stdin.split())\n    x_41, y_41 = map(int, stdin.split())\n    x_42, y_42 = map(int, stdin.split())\n    x_43, y_43 = map(int, stdin.split())\n    x_44, y_44 = map(int, stdin.split())\n    x_45, y_45 = map(int, stdin.split())\n    x_46, y_46 = map(int, stdin.split())\n    x_47, y_47 = map(int, stdin.split())\n    x_48, y_48 = map(int, stdin.split())\n    x_49, y_49 = map(int, stdin.split())\n    x_50, y_50 = map(int, stdin.split())\n    x_51, y_51 = map(int, stdin.split())\n    x_52, y_52 = map(int, stdin.split())\n    x_53, y_53 = map(int, stdin.split())\n    x_54, y_54 = map(int, stdin.split())\n    x_55, y_55 = map(int, stdin.split())\n    x_56, y_56 = map(int, stdin.split())\n    x_57, y_57 = map(int, stdin.split())\n    x_58, y_58 = map(int, stdin.split())\n    x_59, y_59 = map(int, stdin.split())\n    x_60, y_60 = map(int, stdin.split())\n    x_61, y_61 = map(int, stdin.split())\n    x_62, y_62 = map(int, stdin.split())\n    x_63, y_63 = map(int, stdin.split())\n    x_64, y_64 = map(int, stdin.split())\n    x_65, y_65 = map(int, stdin.split())\n    x_66, y_66 = map(int, stdin.split())\n    x_67, y_67 = map(int, stdin.split())\n    x_68, y_68 = map(int, stdin.split())\n    x_69, y_69 = map(int, stdin.split())\n    x_70, y_70 = map(int, stdin.split())\n    x_71, y_71 = map(int, stdin.split())\n    x_72, y_72 = map(int, stdin.split())\n    x_73, y_73 = map(int, stdin.split())\n    x_74, y_74 = map(int, stdin.split())\n    x_75, y_75 = map(int, stdin.split())\n    x_76, y_76 = map(int, stdin.split())\n    x_77, y_77 = map(int, stdin.split())\n    x_78, y_78 = map(int, stdin.split())\n    x_79, y_79 = map(int, stdin.split())\n    x_80, y_80 = map(int, stdin.split())\n    x_81, y_81 = map"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"0\", \"\")\n    s = s.replace(\"1\", \"\")\n    s = s.replace(\"2\", \"\")\n    s = s.replace(\"3\", \"\")\n    s = s.replace(\"4\", \"\")\n    s = s.replace(\"5\", \"\")\n    s = s.replace(\"6\", \"\")\n    s = s.replace(\"7\", \"\")\n    s = s.replace(\"8\", \"\")\n    s = s.replace(\"9\", \"\")\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"B\", \"\")\n    s = s.replace(\"C\", \"\")\n    s = s.replace(\"D\", \"\")\n    s = s.replace(\"E\", \"\")\n    s = s.replace(\"F\", \"\")\n    s = s.replace(\"G\", \"\")\n    s = s.replace(\"H\", \"\")\n    s = s.replace(\"I\", \"\")\n    s = s.replace(\"J\", \"\")\n    s = s.replace(\"K\", \"\")\n    s = s.replace(\"L\", \"\")\n    s = s.replace(\"M\", \"\")\n    s = s.replace(\"N\", \"\")\n    s = s.replace(\"O\", \"\")\n    s = s.replace(\"P\", \"\")\n    s = s.replace(\"Q\", \"\")\n    s = s.replace(\"R\", \"\")\n    s = s.replace(\"S\", \"\")\n    s = s.replace(\"T\", \"\")\n    s = s.replace(\"U\", \"\")\n    s = s.replace(\"V\", \"\")\n    s = s.replace(\"W\", \"\")\n    s = s.replace(\"X\", \"\")\n    s = s.replace(\"Y\", \"\")\n    s = s.replace(\"Z\", \"\")\n    s = s.replace(\"0\", \"\")\n    s = s.replace(\"1\", \"\")\n    s = s.replace(\"2\", \"\")\n    s = s.replace(\"3\", \"\")\n    s = s.replace(\"4\", \"\")\n    s = s.replace(\"5\", \"\")\n    s = s.replace(\"6\", \"\")\n    s = s.replace(\"7\", \"\")\n    s = s.replace(\"8\", \"\")\n    s = s.replace(\"9\", \"\")\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"B\", \"\")\n    s = s.replace(\"C\", \"\")\n    s = s.replace(\"D\", \"\")\n    s = s.replace(\"E\", \"\")\n    s = s.replace(\"F\", \"\")\n    s = s.replace(\"G\", \"\")\n    s = s.replace(\"H\", \"\")\n    s = s.replace(\"I\", \"\")\n    s = s.replace(\"J\", \"\")\n    s = s.replace(\"K\", \"\")\n    s = s.replace(\"L\", \"\")\n    s = s.replace(\"M\", \"\")\n    s = s.replace(\"N\", \"\")\n    s = s.replace(\"O\", \"\")\n    s = s.replace(\"P\", \"\")\n    s = s.replace(\"Q\", \"\")\n    s = s.replace(\"R\", \"\")\n    s = s.replace(\"S\", \"\")\n    s = s.replace(\"T\", \"\")\n    s = s.replace(\"U\", \"\")\n    s = s.replace(\"V\", \"\")\n    s = s.replace(\"W\", \"\")\n    s = s.replace(\"X\", \"\")\n    s = s.replace(\"Y\", \"\")\n    s = s.replace(\"Z\", \"\")\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"B\", \"\")\n    s = s.replace(\"C\", \"\")\n    s = s.replace(\"D\", \"\")\n    s = s.replace(\"E\", \"\")\n    s = s.replace(\"F\", \"\")\n    s = s.replace(\"G\", \"\")\n    s = s.replace(\"H\", \"\")\n    s = s.replace(\"I\", \"\")\n    s = s.replace(\"J\", \"\")\n    s = s.replace(\"K\", \"\")\n    s = s.replace(\"L\", \"\")\n    s = s.replace(\"M\", \"\")\n    s = s.replace(\"N\", \"\")\n    s = s.replace(\"O\", \"\")\n    s = s.replace(\"P\", \"\")\n    s = s.replace(\"Q\", \"\")\n    s = s.replace(\"R\", \"\")\n    s = s.replace(\"S\", \"\")\n    s = s.replace(\"T\", \"\")\n    s = s.replace(\"U\", \"\")\n    s = s.replace(\"V\", \"\")\n    s = s.replace(\"W\", \"\")\n    s = s.replace(\"X\", \"\")\n    s = s.replace(\"Y\", \"\")\n    s = s.replace(\"Z\", \"\")\n    s = s.replace(\"0\", \"\")\n    s = s.replace(\"1\", \"\")\n    s = s.replace(\"2\", \"\")\n    s = s.replace(\"3\", \"\")\n    s = s.replace(\"4\", \"\")\n    s = s.replace(\"5\", \"\")\n    s = s.replace(\"6"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[0]) +'' + str(a[-1])"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    lights.sort()\n    lights.reverse()\n    print(lights[k-1])\n    print(*[lights[i] for i in range(k)])\n    return"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 8\n    if n == 3:\n        return 28\n    if n == 4:\n        return 0\n    if n == 5:\n        return 0\n    if n == 6:\n        return 0\n    if n == 7:\n        return 0\n    if n == 8:\n        return 0\n    if n == 9:\n        return 0\n    if n == 10:\n        return 0\n    if n == 11:\n        return 0\n    if n == 12:\n        return 0\n    if n == 13:\n        return 0\n    if n == 14:\n        return 0\n    if n == 15:\n        return 0\n    if n == 16:\n        return 0\n    if n == 17:\n        return 0\n    if n == 18:\n        return 0\n    if n == 19:\n        return 0\n    if n == 20:\n        return 0\n    if n == 21:\n        return 0\n    if n == 22:\n        return 0\n    if n == 23:\n        return 0\n    if n == 24:\n        return 0\n    if n == 25:\n        return 0\n    if n == 26:\n        return 0\n    if n == 27:\n        return 0\n    if n == 28:\n        return 0\n    if n == 29:\n        return 0\n    if n == 30:\n        return 0\n    if n == 31:\n        return 0\n    if n == 32:\n        return 0\n    if n == 33:\n        return 0\n    if n == 34:\n        return 0\n    if n == 35:\n        return 0\n    if n == 36:\n        return 0\n    if n == 37:\n        return 0\n    if n == 38:\n        return 0\n    if n == 39:\n        return 0\n    if n == 40:\n        return 0\n    if n == 41:\n        return 0\n    if n == 42:\n        return 0\n    if n == 43:\n        return 0\n    if n == 44:\n        return 0\n    if n == 45:\n        return 0\n    if n == 46:\n        return 0\n    if n == 47:\n        return 0\n    if n == 48:\n        return 0\n    if n == 49:\n        return 0\n    if n == 50:\n        return 0\n    if n == 51:\n        return 0\n    if n == 52:\n        return 0\n    if n == 53:\n        return 0\n    if n == 54:\n        return 0\n    if n == 55:\n        return 0\n    if n == 56:\n        return 0\n    if n == 57:\n        return 0\n    if n == 58:\n        return 0\n    if n == 59:\n        return 0\n    if n == 60:\n        return 0\n    if n == 61:\n        return 0\n    if n == 62:\n        return 0\n    if n == 63:\n        return 0\n    if n == 64:\n        return 0\n    if n == 65:\n        return 0\n    if n == 66:\n        return 0\n    if n == 67:\n        return 0\n    if n == 68:\n        return 0\n    if n == 69:\n        return 0\n    if n == 70:\n        return 0\n    if n == 71:\n        return 0\n    if n == 72:\n        return 0\n    if n == 73:\n        return 0\n    if n == 74:\n        return 0\n    if n == 75:\n        return 0\n    if n == 76:\n        return 0\n    if n == 77:\n        return 0\n    if n == 78:\n        return 0\n    if n == 79:\n        return 0\n    if n == 80:\n        return 0\n    if n == 81:\n        return 0\n    if n == 82:\n        return 0\n    if n == 83:\n        return 0\n    if n == 84:\n        return 0\n    if n == 85:\n        return 0\n    if n == 86:\n        return 0\n    if n == 87:\n        return 0\n    if n == 88:\n        return 0\n    if n == 89:\n        return 0\n    if n == 90:\n        return 0\n    if n == 91:\n        return 0\n    if n == 92:\n        return 0\n    if n == 93:\n        return 0\n    if n == 94:\n        return 0\n    if n == 95:\n        return 0\n    if n == 96:\n        return 0\n    if n == 97:\n        return 0\n    if n == 98:\n        return 0\n    if n == 99:\n        return 0\n    if n == 100:\n        return 0\n    if n == 101:\n        return 0\n    if n == 102:\n        return 0\n    if n == 103:\n        return 0\n    if n == 104:\n        return 0\n    if n == 105:\n        return 0\n    if n == 106:\n        return 0\n    if n == 107:\n        return 0\n    if n == 108:\n        return 0\n    if n == 109:\n        return 0\n    if n == 110:\n        return 0\n    if n == 111:\n        return 0\n    if n == 112:\n        return 0\n    if n == 113:\n        return 0\n    if n == 114:\n        return 0\n    if n == 115:\n        return 0\n    if n == 116:\n        return 0\n    if n == 117:\n        return 0\n    if n == 118:\n        return 0\n    if n == 119:\n        return 0\n    if n == 120:\n        return 0\n    if n == 121:\n        return 0\n    if n == 122:\n        return 0\n    if n == 123:\n        return 0\n    if n == 124:\n        return 0\n    if n == 125:\n        return 0\n    if n == 126:\n        return 0\n    if n == 127:\n        return 0\n    if n == 128:\n        return 0\n    if n == 129:\n        return 0\n    if n == 130:\n        return 0\n    if n == 131:\n        return 0\n    if n == 132:\n        return 0\n    if n == 133:\n        return 0\n    if n == 134:\n        return 0\n    if n == 135:\n        return 0\n    if n == 136:\n        return 0\n    if n == 137:\n        return 0\n    if n == 138:\n        return 0\n    if n == 139:\n        return 0\n    if n == 140:\n        return 0\n    if n == 141:\n        return 0\n    if n == 142:\n        return 0\n    if n == 143:\n        return 0\n    if n == 144:\n        return 0\n    if n == 145:\n        return 0\n    if n == 146:\n        return 0\n    if n == 147:\n        return 0\n    if n == 148:\n        return 0\n    if n == 149:\n        return 0\n    if n == 150:\n        return 0\n    if n == 151:\n        return 0\n    if n == 152:\n        "
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort(reverse=True)\n    winner = votes[0]\n    for i in range(1, m):\n        if votes[i] > winner:\n            winner = votes[i]\n    return str(winner)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a[-1] + b[-1] > n:\n        return -1\n    if a[-1] + b[-1] == n:\n        return str(n)\n    if a[-1] + b[-1] < n:\n        return str(a[-1] + b[-1])"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n        return str(y + 1)\n    else:\n        return str(y)"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a = a.split(':')\n    b = b.split(':')\n    a = int(a[0])\n    b = int(b[0])\n    if a > b:\n        a, b = b, a\n    days = 0\n    while a <= b:\n        if a % 4 == 0 and a % 100!= 0 or a % 400 == 0:\n            days += 366\n        else:\n            days += 365\n        a += 1\n    return str(days)"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        roads[u - 1].append(v - 1)\n        roads[v - 1].append(u - 1)\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    cities = cities[:m]\n    cities.sort(reverse=True)\n    cities = cities[:m]\n    cities.sort()\n    cities = cities[:m]\n    cities.sort()\n    cities = cities[:m]\n    cities.sort()\n    cities = cities[:m]\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort()\n    cities.sort"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    vouchers = []\n    for i in range(n):\n        vouchers.append(list(map(int, stdin.split())))\n    vouchers.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if vouchers[i][1] < vouchers[j][0] or vouchers[j][1] < vouchers[i][0]:\n                continue\n            if vouchers[i][2] + vouchers[j][2] > x:\n                continue\n            return str(min(vouchers[i][2], vouchers[j][2]))\n    return '-1'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i] == s[-i-1]:\n            continue\n        else:\n            s = s[:i] + s[i+1:]\n            if s == s[::-1]:\n                return s\n    return \"NA\""
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a, b) - max(a, b))"
    },
    {
        "number": 601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        p, f = map(int, stdin.split())\n        cnt_s, cnt_w = map(int, stdin.split())\n        s, w = map(int, stdin.split())\n        if p > f:\n            print(cnt_s * s + cnt_w * w)\n        else:\n            print(cnt_s * s)\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 1:\n        return \"Adams\"\n    elif a <= 3:\n        return \"Van Buren\"\n    elif a <= 5:\n        return \"Harding\"\n    elif a <= 7:\n        return \"Rutherford\"\n    elif a <= 9:\n        return \"James\"\n    elif a <= 11:\n        return \"Grant\"\n    elif a <= 13:\n        return \"Hayes\"\n    elif a <= 15:\n        return \"McKinley\"\n    elif a <= 17:\n        return \"Wilks\"\n    elif a <= 19:\n        return \"McGinnis\"\n    elif a <= 21:\n        return \"McIntosh\"\n    elif a <= 23:\n        return \"Armstrong\"\n    elif a <= 25:\n        return \"Noble\"\n    elif a <= 27:\n        return \"Baker\"\n    elif a <= 29:\n        return \"McKinley\"\n    elif a <= 31:\n        return \"Armstrong\"\n    elif a <= 33:\n        return \"Noble\"\n    elif a <= 35:\n        return \"Baker\"\n    elif a <= 37:\n        return \"Armstrong\"\n    elif a <= 39:\n        return \"Noble\"\n    elif a <= 41:\n        return \"Baker\"\n    elif a <= 43:\n        return \"Armstrong\"\n    elif a <= 45:\n        return \"Noble\"\n    elif a <= 47:\n        return \"Baker\"\n    elif a <= 49:\n        return \"Armstrong\"\n    elif a <= 51:\n        return \"Noble\"\n    elif a <= 53:\n        return \"Baker\"\n    elif a <= 55:\n        return \"Armstrong\"\n    elif a <= 57:\n        return \"Noble\"\n    elif a <= 59:\n        return \"Baker\"\n    elif a <= 61:\n        return \"Armstrong\"\n    elif a <= 63:\n        return \"Noble\"\n    elif a <= 65:\n        return \"Baker\"\n    elif a <= 67:\n        return \"Armstrong\"\n    elif a <= 69:\n        return \"Noble\"\n    elif a <= 71:\n        return \"Baker\"\n    elif a <= 73:\n        return \"Armstrong\"\n    elif a <= 75:\n        return \"Noble\"\n    elif a <= 77:\n        return \"Baker\"\n    elif a <= 79:\n        return \"Armstrong\"\n    elif a <= 81:\n        return \"Noble\"\n    elif a <= 83:\n        return \"Baker\"\n    elif a <= 85:\n        return \"Armstrong\"\n    elif a <= 87:\n        return \"Noble\"\n    elif a <= 89:\n        return \"Baker\"\n    elif a <= 91:\n        return \"Armstrong\"\n    elif a <= 93:\n        return \"Noble\"\n    elif a <= 95:\n        return \"Baker\"\n    elif a <= 97:\n        return \"Armstrong\"\n    elif a <= 99:\n        return \"Noble\"\n    elif a <= 101:\n        return \"Baker\"\n    elif a <= 103:\n        return \"Armstrong\"\n    elif a <= 105:\n        return \"Noble\"\n    elif a <= 107:\n        return \"Baker\"\n    elif a <= 109:\n        return \"Armstrong\"\n    elif a <= 111:\n        return \"Noble\"\n    elif a <= 113:\n        return \"Baker\"\n    elif a <= 115:\n        return \"Armstrong\"\n    elif a <= 117:\n        return \"Noble\"\n    elif a <= 119:\n        return \"Baker\"\n    elif a <= 121:\n        return \"Armstrong\"\n    elif a <= 123:\n        return \"Noble\"\n    elif a <= 125:\n        return \"Baker\"\n    elif a <= 127:\n        return \"Armstrong\"\n    elif a <= 129:\n        return \"Noble\"\n    elif a <= 131:\n        return \"Baker\"\n    elif a <= 133:\n        return \"Armstrong\"\n    elif a <= 135:\n        return \"Noble\"\n    elif a <= 137:\n        return \"Baker\"\n    elif a <= 139:\n        return \"Armstrong\"\n    elif a <= 141:\n        return \"Noble\"\n    elif a <= 143:\n        return \"Baker\"\n    elif a <= 145:\n        return \"Armstrong\"\n    elif a <= 147:\n        return \"Noble\"\n    elif a <= 149:\n        return \"Baker\"\n    elif a <= 151:\n        return \"Armstrong\"\n    elif a <= 153:\n        return \"Noble\"\n    elif a <= 155:\n        return \"Baker\"\n    elif a <= 157:\n        return \"Armstrong\"\n    elif a <= 159:\n        return \"Noble\"\n    elif a <= 161:\n        return \"Baker\"\n    elif a <= 163:\n        return \"Armstrong\"\n    elif a <= 165:\n        return \"Noble\"\n    elif a <= 167:\n        return \"Baker\"\n    elif a <= 169:\n        return \"Armstrong\"\n    elif a <= 171:\n        return \"Noble\"\n    elif a <= 173:\n        return \"Baker\"\n    elif a <= 175:\n        return \"Armstrong\"\n    elif a <= 177:\n        return \"Noble\"\n    elif a <= 179:\n        return \"Baker\"\n    elif a <= 181:\n        return \"Armstrong\"\n    elif a <= 183:\n        return \"Noble\"\n    elif a <= 185:\n        return \"Baker\"\n    elif a <= 187:\n        return \"Armstrong\"\n    elif a <= 189:\n        return \"Noble\"\n    elif a <= 191:\n        return \"Baker\"\n    elif a <= 193:\n        return \"Armstrong\"\n    elif a <= 195:\n        return \"Noble\"\n    elif a <= 197:\n        return \"Baker\"\n    elif a <= 199:\n        return \"Armstrong\"\n    elif a <= 201:\n        return \"Noble\"\n    elif a <= 203:\n        return \"Baker\"\n    elif a <= 205:\n        return \"Armstrong\"\n    elif a <= 207:\n        return \"Noble\"\n    elif a <= 209:\n        return \"Baker\"\n    elif a <= 211:\n        return \"Armstrong\"\n    elif a <= 213:\n        return \"Noble\"\n    elif a <= 215:\n        return \"Baker\"\n    elif a <= 217:\n        return \"Armstrong\"\n    elif a <= 219:\n        return \"Noble\"\n    elif a <= 221:\n        return \"Baker\"\n    elif a <= 223:\n        return \"Armstrong\"\n    elif a <= 225:\n        return \"Noble\"\n    elif a <= 227:\n        return \"Baker\"\n    elif a <= 229:\n        return \"Armstrong\"\n    elif a <= 231:\n        return \"Noble\"\n    elif a <= 233:\n        return \"Baker\"\n    elif a <= 235:\n        return \"Armstrong\"\n    elif a <= 237:\n        return \"Noble\"\n    elif a <= 239:\n        return \"Baker\"\n    elif a <= 241:\n        return \"Armstrong\"\n    elif a <= 243:\n        return \"Noble\"\n    elif a <= 245:\n        return \"Baker\"\n    elif a <= 247:\n        return \"Armstrong\"\n    elif a <= 249:\n        return \"Noble\"\n    elif a <= 251:\n        return \"Baker\"\n    elif a <= 253:\n        return \"Armstrong\"\n    elif a <= 255:\n        return \"Noble\"\n    elif a <= 257:\n        return \"Baker\"\n    elif a <= 259:\n        return \"Armstrong\"\n    elif a <= 261"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return str(max(r, g, b, r + g + b, r + g, r + b, g + b, r + g + b, r + b, g + b, r + g + b))"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    if arr[0] == 0:\n        return \"0\"\n    if arr[-1] == 0:\n        return \"0\"\n    if arr[0] == arr[-1]:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr[0] == 0:\n        return \"0\"\n    if arr["
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b:\n        return \"Misha\"\n    elif a < b:\n        return \"Vasya\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = x_1 - 1, y_1 - 1, x_2 - 1, y_2 - 1\n    x_ap, y_ap, r = x_1, y_1, R\n    while True:\n        if x_ap + r >= x_2:\n            break\n        if y_ap + r >= y_2:\n            break\n        if x_ap - r <= x_1:\n            break\n        if y_ap - r <= y_1:\n            break\n        r += 1\n    return str(x_ap) + \" \" + str(y_ap) + \" \" + str(r)"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(i * (i - 1) // 2 for i in range(1, n + 1)) % m)"
    },
    {
        "number": 609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n + m - 2 * (n + m - 1)) +'' + str(n + m - 2 * (n + m - 1))"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    changes = []\n    for _ in range(m):\n        changes.append(tuple(map(int, stdin.split())))\n    changes.sort(key=lambda x: x[0])\n    changes.sort(key=lambda x: x[1])\n    changes.sort(key=lambda x: x[0] - x[1])\n    changes.sort(key=lambda x: x[1] - x[0])\n    changes.sort(key=lambda x: x[0] + x[1])\n    changes.sort(key=lambda x: x[1] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] - x[1] + x[1] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] - x[0] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[0] + x[1] - x[1] + x[0] - x[0] + x[0])\n    changes.sort(key=lambda x: x[1] + x[0] - x[0] +"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n < k:\n        return \"NO\"\n    if n == k:\n        if sum(a) % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(a) % 2!= 0:\n        return \"NO\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    if sum(a)"
    },
    {
        "number": 613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return \"inf\"\n    else:\n        return (b - a) % (10**9 + 7)"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    souvenirs = []\n    for i in range(n):\n        souvenirs.append(list(map(int, stdin.split())))\n    souvenirs.sort(key=lambda x: x[0])\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j < souvenirs[i - 1][0]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - souvenirs[i - 1][0]] + souvenirs[i - 1][1])\n    return dp[n][m]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(min(a[-1] - a[0], a[-1] - a[-2], a[-2] - a[-3], a[-3] - a[-4]))"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    dp = [[0] * (N + 1) for _ in range(M + 1)]\n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if a[i - 1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + b[i - 1])\n            if a[i - 1] > j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n    if dp[M][N] == 0:\n        return -1\n    return dp[M][N]\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('+', '*')\n    s = s.replace('*', '+')\n    s = s.replace(' ', '')\n    s = s.replace(')', '*(')\n    s = s.replace('(', '+(')\n    s = s.replace('*', ')')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*', '+')\n    s = s.replace('+', '*')\n    s = s.replace('(', '+(')\n    s = s.replace(')', '*(')\n    s = s.replace('*"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left_pan = stdin.split('|')[0]\n    right_pan = stdin.split('|')[1]\n    left_pan_weights = left_pan.split('|')\n    right_pan_weights = right_pan.split('|')\n    left_pan_weights = list(map(int, left_pan_weights))\n    right_pan_weights = list(map(int, right_pan_weights))\n    left_pan_weights.sort()\n    right_pan_weights.sort()\n    if left_pan_weights == right_pan_weights:\n        return 'Impossible'\n    else:\n        return ''.join(left_pan_weights) + '|' + ''.join(right_pan_weights)\n\nsolution(input())\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return str(min(x, y) // max(x, y) + max(x, y) - min(x, y)) + \" \" + str(min(x, y) // max(x, y) + max(x, y) - max(x, y))"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 1\n    b = []\n    for i in range(n):\n        if a[i] < 0:\n            k += 1\n        else:\n            b.append(k)\n            k = 1\n    b.append(k)\n    return str(min(b))"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = [1]\n    for _ in range(n - 1):\n        sequence.append(min(sequence[-1], sequence[-2]))\n    return str(sequence[k - 1])"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    minutes = 0\n    while a_1 > 0 or a_2 > 0:\n        if a_1 > 0:\n            a_1 -= 1\n            if a_1 > 0:\n                a_1 += 1\n        if a_2 > 0:\n            a_2 -= 1\n            if a_2 > 0:\n                a_2 += 1\n        minutes += 1\n    return str(minutes)\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append(powers[-1] + 1)\n    powers.sort()\n    powers = [0] + powers\n    powers.append("
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(range(1, n+1)) - sum(range(1, n+1)[::-1]))"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 0:\n        return str(0)\n    if a[0] == 1:\n        return str(1)\n    if a[0] == 2:\n        return str(2)\n    if a[0] == 3:\n        return str(3)\n    if a[0] == 4:\n        return str(4)\n    if a[0] == 5:\n        return str(5)\n    if a[0] == 6:\n        return str(6)\n    if a[0] == 7:\n        return str(7)\n    if a[0] == 8:\n        return str(8)\n    if a[0] == 9:\n        return str(9)\n    if a[0] == 10:\n        return str(10)\n    if a[0] == 11:\n        return str(11)\n    if a[0] == 12:\n        return str(12)\n    if a[0] == 13:\n        return str(13)\n    if a[0] == 14:\n        return str(14)\n    if a[0] == 15:\n        return str(15)\n    if a[0] == 16:\n        return str(16)\n    if a[0] == 17:\n        return str(17)\n    if a[0] == 18:\n        return str(18)\n    if a[0] == 19:\n        return str(19)\n    if a[0] == 20:\n        return str(20)\n    if a[0] == 21:\n        return str(21)\n    if a[0] == 22:\n        return str(22)\n    if a[0] == 23:\n        return str(23)\n    if a[0] == 24:\n        return str(24)\n    if a[0] == 25:\n        return str(25)\n    if a[0] == 26:\n        return str(26)\n    if a[0] == 27:\n        return str(27)\n    if a[0] == 28:\n        return str(28)\n    if a[0] == 29:\n        return str(29)\n    if a[0] == 30:\n        return str(30)\n    if a[0] == 31:\n        return str(31)\n    if a[0] == 32:\n        return str(32)\n    if a[0] == 33:\n        return str(33)\n    if a[0] == 34:\n        return str(34)\n    if a[0] == 35:\n        return str(35)\n    if a[0] == 36:\n        return str(36)\n    if a[0] == 37:\n        return str(37)\n    if a[0] == 38:\n        return str(38)\n    if a[0] == 39:\n        return str(39)\n    if a[0] == 40:\n        return str(40)\n    if a[0] == 41:\n        return str(41)\n    if a[0] == 42:\n        return str(42)\n    if a[0] == 43:\n        return str(43)\n    if a[0] == 44:\n        return str(44)\n    if a[0] == 45:\n        return str(45)\n    if a[0] == 46:\n        return str(46)\n    if a[0] == 47:\n        return str(47)\n    if a[0] == 48:\n        return str(48)\n    if a[0] == 49:\n        return str(49)\n    if a[0] == 50:\n        return str(50)\n    if a[0] == 51:\n        return str(51)\n    if a[0] == 52:\n        return str(52)\n    if a[0] == 53:\n        return str(53)\n    if a[0] == 54:\n        return str(54)\n    if a[0] == 55:\n        return str(55)\n    if a[0] == 56:\n        return str(56)\n    if a[0] == 57:\n        return str(57)\n    if a[0] == 58:\n        return str(58)\n    if a[0] == 59:\n        return str(59)\n    if a[0] == 60:\n        return str(60)\n    if a[0] == 61:\n        return str(61)\n    if a[0] == 62:\n        return str(62)\n    if a[0] == 63:\n        return str(63)\n    if a[0] == 64:\n        return str(64)\n    if a[0] == 65:\n        return str(65)\n    if a[0] == 66:\n        return str(66)\n    if a[0] == 67:\n        return str(67)\n    if a[0] == 68:\n        return str(68)\n    if a[0] == 69:\n        return str(69)\n    if a[0] == 70:\n        return str(70)\n    if a[0] == 71:\n        return str(71)\n    if a[0] == 72:\n        return str(72)\n    if a[0] == 73:\n        return str(73)\n    if a[0] == 74:\n        return str(74)\n    if a[0] == 75:\n        return str(75)\n    if a[0] == 76:\n        return str(76)\n    if a[0] == 77:\n        return str(77)\n    if a[0] == 78:\n        return str(78)\n    if a[0] == 79:\n        return str(79)\n    if a[0] == 80:\n        return str(80)\n    if a[0] == 81:\n        return str(81)\n    if a[0] == 82:\n        return str(82)\n    if a[0] == 83:\n        return str(83)\n    "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    s = sorted(s)\n    return ''.join(s)"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    return str(max(sum(books[i:i+k]) for i in range(n)))"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    a.append(a[-1] + 1)\n    b.append(b[-1] + 1)\n    a.insert(0, 0)\n    b.insert(0, 0)\n    ans = 0\n    for i in range(n):\n        ans += max(a[i], b[i])\n    return str(ans)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = []\n    for i in range(n):\n        if i == 0:\n            res.append(1)\n        else:\n            if a[i] == a[i-1]:\n                res.append(res[i-1])\n            else:\n                res.append(res[i-1] + 1)\n    return''.join(map(str, res))"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    sum = 0\n    for i in range(n):\n        sum += a[i] / i\n    if sum == m:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisors = []\n    for i in range(2, n + 1):\n        divisors.append(i)\n    divisors.sort()\n    divisors.reverse()\n    for i in range(k):\n        divisors.append(divisors.pop(0))\n    return str(divisors[0])\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Possible\"\n    else:\n        return \"Impossible\""
    },
    {
        "number": 634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    cells = []\n    for _ in range(n):\n        cells.append(tuple(map(int, stdin.split())))\n    \n    def is_valid(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_2(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_3(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_4(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_5(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_6(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_7(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_8(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_9(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n            if cell[1] == 2:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 2:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 3:\n                return True\n        if cell[0] == 3:\n            if cell[1] == 1:\n                return False\n            if cell[1] == 2:\n                return True\n        return False\n    \n    def is_valid_10(cell):\n        if cell[0] == cell[1]:\n            return False\n        if cell[0] == 1:\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort(reverse=True)\n    if a[0] == 1 and b[0] == 1:\n        return \"YES\"\n    if a[0] == 1 and b[0] == 0:\n        return \"NO\"\n    if a[0] == 0 and b[0] == 1:\n        return \"NO\"\n    if a[0] == 0 and b[0] == 0:\n        return \"YES\"\n    if a[0] == 0 and b[0] == 1:\n        return \"NO\"\n    if a[0] == 1 and b[0] == 0:\n        return \"NO\"\n    if a[0] == 1 and b[0] == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if a[i] > k:\n            break\n        m += 1\n    return str(m)"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    photo = stdin.split()[1]\n    if n == 1:\n        if photo.count('0') == n and photo.count('1') == n:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        if photo.count('0') == n and photo.count('1') == n:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    res = []\n    for i in range(n):\n        res.append(0)\n    for i in range(n):\n        for j in range(i):\n            if t[i] > m:\n                res[i] = j\n                break\n            if t[i] < m:\n                res[i] = j\n                break\n    return''.join(map(str, res))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    set_ = list(map(int, stdin.split()))\n    set_.sort()\n    if set_[0] == 0:\n        return str(0)\n    if set_[-1] == 100:\n        return str(n)\n    if set_[0] == set_[-1]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set_[-1] == set_[-2]:\n        return str(1)\n    if set_[0] == set_[1]:\n        return str(1)\n    if set"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"0 0 0\"\n    if a == b + 1:\n        return \"1 0 0\"\n    if a == b - 1:\n        return \"0 1 0\"\n    if a == b - 2:\n        return \"0 0 1\"\n    if a == b - 3:\n        return \"0 0 0 1\"\n    if a == b - 4:\n        return \"0 0 0 0 1\"\n    if a == b - 5:\n        return \"0 0 0 0 0 1\"\n    if a == b - 6:\n        return \"0 0 0 0 0 0 1\"\n    if a == b - 7:\n        return \"0 0 0 0 0 0 0 1\"\n    if a == b - 8:\n        return \"0 0 0 0 0 0 0 0 1\"\n    if a == b - 9:\n        return \"0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 10:\n        return \"0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 11:\n        return \"0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 12:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 13:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 14:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 15:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 16:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 17:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 18:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 19:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 20:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 21:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 22:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 23:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 24:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 25:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 26:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 27:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 28:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 29:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\n    if a == b - 30:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 of week\n   ... ''')\n    '52'\n    >>> solution('''30 of month\n   ... ''')\n    '11'\n    \"\"\"\n    week = stdin.split()\n    if len(week) == 1:\n        return str(int(week[0]) * 52)\n    else:\n        return str(int(week[0]) * int(week[1]))\n"
    },
    {
        "number": 642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dirty_stairs = list(map(int, stdin.split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if dirty_stairs[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1 and dirty_stairs[3] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1 and dirty_stairs[3] == 1 and dirty_stairs[4] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1 and dirty_stairs[3] == 1 and dirty_stairs[4] == 1 and dirty_stairs[5] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1 and dirty_stairs[3] == 1 and dirty_stairs[4] == 1 and dirty_stairs[5] == 1 and dirty_stairs[6] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1 and dirty_stairs[3] == 1 and dirty_stairs[4] == 1 and dirty_stairs[5] == 1 and dirty_stairs[6] == 1 and dirty_stairs[7] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if dirty_stairs[0] == 1 and dirty_stairs[1] == 1 and dirty_stairs[2] == 1 and dirty_stairs[3] == 1 and dirty_stairs[4] == 1 and dirty_stairs[5] == 1 and dirty_stairs[6] == 1 and dirty_stairs[7] == 1 and dirty_stairs[8] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, y, p, q = map(int, stdin.split())\n        if x / y == p / q:\n            return str(x)\n        else:\n            return str(x)"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    for i in range(n):\n        if i == 0:\n            x = int(stdin)\n        else:\n            x += 1\n    return str(x)"
    },
    {
        "number": 645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s = s[:i] + s[i+1:]\n            break\n    return len(s)\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(stdin.split()[i * 2]))\n        y.append(int(stdin.split()[i * 2 + 1]))\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    "
    },
    {
        "number": 647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return str(int(m * (m + 1) / 2 - b))"
    },
    {
        "number": 649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        res += 2 ** i\n    for i in range(n):\n        if i == 0:\n            res += t[i]\n        else:\n            res += t[i] * 2 ** (n - i - 1)\n    return str(res)"
    },
    {
        "number": 650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.isupper() else \"NO\""
    },
    {
        "number": 651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    maze = stdin.split()\n    # print(n, m)\n    # print(maze)\n    # print(len(maze))\n    # print(len(maze[0]))\n    # print(maze[0])\n    # print(maze[1])\n    # print(maze[2])\n    # print(maze[3])\n    # print(maze[4])\n    # print(maze[5])\n    # print(maze[6])\n    # print(maze[7])\n    # print(maze[8])\n    # print(maze[9])\n    # print(maze[10])\n    # print(maze[11])\n    # print(maze[12])\n    # print(maze[13])\n    # print(maze[14])\n    # print(maze[15])\n    # print(maze[16])\n    # print(maze[17])\n    # print(maze[18])\n    # print(maze[19])\n    # print(maze[20])\n    # print(maze[21])\n    # print(maze[22])\n    # print(maze[23])\n    # print(maze[24])\n    # print(maze[25])\n    # print(maze[26])\n    # print(maze[27])\n    # print(maze[28])\n    # print(maze[29])\n    # print(maze[30])\n    # print(maze[31])\n    # print(maze[32])\n    # print(maze[33])\n    # print(maze[34])\n    # print(maze[35])\n    # print(maze[36])\n    # print(maze[37])\n    # print(maze[38])\n    # print(maze[39])\n    # print(maze[40])\n    # print(maze[41])\n    # print(maze[42])\n    # print(maze[43])\n    # print(maze[44])\n    # print(maze[45])\n    # print(maze[46])\n    # print(maze[47])\n    # print(maze[48])\n    # print(maze[49])\n    # print(maze[50])\n    # print(maze[51])\n    # print(maze[52])\n    # print(maze[53])\n    # print(maze[54])\n    # print(maze[55])\n    # print(maze[56])\n    # print(maze[57])\n    # print(maze[58])\n    # print(maze[59])\n    # print(maze[60])\n    # print(maze[61])\n    # print(maze[62])\n    # print(maze[63])\n    # print(maze[64])\n    # print(maze[65])\n    # print(maze[66])\n    # print(maze[67])\n    # print(maze[68])\n    # print(maze[69])\n    # print(maze[70])\n    # print(maze[71])\n    # print(maze[72])\n    # print(maze[73])\n    # print(maze[74])\n    # print(maze[75])\n    # print(maze[76])\n    # print(maze[77])\n    # print(maze[78])\n    # print(maze[79])\n    # print(maze[80])\n    # print(maze[81])\n    # print(maze[82])\n    # print(maze[83])\n    # print(maze[84])\n    # print(maze[85])\n    # print(maze[86])\n    # print(maze[87])\n    # print(maze[88])\n    # print(maze[89])\n    # print(maze[90])\n    # print(maze[91])\n    # print(maze[92])\n    # print(maze[93])\n    # print(maze[94])\n    # print(maze[95])\n    # print(maze[96])\n    # print(maze[97])\n    # print(maze[98])\n    # print(maze[99])\n    # print(maze[100])\n    # print(maze[101])\n    # print(maze[102])\n    # print(maze[103])\n    # print(maze[104])\n    # print(maze[105])\n    # print(maze[106])\n    # print(maze[107])\n    # print(maze[108])\n    # print(maze[109])\n    # print(maze[110])\n    # print(maze[111])\n    # print(maze[112])\n    # print(maze[113])\n    # print(maze[114])\n    # print(maze[115])\n    # print(maze[116])\n    # print(maze[117])\n    # print(maze[118])\n    # print(maze[119])\n    # print(maze[120])\n    # print(maze[121])\n    # print(maze[122])\n    # print(maze[123])\n    # print(maze[124])\n    # print(maze[125])\n    # print(maze[126])\n    # print(maze[127])\n    # print(maze[128])\n    # print(maze[129])\n    # print(maze[130])\n    # print(maze[131])\n    # print(maze[132])\n    # print(maze[133])\n    "
    },
    {
        "number": 652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in stdin.split()])\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rooms = [0] * 10\n    for i in range(n):\n        action, room = stdin.split()\n        if action == 'L':\n            rooms[int(room)] = 1\n        elif action == 'R':\n            rooms[int(room)] = 0\n    return ''.join(str(x) for x in rooms)"
    },
    {
        "number": 654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trie = Trie()\n    for _ in range(n):\n        trie.insert(stdin)\n    return str(trie.max_matching())\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        self.size = 0\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n            node.is_word = True\n            self.size += 1\n\n    def max_matching(self) -> int:\n        node = self.root\n        max_matching = 0\n        for char in node.children:\n            if node.children[char].is_word:\n                max_matching += 1\n        return max_matching\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n        self.max_matching = 0"
    },
    {
        "number": 655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = map(int, stdin.split())\n    if x == y:\n        return \"White\"\n    if x == n - y:\n        return \"Black\"\n    if x == n - 1 - y:\n        return \"Black\"\n    if x == 1 + y:\n        return \"White\"\n    if x == 1 - y:\n        return \"White\"\n    if x == 1 + 1 + y:\n        return \"White\"\n    if x == 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - y:\n        return \"White\"\n    if x == 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1"
    },
    {
        "number": 656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t_sum = sum(t)\n    if t_sum < 0:\n        return -1\n    if t_sum == 0:\n        return 0\n    if t_sum > 0:\n        if t_sum % k == 0:\n            return k\n        else:\n            return t_sum // k + 1"
    },
    {
        "number": 657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    return str(min(A, B) - (x + y + z))"
    },
    {
        "number": 658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w, v, u = map(int, stdin.split())\n    bus_pos = []\n    for i in range(n):\n        bus_pos.append(list(map(int, stdin.split())))\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x[0])\n    bus_pos.sort(key=lambda x: x[1])\n    bus_pos.sort(key=lambda x: x"
    },
    {
        "number": 659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                return str(i+1) + \" \" + str(j+1)\n    return \"-1\""
    },
    {
        "number": 660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = map(int, stdin.split())\n    return str(n * (b + p) + (n - 1) * (b + p) // 2)"
    },
    {
        "number": 661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, K = map(int, stdin.split())\n    if M == 0 and K == 0:\n        return '-1'\n    if M == 0 or K == 0:\n        return '-1'\n    if M == 1 and K == 0:\n        return '0 0 1 1'\n    if M == 1 and K == 1:\n        return '0 0 1 1'\n    if M == 2 and K == 0:\n        return '0 0 1 1'\n    if M == 2 and K == 1:\n        return '0 0 1 1'\n    if M == 2 and K == 2:\n        return '0 0 1 1'\n    if M == 3 and K == 0:\n        return '0 0 1 1'\n    if M == 3 and K == 1:\n        return '0 0 1 1'\n    if M == 3 and K == 2:\n        return '0 0 1 1'\n    if M == 3 and K == 3:\n        return '0 0 1 1'\n    if M == 4 and K == 0:\n        return '0 0 1 1'\n    if M == 4 and K == 1:\n        return '0 0 1 1'\n    if M == 4 and K == 2:\n        return '0 0 1 1'\n    if M == 4 and K == 3:\n        return '0 0 1 1'\n    if M == 4 and K == 4:\n        return '0 0 1 1'\n    if M == 5 and K == 0:\n        return '0 0 1 1'\n    if M == 5 and K == 1:\n        return '0 0 1 1'\n    if M == 5 and K == 2:\n        return '0 0 1 1'\n    if M == 5 and K == 3:\n        return '0 0 1 1'\n    if M == 5 and K == 4:\n        return '0 0 1 1'\n    if M == 5 and K == 5:\n        return '0 0 1 1'\n    if M == 6 and K == 0:\n        return '0 0 1 1'\n    if M == 6 and K == 1:\n        return '0 0 1 1'\n    if M == 6 and K == 2:\n        return '0 0 1 1'\n    if M == 6 and K == 3:\n        return '0 0 1 1'\n    if M == 6 and K == 4:\n        return '0 0 1 1'\n    if M == 6 and K == 5:\n        return '0 0 1 1'\n    if M == 6 and K == 6:\n        return '0 0 1 1'\n    if M == 7 and K == 0:\n        return '0 0 1 1'\n    if M == 7 and K == 1:\n        return '0 0 1 1'\n    if M == 7 and K == 2:\n        return '0 0 1 1'\n    if M == 7 and K == 3:\n        return '0 0 1 1'\n    if M == 7 and K == 4:\n        return '0 0 1 1'\n    if M == 7 and K == 5:\n        return '0 0 1 1'\n    if M == 7 and K == 6:\n        return '0 0 1 1'\n    if M == 7 and K == 7:\n        return '0 0 1 1'\n    if M == 8 and K == 0:\n        return '0 0 1 1'\n    if M == 8 and K == 1:\n        return '0 0 1 1'\n    if M == 8 and K == 2:\n        return '0 0 1 1'\n    if M == 8 and K == 3:\n        return '0 0 1 1'\n    if M == 8 and K == 4:\n        return '0 0 1 1'\n    if M == 8 and K == 5:\n        return '0 0 1 1'\n    if M == 8 and K == 6:\n        return '0 0 1 1'\n    if M == 8 and K == 7:\n        return '0 0 1 1'\n    if M == 8 and K == 8:\n        return '0 0 1 1'\n    if M == 9 and K == 0:\n        return '0 0 1 1'\n    if M == 9 and K == 1:\n        return '0 0 1 1'\n    if M == 9 and K == 2:\n        return '0 0 1 1'\n    if M == 9 and K == 3:\n        return '0 0 1 1'\n    if M == 9 and K == 4:\n        return '0 0 1 1'\n    if M == 9 and K == 5:\n        return '0 0 1 1'\n    if M == 9 and K == 6:\n        return '0 0 1 1'\n    if M == 9 and K == 7:\n        return '0 0 1 1'\n    if M == 9 and K == 8:\n        return '0 0 1 1'\n    if M == 9 and K == 9:\n        return '0 0 1 1'\n    if M == 10 and K == 0:\n        return '0 0 1 1'\n    if M == 10 and K == 1:\n        return '0 0 1 1'\n    if M == 10 and K == 2:\n        return '0 0 1 1'\n    if M == 10 and K == 3:\n        return '0 0 1 1'\n    if M == 10 and K == 4:\n        return '0 0 1 1'\n    if M == 10 and K == 5:\n        return '0 0 1 1'\n    if M == 10 and K == 6:\n        return '0 0 1 1'\n    if M == 10 and K == 7:\n        return '0 0 1 1'\n    if M == 10 and K == 8:\n        return '0 0 1 1'\n    if M == 10 and K == 9:\n        return '0 0 1 1'\n    if M == 10 and K == 10:\n        return '0 0 1 1'\n    if M == 11 and K == 0:\n        return '0 0 1 1'\n    if M == 11 and K == 1:\n        return '0 0 1 1'\n    if M == 11 and K == 2:\n        return '0 0 1 1'\n    if M == 11 and K == 3:\n        return '0 0 1 1'\n    if M == 11 and K == 4:\n        return '0 0 1 1'\n    if M == 11 and K == 5:\n        return '0 0 1 1'\n    if M == 11 and K == 6:\n        return '0 0 1 1'\n    if M == 11 and K == 7:\n        return '0 0 1 1'\n    if M == 11 and"
    },
    {
        "number": 662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    games = []\n    for i in range(n):\n        games.append(int(stdin.split()[i]))\n    if games[0] == 1:\n        if games[1] == 2:\n            if games[2] == 3:\n                return \"YES\"\n        if games[1] == 3:\n            if games[2] == 1:\n                return \"YES\"\n    if games[0] == 2:\n        if games[1] == 1:\n            if games[2] == 3:\n                return \"YES\"\n        if games[1] == 3:\n            if games[2] == 2:\n                return \"YES\"\n    if games[0] == 3:\n        if games[1] == 1:\n            if games[2] == 2:\n                return \"YES\"\n        if games[1] == 2:\n            if games[2] == 1:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x', y' = map(int, stdin.split())\n    x, y, x', y' = x - x', y - y', x, y\n    if x == 0 and y == 0:\n        return '0'\n    if x == 0:\n        return '1'\n    if y == 0:\n        return '2'\n    if x == 0 and y == 0:\n        return '3'\n    if x == 0:\n        return '4'\n    if x == 0 and y == 0:\n        return '5'\n    if x == 0:\n        return '6'\n    if x == 0 and y == 0:\n        return '7'\n    if x == 0:\n        return '8'\n    if x == 0 and y == 0:\n        return '9'\n    if x == 0:\n        return '10'\n    if x == 0 and y == 0:\n        return '11'\n    if x == 0:\n        return '12'\n    if x == 0 and y == 0:\n        return '13'\n    if x == 0:\n        return '14'\n    if x == 0 and y == 0:\n        return '15'\n    if x == 0:\n        return '16'\n    if x == 0 and y == 0:\n        return '17'\n    if x == 0:\n        return '18'\n    if x == 0 and y == 0:\n        return '19'\n    if x == 0:\n        return '20'\n    if x == 0 and y == 0:\n        return '21'\n    if x == 0:\n        return '22'\n    if x == 0 and y == 0:\n        return '23'\n    if x == 0:\n        return '24'\n    if x == 0 and y == 0:\n        return '25'\n    if x == 0:\n        return '26'\n    if x == 0 and y == 0:\n        return '27'\n    if x == 0:\n        return '28'\n    if x == 0 and y == 0:\n        return '29'\n    if x == 0:\n        return '30'\n    if x == 0 and y == 0:\n        return '31'\n    if x == 0:\n        return '32'\n    if x == 0 and y == 0:\n        return '33'\n    if x == 0:\n        return '34'\n    if x == 0 and y == 0:\n        return '35'\n    if x == 0:\n        return '36'\n    if x == 0 and y == 0:\n        return '37'\n    if x == 0:\n        return '38'\n    if x == 0 and y == 0:\n        return '39'\n    if x == 0:\n        return '40'\n    if x == 0 and y == 0:\n        return '41'\n    if x == 0:\n        return '42'\n    if x == 0 and y == 0:\n        return '43'\n    if x == 0:\n        return '44'\n    if x == 0 and y == 0:\n        return '45'\n    if x == 0:\n        return '46'\n    if x == 0 and y == 0:\n        return '47'\n    if x == 0:\n        return '48'\n    if x == 0 and y == 0:\n        return '49'\n    if x == 0:\n        return '50'\n    if x == 0 and y == 0:\n        return '51'\n    if x == 0:\n        return '52'\n    if x == 0 and y == 0:\n        return '53'\n    if x == 0:\n        return '54'\n    if x == 0 and y == 0:\n        return '55'\n    if x == 0:\n        return '56'\n    if x == 0 and y == 0:\n        return '57'\n    if x == 0:\n        return '58'\n    if x == 0 and y == 0:\n        return '59'\n    if x == 0:\n        return '60'\n    if x == 0 and y == 0:\n        return '61'\n    if x == 0:\n        return '62'\n    if x == 0 and y == 0:\n        return '63'\n    if x == 0:\n        return '64'\n    if x == 0 and y == 0:\n        return '65'\n    if x == 0:\n        return '66'\n    if x == 0 and y == 0:\n        return '67'\n    if x == 0:\n        return '68'\n    if x == 0 and y == 0:\n        return '69'\n    if x == 0:\n        return '70'\n    if x == 0 and y == 0:\n        return '71'\n    if x == 0:\n        return '72'\n    if x == 0 and y == 0:\n        return '73'\n    if x == 0:\n        return '74'\n    if x == 0 and y == 0:\n        return '75'\n    if x == 0:\n        return '76'\n    if x == 0 and y == 0:\n        return '77'\n    if x == 0:\n        return '78'\n    if x == 0 and y == 0:\n        return '79'\n    if x == 0:\n        return '80'\n    if x == 0 and y == 0:\n        return '81'\n    if x == 0:\n        return '82'\n    if x == 0 and y == 0:\n        return '83'\n    if x == 0:\n        return '84'\n    if x == 0 and y == 0:\n        return '85'\n    if x == 0:\n        return '86'\n    if x == 0 and y == 0:\n        return '87'\n    if x == 0:\n        return '88'\n    if x == 0 and y == 0:\n        return '89'\n    if x == 0:\n        return '90'\n    if x == 0 and y == 0:\n        return '91'\n    if x == 0:\n        return '92'\n    if x == 0 and y == 0:\n        return '93'\n    if x == 0:\n        return '94'\n    if x == 0 and y == 0:\n        return '95'\n    if x == 0:\n        return '96'\n    if x == 0 and y == 0:\n        return '97'\n    if x == 0:\n        return '98'\n    if x == 0 and y == 0:\n        return '99'\n    if x == 0:\n        return '100'\n    if x == 0 and y == 0:\n        return '101'\n    if x == 0:\n        return '102'\n    if x == 0 and y == 0:\n        return '103'\n    if x == 0:\n        return '104'\n    if x == 0 and y == 0:\n        return '105'\n    if x == 0:\n        return '106'\n    if x == 0 and y == 0:\n        return '107'\n    if x == 0:\n        return '108'\n    if x == 0 and y == 0:\n        return '109'\n    if x == 0:\n        return '110'\n    if x == 0 and y == 0:\n        return '111'\n    if x == 0:"
    },
    {
        "number": 664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if len(a) == 1:\n        return '-1'\n    if len(a) == 2:\n        if a[0] > a[1]:\n            return '1'\n        else:\n            return '0'\n    if len(a) == 3:\n        if a[0] > a[1] and a[0] > a[2]:\n            return '1'\n        elif a[1] > a[0] and a[1] > a[2]:\n            return '1'\n        elif a[2] > a[0] and a[2] > a[1]:\n            return '1'\n        else:\n            return '0'\n    if len(a) == 4:\n        if a[0] > a[1] and a[0] > a[2] and a[0] > a[3]:\n            return '1'\n        elif a[1] > a[0] and a[1] > a[2] and a[1] > a[3]:\n            return '1'\n        elif a[2] > a[0] and a[2] > a[1] and a[2] > a[3]:\n            return '1'\n        elif a[3] > a[0] and a[3] > a[1] and a[3] > a[2]:\n            return '1'\n        else:\n            return '0'\n    if len(a) == 5:\n        if a[0] > a[1] and a[0] > a[2] and a[0] > a[3] and a[0] > a[4]:\n            return '1'\n        elif a[1] > a[0] and a[1] > a[2] and a[1] > a[3] and a[1] > a[4]:\n            return '1'\n        elif a[2] > a[0] and a[2] > a[1] and a[2] > a[3] and a[2] > a[4]:\n            return '1'\n        elif a[3] > a[0] and a[3] > a[1] and a[3] > a[2] and a[3] > a[4]:\n            return '1'\n        elif a[4] > a[0] and a[4] > a[1] and a[4] > a[2] and a[4] > a[3]:\n            return '1'\n        else:\n            return '0'\n    if len(a) == 6:\n        if a[0] > a[1] and a[0] > a[2] and a[0] > a[3] and a[0] > a[4] and a[0] > a[5]:\n            return '1'\n        elif a[1] > a[0] and a[1] > a[2] and a[1] > a[3] and a[1] > a[4] and a[1] > a[5]:\n            return '1'\n        elif a[2] > a[0] and a[2] > a[1] and a[2] > a[3] and a[2] > a[4] and a[2] > a[5]:\n            return '1'\n        elif a[3] > a[0] and a[3] > a[1] and a[3] > a[2] and a[3] > a[4] and a[3] > a[5]:\n            return '1'\n        elif a[4] > a[0] and a[4] > a[1] and a[4] > a[2] and a[4] > a[3] and a[4] > a[5]:\n            return '1'\n        elif a[5] > a[0] and a[5] > a[1] and a[5] > a[2] and a[5] > a[3] and a[5] > a[4]:\n            return '1'\n        else:\n            return '0'\n    if len(a) == 7:\n        if a[0] > a[1] and a[0] > a[2] and a[0] > a[3] and a[0] > a[4] and a[0] > a[5] and a[0] > a[6]:\n            return '1'\n        elif a[1] > a[0] and a[1] > a[2] and a[1] > a[3] and a[1] > a[4] and a[1] > a[5] and a[1] > a[6]:\n            return '1'\n        elif a[2] > a[0] and a[2] > a[1] and a[2] > a[3] and a[2] > a[4] and a[2] > a[5] and a[2] > a[6]:\n            return '1'\n        elif a[3] > a[0] and a[3] > a[1] and a[3] > a[2] and a[3] > a[4] and a[3] > a[5] and a[3] > a[6]:\n            return '1'\n        elif a[4] > a[0] and a[4] > a[1] and a[4] > a[2] and a[4] > a[3] and a[4] > a[5] and a[4] > a[6]:\n            return '1'\n        elif a[5] > a[0] and a[5] > a[1] and a[5] > a[2] and a[5] > a[3] and a[5] > a[4] and a[5] > a[6]:\n            return '1'\n        elif a[6] > a[0] and a[6] > a[1] and a[6] > a[2] and a[6] > a[3] and a[6] > a[4] and a[6] > a[5]:\n            return '1'\n        else:\n            return '0'\n    if len(a) == 8:\n        if a[0] > a[1] and a[0] > a[2] and a[0] > a[3] and a[0] > a[4] and a[0] > a[5] and a[0] > a[6] and a[0] > a[7]:\n            return '1'\n        elif a[1] > a[0] and a[1] > a[2] and a[1] > a[3] and a[1] > a[4] and a[1] > a[5] and a[1] > a[6] and a[1] > a[7]:\n            return '1'\n        elif a[2] > a[0] and a[2] > a[1] and a[2] > a[3] and a[2] > a[4] and a[2] > a[5] and a[2] > a[6] and a[2] > a[7]:\n            return '1'\n        elif a[3] > a[0] and a[3] > a[1] and a[3"
    },
    {
        "number": 665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > s:\n        return 0\n    if a[-1] > s:\n        return n\n    for i in range(1, n):\n        if a[i] - a[i - 1] > s:\n            return i\n    return n"
    },
    {
        "number": 666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5]\n    return sequence[n - 1]\n"
    },
    {
        "number": 667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return -1\n    if a[0] == 0:\n        return -1\n    if a[0] == 1:\n        return str(1)\n    if a[0] == 2:\n        return str(1) +'' + str(2)\n    if a[0] == 3:\n        return str(1) +'' + str(2) +'' + str(3)\n    if a[0] == 4:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4)\n    if a[0] == 5:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5)\n    if a[0] == 6:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6)\n    if a[0] == 7:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7)\n    if a[0] == 8:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8)\n    if a[0] == 9:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9)\n    if a[0] == 10:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10)\n    if a[0] == 11:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11)\n    if a[0] == 12:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12)\n    if a[0] == 13:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13)\n    if a[0] == 14:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14)\n    if a[0] == 15:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14) +'' + str(15)\n    if a[0] == 16:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14) +'' + str(15) +'' + str(16)\n    if a[0] == 17:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +"
    },
    {
        "number": 669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = map(lambda x: x % m, a)\n    return str(sum(a))"
    },
    {
        "number": 670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return str(abs(a * x1 + b * y1 + c) - abs(x1 - x2) - abs(y1 - y2))"
    },
    {
        "number": 671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[int(stdin)-1]"
    },
    {
        "number": 672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return \"infinity\"\n    return str(a % b)"
    },
    {
        "number": 673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n, n + k + 1):\n        if i % k == 0:\n            return str(i)\n    return str(n + k)\n"
    },
    {
        "number": 674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    strings.sort(key=lambda x: x)\n    good_strings = []\n    for i in range(n):\n        if i == 0:\n            good_strings.append(strings[i])\n        else:\n            if strings[i] in good_strings:\n                continue\n            else:\n                good_strings.append(strings[i])\n    if len(good_strings) == 0:\n        return \"NO\"\n    else:\n        good_strings.sort(key=lambda x: x[0])\n        return good_strings[0]\n\nsolution(input())"
    },
    {
        "number": 675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    if m == 1:\n        if t == 0:\n            return str(r)\n        else:\n            return str(-1)\n    if t == 0:\n        return str(r)\n    if r == 0:\n        return str(0)\n    if r > m:\n        return str(-1)\n    if m == 1:\n        return str(r)\n    if m == 2:\n        if w[0] == w[1]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 3:\n        if w[0] == w[1] == w[2]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 4:\n        if w[0] == w[1] == w[2] == w[3]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 5:\n        if w[0] == w[1] == w[2] == w[3] == w[4]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 6:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 7:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 8:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 9:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 10:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 11:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 12:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10] == w[11]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 13:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10] == w[11] == w[12]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 14:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10] == w[11] == w[12] == w[13]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 15:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10] == w[11] == w[12] == w[13] == w[14]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 16:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10] == w[11] == w[12] == w[13] == w[14] == w[15]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 17:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] == w[10] == w[11] == w[12] == w[13] == w[14] == w[15] == w[16]:\n            return str(r)\n        else:\n            return str(-1)\n    if m == 18:\n        if w[0] == w[1] == w[2] == w[3] == w[4] == w[5] == w[6] == w[7] == w[8] == w[9] =="
    },
    {
        "number": 676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] + a[1] + a[2] + a[3] == n * 4:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        l, r, d = map(int, stdin.split())\n        if (d % l) == 0 or (d % r) == 0:\n            print(d)\n        else:\n            print(max(l, r) - 1)\n    return \"\"\n"
    },
    {
        "number": 678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    if len(stdin)!= 1:\n        return \"No\"\n    if stdin[0] == \".\":\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_a, y_a = map(int, stdin.split())\n    x_b, y_b = map(int, stdin.split())\n    x_c, y_c = map(int, stdin.split())\n    x_d, y_d = map(int, stdin.split())\n    x_e, y_e = map(int, stdin.split())\n    x_f, y_f = map(int, stdin.split())\n    x_g, y_g = map(int, stdin.split())\n    x_h, y_h = map(int, stdin.split())\n    x_i, y_i = map(int, stdin.split())\n    x_j, y_j = map(int, stdin.split())\n    x_k, y_k = map(int, stdin.split())\n    x_l, y_l = map(int, stdin.split())\n    x_m, y_m = map(int, stdin.split())\n    x_n, y_n = map(int, stdin.split())\n    x_o, y_o = map(int, stdin.split())\n    x_p, y_p = map(int, stdin.split())\n    x_q, y_q = map(int, stdin.split())\n    x_r, y_r = map(int, stdin.split())\n    x_s, y_s = map(int, stdin.split())\n    x_t, y_t = map(int, stdin.split())\n    x_u, y_u = map(int, stdin.split())\n    x_v, y_v = map(int, stdin.split())\n    x_w, y_w = map(int, stdin.split())\n    x_x, y_x = map(int, stdin.split())\n    x_y, y_y = map(int, stdin.split())\n    x_z, y_z = map(int, stdin.split())\n    x_a = (x_a, y_a)\n    x_b = (x_b, y_b)\n    x_c = (x_c, y_c)\n    x_d = (x_d, y_d)\n    x_e = (x_e, y_e)\n    x_f = (x_f, y_f)\n    x_g = (x_g, y_g)\n    x_h = (x_h, y_h)\n    x_i = (x_i, y_i)\n    x_j = (x_j, y_j)\n    x_k = (x_k, y_k)\n    x_l = (x_l, y_l)\n    x_m = (x_m, y_m)\n    x_n = (x_n, y_n)\n    x_o = (x_o, y_o)\n    x_p = (x_p, y_p)\n    x_q = (x_q, y_q)\n    x_r = (x_r, y_r)\n    x_s = (x_s, y_s)\n    x_t = (x_t, y_t)\n    x_u = (x_u, y_u)\n    x_v = (x_v, y_v)\n    x_w = (x_w, y_w)\n    x_x = (x_x, y_x)\n    x_y = (x_y, y_y)\n    x_z = (x_z, y_z)\n    return str(min(abs(x_a[0] - x_b[0]) + abs(x_a[1] - x_b[1]), abs(x_a[0] - x_c[0]) + abs(x_a[1] - x_c[1]), abs(x_a[0] - x_d[0]) + abs(x_a[1] - x_d[1]), abs(x_a[0] - x_e[0]) + abs(x_a[1] - x_e[1]), abs(x_a[0] - x_f[0]) + abs(x_a[1] - x_f[1]), abs(x_a[0] - x_g[0]) + abs(x_a[1] - x_g[1]), abs(x_a[0] - x_h[0]) + abs(x_a[1] - x_h[1]), abs(x_a[0] - x_i[0]) + abs(x_a[1] - x_i[1]), abs(x_a[0] - x_j[0]) + abs(x_a[1] - x_j[1]), abs(x_a[0] - x_k[0]) + abs(x_a[1] - x_k[1]), abs(x_a[0] - x_l[0]) + abs(x_a[1] - x_l[1]), abs(x_a[0] - x_m[0]) + abs(x_a[1] - x_m[1]), abs(x_a[0] - x_n[0]) + abs(x_a[1] - x_n[1]), abs(x_a[0] - x_o[0]) + abs(x_a[1] - x_o[1]), abs(x_a[0] - x_p[0]) + abs(x_a[1] - x_p[1]), abs(x_a[0] - x_q[0]) + abs(x_a[1] - x_q[1]), abs(x_a[0] - x_r[0]) + abs(x_a[1] - x_r[1]), abs(x_a[0] - x_s[0]) + abs(x_a[1] - x_s[1]), abs(x_a[0] - x_t[0]) + abs(x_a"
    },
    {
        "number": 681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(sum(1 for i in range(N) if i % 2 == 0) * (M + 1) + sum(1 for i in range(N) if i % 2 == 1) * (M + 1))"
    },
    {
        "number": 682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r_1, c_1, r_2, c_2 = map(int, stdin.split())\n    if r_1 == r_2 and c_1 == c_2:\n        return \"0\"\n    if abs(r_1 - r_2) == abs(c_1 - c_2):\n        return \"1\"\n    if abs(r_1 - r_2) == abs(c_1 - c_2) or abs(r_1 - r_2) == abs(c_1 - c_2) or abs(r_1 - r_2) == abs(c_1 - c_2):\n        return \"2\"\n    return \"3\"\n"
    },
    {
        "number": 683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a**2)"
    },
    {
        "number": 684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    for x in range(a, b + 1):\n        for y in range(b, c + 1):\n            for z in range(c, d + 1):\n                if a <= x <= b and b <= y <= c and c <= z <= d:\n                    return str(x) + \" \" + str(y) + \" \" + str(z)\n\nsolution(input())\n\n'''"
    },
    {
        "number": 685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[1])\n    max_distance = 0\n    for i in range(n):\n        if segments[i][0] == 1:\n            max_distance = max(max_distance, segments[i][1] - 1)\n        else:\n            max_distance = max(max_distance, segments[i][1] - segments[i - 1][1] - 1)\n    return str(max_distance)\n"
    },
    {
        "number": 686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, y = map(int, stdin.split())\n        if x == y:\n            print(\"YES\")\n        else:\n            for p in range(2, x):\n                if x % p == 0:\n                    break\n            else:\n                print(\"YES\")\n                continue\n            for p in range(2, y):\n                if y % p == 0:\n                    break\n            else:\n                print(\"YES\")\n                continue\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '-1'\n    if a > b:\n        a, b = b, a\n    if a % 10 == b % 10:\n        return str(a + 1) +'' + str(b)\n    if a % 10!= b % 10:\n        return str(a) +'' + str(b)"
    },
    {
        "number": 688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    n = len(str(t))\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    "
    },
    {
        "number": 689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()[i]\n        if len(s) == len(set(s)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'O-O-O'\n    if n == 1:\n        return 'O-O'\n    if n == 2:\n        return 'O-O-O'\n    if n == 3:\n        return 'O-O-O-O'\n    if n == 4:\n        return 'O-O-O-O-O'\n    if n == 5:\n        return 'O-O-O-O-O-O'\n    if n == 6:\n        return 'O-O-O-O-O-O-O'\n    if n == 7:\n        return 'O-O-O-O-O-O-O-O'\n    if n == 8:\n        return 'O-O-O-O-O-O-O-O-O'\n    if n == 9:\n        return 'O-O-O-O-O-O-O-O-O-O'\n    if n == 10:\n        return 'O-O-O-O-O-O-O-O-O-O-O'\n    if n == 11:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 12:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 13:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 14:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 15:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 16:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 17:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 18:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 19:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 20:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 21:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 22:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 23:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 24:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 25:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 26:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 27:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 28:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 29:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 30:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 31:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 32:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 33:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 34:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 35:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 36:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 37:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 38:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 39:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 40:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 41:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 42:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 43:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 44:\n        return 'O-O-O-O-O-O-O-O-O-O-O-O-O'\n    if n == 45:\n        return 'O-O-O-O-O-O-O-O-O-O-"
    },
    {
        "number": 691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if (x ^ i) == x:\n            print(i)\n            return\n    print(\"NO\")"
    },
    {
        "number": 692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    M = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    return str(sum(M) - sum(R))"
    },
    {
        "number": 693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lightsaber_colors = list(map(int, stdin.split()))\n    lightsaber_colors.sort()\n    counts = list(map(int, stdin.split()))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts = list(map(lambda x: x - 1, counts))\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort()\n    counts.sort"
    },
    {
        "number": 694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return \"YES\"\n    elif a % 2 == 0 and b % 2!= 0:\n        return \"NO\"\n    elif a % 2!= 0 and b % 2 == 0:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    return str(a_1 + a_2)"
    },
    {
        "number": 696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p % 2 == 0:\n        return 0\n    if p % 3 == 0:\n        return 0\n    if p % 5 == 0:\n        return 0\n    if p % 7 == 0:\n        return 0\n    if p % 11 == 0:\n        return 0\n    if p % 13 == 0:\n        return 0\n    if p % 17 == 0:\n        return 0\n    if p % 19 == 0:\n        return 0\n    if p % 23 == 0:\n        return 0\n    if p % 29 == 0:\n        return 0\n    if p % 31 == 0:\n        return 0\n    if p % 37 == 0:\n        return 0\n    if p % 41 == 0:\n        return 0\n    if p % 43 == 0:\n        return 0\n    if p % 47 == 0:\n        return 0\n    if p % 53 == 0:\n        return 0\n    if p % 59 == 0:\n        return 0\n    if p % 61 == 0:\n        return 0\n    if p % 67 == 0:\n        return 0\n    if p % 71 == 0:\n        return 0\n    if p % 73 == 0:\n        return 0\n    if p % 79 == 0:\n        return 0\n    if p % 83 == 0:\n        return 0\n    if p % 89 == 0:\n        return 0\n    if p % 97 == 0:\n        return 0\n    if p % 101 == 0:\n        return 0\n    if p % 103 == 0:\n        return 0\n    if p % 107 == 0:\n        return 0\n    if p % 109 == 0:\n        return 0\n    if p % 113 == 0:\n        return 0\n    if p % 127 == 0:\n        return 0\n    if p % 131 == 0:\n        return 0\n    if p % 137 == 0:\n        return 0\n    if p % 139 == 0:\n        return 0\n    if p % 149 == 0:\n        return 0\n    if p % 151 == 0:\n        return 0\n    if p % 157 == 0:\n        return 0\n    if p % 163 == 0:\n        return 0\n    if p % 167 == 0:\n        return 0\n    if p % 173 == 0:\n        return 0\n    if p % 179 == 0:\n        return 0\n    if p % 181 == 0:\n        return 0\n    if p % 191 == 0:\n        return 0\n    if p % 193 == 0:\n        return 0\n    if p % 197 == 0:\n        return 0\n    if p % 199 == 0:\n        return 0\n    if p % 211 == 0:\n        return 0\n    if p % 223 == 0:\n        return 0\n    if p % 227 == 0:\n        return 0\n    if p % 229 == 0:\n        return 0\n    if p % 233 == 0:\n        return 0\n    if p % 239 == 0:\n        return 0\n    if p % 241 == 0:\n        return 0\n    if p % 251 == 0:\n        return 0\n    if p % 257 == 0:\n        return 0\n    if p % 263 == 0:\n        return 0\n    if p % 269 == 0:\n        return 0\n    if p % 271 == 0:\n        return 0\n    if p % 277 == 0:\n        return 0\n    if p % 281 == 0:\n        return 0\n    if p % 283 == 0:\n        return 0\n    if p % 293 == 0:\n        return 0\n    if p % 307 == 0:\n        return 0\n    if p % 311 == 0:\n        return 0\n    if p % 313 == 0:\n        return 0\n    if p % 317 == 0:\n        return 0\n    if p % 331 == 0:\n        return 0\n    if p % 337 == 0:\n        return 0\n    if p % 347 == 0:\n        return 0\n    if p % 349 == 0:\n        return 0\n    if p % 353 == 0:\n        return 0\n    if p % 359 == 0:\n        return 0\n    if p % 367 == 0:\n        return 0\n    if p % 373 == 0:\n        return 0\n    if p % 379 == 0:\n        return 0\n    if p % 383 == 0:\n        return 0\n    if p % 389 == 0:\n        return 0\n    if p % 397 == 0:\n        return 0\n    if p % 401 == 0:\n        return 0\n    if p % 409 == 0:\n        return 0\n    if p % 419 == 0:\n        return 0\n    if p % 421 == 0:\n        return 0\n    if p % 431 == 0:\n        return 0\n    if p % 433 == 0:\n        return 0\n    if p % 439 == 0:\n        return 0\n    if p % 443 == 0:\n        return 0\n    if p % 449 == 0:\n        return 0\n    if p % 457 == 0:\n        return 0\n    if p % 461 == 0:\n        return 0\n    if p % 463 == 0:\n        return 0\n    if p % 467 == 0:\n        return 0\n    if p % 469 == 0:\n        return 0\n    if p % 471 == 0:\n        return 0\n    if p % 473 == 0:\n        return 0\n    if p % 479 == 0:\n        return 0\n    if p % 481 == 0:\n        return 0\n    if p % 483 == 0:\n        return 0\n    if p % 487 == 0:\n        return 0\n    if p % 491 == 0:\n        return 0\n    if p % 499 == 0:\n        return 0\n    if p % 503 == 0:\n        return 0\n    if p % 509 == 0:\n        return 0\n    if p % 521 == 0:\n        return 0\n    if p % 523 == 0:\n        return 0\n    if p % 541 == 0:\n        return 0\n    if p % 547 == 0:\n        return 0\n    if p % 553 == 0:\n        return 0\n    if p % 557 == 0:\n        return 0\n    if p % 563 == 0:\n        return 0\n    if p % 569 == 0:\n        return 0\n    if p % 571 == 0:\n        return 0\n    if p % 577 == 0:\n        return 0\n    if p % 581 == 0:\n        return 0\n    if p % 587 == 0:\n        return 0\n    if p % 593 == 0:\n        return 0\n    if p % 599 == 0:\n        return 0\n    if p % 601 == 0:\n        return 0\n    if p % 607 == 0:\n        return 0\n    if p % 613 == 0:\n        return 0\n    if p % 617 == 0:\n        return 0\n    if p % 619 == 0:\n        return 0\n    if p % 631 == 0:\n        return 0\n    if p % 641 == 0:\n        return 0\n    if p % 643 == 0:\n        return 0\n    if p % 647 == 0:\n        return 0\n    if p % 653 == 0:\n        return 0\n    if p % 659 == 0:\n        return 0\n    if p % 661 == 0:\n        return 0\n    if p % 673 == 0:\n        return 0\n    if p % 677 == 0:\n        return 0\n    if p % 683 == 0:\n        return 0\n    "
    },
    {
        "number": 697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(0, max(map(sum, zip([1] * n, range(n + 1))), map(sum, zip([-1] * m, range(m + 1))))) % 998244353)"
    },
    {
        "number": 698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    div1 = []\n    div2 = []\n    for i in range(k):\n        line = stdin.split()\n        if line[0] == '1':\n            div1.append(int(line[1]))\n        else:\n            div2.append(int(line[1]))\n    div1.sort()\n    div2.sort()\n    div1_set = set(div1)\n    div2_set = set(div2)\n    div1_set.remove(1)\n    div2_set.remove(1)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list(div1_set)\n    div2_set = list(div2_set)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set.append(x)\n    div2_set.append(x)\n    div1_set.sort()\n    div2_set.sort()\n    div1_set = set(div1_set)\n    div2_set = set(div2_set)\n    div1_set.remove(x)\n    div2_set.remove(x)\n    div1_set = list"
    },
    {
        "number": 699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, k, n = map(int, stdin.split())\n    if n % k!= 0:\n        return -1\n    return''.join(map(str, range(1, n // k + 1)))"
    },
    {
        "number": 700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    maps = stdin.split()[1:]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n    for i in range(n):\n        maps[i] = maps[i][::-1]\n        maps[i] = maps[i][::-1]\n        maps[i] = maps["
    },
    {
        "number": 701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    if not suffix_automaton(s) or not suffix_array(t):\n        return \"need tree\"\n    return \"automaton\"\n\ndef"
    },
    {
        "number": 702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [['.'] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if stdin[i * n + j] == '#':\n                board[i][j] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n                    return 'NO'\n                if board[i - 1][j] == '#' or board[i + 1][j] == '#' or board[i][j - 1] == '#' or board[i][j + 1] == '#':\n                    return 'NO'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n                    return 'NO'\n                if board[i - 1][j - 1] == '#' or board[i - 1][j + 1] == '#' or board[i + 1][j - 1] == '#' or board[i + 1][j + 1] == '#':\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b, v = map(int, stdin.split())\n    return str(min(k, a, b, v))"
    },
    {
        "number": 704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    r1, c1, r2, c2 = list(map(int, stdin.split()[2].split()))\n    return str(min(abs(r1 - r2), abs(c1 - c2)))\n"
    },
    {
        "number": 705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1]))\n    y = list(map(int, stdin.split()[2]))\n    x.sort()\n    y.sort()\n    x_set = set(x)\n    y_set = set(y)\n    x_set.remove(1)\n    y_set.remove(1)\n    x_set.remove(2)\n    y_set.remove(2)\n    x_set.remove(3)\n    y_set.remove(3)\n    x_set.remove(4)\n    y_set.remove(4)\n    x_set.remove(5)\n    y_set.remove(5)\n    x_set.remove(6)\n    y_set.remove(6)\n    x_set.remove(7)\n    y_set.remove(7)\n    x_set.remove(8)\n    y_set.remove(8)\n    x_set.remove(9)\n    y_set.remove(9)\n    x_set.remove(10)\n    y_set.remove(10)\n    x_set.remove(11)\n    y_set.remove(11)\n    x_set.remove(12)\n    y_set.remove(12)\n    x_set.remove(13)\n    y_set.remove(13)\n    x_set.remove(14)\n    y_set.remove(14)\n    x_set.remove(15)\n    y_set.remove(15)\n    x_set.remove(16)\n    y_set.remove(16)\n    x_set.remove(17)\n    y_set.remove(17)\n    x_set.remove(18)\n    y_set.remove(18)\n    x_set.remove(19)\n    y_set.remove(19)\n    x_set.remove(20)\n    y_set.remove(20)\n    x_set.remove(21)\n    y_set.remove(21)\n    x_set.remove(22)\n    y_set.remove(22)\n    x_set.remove(23)\n    y_set.remove(23)\n    x_set.remove(24)\n    y_set.remove(24)\n    x_set.remove(25)\n    y_set.remove(25)\n    x_set.remove(26)\n    y_set.remove(26)\n    x_set.remove(27)\n    y_set.remove(27)\n    x_set.remove(28)\n    y_set.remove(28)\n    x_set.remove(29)\n    y_set.remove(29)\n    x_set.remove(30)\n    y_set.remove(30)\n    x_set.remove(31)\n    y_set.remove(31)\n    x_set.remove(32)\n    y_set.remove(32)\n    x_set.remove(33)\n    y_set.remove(33)\n    x_set.remove(34)\n    y_set.remove(34)\n    x_set.remove(35)\n    y_set.remove(35)\n    x_set.remove(36)\n    y_set.remove(36)\n    x_set.remove(37)\n    y_set.remove(37)\n    x_set.remove(38)\n    y_set.remove(38)\n    x_set.remove(39)\n    y_set.remove(39)\n    x_set.remove(40)\n    y_set.remove(40)\n    x_set.remove(41)\n    y_set.remove(41)\n    x_set.remove(42)\n    y_set.remove(42)\n    x_set.remove(43)\n    y_set.remove(43)\n    x_set.remove(44)\n    y_set.remove(44)\n    x_set.remove(45)\n    y_set.remove(45)\n    x_set.remove(46)\n    y_set.remove(46)\n    x_set.remove(47)\n    y_set.remove(47)\n    x_set.remove(48)\n    y_set.remove(48)\n    x_set.remove(49)\n    y_set.remove(49)\n    x_set.remove(50)\n    y_set.remove(50)\n    x_set.remove(51)\n    y_set.remove(51)\n    x_set.remove(52)\n    y_set.remove(52)\n    x_set.remove(53)\n    y_set.remove(53)\n    x_set.remove(54)\n    y_set.remove(54)\n    x_set.remove(55)\n    y_set.remove(55)\n    x_set.remove(56)\n    y_set.remove(56)\n    x_set.remove(57)\n    y_set.remove(57)\n    x_set.remove(58)\n    y_set.remove(58)\n    x_set.remove(59)\n    y_set.remove(59)\n    x_set.remove(60)\n    y_set.remove(60)\n    x_set.remove(61)\n    y_set.remove(61)\n    x_set.remove(62)\n    y_set.remove(62)\n    x_set.remove(63)\n    y_set.remove(63)\n    x_set.remove(64)\n    y_set.remove(64)\n    x_set.remove(65)\n    y_set.remove(65)\n    x_set.remove(66)\n    y_set.remove(66)\n    x"
    },
    {
        "number": 706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n, x = map(int, stdin.split())\n    g = lambda n: (x * pow(A, n, 10**9 + 7) + B) % (10**9 + 7)\n    return str(g(n))"
    },
    {
        "number": 707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    x.sort()\n    p.sort()\n    if x[0] > x[1]:\n        return \"NO\"\n    for i in range(1, m):\n        if p[i] < p[i - 1]:\n            return \"NO\"\n    for i in range(1, m):\n        if x[i] - x[i - 1]!= p[i] - p[i - 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b, c, d = map(int, stdin.split())\n    if n < 2 or k > 2 * n - 2:\n        return -1\n    if a == b or c == d:\n        return -1\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a > c:\n        a, c = c, a\n    if b > d:\n        b, d = d, b\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n    if b == d:\n        return -1\n    if a == b:\n        return -1\n    if c == d:\n        return -1\n    if a == c:\n        return -1\n"
    },
    {
        "number": 709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"1\"\n    if x == 4:\n        return \"2\"\n    if x == 5:\n        return \"1\"\n    if x == 6:\n        return \"2\"\n    if x == 7:\n        return \"1\"\n    if x == 8:\n        return \"2\"\n    if x == 9:\n        return \"1\"\n    if x == 10:\n        return \"2\"\n    return \"1\"\n"
    },
    {
        "number": 710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n < 4:\n        return \"0\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"2\"\n    if n == 6:\n        return \"3\"\n    if n == 7:\n        return \"4\"\n    if n == 8:\n        return \"5\"\n    if n == 9:\n        return \"6\"\n    if n == 10:\n        return \"7\"\n    if n == 11:\n        return \"8\"\n    if n == 12:\n        return \"9\"\n    if n == 13:\n        return \"10\"\n    if n == 14:\n        return \"11\"\n    if n == 15:\n        return \"12\"\n    if n == 16:\n        return \"13\"\n    if n == 17:\n        return \"14\"\n    if n == 18:\n        return \"15\"\n    if n == 19:\n        return \"16\"\n    if n == 20:\n        return \"17\"\n    if n == 21:\n        return \"18\"\n    if n == 22:\n        return \"19\"\n    if n == 23:\n        return \"20\"\n    if n == 24:\n        return \"21\"\n    if n == 25:\n        return \"22\"\n    if n == 26:\n        return \"23\"\n    if n == 27:\n        return \"24\"\n    if n == 28:\n        return \"25\"\n    if n == 29:\n        return \"26\"\n    if n == 30:\n        return \"27\"\n    if n == 31:\n        return \"28\"\n    if n == 32:\n        return \"29\"\n    if n == 33:\n        return \"30\"\n    if n == 34:\n        return \"31\"\n    if n == 35:\n        return \"32\"\n    if n == 36:\n        return \"33\"\n    if n == 37:\n        return \"34\"\n    if n == 38:\n        return \"35\"\n    if n == 39:\n        return \"36\"\n    if n == 40:\n        return \"37\"\n    if n == 41:\n        return \"38\"\n    if n == 42:\n        return \"39\"\n    if n == 43:\n        return \"40\"\n    if n == 44:\n        return \"41\"\n    if n == 45:\n        return \"42\"\n    if n == 46:\n        return \"43\"\n    if n == 47:\n        return \"44\"\n    if n == 48:\n        return \"45\"\n    if n == 49:\n        return \"46\"\n    if n == 50:\n        return \"47\"\n    if n == 51:\n        return \"48\"\n    if n == 52:\n        return \"49\"\n    if n == 53:\n        return \"50\"\n    if n == 54:\n        return \"51\"\n    if n == 55:\n        return \"52\"\n    if n == 56:\n        return \"53\"\n    if n == 57:\n        return \"54\"\n    if n == 58:\n        return \"55\"\n    if n == 59:\n        return \"56\"\n    if n == 60:\n        return \"57\"\n    if n == 61:\n        return \"58\"\n    if n == 62:\n        return \"59\"\n    if n == 63:\n        return \"60\"\n    if n == 64:\n        return \"61\"\n    if n == 65:\n        return \"62\"\n    if n == 66:\n        return \"63\"\n    if n == 67:\n        return \"64\"\n    if n == 68:\n        return \"65\"\n    if n == 69:\n        return \"66\"\n    if n == 70:\n        return \"67\"\n    if n == 71:\n        return \"68\"\n    if n == 72:\n        return \"69\"\n    if n == 73:\n        return \"70\"\n    if n == 74:\n        return \"71\"\n    if n == 75:\n        return \"72\"\n    if n == 76:\n        return \"73\"\n    if n == 77:\n        return \"74\"\n    if n == 78:\n        return \"75\"\n    if n == 79:\n        return \"76\"\n    if n == 80:\n        return \"77\"\n    if n == 81:\n        return \"78\"\n    if n == 82:\n        return \"79\"\n    if n == 83:\n        return \"80\"\n    if n == 84:\n        return \"81\"\n    if n == 85:\n        return \"82\"\n    if n == 86:\n        return \"83\"\n    if n == 87:\n        return \"84\"\n    if n == 88:\n        return \"85\"\n    if n == 89:\n        return \"86\"\n    if n == 90:\n        return \"87\"\n    if n == 91:\n        return \"88\"\n    if n == 92:\n        return \"89\"\n    if n == 93:\n        return \"90\"\n    if n == 94:\n        return \"91\"\n    if n == 95:\n        return \"92\"\n    if n == 96:\n        return \"93\"\n    if n == 97:\n        return \"94\"\n    if n == 98:\n        return \"95\"\n    if n == 99:\n        return \"96\"\n    if n == 100:\n        return \"97\"\n    if n == 101:\n        return \"98\"\n    if n == 102:\n        return \"99\"\n    if n == 103:\n        return \"100\"\n    if n == 104:\n        return \"101\"\n    if n == 105:\n        return \"102\"\n    if n == 106:\n        return \"103\"\n    if n == 107:\n        return \"104\"\n    if n == 108:\n        return \"105\"\n    if n == 109:\n        return \"106\"\n    if n == 110:\n        return \"107\"\n    if n == 111:\n        return \"108\"\n    if n == 112:\n        return \"109\"\n    if n == 113:\n        return \"110\"\n    if n == 114:\n        return \"111\"\n    if n == 115:\n        "
    },
    {
        "number": 711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(4)"
    },
    {
        "number": 712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, t = map(float, stdin.split())\n    return str(round(n * (1 - p) ** t, 6))"
    },
    {
        "number": 713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(len(set(range(n)) & set(range(m))), len(set(range(n)) & set(range(m)))))"
    },
    {
        "number": 714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return''.join(map(str, a[::2])) +'' +''.join(map(str, a[1::2]))"
    },
    {
        "number": 715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = input()\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[1:]\n    # stdin = stdin[0]\n    # stdin = stdin.split('.')\n    # stdin = stdin[1:]\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0]\n    # stdin = stdin.split('\\n')\n    # stdin = stdin[0"
    },
    {
        "number": 716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    costs = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                costs[i][j] = 0\n            elif i < j:\n                costs[i][j] = abs(i - j)\n            else:\n                costs[i][j] = abs(i - j) + 1\n    return costs[a - 1][b - 1]"
    },
    {
        "number": 717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    d = []\n    for i in range(n):\n        s.append(int(stdin.split()[i]))\n        d.append(int(stdin.split()[i+n]))\n    s.sort()\n    d.sort()\n    s.reverse()\n    d.reverse()\n    s.append(s[0])\n    d.append(d[0])\n    s.append(s[1])\n    d.append(d[1])\n    s.append(s[2])\n    d.append(d[2])\n    s.append(s[3])\n    d.append(d[3])\n    s.append(s[4])\n    d.append(d[4])\n    s.append(s[5])\n    d.append(d[5])\n    s.append(s[6])\n    d.append(d[6])\n    s.append(s[7])\n    d.append(d[7])\n    s.append(s[8])\n    d.append(d[8])\n    s.append(s[9])\n    d.append(d[9])\n    s.append(s[10])\n    d.append(d[10])\n    s.append(s[11])\n    d.append(d[11])\n    s.append(s[12])\n    d.append(d[12])\n    s.append(s[13])\n    d.append(d[13])\n    s.append(s[14])\n    d.append(d[14])\n    s.append(s[15])\n    d.append(d[15])\n    s.append(s[16])\n    d.append(d[16])\n    s.append(s[17])\n    d.append(d[17])\n    s.append(s[18])\n    d.append(d[18])\n    s.append(s[19])\n    d.append(d[19])\n    s.append(s[20])\n    d.append(d[20])\n    s.append(s[21])\n    d.append(d[21])\n    s.append(s[22])\n    d.append(d[22])\n    s.append(s[23])\n    d.append(d[23])\n    s.append(s[24])\n    d.append(d[24])\n    s.append(s[25])\n    d.append(d[25])\n    s.append(s[26])\n    d.append(d[26])\n    s.append(s[27])\n    d.append(d[27])\n    s.append(s[28])\n    d.append(d[28])\n    s.append(s[29])\n    d.append(d[29])\n    s.append(s[30])\n    d.append(d[30])\n    s.append(s[31])\n    d.append(d[31])\n    s.append(s[32])\n    d.append(d[32])\n    s.append(s[33])\n    d.append(d[33])\n    s.append(s[34])\n    d.append(d[34])\n    s.append(s[35])\n    d.append(d[35])\n    s.append(s[36])\n    d.append(d[36])\n    s.append(s[37])\n    d.append(d[37])\n    s.append(s[38])\n    d.append(d[38])\n    s.append(s[39])\n    d.append(d[39])\n    s.append(s[40])\n    d.append(d[40])\n    s.append(s[41])\n    d.append(d[41])\n    s.append(s[42])\n    d.append(d[42])\n    s.append(s[43])\n    d.append(d[43])\n    s.append(s[44])\n    d.append(d[44])\n    s.append(s[45])\n    d.append(d[45])\n    s.append(s[46])\n    d.append(d[46])\n    s.append(s[47])\n    d.append(d[47])\n    s.append(s[48])\n    d.append(d[48])\n    s.append(s[49])\n    d.append(d[49])\n    s.append(s[50])\n    d.append(d[50])\n    s.append(s[51])\n    d.append(d[51])\n    s.append(s[52])\n    d.append(d[52])\n    s.append(s[53])\n    d.append(d[53])\n    s.append(s[54])\n    d.append(d[54])\n    s.append(s[55])\n    d.append(d[55])\n    s.append(s[56])\n    d.append(d[56])\n    s.append(s[57])\n    d.append(d[57])\n    s.append(s[58])\n    d.append(d[58])\n    s.append(s[59])\n    d.append(d[59])\n    s.append(s[60])\n    d.append(d[60])\n    s.append(s[61])\n    d.append(d[61])\n    s.append(s[62])\n    d.append(d[62])\n    s.append(s[63])\n    d.append(d[63])\n    s.append(s[64])\n    d.append(d[64])\n    s.append(s[65])\n    d.append(d[65])\n    s.append(s[66])\n    d.append(d[66])\n    s.append(s[67])\n    d.append(d[67])\n    s.append(s[68])\n    d.append(d[68])\n    s.append(s[69])\n    d.append(d[69])\n    s.append(s[70])\n    d.append(d[70])\n    s.append(s[71])\n    d.append(d[71])\n    s.append(s[72])\n    d.append(d[72])\n    s.append(s[73])\n    d.append(d[73])\n    s.append(s[74])\n    d.append(d[74])\n    s.append(s[75])\n    d.append(d[75])\n    s.append(s[76])\n    d.append(d[76])\n    s.append(s[77])\n    d.append(d[77])\n    s.append(s[78])\n    d.append(d[78])\n    s.append(s[79"
    },
    {
        "number": 718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 1\n    while True:\n        if is_lucky(a, b):\n            return str(b)\n        b += 1\n\ndef"
    },
    {
        "number": 719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(1, 10):\n        if sum(int(c) for c in str(i)) == 10:\n            return str(i)\n    return str(k)"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = []\n    for i in range(n):\n        scores.append(list(map(int, stdin.split())))\n    scores.sort(key=lambda x: (x[0], x[1]))\n    max_draws = 0\n    max_draws_index = 0\n    for i in range(n):\n        if scores[i][0] == scores[i][1]:\n            max_draws += 1\n        else:\n            max_draws = 0\n        if max_draws > max_draws_index:\n            max_draws_index = max_draws\n    return str(max_draws_index)"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(m):\n        if a[i] > d:\n            ans += d\n        else:\n            ans += a[i]\n    return str(ans)"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    abbrevs = []\n    for i in range(n):\n        abbrevs.append(stdin)\n    abbrevs.sort()\n    for i in range(n):\n        print(abbrevs[i][-9:])\n\nsolution(input())\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    points.sort()\n    diameter = 0\n    for i in range(n):\n        diameter = max(diameter, abs(points[i] - points[i - 1]))\n    return str(diameter)"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'C':\n                if matrix[i][j] == 'C' and matrix[i][j] == 'M' and matrix[i][j] == 'Y' and matrix[i][j] == 'W' and matrix[i][j] == 'G' and matrix[i][j] == 'B':\n                    return '#Black&White'\n            if matrix[i][j] == 'M':\n                if matrix[i][j] == 'M' and matrix[i][j] == 'Y' and matrix[i][j] == 'W' and matrix[i][j] == 'G' and matrix[i][j] == 'B':\n                    return '#Black&White'\n            if matrix[i][j] == 'Y':\n                if matrix[i][j] == 'Y' and matrix[i][j] == 'W' and matrix[i][j] == 'G' and matrix[i][j] == 'B':\n                    return '#Black&White'\n            if matrix[i][j] == 'W':\n                if matrix[i][j] == 'W' and matrix[i][j] == 'G' and matrix[i][j] == 'B':\n                    return '#Black&White'\n            if matrix[i][j] == 'G':\n                if matrix[i][j] == 'G' and matrix[i][j] == 'B':\n                    return '#Black&White'\n            if matrix[i][j] == 'B':\n                if matrix[i][j] == 'B':\n                    return '#Black&White'\n    return '#Color'"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    c = 0\n    for i in range(n):\n        if x[i] - x[i - 1] <= d:\n            c += 1\n    return str(c)"
    },
    {
        "number": 727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    i = 0\n    while i < n:\n        if arr[i] == arr[i + 1]:\n            arr.pop(i)\n            arr.pop(i)\n            n -= 2\n        else:\n            i += 1\n    return str(n)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = list(map(int, stdin.split()))\n    votes.sort(reverse=True)\n    return str(votes[0] - votes[1])"
    },
    {
        "number": 729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        if s[0] == s[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    seats = [0] * k\n    for i in range(k):\n        seats[i] = stdin[i]\n    for i in range(k):\n        if seats[i] == 'O':\n            seats[i] = '.'\n    for i in range(k):\n        if seats[i] == '.':\n            seats[i] = 'O'\n    for i in range(k):\n        if seats[i] == 'D':\n            seats[i] = 'O'\n    for i in range(k):\n        if seats[i] == '.':\n            seats[i] = 'D'\n    for i in range(k):\n        if seats[i] == 'O':\n            seats[i] = '#'\n    for i in range(k):\n        if seats[i] == '#':\n            seats[i] = 'O'\n    for i in range(k):\n        if seats[i] == '.':\n            seats[i] = '#'\n    for i in range(k):\n        if seats[i] == '#':\n            seats[i] = '.'\n    return ''.join(seats)"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m, k = map(int, stdin.split())\n    return str(w * m * k)"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if is_lucky(i):\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    return str(x + y - a + b - 2 * (x + y - a - b))"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    return str(len(a))"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] > a[r]:\n            return \"no\"\n        if a[l] == a[r]:\n            l += 1\n            r -= 1\n        else:\n            r -= 1\n    return \"yes\"\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return str(n // m)\n    else:\n        return '-1'"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * (N + 1) // 2)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(int(A <= B <= C <= D))"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, M = map(int, stdin.split())\n    return str(sum(range(A, L*B+1, B)) % M)"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n_1, n_2, n_3, t_1, t_2, t_3 = map(int, stdin.split())\n    return min(k * t_1 + n_1 * t_2 + n_2 * t_3, k * t_2 + n_1 * t_3 + n_2 * t_1, k * t_3 + n_1 * t_2 + n_2 * t_1)"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(m)\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.pop()\n    a.pop()\n    a.sort()\n    return str(sum(a[i + 1] - a[i] for i in range(len(a) - 1)))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        if b[0] < b[1]:\n            return '1 2'\n        else:\n            return '-1'\n    if n == 3:\n        if b[0] < b[1] < b[2]:\n            return '1 2 3'\n        else:\n            return '-1'\n    if n == 4:\n        if b[0] < b[1] < b[2] < b[3]:\n            return '1 2 3 4'\n        else:\n            return '-1'\n    if n == 5:\n        if b[0] < b[1] < b[2] < b[3] < b[4]:\n            return '1 2 3 4 5'\n        else:\n            return '-1'\n    if n == 6:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5]:\n            return '1 2 3 4 5 6'\n        else:\n            return '-1'\n    if n == 7:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6]:\n            return '1 2 3 4 5 6 7'\n        else:\n            return '-1'\n    if n == 8:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7]:\n            return '1 2 3 4 5 6 7 8'\n        else:\n            return '-1'\n    if n == 9:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8]:\n            return '1 2 3 4 5 6 7 8 9'\n        else:\n            return '-1'\n    if n == 10:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9]:\n            return '1 2 3 4 5 6 7 8 9 10'\n        else:\n            return '-1'\n    if n == 11:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10]:\n            return '1 2 3 4 5 6 7 8 9 10 11'\n        else:\n            return '-1'\n    if n == 12:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12'\n        else:\n            return '-1'\n    if n == 13:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13'\n        else:\n            return '-1'\n    if n == 14:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12] < b[13]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n        else:\n            return '-1'\n    if n == 15:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12] < b[13] < b[14]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n        else:\n            return '-1'\n    if n == 16:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12] < b[13] < b[14] < b[15]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n        else:\n            return '-1'\n    if n == 17:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12] < b[13] < b[14] < b[15] < b[16]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n        else:\n            return '-1'\n    if n == 18:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12] < b[13] < b[14] < b[15] < b[16] < b[17]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n        else:\n            return '-1'\n    if n == 19:\n        if b[0] < b[1] < b[2] < b[3] < b[4] < b[5] < b[6] < b[7] < b[8] < b[9] < b[10] < b[11] < b[12] < b[13] < b[14] < b[15] < b[16] < b[17] < b[18]:\n            return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n        else:\n            return '-1'\n    if n == 20:\n        if b[0] < b[1] < b[2] < b[3] < b[4]"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return sum(nums)"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seattle = stdin.count('S')\n    sanfrancisco = stdin.count('F')\n    if seattle > sanfrancisco:\n        return 'NO'\n    elif seattle < sanfrancisco:\n        return 'YES'\n    else:\n        return 'YES' if seattle == sanfrancisco else 'NO'\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k * 2\n    if n == 4:\n        return k * 2 + 1\n    if n == 5:\n        return k * 2 + 1 + k * 2\n    if n == 6:\n        return k * 2 + 1 + k * 2 + k * 2\n    if n == 7:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2\n    if n == 8:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 9:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 10:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 11:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 12:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 13:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 14:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 15:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 16:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 17:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 18:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2\n    if n == 19:\n        return k * 2 + 1 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k * 2 + k"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = int(stdin.split()[1])\n    cars = []\n    for i in range(n):\n        x, y, v = map(int, stdin.split()[2 + i].split())\n        cars.append((x, y, v))\n    cars.sort(key=lambda x: (x[0], x[1]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[0], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[0], x[2]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[2], x[0]))\n    cars.sort(key=lambda x: (x[1], x[0]))\n    cars.sort(key=lambda x: (x[2], x[1]))\n    cars.sort(key=lambda x: (x[1], x[2]))\n    cars.sort(key="
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    candies = []\n    for i in range(n):\n        t, h, m = map(int, stdin.split())\n        candies.append((t, h, m))\n    candies.sort(key=lambda x: (x[0], x[1]))\n    max_candies = 0\n    for i in range(n):\n        if candies[i][0] == 0:\n            max_candies += candies[i][2]\n        else:\n            max_candies += candies[i][2] + candies[i][1]\n        if max_candies > x:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return -1\n    n //= 3\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3!= 0:\n            return -1\n    for i in range(n):\n        if a[i] % 3"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 1\n    while True:\n        if any(s.count(c) >= k for c in set(s)):\n            return str(k)\n        k += 1\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k * 5, n * 8))"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(solution_naive(n, m, a))\n\ndef"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    b = stdin.split()\n    a = list(map(lambda x: x.upper(), a))\n    b = list(map(lambda x: x.upper(), b))\n    if a == b:\n        return \"0\"\n    else:\n        return str(min(len(a), len(b)) * 2)"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return f\"{a/b}/{c/d}\""
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    count = 0\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"1\"\n    if x == 3:\n        return \"1\"\n    if x == 4:\n        return \"1\"\n    if x == 5:\n        return \"1\"\n    if x == 6:\n        return \"1\"\n    if x == 7:\n        return \"1\"\n    if x == 8:\n        return \"1\"\n    if x == 9:\n        return \"1\"\n    if x == 10:\n        return \"1\"\n    if x == 11:\n        return \"1\"\n    if x == 12:\n        return \"1\"\n    if x == 13:\n        return \"1\"\n    if x == 14:\n        return \"1\"\n    if x == 15:\n        return \"1\"\n    if x == 16:\n        return \"1\"\n    if x == 17:\n        return \"1\"\n    if x == 18:\n        return \"1\"\n    if x == 19:\n        return \"1\"\n    if x == 20:\n        return \"1\"\n    if x == 21:\n        return \"1\"\n    if x == 22:\n        return \"1\"\n    if x == 23:\n        return \"1\"\n    if x == 24:\n        return \"1\"\n    if x == 25:\n        return \"1\"\n    if x == 26:\n        return \"1\"\n    if x == 27:\n        return \"1\"\n    if x == 28:\n        return \"1\"\n    if x == 29:\n        return \"1\"\n    if x == 30:\n        return \"1\"\n    if x == 31:\n        return \"1\"\n    if x == 32:\n        return \"1\"\n    if x == 33:\n        return \"1\"\n    if x == 34:\n        return \"1\"\n    if x == 35:\n        return \"1\"\n    if x == 36:\n        return \"1\"\n    if x == 37:\n        return \"1\"\n    if x == 38:\n        return \"1\"\n    if x == 39:\n        return \"1\"\n    if x == 40:\n        return \"1\"\n    if x == 41:\n        return \"1\"\n    if x == 42:\n        return \"1\"\n    if x == 43:\n        return \"1\"\n    if x == 44:\n        return \"1\"\n    if x == 45:\n        return \"1\"\n    if x == 46:\n        return \"1\"\n    if x == 47:\n        return \"1\"\n    if x == 48:\n        return \"1\"\n    if x == 49:\n        return \"1\"\n    if x == 50:\n        return \"1\"\n    if x == 51:\n        return \"1\"\n    if x == 52:\n        return \"1\"\n    if x == 53:\n        return \"1\"\n    if x == 54:\n        return \"1\"\n    if x == 55:\n        return \"1\"\n    if x == 56:\n        return \"1\"\n    if x == 57:\n        return \"1\"\n    if x == 58:\n        return \"1\"\n    if x == 59:\n        return \"1\"\n    if x == 60:\n        return \"1\"\n    if x == 61:\n        return \"1\"\n    if x == 62:\n        return \"1\"\n    if x == 63:\n        return \"1\"\n    if x == 64:\n        return \"1\"\n    if x == 65:\n        return \"1\"\n    if x == 66:\n        return \"1\"\n    if x == 67:\n        return \"1\"\n    if x == 68:\n        return \"1\"\n    if x == 69:\n        return \"1\"\n    if x == 70:\n        return \"1\"\n    if x == 71:\n        return \"1\"\n    if x == 72:\n        return \"1\"\n    if x == 73:\n        return \"1\"\n    if x == 74:\n        return \"1\"\n    if x == 75:\n        return \"1\"\n    if x == 76:\n        return \"1\"\n    if x == 77:\n        return \"1\"\n    if x == 78:\n        return \"1\"\n    if x == 79:\n        return \"1\"\n    if x == 80:\n        return \"1\"\n    if x == 81:\n        return \"1\"\n    if x == 82:\n        return \"1\"\n    if x == 83:\n        return \"1\"\n    if x == 84:\n        return \"1\"\n    if x == 85:\n        return \"1\"\n    if x == 86:\n        return \"1\"\n    if x == 87:\n        return \"1\"\n    if x == 88:\n        return \"1\"\n    if x == 89:\n        return \"1\"\n    if x == 90:\n        return \"1\"\n    if x == 91:\n        return \"1\"\n    if x == 92:\n        return \"1\"\n    if x == 93:\n        return \"1\"\n    if x == 94:\n        return \"1\"\n    if x == 95:\n        return \"1\"\n    if x == 96:\n        return \"1\"\n    if x == 97:\n        return \"1\"\n    if x == 98:\n        return \"1\"\n    if x == 99:\n        return \"1\"\n    if x == 100:\n        return \"1\"\n    if x == 101:\n        return \"1\"\n    if x == 102:\n        return \"1\"\n    if x == 103:\n        return \"1\"\n    if x == 104:\n        return \"1\"\n    if x == 105:\n        return \"1\"\n    if x == 106:\n        return \"1\"\n    if x == 107:\n        return \"1\"\n    if x == 108:\n        return \"1\"\n    if x == 109:\n        return \"1\"\n    if x == 110:\n        return \"1\"\n    if x == 111:\n        return \"1\"\n    if x == 112:\n        return \"1\"\n    if x == 113:\n        return \"1\"\n    if x == 114:\n        return \"1\"\n    if x == 115:\n        return \"1\"\n    if x == 116:\n        return \"1\"\n    if x == 117:\n        return \"1\"\n    if x == 118:\n        return \"1\"\n    if x == 119:\n        return \"1\"\n    if x == 120:\n        return \"1\"\n    if x == 121:\n        return \"1\"\n    if x == 122:\n        return \"1\"\n    if x == 123:\n        return \"1\"\n    if x == 124:\n        return \"1\"\n    if x == 125:\n        return \"1\"\n    if x == 126:\n        return \"1\"\n    if x == 127:\n        return \"1\"\n    if x == 128:\n        return \"1\"\n    if x == 129:\n        return \"1\"\n    if x == 130:\n        return \"1\"\n    if x == 131:\n        return \"1\"\n    if x == 132:\n        return \"1\"\n    if x == 133:\n        return \"1\"\n    if x == 134:\n        return \"1\"\n    if x == 135:\n        return \"1\"\n    if x == 136:\n        return \"1\"\n    "
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n    times.sort()\n    count = 0\n    for i in range(n):\n        if times[i] - times[i - 1] == 1:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == m:\n        return str(n)\n    if n == k:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == 1:\n        return str(n)\n    if m == 1:\n        return str(n)\n    if k == 1:\n        return str(n)\n    if n == k:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str(n)\n    if m == k:\n        return str(n)\n    if n == m:\n        return str("
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    stack = []\n    for i in range(n):\n        if s[i] == 'R':\n            stack.append('B')\n        else:\n            stack.append('R')\n    return str(len(stack))\n\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\n\n'''"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split())\n    H, D, C, N = map(int, stdin.split())\n    if hh == 0 and mm == 0:\n        return str(C * N)\n    if hh == 0 and mm == 1:\n        return str(C * N)\n    if hh == 1 and mm == 0:\n        return str(C * N)\n    if hh == 1 and mm == 1:\n        return str(C * N)\n    if hh == 2 and mm == 0:\n        return str(C * N)\n    if hh == 2 and mm == 1:\n        return str(C * N)\n    if hh == 3 and mm == 0:\n        return str(C * N)\n    if hh == 3 and mm == 1:\n        return str(C * N)\n    if hh == 4 and mm == 0:\n        return str(C * N)\n    if hh == 4 and mm == 1:\n        return str(C * N)\n    if hh == 5 and mm == 0:\n        return str(C * N)\n    if hh == 5 and mm == 1:\n        return str(C * N)\n    if hh == 6 and mm == 0:\n        return str(C * N)\n    if hh == 6 and mm == 1:\n        return str(C * N)\n    if hh == 7 and mm == 0:\n        return str(C * N)\n    if hh == 7 and mm == 1:\n        return str(C * N)\n    if hh == 8 and mm == 0:\n        return str(C * N)\n    if hh == 8 and mm == 1:\n        return str(C * N)\n    if hh == 9 and mm == 0:\n        return str(C * N)\n    if hh == 9 and mm == 1:\n        return str(C * N)\n    if hh == 10 and mm == 0:\n        return str(C * N)\n    if hh == 10 and mm == 1:\n        return str(C * N)\n    if hh == 11 and mm == 0:\n        return str(C * N)\n    if hh == 11 and mm == 1:\n        return str(C * N)\n    if hh == 12 and mm == 0:\n        return str(C * N)\n    if hh == 12 and mm == 1:\n        return str(C * N)\n    if hh == 13 and mm == 0:\n        return str(C * N)\n    if hh == 13 and mm == 1:\n        return str(C * N)\n    if hh == 14 and mm == 0:\n        return str(C * N)\n    if hh == 14 and mm == 1:\n        return str(C * N)\n    if hh == 15 and mm == 0:\n        return str(C * N)\n    if hh == 15 and mm == 1:\n        return str(C * N)\n    if hh == 16 and mm == 0:\n        return str(C * N)\n    if hh == 16 and mm == 1:\n        return str(C * N)\n    if hh == 17 and mm == 0:\n        return str(C * N)\n    if hh == 17 and mm == 1:\n        return str(C * N)\n    if hh == 18 and mm == 0:\n        return str(C * N)\n    if hh == 18 and mm == 1:\n        return str(C * N)\n    if hh == 19 and mm == 0:\n        return str(C * N)\n    if hh == 19 and mm == 1:\n        return str(C * N)\n    if hh == 20 and mm == 0:\n        return str(C * N)\n    if hh == 20 and mm == 1:\n        return str(C * N)\n    if hh == 21 and mm == 0:\n        return str(C * N)\n    if hh == 21 and mm == 1:\n        return str(C * N)\n    if hh == 22 and mm == 0:\n        return str(C * N)\n    if hh == 22 and mm == 1:\n        return str(C * N)\n    if hh == 23 and mm == 0:\n        return str(C * N)\n    if hh == 23 and mm == 1:\n        return str(C * N)\n    if hh == 0 and mm == 0:\n        return str(C * N)\n    if hh == 0 and mm == 1:\n        return str(C * N)\n    if hh == 1 and mm == 0:\n        return str(C * N)\n    if hh == 1 and mm == 1:\n        return str(C * N)\n    if hh == 2 and mm == 0:\n        return str(C * N)\n    if hh == 2 and mm == 1:\n        return str(C * N)\n    if hh == 3 and mm == 0:\n        return str(C * N)\n    if hh == 3 and mm == 1:\n        return str(C * N)\n    if hh == 4 and mm == 0:\n        return str(C * N)\n    if hh == 4 and mm == 1:\n        return str(C * N)\n    if hh == 5 and mm == 0:\n        return str(C * N)\n    if hh == 5 and mm == 1:\n        return str(C * N)\n    if hh == 6 and mm == 0:\n        return str(C * N)\n    if hh == 6 and mm == 1:\n        return str(C * N)\n    if hh == 7 and mm == 0:\n        return str(C * N)\n    if hh == 7 and mm == 1:\n        return str(C * N)\n    if hh == 8 and mm == 0:\n        return str(C * N)\n    if hh == 8 and mm == 1:\n        return str(C * N)\n    if hh == 9 and mm == 0:\n        return str(C * N)\n    if hh == 9 and mm == 1:\n        return str(C * N)\n    if hh == 10 and mm == 0:\n        return str(C * N)\n    if hh == 10 and mm == 1:\n        return str(C * N)\n    if hh == 11 and mm == 0:\n        return str(C * N)\n    if hh == 11 and mm == 1:"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.split()[1])\n    l = 0\n    while l < len(s):\n        if s[l] == s[l + k]:\n            l += k\n        else:\n            break\n    return l\n"
    },
    {
        "number": 761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    slimes = list(map(int, stdin.split()))\n    slimes.sort()\n    max_value = slimes[-1]\n    for i in range(len(slimes) - 1, 0, -1):\n        if slimes[i] == max_value:\n            max_value = max(max_value - slimes[i - 1], 0)\n    return str(max_value)"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    even = 0\n    odd = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == odd:\n        return str(0)\n    if even > odd:\n        even = even - odd\n        odd = 0\n    if even > b:\n        return str(0)\n    if even == 0:\n        return str(1)\n    if even < b:\n        return str(1 + even)\n    if even == b:\n        return str(1 + even + odd)"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    people = list(map(int, stdin.split()))\n    return str(min(people[i] * (i + 1) for i in range(n)))"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    y = stdin\n    count = 0\n    for i in range(1, n):\n        x = y[i:] + y[:i]\n        if x.count('1') == n - i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, S, q = map(int, stdin.split())\n    return str(T - (S - 1) // q)"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, z = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    points.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(points[i] - points[j]) >= z:\n                count += 1\n    return str(count)"
    },
    {
        "number": 768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    friends, items, threshold = map(int, stdin.split())\n    friends_likes = {}\n    for i in range(friends):\n        friends_likes[i] = []\n    for i in range(items):\n        friends_likes[int(stdin.split()[i])].append(i)\n    return str(len([i for i in friends_likes if len(friends_likes[i]) >= threshold]))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if c == 0:\n        return str(a)\n    if a == b:\n        return str(a)\n    if a == c:\n        return str(b)\n    if b == c:\n        return str(a)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(c)\n    if b == 0:\n        return str(c)\n    if a == 0:\n        return str(b)\n    if b == 0:\n        return str(c)\n    if a == 0:"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    letters = stdin.split()\n    read_letters = []\n    for i in range(n):\n        if letters[i] == '1':\n            read_letters.append(i)\n    if len(read_letters) == 0:\n        return '0'\n    else:\n        return str(len(read_letters) + 1)\n\ndef"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    multiset = list(map(int, stdin.split()))\n    multiset.sort()\n    if k > len(multiset):\n        return \"No\"\n    for i in range(len(multiset)):\n        if multiset[i] % m!= 0:\n            return \"No\"\n    for i in range(k):\n        if multiset[i] % m!= 0:\n            return \"No\"\n    for i in range(k, len(multiset)):\n        if multiset[i] % m!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lights = stdin.split()[1:]\n    lights = [int(i) for i in lights]\n    lights = [[lights[i],lights[i+1],lights[i+2]] for i in range(0,len(lights),3)]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i][1],lights[i][2]] for i in range(len(lights))]\n    lights = [[lights[i][0],lights[i]["
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    cost = 0\n    for i in range(q):\n        t, l, r, v = map(int, stdin.split())\n        if t == 1:\n            cost += sum(arr[l - 1:r]) ** 2\n        else:\n            cost += sum(arr[l - 1:r]) ** 2 + (arr[l - 1] - v) ** 2 + (arr[r - 1] - v) ** 2\n    return str(cost)"
    },
    {
        "number": 774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    a = 1\n    b = n\n    while a < b:\n        c = (a + b) // 2\n        if c * y > x:\n            b = c\n        else:\n            a = c + 1\n    return str(a) + '/' + str(b)"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    holes = list(map(int, stdin.split()))\n    cups = list(range(1, n + 1))\n    for _ in range(k):\n        u, v = map(int, stdin.split())\n        cups[u - 1], cups[v - 1] = cups[v - 1], cups[u - 1]\n    return str(cups[0])"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    mouses = list(map(int, stdin.split()))\n    mouses.sort()\n    print(mouses)\n    print(mouses[0], mouses[1], mouses[2])\n    return str(mouses[0] + mouses[1] + mouses[2])"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    blocks = list(range(1, 2 * n + 1))\n    signs = {'=': lambda x: x == x,\n             '>': lambda x: x > x,\n             '<': lambda x: x < x,\n             '<=': lambda x: x <= x,\n             '>=': lambda x: x >= x}\n    for _ in range(k):\n        block_1, block_2 = map(int, stdin.split())\n        blocks.remove(block_1)\n        blocks.remove(block_2)\n        blocks.sort(key=lambda x: signs[stdin.split()[1 + 2 * block_1 - block_2]](x))\n    return str(len(blocks))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    return -1"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split(\"\\n\")\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        board["
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return -1\n    s = set()\n    for i in range(1, n + 1):\n        s.add(i)\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if j % i == 0:\n                s.discard(j)\n    if len(s) == 0:\n        return -1\n    return str(len(s)) +'' +''.join(map(str, sorted(s)))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    result = []\n    for i in range(1, n + 1):\n        if houses[i - 1] > houses[i]:\n            result.append(houses[i - 1] - houses[i])\n        else:\n            result.append(0)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"NO\"\n    if a < b:\n        return \"NO\"\n    if a > b:\n        return \"YES\"\n    if a % 2 == 0:\n        return \"NO\"\n    if a % 2 == 1:\n        return \"YES\"\n    if a % 3 == 0:\n        return \"NO\"\n    if a % 3 == 1:\n        return \"YES\"\n    if a % 5 == 0:\n        return \"NO\"\n    if a % 5 == 1:\n        return \"YES\"\n    if a % 7 == 0:\n        return \"NO\"\n    if a % 7 == 1:\n        return \"YES\"\n    if a % 11 == 0:\n        return \"NO\"\n    if a % 11 == 1:\n        return \"YES\"\n    if a % 13 == 0:\n        return \"NO\"\n    if a % 13 == 1:\n        return \"YES\"\n    if a % 17 == 0:\n        return \"NO\"\n    if a % 17 == 1:\n        return \"YES\"\n    if a % 19 == 0:\n        return \"NO\"\n    if a % 19 == 1:\n        return \"YES\"\n    if a % 23 == 0:\n        return \"NO\"\n    if a % 23 == 1:\n        return \"YES\"\n    if a % 29 == 0:\n        return \"NO\"\n    if a % 29 == 1:\n        return \"YES\"\n    if a % 31 == 0:\n        return \"NO\"\n    if a % 31 == 1:\n        return \"YES\"\n    if a % 37 == 0:\n        return \"NO\"\n    if a % 37 == 1:\n        return \"YES\"\n    if a % 41 == 0:\n        return \"NO\"\n    if a % 41 == 1:\n        return \"YES\"\n    if a % 43 == 0:\n        return \"NO\"\n    if a % 43 == 1:\n        return \"YES\"\n    if a % 47 == 0:\n        return \"NO\"\n    if a % 47 == 1:\n        return \"YES\"\n    if a % 53 == 0:\n        return \"NO\"\n    if a % 53 == 1:\n        return \"YES\"\n    if a % 59 == 0:\n        return \"NO\"\n    if a % 59 == 1:\n        return \"YES\"\n    if a % 61 == 0:\n        return \"NO\"\n    if a % 61 == 1:\n        return \"YES\"\n    if a % 67 == 0:\n        return \"NO\"\n    if a % 67 == 1:\n        return \"YES\"\n    if a % 71 == 0:\n        return \"NO\"\n    if a % 71 == 1:\n        return \"YES\"\n    if a % 73 == 0:\n        return \"NO\"\n    if a % 73 == 1:\n        return \"YES\"\n    if a % 79 == 0:\n        return \"NO\"\n    if a % 79 == 1:\n        return \"YES\"\n    if a % 83 == 0:\n        return \"NO\"\n    if a % 83 == 1:\n        return \"YES\"\n    if a % 89 == 0:\n        return \"NO\"\n    if a % 89 == 1:\n        return \"YES\"\n    if a % 97 == 0:\n        return \"NO\"\n    if a % 97 == 1:\n        return \"YES\"\n    if a % 101 == 0:\n        return \"NO\"\n    if a % 101 == 1:\n        return \"YES\"\n    if a % 103 == 0:\n        return \"NO\"\n    if a % 103 == 1:\n        return \"YES\"\n    if a % 107 == 0:\n        return \"NO\"\n    if a % 107 == 1:\n        return \"YES\"\n    if a % 109 == 0:\n        return \"NO\"\n    if a % 109 == 1:\n        return \"YES\"\n    if a % 113 == 0:\n        return \"NO\"\n    if a % 113 == 1:\n        return \"YES\"\n    if a % 127 == 0:\n        return \"NO\"\n    if a % 127 == 1:\n        return \"YES\"\n    if a % 131 == 0:\n        return \"NO\"\n    if a % 131 == 1:\n        return \"YES\"\n    if a % 137 == 0:\n        return \"NO\"\n    if a % 137 == 1:\n        return \"YES\"\n    if a % 139 == 0:\n        return \"NO\"\n    if a % 139 == 1:\n        return \"YES\"\n    if a % 149 == 0:\n        return \"NO\"\n    if a % 149 == 1:\n        return \"YES\"\n    if a % 151 == 0:\n        return \"NO\"\n    if a % 151 == 1:\n        return \"YES\"\n    if a % 157 == 0:\n        return \"NO\"\n    if a % 157 == 1:\n        return \"YES\"\n    if a % 163 == 0:\n        return \"NO\"\n    if a % 163 == 1:\n        return \"YES\"\n    if a % 167 == 0:\n        return \"NO\"\n    if a % 167 == 1:\n        return \"YES\"\n    if a % 173 == 0:\n        return \"NO\"\n    if a % 173 == 1:\n        return \"YES\"\n    if a % 179 == 0:\n        return \"NO\"\n    if a % 179 == 1:\n        return \"YES\"\n    if a % 181 == 0:\n        return \"NO\"\n    if a % 181 == 1:\n        return \"YES\"\n    if a % 191 == 0:\n        return \"NO\"\n    if a % 191 == 1:\n        return \"YES\"\n    if a % 193 == 0:\n        return \"NO\"\n    if a % 193 == 1:\n        return \"YES\"\n    if a % 197 == 0:\n        return \"NO\"\n    if a % 197 == 1:\n        return \"YES\"\n    if a % 199 == 0:\n        return \"NO\"\n    if a % 199 == 1:\n        return \"YES\"\n    if a % 211 == 0:\n        return \"NO\"\n    if a % 211 == 1:\n        return \"YES\"\n    if a % 223 == 0:\n        return \"NO\"\n    if a % 223 == 1:\n        return \"YES\"\n    if a % 227 == 0:\n        return \"NO\"\n    if a % 227 == 1:\n        return \"YES\"\n    if a % 229 == 0:\n        return \"NO\"\n    if a % 229 == 1:\n        return \"YES\"\n    if a % 233 == 0:\n        return \"NO\"\n    if a % 233 == 1:\n        return \"YES\"\n    if a % 239 == 0:\n        return \"NO\"\n    if a % 239 == 1:\n        return \"YES\"\n    if a % 241 == 0:\n        return \"NO\"\n    if a % 241 == 1:\n        return \"YES\""
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a * b < n:\n        return f\"{a * b} {a} {b}\"\n    if a * b == n:\n        return f\"{a * b} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a} {b}\"\n    if a * b > n:\n        return f\"{n} {a} {b}\"\n    if a * b == n:\n        return f\"{n} {a"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Infinity\"\n    if n == 2:\n        return \"Impossible\"\n    res = 0\n    for i in range(n):\n        c, d = map(int, stdin.split())\n        if c > 0:\n            res += c\n        if d == 1:\n            res -= c\n    return str(res)"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    q = stdin.split()[1]\n    if k == 1:\n        if q[0]!= q[1]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        for i in range(1, k):\n            if q[i]!= q[i-1] and q[i]!= q[i+1]:\n                return \"NO\"\n        return \"YES\""
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lucky_numbers = [4, 7]\n    lucky_numbers.sort()\n    for i in range(len(lucky_numbers)):\n        if n == lucky_numbers[i]:\n            return str(i + 1)\n    return \"0\""
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    return str(max(sum(A[i] - D[i] for i in range(N)) - K, 0))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cell = stdin\n    for i in range(n):\n        cell = cell[1:] + cell[0]\n    return cell"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > 0:\n        return '-1'\n    if a[-1] < 0:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1'\n    if a[-1] < d:\n        return '-1'\n    if a[0] == 0:\n        return '0'\n    if a[-1] == 0:\n        return '0'\n    if a[0] > d:\n        return '-1"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    s.sort()\n    t.sort()\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                count += 1\n    return str(count % 1000000007)"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2!= 0:\n        return '-1'\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            c = n - a - b\n            if a**2 + b**2 == c**2:\n                count += 1\n    return str(count)"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return str(1)\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == 2 and k == 2:\n        return str(1)\n    if n == 2 and k == 3:\n        return str(2)\n    if n == 2 and k == 4:\n        return str(3)\n    if n == 2 and k == 5:\n        return str(4)\n    if n == 2 and k == 6:\n        return str(5)\n    if n == 2 and k == 7:\n        return str(6)\n    if n == 2 and k == 8:\n        return str(7)\n    if n == 2 and k == 9:\n        return str(8)\n    if n == 2 and k == 10:\n        return str(9)\n    if n == 3 and k == 2:\n        return str(1)\n    if n == 3 and k == 3:\n        return str(2)\n    if n == 3 and k == 4:\n        return str(3)\n    if n == 3 and k == 5:\n        return str(4)\n    if n == 3 and k == 6:\n        return str(5)\n    if n == 3 and k == 7:\n        return str(6)\n    if n == 3 and k == 8:\n        return str(7)\n    if n == 3 and k == 9:\n        return str(8)\n    if n == 3 and k == 10:\n        return str(9)\n    if n == 4 and k == 2:\n        return str(1)\n    if n == 4 and k == 3:\n        return str(2)\n    if n == 4 and k == 4:\n        return str(3)\n    if n == 4 and k == 5:\n        return str(4)\n    if n == 4 and k == 6:\n        return str(5)\n    if n == 4 and k == 7:\n        return str(6)\n    if n == 4 and k == 8:\n        return str(7)\n    if n == 4 and k == 9:\n        return str(8)\n    if n == 4 and k == 10:\n        return str(9)\n    if n == 5 and k == 2:\n        return str(1)\n    if n == 5 and k == 3:\n        return str(2)\n    if n == 5 and k == 4:\n        return str(3)\n    if n == 5 and k == 5:\n        return str(4)\n    if n == 5 and k == 6:\n        return str(5)\n    if n == 5 and k == 7:\n        return str(6)\n    if n == 5 and k == 8:\n        return str(7)\n    if n == 5 and k == 9:\n        return str(8)\n    if n == 5 and k == 10:\n        return str(9)\n    if n == 6 and k == 2:\n        return str(1)\n    if n == 6 and k == 3:\n        return str(2)\n    if n == 6 and k == 4:\n        return str(3)\n    if n == 6 and k == 5:\n        return str(4)\n    if n == 6 and k == 6:\n        return str(5)\n    if n == 6 and k == 7:\n        return str(6)\n    if n == 6 and k == 8:\n        return str(7)\n    if n == 6 and k == 9:\n        return str(8)\n    if n == 6 and k == 10:\n        return str(9)\n    if n == 7 and k == 2:\n        return str(1)\n    if n == 7 and k == 3:\n        return str(2)\n    if n == 7 and k == 4:\n        return str(3)\n    if n == 7 and k == 5:\n        return str(4)\n    if n == 7 and k == 6:\n        return str(5)\n    if n == 7 and k == 7:\n        return str(6)\n    if n == 7 and k == 8:\n        return str(7)\n    if n == 7 and k == 9:\n        return str(8)\n    if n == 7 and k == 10:\n        return str(9)\n    if n == 8 and k == 2:\n        return str(1)\n    if n == 8 and k == 3:\n        return str(2)\n    if n == 8 and k == 4:\n        return str(3)\n    if n == 8 and k == 5:\n        return str(4)\n    if n == 8 and k == 6:\n        return str(5)\n    if n == 8 and k == 7:\n        return str(6)\n    if n == 8 and k == 8:\n        return str(7)\n    if n == 8 and k == 9:\n        return str(8)\n    if n == 8 and k == 10:\n        return str(9)\n    if n == 9 and k == 2:\n        return str(1)\n    if n == 9 and k == 3:\n        return str(2)\n    if n == 9 and k == 4:\n        return str(3)\n    if n == 9 and k == 5:\n        return str(4)\n    if n == 9 and k == 6:\n        return str(5)\n    if n == 9 and k == 7:\n        return str(6)\n    if n == 9 and k == 8:\n        return str(7)\n    if n == 9 and k == 9:\n        return str(8)\n    if n == 9 and k == 10:\n        return str(9)\n    if n == 10 and k == 2:\n        return str(1)\n    if n == 10 and k == 3:\n        return str(2)\n    if n == 10 and k == 4:\n        return str(3)\n    if n == 10 and k == 5:\n        return str(4)\n    if n == 10 and k == 6:\n        return str(5)\n    if n == 10 and k == 7:\n        return str(6)\n    if n == 10 and k == 8:\n        return str(7)\n    if n == 10 and k == 9:\n        return str(8)\n    if n == 10 and k == 10:\n        return str(9)\n    return str(0)"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    g = list(map(int, stdin.split()))\n    g = g[:n * m]\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007, g))\n    g = list(map(lambda x: x % 1000000007"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 2 * (a + b + c):\n        return f\"{a} {b} {c}\"\n    return \"Impossible\""
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n    return str(s)"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(stdin.split()[i * 2]))\n        y.append(int(stdin.split()[i * 2 + 1]))\n    x.sort()\n    y.sort()\n    min_angle = 0\n    for i in range(n):\n        min_angle += math.atan2(y[i] - y[i - 1], x[i] - x[i - 1])\n    return str(round(min_angle / math.pi * 180, 6))"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    mex = 0\n    for i in range(n):\n        for j in range(i, n):\n            mex = max(mex, max(a[i:j+1]))\n    return str(mex)"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    flat_types = stdin.split()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.upper(), flat_types))\n    flat_types = list(set(flat_types))\n    flat_types.sort()\n    flat_types = list(map(lambda x: x.lower(), flat_types))\n    flat"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hamsters = stdin.split()[1]\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'X')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.split()[1])\n    if k < 1 or k > 26:\n        return \"impossible\"\n    if len(s) == 1:\n        return 0\n    if len(s) == k:\n        return 1\n    if len(s) < k:\n        return \"impossible\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 0\n        if count == k:\n            return 1\n    return \"impossible\"\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x["
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(1)\n    if n == 6:\n        return str(1)\n    if n == 7:\n        return str(1)\n    if n == 8:\n        return str(1)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(1)\n    if n == 11:\n        return str(1)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(1)\n    if n == 14:\n        return str(1)\n    if n == 15:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(1)\n    if n == 19:\n        return str(1)\n    if n == 20:\n        return str(1)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(1)\n    if n == 24:\n        return str(1)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(1)\n    if n == 30:\n        return str(1)\n    if n == 31:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(1)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(1)\n    if n == 37:\n        return str(1)\n    if n == 38:\n        return str(1)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(1)\n    if n == 41:\n        return str(1)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(1)\n    if n == 45:\n        return str(1)\n    if n == 46:\n        return str(1)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(1)\n    if n == 51:\n        return str(1)\n    if n == 52:\n        return str(1)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(1)\n    if n == 55:\n        return str(1)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(1)\n    if n == 59:\n        return str(1)\n    if n == 60:\n        return str(1)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(1)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(1)\n    if n == 69:\n        return str(1)\n    if n == 70:\n        return str(1)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(1)\n    if n == 78:\n        return str(1)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(1)\n    if n == 81:\n        return str(1)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(1)\n    if n == 89:\n        return str(1)\n    if n == 90:\n        return str(1)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str(1)\n    if n == 99:\n        return str(1)\n    if n == 100:\n        return str(1)\n    if n == 101:\n        return str(1)\n    if n == 102:\n        return str(1)\n    if n == 103:\n        return str(1)\n    if n == 104:\n        return str(1)\n    if n == 105:\n        return str(1)\n    if n == 106:\n        return str(1)\n    if n == 107:\n        return str(1)\n    if n == 108:\n        return str(1)\n    if n == 109:\n        return str(1)\n    if n == 110:\n        return str(1)\n    if n == 111:\n        return str(1)\n    if n == 112:\n        return str(1)\n    if n == 113:\n        return str(1)\n    if n == 114:\n        return str(1)\n    if n == 115:\n        return str(1)\n    if n == 116:\n        return str(1)\n    if n == 117:\n        return str(1)\n    if n == 118:\n        return str(1)\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    profit = 0\n    for i in range(n):\n        if i == 0:\n            profit += x[i] * c\n        else:\n            profit += x[i] * (c - x[i - 1])\n    return profit"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x == 0:\n        return \"0E0\"\n    if x < 0:\n        return \"-\" + solution(str(-x))\n    if x < 10:\n        return str(x) + \"E0\"\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int(math.log10(x)))\n    if x < 1:\n        return \"0E\" + str(int(math.log10(x)))\n    if x < 10:\n        return str(x) + \"E\" + str(int("
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    if a + b!= n:\n        return \"NO\"\n    if a == 0 and b == 0:\n        return \"GBGBGB\"\n    if a == 0 and b == 1:\n        return \"BBGBGBB\"\n    if a == 1 and b == 0:\n        return \"GBGBGB\"\n    if a == 1 and b == 1:\n        return \"BBGBGB\"\n    if a == b:\n        return \"GBGBGB\"\n    if a == b + 1:\n        return \"BBGBGB\"\n    if a == b - 1:\n        return \"GBGBGB\"\n    if a == b - 2:\n        return \"BBGBGB\"\n    if a == b - 3:\n        return \"GBGBGB\"\n    if a == b - 4:\n        return \"BBGBGB\"\n    if a == b - 5:\n        return \"GBGBGB\"\n    if a == b - 6:\n        return \"BBGBGB\"\n    if a == b - 7:\n        return \"GBGBGB\"\n    if a == b - 8:\n        return \"BBGBGB\"\n    if a == b - 9:\n        return \"GBGBGB\"\n    if a == b - 10:\n        return \"BBGBGB\"\n    if a == b - 11:\n        return \"GBGBGB\"\n    if a == b - 12:\n        return \"BBGBGB\"\n    if a == b - 13:\n        return \"GBGBGB\"\n    if a == b - 14:\n        return \"BBGBGB\"\n    if a == b - 15:\n        return \"GBGBGB\"\n    if a == b - 16:\n        return \"BBGBGB\"\n    if a == b - 17:\n        return \"GBGBGB\"\n    if a == b - 18:\n        return \"BBGBGB\"\n    if a == b - 19:\n        return \"GBGBGB\"\n    if a == b - 20:\n        return \"BBGBGB\"\n    if a == b - 21:\n        return \"GBGBGB\"\n    if a == b - 22:\n        return \"BBGBGB\"\n    if a == b - 23:\n        return \"GBGBGB\"\n    if a == b - 24:\n        return \"BBGBGB\"\n    if a == b - 25:\n        return \"GBGBGB\"\n    if a == b - 26:\n        return \"BBGBGB\"\n    if a == b - 27:\n        return \"GBGBGB\"\n    if a == b - 28:\n        return \"BBGBGB\"\n    if a == b - 29:\n        return \"GBGBGB\"\n    if a == b - 30:\n        return \"BBGBGB\"\n    if a == b - 31:\n        return \"GBGBGB\"\n    if a == b - 32:\n        return \"BBGBGB\"\n    if a == b - 33:\n        return \"GBGBGB\"\n    if a == b - 34:\n        return \"BBGBGB\"\n    if a == b - 35:\n        return \"GBGBGB\"\n    if a == b - 36:\n        return \"BBGBGB\"\n    if a == b - 37:\n        return \"GBGBGB\"\n    if a == b - 38:\n        return \"BBGBGB\"\n    if a == b - 39:\n        return \"GBGBGB\"\n    if a == b - 40:\n        return \"BBGBGB\"\n    if a == b - 41:\n        return \"GBGBGB\"\n    if a == b - 42:\n        return \"BBGBGB\"\n    if a == b - 43:\n        return \"GBGBGB\"\n    if a == b - 44:\n        return \"BBGBGB\"\n    if a == b - 45:\n        return \"GBGBGB\"\n    if a == b - 46:\n        return \"BBGBGB\"\n    if a == b - 47:\n        return \"GBGBGB\"\n    if a == b - 48:\n        return \"BBGBGB\"\n    if a == b - 49:\n        return \"GBGBGB\"\n    if a == b - 50:\n        return \"BBGBGB\"\n    if a == b - 51:\n        return \"GBGBGB\"\n    if a == b - 52:\n        return \"BBGBGB\"\n    if a == b - 53:\n        return \"GBGBGB\"\n    if a == b - 54:\n        return \"BBGBGB\"\n    if a == b - 55:\n        return \"GBGBGB\"\n    if a == b - 56:\n        return \"BBGBGB\"\n    if a == b - 57:\n        return \"GBGBGB\"\n    if a == b - 58:\n        return \"BBGBGB\"\n    if a == b - 59:\n        return \"GBGBGB\"\n    if a == b - 60:\n        return \"BBGBGB\"\n    if a == b - 61:\n        return \"GBGBGB\"\n    if a == b - 62:\n        return \"BBGBGB\"\n    if a == b - 63:\n        return \"GBGBGB\"\n    if a == b - 64:\n        return \"BBGBGB\"\n    if a == b - 65:\n        return \"GBGBGB\"\n    if a == b - 66:\n        return \"BBGBGB\"\n    if a == b - 67:\n        return \"GBGBGB\"\n    if a == b - 68:\n        return \"BBGBGB\"\n    if a == b - 69:\n        return \"GBGBGB\"\n    if a == b - 70:\n        return \"BBGBGB\"\n    if a == b - 71:\n        return \"GBGBGB\"\n    if a == b - 72:\n        return \"BBGBGB\"\n    if a == b - 73:\n        return \"GBGBGB\"\n    if a == b - 74:\n        return \"BBGBGB\"\n    if a == b - 75:\n        return \"GBGBGB\"\n    if a == b - 76:\n        return \"BBGBGB\"\n    if a == b - 77:\n        return \"GBGBGB\"\n    if a == b - 78:\n        return \"BBGBGB\"\n    if a == b - 79:\n        return \"GBGBGB\"\n    if a == b - 80:\n        return \"BBGBGB\"\n    if a == b - 81:\n        return \"GBGBGB\"\n    if a == b - 82:\n        return \"BBGBGB\"\n    if a == b - 83:\n        return \"GBGBGB\"\n    if a == b - 84:\n        return \"BBGBGB\"\n    if a == b - 85:\n        return \"GBGBGB\"\n    if a == b - 86:\n        return \"BBGBGB\"\n    if a == b - 87:\n        return \"GBGBGB\"\n    if a == b - 88:\n        return \"BBGBGB\"\n    if a == b - 89:\n        return \"GBGBGB\"\n    if a == b - 90:\n        return \"BB"
    },
    {
        "number": 810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    return str(sum(int(str(i)[:n]) for i in range(1, 10**n + 1) if str(i)[:n] == str(i)[-n:]))"
    },
    {
        "number": 811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    for i in range(n):\n        if b[i] == b[i+1]:\n            return str(i+1)\n    return \"-1\""
    },
    {
        "number": 813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a_likes = list(map(int, stdin.split()[1]))\n    b_likes = list(map(int, stdin.split()[2]))\n    a_likes.sort()\n    b_likes.sort()\n    a_likes = set(a_likes)\n    b_likes = set(b_likes)\n    a_likes = list(a_likes)\n    b_likes = list(b_likes)\n    a_likes.sort()\n    b_likes.sort()\n    a_likes = ''.join(map(str, a_likes))\n    b_likes = ''.join(map(str, b_likes))\n    print(a_likes, b_likes)\n    return a_likes, b_likes\n"
    },
    {
        "number": 814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cubes = list(map(int, stdin.split()))\n    for i in range(n):\n        if i == 0:\n            cubes[i] = cubes[i]\n        else:\n            cubes[i] = cubes[i] + cubes[i-1]\n    return''.join(map(str, cubes))"
    },
    {
        "number": 815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V_1, V_2, V_3, V_m = map(int, stdin.split())\n    if V_1 > V_2 > V_3:\n        if V_1 > V_m:\n            return str(V_1)\n        elif V_2 > V_m:\n            return str(V_2)\n        elif V_3 > V_m:\n            return str(V_3)\n    return \"-1\""
    },
    {
        "number": 816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == x:\n                count += 1\n    return str(count)"
    },
    {
        "number": 817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        s = s.replace(s[0], '')\n        if len(s) == 0:\n            break\n    return s"
    },
    {
        "number": 818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 5:\n        return \"5\"\n    if n == 7:\n        return \"7\"\n    if n == 10:\n        return \"10\"\n    if n == 20:\n        return \"20\"\n    if n == 30:\n        return \"30\"\n    if n == 40:\n        return \"40\"\n    if n == 50:\n        return \"50\"\n    if n == 60:\n        return \"60\"\n    if n == 70:\n        return \"70\"\n    if n == 80:\n        return \"80\"\n    if n == 90:\n        return \"90\"\n    if n == 100:\n        return \"100\"\n    if n == 200:\n        return \"200\"\n    if n == 300:\n        return \"300\"\n    if n == 400:\n        return \"400\"\n    if n == 500:\n        return \"500\"\n    if n == 600:\n        return \"600\"\n    if n == 700:\n        return \"700\"\n    if n == 800:\n        return \"800\"\n    if n == 900:\n        return \"900\"\n    if n == 1000:\n        return \"1000\"\n    if n == 2000:\n        return \"2000\"\n    if n == 3000:\n        return \"3000\"\n    if n == 4000:\n        return \"4000\"\n    if n == 5000:\n        return \"5000\"\n    if n == 6000:\n        return \"6000\"\n    if n == 7000:\n        return \"7000\"\n    if n == 8000:\n        return \"8000\"\n    if n == 9000:\n        return \"9000\"\n    if n == 10000:\n        return \"10000\"\n    if n == 20000:\n        return \"20000\"\n    if n == 30000:\n        return \"30000\"\n    if n == 40000:\n        return \"40000\"\n    if n == 50000:\n        return \"50000\"\n    if n == 60000:\n        return \"60000\"\n    if n == 70000:\n        return \"70000\"\n    if n == 80000:\n        return \"80000\"\n    if n == 90000:\n        return \"90000\"\n    if n == 100000:\n        return \"100000\"\n    if n == 200000:\n        return \"200000\"\n    if n == 300000:\n        return \"300000\"\n    if n == 400000:\n        return \"400000\"\n    if n == 500000:\n        return \"500000\"\n    if n == 600000:\n        return \"600000\"\n    if n == 700000:\n        return \"700000\"\n    if n == 800000:\n        return \"800000\"\n    if n == 900000:\n        return \"900000\"\n    if n == 1000000:\n        return \"1000000\"\n    if n == 2000000:\n        return \"2000000\"\n    if n == 3000000:\n        return \"3000000\"\n    if n == 4000000:\n        return \"4000000\"\n    if n == 5000000:\n        return \"5000000\"\n    if n == 6000000:\n        return \"6000000\"\n    if n == 7000000:\n        return \"7000000\"\n    if n == 8000000:\n        return \"8000000\"\n    if n == 9000000:\n        return \"9000000\"\n    if n == 10000000:\n        return \"10000000\"\n    if n == 20000000:\n        return \"20000000\"\n    if n == 30000000:\n        return \"30000000\"\n    if n == 40000000:\n        return \"40000000\"\n    if n == 50000000:\n        return \"50000000\"\n    if n == 60000000:\n        return \"60000000\"\n    if n == 70000000:\n        return \"70000000\"\n    if n == 80000000:\n        return \"80000000\"\n    if n == 90000000:\n        return \"90000000\"\n    if n == 1000000000:\n        return \"100000000\"\n    if n == 2000000000:\n        return \"2000000000\"\n    if n == 300000000:\n        return \"300000000\"\n    if n == 400000000:\n        return \"400000000\"\n    if n == 500000000:\n        return \"500000000\"\n    if n == 600000000:\n        return \"600000000\"\n    if n == 700000000:\n        return \"700000000\"\n    if n == 800000000:\n        return \"800000000\"\n    if n == 900000000:\n        return \"900000000\"\n    if n == 10000000000:\n        return \"10000000000000000\"\n    if n == 20000000000:\n        return \"2000000000000000000\"\n    if n == 3000000000:\n        return \"3000000000\"\n    if n == 4000000000:\n        return \"4000000000\"\n    if n == 5000000000:\n        return \"5000000000\"\n    if n == 6000000000:\n        return \"6000000000\"\n    if n == 7000000000:\n        return \"7000000000\"\n    if n == 8000000000:\n        return \"8000000000\"\n    if n == 9000000000:\n        return \"9000000000\"\n    if n == 100000000000:\n        return \"1000000000000\"\n    if n == 200000000000:\n        return \"2000000000000\"\n    if n == 3000000000000:\n        return \"3000000000000\"\n    if n == 4000000000000:\n        return \"4000000000000\"\n    if n == 5000000000000:\n        return \"5000000000000\"\n    if n == 6000000000000:\n        return \"6000000000000\"\n    if n == 7000000000000:\n        return \"7000000000000\"\n    if n == 8000000000000:\n        return \"8000000000000\"\n    if n == 9000000000000:\n        return \"9000000000000\"\n    if n == 1000000000000:\n        return \"1000000000000000000\"\n    if n == 2000000000000:\n        return \"200000000000000000000\"\n    if n == 30000000000000:\n        return \"30000000000000\"\n    if n == 40000000000000:\n        return \"40000000000000\"\n    if n == 50000000000000:\n        return \"50000000000000\"\n    if n == 60000000000000:\n        return \"60000000000000\"\n    if n == 70000000000000:\n        return \"70000000000000\"\n    if n == 80000000000000:\n        return \"80000000000000\"\n    if n == 90000000000000:\n        return \"90000000000000\"\n    if n == 10000000000000:\n        return \"1000000000000000000000\"\n    if n == 20000000000000:\n        return \"200000000000000000000000\"\n    if n == 300000000000000:\n        return \"300000000000000\"\n    if n == 400000000000000:\n        return \"400000000000000\"\n    if n == 500000000000000:\n        return \"500000000000000\"\n    if n == 600000000000000:\n        return \"600000000000000\"\n    if n == 700000000000000:\n        return \"700000000000000\"\n    if n == 800000000000000:\n        return \"800000000000000\"\n    if n == 900000000000000:\n        return \"900000000000000\"\n    if n == 1000000000000000:\n        return \"1000000000000000000000\"\n    if n == 2000000000000000:\n        return \"200000000000000000000000\"\n    if n == 3000000000000000:\n        return \"3000000000000000\"\n    if n == 4000000000000000:\n        return \"4000000000000000\"\n    if n == 5000000000000000:\n        return \"5000000000000000\"\n    if n == 6000000000000000:\n        return \"6000000000000000\"\n    if n == 7000000000000000:\n        return \"7"
    },
    {
        "number": 819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(min(a[i], a[i + 1]) for i in range(n - 1)))\n"
    },
    {
        "number": 820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    if m > sum(a):\n        return '-1'\n    if m == sum(a):\n        return str(n)\n    if m < sum(a):\n        return str(n - 1)\n    return str(n)"
    },
    {
        "number": 821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2, t_1, t_2 = map(int, stdin.split())\n    if t_1 > t_2:\n        return \"Second\"\n    elif t_1 < t_2:\n        return \"First\"\n    else:\n        return \"Friendship\""
    },
    {
        "number": 822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, z = map(int, stdin.split())\n    return str(min(n, m, z) - 1)"
    },
    {
        "number": 823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y)"
    },
    {
        "number": 824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n"
    },
    {
        "number": 825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    z = 2\n    while N > 1:\n        if N % z == 0:\n            N = N // z\n        else:\n            z += 1\n    return str(z)"
    },
    {
        "number": 826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n, 3) * 1)"
    },
    {
        "number": 827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    T = \"1011\"\n    count = 0\n    for i in range(N):\n        if S[i:i+len(T)] == T:\n            count += 1\n    return str(count)"
    },
    {
        "number": 828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    workers = list(map(int, stdin.split()))\n    workers.sort()\n    count = 0\n    for i in range(n):\n        if workers[i] == s:\n            count += 1\n        else:\n            count += 1\n            if workers[i] > s:\n                count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    good = 0\n    for i in range(1, n):\n        good += 1\n        if good == i:\n            good = 0\n        if good == 0:\n            good = i\n    if good == 0:\n        good = 1\n    return str(good) + \" \" + \" \".join(s.split(\"0\")[:good])"
    },
    {
        "number": 830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                continue\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n            s += abs(a[i] - a[j])\n            m += 1\n    return str(s) + \" \" + str(m)"
    },
    {
        "number": 831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n = int(stdin.strip())\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'"
    },
    {
        "number": 832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    else:\n        return str(n * (n - 1) // 2)"
    },
    {
        "number": 833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    trees = list(map(int, stdin.split()))\n    trees.sort()\n    res = 0\n    for i in range(n):\n        if trees[i] > trees[i+1]:\n            res += (trees[i] - trees[i+1]) * v\n        else:\n            res += (trees[i+1] - trees[i]) * v\n    return str(res)"
    },
    {
        "number": 834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = list(map(int, stdin.split()))\n    k = 1\n    while True:\n        if all(f[i] == f[i + k] for i in range(n - k)):\n            return str(k)\n        k += 1"
    },
    {
        "number": 835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_b, n_s, n_c, p_b, p_s, p_c, r = map(int, stdin.split())\n    return str(max(n_b * n_s * n_c, r * p_b * p_s * p_c))\n"
    },
    {
        "number": 836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    houses = stdin.count(\"H\")\n    shops = stdin.count(\"S\")\n    if houses < t:\n        return \"0\"\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t:\n        return str(houses)\n    if houses < t:\n        return str(houses)\n    if houses == t:\n        return str(houses)\n    if houses > t:\n        return str(houses - t)\n    if houses == t"
    },
    {
        "number": 837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    return str(min(x, y) + n * min(x, y) + n * min(x, y))"
    },
    {
        "number": 838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(sum([1 for row in table for cell in row if cell == 1]))\n"
    },
    {
        "number": 839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    g = list(map(int, stdin.split()[1:]))\n    g.sort(reverse=True)\n    h = 0\n    for i in range(n):\n        h += g[i]\n    return str(h)"
    },
    {
        "number": 840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n):\n        a_sum += a[i]\n        b_sum += b[i]\n    if a_sum < b_sum:\n        return \"0\"\n    else:\n        return str(a_sum - b_sum)\n"
    },
    {
        "number": 841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        s = []\n        for j in range(1, n + 1):\n            s.append(str(j))\n        s = ''.join(s)\n        s = s.replace('3', '1337')\n        s = s.replace('7', '1337')\n        s = s.replace('1', '3')\n        s = s.replace('3', '1')\n        s = s.replace('7', '3')\n        s = s.replace('3', '7')\n        print(s)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            print(i)\n            break\n\nsolution(input())\n"
    },
    {
        "number": 843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    directions = stdin.split()[1]\n    jumps = stdin.split()[2:]\n    jumps = list(map(int, jumps))\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0)\n    jumps.append(0"
    },
    {
        "number": 844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157"
    },
    {
        "number": 845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    direction = stdin[0]\n    message = stdin[1]\n    if direction == 'R':\n        return message[::-1]\n    else:\n        return message"
    },
    {
        "number": 846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    buttons = list(map(int, stdin.split()))\n    lights_on = []\n    for i in range(1, n+1):\n        if i not in lights:\n            lights_on.append(i)\n    lights_on = sorted(lights_on)\n    lights_off = []\n    for i in range(1, n+1):\n        if i not in lights:\n            lights_off.append(i)\n    lights_off = sorted(lights_off)\n    buttons_on = []\n    for i in range(1, m+1):\n        if i not in buttons:\n            buttons_on.append(i)\n    buttons_on = sorted(buttons_on)\n    buttons_off = []\n    for i in range(1, m+1):\n        if i not in buttons:\n            buttons_off.append(i)\n    buttons_off = sorted(buttons_off)\n    lights_off = lights_off[::-1]\n    buttons_off = buttons_off[::-1]\n    lights_on = lights_on[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n    buttons_on = buttons_on[::-1]\n    lights_off = lights_off[::-1]\n"
    },
    {
        "number": 847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    count = 0\n    for i in range(n):\n        if numbers[i] == 0:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return '-1'\n    if n == k:\n        return '1 2'\n    if n == k + 1:\n        return '2 3'\n    if n == k + 2:\n        return '3 1'\n    if n == k + 3:\n        return '1 2'\n    if n == k + 4:\n        return '2 3'\n    if n == k + 5:\n        return '3 1'\n    if n == k + 6:\n        return '1 2'\n    if n == k + 7:\n        return '2 3'\n    if n == k + 8:\n        return '3 1'\n    if n == k + 9:\n        return '1 2'\n    if n == k + 10:\n        return '2 3'\n    if n == k + 11:\n        return '3 1'\n    if n == k + 12:\n        return '1 2'\n    if n == k + 13:\n        return '2 3'\n    if n == k + 14:\n        return '3 1'\n    if n == k + 15:\n        return '1 2'\n    if n == k + 16:\n        return '2 3'\n    if n == k + 17:\n        return '3 1'\n    if n == k + 18:\n        return '1 2'\n    if n == k + 19:\n        return '2 3'\n    if n == k + 20:\n        return '3 1'\n    if n == k + 21:\n        return '1 2'\n    if n == k + 22:\n        return '2 3'\n    if n == k + 23:\n        return '3 1'\n    if n == k + 24:\n        return '1 2'\n    if n == k + 25:\n        return '2 3'\n    if n == k + 26:\n        return '3 1'\n    if n == k + 27:\n        return '1 2'\n    if n == k + 28:\n        return '2 3'\n    if n == k + 29:\n        return '3 1'\n    if n == k + 30:\n        return '1 2'\n    if n == k + 31:\n        return '2 3'\n    if n == k + 32:\n        return '3 1'\n    if n == k + 33:\n        return '1 2'\n    if n == k + 34:\n        return '2 3'\n    if n == k + 35:\n        return '3 1'\n    if n == k + 36:\n        return '1 2'\n    if n == k + 37:\n        return '2 3'\n    if n == k + 38:\n        return '3 1'\n    if n == k + 39:\n        return '1 2'\n    if n == k + 40:\n        return '2 3'\n    if n == k + 41:\n        return '3 1'\n    if n == k + 42:\n        return '1 2'\n    if n == k + 43:\n        return '2 3'\n    if n == k + 44:\n        return '3 1'\n    if n == k + 45:\n        return '1 2'\n    if n == k + 46:\n        return '2 3'\n    if n == k + 47:\n        return '3 1'\n    if n == k + 48:\n        return '1 2'\n    if n == k + 49:\n        return '2 3'\n    if n == k + 50:\n        return '3 1'\n    if n == k + 51:\n        return '1 2'\n    if n == k + 52:\n        return '2 3'\n    if n == k + 53:\n        return '3 1'\n    if n == k + 54:\n        return '1 2'\n    if n == k + 55:\n        return '2 3'\n    if n == k + 56:\n        return '3 1'\n    if n == k + 57:\n        return '1 2'\n    if n == k + 58:\n        return '2 3'\n    if n == k + 59:\n        return '3 1'\n    if n == k + 60:\n        return '1 2'\n    if n == k + 61:\n        return '2 3'\n    if n == k + 62:\n        return '3 1'\n    if n == k + 63:\n        return '1 2'\n    if n == k + 64:\n        return '2 3'\n    if n == k + 65:\n        return '3 1'\n    if n == k + 66:\n        return '1 2'\n    if n == k + 67:\n        return '2 3'\n    if n == k + 68:\n        return '3 1'\n    if n == k + 69:\n        return '1 2'\n    if n == k + 70:\n        return '2 3'\n    if n == k + 71:\n        return '3 1'\n    if n == k + 72:\n        return '1 2'\n    if n == k + 73:\n        return '2 3'\n    if n == k + 74:\n        return '3 1'\n    if n == k + 75:\n        return '1 2'\n    if n == k + 76:\n        return '2 3'\n    if n == k + 77:\n        return '3 1'\n    if n == k + 78:\n        return '1 2'\n    if n == k + 79:\n        return '2 3'\n    if n == k + 80:\n        return '3 1'\n    if n == k + 81:\n        return '1 2'\n    if n == k + 82:\n        return '2 3'\n    if n == k + 83:\n        return '3 1'\n    if n == k + 84:\n        return '1 2'\n    if n == k + 85:\n        return '2 3'\n    if n == k + 86:\n        return '3 1'\n    if n == k + 87:\n        return '1 2'\n    if n == k + 88:\n        return '2 3'\n    if n == k + 89:\n        return '3 1'\n    if n == k + 90:\n        return '1 2'\n    if n == k + 91:\n        return '2 3'\n    if n == k + 92:\n        return '3 1'\n    if n == k + 93:\n        return '1 2'\n    if n == k + 94:\n        return '2 3'\n    if n == k + 95:\n        return '3 1'\n    if n == k + 96:\n        return '1 2'\n    if n == k + 97:\n        return '2 3'\n    if n == k + 98:\n        return '3 1'\n    if n == k + 99:\n        return '1 2'\n    "
    },
    {
        "number": 849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(1 - (a / (b + 1)) - (c / (d + 1)))"
    },
    {
        "number": 850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    numbers.sort()\n    max_sum = 0\n    for i in range(k):\n        for j in range(i + 1, k):\n            if numbers[i] + numbers[j] > max_sum:\n                max_sum = numbers[i] + numbers[j]\n    return str(max_sum)\n"
    },
    {
        "number": 851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    bars = stdin\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == k:\n        return str(n)\n    if n == 2:\n        return str(k)\n    if k == 2:\n        return str(n)\n    if n == 3:\n        return str(k)\n    if k == 3:\n        return str(n)\n    if n == 4:\n        return str(k)\n    if k == 4:\n        return str(n)\n    if n == 5:\n        return str(k)\n    if k == 5:\n        return str(n)\n    if n == 6:\n        return str(k)\n    if k == 6:\n        return str(n)\n    if n == 7:\n        return str(k)\n    if k == 7:\n        return str(n)\n    if n == 8:\n        return str(k)\n    if k == 8:\n        return str(n)\n    if n == 9:\n        return str(k)\n    if k == 9:\n        return str(n)\n    if n == 10:\n        return str(k)\n    if k == 10:\n        return str(n)\n    if n == 11:\n        return str(k)\n    if k == 11:\n        return str(n)\n    if n == 12:\n        return str(k)\n    if k == 12:\n        return str(n)\n    if n == 13:\n        return str(k)\n    if k == 13:\n        return str(n)\n    if n == 14:\n        return str(k)\n    if k == 14:\n        return str(n)\n    if n == 15:\n        return str(k)\n    if k == 15:\n        return str(n)\n    if n == 16:\n        return str(k)\n    if k == 16:\n        return str(n)\n    if n == 17:\n        return str(k)\n    if k == 17:\n        return str(n)\n    if n == 18:\n        return str(k)\n    if k == 18:\n        return str(n)\n    if n == 19:\n        return str(k)\n    if k == 19:\n        return str(n)\n    if n == 20:\n        return str(k)\n    if k == 20:\n        return str(n)\n    if n == 21:\n        return str(k)\n    if k == 21:\n        return str(n)\n    if n == 22:\n        return str(k)\n    if k == 22:\n        return str(n)\n    if n == 23:\n        return str(k)\n    if k == 23:\n        return str(n)\n    if n == 24:\n        return str(k)\n    if k == 24:\n        return str(n)\n    if n == 25:\n        return str(k)\n    if k == 25:\n        return str(n)\n    if n == 26:\n        return str(k)\n    if k == 26:\n        return str(n)\n    if n == 27:\n        return str(k)\n    if k == 27:\n        return str(n)\n    if n == 28:\n        return str(k)\n    if k == 28:\n        return str(n)\n    if n == 29:\n        return str(k)\n    if k == 29:\n        return str(n)\n    if n == 30:\n        return str(k)\n    if k == 30:\n        return str(n)\n    if n == 31:\n        return str(k)\n    if k == 31:\n        return str(n)\n    if n == 32:\n        return str(k)\n    if k == 32:\n        return str(n)\n    if n == 33:\n        return str(k)\n    if k == 33:\n        return str(n)\n    if n == 34:\n        return str(k)\n    if k == 34:\n        return str(n)\n    if n == 35:\n        return str(k)\n    if k == 35:\n        return str(n)\n    if n == 36:\n        return str(k)\n    if k == 36:\n        return str(n)\n    if n == 37:\n        return str(k)\n    if k == 37:\n        return str(n)\n    if n == 38:\n        return str(k)\n    if k == 38:\n        return str(n)\n    if n == 39:\n        return str(k)\n    if k == 39:\n        return str(n)\n    if n == 40:\n        return str(k)\n    if k == 40:\n        return str(n)\n    if n == 41:\n        return str(k)\n    if k == 41:\n        return str(n)\n    if n == 42:\n        return str(k)\n    if k == 42:\n        return str(n)\n    if n == 43:\n        return str(k)\n    if k == 43:\n        return str(n)\n    if n == 44:\n        return str(k)\n    if k == 44:\n        return str(n)\n    if n == 45:\n        return str(k)\n    if k == 45:\n        return str(n)\n    if n == 46:\n        return str(k)\n    if k == 46:\n        return str(n)\n    if n == 47:\n        return str(k)\n    if k == 47:\n        return str(n)\n    if n == 48:\n        return str(k)\n    if k == 48:\n        return str(n)\n    if n == 49:\n        return str(k)\n    if k == 49:\n        return str(n)\n    if n == 50:\n        return str(k)\n    if k == 50:\n        return str(n)\n    if n == 51:\n        return str(k)\n    if k == 51:\n        return str("
    },
    {
        "number": 852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l, p = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    t = 0\n    while True:\n        if t == n:\n            return 'Yes'\n        if d[t] + p[t % 2] > l:\n            return 'No'\n        t += 1\n"
    },
    {
        "number": 853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split()))\n    max_number = 0\n    for i in range(n):\n        if cards[i] == 0:\n            continue\n        if cards[i] % 90 == 0:\n            max_number = max(max_number, cards[i])\n    if max_number == 0:\n        return -1\n    return str(max_number)"
    },
    {
        "number": 854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] <= t:\n            ans += 1\n            t -= a[i]\n        else:\n            break\n    return str(ans)"
    },
    {
        "number": 855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    alice_points = 0\n    bob_points = 0\n    for i in range(k):\n        alice_points += (a - 1) * (i + 1)\n        bob_points += (b - 1) * (i + 1)\n    return str(alice_points) + \" \" + str(bob_points)"
    },
    {
        "number": 856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = max(a)\n    for i in range(k):\n        for j in range(n):\n            if a[j] > d:\n                a[j] -= d\n            else:\n                a[j] = 0\n    return''.join(map(str, a))"
    },
    {
        "number": 857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    fingerprints = list(map(int, stdin.split()))\n    # print(sequence)\n    # print(fingerprints)\n    # print(n, m)\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))\n    # print(len(fingerprints))\n    # print(sequence)\n    # print(fingerprints)\n    # print(len(sequence))"
    },
    {
        "number": 858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N - 1)"
    },
    {
        "number": 859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2 = stdin.split()\n    s_1 = list(s_1)\n    s_2 = list(s_2)\n    s_1.sort()\n    s_2.sort()\n    if s_1 == s_2:\n        return \"1.000000000000\"\n    else:\n        return \"0.500000000000\""
    },
    {
        "number": 860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 0:\n        return \"Impossible\"\n    if a[0] == 1:\n        return \"Possible\"\n    if a[0] == 2:\n        return \"Possible\"\n    if a[0] == 3:\n        return \"Possible\"\n    if a[0] == 4:\n        return \"Possible\"\n    if a[0] == 5:\n        return \"Possible\"\n    if a[0] == 6:\n        return \"Possible\"\n    if a[0] == 7:\n        return \"Possible\"\n    if a[0] == 8:\n        return \"Possible\"\n    if a[0] == 9:\n        return \"Possible\"\n    if a[0] == 10:\n        return \"Possible\"\n    if a[0] == 11:\n        return \"Possible\"\n    if a[0] == 12:\n        return \"Possible\"\n    if a[0] == 13:\n        return \"Possible\"\n    if a[0] == 14:\n        return \"Possible\"\n    if a[0] == 15:\n        return \"Possible\"\n    if a[0] == 16:\n        return \"Possible\"\n    if a[0] == 17:\n        return \"Possible\"\n    if a[0] == 18:\n        return \"Possible\"\n    if a[0] == 19:\n        return \"Possible\"\n    if a[0] == 20:\n        return \"Possible\"\n    if a[0] == 21:\n        return \"Possible\"\n    if a[0] == 22:\n        return \"Possible\"\n    if a[0] == 23:\n        return \"Possible\"\n    if a[0] == 24:\n        return \"Possible\"\n    if a[0] == 25:\n        return \"Possible\"\n    if a[0] == 26:\n        return \"Possible\"\n    if a[0] == 27:\n        return \"Possible\"\n    if a[0] == 28:\n        return \"Possible\"\n    if a[0] == 29:\n        return \"Possible\"\n    if a[0] == 30:\n        return \"Possible\"\n    if a[0] == 31:\n        return \"Possible\"\n    if a[0] == 32:\n        return \"Possible\"\n    if a[0] == 33:\n        return \"Possible\"\n    if a[0] == 34:\n        return \"Possible\"\n    if a[0] == 35:\n        return \"Possible\"\n    if a[0] == 36:\n        return \"Possible\"\n    if a[0] == 37:\n        return \"Possible\"\n    if a[0] == 38:\n        return \"Possible\"\n    if a[0] == 39:\n        return \"Possible\"\n    if a[0] == 40:\n        return \"Possible\"\n    if a[0] == 41:\n        return \"Possible\"\n    if a[0] == 42:\n        return \"Possible\"\n    if a[0] == 43:\n        return \"Possible\"\n    if a[0] == 44:\n        return \"Possible\"\n    if a[0] == 45:\n        return \"Possible\"\n    if a[0] == 46:\n        return \"Possible\"\n    if a[0] == 47:\n        return \"Possible\"\n    if a[0] == 48:\n        return \"Possible\"\n    if a[0] == 49:\n        return \"Possible\"\n    if a[0] == 50:\n        return \"Possible\"\n    if a[0] == 51:\n        return \"Possible\"\n    if a[0] == 52:\n        return \"Possible\"\n    if a[0"
    },
    {
        "number": 861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, R = map(int, stdin.split())\n    return str(2 * R - R * (m - 1) + 1)"
    },
    {
        "number": 862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop"
    },
    {
        "number": 863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, t_a = map(int, stdin.split())\n    b, t_b = map(int, stdin.split())\n    departure_time = int(stdin.split()[-1])\n    return str(int(a * t_a + b * t_b - (a * t_a - b * t_b) / 2 + (a * t_a - b * t_b) / 2 * (departure_time - a * t_a + b * t_b) / (a * t_a - b * t_b)))\n"
    },
    {
        "number": 864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    food_packages = list(map(int, stdin.split()))\n    food_packages.sort()\n    days = 0\n    while len(food_packages) > 1:\n        if food_packages[0] == food_packages[1]:\n            food_packages.pop(0)\n            food_packages.pop(0)\n        else:\n            food_packages.pop(0)\n        days += 1\n    if len(food_packages) == 1:\n        days += 1\n    return str(days)\n"
    },
    {
        "number": 865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    happiness = 0\n    for i in range(N):\n        happiness += A[i] * B[i]\n    return str(happiness)"
    },
    {
        "number": 866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return str(ways(X, Y))\n\n\ndef"
    },
    {
        "number": 867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(min(N, int(math.ceil(N / 2))))"
    },
    {
        "number": 868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1378**n % 1378)"
    },
    {
        "number": 869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(0, a - 1) + max(0, b - 1)) + \" \" + str(max(0, a - 1) + max(0, b - 1))"
    },
    {
        "number": 870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, L, v_1, v_2 = map(int, stdin.split())\n    return str(max(1, (L - d) // v_1 + (L - d) // v_2))"
    },
    {
        "number": 871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    landings = sorted(list(map(int, stdin.split())))\n    start = 0\n    end = landings[0]\n    while start < end:\n        mid = (start + end) // 2\n        if mid == landings[0]:\n            break\n        if mid < landings[0]:\n            start = mid + 1\n        else:\n            end = mid\n    if start == end:\n        return str(start) + \" \" + str(landings[0])\n    start = 0\n    end = landings[-1]\n    while start < end:\n        mid = (start + end) // 2\n        if mid == landings[-1]:\n            break\n        if mid > landings[-1]:\n            start = mid + 1\n        else:\n            end = mid\n    if start == end:\n        return str(start) + \" \" + str(landings[-1])\n    return str(start) + \" \" + str(end)"
    },
    {
        "number": 872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 1:\n                a[i], a[j] = a[j], a[i]\n    return''.join(map(str, a))"
    },
    {
        "number": 873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    disks = stdin.split()\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))\n    disks = list(map(str, disks))\n    disks = ''.join(disks)\n    disks = list(map(int, disks))"
    },
    {
        "number": 874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return -1\n    if n == 2:\n        return \"2 1\"\n    if n == 3:\n        return \"2 1 3\"\n    if n == 4:\n        return \"2 1 4 3\"\n    if n == 5:\n        return \"2 1 4 3 5\"\n    if n == 6:\n        return \"2 1 4 3 5 6\"\n    if n == 7:\n        return \"2 1 4 3 5 6 7\"\n    if n == 8:\n        return \"2 1 4 3 5 6 7 8\"\n    if n == 9:\n        return \"2 1 4 3 5 6 7 8 9\"\n    if n == 10:\n        return \"2 1 4 3 5 6 7 8 9 10\"\n    if n == 11:\n        return \"2 1 4 3 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 16:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 17:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 18:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 19:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 20:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 21:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 22:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 23:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 24:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 25:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 26:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 27:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 28:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 29:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 30:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 31:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 32:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 33:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 34:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 35:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 36:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 37:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 38:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 39:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 40:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 41:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if n == 42:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\"\n    if n == 43:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\"\n    if n == 44:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\"\n    if n == 45:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\"\n    if n == 46:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\"\n    if n == 47:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\"\n    if n == 48:\n        return \"2 1 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18"
    },
    {
        "number": 875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    stones = list(map(int, stdin.split()[1:]))\n    colors = stdin.split()[1:]\n    colors = list(map(lambda x: ord(x) - ord('a'), colors))\n    colors = list(map(lambda x: x % 26, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x + 1, colors))\n    colors = list(map(lambda x: x - 1, colors))\n    colors = list(map(lambda x: x"
    },
    {
        "number": 876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    i = 0\n    while a[i] <= k:\n        i += 1\n    return str(i)"
    },
    {
        "number": 877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    problems = sorted(list(map(int, stdin.split())))\n    pairs = []\n    for i in range(m):\n        pairs.append((problems[i], problems[i+1]))\n    pairs = sorted(pairs)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            for k in range(i+1, j):\n                if pairs[i][0] == pairs[k][1] or pairs[i][1] == pairs[k][0]:\n                    dp[i][j] = dp[i][j] + dp[i+1][k]\n    return str(dp[0][n])"
    },
    {
        "number": 878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"Infinite\"\n    if n == 2:\n        return \"Finite\"\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Infinite\"\n        "
    },
    {
        "number": 879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    print(*p)\n    return"
    },
    {
        "number": 880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(i*(i+1)//2 for i in range(1, n+1)) % 998244353)"
    },
    {
        "number": 881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n    if n == 65:\n        return str(65)\n    if n == 66:\n        return str(66)\n    if n == 67:\n        return str(67)\n    if n == 68:\n        return str(68)\n    if n == 69:\n        return str(69)\n    if n == 70:\n        return str(70)\n    if n == 71:\n        return str(71)\n    if n == 72:\n        return str(72)\n    if n == 73:\n        return str(73)\n    if n == 74:\n        return str(74)\n    if n == 75:\n        return str(75)\n    if n == 76:\n        return str(76)\n    if n == 77:\n        return str(77)\n    if n == 78:\n        return str(78)\n    if n == 79:\n        return str(79)\n    if n == 80:\n        return str(80)\n    if n == 81:\n        return str(81)\n    if n == 82:\n        return str(82)\n    if n == 83:\n        return str(83)\n    if n == 84:\n        return str(84)\n    if n == 85:\n        return str(85)\n    if n == 86:\n        return str(86)\n    if n == 87:\n        return str(87)\n    if n == 88:\n        return str(88)\n    if n == 89:\n        return str(89)\n    if n == 90:\n        return str(90)\n    if n == 91:\n        return str(91)\n    if n == 92:\n        return str(92)\n    if n == 93:\n        return str(93)\n    if n == 94:\n        return str(94)\n    if n == 95:\n        return str(95)\n    if n == 96:\n        return str(96)\n    if n == 97:\n        return str(97)\n    if n == 98:\n        return str(98)\n    if n == 99:\n        return str(99)\n    if n == 100:\n        return str(100)\n    if n == 101:\n        return str(101)\n    if n == 102:\n        return str(102)\n    if n == 103:\n        return str(103)\n    if n == 104:\n        return str(104)\n    if n == 105:\n        return str(105)\n    if n == 106:\n        return str(106)\n    if n == 107:\n        return str(107)\n"
    },
    {
        "number": 882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    s.sort()\n    t.sort()\n    s = \"\".join(s)\n    t = \"\".join(t)\n    s = s.replace(\"?\", \"a\")\n    t = t.replace(\"?\", \"a\")\n    s = s.replace(\"?\", \"b\")\n    t = t.replace(\"?\", \"b\")\n    s = s.replace(\"?\", \"c\")\n    t = t.replace(\"?\", \"c\")\n    s = s.replace(\"?\", \"d\")\n    t = t.replace(\"?\", \"d\")\n    s = s.replace(\"?\", \"e\")\n    t = t.replace(\"?\", \"e\")\n    s = s.replace(\"?\", \"f\")\n    t = t.replace(\"?\", \"f\")\n    s = s.replace(\"?\", \"g\")\n    t = t.replace(\"?\", \"g\")\n    s = s.replace(\"?\", \"h\")\n    t = t.replace(\"?\", \"h\")\n    s = s.replace(\"?\", \"i\")\n    t = t.replace(\"?\", \"i\")\n    s = s.replace(\"?\", \"j\")\n    t = t.replace(\"?\", \"j\")\n    s = s.replace(\"?\", \"k\")\n    t = t.replace(\"?\", \"k\")\n    s = s.replace(\"?\", \"l\")\n    t = t.replace(\"?\", \"l\")\n    s = s.replace(\"?\", \"m\")\n    t = t.replace(\"?\", \"m\")\n    s = s.replace(\"?\", \"n\")\n    t = t.replace(\"?\", \"n\")\n    s = s.replace(\"?\", \"o\")\n    t = t.replace(\"?\", \"o\")\n    s = s.replace(\"?\", \"p\")\n    t = t.replace(\"?\", \"p\")\n    s = s.replace(\"?\", \"q\")\n    t = t.replace(\"?\", \"q\")\n    s = s.replace(\"?\", \"r\")\n    t = t.replace(\"?\", \"r\")\n    s = s.replace(\"?\", \"s\")\n    t = t.replace(\"?\", \"s\")\n    s = s.replace(\"?\", \"t\")\n    t = t.replace(\"?\", \"t\")\n    s = s.replace(\"?\", \"u\")\n    t = t.replace(\"?\", \"u\")\n    s = s.replace(\"?\", \"v\")\n    t = t.replace(\"?\", \"v\")\n    s = s.replace(\"?\", \"w\")\n    t = t.replace(\"?\", \"w\")\n    s = s.replace(\"?\", \"x\")\n    t = t.replace(\"?\", \"x\")\n    s = s.replace(\"?\", \"y\")\n    t = t.replace(\"?\", \"y\")\n    s = s.replace(\"?\", \"z\")\n    t = t.replace(\"?\", \"z\")\n    s = s.replace(\"?\", \"a\")\n    t = t.replace(\"?\", \"a\")\n    s = s.replace(\"?\", \"b\")\n    t = t.replace(\"?\", \"b\")\n    s = s.replace(\"?\", \"c\")\n    t = t.replace(\"?\", \"c\")\n    s = s.replace(\"?\", \"d\")\n    t = t.replace(\"?\", \"d\")\n    s = s.replace(\"?\", \"e\")\n    t = t.replace(\"?\", \"e\")\n    s = s.replace(\"?\", \"f\")\n    t = t.replace(\"?\", \"f\")\n    s = s.replace(\"?\", \"g\")\n    t = t.replace(\"?\", \"g\")\n    s = s.replace(\"?\", \"h\")\n    t = t.replace(\"?\", \"h\")\n    s = s.replace(\"?\", \"i\")\n    t = t.replace(\"?\", \"i\")\n    s = s.replace(\"?\", \"j\")\n    t = t.replace(\"?\", \"j\")\n    s = s.replace(\"?\", \"k\")\n    t = t.replace(\"?\", \"k\")\n    s = s.replace(\"?\", \"l\")\n    t = t.replace(\"?\", \"l\")\n    s = s.replace(\"?\", \"m\")\n    t = t.replace(\"?\", \"m\")\n    s = s.replace(\"?\", \"n\")\n    t = t.replace(\"?\", \"n\")\n    s = s.replace(\"?\", \"o\")\n    t = t.replace(\"?\", \"o\")\n    s = s.replace(\"?\", \"p\")\n    t = t.replace(\"?\", \"p\")\n    s = s.replace(\"?\", \"q\")\n    t = t.replace(\"?\", \"q\")\n    s = s.replace(\"?\", \"r\")\n    t = t.replace(\"?\", \"r\")\n    s = s.replace(\"?\", \"s\")\n    t = t.replace(\"?\", \"s\")\n    s = s.replace(\"?\", \"t\")\n    t = t.replace(\"?\", \"t\")\n    s = s.replace(\"?\", \"u\")\n    t = t.replace(\"?\", \"u\")\n    s = s.replace(\"?\", \"v\")\n    t = t.replace(\"?\", \"v\")\n    s = s.replace(\"?\", \"w\")\n    t = t.replace(\"?\", \"w\")\n    s = s.replace(\"?\", \"x\")\n    t = t.replace(\"?\", \"x\")\n    s = s.replace(\"?\", \"y\")\n    t = t.replace(\"?\", \"y\")\n    s = s.replace(\"?\", \"z\")\n    t = t.replace(\"?\", \"z\")\n    s = s.replace(\"?\", \"a\")\n    t = t.replace(\"?\", \"a\")\n    s = s.replace(\"?\", \"b\")\n    t = t.replace(\"?\", \"b\")\n    s = s.replace(\"?\", \"c\")\n    t = t.replace(\"?\", \"c\")\n    s = s.replace(\"?\", \"d\")\n    t = t.replace(\"?\", \"d\")\n    s = s.replace(\"?\", \"e\")\n    t = t.replace(\"?\", \"e\")\n    s = s.replace(\"?\", \"f\")\n    t = t.replace(\"?\", \"f\")\n    s = s.replace(\"?\", \"g\")\n    t = t.replace(\"?\", \"g\")\n    s = s.replace(\"?\", \"h\")\n    t = t.replace(\"?\", \"h\")\n    s = s.replace(\"?\", \"i\")\n    t = t.replace(\"?\", \"i\")\n    s = s.replace(\"?\", \"j\")\n    t = t.replace(\"?\", \"j\")\n    s = s.replace(\"?\", \"k\")\n    t = t.replace(\"?\", \"k\")\n    s = s.replace(\"?\", \"l\")\n    t = t.replace(\"?\", \"l"
    },
    {
        "number": 883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    friends.sort()\n    count = 1\n    for i in range(1, n):\n        if friends[i] == friends[i - 1]:\n            count += 1\n        else:\n            count = 1\n    return str(count)"
    },
    {
        "number": 884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(2**(a+b+c) - 2**(a+b) - 2**(a+c) - 2**(b+c) - 2**(a+b+c))"
    },
    {
        "number": 885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort()\n    G = (set(range(1, n + 1)), edges)\n    return sum(1 for _ in independent_sets(G)) % 998244353\n\n\ndef"
    },
    {
        "number": 886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return -1\n    else:\n        return str(n // 2)"
    },
    {
        "number": 887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    buttons = list(map(int, stdin.split()))\n    if buttons.count(1) == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    \n    p.sort()\n    s.sort()\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = abs(p[i] - p[j])\n            else:\n                dp[i][j] = min(dp[i - 1][j] + abs(p[i] - p[j]), dp[i][j - 1] + abs(p[i] - p[j]))\n    \n    return str(dp[n - 1][n - 1])\n\ndef"
    },
    {
        "number": 889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            if stdin[i][j] == '.':\n                if stdin[i][j] == stdin[i][j+1] == stdin[i][j+2] == stdin[i+1][j+1] == stdin[i+2][j] == stdin[i+2][j+1] == stdin[i+2][j+2] == stdin[i+1][j+2]:\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    ans = 0\n    for i in range(n):\n        if c[i] < l:\n            continue\n        if c[i] > r:\n            break\n        if c[i] - c[i - 1] < x:\n            continue\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    chips = stdin.split()\n    for i in range(k):\n        new_chips = []\n        for j in range(1, n + 1):\n            if chips[j - 1] == \"W\":\n                if (n - j) < (j - 1):\n                    new_chips.append(\"B\")\n                else:\n                    new_chips.append(\"W\")\n            else:\n                if (j - 1) < (n - j):\n                    new_chips.append(\"W\")\n                else:\n                    new_chips.append(\"B\")\n        chips = new_chips\n    return \"\".join(chips)"
    },
    {
        "number": 892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = 1\n    k = 0\n    while l <= m:\n        for i in range(n):\n            if a[i] % l == 0:\n                k += 1\n        if k > n:\n            break\n        l += 1\n    return str(l) + \" \" + str(k)"
    },
    {
        "number": 893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] - a[j] <= d:\n                res += 1\n    return str(res)"
    },
    {
        "number": 894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x) +'' + str(y) +'' + str(x + y) +'' + str(x - y)"
    },
    {
        "number": 895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t.reverse()\n    max_visit = 0\n    for i in range(n):\n        if t[i] - t[i - 1] > max_visit:\n            max_visit = t[i] - t[i - 1]\n    return str(max_visit)\n"
    },
    {
        "number": 896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a[0]!= b[0]:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i]!= a[i - 1] ^ a[i]:\n            return \"NO\"\n    for i in range(1, m):\n        if b[i]!= b[i - 1] ^ b[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"0\"\n    else:\n        return str(int(pow(int(a[0]) * int(b[0]), -1, 10 ** 9 + 7)))\n"
    },
    {
        "number": 898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(max(gcd(N, M), 1))\n\ndef"
    },
    {
        "number": 899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a - 1].append((b - 1, c))\n        graph[b - 1].append((a - 1, c))\n    visited = set()\n    visited.add(0)\n    count = 0\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            queue = deque([(i, 0)])\n            while queue:\n                node, dist = queue.popleft()\n                for nei, d in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        queue.append((nei, dist + d))\n            count += 1\n    return str(count)"
    },
    {
        "number": 900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for i in stdin if i == '?' or int(i) % 13 == 5))"
    },
    {
        "number": 901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    groups = []\n    for _ in range(m):\n        groups.append(list(map(int, stdin.split())))\n    for group in groups:\n        if group[0] < 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i] == a[i+1]:\n            return a[i]\n    return a[0]"
    },
    {
        "number": 903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % 2 == 0:\n        return a[n // 2]\n    else:\n        return a[n // 2] + 1\n"
    },
    {
        "number": 904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum(len(word) for word in stdin.split())"
    },
    {
        "number": 905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    sugar = []\n    for i in range(n):\n        sugar.append(list(map(int, stdin.split())))\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x[0], reverse=True)\n    sugar.sort(key=lambda x: x[1], reverse=True)\n    sugar.sort(key=lambda x: x["
    },
    {
        "number": 906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 1:\n        return (n * m) % 1000000007\n    else:\n        return (n * m) % 1000000007\n\ndef"
    },
    {
        "number": 907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for _ in range(m):\n        pairs.append(tuple(map(int, stdin.split())))\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            if pairs[i][0] == pairs[j][0] or pairs[i][1] == pairs[j][1]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    c.sort()\n    res = 0\n    for i in range(n):\n        if c[i] < 0:\n            return '-1'\n        res += c[i]\n    return str(res)"
    },
    {
        "number": 909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a * b * c, a + b * c, a * b + c, a + b - c))\n"
    },
    {
        "number": 910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    p.sort()\n    t.sort(reverse=True)\n    points = 0\n    for i in range(n):\n        points += p[i] - c * t[i]\n    if points > 0:\n        return \"Limak\"\n    elif points < 0:\n        return \"Radewoosh\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split())\n    restaurants = sorted(list(map(int, stdin.split())))\n    staircases = 0\n    for i in range(n):\n        if i == s:\n            continue\n        if i in restaurants:\n            staircases += 1\n    return str(staircases)"
    },
    {
        "number": 913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    robots = []\n    for i in range(n):\n        robots.append(list(map(int, stdin.split())))\n    robots = sorted(robots, key=lambda x: x[0])\n    robots = sorted(robots, key=lambda x: x[1])\n    robots = sorted(robots, key=lambda x: x[2])\n    robots = sorted(robots, key=lambda x: x[3])\n    robots = sorted(robots, key=lambda x: x[4])\n    robots = sorted(robots, key=lambda x: x[5])\n    robots = sorted(robots, key=lambda x: x[6])\n    robots = sorted(robots, key=lambda x: x[7])\n    robots = sorted(robots, key=lambda x: x[8])\n    robots = sorted(robots, key=lambda x: x[9])\n    robots = sorted(robots, key=lambda x: x[10])\n    robots = sorted(robots, key=lambda x: x[11])\n    robots = sorted(robots, key=lambda x: x[12])\n    robots = sorted(robots, key=lambda x: x[13])\n    robots = sorted(robots, key=lambda x: x[14])\n    robots = sorted(robots, key=lambda x: x[15])\n    robots = sorted(robots, key=lambda x: x[16])\n    robots = sorted(robots, key=lambda x: x[17])\n    robots = sorted(robots, key=lambda x: x[18])\n    robots = sorted(robots, key=lambda x: x[19])\n    robots = sorted(robots, key=lambda x: x[20])\n    robots = sorted(robots, key=lambda x: x[21])\n    robots = sorted(robots, key=lambda x: x[22])\n    robots = sorted(robots, key=lambda x: x[23])\n    robots = sorted(robots, key=lambda x: x[24])\n    robots = sorted(robots, key=lambda x: x[25])\n    robots = sorted(robots, key=lambda x: x[26])\n    robots = sorted(robots, key=lambda x: x[27])\n    robots = sorted(robots, key=lambda x: x[28])\n    robots = sorted(robots, key=lambda x: x[29])\n    robots = sorted(robots, key=lambda x: x[30])\n    robots = sorted(robots, key=lambda x: x[31])\n    robots = sorted(robots, key=lambda x: x[32])\n    robots = sorted(robots, key=lambda x: x[33])\n    robots = sorted(robots, key=lambda x: x[34])\n    robots = sorted(robots, key=lambda x: x[35])\n    robots = sorted(robots, key=lambda x: x[36])\n    robots = sorted(robots, key=lambda x: x[37])\n    robots = sorted(robots, key=lambda x: x[38])\n    robots = sorted(robots, key=lambda x: x[39])\n    robots = sorted(robots, key=lambda x: x[40])\n    robots = sorted(robots, key=lambda x: x[41])\n    robots = sorted(robots, key=lambda x: x[42])\n    robots = sorted(robots, key=lambda x: x[43])\n    robots = sorted(robots, key=lambda x: x[44])\n    robots = sorted(robots, key=lambda x: x[45])\n    robots = sorted(robots, key=lambda x: x[46])\n    robots = sorted(robots, key=lambda x: x[47])\n    robots = sorted(robots, key=lambda x: x[48])\n    robots = sorted(robots, key=lambda x: x[49])\n    robots = sorted(robots, key=lambda x: x[50])\n    robots = sorted(robots, key=lambda x: x[51])\n    robots = sorted(robots, key=lambda x: x[52])\n    robots = sorted(robots, key=lambda x: x[53])\n    robots = sorted(robots, key=lambda x: x[54])\n    robots = sorted(robots, key=lambda x: x[55])\n    robots = sorted(robots, key=lambda x: x[56])\n    robots = sorted(robots, key=lambda x: x[57])\n    robots = sorted(robots, key=lambda x: x[58])\n    robots = sorted(robots, key"
    },
    {
        "number": 914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin.strip())\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return \"nab\"\n    if n == 3:\n        return \"nab\"\n    if n == 4:\n        return \"nab\"\n    if n == 5:\n        return \"nab\"\n    if n == 6:\n        return \"nab\"\n    if n == 7:\n        return \"nab\"\n    if n == 8:\n        return \"nab\"\n    if n == 9:\n        return \"nab\"\n    if n == 10:\n        return \"nab\"\n    if n == 11:\n        return \"nab\"\n    if n == 12:\n        return \"nab\"\n    if n == 13:\n        return \"nab\"\n    if n == 14:\n        return \"nab\"\n    if n == 15:\n        return \"nab\"\n    if n == 16:\n        return \"nab\"\n    if n == 17:\n        return \"nab\"\n    if n == 18:\n        return \"nab\"\n    if n == 19:\n        return \"nab\"\n    if n == 20:\n        return \"nab\"\n    if n == 21:\n        return \"nab\"\n    if n == 22:\n        return \"nab\"\n    if n == 23:\n        return \"nab\"\n    if n == 24:\n        return \"nab\"\n    if n == 25:\n        return \"nab\"\n    if n == 26:\n        return \"nab\"\n    if n == 27:\n        return \"nab\"\n    if n == 28:\n        return \"nab\"\n    if n == 29:\n        return \"nab\"\n    if n == 30:\n        return \"nab\"\n    if n == 31:\n        return \"nab\"\n    if n == 32:\n        return \"nab\"\n    if n == 33:\n        return \"nab\"\n    if n == 34:\n        return \"nab\"\n    if n == 35:\n        return \"nab\"\n    if n == 36:\n        return \"nab\"\n    if n == 37:\n        return \"nab\"\n    if n == 38:\n        return \"nab\"\n    if n == 39:\n        return \"nab\"\n    if n == 40:\n        return \"nab\"\n    if n == 41:\n        return \"nab\"\n    if n == 42:\n        return \"nab\"\n    if n == 43:\n        return \"nab\"\n    if n == 44:\n        return \"nab\"\n    if n == 45:\n        return \"nab\"\n    if n == 46:\n        return \"nab\"\n    if n == 47:\n        return \"nab\"\n    if n == 48:\n        return \"nab\"\n    if n == 49:\n        return \"nab\"\n    if n == 50:\n        return \"nab\"\n    if n == 51:\n        return \"nab\"\n    if n == 52:\n        return \"nab\"\n    if n == 53:\n        return \"nab\"\n    if n == 54:\n        return \"nab\"\n    if n == 55:\n        return \"nab\"\n    if n == 56:\n        return \"nab\"\n    if n == 57:\n        return \"nab\"\n    if n == 58:\n        return \"nab\"\n    if n == 59:\n        return \"nab\"\n    if n == 60:\n        return \"nab\"\n    if n == 61:\n        return \"nab\"\n    if n == 62:\n        return \"nab\"\n    if n == 63:\n        return \"nab\"\n    if n == 64:\n        return \"nab\"\n    if n == 65:\n        return \"nab\"\n    if n == 66:\n        return \"nab\"\n    if n == 67:\n        return \"nab\"\n    if n == 68:\n        return \"nab\"\n    if n == 69:\n        return \"nab\"\n    if n == 70:\n        return \"nab\"\n    if n == 71:\n        return \"nab\"\n    if n == 72:\n        return \"nab\"\n    if n == 73:\n        return \"nab\"\n    if n == 74:\n        return \"nab\"\n    if n == 75:\n        return \"nab\"\n    if n == 76:\n        return \"nab\"\n    if n == 77:\n        return \"nab\"\n    if n == 78:\n        return \"nab\"\n    if n == 79:\n        return \"nab\"\n    if n == 80:\n        return \"nab\"\n    if n == 81:\n        return \"nab\"\n    if n == 82:\n        return \"nab\"\n    if n == 83:\n        return \"nab\"\n    if n == 84:\n        return \"nab\"\n    if n == 85:\n        return \"nab\"\n    if n == 86:\n        return \"nab\"\n    if n == 87:\n        return \"nab\"\n    if n == 88:\n        return \"nab\"\n    if n == 89:\n        return \"nab\"\n    if n == 90:\n        return \"nab\"\n    if n == 91:\n        return \"nab\"\n    if n == 92:\n        return \"nab\"\n    if n == 93:\n        return \"nab\"\n    if n == 94:\n        return \"nab\"\n    if n == 95:\n        return \"nab\"\n    if n == 96:\n        return \"nab\"\n    if n == 97:\n        return \"nab\"\n    if n == 98:\n        return \"nab\"\n    if n == 99:\n        return \"nab\"\n    if n == 100:\n        return \"nab\"\n    if n == 101:\n        return \"nab\"\n    if n == 102:\n        return \"nab\"\n    if n == 103:\n        return \"nab\"\n    if n == 104:\n        return \"nab\"\n    if n == 105:\n        return \"nab\"\n    if n == 106:\n        return \"nab\"\n    if n == 107:\n        return \"nab\"\n    if n == 108:\n        return \"nab\"\n    if n == 109:\n        return \"nab\"\n    if n == 110:\n        return \"nab\"\n    if n == 111:\n        return \"nab\"\n    if n == 112:\n        return \"nab\"\n    if n == 113:\n        return \"nab\"\n    if n == 114:\n        return \"nab\"\n    if n == 115:\n        return \"nab\"\n    if n"
    },
    {
        "number": 915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 10**16:\n        raise ValueError\n    return shortest_string(k)\n\ndef"
    },
    {
        "number": 916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    a.sort()\n    p.sort()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if p[i - 1] == p[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return str(dp[n][n])\n"
    },
    {
        "number": 917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, m = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    restrictions = []\n    for i in range(m):\n        l, r, x = map(int, stdin.split())\n        restrictions.append((l, r, x))\n    houses.sort()\n    max_height = houses[-1]\n    max_profit = 0\n    for i in range(len(houses)):\n        if houses[i] > max_height:\n            break\n        for j in range(i, len(houses)):\n            if houses[j] > max_height:\n                break\n            for k in range(j, len(houses)):\n                if houses[k] > max_height:\n                    break\n                profit = houses[i] * houses[j] * houses[k]\n                if profit > max_profit:\n                    max_profit = profit\n    return str(max_profit)\n"
    },
    {
        "number": 918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    regions = {}\n    for i in range(1, m + 1):\n        surname, region, points = stdin.split()\n        regions[region] = (surname, int(points))\n    regions = list(regions.items())\n    regions.sort(key=lambda x: x[1][1])\n    for region, (surname, points) in regions:\n        if points == 0:\n            continue\n        if points == 1:\n            print(surname)\n            continue\n        if points == 2:\n            print(surname, surname)\n            continue\n        if points == 3:\n            print(surname, surname, surname)\n            continue\n        if points == 4:\n            print(surname, surname, surname, surname)\n            continue\n        if points == 5:\n            print(surname, surname, surname, surname, surname)\n            continue\n        if points == 6:\n            print(surname, surname, surname, surname, surname, surname)\n            continue\n        if points == 7:\n            print(surname, surname, surname, surname, surname, surname, surname)\n            continue\n        if points == 8:\n            print(surname, surname, surname, surname, surname, surname, surname, surname)\n            continue\n        if points == 9:\n            print(surname, surname, surname, surname, surname, surname, surname, surname, surname)\n            continue\n        if points == 10:\n            print(surname, surname, surname, surname, surname, surname, surname, surname, surname, surname)\n            continue\n    return \"\"\n"
    },
    {
        "number": 919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stages = stdin.split()\n    if n == k:\n        return sum(map(lambda x: ord(x) - ord('a'), stages))\n    else:\n        return -1\n"
    },
    {
        "number": 920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '-1'\n    a, b, c, d = map(int, stdin.split())\n    if a > b and a > c and a > d:\n        return '1'+ str(a) +'' + str(b)\n    if b > a and b > c and b > d:\n        return '2'+ str(b) +'' + str(c)\n    if c > a and c > b and c > d:\n        return '3'+ str(c) +'' + str(d)\n    if d > a and d > b and d > c:\n        return '4'+ str(d) +'' + str(a)\n    return '-1'\n"
    },
    {
        "number": 921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cups = [0] * n\n    for i in range(n):\n        cups[i] = a[i]\n    cups.sort()\n    print(cups)\n    print(cups[0])\n    print(cups[-1])\n    print(cups[-2])\n    print(cups[-3])\n    print(cups[-4])\n    print(cups[-5])\n    print(cups[-6])\n    print(cups[-7])\n    print(cups[-8])\n    print(cups[-9])\n    print(cups[-10])\n    print(cups[-11])\n    print(cups[-12])\n    print(cups[-13])\n    print(cups[-14])\n    print(cups[-15])\n    print(cups[-16])\n    print(cups[-17])\n    print(cups[-18])\n    print(cups[-19])\n    print(cups[-20])\n    print(cups[-21])\n    print(cups[-22])\n    print(cups[-23])\n    print(cups[-24])\n    print(cups[-25])\n    print(cups[-26])\n    print(cups[-27])\n    print(cups[-28])\n    print(cups[-29])\n    print(cups[-30])\n    print(cups[-31])\n    print(cups[-32])\n    print(cups[-33])\n    print(cups[-34])\n    print(cups[-35])\n    print(cups[-36])\n    print(cups[-37])\n    print(cups[-38])\n    print(cups[-39])\n    print(cups[-40])\n    print(cups[-41])\n    print(cups[-42])\n    print(cups[-43])\n    print(cups[-44])\n    print(cups[-45])\n    print(cups[-46])\n    print(cups[-47])\n    print(cups[-48])\n    print(cups[-49])\n    print(cups[-50])\n    print(cups[-51])\n    print(cups[-52])\n    print(cups[-53])\n    print(cups[-54])\n    print(cups[-55])\n    print(cups[-56])\n    print(cups[-57])\n    print(cups[-58])\n    print(cups[-59])\n    print(cups[-60])\n    print(cups[-61])\n    print(cups[-62])\n    print(cups[-63])\n    print(cups[-64])\n    print(cups[-65])\n    print(cups[-66])\n    print(cups[-67])\n    print(cups[-68])\n    print(cups[-69])\n    print(cups[-70])\n    print(cups[-71])\n    print(cups[-72])\n    print(cups[-73])\n    print(cups[-74])\n    print(cups[-75])\n    print(cups[-76])\n    print(cups[-77])\n    print(cups[-78])\n    print(cups[-79])\n    print(cups[-80])\n    print(cups[-81])\n    print(cups[-82])\n    print(cups[-83])\n    print(cups[-84])\n    print(cups[-85])\n    print(cups[-86])\n    print(cups[-87])\n    print(cups[-88])\n    print(cups[-89])\n    print(cups[-90])\n    print(cups[-91])\n    print(cups[-92])\n    print(cups[-93])\n    print(cups[-94])\n    print(cups[-95])\n    print(cups[-96])\n    print(cups[-97])\n    print(cups[-98])\n    print(cups[-99])\n    print(cups[-100])\n    print(cups[-101])\n    print(cups[-102])\n    print(cups[-103])\n    print(cups[-104])\n    print(cups[-105])\n    print(cups[-106])\n    print(cups[-107])\n    print(cups[-108])\n    print(cups[-109])\n    print(cups[-110])\n    print(cups[-111])\n    print(cups[-112])\n    print(cups[-113])\n    print(cups[-114])\n    print(cups[-115])\n    print(cups[-116])\n    print(cups[-117])\n    print(cups[-118])\n    print(cups[-119])\n    print(cups[-120])\n    print(cups[-121])\n    print(cups[-122])\n    print(cups[-123])\n    print(cups[-124])\n    print(cups[-125])\n    print(cups[-126])\n    print(cups[-127])\n    print(cups[-128])\n    print(cups[-129])\n    print(cups[-130])\n    print(cups[-131])\n    print(cups[-132])\n    print(cups[-133])\n    print(cups[-134])\n    print(cups[-135])\n    print(cups[-136])\n    print(cups[-137])\n    print(cups[-138])\n    print(cups[-139])\n    print(cups[-140])\n    print(cups[-141])\n    print(cups[-142])\n    print(cups[-143])\n    print(cups[-144])\n    print(cups[-145])\n    print(cups[-146])\n    print(cups[-147])\n    print(cups[-148])\n    print(cups[-149])\n    print(c"
    },
    {
        "number": 922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    dice = list(map(int, stdin.split()))\n    dice.sort()\n    dice.reverse()\n    dice_sum = sum(dice)\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum < A:\n        return \"0\" * n\n    if dice_sum == A:\n        return \"1\" * n\n    if dice_sum > A:\n        return \"0\" * n\n    if dice_sum == A"
    },
    {
        "number": 923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i]!= i:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_a, r_a, t_a = map(int, stdin.split())\n    l_b, r_b, t_b = map(int, stdin.split())\n    return str(max(l_a, l_b) + max(t_a, t_b) - min(r_a, r_b))"
    },
    {
        "number": 925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    good = 0\n    for i in range(100):\n        if i == n:\n            good += 1\n        elif i % 10 == n % 10:\n            good += 1\n    return str(good)"
    },
    {
        "number": 926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = set()\n    for i in range(n):\n        a, b, c = map(int, stdin.split())\n        s.add((a, b, c))\n    s = list(s)\n    s.sort()\n    return str(len(s)) + '\\n' +''.join(map(str, s))\n"
    },
    {
        "number": 927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = list(map(str, a))\n    a = ''.join(a)\n    return a"
    },
    {
        "number": 928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) >= k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    H, W = map(int, stdin[0].split())\n    a = list(map(int, stdin[1].split()))\n    a = [[a[i], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len(a))]\n    a.sort(key=lambda x: x[0])\n    a = [[a[i][1], i] for i in range(len("
    },
    {
        "number": 930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(comb(n, k))\n\ndef"
    },
    {
        "number": 931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, z, p = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(p):\n        i, j = map(int, stdin.split())\n        matrix[i - 1][j - 1] = 1\n    for i in range(x):\n        matrix = rotate_matrix(matrix)\n    for i in range(y):\n        matrix = rotate_matrix(matrix, True)\n    for i in range(z):\n        matrix = rotate_matrix(matrix, False)\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                print(i + 1, j + 1)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i"
    },
    {
        "number": 933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"l\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"w\", \"\")\n    s"
    },
    {
        "number": 934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    table, hand = stdin.split()\n    table = list(table)\n    hand = list(hand)\n    for i in range(len(hand)):\n        if hand[i] == table[0]:\n            hand.pop(i)\n            table.pop(0)\n            break\n    if len(table) == 1 and table[0] == 'A':\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return \"Akshat\"\n    if n == 1 and m == 2:\n        return \"Malvika\"\n    if n == 2 and m == 2:\n        return \"Akshat\"\n    if n == 2 and m == 3:\n        return \"Malvika\"\n    if n == 3 and m == 3:\n        return \"Akshat\"\n    if n == 3 and m == 4:\n        return \"Malvika\"\n    if n == 4 and m == 4:\n        return \"Akshat\"\n    if n == 4 and m == 5:\n        return \"Malvika\"\n    if n == 5 and m == 5:\n        return \"Akshat\"\n    if n == 5 and m == 6:\n        return \"Malvika\"\n    if n == 6 and m == 6:\n        return \"Akshat\"\n    if n == 6 and m == 7:\n        return \"Malvika\"\n    if n == 7 and m == 7:\n        return \"Akshat\"\n    if n == 7 and m == 8:\n        return \"Malvika\"\n    if n == 8 and m == 8:\n        return \"Akshat\"\n    if n == 8 and m == 9:\n        return \"Malvika\"\n    if n == 9 and m == 9:\n        return \"Akshat\"\n    if n == 9 and m == 10:\n        return \"Malvika\"\n    if n == 10 and m == 10:\n        return \"Akshat\"\n    if n == 10 and m == 11:\n        return \"Malvika\"\n    if n == 11 and m == 11:\n        return \"Akshat\"\n    if n == 11 and m == 12:\n        return \"Malvika\"\n    if n == 12 and m == 12:\n        return \"Akshat\"\n    if n == 12 and m == 13:\n        return \"Malvika\"\n    if n == 13 and m == 13:\n        return \"Akshat\"\n    if n == 13 and m == 14:\n        return \"Malvika\"\n    if n == 14 and m == 14:\n        return \"Akshat\"\n    if n == 14 and m == 15:\n        return \"Malvika\"\n    if n == 15 and m == 15:\n        return \"Akshat\"\n    if n == 15 and m == 16:\n        return \"Malvika\"\n    if n == 16 and m == 16:\n        return \"Akshat\"\n    if n == 16 and m == 17:\n        return \"Malvika\"\n    if n == 17 and m == 17:\n        return \"Akshat\"\n    if n == 17 and m == 18:\n        return \"Malvika\"\n    if n == 18 and m == 18:\n        return \"Akshat\"\n    if n == 18 and m == 19:\n        return \"Malvika\"\n    if n == 19 and m == 19:\n        return \"Akshat\"\n    if n == 19 and m == 20:\n        return \"Malvika\"\n    if n == 20 and m == 20:\n        return \"Akshat\"\n    if n == 20 and m == 21:\n        return \"Malvika\"\n    if n == 21 and m == 21:\n        return \"Akshat\"\n    if n == 21 and m == 22:\n        return \"Malvika\"\n    if n == 22 and m == 22:\n        return \"Akshat\"\n    if n == 22 and m == 23:\n        return \"Malvika\"\n    if n == 23 and m == 23:\n        return \"Akshat\"\n    if n == 23 and m == 24:\n        return \"Malvika\"\n    if n == 24 and m == 24:\n        return \"Akshat\"\n    if n == 24 and m == 25:\n        return \"Malvika\"\n    if n == 25 and m == 25:\n        return \"Akshat\"\n    if n == 25 and m == 26:\n        return \"Malvika\"\n    if n == 26 and m == 26:\n        return \"Akshat\"\n    if n == 26 and m == 27:\n        return \"Malvika\"\n    if n == 27 and m == 27:\n        return \"Akshat\"\n    if n == 27 and m == 28:\n        return \"Malvika\"\n    if n == 28 and m == 28:\n        return \"Akshat\"\n    if n == 28 and m == 29:\n        return \"Malvika\"\n    if n == 29 and m == 29:\n        return \"Akshat\"\n    if n == 29 and m == 30:\n        return \"Malvika\"\n    if n == 30 and m == 30:\n        return \"Akshat\"\n    if n == 30 and m == 31:\n        return \"Malvika\"\n    if n == 31 and m == 31:\n        return \"Akshat\"\n    if n == 31 and m == 32:\n        return \"Malvika\"\n    if n == 32 and m == 32:\n        return \"Akshat\"\n    if n == 32 and m == 33:\n        return \"Malvika\"\n    if n == 33 and m == 33:\n        return \"Akshat\"\n    if n == 33 and m == 34:\n        return \"Malvika\"\n    if n == 34 and m == 34:\n        return \"Akshat\"\n    if n == 34 and m == 35:\n        return \"Malvika\"\n    if n == 35 and m == 35:\n        return \"Akshat\"\n    if n == 35 and m == 36:\n        return \"Malvika\"\n    if n == 36 and m == 36:\n        return \"Akshat\"\n    if n == 36 and m == 37:\n        return \"Malvika\"\n    if n == 37 and m == 37:\n        return \"Akshat\"\n    if n == 37 and m == 38:\n        return \"Malvika\"\n    if n == 38 and m == 38:\n        return \"Akshat\"\n    if n == 38 and m == 39:\n        return \"Malvika\"\n    if n == 39 and m == 39:\n        return \"Akshat\"\n    if n == 39 and m == 40:\n        return \"Malvika\"\n    if n == 40 and m == 40:\n        return \"Akshat\"\n    if n == 40 and m == 41:\n        "
    },
    {
        "number": 936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    likes = list(map(int, stdin.split()))\n    likes.sort(reverse=True)\n    return str(likes[0])"
    },
    {
        "number": 937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    m = 0\n    for i in range(n):\n        if t[i] == 1:\n            m += a[i]\n    for i in range(n):\n        if t[i] == 0:\n            m += a[i]\n    return str(m)"
    },
    {
        "number": 938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = a\n    m = b\n    p = []\n    q = []\n    for i in range(1, a + 1):\n        p.append(i)\n    for i in range(1, b + 1):\n        q.append(i)\n    p.sort()\n    q.sort()\n    p = p[::-1]\n    q = q[::-1]\n    for i in range(len(p)):\n        if p[i] + q[i] > a:\n            return str(len(p))\n    return str(len(p) + len(q))\n"
    },
    {
        "number": 939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dancers = list(map(int, stdin.split()))\n    dancers.sort()\n    dancers = list(set(dancers))\n    dancers.sort()\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    dancers = list(set(dancers))\n    "
    },
    {
        "number": 940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 'impossible'\n    if a == b == c:\n        return '0'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '1'\n    if a == b or a == c or b == c:\n        return '"
    },
    {
        "number": 941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k == 1:\n        if a[0] % b == 0:\n            return \"even\"\n        else:\n            return \"odd\"\n    else:\n        if a[0] % b == 0:\n            return \"even\"\n        else:\n            return \"odd\"\n"
    },
    {
        "number": 942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == 0:\n            return \"Impossible\"\n        else:\n            return \"Possible\"\n    else:\n        ans = []\n        for i in range(1, n + 1):\n            if a[i - 1] == 0:\n                ans.append(i)\n        if len(ans) == 0:\n            return \"Impossible\"\n        else:\n            return \"Possible\""
    },
    {
        "number": 943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    print(arr)\n    print(sum(arr))\n    return sum(arr)"
    },
    {
        "number": 944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, stdin.split())))\n    return str(min_days(roads))\n\n\ndef"
    },
    {
        "number": 945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = list(map(int, stdin.split()))\n    points.sort()\n    for i in range(1, n):\n        if points[i] == points[i - 1]:\n            return \"no\"\n        if points[i] - points[i - 1] == 2 * points[i - 1]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"EASY\" if n % 2 == 0 else \"HARD\""
    },
    {
        "number": 947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i + j == n:\n                if LCM(i, j) < n:\n                    return str(i) + \" \" + str(j)\n\ndef"
    },
    {
        "number": 948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    image = stdin.split()\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if image[i][j] == 'x':\n                if image[i][j + 1] == 'x':\n                    if image[i + 1][j] == 'x':\n                        if image[i + 1][j + 1] == 'x':\n                            count += 1\n    return str(count)"
    },
    {
        "number": 949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return str(a + b)"
    },
    {
        "number": 950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    strings = stdin.split()\n    min_operations = 0\n    for i in range(n):\n        min_operations += m - len(strings[i]) + 1\n        if i > 0:\n            min_operations += min(len(strings[i]) - 1, len(strings[i - 1]) - 1)\n        if i < n - 1:\n            min_operations += min(len(strings[i]) - 1, len(strings[i + 1]) - 1)\n    return str(min_operations)"
    },
    {
        "number": 951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k < 10:\n        return str(k)\n    if k == 10:\n        return str(n)\n    if k == 11:\n        return str(n)\n    if k == 12:\n        return str(n)\n    if k == 13:\n        return str(n)\n    if k == 14:\n        return str(n)\n    if k == 15:\n        return str(n)\n    if k == 16:\n        return str(n)\n    if k == 17:\n        return str(n)\n    if k == 18:\n        return str(n)\n    if k == 19:\n        return str(n)\n    if k == 20:\n        return str(n)\n    if k == 21:\n        return str(n)\n    if k == 22:\n        return str(n)\n    if k == 23:\n        return str(n)\n    if k == 24:\n        return str(n)\n    if k == 25:\n        return str(n)\n    if k == 26:\n        return str(n)\n    if k == 27:\n        return str(n)\n    if k == 28:\n        return str(n)\n    if k == 29:\n        return str(n)\n    if k == 30:\n        return str(n)\n    if k == 31:\n        return str(n)\n    if k == 32:\n        return str(n)\n    if k == 33:\n        return str(n)\n    if k == 34:\n        return str(n)\n    if k == 35:\n        return str(n)\n    if k == 36:\n        return str(n)\n    if k == 37:\n        return str(n)\n    if k == 38:\n        return str(n)\n    if k == 39:\n        return str(n)\n    if k == 40:\n        return str(n)\n    if k == 41:\n        return str(n)\n    if k == 42:\n        return str(n)\n    if k == 43:\n        return str(n)\n    if k == 44:\n        return str(n)\n    if k == 45:\n        return str(n)\n    if k == 46:\n        return str(n)\n    if k == 47:\n        return str(n)\n    if k == 48:\n        return str(n)\n    if k == 49:\n        return str(n)\n    if k == 50:\n        return str(n)\n    if k == 51:\n        return str(n)\n    if k == 52:\n        return str(n)\n    if k == 53:\n        return str(n)\n    if k == 54:\n        return str(n)\n    if k == 55:\n        return str(n)\n    if k == 56:\n        return str(n)\n    if k == 57:\n        return str(n)\n    if k == 58:\n        return str(n)\n    if k == 59:\n        return str(n)\n    if k == 60:\n        return str(n)\n    if k == 61:\n        return str(n)\n    if k == 62:\n        return str(n)\n    if k == 63:\n        return str(n)\n    if k == 64:\n        return str(n)\n    if k == 65:\n        return str(n)\n    if k == 66:\n        return str(n)\n    if k == 67:\n        return str(n)\n    if k == 68:\n        return str(n)\n    if k == 69:\n        return str(n)\n    if k == 70:\n        return str(n)\n    if k == 71:\n        return str(n)\n    if k == 72:\n        return str(n)\n    if k == 73:\n        return str(n)\n    if k == 74:\n        return str(n)\n    if k == 75:\n        return str(n)\n    if k == 76:\n        return str(n)\n    if k == 77:\n        return str(n)\n    if k == 78:\n        return str(n)\n    if k == 79:\n        return str(n)\n    if k == 80:\n        return str(n)\n    if k == 81:\n        return str(n)\n    if k == 82:\n        return str(n)\n    if k == 83:\n        return str(n)\n    if k == 84:\n        return str(n)\n    if k == 85:\n        return str(n)\n    if k == 86:\n        return str(n)\n    if k == 87:\n        return str(n)\n    if k == 88:\n        return str(n)\n    if k == 89:\n        return str(n)\n    if k == 90:\n        return str(n)\n    if k == 91:\n        return str(n)\n    if k == 92:\n        return str(n)\n    if k == 93:\n        return str(n)\n    if k == 94:\n        return str(n)\n    if k == 95:\n        return str(n)\n    if k == 96:\n        return str(n)\n    if k == 97:\n        return str(n)\n    if k == 98:\n        return str(n)\n    if k == 99:\n        return str(n)\n    if k == 100:\n        return str(n)\n    if k == 101:\n        return str(n)\n    if k == 102:\n        return str(n)\n    if k == 103:\n        return str(n)\n    if k == 104:\n        return str(n)\n    if k == 105:\n        return str(n)\n    if k == 106:\n        return str(n)\n    if k == 107:\n        return str(n)\n    if k == 108:\n        return str(n)\n    if k == 109:\n        return str(n)\n    if k == 110:\n        return str(n)\n    if k == 111:\n        return str(n)\n    if k == 112:\n        return str(n)\n    if k == 113:\n        return str(n)\n    if k == 114:\n        return str(n)\n    if k == 115:\n        return str(n)\n    if k == 116:\n        return str(n)\n    if k == 117:\n        return str(n)\n    if k == 118:\n        return str(n)\n    if k == 119:\n        return str(n)\n    if k == 120:\n        return str(n)\n    if k == 121:\n        return str(n)\n    if k == 122:\n        return str(n)\n    if k == 123:\n        return str(n)\n    if k == 124:\n        return str(n)\n    if k == 125:\n        return str(n)\n    if k == 126:\n        return str(n)\n    if k == 127:\n        return str(n)\n    if k == 128:\n        return str(n)\n    if k == 129:\n        return str(n)\n    if k == 130:\n        return str(n)\n    if k == 131:\n        return str(n)\n    if k == 132:\n        return str(n)\n    if k == 133:\n        return str(n)\n    if k == 134:\n        return str(n)\n    if k == 135:\n        return str(n)\n    if k == 136:\n        return str("
    },
    {
        "number": 952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, c = map(int, stdin.split())\n        roads[u - 1].append((v - 1, c))\n        roads[v - 1].append((u - 1, c))\n    min_cnt = float('inf')\n    min_roads = []\n    for i in range(n):\n        cnt = 0\n        roads_to_reverse = []\n        for j in range(len(roads[i])):\n            if roads[i][j][1] == 0:\n                roads_to_reverse.append(j)\n            else:\n                cnt += 1\n        if cnt == 0:\n            min_cnt = min(min_cnt, len(roads_to_reverse))\n            min_roads.append(roads_to_reverse)\n    return str(min_cnt) +'' +''.join(map(str, min_roads))\n"
    },
    {
        "number": 953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    A = stdin.split()[2:]\n    A = [[int(i) for i in A[i].split()] for i in range(n)]\n    res = []\n    for i in range(n):\n        res.append(p[i])\n        for j in range(i+1, n):\n            if A[i][j] == 1:\n                res[i], res[j] = res[j], res[i]\n                break\n    return \" \".join(map(str, res))"
    },
    {
        "number": 954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(set(stdin))"
    },
    {
        "number": 955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    juices = []\n    for i in range(n):\n        juices.append(stdin.split())\n    juices.sort(key=lambda x: int(x[1]))\n    total = 0\n    for i in range(n):\n        if i == 0:\n            total += int(juices[i][1])\n        else:\n            if total + int(juices[i][1]) <= 200:\n                total += int(juices[i][1])\n            else:\n                break\n    if total == 200:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i] == 'h' and s[i:i+len(s)] == s:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if len(s)!= n:\n        return -1\n    if n == 1:\n        return s\n    if n == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return -1\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s\n        else:\n            return -1\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return s\n        else:\n            return -1\n    if n == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return s\n        else:\n            return -1\n    if n == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return s\n        else:\n            return -1\n    if n == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return s\n        else:\n            return -1\n    if n == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return s\n        else:\n            return -1\n    if n == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return s\n        else:\n            return -1\n    if n == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return s\n        else:\n            return -1\n    if n == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return s\n        else:\n            return -1\n    if n == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return s\n        else:\n            return -1\n    if n == 13:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n            return s\n        else:\n            return -1\n    if n == 14:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n            return s\n        else:\n            return -1\n    if n == 15:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n            return s\n        else:\n            return -1\n    if n == 16:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13"
    },
    {
        "number": 959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, mod = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(m)]\n    return str(int(sum([1 for row in matrix for x in row if x == 1]) % mod))"
    },
    {
        "number": 960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for x in range(1, n + 1):\n        if x % k == 0:\n            if x % n == 0:\n                return str(x)\n            else:\n                continue\n        else:\n            if x % n == 0:\n                continue\n            else:\n                if x % k == 0:\n                    return str(x)\n                else:\n                    continue\n    return str(x)\n"
    },
    {
        "number": 961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for l in range(n - 1, -1, -1):\n        for r in range(l + 1, n):\n            for i in range(l, r):\n                dp[l][r] = max(dp[l][r], dp[l][i] + dp[i + 1][r] + a[l] ^ a[i] ^ a[r])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    for v in graph:\n        if len(graph[v]) == 1:\n            return str(v)\n    return '-1'\n"
    },
    {
        "number": 963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(count_ways(N, K))\n\n\ndef"
    },
    {
        "number": 964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2, x_3, y_3 = map(int, stdin.split())\n    if x_1 + x_2 + x_3 > 100 or y_1 + y_2 + y_3 > 100:\n        return '-1'\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return '{}'.format(max(x_1, y_1, x_2, y_2, x_3, y_3))\n    if x_1 + x_2 + x_3 == 100 and y_1 + y_2 + y_3 == 100:\n        return"
    },
    {
        "number": 965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cows = []\n    for i in range(n):\n        if stdin[i] == \"A\":\n            cows.append(i)\n    return len(cows)"
    },
    {
        "number": 966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    while y > 0:\n        if len(str(y)) == len(set(str(y))):\n            return str(y)\n        y -= 1\n    return str(y)"
    },
    {
        "number": 967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    if p == list(range(1, n + 1)):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s) > len(t):\n        return -1\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 3:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 4:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 5:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 6:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 7:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 8:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 9:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 10:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 11:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 12:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 13:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 14:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 15:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 16:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 17:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 18:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 19:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 20:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 21:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 22:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 23:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 24:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 25:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 26:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 27:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 28:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 29:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 30:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 31:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 32:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 33:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 34:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 35:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 36:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 37:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 38:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 39:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 40:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 41:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 42:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 43:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 44:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 45:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 46:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 47:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 48:\n        if s == t:\n            return 2\n        else:\n            return -1\n    if len(s) == 49:\n        if s =="
    },
    {
        "number": 970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    p = sorted(p)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    while a:\n        if a[0] > b:\n            a.pop(0)\n        else:\n            if a[0] <= d:\n                a.pop(0)\n                a.pop(0)\n            else:\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a.pop(0)\n                a."
    },
    {
        "number": 972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W\":\n                grid[i][j] = \"B\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"B\":\n                grid[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"W"
    },
    {
        "number": 973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    pasture = []\n    for _ in range(R):\n        pasture.append(list(stdin.strip()))\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                for dr, dc in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < R and 0 <= nc < C and pasture[nr][nc] == '.':\n                        pasture[nr][nc] = 'S'\n            elif pasture[r][c] == 'W':\n                for dr, dc in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < R and 0 <= nc < C and pasture[nr][nc] == 'S':\n                        pasture[nr][nc] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'S'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'S'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'S'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'S'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'S'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'S'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'S':\n                pasture[r][c] = '.'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == '.':\n                pasture[r][c] = 'W'\n    for r in range(R):\n        for c in range(C):\n            if pasture[r][c] == 'W':\n                pasture[r][c] = '.'\n    for r in range(R"
    },
    {
        "number": 974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"2\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"2\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"2\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"2\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"2\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"2\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"2\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"2\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"2\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"2\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"2\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"2\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"2\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"2\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"2\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"2\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"2\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"2\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"2\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"2\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"2\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"2\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"2\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"2\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"2\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"2\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"2\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"2\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"2\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"2\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"2\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"2\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"2\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"2\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"2\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"2\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"2\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"2\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"2\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"2\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"2\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"2\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"2\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"2\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"2\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"2\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"2\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"2\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"2\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"2\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"2\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"2\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"2\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"2\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"2\"\n    if n == 114:\n        return"
    },
    {
        "number": 975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sherlock = stdin.split()[1]\n    moriarty = stdin.split()[2]\n    sherlock_count = sherlock.count('1')\n    moriarty_count = moriarty.count('1')\n    if sherlock_count > moriarty_count:\n        return str(sherlock_count - moriarty_count)\n    elif sherlock_count < moriarty_count:\n        return str(moriarty_count - sherlock_count)\n    else:\n        return '0'\n"
    },
    {
        "number": 976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, stdin.split())))\n    l.sort(key=lambda x: x[0])\n    print(l)\n    return str(x)"
    },
    {
        "number": 977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    good = 0\n    for x in range(1, n + 1):\n        if x % p == 0:\n            good += 1\n    return str(good)\n"
    },
    {
        "number": 978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    panels = stdin.split()[1:]\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels = list(panels)\n    panels = list(map(int, panels))\n    panels = sorted(panels)\n    panels = list(map(str, panels))\n    panels = ''.join(panels)\n    panels ="
    },
    {
        "number": 979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 1\n    for i in range(n):\n        res = (res * abs(a[i] - a[i - 1])) % m\n    return str(res)\n"
    },
    {
        "number": 980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    strings = stdin.split()\n    for i in range(k):\n        for j in range(n):\n            if strings[i][j]!= strings[i][n - j - 1]:\n                strings[i] = strings[i][:j] + strings[i][n - j - 1] + strings[i][j + 1:n]\n                break\n        else:\n            return -1\n    return ''.join(strings)"
    },
    {
        "number": 981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v, *a = map(int, stdin.split())\n    if v < 1:\n        return -1\n    a.sort(reverse=True)\n    res = 0\n    for i in range(len(a)):\n        res += a[i] * (10 ** i)\n    return str(res)"
    },
    {
        "number": 982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        l, r = map(int, stdin.split())\n        if l % 2 == 0:\n            if r % 2 == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if r % 2 == 0:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n\nsolution(input())\n"
    },
    {
        "number": 983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                dp[i][j] = max(dp[i][j], p * a[i - 1] + q * a[j - 1] + r * a[k - 1])\n    return str(dp[n][n])"
    },
    {
        "number": 984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = []\n    for i in range(n):\n        tree.append(list(map(int, stdin.split())))\n    root = TreeNode(tree[0][0])\n    for i in range(1, n):\n        root.insert(TreeNode(tree[i][0]), TreeNode(tree[i][1]), TreeNode(tree[i][2]))\n    return str(find(root, tree[0][1]))\n\nsolution(input())\n"
    },
    {
        "number": 985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bishops = []\n    for i in range(n):\n        bishops.append([int(x) for x in stdin.split()[i * 2 + 1].split()])\n    return str(len(set(tuple(x) for x in bishops)))"
    },
    {
        "number": 986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    books = deque(books)\n    cost = 0\n    while books and k:\n        books.popleft()\n        k -= 1\n        cost += 1\n    return str(cost)"
    },
    {
        "number": 987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    res = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        res.append(p[a - 1])\n        res.append(p[b - 1])\n        p[a - 1], p[b - 1] = p[b - 1], p[a - 1]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    desks = stdin.split()\n    desks = list(map(lambda x: x.split('-')[0], desks))\n    desks = list(map(lambda x: x.split('*')[0], desks))\n    desks = list(map(lambda x: x.split('-')[1], desks))\n    desks = list(map(lambda x: x.split('*')[1], desks))\n    desks = list(map(lambda x: x.split('-')[2], desks))\n    desks = list(map(lambda x: x.split('*')[2], desks))\n    desks = list(map(lambda x: x.split('-')[3], desks))\n    desks = list(map(lambda x: x.split('*')[3], desks))\n    desks = list(map(lambda x: x.split('-')[4], desks))\n    desks = list(map(lambda x: x.split('*')[4], desks))\n    desks = list(map(lambda x: x.split('-')[5], desks))\n    desks = list(map(lambda x: x.split('*')[5], desks))\n    desks = list(map(lambda x: x.split('-')[6], desks))\n    desks = list(map(lambda x: x.split('*')[6], desks))\n    desks = list(map(lambda x: x.split('-')[7], desks))\n    desks = list(map(lambda x: x.split('*')[7], desks))\n    desks = list(map(lambda x: x.split('-')[8], desks))\n    desks = list(map(lambda x: x.split('*')[8], desks))\n    desks = list(map(lambda x: x.split('-')[9], desks))\n    desks = list(map(lambda x: x.split('*')[9], desks))\n    desks = list(map(lambda x: x.split('-')[10], desks))\n    desks = list(map(lambda x: x.split('*')[10], desks))\n    desks = list(map(lambda x: x.split('-')[11], desks))\n    desks = list(map(lambda x: x.split('*')[11], desks))\n    desks = list(map(lambda x: x.split('-')[12], desks))\n    desks = list(map(lambda x: x.split('*')[12], desks))\n    desks = list(map(lambda x: x.split('-')[13], desks))\n    desks = list(map(lambda x: x.split('*')[13], desks))\n    desks = list(map(lambda x: x.split('-')[14], desks))\n    desks = list(map(lambda x: x.split('*')[14], desks))\n    desks = list(map(lambda x: x.split('-')[15], desks))\n    desks = list(map(lambda x: x.split('*')[15], desks))\n    desks = list(map(lambda x: x.split('-')[16], desks))\n    desks = list(map(lambda x: x.split('*')[16], desks))\n    desks = list(map(lambda x: x.split('-')[17], desks))\n    desks = list(map(lambda x: x.split('*')[17], desks))\n    desks = list(map(lambda x: x.split('-')[18], desks))\n    desks = list(map(lambda x: x.split('*')[18], desks))\n    desks = list(map(lambda x: x.split('-')[19], desks))\n    desks = list(map(lambda x: x.split('*')[19], desks))\n    desks = list(map(lambda x: x.split('-')[20], desks))\n    desks = list(map(lambda x: x.split('*')[20], desks))\n    desks = list(map(lambda x: x.split('-')[21], desks))\n    desks = list(map(lambda x: x.split('*')[21], desks))\n    desks = list(map(lambda x: x.split('-')[22], desks))\n    desks = list(map(lambda x: x.split('*')[22], desks))\n    desks = list(map(lambda x: x.split('-')[23], desks))\n    desks = list(map(lambda x: x.split('*')[23], desks))\n    desks = list(map(lambda x: x.split('-')[24], desks))\n    desks = list(map(lambda x: x.split('*')[24], desks))\n    desks = list(map(lambda x: x.split('-')[25], desks))\n    desks = list(map(lambda x: x.split('*')[25], desks))\n    desks = list(map(lambda x: x.split('-')[26], desks))\n    desks = list(map(lambda x: x.split('*')[26], desks))\n    desks = list(map(lambda x: x.split('-')[27], desks))\n    desks = list(map(lambda x: x.split('*')[27], desks))\n    desks = list(map(lambda x: x.split('-')[28], desks))\n    desks = list(map(lambda x: x.split('*')[28], desks))\n    "
    },
    {
        "number": 989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[-1] - a[0])"
    },
    {
        "number": 990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    M = int(stdin.split()[1])\n    edges = []\n    for i in range(N):\n        edges.append(list(map(int, stdin.split()[2*i+2].split())))\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    print(edges)\n    print(len(edges))\n    print(len(edges) - 1)\n    print(len(edges) - 2)\n    print(len(edges) - 3)\n    print(len(edges) - 4)\n    print(len(edges) - 5)\n    print(len(edges) - 6)\n    print(len(edges) - 7)\n    print(len(edges) - 8)\n    print(len(edges) - 9)\n    print(len(edges) - 10)\n    print(len(edges) - 11)\n    print(len(edges) - 12)\n    print(len(edges) - 13)\n    print(len(edges) - 14)\n    print(len(edges) - 15)\n    print(len(edges) - 16)\n    print(len(edges) - 17)\n    print(len(edges) - 18)\n    print(len(edges) - 19)\n    print(len(edges) - 20)\n    print(len(edges) - 21)\n    print(len(edges) - 22)\n    print(len(edges) - 23)\n    print(len(edges) - 24)\n    print(len(edges) - 25)\n    print(len(edges) - 26)\n    print(len(edges) - 27)\n    print(len(edges) - 28)\n    print(len(edges) - 29)\n    print(len(edges) - 30)\n    print(len(edges) - 31)\n    print(len(edges) - 32)\n    print(len(edges) - 33)\n    print(len(edges) - 34)\n    print(len(edges) - 35)\n    print(len(edges) - 36)\n    print(len(edges) - 37)\n    print(len(edges) - 38)\n    print(len(edges) - 39)\n    print(len(edges) - 40)\n    print(len(edges) - 41)\n    print(len(edges) - 42)\n    print(len(edges) - 43)\n    print(len(edges) - 44)\n    print(len(edges) - 45)\n    print(len(edges) - 46)\n    print(len(edges) - 47)\n    print(len(edges) - 48)\n    print(len(edges) - 49)\n    print(len(edges) - 50)\n    print(len(edges) - 51)\n    print(len(edges) - 52)\n    print(len(edges) - 53)\n    print(len(edges) - 54)\n    print(len(edges) - 55)\n    print(len(edges) - 56)\n    print(len(edges) - 57)\n    print(len(edges) - 58)\n    print(len(edges) - 59)\n    print(len(edges) - 60)\n    print(len(edges) - 61)\n    print(len(edges) - 62)\n    print(len(edges) - 63)\n    print(len(edges) - 64)\n    print(len(edges) - 65)\n    print(len(edges) - 66)\n    print(len(edges) - 67)\n    print(len(edges) - 68)\n    print(len(edges) - 69)\n    print(len(edges) - 70)\n    print(len(edges) - 71)\n    print(len(edges) - 72)\n    print(len(edges) - 73)\n    print(len(edges) - 74)\n    print(len(edges) - 75)\n    print(len(edges) - 76)\n    print(len(edges) - 77)\n    print(len(edges) - 78)\n    print(len(edges) - 79)\n    print(len(edges) - 80)\n    print(len(edges) - 81)\n    print(len(edges) - 82)\n    print(len(edges) - 83)\n    print(len(edges) - 84)\n    print(len(edges) - 85)\n    print(len(edges) - 86)\n    print(len(edges) - 87)\n    print(len(edges) - 88)\n    print(len(edges) - 89)\n    print(len(edges) - 90)\n    print(len(edges) - 91)\n    print(len(edges) - 92)\n    print(len(edges) - 93)\n    print(len(edges) - 94)\n    print(len(edges) - 95)\n    print(len(edges) - 96)\n    print(len(edges) - 97)\n    print(len(edges) - 98)\n    print(len(edges) - 99)\n    print(len(edges) - 100)\n    print(len(edges) - 101)\n    print(len(edges) - 102)\n    print(len(edges) - 103)\n    print(len(edges) - 104)\n    print(len(edges) - 105)\n    print(len(edges) - 106)\n    print(len(edges) - 107)\n    print(len(edges) - 108)\n    print(len(edges) - 109)\n    print(len(edges) - 110)\n    print(len(edges) - 111)\n    print(len(edges) - 112)\n    print(len(edges) - 113)\n    print(len(edges) - 114)\n    print(len(edges) - 115)\n    print(len(edges) - 116)\n    print(len(edges) - 117)\n    print(len(edges) - 118)\n    print(len(edges) - 119)\n    print(len(edges) - 120)\n    print(len(edges) - 121)\n    print(len(edges) - 122)\n    print(len(edges) - 123)\n    print(len(edges) - 124)"
    },
    {
        "number": 991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, a, b = map(int, stdin.split())\n        graph[u].append((v, a, b))\n        graph[v].append((u, a, b))\n    # print(graph)\n    # print(n, m, s)\n    # print(graph)\n    # print(graph[1])\n    # print(graph[2])\n    # print(graph[3])\n    # print(graph[4])\n    # print(graph[5])\n    # print(graph[6])\n    # print(graph[7])\n    # print(graph[8])\n    # print(graph[9])\n    # print(graph[10])\n    # print(graph[11])\n    # print(graph[12])\n    # print(graph[13])\n    # print(graph[14])\n    # print(graph[15])\n    # print(graph[16])\n    # print(graph[17])\n    # print(graph[18])\n    # print(graph[19])\n    # print(graph[20])\n    # print(graph[21])\n    # print(graph[22])\n    # print(graph[23])\n    # print(graph[24])\n    # print(graph[25])\n    # print(graph[26])\n    # print(graph[27])\n    # print(graph[28])\n    # print(graph[29])\n    # print(graph[30])\n    # print(graph[31])\n    # print(graph[32])\n    # print(graph[33])\n    # print(graph[34])\n    # print(graph[35])\n    # print(graph[36])\n    # print(graph[37])\n    # print(graph[38])\n    # print(graph[39])\n    # print(graph[40])\n    # print(graph[41])\n    # print(graph[42])\n    # print(graph[43])\n    # print(graph[44])\n    # print(graph[45])\n    # print(graph[46])\n    # print(graph[47])\n    # print(graph[48])\n    # print(graph[49])\n    # print(graph[50])\n    # print(graph[51])\n    # print(graph[52])\n    # print(graph[53])\n    # print(graph[54])\n    # print(graph[55])\n    # print(graph[56])\n    # print(graph[57])\n    # print(graph[58])\n    # print(graph[59])\n    # print(graph[60])\n    # print(graph[61])\n    # print(graph[62])\n    # print(graph[63])\n    # print(graph[64])\n    # print(graph[65])\n    # print(graph[66])\n    # print(graph[67])\n    # print(graph[68])\n    # print(graph[69])\n    # print(graph[70])\n    # print(graph[71])\n    # print(graph[72])\n    # print(graph[73])\n    # print(graph[74])\n    # print(graph[75])\n    # print(graph[76])\n    # print(graph[77])\n    # print(graph[78])\n    # print(graph[79])\n    # print(graph[80])\n    # print(graph[81])\n    # print(graph[82])\n    # print(graph[83])\n    # print(graph[84])\n    # print(graph[85])\n    # print(graph[86])\n    # print(graph[87])\n    # print(graph[88])\n    # print(graph[89])\n    # print(graph[90])\n    # print(graph[91])\n    # print(graph[92])\n    # print(graph[93])\n    # print(graph[94])\n    # print(graph[95])\n    # print(graph[96])\n    # print(graph[97])\n    # print(graph[98])\n    # print(graph[99])\n    # print(graph[100])\n    # print(graph[101])\n    # print(graph[102])\n    # print(graph[103])\n    # print(graph[104])\n    # print(graph[105])\n    # print(graph[106])\n    # print(graph[107])\n    # print(graph[108])\n    # print(graph[109])\n    # print(graph[110])\n    # print(graph[111])\n    # print(graph[112])\n    # print(graph[113])\n    # print(graph[114])\n    # print(graph[115])\n    # print(graph[116])\n    # print(graph[117])\n    # print(graph[118])\n    # print(graph[119])\n    # print(graph[120])\n    # print(graph[121])\n    # print(graph[122])\n    # print(graph[123])\n    # print(graph[124])\n    # print(graph[125])\n    # print(graph[126])\n    # print(graph[127])\n    # print(graph[128])\n    # print(graph[129])\n    # print(graph[130])\n    # print(graph[131])\n    # print(graph[132])\n    # print"
    },
    {
        "number": 992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1 << n):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(a[j])\n        if sum(subset) == s:\n            res += 1\n    return str(res % 998244353)"
    },
    {
        "number": 993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] % m == 0:\n                res += 1\n    return str(res)"
    },
    {
        "number": 994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    notes = []\n    for _ in range(m):\n        d, h = map(int, stdin.split())\n        notes.append((d, h))\n    notes.sort()\n    if len(notes) == 1:\n        return 'IMPOSSIBLE'\n    max_height = 0\n    for i in range(1, len(notes)):\n        if notes[i][0] - notes[i - 1][0] > 1:\n            return 'IMPOSSIBLE'\n        max_height = max(max_height, notes[i][1])\n    return str(max_height)\n"
    },
    {
        "number": 995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if is_square(arr[i:j+1]):\n                ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    blocks = []\n    for _ in range(n):\n        blocks.append(stdin.split())\n    critical = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(k):\n                if blocks[i][j][k] == '1':\n                    if (i + 1, j, k) not in blocks:\n                        critical += 1\n                    if (i, j + 1, k) not in blocks:\n                        critical += 1\n                    if (i, j, k + 1) not in blocks:\n                        critical += 1\n    return str(critical)\n"
    },
    {
        "number": 997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    words = s.split(';')\n    a = ''\n    b = ''\n    for word in words:\n        if word.count(',') == 0:\n            a += word\n        else:\n            b += word\n    if a == '':\n        return '-'\n    else:\n        return a + ',' + b"
    },
    {
        "number": 998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n == 1:\n        return str(x)\n    if n == 2:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x)\n    if n == 3:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x)\n    if n == 4:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 5:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 6:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 7:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 8:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 9:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 10:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 11:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 12:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 13:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 14:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 15:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 16:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 17:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 18:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 19:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x)\n    if n == 20:\n        if x == 0:\n            return str(x)\n        else:\n            return str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str(x) +'' + str("
    },
    {
        "number": 999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    chess_periods = stdin.split()[1:]\n    m = int(stdin.split()[0])\n    programming_periods = stdin.split()[1:]\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.insert(0, chess_periods[0] - 1)\n    programming_periods.insert(0, programming_periods[0] - 1)\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods.sort()\n    programming_periods.sort()\n    chess_periods.append(chess_periods[-1] + 1)\n    programming_periods.append(programming_periods[-1] + 1)\n    chess_periods"
    },
    {
        "number": 1000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 1001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stickers = list(map(int, stdin.split()))\n    score_petya = 0\n    score_gena = 0\n    for i in range(n):\n        if i % 2 == 0:\n            score_petya += stickers[i]\n        else:\n            score_gena += stickers[i]\n    return str(score_petya - score_gena)"
    },
    {
        "number": 1002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    if n > 10 or d > 10000 or sum(t) > 100000:\n        return -1\n    t.sort()\n    j = 0\n    for i in range(n):\n        if t[i] > d:\n            return -1\n        if j == 0:\n            j = t[i]\n        else:\n            j = min(j, t[i])\n    return j"
    },
    {
        "number": 1003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * (n + 1) // 2 - m * (m + 1) // 2)"
    },
    {
        "number": 1004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(-1)\n    if n == 4:\n        return str(-1)\n    if n == 5:\n        return str(-1)\n    if n == 6:\n        return str(-1)\n    if n == 7:\n        return str(-1)\n    if n == 8:\n        return str(-1)\n    if n == 9:\n        return str(-1)\n    if n == 10:\n        return str(-1)\n    if n == 11:\n        return str(-1)\n    if n == 12:\n        return str(-1)\n    if n == 13:\n        return str(-1)\n    if n == 14:\n        return str(-1)\n    if n == 15:\n        return str(-1)\n    if n == 16:\n        return str(-1)\n    if n == 17:\n        return str(-1)\n    if n == 18:\n        return str(-1)\n    if n == 19:\n        return str(-1)\n    if n == 20:\n        return str(-1)\n    if n == 21:\n        return str(-1)\n    if n == 22:\n        return str(-1)\n    if n == 23:\n        return str(-1)\n    if n == 24:\n        return str(-1)\n    if n == 25:\n        return str(-1)\n    if n == 26:\n        return str(-1)\n    if n == 27:\n        return str(-1)\n    if n == 28:\n        return str(-1)\n    if n == 29:\n        return str(-1)\n    if n == 30:\n        return str(-1)\n    if n == 31:\n        return str(-1)\n    if n == 32:\n        return str(-1)\n    if n == 33:\n        return str(-1)\n    if n == 34:\n        return str(-1)\n    if n == 35:\n        return str(-1)\n    if n == 36:\n        return str(-1)\n    if n == 37:\n        return str(-1)\n    if n == 38:\n        return str(-1)\n    if n == 39:\n        return str(-1)\n    if n == 40:\n        return str(-1)\n    if n == 41:\n        return str(-1)\n    if n == 42:\n        return str(-1)\n    if n == 43:\n        return str(-1)\n    if n == 44:\n        return str(-1)\n    if n == 45:\n        return str(-1)\n    if n == 46:\n        return str(-1)\n    if n == 47:\n        return str(-1)\n    if n == 48:\n        return str(-1)\n    if n == 49:\n        return str(-1)\n    if n == 50:\n        return str(-1)\n    if n == 51:\n        return str(-1)\n    if n == 52:\n        return str(-1)\n    if n == 53:\n        return str(-1)\n    if n == 54:\n        return str(-1)\n    if n == 55:\n        return str(-1)\n    if n == 56:\n        return str(-1)\n    if n == 57:\n        return str(-1)\n    if n == 58:\n        return str(-1)\n    if n == 59:\n        return str(-1)\n    if n == 60:\n        return str(-1)\n    if n == 61:\n        return str(-1)\n    if n == 62:\n        return str(-1)\n    if n =="
    },
    {
        "number": 1005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k, d = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        a.sort()\n        a = a[:n]\n        print(a)\n        print(n, k, d)\n        print(a)\n        print(a[0], a[-1])\n        print(a[0] + a[-1])\n        print(a[0] + a[-1] - k)\n        print(a[0] + a[-1] - k - d)\n        print(a[0] + a[-1] - k - d - k)\n        print(a[0] + a[-1] - k - d - k - d)\n        print(a[0] + a[-1] - k - d - k - d - k)\n        print(a[0] + a[-1] - k - d - k - d - k - k)\n        print(a[0] + a[-1] - k - d - k - d - k - k - k)\n        print(a[0] + a[-1] - k - d - k - d - k - k - k - k - k)\n        print(a[0] + a[-1] - k - d - k - d - k - k - k - k - k - k - k - k)\n        print(a[0] + a[-1] - k - d - k - d - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k - k"
    },
    {
        "number": 1006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 5!= 0:\n        return \"NO\"\n    board = stdin.split(\"\\n\")\n    for i in range(n):\n        if \".\" in board[i]:\n            return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \".\":\n                board[i][j] = \"#\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"#\":\n                board[i][j] = \".\"\n    for"
    },
    {
        "number": 1007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p = map(int, stdin.split())\n    return str(sum(i for i in range(1, k + 1) if str(i).count('0') % 2 == 0) % p)"
    },
    {
        "number": 1008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.split()[1])\n    if k == 1:\n        return \"NO\"\n    for i in range(1, k + 1):\n        if is_palindrome(s[:i]):\n            if is_palindrome(s[i:]):\n                return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 1009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = sorted(map(int, stdin.split()))\n    return min(s[i] + s[i + 1] for i in range(n - 1))"
    },
    {
        "number": 1010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            elif a[i] == 0 and a[j] == 0:\n                dp[i][j] = dp[i + 1][j] + dp[i][j + 1]\n            elif a[i] == 0 and a[j] == 1:\n                dp[i][j] = dp[i + 1][j]\n            elif a[i] == 1 and a[j] == 0:\n                dp[i][j] = dp[i][j + 1]\n            else:\n                dp[i][j] = dp[i][j + 1] + dp[i + 1][j]\n    return str(dp[0][0])\n"
    },
    {
        "number": 1011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3:]))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    for i in range(n):\n        if a[i] + b[i] > b[i] + a[i]:\n            return str(a[i] - b[i]) + \":\" + str(b[i] - a[i])\n    return str(a[0] - b[0]) + \":\" + str(b[0] - a[0])"
    },
    {
        "number": 1012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        s = stdin.split()[i]\n        if is_palindrome(s):\n            print(s)\n        else:\n            print(-1)\n\ndef"
    },
    {
        "number": 1013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                table[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 0:\n                table[i][j] = min(table[i - 1][j], table[i][j - 1], table[i - 1][j - 1]) + 1\n    return str(table[n - 1][m - 1])\n"
    },
    {
        "number": 1014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"white\"\n    if n == 2:\n        return \"black\"\n    if n == 3:\n        return \"black\"\n    if n == 4:\n        return \"white\"\n    if n == 5:\n        return \"white\"\n    if n == 6:\n        return \"white\"\n    if n == 7:\n        return \"white\"\n    if n == 8:\n        return \"white\"\n    if n == 9:\n        return \"white\"\n    if n == 10:\n        return \"white\"\n    if n == 11:\n        return \"white\"\n    if n == 12:\n        return \"white\"\n    if n == 13:\n        return \"white\"\n    if n == 14:\n        return \"white\"\n    if n == 15:\n        return \"white\"\n    if n == 16:\n        return \"white\"\n    if n == 17:\n        return \"white\"\n    if n == 18:\n        return \"white\"\n    if n == 19:\n        return \"white\"\n    if n == 20:\n        return \"white\"\n    if n == 21:\n        return \"white\"\n    if n == 22:\n        return \"white\"\n    if n == 23:\n        return \"white\"\n    if n == 24:\n        return \"white\"\n    if n == 25:\n        return \"white\"\n    if n == 26:\n        return \"white\"\n    if n == 27:\n        return \"white\"\n    if n == 28:\n        return \"white\"\n    if n == 29:\n        return \"white\"\n    if n == 30:\n        return \"white\"\n    if n == 31:\n        return \"white\"\n    if n == 32:\n        return \"white\"\n    if n == 33:\n        return \"white\"\n    if n == 34:\n        return \"white\"\n    if n == 35:\n        return \"white\"\n    if n == 36:\n        return \"white\"\n    if n == 37:\n        return \"white\"\n    if n == 38:\n        return \"white\"\n    if n == 39:\n        return \"white\"\n    if n == 40:\n        return \"white\"\n    if n == 41:\n        return \"white\"\n    if n == 42:\n        return \"white\"\n    if n == 43:\n        return \"white\"\n    if n == 44:\n        return \"white\"\n    if n == 45:\n        return \"white\"\n    if n == 46:\n        return \"white\"\n    if n == 47:\n        return \"white\"\n    if n == 48:\n        return \"white\"\n    if n == 49:\n        return \"white\"\n    if n == 50:\n        return \"white\"\n    if n == 51:\n        return \"white\"\n    if n == 52:\n        return \"white\"\n    if n == 53:\n        return \"white\"\n    if n == 54:\n        return \"white\"\n    if n == 55:\n        return \"white\"\n    if n == 56:\n        return \"white\"\n    if n == 57:\n        return \"white\"\n    if n == 58:\n        return \"white\"\n    if n == 59:\n        return \"white\"\n    if n == 60:\n        return \"white\"\n    if n == 61:\n        return \"white\"\n    if n == 62:\n        return \"white\"\n    if n == 63:\n        return \"white\"\n    if n == 64:\n        return \"white\"\n    if n == 65:\n        return \"white\"\n    if n == 66:\n        return \"white\"\n    if n == 67:\n        return \"white\"\n    if n == 68:\n        return \"white\"\n    if n == 69:\n        return \"white\"\n    if n == 70:\n        return \"white\"\n    if n == 71:\n        return \"white\"\n    if n == 72:\n        return \"white\"\n    if n == 73:\n        return \"white\"\n    if n == 74:\n        return \"white\"\n    if n == 75:\n        return \"white\"\n    if n == 76:\n        return \"white\"\n    if n == 77:\n        return \"white\"\n    if n == 78:\n        return \"white\"\n    if n == 79:\n        return \"white\"\n    if n == 80:\n        return \"white\"\n    if n == 81:\n        return \"white\"\n    if n == 82:\n        return \"white\"\n    if n == 83:\n        return \"white\"\n    if n == 84:\n        return \"white\"\n    if n == 85:\n        return \"white\"\n    if n == 86:\n        return \"white\"\n    if n == 87:\n        return \"white\"\n    if n == 88:\n        return \"white\"\n    if n == 89:\n        return \"white\"\n    if n == 90:\n        return \"white\"\n    if n == 91:\n        return \"white\"\n    if n == 92:\n        return \"white\"\n    if n == 93:\n        return \"white\"\n    if n == 94:\n        return \"white\"\n    if n == 95:\n        return \"white\"\n    if n == 96:\n        return \"white\"\n    if n == 97:\n        return \"white\"\n    if n == 98:\n        return \"white\"\n    if n == 99:\n        return \"white\"\n    if n == 100:\n        return \"white\"\n    if n == 101:\n        return \"white"
    },
    {
        "number": 1015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == 0 and a[j] == 0:\n                continue\n            if a[i] == 1 and a[j] == 1:\n                continue\n            if a[i] == 1 and a[j] == 0:\n                res += 1\n            if a[i] == 0 and a[j] == 1:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 1016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    chemicals = list(map(int, stdin.split()))\n    chemicals.sort()\n    danger = 1\n    for i in range(1, n):\n        if chemicals[i] == chemicals[i - 1]:\n            danger *= 2\n        else:\n            danger = 1\n    return str(danger)"
    },
    {
        "number": 1017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    if n == 110:\n        return \"109\"\n    if n == 111:\n        return \"110\"\n    if n == 112:\n        return \"111\"\n    if n == 113:\n        return \"112\"\n    if n == 114:\n        return \"113\"\n    if n == 115:\n        return \"114\"\n    if n == 116:\n        return \"115\"\n    if n == 117:\n        return \"116\"\n    if n == 118:\n        return \"117\"\n    if n == 119:\n        return \"118\"\n    if n == 120:\n        return \"119\"\n    if n == 121:\n        return \"120\"\n    if n == 122:\n        return \"121\"\n    if n == 123:\n        return \"122\"\n    if n == 124:\n        return \"123\"\n    if n == 125:\n        return \"124\"\n    if n == 126:\n        return \"125\"\n    if n == 127:\n        return \"126\"\n    if n == 128:\n        return \"127\"\n    if n == 129:\n        return \"128\"\n    if n == 130"
    },
    {
        "number": 1018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pens = list(map(int, stdin.split()))\n    pens.sort()\n    print(pens)\n    for i in range(1, n):\n        if pens[i] - pens[i - 1] > 1:\n            return str(i)\n    return str(pens[0])"
    },
    {
        "number": 1019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j == n:\n                return str(i) + \" \" + str(j)"
    },
    {
        "number": 1020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, k = map(int, stdin.split())\n    return str(w * h * k)"
    },
    {
        "number": 1021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1]))\n    t = list(map(int, stdin.split()[2]))\n    c = sorted(c)\n    t = sorted(t)\n    if c == t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    r = list(map(int, stdin.split()))\n    l.sort()\n    r.sort()\n    if l == r:\n        return \"YES\"\n    for i in range(n):\n        if l[i] < r[i]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t_a, t_b, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a = tuple(a)\n    b = tuple(b)\n    if a[0] > t_a or b[0] > t_b:\n        return -1\n    if k > n + m:\n        return -1\n    if k == 0:\n        return max(t_a, t_b)\n    if k == 1:\n        if a[0] <= t_a <= b[0]:\n            return t_a\n        else:\n            return -1\n    if k == 2:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1]:\n            return t_a\n        else:\n            return -1\n    if k == 3:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2]:\n            return t_a\n        else:\n            return -1\n    if k == 4:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3]:\n            return t_a\n        else:\n            return -1\n    if k == 5:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3] and a[4] <= t_a <= b[4]:\n            return t_a\n        else:\n            return -1\n    if k == 6:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3] and a[4] <= t_a <= b[4] and a[5] <= t_a <= b[5]:\n            return t_a\n        else:\n            return -1\n    if k == 7:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3] and a[4] <= t_a <= b[4] and a[5] <= t_a <= b[5] and a[6] <= t_a <= b[6]:\n            return t_a\n        else:\n            return -1\n    if k == 8:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3] and a[4] <= t_a <= b[4] and a[5] <= t_a <= b[5] and a[6] <= t_a <= b[6] and a[7] <= t_a <= b[7]:\n            return t_a\n        else:\n            return -1\n    if k == 9:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3] and a[4] <= t_a <= b[4] and a[5] <= t_a <= b[5] and a[6] <= t_a <= b[6] and a[7] <= t_a <= b[7] and a[8] <= t_a <= b[8]:\n            return t_a\n        else:\n            return -1\n    if k == 10:\n        if a[0] <= t_a <= b[0] and a[1] <= t_a <= b[1] and a[2] <= t_a <= b[2] and a[3] <= t_a <= b[3] and a[4] <= t_a"
    },
    {
        "number": 1024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(1, n):\n        b.append(a[i] - a[i - 1])\n    return str(sum(b) / max(1, b[0]))"
    },
    {
        "number": 1025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                continue\n            if points[i][0] == points[j][1] or points[i][1] == points[j][0]:\n                continue\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 1026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    return str(max(sum(b[i] - b[i - 1] for i in range(1, n)) for i in range(1, n)))"
    },
    {
        "number": 1027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(max(a))"
    },
    {
        "number": 1028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return f\"{min(n, m)}{max(n, m)}\""
    },
    {
        "number": 1029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \""
    },
    {
        "number": 1030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    if 1 <= p <= n and 1 <= k <= n and k!= p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    elif 1 <= p <= n and k == p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    elif 1 <= p <= n and k!= p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    elif n == p and k == p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    elif n == p and k!= p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    elif n!= p and k == p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    elif n!= p and k!= p:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\"\n    else:\n        return f\"{p - k} {p - k + 1} {p - 1} {p + 1} {p + 1} {p + k - 1} {p + k}\""
    },
    {
        "number": 1031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = list(map(str, a))\n    a = ''.join(a)\n    return a"
    },
    {
        "number": 1032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    good = 0\n    for x in range(1, n + 1):\n        if x % p == 0:\n            good += 1\n    return str(good)\n"
    },
    {
        "number": 1033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    return str(min(n, h))"
    },
    {
        "number": 1034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z, K = map(int, stdin.split())\n    A = sorted(map(int, stdin.split()), reverse=True)\n    B = sorted(map(int, stdin.split()), reverse=True)\n    C = sorted(map(int, stdin.split()), reverse=True)\n    result = []\n    for i in range(K):\n        result.append(sum(A[i:i+3]))\n        result.append(sum(B[i:i+3]))\n        result.append(sum(C[i:i+3]))\n    return '\\n'.join(map(str, sorted(result, reverse=True)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(1, A // 2, B // 2, A * B // 2))"
    },
    {
        "number": 1036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    return \"P\" if s.count(\"R\") > s.count(\"S\") else \"S\" if s.count(\"P\") > s.count(\"R\") else \"R\""
    },
    {
        "number": 1037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    max_happiness = 0\n    for i in range(N):\n        max_happiness += A[i] * abs(i - A[i])\n    return str(max_happiness)"
    },
    {
        "number": 1038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(bin(A ^ B).count('1'))"
    },
    {
        "number": 1039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    graph = [[] for _ in range(n)]\n    for i in range(n-1):\n        a, b, c = map(int, stdin.split()[i*3+1:i*3+3])\n        graph[a-1].append((b-1, c))\n        graph[b-1].append((a-1, c))\n    q = int(stdin.split()[n*3])\n    k = int(stdin.split()[n*3+1])\n    x, y = map(int, stdin.split()[n*3+2:n*3+4])\n    x -= 1\n    y -= 1\n    dist = [float('inf')] * n\n    dist[x] = 0\n    q = deque([(x, 0)])\n    while q:\n        v, d = q.popleft()\n        for u, c in graph[v]:\n            if dist[u] > dist[v] + c:\n                dist[u] = dist[v] + c\n                q.append((u, dist[u]))\n    return dist[y]"
    },
    {
        "number": 1040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.strip()\n    return min(len(s), len(s) - s.count('f') + 1)"
    },
    {
        "number": 1041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"NO\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"NO\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"NO\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"NO\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"NO\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"NO\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"NO\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"NO\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"NO\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"NO\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"NO\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"NO\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"NO\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return \"NO\"\n    if n == 119:\n        return \"YES\"\n    if n == 120:\n        return \"NO\"\n    if n == 121:\n        return \"YES\"\n    if n == 122:\n        return \"NO\"\n    if n == 123:\n        return \"YES\"\n    if n == 124:\n        return \"NO\"\n    if n == 125:\n        return \"YES\"\n    if n == 126:\n        return \"NO\"\n    if n == 127:\n        return \"YES\"\n    if n == 128:\n        return \"NO"
    },
    {
        "number": 1042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(gcd(x, y))\n"
    },
    {
        "number": 1043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == -1:\n        return 0\n    else:\n        return sum(a)"
    },
    {
        "number": 1044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        if len(a) == 1:\n            print(1)\n            return\n        if len(a) == 2:\n            print(2)\n            return\n        if len(a) == 3:\n            print(2)\n            return\n        if len(a) == 4:\n            print(2)\n            return\n        if len(a) == 5:\n            print(2)\n            return\n        if len(a) == 6:\n            print(2)\n            return\n        if len(a) == 7:\n            print(2)\n            return\n        if len(a) == 8:\n            print(2)\n            return\n        if len(a) == 9:\n            print(2)\n            return\n        if len(a) == 10:\n            print(2)\n            return\n        if len(a) == 11:\n            print(2)\n            return\n        if len(a) == 12:\n            print(2)\n            return\n        if len(a) == 13:\n            print(2)\n            return\n        if len(a) == 14:\n            print(2)\n            return\n        if len(a) == 15:\n            print(2)\n            return\n        if len(a) == 16:\n            print(2)\n            return\n        if len(a) == 17:\n            print(2)\n            return\n        if len(a) == 18:\n            print(2)\n            return\n        if len(a) == 19:\n            print(2)\n            return\n        if len(a) == 20:\n            print(2)\n            return\n        if len(a) == 21:\n            print(2)\n            return\n        if len(a) == 22:\n            print(2)\n            return\n        if len(a) == 23:\n            print(2)\n            return\n        if len(a) == 24:\n            print(2)\n            return\n        if len(a) == 25:\n            print(2)\n            return\n        if len(a) == 26:\n            print(2)\n            return\n        if len(a) == 27:\n            print(2)\n            return\n        if len(a) == 28:\n            print(2)\n            return\n        if len(a) == 29:\n            print(2)\n            return\n        if len(a) == 30:\n            print(2)\n            return\n        if len(a) == 31:\n            print(2)\n            return\n        if len(a) == 32:\n            print(2)\n            return\n        if len(a) == 33:\n            print(2)\n            return\n        if len(a) == 34:\n            print(2)\n            return\n        if len(a) == 35:\n            print(2)\n            return\n        if len(a) == 36:\n            print(2)\n            return\n        if len(a) == 37:\n            print(2)\n            return\n        if len(a) == 38:\n            print(2)\n            return\n        if len(a) == 39:\n            print(2)\n            return\n        if len(a) == 40:\n            print(2)\n            return\n        if len(a) == 41:\n            print(2)\n            return\n        if len(a) == 42:\n            print(2)\n            return\n        if len(a) == 43:\n            print(2)\n            return\n        if len(a) == 44:\n            print(2)\n            return\n        if len(a) == 45:\n            print(2)\n            return\n        if len(a) == 46:\n            print(2)\n            return\n        if len(a) == 47:\n            print(2)\n            return\n        if len(a) == 48:\n            print(2)\n            return\n        if len(a) == 49:\n            print(2)\n            return\n        if len(a) == 50:\n            print(2)\n            return\n        if len(a) == 51:\n            print(2)\n            return\n        if len(a) == 52:\n            print(2)\n            return\n        if len(a) == 53:\n            print(2)\n            return\n        if len(a) == 54:\n            print(2)\n            return\n        if len(a) == 55:\n            print(2)\n            return\n        if len(a) == 56:\n            print(2)\n            return\n        if len(a) == 57:\n            print(2)\n            return\n        if len(a) == 58:\n            print(2)\n            return\n        if len(a) == 59:\n            print(2)\n            return\n        if len(a) =="
    },
    {
        "number": 1045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n + 1 + 2 * (n + 1) + 3 * (n + 1) + 4 * (n + 1) + 5 * (n + 1) + 6 * (n + 1))"
    },
    {
        "number": 1046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    s = list(map(int, s))\n    s = sorted(s)\n    s = list(map(str, s))\n    s =''.join(s)\n    return s"
    },
    {
        "number": 1047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"10\"\n    if n == 3:\n        return \"11\"\n    if n == 4:\n        return \"100\"\n    if n == 5:\n        return \"101\"\n    if n == 6:\n        return \"110\"\n    if n == 7:\n        return \"111\"\n    if n == 8:\n        return \"1000\"\n    if n == 9:\n        return \"1001\"\n    if n == 10:\n        return \"1010\"\n    if n == 11:\n        return \"1011\"\n    if n == 12:\n        return \"1100\"\n    if n == 13:\n        return \"1101\"\n    if n == 14:\n        return \"1110\"\n    if n == 15:\n        return \"1111\"\n    if n == 16:\n        return \"10000\"\n    if n == 17:\n        return \"10001\"\n    if n == 18:\n        return \"10010\"\n    if n == 19:\n        return \"10011\"\n    if n == 20:\n        return \"10100\"\n    if n == 21:\n        return \"10101\"\n    if n == 22:\n        return \"10110\"\n    if n == 23:\n        return \"10111\"\n    if n == 24:\n        return \"11000\"\n    if n == 25:\n        return \"11001\"\n    if n == 26:\n        return \"11010\"\n    if n == 27:\n        return \"11011\"\n    if n == 28:\n        return \"11100\"\n    if n == 29:\n        return \"11101\"\n    if n == 30:\n        return \"11110\"\n    if n == 31:\n        return \"11111\"\n    if n == 32:\n        return \"1000000\"\n    if n == 33:\n        return \"1000001\"\n    if n == 34:\n        return \"1000010\"\n    if n == 35:\n        return \"1000011\"\n    if n == 36:\n        return \"10001000\"\n    if n == 37:\n        return \"10001001\"\n    if n == 38:\n        return \"10001010\"\n    if n == 39:\n        return \"10001011\"\n    if n == 40:\n        return \"10001100\"\n    if n == 41:\n        return \"10001101\"\n    if n == 42:\n        return \"10001110\"\n    if n == 43:\n        return \"10001111\"\n    if n == 44:\n        return \"10010000\"\n    if n == 45:\n        return \"10010001\"\n    if n == 46:\n        return \"10010010\"\n    if n == 47:\n        return \"10010011\"\n    if n == 48:\n        return \"10010100\"\n    if n == 49:\n        return \"10010101\"\n    if n == 50:\n        return \"10010110\"\n    if n == 51:\n        return \"10010111\"\n    if n == 52:\n        return \"100110000\"\n    if n == 53:\n        return \"100110001\"\n    if n == 54:\n        return \"100110010\"\n    if n == 55:\n        return \"100110011\"\n    if n == 56:\n        return \"100110100\"\n    if n == 57:\n        return \"100110101\"\n    if n == 58:\n        return \"100110110\"\n    if n == 59:\n        return \"100110111\"\n    if n == 60:\n        return \"100111000\"\n    if n == 61:\n        return \"100111001\"\n    if n == 62:\n        return \"100111010\"\n    if n == 63:\n        return \"100111011\"\n    if n == 64:\n        return \"100111100\"\n    if n == 65:\n        return \"100111101\"\n    if n == 66:\n        return \"100111110\"\n    if n == 67:\n        return \"100111111\"\n    if n == 68:\n        return \"100000000\"\n    if n == 69:\n        return \"100001001\"\n    if n == 70:\n        return \"100001010\"\n    if n == 71:\n        return \"100001011\"\n    if n == 72:\n        return \"100001100\"\n    if n == 73:\n        return \"100001101\"\n    if n == 74:\n        return \"100001110\"\n    if n == 75:\n        return \"100001111\"\n    if n == 76:\n        return \"100010000\"\n    if n == 77:\n        return \"100010001\"\n    if n == 78:\n        return \"100010010\"\n    if n == 79:\n        return \"100010011\"\n    if n == 80:\n        return \"100010100\"\n    if n == 81:\n        return \"100010101\"\n    if n == 82:\n        return \"100010110\"\n    if n == 83:\n        return \"100010111\"\n    if n == 84:\n        return \"100011000\"\n    if n == 85:\n        return \"100011001\"\n    if n == 86:\n        return \"100011010\"\n    if n == 87:\n        return \"100011011\"\n    if n == 88:\n        return \"100011100\"\n    if n == 89:\n        return \"100011101\"\n    if n == 90:\n        return \"100011110\"\n    if n == 91:\n        return \"100011111\"\n    if n == 92:\n        return \"10010000\"\n    if n == 93:\n        return \"10010001\"\n    if n == 94:\n        return \"10010010\"\n    if n == 95:\n        return \"10010011\"\n    if n == 96:\n        return \"10010100\"\n    if n == 97:\n        return \"10010101\"\n    if n == 98:\n        return \"10010110\"\n    if n == 99:\n        return \"10010111\"\n    if n == 100:\n        return \"100110000\"\n    if n == 101:\n        return \"100110001\"\n    if n == 102:\n        return \"100110010\"\n    if n == 103:\n        return \"100110011\"\n    if n == 104:\n        return \"100110100\"\n    if n == 105:\n        return \"100110101\"\n    if n == 106:\n        return \"100110110\"\n    if n == 107:\n        return \"100110111\"\n    if n == 108:\n        return \"100111000\"\n    if n == 109:\n        return \"100111001\"\n    if n == 110:\n        return \"100111010\"\n    if n == 111:\n        return \"100111011\"\n    if n == 112:\n        return \"100111100\"\n    if n == 113:\n        return \"100111101\"\n    if n == 114:\n        return \"100111110\"\n    if n == 115:\n        return \"100111111\"\n    if n == 116:\n        return \"10100000\"\n    if n == 117:\n        return \"10100001\"\n    if n == 118:\n        return \"10100010\"\n    if n == 119:\n        return \"10100011\"\n    if n == 120:\n        return \"10100100\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    x = 0\n    y = 0\n    count = 0\n    for i in sequence:\n        if i == \"U\":\n            x += 1\n        elif i == \"D\":\n            x -= 1\n        elif i == \"L\":\n            y -= 1\n        elif i == \"R\":\n            y += 1\n        if x == 0 and y == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    opponents = list(map(int, stdin.split()))\n    days = [0] * d\n    for i in range(d):\n        days[i] = 1 if opponents[i] else 0\n    for i in range(d, n):\n        days[i % d] = 1 if days[(i - d) % d] else 0\n    return str(sum(days))"
    },
    {
        "number": 1050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n >= m and n >= k:\n        return \"Yes\"\n    elif m >= n and m >= k:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    ranks = list(map(int, stdin.split()[1:]))\n    ranks.sort()\n    count = 0\n    for i in range(1, k + 1):\n        if ranks[i - 1] == i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(1 for i in range(1, n + 1) if i not in range(n - k, n + 1)))\n"
    },
    {
        "number": 1053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            graph[i].append(j)\n            graph[j].append(i)\n    return str(min_spanning_tree(graph))\n\n\ndef"
    },
    {
        "number": 1054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mines = []\n    for i in range(n):\n        mines.append(list(map(int, stdin.split())))\n    mines.sort(key=lambda x: x[0])\n    mines.sort(key=lambda x: x[1])\n    mines.sort(key=lambda x: x[0] * x[1])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19] * x[20])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19] * x[20] * x[21])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19] * x[20] * x[21] * x[22])\n    mines.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] *"
    },
    {
        "number": 1055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(1)\n    if n == 6:\n        return str(1)\n    if n == 7:\n        return str(1)\n    if n == 8:\n        return str(1)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(1)\n    if n == 11:\n        return str(1)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(1)\n    if n == 14:\n        return str(1)\n    if n == 15:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(1)\n    if n == 19:\n        return str(1)\n    if n == 20:\n        return str(1)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(1)\n    if n == 24:\n        return str(1)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(1)\n    if n == 30:\n        return str(1)\n    if n == 31:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(1)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(1)\n    if n == 37:\n        return str(1)\n    if n == 38:\n        return str(1)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(1)\n    if n == 41:\n        return str(1)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(1)\n    if n == 45:\n        return str(1)\n    if n == 46:\n        return str(1)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(1)\n    if n == 51:\n        return str(1)\n    if n == 52:\n        return str(1)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(1)\n    if n == 55:\n        return str(1)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(1)\n    if n == 59:\n        return str(1)\n    if n == 60:\n        return str(1)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(1)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(1)\n    if n == 69:\n        return str(1)\n    if n == 70:\n        return str(1)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(1)\n    if n == 78:\n        return str(1)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(1)\n    if n == 81:\n        return str(1)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(1)\n    if n == 89:\n        return str(1)\n    if n == 90:\n        return str(1)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str(1)\n    if n == 99:\n        return str(1)\n    if n == 100:\n        return str(1)\n    if n == 101:\n        return str(1)\n    if n == 102:\n        return str(1)\n    if n == 103:\n        return str(1)\n    if n == 104:\n        return str(1)\n    if n == 105:\n        return str(1)\n    if n == 106:\n        return str(1)\n    if n == 107:\n        return str(1)\n    if n == 108:\n        return str(1)\n    if n == 109:\n        return str(1)\n    if n == 110:\n        return str(1)\n    if n == 111:\n        return str(1)\n    if n == 112:\n        return str(1)\n    if n == 113:\n        return str(1)\n    if n == 114:\n        return str(1)\n    if n == 115:\n        return str(1)\n    if n == 116:\n        return str(1)\n    if n == 117"
    },
    {
        "number": 1056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    height = []\n    for i in range(len(board)):\n        height.append(int(board[i]))\n    height.sort()\n    height.reverse()\n    print(height)\n    return str(len(height) - 1)"
    },
    {
        "number": 1057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n =="
    },
    {
        "number": 1058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    blocks = []\n    for i in range(n):\n        blocks.append(stdin.split()[i*2:i*2+2])\n    blocks = sorted(blocks, key=lambda x: (x[0], x[1]))\n    blocks = sorted(blocks, key=lambda x: (x[2], x[1]))\n    blocks = sorted(blocks, key=lambda x: (x[0], x[1]))\n    return str(sum([int(x[1]) for x in blocks]))"
    },
    {
        "number": 1059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return '-1'\n    grid = [['a', 'e', 'i', 'o', 'u'],\n            ['a', 'e', 'i', 'o', 'u'],\n            ['a', 'e', 'i', 'o', 'u'],\n            ['a', 'e', 'i', 'o', 'u'],\n            ['a', 'e', 'i', 'o', 'u'],\n            ['a', 'e', 'i', 'o', 'u']]\n    for i in range(6):\n        for j in range(6):\n            if grid[i][j] == 'a':\n                for k in range(1, k + 1):\n                    if i + k < 6 and j + k < 6:\n                        if grid[i + k][j] == 'a':\n                            if grid[i + k][j + k] == 'a':\n                                if grid[i + k][j + k + k] == 'a':\n                                    if grid[i + k + k][j + k + k] == 'a':\n                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                        if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                    if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                       if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                         if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k][j + k + k] == 'a':\n                                                                                                                                                            if grid[i + k + k + k"
    },
    {
        "number": 1060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = set(a)\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return 1\n    if len(a) == 3:\n        return 2\n    if len(a) == 4:\n        return 3\n    if len(a) == 5:\n        return 4\n    if len(a) == 6:\n        return 5\n    if len(a) == 7:\n        return 6\n    if len(a) == 8:\n        return 7\n    if len(a) == 9:\n        return 8\n    if len(a) == 10:\n        return 9\n    if len(a) == 11:\n        return 10\n    if len(a) == 12:\n        return 11\n    if len(a) == 13:\n        return 12\n    if len(a) == 14:\n        return 13\n    if len(a) == 15:\n        return 14\n    if len(a) == 16:\n        return 15\n    if len(a) == 17:\n        return 16\n    if len(a) == 18:\n        return 17\n    if len(a) == 19:\n        return 18\n    if len(a) == 20:\n        return 19\n    if len(a) == 21:\n        return 20\n    if len(a) == 22:\n        return 21\n    if len(a) == 23:\n        return 22\n    if len(a) == 24:\n        return 23\n    if len(a) == 25:\n        return 24\n    if len(a) == 26:\n        return 25\n    if len(a) == 27:\n        return 26\n    if len(a) == 28:\n        return 27\n    if len(a) == 29:\n        return 28\n    if len(a) == 30:\n        return 29\n    if len(a) == 31:\n        return 30\n    if len(a) == 32:\n        return 31\n    if len(a) == 33:\n        return 32\n    if len(a) == 34:\n        return 33\n    if len(a) == 35:\n        return 34\n    if len(a) == 36:\n        return 35\n    if len(a) == 37:\n        return 36\n    if len(a) == 38:\n        return 37\n    if len(a) == 39:\n        return 38\n    if len(a) == 40:\n        return 39\n    if len(a) == 41:\n        return 40\n    if len(a) == 42:\n        return 41\n    if len(a) == 43:\n        return 42\n    if len(a) == 44:\n        return 43\n    if len(a) == 45:\n        return 44\n    if len(a) == 46:\n        return 45\n    if len(a) == 47:\n        return 46\n    if len(a) == 48:\n        return 47\n    if len(a) == 49:\n        return 48\n    if len(a) == 50:\n        return 49\n    if len(a) == 51:\n        return 50\n    if len(a) == 52:\n        return 51\n    if len(a) == 53:\n        return 52\n    if len(a) == 54:\n        return 53\n    if len(a) == 55:\n        return 54\n    if len(a) == 56:\n        return 55\n    if len(a) == 57:\n        return 56\n    if len(a) == 58:\n        return 57\n    if len(a) == 59:\n        return 58\n    if len(a) == 60:\n        return 59\n    if len(a) == 61:\n        return 60\n    if len(a) == 62:\n        return 61\n    if len(a) == 63:\n        return 62\n    if len(a) == 64:\n        return 63\n    if len(a) == 65:\n        return 64\n    if len(a) == 66:\n        return 65\n    if len(a) == 67:\n        return 66\n    if len(a) == 68:\n        return 67\n    if len(a) == 69:\n        return 68\n    if len(a) == 70:\n        return 69\n    if len(a) == 71:\n        return 70\n    if len(a) == 72:\n        return 71\n    if len(a) == 73:\n        return 72\n    if len(a) == 74:\n        return 73\n    if len(a) == 75:\n        return 74\n    if len(a) == 76:\n        return 75\n    if len(a) == 77:\n        return 76\n    if len(a) == 78:\n        return 77\n    if len(a) == 79:\n        return 78\n    if len(a) == 80:\n        return 79\n    if len(a) == 81:\n        return 80\n    if len(a) == 82:\n        return 81\n    if len(a) == 83:\n        return 82\n    if len(a) == 84:\n        return 83\n    if len(a) == 85:\n        return 84\n    if len(a) == 86:\n        return 85\n    if len(a) == 87:\n        return 86\n    if len(a) == 88:\n        return 87\n    if len(a) == 89:\n        return 88\n    if len(a) == 90:\n        return 89\n    if len(a) == 91:\n        return 90\n    if len(a) == 92:\n        return 91\n    if len(a) == 93:\n        return 92\n    if len(a) == 94:\n        return 93\n    if len(a) == 95:\n        return 94\n    if len(a) == 96:\n        return 95\n    if len(a) == 97:\n        return 96\n    if len(a) == 98:\n        return 97\n    if len(a) == 99:\n        return 98\n    if len(a) == 100:\n        return 99\n    if len(a) == 101:\n        return 100\n    if len(a) == 102:\n        return 101\n    if len(a) == 103:\n        return 102\n    if len(a) == 104:\n        return 103\n    if len(a) == 105:\n        return 104\n    if len(a) == 106:\n        return 105\n    if len(a) == 107:\n        return 106\n    if len(a) == 108:\n        return 107\n    if len(a) == 109:\n        return 108\n    if len(a) == 110:\n        return 109\n    if len(a) == 111:\n        return 110\n    if len(a) == 112:\n        return 111\n    if len(a) =="
    },
    {
        "number": 1061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = 5\n    m = 5\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if matrix[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    else"
    },
    {
        "number": 1062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    t = stdin.split()\n    s = list(s[0])\n    t = list(t[0])\n    s.sort()\n    t.sort()\n    if s == t:\n        return \"0\"\n    if len(s)!= len(t):\n        return \"0\"\n    if len(s) == 1:\n        return str(0)\n    if len(s) == 2:\n        if s[0] == t[0]:\n            return str(1)\n        else:\n            return str(2)\n    if len(s) == 3:\n        if s[0] == t[0] and s[1] == t[1]:\n            return str(1)\n        elif s[0] == t[0] and s[2] == t[2]:\n            return str(1)\n        elif s[1] == t[1] and s[2] == t[2]:\n            return str(1)\n        else:\n            return str(2)\n    if len(s) == 4:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n            return str(1)\n        elif s[0] == t[0] and s[1] == t[1] and s[3] == t[3]:\n            return str(1)\n        elif s[0] == t[0] and s[2] == t[2] and s[3] == t[3]:\n            return str(1)\n        elif s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n            return str(1)\n        elif s[2] == t[2] and s[3] == t[3]:\n            return str(1)\n        else:\n            return str(2)\n    if len(s) == 5:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n            return str(1)\n        elif s[0] == t[0] and s[1] == t[1] and s[4] == t[4]:\n            return str(1)\n        elif s[0] == t[0] and s[2] == t[2] and s[4] == t[4]:\n            return str(1)\n        elif s[0] == t[0] and s[3] == t[3] and s[4] == t[4]:\n            return str(1)\n        elif s[1] == t[1] and s[2] == t[2] and s[4] == t[4]:\n            return str(1)\n        elif s[1] == t[1] and s[3] == t[3] and s[4] == t[4]:\n            return str(1)\n        elif s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n            return str(1)\n        elif s[3] == t[3] and s[4] == t[4]:\n            return str(1)\n        else:\n            return str(2)\n    if len(s) == 6:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n            return str(1)\n        elif s[0] == t[0] and s[1] == t[1] and s[5] == t[5]:\n            return str(1)\n        elif s[0] == t[0] and s[2] == t[2] and s[5] == t[5]:\n            return str(1)\n        elif s[0] == t[0] and s[3] == t[3] and s[5] == t[5]:\n            return str(1)\n        elif s[0] == t[0] and s[4] == t[4] and s[5] == t[5]:\n            return str(1)\n        elif s[1] == t[1] and s[2] == t[2] and s[5] == t[5]:\n            return str(1)\n        elif s[1] == t[1] and s[3] == t[3] and s[5] == t[5]:\n            return str(1)\n        elif s[1] == t[1] and s[4] == t[4] and s[5] == t[5]:\n            return str(1)\n        elif s[2] == t[2] and s[3] == t[3] and s[5] == t[5]:\n            return str(1)\n        elif s[2] == t[2] and s[4] == t[4] and s[5] == t[5]:\n            return str(1)\n        elif s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n            return str(1)\n        elif s[4] == t[4] and s[5] == t[5]:\n            return str(1)\n        else:\n            return str(2)\n    if len(s) == 7:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n            return str(1)\n        elif s[0] == t[0] and s[1] == t[1] and s[5] == t[5]:\n            return str(1)\n        elif s[0] == t[0] and s[2] == t[2] and s[5] == t[5]:\n            return str(1)\n        elif s[0] == t[0] and s[3] == t["
    },
    {
        "number": 1063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"YES\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"YES\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"YES\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"YES\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"YES\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return \"YES\"\n    if n == 119:\n        return \"YES\"\n    if n == 120:\n        return \"YES\"\n    if n == 121:\n        return \"YES\"\n    if n == 122:\n        return \"YES\"\n    if n == 123:\n        return \"YES\"\n    if n == 124:\n        return \"YES\"\n    if n == 125:\n        return \"YES\"\n    if n == 126:\n        return \"YES\"\n    if n == 127:\n        return \"YES\"\n    if n == 128:\n        return \"YES\"\n    if n == 129:\n        return \"YES\"\n    if n == 130:\n        return \""
    },
    {
        "number": 1064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    blocked = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    return -1 if not (0 <= n <= 10**6 and 0 <= m <= n and 0 <= k <= n and all(0 <= x <= 10**6 for x in blocked) and all(1 <= x <= 10**6 for x in costs)) else sum(costs[i] for i in range(m) if i + blocked[i] < n)\n"
    },
    {
        "number": 1065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, d = map(int, stdin.split())\n    return str(max(n // d, m // d, (n - m) // d))\n"
    },
    {
        "number": 1066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    odds = list(range(1, n + 1, 2))\n    evens = list(range(1, n + 1, 2))\n    odds.sort()\n    evens.sort()\n    return str(odds[k - 1])"
    },
    {
        "number": 1067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if i == j:\n                dp[i][j] = a[i]\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j + 1] - dp[i + 1][j + 1] + a[i]\n    return str(dp[0][0])\n"
    },
    {
        "number": 1068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.replace('+','')\n    n = n.replace('=','')\n    n = n.split()\n    n = list(map(int, n))\n    n = sum(n)\n    return str(n)"
    },
    {
        "number": 1069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n**4 + n**3 + n**2 + n)\n\n[Image]\ndef"
    },
    {
        "number": 1070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    longest = 0\n    for i in range(n - 1):\n        if houses[i] == houses[i + 1]:\n            continue\n        else:\n            longest = max(longest, houses[i + 1] - houses[i])\n    return longest\n"
    },
    {
        "number": 1071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    n = int(stdin)\n    if a_1 + a_2 + a_3 > n:\n        return \"NO\"\n    if b_1 + b_2 + b_3 > n:\n        return \"NO\"\n    if a_1 + b_1 > n:\n        return \"NO\"\n    if a_2 + b_2 > n:\n        return \"NO\"\n    if a_3 + b_3 > n:\n        return \"NO\"\n    if a_1 + b_1 + a_2 + b_2 + a_3 + b_3 > n:\n        return \"NO\"\n    if a_1 + b_1 + a_2 + b_2 + a_3 + b_3 + a_1 + b_1 + a_2 + b_2 + a_3 + b_3 > n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = stdin.split()\n    table = sorted(table, key=lambda x: x)\n    for i in range(1, m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m):\n        table[i] = table[i] + table[i - 1]\n    for i in range(m - 1, 0, -1):\n        table[i] = table[i] + table[i - 1]\n    for"
    },
    {
        "number": 1073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 1074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0 1\"\n    if n == 2:\n        return \"0 1 0\"\n    if n == 3:\n        return \"0 1 2 0\"\n    if n == 4:\n        return \"0 1 2 3 0\"\n    if n == 5:\n        return \"0 1 2 3 4 0\"\n    if n == 6:\n        return \"0 1 2 3 4 5 0\"\n    if n == 7:\n        return \"0 1 2 3 4 5 6 0\"\n    if n == 8:\n        return \"0 1 2 3 4 5 6 7 0\"\n    if n == 9:\n        return \"0 1 2 3 4 5 6 7 8 0\"\n    if n == 10:\n        return \"0 1 2 3 4 5 6 7 8 9 0\"\n    if n == 11:\n        return \"0 1 2 3 4 5 6 7 8 9 10 0\"\n    if n == 12:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 0\"\n    if n == 13:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 0\"\n    if n == 14:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 0\"\n    if n == 15:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 0\"\n    if n == 16:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0\"\n    if n == 17:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0\"\n    if n == 18:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 0\"\n    if n == 19:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 0\"\n    if n == 20:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 0\"\n    if n == 21:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 0\"\n    if n == 22:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 0\"\n    if n == 23:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 0\"\n    if n == 24:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 0\"\n    if n == 25:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 0\"\n    if n == 26:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 0\"\n    if n == 27:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 0\"\n    if n == 28:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 0\"\n    if n == 29:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 0\"\n    if n == 30:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 0\"\n    if n == 31:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 0\"\n    if n == 32:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 0\"\n    if n == 33:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 0\"\n    if n == 34:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 0\"\n    if n == 35:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 0\"\n    if n == 36:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 0\"\n    if n == 37:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 0\"\n    if n == 38:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 0\"\n    if n == 39:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 0\"\n    if n == 40:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 0\"\n    if n == 41:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 0\"\n    if n == 42:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 0\"\n    if n == 43:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 0\"\n    if n == 44:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 0\"\n    if n == 45:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 0\"\n    if n == 46:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 0\"\n    if n == 47:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45"
    },
    {
        "number": 1076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(pow(n, -1, 998244353) * pow(m, -1, 998244353))"
    },
    {
        "number": 1077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in range(1, m + 1):\n        b.append(a.count(i))\n    return str(max(b)) + \" \" + str(min(b))"
    },
    {
        "number": 1078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] // 2)\n        else:\n            b.append(a[i] // 2 + 1)\n    return''.join(map(str, b))\n"
    },
    {
        "number": 1079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"8\"\n    if n == 5:\n        return \"10\"\n    if n == 6:\n        return \"12\"\n    if n == 7:\n        return \"14\"\n    if n == 8:\n        return \"16\"\n    if n == 9:\n        return \"18\"\n    if n == 10:\n        return \"20\"\n    if n == 11:\n        return \"22\"\n    if n == 12:\n        return \"24\"\n    if n == 13:\n        return \"26\"\n    if n == 14:\n        return \"28\"\n    if n == 15:\n        return \"30\"\n    if n == 16:\n        return \"32\"\n    if n == 17:\n        return \"34\"\n    if n == 18:\n        return \"36\"\n    if n == 19:\n        return \"38\"\n    if n == 20:\n        return \"40\"\n    if n == 21:\n        return \"42\"\n    if n == 22:\n        return \"44\"\n    if n == 23:\n        return \"46\"\n    if n == 24:\n        return \"48\"\n    if n == 25:\n        return \"50\"\n    if n == 26:\n        return \"52\"\n    if n == 27:\n        return \"54\"\n    if n == 28:\n        return \"56\"\n    if n == 29:\n        return \"58\"\n    if n == 30:\n        return \"60\"\n    if n == 31:\n        return \"62\"\n    if n == 32:\n        return \"64\"\n    if n == 33:\n        return \"66\"\n    if n == 34:\n        return \"68\"\n    if n == 35:\n        return \"70\"\n    if n == 36:\n        return \"72\"\n    if n == 37:\n        return \"74\"\n    if n == 38:\n        return \"76\"\n    if n == 39:\n        return \"78\"\n    if n == 40:\n        return \"80\"\n    if n == 41:\n        return \"82\"\n    if n == 42:\n        return \"84\"\n    if n == 43:\n        return \"86\"\n    if n == 44:\n        return \"88\"\n    if n == 45:\n        return \"90\"\n    if n == 46:\n        return \"92\"\n    if n == 47:\n        return \"94\"\n    if n == 48:\n        return \"96\"\n    if n == 49:\n        return \"98\"\n    if n == 50:\n        return \"100\"\n    if n == 51:\n        return \"102\"\n    if n == 52:\n        return \"104\"\n    if n == 53:\n        return \"106\"\n    if n == 54:\n        return \"108\"\n    if n == 55:\n        return \"110\"\n    if n == 56:\n        return \"112\"\n    if n == 57:\n        return \"114\"\n    if n == 58:\n        return \"116\"\n    if n == 59:\n        return \"118\"\n    if n == 60:\n        return \"120\"\n    if n == 61:\n        return \"122\"\n    if n == 62:\n        return \"124\"\n    if n == 63:\n        return \"126\"\n    if n == 64:\n        return \"128\"\n    if n == 65:\n        return \"130\"\n    if n == 66:\n        return \"132\"\n    if n == 67:\n        return \"134\"\n    if n == 68:\n        return \"136\"\n    if n == 69:\n        return \"138\"\n    if n == 70:\n        return \"140\"\n    if n == 71:\n        return \"142\"\n    if n == 72:\n        return \"144\"\n    if n == 73:\n        return \"146\"\n    if n == 74:\n        return \"148\"\n    if n == 75:\n        return \"150\"\n    if n == 76:\n        return \"152\"\n    if n == 77:\n        return \"154\"\n    if n == 78:\n        return \"156\"\n    if n == 79:\n        return \"158\"\n    if n == 80:\n        return \"160\"\n    if n == 81:\n        return \"162\"\n    if n == 82:\n        return \"164\"\n    if n == 83:\n        return \"166\"\n    if n == 84:\n        return \"168\"\n    if n == 85:\n        return \"170\"\n    if n == 86:\n        return \"172\"\n    if n == 87:\n        return \"174\"\n    if n == 88:\n        return \"176\"\n    if n == 89:\n        return \"178\"\n    if n == 90:\n        return \"180\"\n    if n == 91:\n        return \"182\"\n    if n == 92:\n        return \"184\"\n    if n == 93:\n        return \"186\"\n    if n == 94:\n        return \"188\"\n    if n == 95:\n        return \"190\"\n    if n == 96:\n        return \"192\"\n    if n == 97:\n        return \"194\"\n    if n == 98:\n        return \"196\"\n    if n == 99:\n        return \"198\"\n    if n == 100:\n        return \"200\"\n    if n == 101:\n        return \"202\"\n    if n == 102:\n        return \"204\"\n    if n == 103:\n        return \"206\"\n    if n == 104:\n        return \"208\"\n    if n == 105:\n        return \"210\"\n    if n == 106:\n        return \"212\"\n    if n == 107:\n        return \"214\"\n    if n == 108:\n        return \"216\"\n    if n == 109:\n        return \"218\"\n    if n == 110:\n        return \"220\"\n    if n == 111:\n        return \"222\"\n    if n == 112:\n        return \"224\"\n    if n == 113:\n        return \"226\"\n    if n == 114:\n        return \"228\"\n    if n == 115:\n        return \"230\"\n    if n == 116:\n        return \"232\"\n    if n == 117:\n        return \"234\"\n    if n == 118:\n        return \"236\"\n    if n == 119:\n        return \"238\"\n    if n == 120:\n        return \"240\"\n    if n == 121:\n        return \"242\"\n    if n == 122:\n        return \"244\"\n    if n == 123:\n        return \"246\"\n    if n == 124:\n        return \"248\"\n    if n == 125:\n        return \"250\"\n    if n == 126:\n        return \"252\"\n    if n == 127:\n        return \"254\"\n    if n == 128:\n        return \"256\"\n    if n == 129:\n        return \"258\"\n    if n == 130:\n        return \"260\"\n    "
    },
    {
        "number": 1080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0]!= 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[1] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[1] == 0 and a[2] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 and a[16] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 and a[16] == 0 and a[17] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 and a[16] == 0 and a[17] == 0 and a[18] == 0:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 1081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 99:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n            if i == j:\n                dp[i][j] = dp[i][j] - 1\n    return str(dp[n - 1][n - 1])\n"
    },
    {
        "number": 1083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 0\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 1\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 1\n    if n == 36:\n        return 1\n    if n == 37:\n        return 1\n    if n == 38:\n        return 1\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 1\n    if n == 42:\n        return 1\n    if n == 43:\n        return 1\n    if n == 44:\n        return 1\n    if n == 45:\n        return 1\n    if n == 46:\n        return 1\n    if n == 47:\n        return 1\n    if n == 48:\n        return 1\n    if n == 49:\n        return 1\n    if n == 50:\n        return 1\n    if n == 51:\n        return 1\n    if n == 52:\n        return 1\n    if n == 53:\n        return 1\n    if n == 54:\n        return 1\n    if n == 55:\n        return 1\n    if n == 56:\n        return 1\n    if n == 57:\n        return 1\n    if n == 58:\n        return 1\n    if n == 59:\n        return 1\n    if n == 60:\n        return 1\n    if n == 61:\n        return 1\n    if n == 62:\n        return 1\n    if n == 63:\n        return 1\n    if n == 64:\n        return 1\n    if n == 65:\n        return 1\n    if n == 66:\n        return 1\n    if n == 67:\n        return 1\n    if n == 68:\n        return 1\n    if n == 69:\n        return 1\n    if n == 70:\n        return 1\n    if n == 71:\n        return 1\n    if n == 72:\n        return 1\n    if n == 73:\n        return 1\n    if n == 74:\n        return 1\n    if n == 75:\n        return 1\n    if n == 76:\n        return 1\n    if n == 77:\n        return 1\n    if n == 78:\n        return 1\n    if n == 79:\n        return 1\n    if n == 80:\n        return 1\n    if n == 81:\n        return 1\n    if n == 82:\n        return 1\n    if n == 83:\n        return 1\n    if n == 84:\n        return 1\n    if n == 85:\n        return 1\n    if n == 86:\n        return 1\n    if n == 87:\n        return 1\n    if n == 88:\n        return 1\n    if n == 89:\n        return 1\n    if n == 90:\n        return 1\n    if n == 91:\n        return 1\n    if n == 92:\n        return 1\n    if n == 93:\n        return 1\n    if n == 94:\n        return 1\n    if n == 95:\n        return 1\n    if n == 96:\n        return 1\n    if n == 97:\n        return 1\n    if n == 98:\n        return 1\n    if n == 99:\n        return 1\n    if n == 100:\n        return 1\n    if n == 101:\n        return 1\n    if n == 102:\n        return 1\n    if n == 103:\n        return 1\n    if n == 104:\n        return 1\n    if n == 105:\n        return 1\n    if n == 106:\n        return 1\n    if n == 107:\n        return 1\n    if n == 108:\n        return 1\n    if n == 109:\n        return 1\n    if n == 110:\n        return 1\n    if n == 111:\n        return 1\n    if n == 112:\n        return 1\n    if n == 113:\n        return 1\n    if n == 114:\n        return 1\n    if n == 115:\n        return 1\n    if n == 116:\n        return 1\n    if n == 117:\n        return 1\n    if n == 118:\n        return 1\n    if n == 119:\n        return 1\n    if n == 120:\n        return 1\n    if n == 121:\n        return 1\n    if n == 122:\n        return 1\n    if n == 123:\n        return 1\n    if n == 124:\n        return 1\n    if n == 125:\n        return 1\n    if n == 126:\n        return 1\n    if n == 127:\n        return 1\n    if n == 128:\n        return 1\n    if n == 129:\n        return 1\n    if n == 130:\n        return 1\n    if n == 131:\n        return 1\n    if n == 132:\n        return 1\n    if n == 133:\n        return 1\n    if n == 134:\n        return 1\n    if n == 135:\n        return 1\n    if n == 136:\n        return 1\n    if n == 137:\n        return 1\n    if n == 138:\n        return 1\n    if n == 139:\n        return 1\n    if n == 140:\n        return 1\n    if n == 141:\n        return 1\n    if n == 142:\n        return 1\n    if n == 143:\n        return 1\n    if n == 144:\n        return 1\n    if n == 145:\n        return 1\n    if n == 146:\n        return 1\n    if n == 147:\n        return 1\n    if n == 148:\n        return 1\n    if n == 149:\n        return 1\n    if n == 150:\n        return 1\n    if n == 151:\n        return 1\n    if n == 152:\n        return 1\n    if n == 153:\n        return 1\n    if n == 154:\n        return 1\n    if n == 155:\n        return 1\n    if n == 156:\n        return 1\n    if n == 157:\n        "
    },
    {
        "number": 1084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in"
    },
    {
        "number": 1085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N > 1:\n        if N % 2 == 0:\n            N = N // 2\n        else:\n            N = N - 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 1086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [[0] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i == 0 or j == 0:\n                grid[i][j] = 1\n            else:\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1]\n    return str(abs(sum(map(int, stdin.split())) - sum(map(int, stdin.split()[::-1]))))\n"
    },
    {
        "number": 1087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_val = 0\n    for i in range(2 ** n):\n        val = 0\n        for j in range(n):\n            if i & (1 << j):\n                val += a[j]\n        if val > max_val:\n            max_val = val\n    return str(max_val)"
    },
    {
        "number": 1088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(N)]\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                for k in range(N):\n                    if k!= i and k!= j:\n                        matrix[i][k] += matrix[j][k]\n                        matrix[k][i] += matrix[j][k]\n                        matrix[i][j] = 0\n                        matrix[j][i] = 0\n                matrix[i][j] = 0\n                matrix[j][i] = 0\n            else:\n                matrix[i][j] = 0\n                matrix[j][i] = 0\n    for i in range(N):\n        for j in range(N):\n            if matrix[i][j] == K:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    costs = []\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            costs.append((i, j))\n    costs = sorted(costs)\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[1], x[0]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[1], x[0]))\n    costs = sorted(costs, key=lambda x: (x[1], x[0]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x[1]))\n    costs = sorted(costs, key=lambda x: (x[0], x"
    },
    {
        "number": 1090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin\n    l, r = 0, N - 1\n    happy = 0\n    while l <= r:\n        if S[l] == S[r]:\n            happy += 1\n            l += 1\n            r -= 1\n        elif S[l] == 'L':\n            l += 1\n        else:\n            r -= 1\n        if happy > K:\n            break\n    return str(happy)"
    },
    {
        "number": 1091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    prices.sort(reverse=True)\n    winner = 1\n    winner_price = prices[0]\n    for i in range(1, n):\n        if winner_price < prices[i]:\n            winner += 1\n            winner_price = prices[i]\n    return str(winner) + \" \" + str(winner_price)\n"
    },
    {
        "number": 1092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0] + lights\n    lights = [0"
    },
    {
        "number": 1094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chats = []\n    for i in range(n):\n        chats.append(stdin.split()[i])\n    chats.sort()\n    return''.join(chats)"
    },
    {
        "number": 1095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, y1 = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m, y2 = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    return str(max(len(a), len(b)))\n"
    },
    {
        "number": 1096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 8"
    },
    {
        "number": 1097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k = map(int, stdin.split())\n    if n < 2 or t < 1 or k < n:\n        return -1\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    if cities[0]!= 1:\n        return -1\n    if cities[-1]!= n:\n        return -1\n    if sum(cities)!= n - 1:\n        return -1\n    if len(set(cities))!= n:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1]!= 1))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 1))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 2))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 3))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 4))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 5))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 6))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 7))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 8))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 9))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 10))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 11))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 12))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 13))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 14))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 15))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 16))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 17))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 18))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 19))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 20))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 21))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 22))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 23))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 24))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 25))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 26))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 27))!= k:\n        return -1\n    if len(set(cities[i] for i in range(1, n) if cities[i] - cities[i - 1] == 28))!= k"
    },
    {
        "number": 1098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alarms = []\n    for i in range(n):\n        alarms.append(stdin.split())\n    alarms.sort()\n    max_time = 0\n    for i in range(n):\n        if i == 0:\n            max_time = int(alarms[i][0])\n        else:\n            if int(alarms[i][0]) > max_time:\n                max_time = int(alarms[i][0])\n    return str(max_time)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    "
    },
    {
        "number": 1100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in range(1, n+1):\n        vertices.append(i)\n    \n    # create a list of edges\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    \n    # create a graph\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    \n    # add edges to the graph\n    for e in edges:\n        graph[e[0]].append(e[1])\n        graph[e[1]].append(e[0])\n    \n    # create a list of vertices\n    vertices = []\n    for i in"
    },
    {
        "number": 1101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = stdin.split()\n    rooms = list(map(int, rooms))\n    rooms.sort()\n    max_distance = 0\n    for i in range(k + 1):\n        distance = rooms[i] - rooms[i - 1]\n        if distance > max_distance:\n            max_distance = distance\n    return str(max_distance)\n"
    },
    {
        "number": 1102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    c = 0\n    for i in range(n):\n        if t[i] == 1:\n            c += 1\n    return str(c)"
    },
    {
        "number": 1103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sequence[i] - sequence[j] <= 1:\n                max_len = max(max_len, j - i + 1)\n    return str(max_len)\n"
    },
    {
        "number": 1104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i - 1] | a[i]!= a[i] or b[i - 1] & b[i]!= b[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    solutions = []\n    for i in range(n):\n        solutions.append(stdin.split())\n    solutions.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        if solutions[i][0] == solutions[i - 1][0]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = list(map(int, stdin.split()))\n    lights.sort()\n    lights.append(lights[-1] + 1)\n    lights.insert(0, lights[0] + 1)\n    lights.sort()\n    print(lights)\n    return str(lights[n // 2])\n"
    },
    {
        "number": 1107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"1\"\n    elif n == 3:\n        return \"1\"\n    elif n == 4:\n        return \"1\"\n    elif n == 5:\n        return \"1\"\n    elif n == 6:\n        return \"1\"\n    elif n == 7:\n        return \"1\"\n    elif n == 8:\n        return \"1\"\n    elif n == 9:\n        return \"1\"\n    elif n == 10:\n        return \"1\"\n    elif n == 11:\n        return \"1\"\n    elif n == 12:\n        return \"1\"\n    elif n == 13:\n        return \"1\"\n    elif n == 14:\n        return \"1\"\n    elif n == 15:\n        return \"1\"\n    elif n == 16:\n        return \"1\"\n    elif n == 17:\n        return \"1\"\n    elif n == 18:\n        return \"1\"\n    elif n == 19:\n        return \"1\"\n    elif n == 20:\n        return \"1\"\n    elif n == 21:\n        return \"1\"\n    elif n == 22:\n        return \"1\"\n    elif n == 23:\n        return \"1\"\n    elif n == 24:\n        return \"1\"\n    elif n == 25:\n        return \"1\"\n    elif n == 26:\n        return \"1\"\n    elif n == 27:\n        return \"1\"\n    elif n == 28:\n        return \"1\"\n    elif n == 29:\n        return \"1\"\n    elif n == 30:\n        return \"1\"\n    elif n == 31:\n        return \"1\"\n    elif n == 32:\n        return \"1\"\n    elif n == 33:\n        return \"1\"\n    elif n == 34:\n        return \"1\"\n    elif n == 35:\n        return \"1\"\n    elif n == 36:\n        return \"1\"\n    elif n == 37:\n        return \"1\"\n    elif n == 38:\n        return \"1\"\n    elif n == 39:\n        return \"1\"\n    elif n == 40:\n        return \"1\"\n    elif n == 41:\n        return \"1\"\n    elif n == 42:\n        return \"1\"\n    elif n == 43:\n        return \"1\"\n    elif n == 44:\n        return \"1\"\n    elif n == 45:\n        return \"1\"\n    elif n == 46:\n        return \"1\"\n    elif n == 47:\n        return \"1\"\n    elif n == 48:\n        return \"1\"\n    elif n == 49:\n        return \"1\"\n    elif n == 50:\n        return \"1\"\n    elif n == 51:\n        return \"1\"\n    elif n == 52:\n        return \"1\"\n    elif n == 53:\n        return \"1\"\n    elif n == 54:\n        return \"1\"\n    elif n == 55:\n        return \"1\"\n    elif n == 56:\n        return \"1\"\n    elif n == 57:\n        return \"1\"\n    elif n == 58:\n        return \"1\"\n    elif n == 59:\n        return \"1\"\n    elif n == 60:\n        return \"1\"\n    elif n == 61:\n        return \"1\"\n    elif n == 62:\n        return \"1\"\n    elif n == 63:\n        return \"1\"\n    elif n == 64:\n        return \"1\"\n    elif n == 65:\n        return \"1\"\n    elif n == 66:\n        return \"1\"\n    elif n == 67:\n        return \"1\"\n    elif n == 68:\n        return \"1\"\n    elif n == 69:\n        return \"1\"\n    elif n == 70:\n        return \"1\"\n    elif n == 71:\n        return \"1\"\n    elif n == 72:\n        return \"1\"\n    elif n == 73:\n        return \"1\"\n    elif n == 74:\n        return \"1\"\n    elif n == 75:\n        return \"1\"\n    elif n == 76:\n        return \"1\"\n    elif n == 77:\n        return \"1\"\n    elif n == 78:\n        return \"1\"\n    elif n == 79:\n        return \"1\"\n    elif n == 80:\n        return \"1\"\n    elif n == 81:\n        return \"1\"\n    elif n == 82:\n        return \"1\"\n    elif n == 83:\n        return \"1\"\n    elif n == 84:\n        return \"1\"\n    elif n == 85:\n        return \"1\"\n    elif n == 86:\n        return \"1\"\n    elif n == 87:\n        return \"1\"\n    elif n == 88:\n        return \"1\"\n    elif n == 89:\n        return \"1\"\n    elif n == 90:\n        return \"1\"\n    elif n == 91:\n        return \"1\"\n    elif n == 92:\n        return \"1\"\n    elif n == 93:\n        return \"1\"\n    elif n == 94:\n        return \"1\"\n    elif n == 95:\n        return \"1\"\n    elif n == 96:\n        return \"1\"\n    elif n == 97:\n        return \"1\"\n    elif n == 98:\n        return \"1\"\n    elif n == 99:\n        return \"1\"\n    elif n == 100:\n        return \"1\"\n    "
    },
    {
        "number": 1108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rooms = []\n    for i in range(n):\n        rooms.append([int(x) for x in stdin.split()])\n    return str(count_rooms(rooms))\n\n\ndef"
    },
    {
        "number": 1109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n % k == 0:\n        return \"0\"\n    if n % k == 1:\n        return str(n // k)\n    if n % k == 2:\n        return str(n // k)\n    if n % k == 3:\n        return str(n // k)\n    if n % k == 4:\n        return str(n // k)\n    if n % k == 5:\n        return str(n // k)\n    if n % k == 6:\n        return str(n // k)\n    if n % k == 7:\n        return str(n // k)\n    if n % k == 8:\n        return str(n // k)\n    if n % k == 9:\n        return str(n // k)\n    if n % k == 10:\n        return str(n // k)\n    if n % k == 11:\n        return str(n // k)\n    if n % k == 12:\n        return str(n // k)\n    if n % k == 13:\n        return str(n // k)\n    if n % k == 14:\n        return str(n // k)\n    if n % k == 15:\n        return str(n // k)\n    if n % k == 16:\n        return str(n // k)\n    if n % k == 17:\n        return str(n // k)\n    if n % k == 18:\n        return str(n // k)\n    if n % k == 19:\n        return str(n // k)\n    if n % k == 20:\n        return str(n // k)\n    if n % k == 21:\n        return str(n // k)\n    if n % k == 22:\n        return str(n // k)\n    if n % k == 23:\n        return str(n // k)\n    if n % k == 24:\n        return str(n // k)\n    if n % k == 25:\n        return str(n // k)\n    if n % k == 26:\n        return str(n // k)\n    if n % k == 27:\n        return str(n // k)\n    if n % k == 28:\n        return str(n // k)\n    if n % k == 29:\n        return str(n // k)\n    if n % k == 30:\n        return str(n // k)\n    if n % k == 31:\n        return str(n // k)\n    if n % k == 32:\n        return str(n // k)\n    if n % k == 33:\n        return str(n // k)\n    if n % k == 34:\n        return str(n // k)\n    if n % k == 35:\n        return str(n // k)\n    if n % k == 36:\n        return str(n // k)\n    if n % k == 37:\n        return str(n // k)\n    if n % k == 38:\n        return str(n // k)\n    if n % k == 39:\n        return str(n // k)\n    if n % k == 40:\n        return str(n // k)\n    if n % k == 41:\n        return str(n // k)\n    if n % k == 42:\n        return str(n // k)\n    if n % k == 43:\n        return str(n // k)\n    if n % k == 44:\n        return str(n // k)\n    if n % k == 45:\n        return str(n // k)\n    if n % k == 46:\n        return str(n // k)\n    if n % k == 47:\n        return str(n // k)\n    if n % k == 48:\n        return str(n // k)\n    if n % k == 49:\n        return str(n // k)\n    if n % k == 50:\n        return str(n // k)\n    if n % k == 51:\n        return str(n // k)\n    if n % k == 52:\n        return str(n // k)\n    if n % k == 53:\n        return str(n // k)\n    if n % k == 54:\n        return str(n // k)\n    if n % k == 55:\n        return str(n // k)\n    if n % k == 56:\n        return str(n // k)\n    if n % k == 57:\n        return str(n // k)\n    if n % k == 58:\n        return str(n // k)\n    if n % k == 59:\n        return str(n // k)\n    if n % k == 60:\n        return str(n // k)\n    if n % k == 61:\n        return str(n // k)\n    if n % k == 62:\n        return str(n // k)\n    if n % k == 63:\n        return str(n // k)\n    if n % k == 64:\n        return str(n // k)\n    if n % k == 65:\n        return str(n // k)\n    if n % k == 66:\n        return str(n // k)\n    if n % k == 67:\n        return str(n // k)\n    if n % k == 68:\n        return str(n // k)\n    if n % k == 69:\n        return str(n // k)\n    if n % k == 70:\n        return str(n // k)\n    if n % k == 71:\n        return str(n // k)\n    if n % k == 72:\n        return str(n // k)\n    if n % k == 73:\n        return str(n // k)\n    if n % k == 74:\n        return str(n // k)\n    if n % k == 75:\n        return str(n // k)\n    if n % k == 76:\n        return str(n // k)\n    if n % k == 77:\n        return str(n // k)\n    if n % k == 78:\n        return str(n // k)\n    if n % k == 79:\n        return str(n // k)\n    if n % k == 80:\n        return str(n // k)\n    if n % k"
    },
    {
        "number": 1110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\""
    },
    {
        "number": 1111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    w.reverse()\n    w = set(w)\n    w = list(w)\n    w.sort()\n    "
    },
    {
        "number": 1112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    magic_square = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            magic_square[i][j] = int(stdin.split()[2 * i + j + 1])\n    return '\\n'.join([' '.join(map(str, row)) for row in magic_square])\n"
    },
    {
        "number": 1113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 0\n    for i in range(n):\n        m = max(m, max(a[i:]))\n    if m == 0:\n        return -1\n    for i in range(n):\n        if a[i]!= m:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 1114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    f = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    if len(set(f))!= len(f) or len(set(b))!= len(b):\n        return \"Impossible\"\n    if len(set(f)) == 1:\n        return \"Possible\"\n    if len(set(b)) == 1:\n        return \"Possible\"\n    if len(set(f)) == 2:\n        return \"Ambiguity\"\n    if len(set(b)) == 2:\n        return \"Ambiguity\"\n    for i in range(len(f)):\n        if f[i]!= b[i]:\n            return \"Impossible\"\n    return \"Possible\"\n"
    },
    {
        "number": 1115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    l = list(map(int, stdin.split()))\n    r = list(map(int, stdin.split()))\n    a.sort()\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x - 1, l))\n    r = list(map(lambda x: x, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map(lambda x: x + 1, r))\n    l.sort()\n    r.sort()\n    l = list(map(lambda x: x + 1, l))\n    r = list(map"
    },
    {
        "number": 1116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, b, k = map(int, stdin.split())\n    if r % b == 0:\n        if r % k == 0:\n            return \"REBEL\"\n        else:\n            return \"OBEY\"\n    elif b % r == 0:\n        if b % k == 0:\n            return \"REBEL\"\n        else:\n            return \"OBEY\"\n    elif r % k == 0:\n        if b % r == 0:\n            return \"REBEL\"\n        else:\n            return \"OBEY\"\n    else:\n        return \"OBEY\""
    },
    {
        "number": 1117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rectangles = []\n    for i in range(n):\n        rectangles.append(list(map(int, stdin.split())))\n    rectangles.sort(key=lambda x: x[1])\n    for i in range(n):\n        if rectangles[i][1] > rectangles[i - 1][1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c = sorted(c)\n    c = list(map(str, c))\n    c =''.join(c)\n    return c"
    },
    {
        "number": 1119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p_a, p_b = map(int, stdin.split())\n    p_a = p_a / (p_a + p_b)\n    p_b = p_b / (p_a + p_b)\n    p_a = int(p_a * (10 ** 9 + 7))\n    p_b = int(p_b * (10 ** 9 + 7))\n    q = 1\n    while True:\n        if len(set(str(q) + str(q))) == k:\n            return str(q)\n        q = q * p_a + p_b\n\nsolution(input())\n"
    },
    {
        "number": 1120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10**6:\n        return str(n - 20)\n    elif n <= 10**12:\n        return str(n - 20 - 18)\n    elif n <= 10**18:\n        return str(n - 20 - 18 - 10)\n    else:\n        return str(n - 20 - 18 - 10 - 9)\n\ndef"
    },
    {
        "number": 1121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            table[i][j] = stdin[i * m + j]\n    colors = set()\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] not in colors:\n                colors.add(table[i][j])\n            else:\n                return ''.join(table[i])\n    return ''.join(table[0]) + ''.join(table[1])"
    },
    {
        "number": 1122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        else:\n            return str(a[i]) + \" \" + str(b[i])"
    },
    {
        "number": 1123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(sum(gcd(i, j, k) for i in range(1, N + 1) for j in range(1, N + 1) for k in range(1, N + 1)) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    x = max(a)\n    X = min(a)\n    while x!= X:\n        for i in range(N):\n            if a[i] == x:\n                a[i] = a[i] - X\n        x = max(a)\n        X = min(a)\n    return''.join(map(str, a))\n"
    },
    {
        "number": 1125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > a[1]:\n        return -1\n    if a[0] == a[1]:\n        return a[0]\n    if a[0] == a[1] - 1:\n        return a[0]\n    if a[0] == a[1] - 2:\n        return a[0]\n    if a[0] == a[1] - 3:\n        return a[0]\n    if a[0] == a[1] - 4:\n        return a[0]\n    if a[0] == a[1] - 5:\n        return a[0]\n    if a[0] == a[1] - 6:\n        return a[0]\n    if a[0] == a[1] - 7:\n        return a[0]\n    if a[0] == a[1] - 8:\n        return a[0]\n    if a[0] == a[1] - 9:\n        return a[0]\n    if a[0] == a[1] - 10:\n        return a[0]\n    if a[0] == a[1] - 11:\n        return a[0]\n    if a[0] == a[1] - 12:\n        return a[0]\n    if a[0] == a[1] - 13:\n        return a[0]\n    if a[0] == a[1] - 14:\n        return a[0]\n    if a[0] == a[1] - 15:\n        return a[0]\n    if a[0] == a[1] - 16:\n        return a[0]\n    if a[0] == a[1] - 17:\n        return a[0]\n    if a[0] == a[1] - 18:\n        return a[0]\n    if a[0] == a[1] - 19:\n        return a[0]\n    if a[0] == a[1] - 20:\n        return a[0]\n    if a[0] == a[1] - 21:\n        return a[0]\n    if a[0] == a[1] - 22:\n        return a[0]\n    if a[0] == a[1] - 23:\n        return a[0]\n    if a[0] == a[1] - 24:\n        return a[0]\n    if a[0] == a[1] - 25:\n        return a[0]\n    if a[0] == a[1] - 26:\n        return a[0]\n    if a[0] == a[1] - 27:\n        return a[0]\n    if a[0] == a[1] - 28:\n        return a[0]\n    if a[0] == a[1] - 29:\n        return a[0]\n    if a[0] == a[1] - 30:\n        return a[0]\n    if a[0] == a[1] - 31:\n        return a[0]\n    if a[0] == a[1] - 32:\n        return a[0]\n    if a[0] == a[1] - 33:\n        return a[0]\n    if a[0] == a[1] - 34:\n        return a[0]\n    if a[0] == a[1] - 35:\n        return a[0]\n    if a[0] == a[1] - 36:\n        return a[0]\n    if a[0] == a[1] - 37:\n        return a[0]\n    if a[0] == a[1] - 38:\n        return a[0]\n    if a[0] == a[1] - 39:\n        return a[0]\n    if a[0] == a[1] - 40:\n        return a[0]\n    if a[0] == a[1] - 41:\n        return a[0]\n    if a[0] == a[1] - 42:\n        return a[0]\n    if a[0] == a[1] - 43:\n        return a[0]\n    if a[0] == a[1] - 44:\n        return a[0]\n    if a[0] == a[1] - 45:\n        return a[0]\n    if a[0] == a[1] - 46:\n        return a[0]\n    if a[0] == a[1] - 47:\n        return a[0]\n    if a[0] == a[1] - 48:\n        return a[0]\n    if a[0] == a[1] - 49:\n        return a[0]\n    if a[0] == a[1] - 50:\n        return a[0]\n    if a[0] == a[1] - 51:\n        return a[0]\n    if a[0] == a[1] - 52:\n        return a[0]\n    if a[0] == a[1] - 53:\n        return a[0]\n    if a[0] == a[1] - 54:\n        return a[0]\n    if a[0] == a[1] - 55:\n        return a[0]\n    if a[0] == a[1] - 56:\n        return a[0]\n    if a[0] == a[1] - 57:\n        return a[0]\n    if a[0] == a[1] - 58:\n        return a[0]\n    if a[0] == a[1] - 59:\n        return a[0]\n    if a[0] == a[1] - 60:\n        return a[0]\n    if a[0] == a[1] - 61:\n        return a[0]\n    if a[0] == a[1] - 62:\n        return a[0]\n    if a[0] == a[1] - 63:\n        return a[0]\n    if a[0] == a[1] - 64:\n        return a[0]\n    if a[0] == a[1] - 65:\n        return a[0]\n    if a[0] == a[1] - 66:\n        return a[0]\n    if a[0] == a[1] - 67:\n        return a[0]\n    if a[0] == a[1] - 68:\n        return a[0]\n    if a[0] == a[1] - 69:\n        return a[0]\n    if a[0] == a[1] - 70:\n        return a[0]\n    if a[0] == a[1] - 71:\n        return a[0]\n    if a"
    },
    {
        "number": 1126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [i for i in range(1, m + 1)]\n    res = 0\n    for i in range(n):\n        res += a[i]\n        a = a[1:] + a[:1]\n    return str(res)\n"
    },
    {
        "number": 1127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[i])\n        s = stdin.split()[i+1]\n        s = list(s)\n        s = list(map(int, s))\n        s = sorted(s)\n        if s[-1] % 2 == 0:\n            print(2)\n        else:\n            print(1)\n    return \"\""
    },
    {
        "number": 1128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    if a % m == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    return str(x[0])"
    },
    {
        "number": 1130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    timetable = stdin.split()\n    timetable = [int(i) for i in timetable]\n    timetable.sort()\n    timetable.reverse()\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        else:\n            if timetable[i] - timetable[i - 1] <= k:\n                count += 1\n            else:\n                count = 0\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, w, x, c = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a > x:\n        a, x = x, a\n    if b > w:\n        b, w = w, b\n    if x > w:\n        x, w = w, x\n    if c > a:\n        c, a = a, c\n    if c > b:\n        c, b = b, c\n    if c > x:\n        c, x = x, c\n    if a <= b:\n        if a <= x:\n            if b <= w:\n                if x <= w:\n                    if c <= a:\n                        return str(min(a, b, w, x, c))\n                    else:\n                        return str(min(a, b, w, x, c) - 1)\n                else:\n                    return str(min(a, b, w, x, c) - 1)\n            else:\n                return str(min(a, b, w, x, c) - 1)\n        else:\n            return str(min(a, b, w, x, c) - 1)\n    else:\n        if b <= x:\n            if a <= w:\n                if x <= w:\n                    if c <= a:\n                        return str(min(a, b, w, x, c))\n                    else:\n                        return str(min(a, b, w, x, c) - 1)\n                else:\n                    return str(min(a, b, w, x, c) - 1)\n            else:\n                return str(min(a, b, w, x, c) - 1)\n        else:\n            return str(min(a, b, w, x, c) - 1)"
    },
    {
        "number": 1132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].add(y)\n        graph[y].add(x)\n    for i in range(1, n + 1):\n        if len(graph[i]) == 2:\n            return \"bus topology\"\n        elif len(graph[i]) == 3:\n            return \"ring topology\"\n        elif len(graph[i]) == 4:\n            return \"star topology\"\n    return \"unknown topology\"\n"
    },
    {
        "number": 1133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    words = sorted(words, key=len)\n    return str(max(len(word) for word in words))"
    },
    {
        "number": 1134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = list(map(int, stdin.split()))\n    d = [0] * n\n    for i in range(n):\n        d[i] = m[i]\n    for i in range(n):\n        for j in range(i):\n            if d[i] < d[j] and d[i] + d[j] > d[i]:\n                d[i] = d[j] + d[i]\n    return str(sum(d))\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    s = sorted(s)\n    if len(s) % 2 == 0:\n        median = s[len(s) // 2]\n    else:\n        median = s[len(s) // 2]\n    return median"
    },
    {
        "number": 1136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(i % m for i in range(1, n + 1)) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    return str(max(len(s), len(t)) - max(len(s.split()), len(t.split())))"
    },
    {
        "number": 1138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return -1\n    if s[0] == 'U' and s[-1] == 'D':\n        return 1\n    if s[0] == 'D' and s[-1] == 'U':\n        return 1\n    if s[0] == 'L' and s[-1] == 'R':\n        return 1\n    if s[0] == 'R' and s[-1] == 'L':\n        return 1\n    if s[0] == 'U' and s[-1] == 'R':\n        return 1\n    if s[0] == 'R' and s[-1] == 'U':\n        return 1\n    if s[0] == 'D' and s[-1] == 'L':\n        return 1\n    if s[0] == 'L' and s[-1] == 'D':\n        return 1\n    if s[0] == 'U' and s[-1] == 'L':\n        return 1\n    if s[0] == 'L' and s[-1] == 'U':\n        return 1\n    return -1\n"
    },
    {
        "number": 1139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, stdin.split())))\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0] + x[1])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18])\n    intervals.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17]"
    },
    {
        "number": 1140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i + 1] = b[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + abs(b[i] - b[j])\n    return str(dp[0][n]) + \" \" + str(dp[n][n])\n\nsolution(input())\n"
    },
    {
        "number": 1141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[1]\n    for _ in range(m):\n        l, r, c_1, c_2 = stdin.split()\n        l, r = int(l) - 1, int(r) - 1\n        s = s[:l] + c_2 + s[r + 1:]\n    return s"
    },
    {
        "number": 1142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    waves = []\n    for _ in range(n):\n        l, r, a = map(int, stdin.split())\n        waves.append((l, r, a))\n    waves.sort(key=lambda x: x[1])\n    bullets = 0\n    for wave in waves:\n        if bullets + wave[2] > k:\n            return '-1'\n        bullets += wave[2]\n    return str(bullets)\n"
    },
    {
        "number": 1143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days = []\n    for i in range(n):\n        days.append(list(map(int, stdin.split())))\n    days.sort(key=lambda x: (x[0], x[1]))\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[4])\n    days.sort(key=lambda x: x[5])\n    days.sort(key=lambda x: x[6])\n    days.sort(key=lambda x: x[7])\n    days.sort(key=lambda x: x[8])\n    days.sort(key=lambda x: x[9])\n    days.sort(key=lambda x: x[10])\n    days.sort(key=lambda x: x[11])\n    days.sort(key=lambda x: x[12])\n    days.sort(key=lambda x: x[13])\n    days.sort(key=lambda x: x[14])\n    days.sort(key=lambda x: x[15])\n    days.sort(key=lambda x: x[16])\n    days.sort(key=lambda x: x[17])\n    days.sort(key=lambda x: x[18])\n    days.sort(key=lambda x: x[19])\n    days.sort(key=lambda x: x[20])\n    days.sort(key=lambda x: x[21])\n    days.sort(key=lambda x: x[22])\n    days.sort(key=lambda x: x[23])\n    days.sort(key=lambda x: x[24])\n    days.sort(key=lambda x: x[25])\n    days.sort(key=lambda x: x[26])\n    days.sort(key=lambda x: x[27])\n    days.sort(key=lambda x: x[28])\n    days.sort(key=lambda x: x[29])\n    days.sort(key=lambda x: x[30])\n    days.sort(key=lambda x: x[31])\n    days.sort(key=lambda x: x[32])\n    days.sort(key=lambda x: x[33])\n    days.sort(key=lambda x: x[34])\n    days.sort(key=lambda x: x[35])\n    days.sort(key=lambda x: x[36])\n    days.sort(key=lambda x: x[37])\n    days.sort(key=lambda x: x[38])\n    days.sort(key=lambda x: x[39])\n    days.sort(key=lambda x: x[40])\n    days.sort(key=lambda x: x[41])\n    days.sort(key=lambda x: x[42])\n    days.sort(key=lambda x: x[43])\n    days.sort(key=lambda x: x[44])\n    days.sort(key=lambda x: x[45])\n    days.sort(key=lambda x: x[46])\n    days.sort(key=lambda x: x[47])\n    days.sort(key=lambda x: x[48])\n    days.sort(key=lambda x: x[49])\n    days.sort(key=lambda x: x[50])\n    days.sort(key=lambda x: x[51])\n    days.sort(key=lambda x: x[52])\n    days.sort(key=lambda x: x[53])\n    days.sort(key=lambda x: x[54])\n    days.sort(key=lambda x: x[55])\n    days.sort(key=lambda x: x[56])\n    days.sort(key=lambda x: x[57])\n    days.sort(key=lambda x: x[58])\n    days.sort(key=lambda x: x[59])\n    days.sort(key=lambda x: x[60])\n    days.sort(key=lambda x: x[61])\n    days.sort(key=lambda x: x[62])\n    days.sort(key=lambda x: x[63])\n    days.sort(key=lambda x: x[64])\n    days.sort(key=lambda x: x[65])\n    days.sort(key=lambda x: x[66])\n    days.sort(key=lambda x: x[67])\n    days.sort(key=lambda x: x[68])\n    days.sort(key=lambda x: x[69])\n    days.sort(key=lambda x: x[70])\n    days.sort(key=lambda x: x[71])\n    days.sort(key=lambda x: x[72])\n    days.sort(key=lambda x: x[73])\n    days.sort(key=lambda x: x[74])\n    days.sort(key=lambda x: x[75])\n    days.sort(key=lambda x: x[76])\n    days.sort(key=lambda x: x[77])\n    days.sort(key=lambda x: x[78])\n    days.sort(key=lambda x: x[79])\n    days.sort(key=lambda x: x[80])\n    days.sort(key=lambda x: x[81])\n    days.sort(key=lambda x: x[82])\n    days.sort(key=lambda x: x[83])\n    days.sort(key=lambda x: x[84])\n    days.sort(key=lambda x: x[85])\n    days.sort(key=lambda x: x[86])\n    days.sort(key=lambda x: x[87])\n    days.sort(key=lambda x: x[88])\n    days.sort(key=lambda x: x[89])\n    days.sort(key=lambda x: x[90])\n    days.sort(key=lambda"
    },
    {
        "number": 1144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    m = int(stdin.split()[2])\n    # print(n, s, m)\n    # print(s)\n    # print(m)\n    # print(s.count('?'))\n    # print(s.count('a'))\n    # print(s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'))\n    # print(s.count('?') + s.count('a') + s.count('b'"
    },
    {
        "number": 1145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 1146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    buttons = list(map(int, stdin.split()))\n    buttons.sort()\n    lights = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if lights[j] == 0:\n                lights[j] = buttons[i]\n                break\n    return \"YES\" if all(lights) else \"NO\"\n"
    },
    {
        "number": 1147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] <= a[j] and a[i] % x == 0 and a[j] % x == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_square = 0\n    for i in range(n):\n        if a[i] == n:\n            max_square = max(max_square, i + 1)\n        else:\n            max_square = max(max_square, i + 1 + a[i])\n    return str(max_square)\n"
    },
    {
        "number": 1149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    if x == y:\n        return \"I become the guy.\"\n    else:\n        return \"Oh, my keyboard!\""
    },
    {
        "number": 1150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    regiments = []\n    for i in range(n):\n        regiments.append(list(map(int, stdin.split())))\n    regiments = sorted(regiments, key=lambda x: (x[0], x[1]))\n    min_moves = 0\n    for i in range(n):\n        if i == 0:\n            min_moves += abs(regiments[i][0] - regiment[i][0]) + abs(regiments[i][1] - regiment[i][1])\n        elif i == n - 1:\n            min_moves += abs(regiments[i][0] - regiment[i][0]) + abs(regiments[i][1] - regiment[i][1])\n        else:\n            min_moves += min(abs(regiments[i][0] - regiment[i][0]), abs(regiments[i][1] - regiment[i][1]))\n    return min_moves\n"
    },
    {
        "number": 1151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, u = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n    e.sort()\n    if n < 3:\n        return -1\n    if e[0] > u:\n        return -1\n    if e[-1] < u:\n        return -1\n    if e[0] == e[1]:\n        return -1\n    if e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] and e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1] == e[-2]:\n        return -1\n    if e[0] == e[1] or e[-1"
    },
    {
        "number": 1152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(x) for x in stdin.split()] for _ in range(n)]\n    B = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1 and B[i][j] == 0:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                break\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1 and B[i][j] == 0:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                break\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1 and B[i][j] == 0:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                break\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1 and B[i][j] == 1:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 1:\n                            A[k][l] = 0\n                            break\n                break\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1 and B[i][j] == 1:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A[k][l] == 0:\n                            A[k][l] = 1\n                            break\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if A["
    },
    {
        "number": 1153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 1)\n    y.append(y[-1] + 1)\n    x.sort()\n    y.sort()\n    x."
    },
    {
        "number": 1154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    while True:\n        for i in range(n):\n            if a[i] > h:\n                res += (a[i] - h) * k\n                a[i] = h\n                break\n        else:\n            res += (h - 1) * k\n            break\n    return str(res)"
    },
    {
        "number": 1155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = a[::-1]\n    return str(sum(a) / sum(b))"
    },
    {
        "number": 1156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    l = 0\n    r = 10**9\n    while l <= r:\n        mid = (l + r) // 2\n        if mid == 0:\n            return str(mid)\n        if mid == 1:\n            return str(mid)\n        if mid == 2:\n            return str(mid)\n        if mid == 3:\n            return str(mid)\n        if mid == 4:\n            return str(mid)\n        if mid == 5:\n            return str(mid)\n        if mid == 6:\n            return str(mid)\n        if mid == 7:\n            return str(mid)\n        if mid == 8:\n            return str(mid)\n        if mid == 9:\n            return str(mid)\n        if mid == 10:\n            return str(mid)\n        if mid == 11:\n            return str(mid)\n        if mid == 12:\n            return str(mid)\n        if mid == 13:\n            return str(mid)\n        if mid == 14:\n            return str(mid)\n        if mid == 15:\n            return str(mid)\n        if mid == 16:\n            return str(mid)\n        if mid == 17:\n            return str(mid)\n        if mid == 18:\n            return str(mid)\n        if mid == 19:\n            return str(mid)\n        if mid == 20:\n            return str(mid)\n        if mid == 21:\n            return str(mid)\n        if mid == 22:\n            return str(mid)\n        if mid == 23:\n            return str(mid)\n        if mid == 24:\n            return str(mid)\n        if mid == 25:\n            return str(mid)\n        if mid == 26:\n            return str(mid)\n        if mid == 27:\n            return str(mid)\n        if mid == 28:\n            return str(mid)\n        if mid == 29:\n            return str(mid)\n        if mid == 30:\n            return str(mid)\n        if mid == 31:\n            return str(mid)\n        if mid == 32:\n            return str(mid)\n        if mid == 33:\n            return str(mid)\n        if mid == 34:\n            return str(mid)\n        if mid == 35:\n            return str(mid)\n        if mid == 36:\n            return str(mid)\n        if mid == 37:\n            return str(mid)\n        if mid == 38:\n            return str(mid)\n        if mid == 39:\n            return str(mid)\n        if mid == 40:\n            return str(mid)\n        if mid == 41:\n            return str(mid)\n        if mid == 42:\n            return str(mid)\n        if mid == 43:\n            return str(mid)\n        if mid == 44:\n            return str(mid)\n        if mid == 45:\n            return str(mid)\n        if mid == 46:\n            return str(mid)\n        if mid == 47:\n            return str(mid)\n        if mid == 48:\n            return str(mid)\n        if mid == 49:\n            return str(mid)\n        if mid == 50:\n            return str(mid)\n        if mid == 51:\n            return str(mid)\n        if mid == 52:\n            return str(mid)\n        if mid == 53:\n            return str(mid)\n        if mid == 54:\n            return str(mid)\n        if mid == 55:\n            return str(mid)\n        if mid == 56:\n            return str(mid)\n        if mid == 57:\n            return str(mid)\n        if mid == 58:\n            return str(mid)\n        if mid == 59:\n            return str(mid)\n        if mid == 60:\n            return str(mid)\n        if mid == 61:\n            return str(mid)\n        if mid == 62:\n            return str(mid)\n        if mid == 63:\n            return str(mid)\n        if mid == 64:\n            return str(mid)\n        if mid == 65:\n            return str(mid)\n        if mid == 66:\n            return str(mid)\n        if mid == 67:\n            return str(mid)\n        if mid == 68:\n            return str(mid)\n        if mid == 69:\n            return str(mid)\n        if mid == 70:\n            return str(mid)\n        if mid == 71:\n            return str(mid)\n        if mid == 72:\n            return str(mid)\n        if mid == 73:\n            return str(mid)\n        if mid == 74:\n            return str(mid)\n        if mid == 75:\n            return str(mid)\n        if mid == 76:\n            return str(mid)\n        if mid == 77:\n            return str(mid)\n        if mid == 78:\n            return str(mid)\n        if mid == 79:\n            return str(mid)\n        if mid == 80:\n            return str(mid)\n        if mid == 81:\n            return str(mid)\n        if mid == 82:\n            return str(mid)\n        if mid == 83:\n            return str(mid)\n        if mid == 84:\n            return str(mid)\n        if mid == 85:\n            return str(mid)\n        if mid == 86:\n            return str(mid)\n        if mid == 87:\n            return str(mid)\n        if mid == 88:\n            return str(mid)\n        if mid == 89:\n            return str(mid)\n        if mid == 90:\n            return str(mid)\n        if mid == 91:\n            return str(mid)\n        if mid == 92:\n            return str(mid)\n        if mid == 93:\n            return str(mid)\n        if mid == 94:\n            return str(mid)\n        if mid == 95:\n            return str(mid)\n        if mid == 96:\n            return str(mid)\n        if mid == 97:\n            return str(mid)\n        if mid =="
    },
    {
        "number": 1157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    neg = 0\n    pos = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] < 0:\n                neg += 1\n            elif a[i] * a[j] > 0:\n                pos += 1\n    return str(neg) + \" \" + str(pos)\n"
    },
    {
        "number": 1158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    utensils = list(map(int, stdin.split()))\n    utensils.sort()\n    return str(utensils[k - 1] - utensils[0])\n"
    },
    {
        "number": 1159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return -1\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 3 4 5 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 16:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 17:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 18:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 19:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 20:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 21:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 22:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 23:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 24:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 25:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 26:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 27:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 28:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 29:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 30:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 31:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 32:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 33:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 34:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 35:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 36:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 37:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 38:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 39:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 40:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 41:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if n == 42:"
    },
    {
        "number": 1160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sizes = list(map(int, stdin.split()[1:]))\n    sizes.sort()\n    if len(sizes) == 1:\n        return \"YES\"\n    if len(sizes) == 2:\n        if sizes[0] == sizes[1]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 3:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[1] == sizes[2]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 4:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[0] == sizes[3] or sizes[1] == sizes[2] or sizes[1] == sizes[3] or sizes[2] == sizes[3]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 5:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[0] == sizes[3] or sizes[0] == sizes[4] or sizes[1] == sizes[2] or sizes[1] == sizes[3] or sizes[1] == sizes[4] or sizes[2] == sizes[3] or sizes[2] == sizes[4] or sizes[3] == sizes[4]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 6:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[0] == sizes[3] or sizes[0] == sizes[4] or sizes[0] == sizes[5] or sizes[1] == sizes[2] or sizes[1] == sizes[3] or sizes[1] == sizes[4] or sizes[1] == sizes[5] or sizes[2] == sizes[3] or sizes[2] == sizes[4] or sizes[2] == sizes[5] or sizes[3] == sizes[4] or sizes[3] == sizes[5] or sizes[4] == sizes[5]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 7:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[0] == sizes[3] or sizes[0] == sizes[4] or sizes[0] == sizes[5] or sizes[0] == sizes[6] or sizes[1] == sizes[2] or sizes[1] == sizes[3] or sizes[1] == sizes[4] or sizes[1] == sizes[5] or sizes[1] == sizes[6] or sizes[2] == sizes[3] or sizes[2] == sizes[4] or sizes[2] == sizes[5] or sizes[2] == sizes[6] or sizes[3] == sizes[4] or sizes[3] == sizes[5] or sizes[3] == sizes[6] or sizes[4] == sizes[5] or sizes[4] == sizes[6] or sizes[5] == sizes[6]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 8:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[0] == sizes[3] or sizes[0] == sizes[4] or sizes[0] == sizes[5] or sizes[0] == sizes[6] or sizes[0] == sizes[7] or sizes[1] == sizes[2] or sizes[1] == sizes[3] or sizes[1] == sizes[4] or sizes[1] == sizes[5] or sizes[1] == sizes[6] or sizes[1] == sizes[7] or sizes[2] == sizes[3] or sizes[2] == sizes[4] or sizes[2] == sizes[5] or sizes[2] == sizes[6] or sizes[2] == sizes[7] or sizes[3] == sizes[4] or sizes[3] == sizes[5] or sizes[3] == sizes[6] or sizes[3] == sizes[7] or sizes[4] == sizes[5] or sizes[4] == sizes[6] or sizes[4] == sizes[7] or sizes[5] == sizes[6] or sizes[5] == sizes[7] or sizes[6] == sizes[7]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 9:\n        if sizes[0] == sizes[1] or sizes[0] == sizes[2] or sizes[0] == sizes[3] or sizes[0] == sizes[4] or sizes[0] == sizes[5] or sizes[0] == sizes[6] or sizes[0] == sizes[7] or sizes[0] == sizes[8] or sizes[1] == sizes[2] or sizes[1] == sizes[3] or sizes[1] == sizes[4] or sizes[1] == sizes[5] or sizes[1] == sizes[6] or sizes[1] == sizes[7] or sizes[1] == sizes[8] or sizes[2] == sizes[3] or sizes[2] == sizes[4] or sizes[2] == sizes[5] or sizes[2] == sizes[6] or sizes[2] == sizes[7] or sizes[2] == sizes[8] or sizes[3] == sizes[4] or sizes[3] == sizes[5] or sizes[3] == sizes[6] or sizes[3] == sizes[7] or sizes[3] == sizes[8] or sizes[4] == sizes[5] or sizes[4] == sizes[6] or sizes[4] == sizes[7] or sizes[4] == sizes[8] or sizes[5] == sizes[6] or sizes[5] == sizes[7] or sizes[5] == sizes[8] or sizes[6] == sizes[7] or sizes[6] == sizes[8] or sizes[7] == sizes[8]:\n            return \"NO\"\n        return \"YES\"\n    if len(sizes) == 10:\n        if sizes"
    },
    {
        "number": 1161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    while True:\n        if s.count('<') == s.count('>') and s.count('{') == s.count('}') and s.count('[') == s.count(']'):\n            return count\n        if s.count('<') == s.count('>') and s.count('{') == s.count('}'):\n            s = s.replace('<', '{')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('['):\n            s = s.replace('<', '[')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('('):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count(')'):\n            s = s.replace('<', ')')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('}'):\n            s = s.replace('<', '}')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count(']'):\n            s = s.replace('<', ']')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('['):\n            s = s.replace('<', '[')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(')'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(']'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('{'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('}'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(']'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('('):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(')'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('{'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(']'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('}'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('('):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(')'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('{'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('}'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(']'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('('):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count(')'):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') == s.count('>') and s.count('(') and s.count('['):\n            s = s.replace('<', '(')\n            count += 1\n        elif s.count('<') =="
    },
    {
        "number": 1162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, s, r = map(int, stdin.split())\n    return str(pow(p, s - r, 998244353) * pow(pow(p, r, 998244353) - 1, -1, 998244353))"
    },
    {
        "number": 1163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"B\" * n\n    if n == m + 1:\n        return \"G\" * m\n    if n == m + 2:\n        return \"B\" * n + \"G\" * m\n    if n == m + 3:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1)\n    if n == m + 4:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2)\n    if n == m + 5:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3)\n    if n == m + 6:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4)\n    if n == m + 7:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5)\n    if n == m + 8:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6)\n    if n == m + 9:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7)\n    if n == m + 10:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8)\n    if n == m + 11:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9)\n    if n == m + 12:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9) + \"G\" * (m - 10)\n    if n == m + 13:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9) + \"G\" * (m - 10) + \"B\" * (m - 11)\n    if n == m + 14:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9) + \"G\" * (m - 10) + \"B\" * (m - 11) + \"G\" * (m - 12)\n    if n == m + 15:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9) + \"G\" * (m - 10) + \"B\" * (m - 11) + \"G\" * (m - 12) + \"B\" * (m - 13)\n    if n == m + 16:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9) + \"G\" * (m - 10) + \"B\" * (m - 11) + \"G\" * (m - 12) + \"B\" * (m - 13) + \"G\" * (m - 14)\n    if n == m + 17:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8) + \"B\" * (m - 9) + \"G\" * (m - 10) + \"B\" * (m - 11) + \"G\" * (m - 12) + \"B\" * (m - 13) + \"G\" * (m - 14) + \"B\" * (m - 15)\n    if n == m + 18:\n        return \"B\" * n + \"G\" * m + \"B\" * (m - 1) + \"G\" * (m - 2) + \"B\" * (m - 3) + \"G\" * (m - 4) + \"B\" * (m - 5) + \"G\" * (m - 6) + \"B\" * (m - 7) + \"G\" * (m - 8)"
    },
    {
        "number": 1164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bill = stdin\n    total = 0\n    for i in range(len(bill)):\n        if bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == ',':\n            total += float(bill[i-2:i])/100\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])/100\n        elif bill[i] == '$':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:i])\n        elif bill[i] == '.':\n            total += float(bill[i-2:"
    },
    {
        "number": 1165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(m):\n        l, r, x = map(int, stdin.split())\n        if a[l - 1]!= x:\n            res.append(l)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > a[-1]:\n        return \"A\" * n\n    if a[0] < a[-1]:\n        return \"B\" * n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            return \"A\" * n\n        if a[i] < a[i - 1]:\n            return \"B\" * n\n    return \"B\" * n"
    },
    {
        "number": 1167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c, d, k = map(int, stdin.split())\n        if a + b + c + d + k > k:\n            print(-1)\n        else:\n            print(a, b)\n    return \"\""
    },
    {
        "number": 1168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] | a[j] > a[i + 1]:\n                res += 1\n    return str(res)"
    },
    {
        "number": 1169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return f\"{min(n - 1, m - 1)}{max(n - 1, m - 1)}\""
    },
    {
        "number": 1170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        if n == m:\n            print(n, n)\n        else:\n            print(n, m)\n    return \"\""
    },
    {
        "number": 1171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    jewels = list(map(int, stdin.split()))\n    jewels.sort()\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n    jewels = deque(jewels)\n"
    },
    {
        "number": 1172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\"?\", \"A\")\n    s = s.replace(\"?\", \"B\")\n    s = s.replace(\"?\", \"C\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace"
    },
    {
        "number": 1173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0]!= 1:\n        return -1\n    if a[-1]!= n:\n        return -1\n    if a[1]!= a[0] + 1:\n        return -1\n    if a[-2]!= a[-1] - 1:\n        return -1\n    if a[2]!= a[1] + 1:\n        return -1\n    if a[-3]!= a[-2] - 1:\n        return -1\n    if a[3]!= a[2] + 1:\n        return -1\n    if a[-4]!= a[-3] - 1:\n        return -1\n    if a[4]!= a[3] + 1:\n        return -1\n    if a[-5]!= a[-4] - 1:\n        return -1\n    if a[5]!= a[4] + 1:\n        return -1\n    if a[-6]!= a[-5] - 1:\n        return -1\n    if a[6]!= a[5] + 1:\n        return -1\n    if a[-7]!= a[-6] - 1:\n        return -1\n    if a[7]!= a[6] + 1:\n        return -1\n    if a[-8]!= a[-7] - 1:\n        return -1\n    if a[8]!= a[7] + 1:\n        return -1\n    if a[-9]!= a[-8] - 1:\n        return -1\n    if a[9]!= a[8] + 1:\n        return -1\n    if a[-10]!= a[-9] - 1:\n        return -1\n    if a[10]!= a[9] + 1:\n        return -1\n    if a[-11]!= a[-10] - 1:\n        return -1\n    if a[11]!= a[10] + 1:\n        return -1\n    if a[-12]!= a[-11] - 1:\n        return -1\n    if a[12]!= a[11] + 1:\n        return -1\n    if a[-13]!= a[-12] - 1:\n        return -1\n    if a[13]!= a[12] + 1:\n        return -1\n    if a[-14]!= a[-13] - 1:\n        return -1\n    if a[14]!= a[13] + 1:\n        return -1\n    if a[-15]!= a[-14] - 1:\n        return -1\n    if a[15]!= a[14] + 1:\n        return -1\n    if a[-16]!= a[-15] - 1:\n        return -1\n    if a[16]!= a[15] + 1:\n        return -1\n    if a[-17]!= a[-16] - 1:\n        return -1\n    if a[17]!= a[16] + 1:\n        return -1\n    if a[-18]!= a[-17] - 1:\n        return -1\n    if a[18]!= a[17] + 1:\n        return -1\n    if a[-19]!= a[-18] - 1:\n        return -1\n    if a[19]!= a[18] + 1:\n        return -1\n    if a[-20]!= a[-19] - 1:\n        return -1\n    if a[20]!= a[19] + 1:\n        return -1\n    if a[-21]!= a[-20] - 1:\n        return -1\n    if a[21]!= a[20] + 1:\n        return -1\n    if a[-22]!= a[-21] - 1:\n        return -1\n    if a[22]!= a[21] + 1:\n        return -1\n    if a[-23]!= a[-22] - 1:\n        return -1\n    if a[23]!= a[22] + 1:\n        return -1\n    if a[-24]!= a[-23] - 1:\n        return -1\n    if a[24]!= a[23] + 1:\n        return -1\n    if a[-25]!= a[-24] - 1:\n        return -1\n    if a[25]!= a[24] + 1:\n        return -1\n    if a[-26]!= a[-25] - 1:\n        return -1\n    if a[26]!= a[25] + 1:\n        return -1\n    if a[-27]!= a[-26] - 1:\n        return -1\n    if a[27]!= a[26] + 1:\n        return -1\n    if a[-28]!= a[-27] - 1:\n        return -1\n    if a[28]!= a[27] + 1:\n        return -1\n    if a[-29]!= a[-28] - 1:\n        return -1\n    if a[29]!= a[28] + 1:\n        return -1\n    if a[-30]!= a[-29] - 1:\n        return -1\n    if a[30]!= a[29] + 1:\n        return -1\n    if a[-31]!= a[-30] - 1:\n        return -1\n    if a[31]!= a[30] + 1:\n        return -1\n    if a[-32]!= a[-31] - 1:\n        return -1\n    if a[32]!= a[31] + 1:\n        return -1\n    if a[-33]!= a[-32] - 1:\n        return -1\n    if a[33]!= a[32] + 1:\n        return -1\n    if a[-34]!= a[-33] - 1:\n        return -1\n    if a[34]!= a[33] + 1:\n        return -1\n    if a[-35]!= a[-34] - 1:\n        return -1\n    if a[35]!= a[34] + 1:\n        return -1\n    if a[-36]!= a[-35] - 1:\n        return -1\n    if a[36]!= a[35] + 1:\n        return -1\n    if a[-37]!= a[-36] - 1:\n        return -1\n    if a[37]!= a[36] + 1:\n        return -1\n    "
    },
    {
        "number": 1174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1:\n                dp[i][j] = a[i - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n            if j >= a[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + a[i - 1] // 2)\n    return str(dp[n][m])"
    },
    {
        "number": 1175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(sum(1 for x in range(L, R + 1) for y in range(x, R + 1) if x ^ y == y ^ x))"
    },
    {
        "number": 1176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] * -1)\n    return str(sum(b))"
    },
    {
        "number": 1177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            res += f(i, j, s, a)\n    return str(res % 998244353)\n\ndef"
    },
    {
        "number": 1178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    H.sort()\n    ans = 0\n    for i in range(N):\n        if i == 0:\n            ans += 1\n        else:\n            if H[i] - H[i - 1] <= K:\n                ans += 1\n            else:\n                ans += 1\n                K = K - (H[i] - H[i - 1])\n    return str(ans)"
    },
    {
        "number": 1179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    id_1 = int(stdin.split()[0])\n    id_2 = int(stdin.split()[1])\n    id_3 = int(stdin.split()[2])\n    id_4 = int(stdin.split()[3])\n    id_5 = int(stdin.split()[4])\n    id_6 = int(stdin.split()[5])\n    id_7 = int(stdin.split()[6])\n    id_8 = int(stdin.split()[7])\n    id_9 = int(stdin.split()[8])\n    id_10 = int(stdin.split()[9])\n    id_11 = int(stdin.split()[10])\n    id_12 = int(stdin.split()[11])\n    id_13 = int(stdin.split()[12])\n    id_14 = int(stdin.split()[13])\n    id_15 = int(stdin.split()[14])\n    id_16 = int(stdin.split()[15])\n    id_17 = int(stdin.split()[16])\n    id_18 = int(stdin.split()[17])\n    id_19 = int(stdin.split()[18])\n    id_20 = int(stdin.split()[19])\n    id_21 = int(stdin.split()[20])\n    id_22 = int(stdin.split()[21])\n    id_23 = int(stdin.split()[22])\n    id_24 = int(stdin.split()[23])\n    id_25 = int(stdin.split()[24])\n    id_26 = int(stdin.split()[25])\n    id_27 = int(stdin.split()[26])\n    id_28 = int(stdin.split()[27])\n    id_29 = int(stdin.split()[28])\n    id_30 = int(stdin.split()[29])\n    id_31 = int(stdin.split()[30])\n    id_32 = int(stdin.split()[31])\n    id_33 = int(stdin.split()[32])\n    id_34 = int(stdin.split()[33])\n    id_35 = int(stdin.split()[34])\n    id_36 = int(stdin.split()[35])\n    id_37 = int(stdin.split()[36])\n    id_38 = int(stdin.split()[37])\n    id_39 = int(stdin.split()[38])\n    id_40 = int(stdin.split()[39])\n    id_41 = int(stdin.split()[40])\n    id_42 = int(stdin.split()[41])\n    id_43 = int(stdin.split()[42])\n    id_44 = int(stdin.split()[43])\n    id_45 = int(stdin.split()[44])\n    id_46 = int(stdin.split()[45])\n    id_47 = int(stdin.split()[46])\n    id_48 = int(stdin.split()[47])\n    id_49 = int(stdin.split()[48])\n    id_50 = int(stdin.split()[49])\n    id_51 = int(stdin.split()[50])\n    id_52 = int(stdin.split()[51])\n    id_53 = int(stdin.split()[52])\n    id_54 = int(stdin.split()[53])\n    id_55 = int(stdin.split()[54])\n    id_56 = int(stdin.split()[55])\n    id_57 = int(stdin.split()[56])\n    id_58 = int(stdin.split()[57])\n    id_59 = int(stdin.split()[58])\n    id_60 = int(stdin.split()[59])\n    id_61 = int(stdin.split()[60])\n    id_62 = int(stdin.split()[61])\n    id_63 = int(stdin.split()[62])\n    id_64 = int(stdin.split()[63])\n    id_65 = int(stdin.split()[64])\n    id_66 = int(stdin.split()[65])\n    id_67 = int(stdin.split()[66])\n    id_68 = int(stdin.split()[67])\n    id_69 = int(stdin.split()[68])\n    id_70 = int(stdin.split()[69])\n    id_71 = int(stdin.split()[70])\n    id_72 = int(stdin.split()[71])\n    id_73 = int(stdin.split()[72])\n    id_74 = int(stdin.split()[73])\n    id_75 = int(stdin.split()[74])\n    id_76 = int(stdin.split()[75])\n    id_77 = int(stdin.split()[76])\n    id_78 = int(stdin.split()[77])\n    id_79 = int(stdin.split()[78])\n    id_80 = int(stdin.split()[79])\n    id_81 = int(stdin.split()[80])\n    id_82 = int(stdin.split()[81])\n    id_83 = int(stdin.split()[82])\n    id_84 = int(stdin.split()[83])\n    id_85 = int(stdin.split()[84])\n    id_86 = int(stdin.split()[85])\n    id_87 = int(stdin.split()[86])\n    id_88 = int(stdin.split()[87])\n    id_89 = int(stdin.split()[88])\n    id_90 = int(stdin.split()[89])\n    id_91 = int(stdin.split()[90])\n    id_92 = int(stdin.split()[91])\n    id_93 = int(stdin.split()[92])\n    id_94 = int(stdin.split()[93])\n    id_95 = int(stdin.split()[94])\n    id_96 = int(stdin.split()[95])\n    id_97 = int(stdin.split()[96])\n    id_98 = int(stdin.split()[97])\n    id_99 = int(stdin.split()[98])\n    id_100 = int(stdin.split()[99])\n    id_101 = int(stdin.split()[100])\n    id_102 = int("
    },
    {
        "number": 1180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    while k > 0:\n        s = s.replace('+', '+0')\n        s = s.replace('+', '+')\n        k -= 1\n    return str(eval(s))"
    },
    {
        "number": 1181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(1, m):\n        ans += abs(a[i] - a[i - 1])\n    return str(ans)"
    },
    {
        "number": 1182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, n, k = map(int, stdin.split())\n    violas = list(map(int, stdin.split()))\n    violas = sorted(violas)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[0] == violas[1]:\n            return str(2)\n        if violas[0]!= violas[1]:\n            return str(1)\n    if n == 3:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[2] == 1:\n            return str(1)\n        if violas[0] == violas[1] and violas[1] == violas[2]:\n            return str(2)\n        if violas[0]!= violas[1] and violas[1]!= violas[2]:\n            return str(1)\n    if n == 4:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[2] == 1:\n            return str(1)\n        if violas[3] == 1:\n            return str(1)\n        if violas[0] == violas[1] and violas[1] == violas[2] and violas[2] == violas[3]:\n            return str(2)\n        if violas[0]!= violas[1] and violas[1]!= violas[2] and violas[2]!= violas[3]:\n            return str(1)\n    if n == 5:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[2] == 1:\n            return str(1)\n        if violas[3] == 1:\n            return str(1)\n        if violas[4] == 1:\n            return str(1)\n        if violas[0] == violas[1] and violas[1] == violas[2] and violas[2] == violas[3] and violas[3] == violas[4]:\n            return str(2)\n        if violas[0]!= violas[1] and violas[1]!= violas[2] and violas[2]!= violas[3] and violas[3]!= violas[4]:\n            return str(1)\n    if n == 6:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[2] == 1:\n            return str(1)\n        if violas[3] == 1:\n            return str(1)\n        if violas[4] == 1:\n            return str(1)\n        if violas[5] == 1:\n            return str(1)\n        if violas[0] == violas[1] and violas[1] == violas[2] and violas[2] == violas[3] and violas[3] == violas[4] and violas[4] == violas[5]:\n            return str(2)\n        if violas[0]!= violas[1] and violas[1]!= violas[2] and violas[2]!= violas[3] and violas[3]!= violas[4] and violas[4]!= violas[5]:\n            return str(1)\n    if n == 7:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[2] == 1:\n            return str(1)\n        if violas[3] == 1:\n            return str(1)\n        if violas[4] == 1:\n            return str(1)\n        if violas[5] == 1:\n            return str(1)\n        if violas[6] == 1:\n            return str(1)\n        if violas[0] == violas[1] and violas[1] == violas[2] and violas[2] == violas[3] and violas[3] == violas[4] and violas[4] == violas[5] and violas[5] == violas[6]:\n            return str(2)\n        if violas[0]!= violas[1] and violas[1]!= violas[2] and violas[2]!= violas[3] and violas[3]!= violas[4] and violas[4]!= violas[5] and violas[5]!= violas[6]:\n            return str(1)\n    if n == 8:\n        if violas[0] == 1:\n            return str(1)\n        if violas[1] == 1:\n            return str(1)\n        if violas[2] == 1:\n            return str(1)\n        if violas[3] == 1:\n            return str(1)\n        if violas[4] == 1:\n            return str(1)\n        if violas[5] == 1:\n            return str(1)\n        if violas[6] == 1:\n            return str(1)\n        if violas[7] == 1:\n            return str(1)\n        if violas[0] == violas[1] and violas[1] == violas[2] and violas[2] == violas[3] and violas[3] == violas[4] and violas[4] == violas[5] and violas[5] == violas[6] and violas[6] == violas[7]:\n            return str(2)\n        if violas[0]!= violas[1] and violas[1]!= violas[2] and violas[2]!= violas[3] and violas[3]!= violas[4] and violas[4]!= violas[5] and violas[5]!= violas[6] and violas[6]!= violas[7]:\n            return str(1)\n    if n == 9:\n        if violas[0] == 1:\n            return str"
    },
    {
        "number": 1183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    v = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] >= x:\n            v = max(v, a[i] + 1)\n    return str(v)"
    },
    {
        "number": 1184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(set(stdin.split(',')))"
    },
    {
        "number": 1185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    dp = [[0] * (m + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - p[i - 1]] + p[i - 1])\n    return str(dp[k][m])\n"
    },
    {
        "number": 1186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"YES\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"YES\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"YES\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"YES\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"YES\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return \"YES\"\n    if n == 119:\n        return \"YES\"\n    if n == 120:\n        return \"YES\"\n    if n == 121:\n        return \"YES\"\n    if n == 122:\n        return \"YES\"\n    if n == 123:\n        return \"YES\"\n    if n == 124:\n        return \"YES\"\n    if n == 125:\n        return \"YES\"\n    if n == 126:\n        return \"YES\"\n    if n == 127:\n        return \"YES\"\n    if n == 128:\n        return \"YES\"\n    if n == 129:\n        return \"YES\"\n    if n == 130:\n        return \"YES\"\n    if n == 131:\n        return \"YES\"\n    if n == 132:\n        return \"YES\"\n    if n == 133:\n        return \"YES\"\n    if n == 134:\n        return \"YES\"\n    if n == 135:\n        return \"YES\"\n    if n == 136:\n        return \"YES\"\n    if n == 137:\n        "
    },
    {
        "number": 1187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    colors = [0] * n\n    colors_used = 0\n    colors_used_set = set()\n    colors_used_set.add(0)\n    colors_used_set.add(1)\n    colors_used_set.add(2)\n    colors_used_set.add(3)\n    colors_used_set.add(4)\n    colors_used_set.add(5)\n    colors_used_set.add(6)\n    colors_used_set.add(7)\n    colors_used_set.add(8)\n    colors_used_set.add(9)\n    colors_used_set.add(10)\n    colors_used_set.add(11)\n    colors_used_set.add(12)\n    colors_used_set.add(13)\n    colors_used_set.add(14)\n    colors_used_set.add(15)\n    colors_used_set.add(16)\n    colors_used_set.add(17)\n    colors_used_set.add(18)\n    colors_used_set.add(19)\n    colors_used_set.add(20)\n    colors_used_set.add(21)\n    colors_used_set.add(22)\n    colors_used_set.add(23)\n    colors_used_set.add(24)\n    colors_used_set.add(25)\n    colors_used_set.add(26)\n    colors_used_set.add(27)\n    colors_used_set.add(28)\n    colors_used_set.add(29)\n    colors_used_set.add(30)\n    colors_used_set.add(31)\n    colors_used_set.add(32)\n    colors_used_set.add(33)\n    colors_used_set.add(34)\n    colors_used_set.add(35)\n    colors_used_set.add(36)\n    colors_used_set.add(37)\n    colors_used_set.add(38)\n    colors_used_set.add(39)\n    colors_used_set.add(40)\n    colors_used_set.add(41)\n    colors_used_set.add(42)\n    colors_used_set.add(43)\n    colors_used_set.add(44)\n    colors_used_set.add(45)\n    colors_used_set.add(46)\n    colors_used_set.add(47)\n    colors_used_set.add(48)\n    colors_used_set.add(49)\n    colors_used_set.add(50)\n    colors_used_set.add(51)\n    colors_used_set.add(52)\n    colors_used_set.add(53)\n    colors_used_set.add(54)\n    colors_used_set.add(55)\n    colors_used_set.add(56)\n    colors_used_set.add(57)\n    colors_used_set.add(58)\n    colors_used_set.add(59)\n    colors_used_set.add(60)\n    colors_used_set.add(61)\n    colors_used_set.add(62)\n    colors_used_set.add(63)\n    colors_used_set.add(64)\n    colors_used_set.add(65)\n    colors_used_set.add(66)\n    colors_used_set.add(67)\n    colors_used_set.add(68)\n    colors_used_set.add(69)\n    colors_used_set.add(70)\n    colors_used_set.add(71)\n    colors_used_set.add(72)\n    colors_used_set.add(73)\n    colors_used_set.add(74)\n    colors_used_set.add(75)\n    colors_used_set.add(76)\n    colors_used_set.add(77)\n    colors_used_set.add(78)\n    colors_used_set.add(79)\n    colors_used_set.add(80)\n    colors_used_set.add(81)\n    colors_used_set.add(82)\n    colors_used_set.add(83)\n    colors_used_set.add(84)\n    colors_used_set.add(85)\n    colors_used_set.add(86)\n    colors_used_set.add(87)\n    colors_used_set.add(88)\n    colors_used_set.add(89)\n    colors_used_set.add(90)\n    colors_used_set.add(91)\n    colors_used_set.add(92)\n    colors_used_set.add(93)\n    colors_used_set.add(94)\n    colors_used_set.add(95)\n    colors_used_set.add(96)\n    colors_used_set.add(97)\n    colors_used_set.add(98)\n    colors_used_set.add(99)\n    colors_used_set.add(100)\n    colors_used_set.add(101)\n    colors_used_set.add(102)\n    colors_used_set.add(103)\n    colors_used_set.add(104)\n    colors_used_set.add(105)\n    colors_used_set.add(106)\n    colors_used_set.add(107)\n    colors_used_set.add(108)\n    colors_used_set.add(109)\n    colors_used_set.add(110)\n    colors_used_set.add(111)\n    colors_used_set.add(112)\n    colors_used_set.add(113)\n    colors_used_set.add(114)\n    colors_used_set.add(115)\n    colors_used_set.add("
    },
    {
        "number": 1188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 1:\n        return \"1\"\n    if a[0] == 2:\n        return \"2\"\n    if a[0] == 3:\n        return \"3\"\n    if a[0] == 4:\n        return \"4\"\n    if a[0] == 5:\n        return \"5\"\n    if a[0] == 6:\n        return \"6\"\n    if a[0] == 7:\n        return \"7\"\n    if a[0] == 8:\n        return \"8\"\n    if a[0] == 9:\n        return \"9\"\n    if a[0] == 10:\n        return \"10\"\n    if a[0] == 11:\n        return \"11\"\n    if a[0] == 12:\n        return \"12\"\n    if a[0] == 13:\n        return \"13\"\n    if a[0] == 14:\n        return \"14\"\n    if a[0] == 15:\n        return \"15\"\n    if a[0] == 16:\n        return \"16\"\n    if a[0] == 17:\n        return \"17\"\n    if a[0] == 18:\n        return \"18\"\n    if a[0] == 19:\n        return \"19\"\n    if a[0] == 20:\n        return \"20\"\n    if a[0] == 21:\n        return \"21\"\n    if a[0] == 22:\n        return \"22\"\n    if a[0] == 23:\n        return \"23\"\n    if a[0] == 24:\n        return \"24\"\n    if a[0] == 25:\n        return \"25\"\n    if a[0] == 26:\n        return \"26\"\n    if a[0] == 27:\n        return \"27\"\n    if a[0] == 28:\n        return \"28\"\n    if a[0] == 29:\n        return \"29\"\n    if a[0] == 30:\n        return \"30\"\n    if a[0] == 31:\n        return \"31\"\n    if a[0] == 32:\n        return \"32\"\n    if a[0] == 33:\n        return \"33\"\n    if a[0] == 34:\n        return \"34\"\n    if a[0] == 35:\n        return \"35\"\n    if a[0] == 36:\n        return \"36\"\n    if a[0] == 37:\n        return \"37\"\n    if a[0] == 38:\n        return \"38\"\n    if a[0] == 39:\n        return \"39\"\n    if a[0] == 40:\n        return \"40\"\n    if a[0] == 41:\n        return \"41\"\n    if a[0] == 42:\n        return \"42\"\n    if a[0] == 43:\n        return \"43\"\n    if a[0] == 44:\n        return \"44\"\n    if a[0] == 45:\n        return \"45\"\n    if a[0] == 46:\n        return \"46\"\n    if a[0] == 47:\n        return \"47\"\n    if a[0] == 48:\n        return \"48\"\n    if a[0] == 49:\n        return \"49\"\n    if a[0] == 50:\n        return \"50\"\n    if a[0] == 51:\n        return \"51\"\n    if a[0] == 52:\n        return \"52\"\n    if a[0] == 53:\n        return \"53\"\n    if a[0] == 54:\n        return \"54\"\n    if a[0] == 55:\n        return \"55\"\n    if a[0] == 56:\n        return \"56\"\n    if a[0] == 57:\n        return \"57\"\n    if a[0] == 58:\n        return \"58\"\n    if a[0] == 59:\n        return \"59\"\n    if a[0] == 60:\n        return \"60\"\n    if a[0] == 61:\n        return \"61\"\n    if a[0] == 62:\n        return \"62\"\n    if a[0] == 63:\n        return \"63\"\n    if a[0] == 64:\n        return \"64\"\n    if a[0] == 65:\n        return \"65\"\n    if a[0] == 66:\n        return \"66\"\n    if a[0] == 67:\n        return \"67\"\n    if a[0] == 68:\n        return \"68\"\n    if a[0] == 69:\n        return \"69\"\n    if a[0] == 70:\n        return \"70\"\n    if a[0] == 71:\n        return \"71\"\n    if a[0] == 72:\n        return \"72\"\n    if a[0] == 73:\n        return \"73\"\n    if a[0] == 74:\n        return \"74\"\n    if a[0] == 75:\n        return \"75\"\n    if a[0] == 76:\n        return \"76\"\n    if a[0] == 77:\n        return \"77\"\n    if a[0] == 78:\n        return \"78\"\n    if a[0] == 79:\n        return \"79\"\n    if a[0] == 80:\n        return \"80\"\n    if a[0] == 81:\n        return \"81\"\n    if a[0] == 82:\n        return \"82\"\n    if a[0] == 83:\n        return \"83\"\n    if a[0] == 84:\n        return \"84\"\n    if a[0] == 85:\n        return \"85\"\n    if a[0] == 86:\n        return \"86\"\n    if a[0] == 87:\n        return \"87\"\n    if a[0] == 88:\n        return \"88\"\n    if a[0] == 89:\n        return \"89\"\n    if a[0] == 90:\n        return \"90\"\n    if a[0] == 91:\n        return \"91\"\n    if a[0] == 92:\n        return \"92\"\n    if a[0] == 93:\n        return \"93\"\n    if a[0] == 94:\n        return \"94\"\n    if a[0"
    },
    {
        "number": 1189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    return str(n * (n - 1) // 2 + n)"
    },
    {
        "number": 1190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w1, h1, w2, h2 = map(int, stdin.split())\n    return str(w1 * h1 + w2 * h2)"
    },
    {
        "number": 1191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    coins = list(map(int, stdin.split()))\n    powers.sort()\n    coins.sort()\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:"
    },
    {
        "number": 1192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    g1 = G1(n, k, p)\n    g2 = G2(n, k, p)\n    g3 = G3(n, k, p)\n    return str(g1) +'' + str(g2) +'' + str(g3)\n\ndef"
    },
    {
        "number": 1193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    return str(a[0])"
    },
    {
        "number": 1194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    p.sort()\n    q.sort()\n    res = []\n    for i in range(n):\n        res.append(str(p[i] + q[i]))\n    return''.join(res)\n"
    },
    {
        "number": 1195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(i) for i in stdin.split()))\n\ndef"
    },
    {
        "number": 1196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = stdin.split()[1]\n    s = stdin.split()[2]\n    return str(len(t.split('\\langle')[1::2]))"
    },
    {
        "number": 1197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    if n == 4:\n        return 0\n    if n == 5:\n        return 0\n    if n == 6:\n        return 0\n    if n == 7:\n        return 0\n    if n == 8:\n        return 0\n    if n == 9:\n        return 0\n    if n == 10:\n        return 0\n    if n == 11:\n        return 0\n    if n == 12:\n        return 0\n    if n == 13:\n        return 0\n    if n == 14:\n        return 0\n    if n == 15:\n        return 0\n    if n == 16:\n        return 0\n    if n == 17:\n        return 0\n    if n == 18:\n        return 0\n    if n == 19:\n        return 0\n    if n == 20:\n        return 0\n    if n == 21:\n        return 0\n    if n == 22:\n        return 0\n    if n == 23:\n        return 0\n    if n == 24:\n        return 0\n    if n == 25:\n        return 0\n    if n == 26:\n        return 0\n    if n == 27:\n        return 0\n    if n == 28:\n        return 0\n    if n == 29:\n        return 0\n    if n == 30:\n        return 0\n    if n == 31:\n        return 0\n    if n == 32:\n        return 0\n    if n == 33:\n        return 0\n    if n == 34:\n        return 0\n    if n == 35:\n        return 0\n    if n == 36:\n        return 0\n    if n == 37:\n        return 0\n    if n == 38:\n        return 0\n    if n == 39:\n        return 0\n    if n == 40:\n        return 0\n    if n == 41:\n        return 0\n    if n == 42:\n        return 0\n    if n == 43:\n        return 0\n    if n == 44:\n        return 0\n    if n == 45:\n        return 0\n    if n == 46:\n        return 0\n    if n == 47:\n        return 0\n    if n == 48:\n        return 0\n    if n == 49:\n        return 0\n    if n == 50:\n        return 0\n    if n == 51:\n        return 0\n    if n == 52:\n        return 0\n    if n == 53:\n        return 0\n    if n == 54:\n        return 0\n    if n == 55:\n        return 0\n    if n == 56:\n        return 0\n    if n == 57:\n        return 0\n    if n == 58:\n        return 0\n    if n == 59:\n        return 0\n    if n == 60:\n        return 0\n    if n == 61:\n        return 0\n    if n == 62:\n        return 0\n    if n == 63:\n        return 0\n    if n == 64:\n        return 0\n    if n == 65:\n        return 0\n    if n == 66:\n        return 0\n    if n == 67:\n        return 0\n    if n == 68:\n        return 0\n    if n == 69:\n        return 0\n    if n == 70:\n        return 0\n    if n == 71:\n        return 0\n    if n == 72:\n        return 0\n    if n == 73:\n        return 0\n    if n == 74:\n        return 0\n    if n == 75:\n        return 0\n    if n == 76:\n        return 0\n    if n == 77:\n        return 0\n    if n == 78:\n        return 0\n    if n == 79:\n        return 0\n    if n == 80:\n        return 0\n    if n == 81:\n        return 0\n    if n == 82:\n        return 0\n    if n == 83:\n        return 0\n    if n == 84:\n        return 0\n    if n == 85:\n        return 0\n    if n == 86:\n        return 0\n    if n == 87:\n        return 0\n    if n == 88:\n        return 0\n    if n == 89:\n        return 0\n    if n == 90:\n        return 0\n    if n == 91:\n        return 0\n    if n == 92:\n        return 0\n    if n == 93:\n        return 0\n    if n == 94:\n        return 0\n    if n == 95:\n        return 0\n    if n == 96:\n        return 0\n    if n == 97:\n        return 0\n    if n == 98:\n        return 0\n    if n == 99:\n        return 0\n    if n == 100:\n        return 0\n    if n == 101:\n        return 0\n    if n == 102:\n        return 0\n    if n == 103:\n        return 0\n    if n == 104:\n        return 0\n    if n == 105:\n        return 0\n    if n == 106:\n        return 0\n    if n == 107:\n        return 0\n    if n == 108:\n        return 0\n    if n == 109:\n        return 0\n    if n == 110:\n        return 0\n    if n == 111:\n        return 0\n    if n == 112:\n        return 0\n    if n == 113:\n        return 0\n    if n == 114:\n        return 0\n    if n == 115:\n        return 0\n    if n == 116:\n        return 0\n    if n == 117:\n        return 0\n    if n == 118:\n        return 0\n    if n == 119:\n        return 0\n    if n == 120:\n        return 0\n    if n == 121:\n        return 0\n    if n == 122:\n        return 0\n    if n == 123:\n        return 0\n    if n == 124:\n        return 0\n    if n == 125:\n        return 0\n    if n == 126:\n        return 0\n    if n == 127:\n        return 0\n    if n == 128:\n        return 0\n    if n == 129:\n        return 0\n    if n == 130:\n        return 0\n    if n == 131:\n        return 0\n    if n == 132:\n        return 0\n    if n == 133:\n        return 0\n    if n == 134:\n        return 0\n    if n == 135:\n        return 0\n    if n == 136:\n        return 0\n    if n == 137:\n        return 0\n    if n == 138:\n        return 0\n    if n == 139:\n        return 0\n    if n == 140:\n        return 0\n    if n"
    },
    {
        "number": 1198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    b = []\n    for i in range(1, c + 1):\n        b.append(sum(a[:i]))\n    return str(min(b))"
    },
    {
        "number": 1199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.reverse()\n    res = 0\n    for i in range(n):\n        if c[i] == 1:\n            res += 1\n            c[i] = 2\n        else:\n            c[i] = 1\n    return str(res) + '\\n' +''.join(map(str, c))\n"
    },
    {
        "number": 1200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n    points.sort()\n    d = 0\n    for i in range(n):\n        d += abs(points[i] - points[i - 1])\n    return str(d)"
    },
    {
        "number": 1201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    items = []\n    for i in range(n):\n        t, d, p = map(int, stdin.split())\n        items.append((t, d, p))\n    items.sort(key=lambda x: (x[0], x[1]))\n    max_value = 0\n    for i in range(n):\n        if items[i][0] > items[i][1]:\n            max_value += items[i][2]\n    return str(max_value)\n"
    },
    {
        "number": 1202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(list(map(int, stdin.split())))\n    b = sorted(list(map(int, stdin.split())), reverse=True)\n    res = []\n    for i in range(n):\n        if a[i] < b[i]:\n            res.append('1')\n        else:\n            res.append('0')\n    return ''.join(res)\n"
    },
    {
        "number": 1203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, L = map(int, stdin.split())\n    return str(H - L)\n"
    },
    {
        "number": 1204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if n == 2:\n        return str(k - 1)\n    if n == 3:\n        return str(k - 2)\n    if n == 4:\n        return str(k - 3)\n    if n == 5:\n        return str(k - 4)\n    if n == 6:\n        return str(k - 5)\n    if n == 7:\n        return str(k - 6)\n    if n == 8:\n        return str(k - 7)\n    if n == 9:\n        return str(k - 8)\n    if n == 10:\n        return str(k - 9)\n    if n == 11:\n        return str(k - 10)\n    if n == 12:\n        return str(k - 11)\n    if n == 13:\n        return str(k - 12)\n    if n == 14:\n        return str(k - 13)\n    if n == 15:\n        return str(k - 14)\n    return str(-1)"
    },
    {
        "number": 1205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    good_lines = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (points[i][0] + points[j][0]) * (points[i][1] - points[j][1]) == 0:\n                good_lines += 1\n    if good_lines == 0:\n        return -1\n    return str(good_lines)"
    },
    {
        "number": 1206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    l.reverse()\n    print(l)\n    print(l[0] * l[1])\n    return str(l[0] * l[1])"
    },
    {
        "number": 1207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m < (n * (n - 1) / 2):\n        return -1\n    else:\n        return str(n - 1)"
    },
    {
        "number": 1208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(set(stdin.split('\\n'))), len(set(stdin.split('\\n')))))"
    },
    {
        "number": 1209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(float, stdin.split()))\n    b = []\n    for i in range(n):\n        if a[i] > 0:\n            b.append(int(math.ceil(a[i])))\n        else:\n            b.append(int(math.floor(a[i])))\n    return''.join(map(str, b))"
    },
    {
        "number": 1210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    r = l[-1]\n    s = 1\n    for i in range(1, n):\n        s *= l[i]\n    s = s % p\n    if s == 0:\n        return \"0.0\"\n    return str(s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    b = []\n    for i in range(1, K + 1):\n        b.append(a.count(i))\n    return str(b.index(max(b)) + 1) + \" \" + str(max(b))"
    },
    {
        "number": 1212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    min_sum = float('inf')\n    for i in range(n - k + 1):\n        sum_h = 0\n        for j in range(i, i + k):\n            sum_h += h[j]\n        if sum_h < min_sum:\n            min_sum = sum_h\n    return str(min_sum)"
    },
    {
        "number": 1213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    l = len(s)\n    if l < k:\n        return \"LEFT\" * (k - l) + s\n    else:\n        return \"RIGHT\" * (k - l) + s"
    },
    {
        "number": 1214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n) + \" \" + str(n)"
    },
    {
        "number": 1215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    return solution(str(n - 1)) + solution(str(n - 2)) + solution(str(n - 3))"
    },
    {
        "number": 1216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiouy\"\n    result = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] in vowels:\n            if i == 0:\n                result += stdin[i]\n            elif stdin[i] == stdin[i - 1]:\n                continue\n            else:\n                result += stdin[i]\n        else:\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 1217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(len(b)):\n        c.append(0)\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] <= b[j]:\n                c[j] += 1\n    return''.join(map(str, c))\n"
    },
    {
        "number": 1218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == k:\n        return str(n)\n    if n == k + 1:\n        return str(n)\n    if n == k + 2:\n        return str(n)\n    if n == k + 3:\n        return str(n)\n    if n == k + 4:\n        return str(n)\n    if n == k + 5:\n        return str(n)\n    if n == k + 6:\n        return str(n)\n    if n == k + 7:\n        return str(n)\n    if n == k + 8:\n        return str(n)\n    if n == k + 9:\n        return str(n)\n    if n == k + 10:\n        return str(n)\n    if n == k + 11:\n        return str(n)\n    if n == k + 12:\n        return str(n)\n    if n == k + 13:\n        return str(n)\n    if n == k + 14:\n        return str(n)\n    if n == k + 15:\n        return str(n)\n    if n == k + 16:\n        return str(n)\n    if n == k + 17:\n        return str(n)\n    if n == k + 18:\n        return str(n)\n    if n == k + 19:\n        return str(n)\n    if n == k + 20:\n        return str(n)\n    if n == k + 21:\n        return str(n)\n    if n == k + 22:\n        return str(n)\n    if n == k + 23:\n        return str(n)\n    if n == k + 24:\n        return str(n)\n    if n == k + 25:\n        return str(n)\n    if n == k + 26:\n        return str(n)\n    if n == k + 27:\n        return str(n)\n    if n == k + 28:\n        return str(n)\n    if n == k + 29:\n        return str(n)\n    if n == k + 30:\n        return str(n)\n    if n == k + 31:\n        return str(n)\n    if n == k + 32:\n        return str(n)\n    if n == k + 33:\n        return str(n)\n    if n == k + 34:\n        return str(n)\n    if n == k + 35:\n        return str(n)\n    if n == k + 36:\n        return str(n)\n    if n == k + 37:\n        return str(n)\n    if n == k + 38:\n        return str(n)\n    if n == k + 39:\n        return str(n)\n    if n == k + 40:\n        return str(n)\n    if n == k + 41:\n        return str(n)\n    if n == k + 42:\n        return str(n)\n    if n == k + 43:\n        return str(n)\n    if n == k + 44:\n        return str(n)\n    if n == k + 45:\n        return str(n)\n    if n == k + 46:\n        return str(n)\n    if n == k + 47:\n        return str(n)\n    if n == k + 48:\n        return str(n)\n    if n == k + 49:\n        return str(n)\n    if n == k + 50:\n        return str(n)\n    if n == k + 51:\n        return str(n)\n    if n == k + 52:\n        return str(n)\n    if n == k + 53:\n        return str(n)\n    if n == k + 54:\n        return str(n)\n    if n == k + 55:\n        return str(n)\n    if n == k + 56:\n        return str(n)\n    if n == k + 57:\n        return str(n)\n    if n == k + 58:\n        return str(n)\n    if n == k + 59:\n        return str(n)\n    if n == k + 60:\n        return str(n)\n    if n == k + 61:\n        return str(n)\n    if n == k + 62:\n        return str(n)\n    if n == k + 63:\n        return str(n)\n    if n == k + 64:\n        return str(n)\n    if n == k + 65:\n        return str(n)\n    if n == k + 66:\n        return str(n)\n    if n == k + 67:\n        return str(n)\n    if n == k + 68:\n        return str(n)\n    if n == k + 69:\n        return str(n)\n    if n == k + 70:\n        return str(n)\n    if n == k + 71:\n        return str(n)\n    if n == k + 72:\n        return str(n)\n    if n == k + 73:\n        return str(n)\n    if n == k + 74:\n        return str(n)\n    if n == k + 75:\n        return str(n)\n    if n == k + 76:\n        return str(n)\n    if n == k + 77:\n        return str(n)\n    if n == k + 78:\n        return str(n)\n    if n == k + 79:\n        return str(n)\n    if n == k + 80:\n        return str(n)\n    if n == k + 81:\n        return str(n)\n    if n == k + 82:\n        return str(n)\n    if n == k + 83:\n        return str(n)\n    if n == k + 84:\n        return str(n)\n    if n == k + 85:\n        return str(n)\n    if n == k + 86:\n        return str(n)\n    if n == k + 87:\n        return str(n)\n    if n == k + 88:\n        return str(n)\n    if n == k + 89:\n        return str(n)\n    if n == k + 90:\n        return str(n)\n    if n == k + 91:\n        return str(n)\n    if n == k + 92:\n        return str(n)\n    if n == k + 93:\n        return str(n)\n    if n == k + 94:\n        return str(n)\n    if n == k + 95:\n        return str(n)\n    if n == k + 96:\n        return str(n)\n    if n == k + 97:\n"
    },
    {
        "number": 1219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n-1):\n        ans += a[i]\n        a[i] = -a[i]\n    return str(ans)"
    },
    {
        "number": 1220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    visited = set()\n    visited.add(0)\n    count = 0\n    for i in range(n):\n        if i not in visited:\n            count += 1\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        stack.append(neighbor)\n    return str(count)\n"
    },
    {
        "number": 1221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    return str(a[0] * b[0])"
    },
    {
        "number": 1222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    stdin.sort()\n    return str(stdin[-1])"
    },
    {
        "number": 1223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    res = 0\n    for i in range(n-1):\n        res += p[i+1] - p[i]\n    return str(res)"
    },
    {
        "number": 1224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if 3 ** i + 5 ** j == n:\n                return str(i) + \" \" + str(j)\n    return -1"
    },
    {
        "number": 1225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H = int(stdin)\n    if H == 1:\n        return \"0\"\n    if H == 2:\n        return \"1\"\n    if H == 3:\n        return \"2\"\n    if H == 4:\n        return \"3\"\n    if H == 5:\n        return \"4\"\n    if H == 6:\n        return \"5\"\n    if H == 7:\n        return \"6\"\n    if H == 8:\n        return \"7\"\n    if H == 9:\n        return \"8\"\n    if H == 10:\n        return \"9\"\n    if H == 11:\n        return \"10\"\n    if H == 12:\n        return \"11\"\n    if H == 13:\n        return \"12\"\n    if H == 14:\n        return \"13\"\n    if H == 15:\n        return \"14\"\n    if H == 16:\n        return \"15\"\n    if H == 17:\n        return \"16\"\n    if H == 18:\n        return \"17\"\n    if H == 19:\n        return \"18\"\n    if H == 20:\n        return \"19\"\n    if H == 21:\n        return \"20\"\n    if H == 22:\n        return \"21\"\n    if H == 23:\n        return \"22\"\n    if H == 24:\n        return \"23\"\n    if H == 25:\n        return \"24\"\n    if H == 26:\n        return \"25\"\n    if H == 27:\n        return \"26\"\n    if H == 28:\n        return \"27\"\n    if H == 29:\n        return \"28\"\n    if H == 30:\n        return \"29\"\n    if H == 31:\n        return \"30\"\n    if H == 32:\n        return \"31\"\n    if H == 33:\n        return \"32\"\n    if H == 34:\n        return \"33\"\n    if H == 35:\n        return \"34\"\n    if H == 36:\n        return \"35\"\n    if H == 37:\n        return \"36\"\n    if H == 38:\n        return \"37\"\n    if H == 39:\n        return \"38\"\n    if H == 40:\n        return \"39\"\n    if H == 41:\n        return \"40\"\n    if H == 42:\n        return \"41\"\n    if H == 43:\n        return \"42\"\n    if H == 44:\n        return \"43\"\n    if H == 45:\n        return \"44\"\n    if H == 46:\n        return \"45\"\n    if H == 47:\n        return \"46\"\n    if H == 48:\n        return \"47\"\n    if H == 49:\n        return \"48\"\n    if H == 50:\n        return \"49\"\n    if H == 51:\n        return \"50\"\n    if H == 52:\n        return \"51\"\n    if H == 53:\n        return \"52\"\n    if H == 54:\n        return \"53\"\n    if H == 55:\n        return \"54\"\n    if H == 56:\n        return \"55\"\n    if H == 57:\n        return \"56\"\n    if H == 58:\n        return \"57\"\n    if H == 59:\n        return \"58\"\n    if H == 60:\n        return \"59\"\n    if H == 61:\n        return \"60\"\n    if H == 62:\n        return \"61\"\n    if H == 63:\n        return \"62\"\n    if H == 64:\n        return \"63\"\n    if H == 65:\n        return \"64\"\n    if H == 66:\n        return \"65\"\n    if H == 67:\n        return \"66\"\n    if H == 68:\n        return \"67\"\n    if H == 69:\n        return \"68\"\n    if H == 70:\n        return \"69\"\n    if H == 71:\n        return \"70\"\n    if H == 72:\n        return \"71\"\n    if H == 73:\n        return \"72\"\n    if H == 74:\n        return \"73\"\n    if H == 75:\n        return \"74\"\n    if H == 76:\n        return \"75\"\n    if H == 77:\n        return \"76\"\n    if H == 78:\n        return \"77\"\n    if H == 79:\n        return \"78\"\n    if H == 80:\n        return \"79\"\n    if H == 81:\n        return \"80\"\n    if H == 82:\n        return \"81\"\n    if H == 83:\n        return \"82\"\n    if H == 84:\n        return \"83\"\n    if H == 85:\n        return \"84\"\n    if H == 86:\n        return \"85\"\n    if H == 87:\n        return \"86\"\n    if H == 88:\n        return \"87\"\n    if H == 89:\n        return \"88\"\n    if H == 90:\n        return \"89\"\n    if H == 91:\n        return \"90\"\n    if H == 92:\n        return \"91\"\n    if H == 93:\n        return \"92\"\n    if H == 94:\n        return \"93\"\n    if H == 95:\n        return \"94\"\n    if H == 96:\n        return \"95\"\n    if H == 97:\n        return \"96\"\n    if H == 98:\n        return \"97\"\n    if H == 99:\n        return \"98\"\n    if H == 100:\n        return \"99\"\n    if H == 101:\n        return \"100\"\n    if H == 102:\n        return \"101\"\n    if H == 103:\n        return \"102\"\n    if H == 104:\n        return \"103\"\n    if H == 105:\n        return \"104\"\n    if H == 106:\n        return \"105\"\n    if H == 107:\n        return \"106\"\n    if H == 108:\n        return \"107\"\n    if H == 109:\n        return \"108\"\n    if H == 110:\n        return \"109\"\n    if H == 111:\n        return \"110\"\n    if H == 112:\n        return \"111\"\n    if H == 113:\n        return \"112\"\n    if H == 114:\n        return \"113\"\n    if H == 115:\n        return \"114\"\n    if H == 116:\n        return \"115\"\n    if H == 117:\n        return \"116\"\n    if H == 118:\n        return \"117\"\n    if H == 119:\n        return \"118\"\n    if H == 120:\n        return \"119\"\n    if H == 121:\n        return \"120\"\n    if H == 122:\n        return \"121\"\n    if H == 123:\n        return \"122\"\n    if H == 124:\n        return \"123\"\n    if H == 125:\n        return \"124\"\n    if H == 126:\n        return \"125\"\n    if H == 127:\n        return \"126\"\n    if H == 128:\n        return \"127\"\n    if H == 129:\n        return \"128\"\n    if H == 130:\n        return \"129\"\n    if H == 131:\n        return \"130\"\n    if H == 132:\n        return \"131\"\n    if H == 133:\n        return \"132\"\n    if H == 134:\n        "
    },
    {
        "number": 1226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(sum(1 for i in range(n) if a <= i <= b) % (10**9 + 7))"
    },
    {
        "number": 1227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) == k:\n            count += 1\n    return count"
    },
    {
        "number": 1228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    x = int(stdin)\n    if x <= 30:\n        return \"0 A\"\n    if x <= 98:\n        return \"1 B\"\n    if x <= 99:\n        return \"2 C\"\n    if x <= 100:\n        return \"3 D\""
    },
    {
        "number": 1229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    strings = stdin.split()\n    strings = sorted(strings, key=lambda x: len(x))\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda"
    },
    {
        "number": 1230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return str(len(friends))\n    if n == 2:\n        if friends[0] == friends[1]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 3:\n        if friends[0] == friends[1] and friends[1] == friends[2]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 4:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 5:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 6:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4] and friends[4] == friends[5]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4] or friends[4] == friends[5]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 7:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4] and friends[4] == friends[5] and friends[5] == friends[6]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4] or friends[4] == friends[5] or friends[5] == friends[6]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 8:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4] and friends[4] == friends[5] and friends[5] == friends[6] and friends[6] == friends[7]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4] or friends[4] == friends[5] or friends[5] == friends[6] or friends[6] == friends[7]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 9:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4] and friends[4] == friends[5] and friends[5] == friends[6] and friends[6] == friends[7] and friends[7] == friends[8]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4] or friends[4] == friends[5] or friends[5] == friends[6] or friends[6] == friends[7] or friends[7] == friends[8]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 10:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4] and friends[4] == friends[5] and friends[5] == friends[6] and friends[6] == friends[7] and friends[7] == friends[8] and friends[8] == friends[9]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4] or friends[4] == friends[5] or friends[5] == friends[6] or friends[6] == friends[7] or friends[7] == friends[8] or friends[8] == friends[9]:\n            return str(len(friends))\n        else:\n            return str(-1)\n    if n == 11:\n        if friends[0] == friends[1] and friends[1] == friends[2] and friends[2] == friends[3] and friends[3] == friends[4] and friends[4] == friends[5] and friends[5] == friends[6] and friends[6] == friends[7] and friends[7] == friends[8] and friends[8] == friends[9] and friends[9] == friends[10]:\n            return str(len(friends))\n        elif friends[0] == friends[1] or friends[1] == friends[2] or friends[2] == friends[3] or friends[3] == friends[4] or friends[4] == friends["
    },
    {
        "number": 1231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return \"YES\"\n    elif a % 2 == 0 and b % 2!= 0:\n        return \"NO\"\n    elif a % 2!= 0 and b % 2 == 0:\n        return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_a, n_b = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    a.sort()\n    b.sort()\n    k, m = map(int, stdin.split()[3].split())\n    if k > n_a or m > n_b:\n        return \"NO\"\n    for i in range(k):\n        if a[i] > b[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count) + \" \" + str(count * (count + 1) // 2)"
    },
    {
        "number": 1234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    beauties = []\n    for i in range(k):\n        beauties.append(a[i] * m)\n    beauties.sort(reverse=True)\n    beauties = sum(beauties)\n    return str(beauties)\n"
    },
    {
        "number": 1235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3]))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] + b[i] not in a and a[i] + b[i] not in b:\n            return str(a[i]) + \" \" + str(b[i])\n    return \"None\""
    },
    {
        "number": 1236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2 == 0:\n        return \"Daenerys\"\n    else:\n        return \"Stannis\""
    },
    {
        "number": 1237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    passengers = []\n    for i in range(n):\n        passengers.append(tuple(map(int, stdin.split())))\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers.sort(key=lambda x: x[0])\n    passengers.sort(key=lambda x: x[1])\n    passengers."
    },
    {
        "number": 1238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(n - len(set(a)))\n"
    },
    {
        "number": 1239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    min_dist = abs(a[0] - a[1])\n    count = 1\n    for i in range(1, n - 1):\n        if abs(a[i] - a[i + 1]) < min_dist:\n            min_dist = abs(a[i] - a[i + 1])\n            count = 1\n        elif abs(a[i] - a[i + 1]) == min_dist:\n            count += 1\n    return str(min_dist) + \" \" + str(count)\n"
    },
    {
        "number": 1240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    r = l[::-1]\n    res = 0\n    for i in range(n):\n        if l[i]!= r[i]:\n            res = max(res, abs(l[i] - r[i]))\n            l[i], r[i] = l[i] + r[i], l[i] - r[i]\n    return str(res)"
    },
    {
        "number": 1241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_len = 0\n    max_arr = []\n    for i in range(n):\n        if a[i] == 0:\n            k -= 1\n        if k < 0:\n            break\n        if a[i] == 1:\n            k += 1\n        if k == 0:\n            max_len = max(max_len, i - max(max_arr))\n            max_arr.append(i)\n    return str(max_len) +'' +''.join(map(str, max_arr))\n"
    },
    {
        "number": 1242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    res = []\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            if s[j:j + i] == s[j:j + i][::-1]:\n                res.append(i)\n    return''.join(map(str, res))"
    },
    {
        "number": 1243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matches = list(map(int, stdin.split()))\n    matches.sort()\n    moves = 0\n    while matches!= matches[::-1]:\n        moves += 1\n        for i in range(len(matches) - 1):\n            if matches[i] + 1!= matches[i + 1]:\n                matches[i], matches[i + 1] = matches[i + 1], matches[i]\n    return moves"
    },
    {
        "number": 1244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            return \"NO\"\n    for i in range(n):\n        if a[i] == a[i - 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"()\"\n    if n == 2:\n        return \"()()\"\n    if n == 3:\n        return \"((()))\"\n    if n == 4:\n        return \"((()))()\"\n    if n == 5:\n        return \"(((())))\"\n    if n == 6:\n        return \"((((())))\"\n    if n == 7:\n        return \"((((((()))))))\"\n    if n == 8:\n        return \"((((((((())))))))\"\n    if n == 9:\n        return \"((((((((((())))))))))())\"\n    if n == 10:\n        return
    },
    {
        "number": 1246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heap = []\n    for _ in range(n):\n        command, *args = stdin.split()\n        if command == \"insert\":\n            heap.append(int(args[0]))\n        elif command == \"getMin\":\n            if heap:\n                print(heap[0])\n            else:\n                print(-1)\n        elif command == \"removeMin\":\n            if heap:\n                heap.pop(0)\n            else:\n                print(-1)\n    return \"\""
    },
    {
        "number": 1247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if is_palindrome(s):\n        return \"First\"\n    return \"Second\"\n\ndef"
    },
    {
        "number": 1248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d_1, d_2, d_3 = map(int, stdin.split())\n    return str(min(d_1 + d_2, d_1 + d_3, d_2 + d_3))"
    },
    {
        "number": 1249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k, n, s = map(int, stdin.split())\n    flower_types = list(map(int, stdin.split()))\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_types.sort()\n    flower_types = set(flower_types)\n    flower_types = list(flower_types)\n    flower_"
    },
    {
        "number": 1250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i] < a[i - 1] + 1:\n            return''.join(map(str, a))\n    return '-1'"
    },
    {
        "number": 1251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 5\n    if n == 9:\n        return 6\n    if n == 10:\n        return 6\n    if n == 11:\n        return 7\n    if n == 12:\n        return 7\n    if n == 13:\n        return 8\n    if n == 14:\n        return 8\n    if n == 15:\n        return 9\n    if n == 16:\n        return 9\n    if n == 17:\n        return 10\n    if n == 18:\n        return 10\n    if n == 19:\n        return 11\n    if n == 20:\n        return 11\n    if n == 21:\n        return 12\n    if n == 22:\n        return 12\n    if n == 23:\n        return 13\n    if n == 24:\n        return 13\n    if n == 25:\n        return 14\n    if n == 26:\n        return 14\n    if n == 27:\n        return 15\n    if n == 28:\n        return 15\n    if n == 29:\n        return 16\n    if n == 30:\n        return 16\n    if n == 31:\n        return 17\n    if n == 32:\n        return 17\n    if n == 33:\n        return 18\n    if n == 34:\n        return 18\n    if n == 35:\n        return 19\n    if n == 36:\n        return 19\n    if n == 37:\n        return 20\n    if n == 38:\n        return 20\n    if n == 39:\n        return 21\n    if n == 40:\n        return 21\n    if n == 41:\n        return 22\n    if n == 42:\n        return 22\n    if n == 43:\n        return 23\n    if n == 44:\n        return 23\n    if n == 45:\n        return 24\n    if n == 46:\n        return 24\n    if n == 47:\n        return 25\n    if n == 48:\n        return 25\n    if n == 49:\n        return 26\n    if n == 50:\n        return 26\n    if n == 51:\n        return 27\n    if n == 52:\n        return 27\n    if n == 53:\n        return 28\n    if n == 54:\n        return 28\n    if n == 55:\n        return 29\n    if n == 56:\n        return 29\n    if n == 57:\n        return 30\n    if n == 58:\n        return 30\n    if n == 59:\n        return 31\n    if n == 60:\n        return 31\n    if n == 61:\n        return 32\n    if n == 62:\n        return 32\n    if n == 63:\n        return 33\n    if n == 64:\n        return 33\n    if n == 65:\n        return 34\n    if n == 66:\n        return 34\n    if n == 67:\n        return 35\n    if n == 68:\n        return 35\n    if n == 69:\n        return 36\n    if n == 70:\n        return 36\n    if n == 71:\n        return 37\n    if n == 72:\n        return 37\n    if n == 73:\n        return 38\n    if n == 74:\n        return 38\n    if n == 75:\n        return 39\n    if n == 76:\n        return 39\n    if n == 77:\n        return 40\n    if n == 78:\n        return 40\n    if n == 79:\n        return 41\n    if n == 80:\n        return 41\n    if n == 81:\n        return 42\n    if n == 82:\n        return 42\n    if n == 83:\n        return 43\n    if n == 84:\n        return 43\n    if n == 85:\n        return 44\n    if n == 86:\n        return 44\n    if n == 87:\n        return 45\n    if n == 88:\n        return 45\n    if n == 89:\n        return 46\n    if n == 90:\n        return 46\n    if n == 91:\n        return 47\n    if n == 92:\n        return 47\n    if n == 93:\n        return 48\n    if n == 94:\n        return 48\n    if n == 95:\n        return 49\n    if n == 96:\n        return 49\n    if n == 97:\n        return 50\n    if n == 98:\n        return 50\n    if n == 99:\n        return 51\n    if n == 100:\n        return 51\n    if n == 101:\n        return 52\n    if n == 102:\n        return 52\n    if n == 103:\n        return 53\n    if n == 104:\n        return 53\n    if n == 105:\n        return 54\n    if n == 106:\n        return 54\n    if n == 107:\n        return 55\n    if n == 108:\n        return 55\n    if n == 109:\n        return 56\n    if n == 110:\n        return 56\n    if n == 111:\n        return 57\n    if n == 112:\n        return 57\n    if n == 113:\n        return 58\n    if n == 114:\n        return 58\n    if n == 115:\n        return 59\n    if n == 116:\n        return 59\n    if n == 117:\n        return 60\n    if n == 118:\n        return 60\n    if n == 119:\n        return 61\n    if n == 120:\n        return 61\n    if n == 121:\n        return 62\n    if n == 122:\n        return 62\n    if n == 123:\n        return 63\n    if n == 124:\n        return 63\n    if n == 125:\n        return 64\n    if n == 126:\n        return 64\n    if n == 127:\n        return 65\n    if n == 128:\n        return 65\n    if n == 129:\n        return 66\n    if n == 130:\n        return 66\n    if n == 131:\n        return 67\n    if n == 132:\n        return 67\n    if n == 133:\n        return 68\n    if n == 134:\n        return 68\n    if n == 135:\n        return 69\n    if n == 136:\n        return 69\n    if n == 137:\n        return 70\n    if n == 138:\n        return 70\n    if n == 139:\n        return 71\n    if n == 140:\n        return 71\n    if n == 141:\n        return 72\n    if n == 142:\n        return 72\n    if n == 143:"
    },
    {
        "number": 1252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = map(int, stdin.split())\n    roads = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, t = map(int, stdin.split())\n        roads[u].append((v, t))\n        roads[v].append((u, t))\n    visited = set()\n    visited.add(1)\n    q = deque([(1, 0)])\n    while q:\n        node, time = q.popleft()\n        if node == n:\n            return time\n        for nxt, t in roads[node]:\n            if nxt not in visited:\n                visited.add(nxt)\n                q.append((nxt, time + t))\n    return -1\n"
    },
    {
        "number": 1253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(max(sum(a) - sum(a[:k]), sum(a)))"
    },
    {
        "number": 1254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    candidates = []\n    for _ in range(n):\n        candidates.append(list(map(int, stdin.split())))\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[3])\n    candidates.sort(key=lambda x: x[4])\n    candidates.sort(key=lambda x: x[5])\n    candidates.sort(key=lambda x: x[6])\n    candidates.sort(key=lambda x: x[7])\n    candidates.sort(key=lambda x: x[8])\n    candidates.sort(key=lambda x: x[9])\n    candidates.sort(key=lambda x: x[10])\n    candidates.sort(key=lambda x: x[11])\n    candidates.sort(key=lambda x: x[12])\n    candidates.sort(key=lambda x: x[13])\n    candidates.sort(key=lambda x: x[14])\n    candidates.sort(key=lambda x: x[15])\n    candidates.sort(key=lambda x: x[16])\n    candidates.sort(key=lambda x: x[17])\n    candidates.sort(key=lambda x: x[18])\n    candidates.sort(key=lambda x: x[19])\n    candidates.sort(key=lambda x: x[20])\n    candidates.sort(key=lambda x: x[21])\n    candidates.sort(key=lambda x: x[22])\n    candidates.sort(key=lambda x: x[23])\n    candidates.sort(key=lambda x: x[24])\n    candidates.sort(key=lambda x: x[25])\n    candidates.sort(key=lambda x: x[26])\n    candidates.sort(key=lambda x: x[27])\n    candidates.sort(key=lambda x: x[28])\n    candidates.sort(key=lambda x: x[29])\n    candidates.sort(key=lambda x: x[30])\n    candidates.sort(key=lambda x: x[31])\n    candidates.sort(key=lambda x: x[32])\n    candidates.sort(key=lambda x: x[33])\n    candidates.sort(key=lambda x: x[34])\n    candidates.sort(key=lambda x: x[35])\n    candidates.sort(key=lambda x: x[36])\n    candidates.sort(key=lambda x: x[37])\n    candidates.sort(key=lambda x: x[38])\n    candidates.sort(key=lambda x: x[39])\n    candidates.sort(key=lambda x: x[40])\n    candidates.sort(key=lambda x: x[41])\n    candidates.sort(key=lambda x: x[42])\n    candidates.sort(key=lambda x: x[43])\n    candidates.sort(key=lambda x: x[44])\n    candidates.sort(key=lambda x: x[45])\n    candidates.sort(key=lambda x: x[46])\n    candidates.sort(key=lambda x: x[47])\n    candidates.sort(key=lambda x: x[48])\n    candidates.sort(key=lambda x: x[49])\n    candidates.sort(key=lambda x: x[50])\n    candidates.sort(key=lambda x: x[51])\n    candidates.sort(key=lambda x: x[52])\n    candidates.sort(key=lambda x: x[53])\n    candidates.sort(key=lambda x: x[54])\n    candidates.sort(key=lambda x: x[55])\n    candidates.sort(key=lambda x: x[56])\n    candidates.sort(key=lambda x: x[57])\n    candidates.sort(key=lambda x: x[58])\n    candidates.sort(key=lambda x: x[59])\n    candidates.sort(key=lambda x: x[60])\n    candidates.sort(key=lambda x: x[61])\n    candidates.sort(key=lambda x: x[62])\n    candidates.sort(key=lambda x: x[63])\n    candidates.sort(key=lambda x: x[64])\n    candidates.sort(key=lambda x: x[65])\n    candidates.sort(key=lambda x: x[66])\n    candidates.sort(key=lambda x: x[67])\n    candidates.sort(key=lambda x: x[68])\n    candidates.sort(key=lambda x: x[69])\n    candidates.sort(key=lambda x: x[70])\n    candidates.sort(key=lambda x: x[71])\n    candidates.sort(key=lambda x: x[72])\n    candidates.sort(key=lambda x: x[73])\n    candidates.sort(key=lambda x: x[74])\n    candidates.sort(key=lambda x: x[75])\n    candidates.sort(key=lambda x: x[76])\n    candidates.sort(key=lambda x: x[77])\n    candidates.sort(key=lambda x: x[78])\n    candidates.sort(key=lambda x: x[79])\n    candidates.sort(key=lambda x: x[80])\n    candidates.sort(key=lambda x: x[81])\n    candidates.sort(key=lambda x: x[82])\n    candidates.sort(key=lambda x: x[83])\n    candidates.sort(key=lambda x: x[84])\n    candidates.sort(key=lambda x: x[85])\n    candidates.sort(key=lambda"
    },
    {
        "number": 1255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = []\n    m = []\n    for i in range(n):\n        h.append(int(stdin.split()[i*2]))\n        m.append(int(stdin.split()[i*2+1]))\n    h.sort()\n    m.sort()\n    h.append(h[-1]+1)\n    m.append(m[-1]+1)\n    c = 1\n    for i in range(1,n):\n        if h[i] - h[i-1] <= 1:\n            c += 1\n        else:\n            c = 1\n    return str(c)"
    },
    {
        "number": 1256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * j\n    table = [[str(i) for i in row] for row in table]\n    table = '\\n'.join(['\\t'.join(row) for row in table])\n    print(table)\n    return table\n"
    },
    {
        "number": 1258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = []\n    for i in range(n-2):\n        q.append(tuple(map(int, stdin.split())))\n    q = sorted(q, key=lambda x: (x[0], x[1], x[2]))\n    p = []\n    for i in range(n-2):\n        p.append(q[i][0])\n        p.append(q[i][1])\n        p.append(q[i][2])\n    return''.join(map(str, p))"
    },
    {
        "number": 1259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    return \"1\" if solution_1(graph) else \"2\"\n\n\ndef"
    },
    {
        "number": 1260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_a = max(a)\n    max_a_index = a.index(max_a)\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1] > max_a:\n            max_a = a[i] * a[i + 1]\n            max_a_index = i\n    a[max_a_index] = -10\n    for i in range(n - 1):\n        if a[i] * a[i + 1"
    },
    {
        "number": 1261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(1)\n    if n == 6:\n        return str(1)\n    if n == 7:\n        return str(1)\n    if n == 8:\n        return str(1)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(1)\n    if n == 11:\n        return str(1)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(1)\n    if n == 14:\n        return str(1)\n    if n == 15:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(1)\n    if n == 19:\n        return str(1)\n    if n == 20:\n        return str(1)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(1)\n    if n == 24:\n        return str(1)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(1)\n    if n == 30:\n        return str(1)\n    if n == 31:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(1)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(1)\n    if n == 37:\n        return str(1)\n    if n == 38:\n        return str(1)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(1)\n    if n == 41:\n        return str(1)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(1)\n    if n == 45:\n        return str(1)\n    if n == 46:\n        return str(1)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(1)\n    if n == 51:\n        return str(1)\n    if n == 52:\n        return str(1)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(1)\n    if n == 55:\n        return str(1)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(1)\n    if n == 59:\n        return str(1)\n    if n == 60:\n        return str(1)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(1)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(1)\n    if n == 69:\n        return str(1)\n    if n == 70:\n        return str(1)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(1)\n    if n == 78:\n        return str(1)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(1)\n    if n == 81:\n        return str(1)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(1)\n    if n == 89:\n        return str(1)\n    if n == 90:\n        return str(1)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str(1)\n    if n == 99:\n        return str(1)\n    if n == 100:\n        return str(1)\n    if n == 101:\n        return str(1)\n    if n == 102:\n        return str(1)\n    if n == 103:\n        return str(1)\n    if n == 104:\n        return str(1)\n    if n == 105:\n        return str(1)\n    if n == 106:\n        return str(1)\n    if n == 107:\n        return str(1)\n    if n == 108:\n        return str(1)\n    if n == 109:\n        return str(1)\n    if n == 110:\n        return str(1)\n    if n == 111:\n        return str(1)\n    if n == 112:\n        return str(1)\n    if n == 113:\n        return str(1)\n    if n == 114:\n        return str(1)\n    if n == 115:\n        return str(1)\n    if n == 116:\n        "
    },
    {
        "number": 1262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cities = []\n    connections = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        cities.append((x, y))\n    for i in range(n):\n        for j in range(i + 1, n):\n            connections.append((i, j))\n    connections.sort()\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x[0])\n    connections.sort(key=lambda x: x[0] - x[1])\n    connections.sort(key=lambda x: x[1] - x"
    },
    {
        "number": 1263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    if a[0] / a[1] == k:\n        return str(a[0] + b[0])\n    else:\n        return str(-1)\n\nsolution(input())"
    },
    {
        "number": 1264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_ones = 0\n    for i in range(n):\n        for j in range(i, n):\n            ones = 0\n            for k in range(i, j + 1):\n                if a[k] == 1:\n                    ones += 1\n            if ones > max_ones:\n                max_ones = ones\n    return str(max_ones)\n\nsolution(input())\n"
    },
    {
        "number": 1265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = a[0]\n    b = stdin.split()\n    b = b[1]\n    if a == b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x_0, y_0 = int(stdin.split()[1]), int(stdin.split()[2])\n    black_pieces = []\n    for i in range(n):\n        piece, x, y = stdin.split()[i+3].split(' ')\n        black_pieces.append((piece, int(x), int(y)))\n    white_king = (x_0, y_0)\n    black_king = (x_0, y_0)\n    for piece, x, y in black_pieces:\n        if piece == 'B':\n            black_king = (x, y)\n        elif piece == 'R':\n            black_king = (x, y)\n        elif piece == 'Q':\n            black_king = (x, y)\n    if black_king == white_king:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 1267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = list(map(int, stdin.split()))\n    scores.sort()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i + 1] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if scores[i] == scores[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n    return str(dp[0][n])\n"
    },
    {
        "number": 1268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] == 0 and a[1] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 and a[16] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 and a[16] == 0 and a[17] == 0:\n            return"
    },
    {
        "number": 1269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    if c[0]!= 0:\n        return -1\n    if c[-1]!= n:\n        return -1\n    if c[1] - c[0]!= m:\n        return -1\n    if c[-2] - c[-1]!= m:\n        return -1\n    if c[2] - c[1]!= m:\n        return -1\n    if c[3] - c[2]!= m:\n        return -1\n    if c[4] - c[3]!= m:\n        return -1\n    if c[5] - c[4]!= m:\n        return -1\n    if c[6] - c[5]!= m:\n        return -1\n    if c[7] - c[6]!= m:\n        return -1\n    if c[8] - c[7]!= m:\n        return -1\n    if c[9] - c[8]!= m:\n        return -1\n    if c[10] - c[9]!= m:\n        return -1\n    if c[11] - c[10]!= m:\n        return -1\n    if c[12] - c[11]!= m:\n        return -1\n    if c[13] - c[12]!= m:\n        return -1\n    if c[14] - c[13]!= m:\n        return -1\n    if c[15] - c[14]!= m:\n        return -1\n    if c[16] - c[15]!= m:\n        return -1\n    if c[17] - c[16]!= m:\n        return -1\n    if c[18] - c[17]!= m:\n        return -1\n    if c[19] - c[18]!= m:\n        return -1\n    if c[20] - c[19]!= m:\n        return -1\n    if c[21] - c[20]!= m:\n        return -1\n    if c[22] - c[21]!= m:\n        return -1\n    if c[23] - c[22]!= m:\n        return -1\n    if c[24] - c[23]!= m:\n        return -1\n    if c[25] - c[24]!= m:\n        return -1\n    if c[26] - c[25]!= m:\n        return -1\n    if c[27] - c[26]!= m:\n        return -1\n    if c[28] - c[27]!= m:\n        return -1\n    if c[29] - c[28]!= m:\n        return -1\n    if c[30] - c[29]!= m:\n        return -1\n    if c[31] - c[30]!= m:\n        return -1\n    if c[32] - c[31]!= m:\n        return -1\n    if c[33] - c[32]!= m:\n        return -1\n    if c[34] - c[33]!= m:\n        return -1\n    if c[35] - c[34]!= m:\n        return -1\n    if c[36] - c[35]!= m:\n        return -1\n    if c[37] - c[36]!= m:\n        return -1\n    if c[38] - c[37]!= m:\n        return -1\n    if c[39] - c[38]!= m:\n        return -1\n    if c[40] - c[39]!= m:\n        return -1\n    if c[41] - c[40]!= m:\n        return -1\n    if c[42] - c[41]!= m:\n        return -1\n    if c[43] - c[42]!= m:\n        return -1\n    if c[44] - c[43]!= m:\n        return -1\n    if c[45] - c[44]!= m:\n        return -1\n    if c[46] - c[45]!= m:\n        return -1\n    if c[47] - c[46]!= m:\n        return -1\n    if c[48] - c[47]!= m:\n        return -1\n    if c[49] - c[48]!= m:\n        return -1\n    if c[50] - c[49]!= m:\n        return -1\n    if c[51] - c[50]!= m:\n        return -1\n    if c[52] - c[51]!= m:\n        return -1\n    if c[53] - c[52]!= m:\n        return -1\n    if c[54] - c[53]!= m:\n        return -1\n    if c[55] - c[54]!= m:\n        return -1\n    if c[56] - c[55]!= m:\n        return -1\n    if c[57] - c[56]!= m:\n        return -1\n    if c[58] - c[57]!= m:\n        return -1\n    if c[59] - c[58]!= m:\n        return -1\n    if c[60] - c[59]!= m:\n        return -1\n    if c[61] - c[60]!= m:\n        return -1\n    if c[62] - c[61]!= m:\n        return -1\n    if c[63] - c[62]!= m:\n        return -1\n    if c[64] - c"
    },
    {
        "number": 1270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    if len(primes) == 0:\n        return \"0\"\n    else:\n        return str(primes[-1]) + \" \" + str(primes[-2]) + \" \" + str(primes[-3])\n\ndef"
    },
    {
        "number": 1271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split())\n    r = list(map(int, stdin.split()))\n    c = list(stdin.split())\n    c = list(map(lambda x: x.lower(), c))\n    c = list(map(lambda x: x.replace('r', '1').replace('g', '2').replace('b', '3'), c))\n    c = list(map(lambda x: int(x), c))\n    c = sorted(c)\n    c = sorted(c, key=lambda x: x[0])\n    c = sorted(c, key=lambda x: x[1])\n    c = sorted(c, key=lambda x: x[2])\n    c = sorted(c, key=lambda x: x[3])\n    c = sorted(c, key=lambda x: x[4])\n    c = sorted(c, key=lambda x: x[5])\n    c = sorted(c, key=lambda x: x[6])\n    c = sorted(c, key=lambda x: x[7])\n    c = sorted(c, key=lambda x: x[8])\n    c = sorted(c, key=lambda x: x[9])\n    c = sorted(c, key=lambda x: x[10])\n    c = sorted(c, key=lambda x: x[11])\n    c = sorted(c, key=lambda x: x[12])\n    c = sorted(c, key=lambda x: x[13])\n    c = sorted(c, key=lambda x: x[14])\n    c = sorted(c, key=lambda x: x[15])\n    c = sorted(c, key=lambda x: x[16])\n    c = sorted(c, key=lambda x: x[17])\n    c = sorted(c, key=lambda x: x[18])\n    c = sorted(c, key=lambda x: x[19])\n    c = sorted(c, key=lambda x: x[20])\n    c = sorted(c, key=lambda x: x[21])\n    c = sorted(c, key=lambda x: x[22])\n    c = sorted(c, key=lambda x: x[23])\n    c = sorted(c, key=lambda x: x[24])\n    c = sorted(c, key=lambda x: x[25])\n    c = sorted(c, key=lambda x: x[26])\n    c = sorted(c, key=lambda x: x[27])\n    c = sorted(c, key=lambda x: x[28])\n    c = sorted(c, key=lambda x: x[29])\n    c = sorted(c, key=lambda x: x[30])\n    c = sorted(c, key=lambda x: x[31])\n    c = sorted(c, key=lambda x: x[32])\n    c = sorted(c, key=lambda x: x[33])\n    c = sorted(c, key=lambda x: x[34])\n    c = sorted(c, key=lambda x: x[35])\n    c = sorted(c, key=lambda x: x[36])\n    c = sorted(c, key=lambda x: x[37])\n    c = sorted(c, key=lambda x: x[38])\n    c = sorted(c, key=lambda x: x[39])\n    c = sorted(c, key=lambda x: x[40])\n    c = sorted(c, key=lambda x: x[41])\n    c = sorted(c, key=lambda x: x[42])\n    c = sorted(c, key=lambda x: x[43])\n    c = sorted(c, key=lambda x: x[44])\n    c = sorted(c, key=lambda x: x[45])\n    c = sorted(c, key=lambda x: x[46])\n    c = sorted(c, key=lambda x: x[47])\n    c = sorted(c, key=lambda x: x[48])\n    c = sorted(c, key=lambda x: x[49])\n    c = sorted(c, key=lambda x: x[50])\n    c = sorted(c, key=lambda x: x[51])\n    c = sorted(c, key=lambda x: x[52])\n    c = sorted(c, key=lambda x: x[53])\n    c = sorted(c, key=lambda x: x[54])\n    c = sorted(c, key=lambda x: x[55])\n    c = sorted(c, key=lambda x: x[56])\n    c = sorted(c, key=lambda x: x[57])\n    c = sorted(c, key=lambda x: x[58])\n    c = sorted(c, key=lambda x: x[59])\n    c = sorted(c, key=lambda x: x[60])\n    c = sorted(c, key=lambda x: x[61])\n    c = sorted(c, key=lambda x: x[62])\n    c = sorted(c, key=lambda x: x[63])\n    c = sorted(c, key=lambda x: x[64])\n    c = sorted(c, key=lambda x: x[65])\n    c = sorted(c, key=lambda x: x[66])\n    c = sorted(c, key=lambda x: x[67])\n    c = sorted(c, key=lambda x: x"
    },
    {
        "number": 1272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    bridge_pairs = []\n    for i in range(M):\n        bridge_pairs.append(list(map(int, stdin.split())))\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0])\n    bridge_pairs.sort(key=lambda x: x[1])\n    bridge_pairs.sort(key=lambda x: x[0"
    },
    {
        "number": 1273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    edges = stdin.split()[1:]\n    colors = set()\n    for i in range(N):\n        colors.add(int(edges[i * 2]))\n        colors.add(int(edges[i * 2 + 1]))\n    return str(len(colors)) + '\\n' +''.join(map(str, sorted(colors)))"
    },
    {
        "number": 1274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            if i == j:\n                dp[i][j] += A[i - 1]\n            if i == j + 1:\n                dp[i][j] += B[i - 1]\n    return str(dp[N][M])"
    },
    {
        "number": 1275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N):\n        for b in range(a, N):\n            for c in range(b, N):\n                for d in range(c, N):\n                    if a + b - c - d == K:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 1276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if s[i]!= s[j] and s[i]!= s[k] and s[j]!= s[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 1277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, u, v = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = set()\n    visited.add(u - 1)\n    visited.add(v - 1)\n    q = deque([u - 1])\n    while q:\n        curr = q.popleft()\n        for i in graph[curr]:\n            if i not in visited:\n                visited.add(i)\n                q.append(i)\n    return len(visited) - 1\n"
    },
    {
        "number": 1278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < a[i + x]:\n            ans = i\n            break\n    for i in range(n):\n        if a[i] < a[i + y]:\n            ans = i\n            break\n    return str(ans)"
    },
    {
        "number": 1279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] + b[j] % 2 == 1:\n                ans += 1\n                break\n    return str(ans)"
    },
    {
        "number": 1280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.split()[2])\n    good_substrings = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            good_substrings += 1\n            for j in range(i, len(s)):\n                if s[j] == '1':\n                    good_substrings += 1\n                else:\n                    break\n    return good_substrings\n"
    },
    {
        "number": 1281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max([len(list(filter(lambda x: x ^ y, a))) for y in range(2 ** k)]))"
    },
    {
        "number": 1282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.split()\n    girls = []\n    for i in range(len(boys)):\n        if boys[i] == 'M':\n            girls.append(i)\n    if len(girls) == 0:\n        return '0'\n    for i in range(len(girls)):\n        if i == 0:\n            if boys[i] == 'F':\n                girls.append(i)\n        else:\n            if boys[i] == 'F':\n                girls.append(i)\n            else:\n                girls.append(i - 1)\n    return str(len(girls))"
    },
    {
        "number": 1283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    field = stdin.split()\n    max_count = 0\n    max_cell = (0, 0)\n    for i in range(n):\n        for j in range(n):\n            if field[i][j] == '#':\n                continue\n            count = 0\n            for x in range(i, i + k):\n                for y in range(j, j + k):\n                    if x < 0 or x >= n or y < 0 or y >= n:\n                        continue\n                    if field[x][y] == '#':\n                        count += 1\n            if count > max_count:\n                max_count = count\n                max_cell = (i, j)\n    return str(max_cell[0]) +'' + str(max_cell[1])\n"
    },
    {
        "number": 1284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.append(a[0])\n    a.pop(0)\n    a.sort()\n    a.reverse()\n    return str(sum(a))"
    },
    {
        "number": 1285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4!= 0:\n        return -1\n    return str(int(n / 4))"
    },
    {
        "number": 1286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    p = 1\n    q = 1\n    for i in range(n):\n        p *= a[i]\n        q *= a[i]\n    return str(p // (10**9 + 7) // q // (10**9 + 7))"
    },
    {
        "number": 1287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [[float(x) for x in stdin.split()] for _ in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]\n    p = [[0] + p[i] + [0] for i in range(n)]"
    },
    {
        "number": 1288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(max(a[i], a[i + 1]) for i in range(n - k + 1)))\n"
    },
    {
        "number": 1289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3]))\n    a.sort()\n    b.sort()\n    if n == 1:\n        return str(a[0])\n    if m == 1:\n        return str(a[-1] - a[0])\n    if m == 2:\n        if a[0] == a[1]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 4:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 5:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 6:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 7:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 8:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 9:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 10:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 11:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10]:\n            return str(a[-1] - a[0])\n        else:\n            return str(-1)\n    if m == 12:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] =="
    },
    {
        "number": 1290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c = list(set(c))\n    c.sort(reverse=True)\n    c = list(map(str, c))\n    c =''.join(c)\n    return c"
    },
    {
        "number": 1291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points = set(points)\n    for i in range(m):\n        points.add((points[i][1], points[i][0]))\n    points = list(points)\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points = set(points)\n    if len(points) == n + m:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 1292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    grid = [[c for c in stdin[i * m: (i + 1) * m]] for i in range(n)]\n    speed = list(map(int, stdin.split()[1:]))\n    res = []\n    for i in range(p):\n        res.append(0)\n        for j in range(n):\n            for k in range(m):\n                if grid[j][k] == str(i + 1):\n                    if j - 1 >= 0 and grid[j - 1][k] == '#':\n                        res[i] += speed[i]\n                    if j + 1 < n and grid[j + 1][k] == '#':\n                        res[i] += speed[i]\n                    if k - 1 >= 0 and grid[j][k - 1] == '#':\n                        res[i] += speed[i]\n                    if k + 1 < m and grid[j][k + 1] == '#':\n                        res[i] += speed[i]\n    return''.join(map(str, res))"
    },
    {
        "number": 1293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    steps = 0\n    while a!= b:\n        steps += 1\n        for i in range(n):\n            if a[i]!= b[i]:\n                if a[i] + 1 == b[i]:\n                    a[i] += 1\n                elif a[i] - 1 == b[i]:\n                    a[i] -= 1\n    return steps"
    },
    {
        "number": 1294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))"
    },
    {
        "number": 1295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = sorted(list(map(int, stdin.split())))\n    towers = sorted(list(map(int, stdin.split())))\n    min_r = float('inf')\n    for i in range(len(cities)):\n        for j in range(i + 1, len(cities)):\n            r = abs(cities[i] - cities[j])\n            if r <= towers[0]:\n                min_r = min(min_r, r)\n    return str(min_r)\n"
    },
    {
        "number": 1296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    k = 0\n    t = 0\n    for i in range(n):\n        if k == 0:\n            t += a[i] * i\n            k += 1\n        else:\n            t += a[i] * i + a[i] * k\n            k += 1\n    return str(k) + \" \" + str(t)"
    },
    {
        "number": 1297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while n > 1:\n        if s.count('0') == s.count('1'):\n            return n\n        s = s.replace('0', '', 1)\n        s = s.replace('1', '', 1)\n        n -= 1\n    return n"
    },
    {
        "number": 1299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    laws = list(map(int, stdin.split()))\n    laws.sort()\n    a = 0\n    b = n - k + 1\n    while a < b:\n        if laws[a] + laws[b] > n:\n            b -= 1\n        else:\n            return str(a + 1) + \" \" + str(b + 1)\n    return str(a + 1) + \" \" + str(b + 1)\n"
    },
    {
        "number": 1300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(0, (n - 1) // 2 + 1))"
    },
    {
        "number": 1301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    string = stdin[1]\n    pokemon = set()\n    for i in range(n):\n        if string[i] == \".\":\n            pokemon.add(\"\")\n        else:\n            pokemon.add(string[i])\n    for i in range(n):\n        if string[i] == \".\":\n            continue\n        for j in range(n):\n            if string[j] == \".\":\n                continue\n            if string[i] + string[j] in pokemon:\n                return string[i]\n    return \"no\"\n\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n.l.r.o.\")\nsolution(\"7\\n."
    },
    {
        "number": 1302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return -1\n    if k == 1:\n        return \"1\"\n    if k == n:\n        return \"\".join(str(i) for i in range(1, n + 1))\n    if k > n:\n        return -1\n    good = []\n    for i in range(1, n + 1):\n        if gcd(i, n) > 1:\n            good.append(i)\n    if len(good) < k:\n        return -1\n    return \"\".join(str(i) for i in good[:k])\n\n\ndef"
    },
    {
        "number": 1303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q, l, r = map(int, stdin.split())\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(p):\n        a.append(int(stdin.split()[i * 2]))\n        b.append(int(stdin.split()[i * 2 + 1]))\n    for i in range(q):\n        c.append(int(stdin.split()[i * 2]))\n        d.append(int(stdin.split()[i * 2 + 1]))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append(l)\n    b.append(r)\n    c.append(l)\n    d.append(r)\n    a.append("
    },
    {
        "number": 1304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    table = stdin.split()\n    x, y = int(table[0]), int(table[1])\n    table = table[2:]\n    for i in range(9):\n        for j in range(9):\n            if table[i][j] == \"x\":\n                x_i, y_i = i, j\n            if table[i][j] == \"o\":\n                x_o, y_o = i, j\n    if x_i == x_o:\n        if y_i < y_o:\n            for i in range(y_i, y_o):\n                table[x_i][i] = \"x\"\n        else:\n            for i in range(y_o, y_i):\n                table[x_o][i] = \"x\"\n    elif y_i == y_o:\n        if x_i < x_o:\n            for i in range(x_i, x_o):\n                table[i][y_i] = \"x\"\n        else:\n            for i in range(x_o, x_i):\n                table[i][y_o] = \"x\"\n    return \"\".join(table)\n"
    },
    {
        "number": 1305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = list(map(int, stdin.split()))\n    bills.sort()\n    if bills[0] == 25:\n        if bills[1] == 25:\n            if bills[2] == 25:\n                if bills[3] == 25:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * (h + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(h + 1):\n            if j - a[i - 1] >= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][h])\n"
    },
    {
        "number": 1307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Mahmoud\"\n    else:\n        return \"Ehab\""
    },
    {
        "number": 1308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    for i in range(m):\n        x, y, l = map(int, stdin.split()[i + 2].split())\n        if s[x - 1] == s[y - 1]:\n            if l == 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if s[x - 1] == s[y - 1] + s[x - 1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 1309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    weights.sort()\n    tandem_weights = []\n    single_weights = []\n    for i in range(n):\n        if i == 0:\n            tandem_weights.append(weights[i])\n        else:\n            tandem_weights.append(tandem_weights[i - 1] + weights[i])\n        single_weights.append(weights[i])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append(weights[n - 1])\n    single_weights.append(weights[n - 1])\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.reverse()\n    single_weights.reverse()\n    tandem_weights.append("
    },
    {
        "number": 1310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_xor = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor = arr[i] ^ arr[j]\n            if xor > max_xor:\n                max_xor = xor\n    return str(max_xor)"
    },
    {
        "number": 1311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = []\n    for i in range(n):\n        x, w = map(int, stdin.split())\n        graph.append((x, w))\n    return str(max_clique(graph))\n"
    },
    {
        "number": 1312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return''.join(map(str, range(1, n + 1)))"
    },
    {
        "number": 1313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2, k_1, k_2 = map(int, stdin.split())\n    if n_1 > n_2:\n        return \"First\"\n    elif n_1 < n_2:\n        return \"Second\"\n    else:\n        if k_1 > k_2:\n            return \"First\"\n        elif k_1 < k_2:\n            return \"Second\"\n        else:\n            return \"Tie\""
    },
    {
        "number": 1314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    obelisks = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        obelisks.append((x, y))\n    clues = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        clues.append((a, b))\n    clues.sort(key=lambda x: (x[0], x[1]))\n    clues.sort(key=lambda x: (x[1], x[0]))\n    clues.sort(key=lambda x: (x[0] + x[1], x[0] - x[1]))\n    clues.sort(key=lambda x: (x[1] + x[0], x[1] - x[0]))\n    clues.sort(key=lambda x: (x[0] + x[1], x[1] + x[0]))\n    clues.sort(key=lambda x: (x[1] + x[0], x[0] + x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] - x[0]))\n    clues.sort(key=lambda x: (x[1] - x[0], x[0] - x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] + x[0]))\n    clues.sort(key=lambda x: (x[1] - x[0], x[0] + x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] - x[0]))\n    clues.sort(key=lambda x: (x[1] - x[0], x[0] - x[1]))\n    clues.sort(key=lambda x: (x[0] + x[1], x[1] + x[0]))\n    clues.sort(key=lambda x: (x[1] + x[0], x[0] + x[1]))\n    clues.sort(key=lambda x: (x[0] + x[1], x[1] + x[0]))\n    clues.sort(key=lambda x: (x[1] + x[0], x[0] + x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] - x[0]))\n    clues.sort(key=lambda x: (x[1] - x[0], x[0] - x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] - x[0]))\n    clues.sort(key=lambda x: (x[1] - x[0], x[0] - x[1]))\n    clues.sort(key=lambda x: (x[0] + x[1], x[1] + x[0]))\n    clues.sort(key=lambda x: (x[1] + x[0], x[0] + x[1]))\n    clues.sort(key=lambda x: (x[0] + x[1], x[1] + x[0]))\n    clues.sort(key=lambda x: (x[1] + x[0], x[0] + x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] - x[0]))\n    clues.sort(key=lambda x: (x[1] - x[0], x[0] - x[1]))\n    clues.sort(key=lambda x: (x[0] - x[1], x[1] - x[0]))\n    clues.sort(key=lambda x: (x["
    },
    {
        "number": 1315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = []\n    for i in range(n):\n        if a[i] == 0:\n            res.append(0)\n        else:\n            res.append(a[i] + res[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 1316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    return str(find_level(s, k))\n\ndef"
    },
    {
        "number": 1317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(n * (n + 1) / 2) // m)"
    },
    {
        "number": 1318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    tables.sort()\n    r = list(map(int, stdin.split()))\n    r.sort()\n    tables = [0] + tables\n    r = [0] + r\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if r[i] <= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - r[i]] + tables[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][k])\n"
    },
    {
        "number": 1319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = list(map(int, stdin.split()))\n    res = 1\n    for p in primes:\n        res *= p\n        res %= 10**9 + 7\n    return str(res)"
    },
    {
        "number": 1320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin[i*n:(i+1)*n])\n    happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'C':\n                if i == j:\n                    happiness += 1\n                else:\n                    happiness += 2\n    return str(happiness)"
    },
    {
        "number": 1321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = []\n    h = []\n    for i in range(n):\n        w.append(int(stdin.split()[i * 2]))\n        h.append(int(stdin.split()[i * 2 + 1]))\n    return str(min(sum(w), sum(h))) +'' + str(min(w)) +'' + str(min(h))"
    },
    {
        "number": 1322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(19)"
    },
    {
        "number": 1323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    a.sort()\n    b.sort()\n    a_partition = []\n    b_partition = []\n    for i in range(m):\n        a_partition.append(a[i])\n    for i in range(n):\n        b_partition.append(b[i])\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition = list(a_partition)\n    b_partition = list(b_partition)\n    a_partition.sort()\n    b_partition.sort()\n    a_partition = set(a_partition)\n    b_partition = set(b_partition)\n    a_partition ="
    },
    {
        "number": 1324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    s = stdin.split()[1]\n    return sum(int(s[i]) * a_i for i, a_i in enumerate(map(int, s)))\n"
    },
    {
        "number": 1325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.replace('\\n', '')\n    return str(n - p) +'' + str(n - p + 1) +'' + str(n - p + 2) +'' + str(n - p + 3) +'' + str(n - p + 4) +'' + str(n - p + 5) +'' + str(n - p + 6)"
    },
    {
        "number": 1326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = lambda x: 1 if x == 1 else x * f(x - 1)\n    return str(f(n))"
    },
    {
        "number": 1327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cakes = []\n    for i in range(n):\n        x, y, z = map(int, stdin.split())\n        cakes.append((x, y, z))\n    cakes.sort(key=lambda x: (x[0], x[1], x[2]))\n    return str(sum([abs(x) for x, y, z in cakes])) +'' + str(sum([abs(y) for x, y, z in cakes])) +'' + str(sum([abs(z) for x, y, z in cakes]))"
    },
    {
        "number": 1328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m_a, m_b = map(int, stdin.split())\n    a = []\n    b = []\n    c = []\n    for i in range(n):\n        a.append(int(stdin.split()[i * 2 + 1]))\n        b.append(int(stdin.split()[i * 2 + 2]))\n        c.append(int(stdin.split()[i * 2 + 3]))\n    a.sort()\n    b.sort()\n    c.sort()\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[-1] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0] * m_a + b[0] * m_b!= c[0]:\n        return -1\n    if a[-1] * m_a + b[-1] * m_b!= c[-1]:\n        return -1\n    if a[0]"
    },
    {
        "number": 1329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return str(divisors)"
    },
    {
        "number": 1330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = int(stdin.split()[-1])\n    p.sort()\n    c.sort()\n    res = 0\n    for i in range(d):\n        if c[i] == 0:\n            res = 0\n        else:\n            res = max(res, p[c[i] - 1] - p[i])\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n"
    },
    {
        "number": 1332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3, c_4, c_5 = map(int, stdin.split())\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 0:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 > 100:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 < 0:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 1:\n        return '3'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 2:\n        return '2'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 3:\n        return '1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 4:\n        return '0'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 5:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 6:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 7:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 8:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 9:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 10:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 11:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 12:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 13:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 14:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 15:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 16:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 17:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 18:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 19:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 20:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 21:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 22:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 23:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 24:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 25:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 26:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 27:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 28:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 29:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 30:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 31:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 32:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 33:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 34:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 35:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 36:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 37:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 38:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 39:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 40:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 41:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 42:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 43:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 44:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 45:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 46:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 47:\n        return '-1'\n    if c_1 + c_2 + c_3 + c_4 + c_5 == 48:\n        return '-1'\n    if c_1 + c_2 +"
    },
    {
        "number": 1333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 0:\n        raise Exception(\"n must be odd\")\n    if m < 3:\n        raise Exception(\"m must be greater than 3\")\n    snake = [['.'] * m for _ in range(n)]\n    snake[1][1] = '#'\n    for i in range(2, n):\n        snake[i][1] = '#'\n        snake[i][m - 2] = '#'\n        snake[i][m - 1] = '#'\n        snake[i][m - 3] = '#'\n        snake[i][m - 4] = '#'\n        snake[i][m - 5] = '#'\n        snake[i][m - 6] = '#'\n        snake[i][m - 7] = '#'\n        snake[i][m - 8] = '#'\n        snake[i][m - 9] = '#'\n        snake[i][m - 10] = '#'\n        snake[i][m - 11] = '#'\n        snake[i][m - 12] = '#'\n        snake[i][m - 13] = '#'\n        snake[i][m - 14] = '#'\n        snake[i][m - 15] = '#'\n        snake[i][m - 16] = '#'\n        snake[i][m - 17] = '#'\n        snake[i][m - 18] = '#'\n        snake[i][m - 19] = '#'\n        snake[i][m - 20] = '#'\n        snake[i][m - 21] = '#'\n        snake[i][m - 22] = '#'\n        snake[i][m - 23] = '#'\n        snake[i][m - 24] = '#'\n        snake[i][m - 25] = '#'\n        snake[i][m - 26] = '#'\n        snake[i][m - 27] = '#'\n        snake[i][m - 28] = '#'\n        snake[i][m - 29] = '#'\n        snake[i][m - 30] = '#'\n        snake[i][m - 31] = '#'\n        snake[i][m - 32] = '#'\n        snake[i][m - 33] = '#'\n        snake[i][m - 34] = '#'\n        snake[i][m - 35] = '#'\n        snake[i][m - 36] = '#'\n        snake[i][m - 37] = '#'\n        snake[i][m - 38] = '#'\n        snake[i][m - 39] = '#'\n        snake[i][m - 40] = '#'\n        snake[i][m - 41] = '#'\n        snake[i][m - 42] = '#'\n        snake[i][m - 43] = '#'\n        snake[i][m - 44] = '#'\n        snake[i][m - 45] = '#'\n        snake[i][m - 46] = '#'\n        snake[i][m - 47] = '#'\n        snake[i][m - 48] = '#'\n        snake[i][m - 49] = '#'\n        snake[i][m - 50] = '#'\n    return '\\n'.join(''.join(row) for row in snake)\n"
    },
    {
        "number": 1334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    t = ''\n    for i in range(k):\n        t += min(s[i:])\n    return t"
    },
    {
        "number": 1335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        if a[i] == 1:\n            res += 1\n    return str(res)"
    },
    {
        "number": 1336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dolls = []\n    for i in range(n):\n        dolls.append(list(map(int, stdin.split())))\n    dolls.sort(key=lambda x: x[1])\n    dolls.sort(key=lambda x: x[0])\n    dolls.sort(key=lambda x: x[0] - x[1])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16])\n    dolls.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16] - x[17])\n    dolls."
    },
    {
        "number": 1337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3:]))\n    c = list(map(int, stdin.split()[4:]))\n    a.sort()\n    b.sort()\n    c.sort()\n    a_dict = {}\n    b_dict = {}\n    c_dict = {}\n    for i in range(n):\n        a_dict[a[i]] = i\n        b_dict[b[i]] = i\n        c_dict[c[i]] = i\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[1])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[0])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[0])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[0])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[1])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[0])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[0])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[0])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[1])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[0])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[0])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[0])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[1])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[0])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[0])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[0])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[1])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[0])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[0])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[0])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n    c_dict = {k: v for k, v in sorted(c_dict.items(), key=lambda item: item[1])}\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[0])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item:"
    },
    {
        "number": 1338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 1:\n        return \"1\" + \" \" + \"1\"\n    if m == 2:\n        return \"1\" + \" \" + \"2\"\n    if m == 3:\n        return \"2\" + \" \" + \"1\"\n    if m == 4:\n        return \"2\" + \" \" + \"2\"\n    if m == 5:\n        return \"3\" + \" \" + \"1\"\n    if m == 6:\n        return \"3\" + \" \" + \"2\"\n    if m == 7:\n        return \"4\" + \" \" + \"1\"\n    if m == 8:\n        return \"4\" + \" \" + \"2\"\n    if m == 9:\n        return \"5\" + \" \" + \"1\"\n    if m == 10:\n        return \"5\" + \" \" + \"2\"\n    if m == 11:\n        return \"6\" + \" \" + \"1\"\n    if m == 12:\n        return \"6\" + \" \" + \"2\"\n    if m == 13:\n        return \"7\" + \" \" + \"1\"\n    if m == 14:\n        return \"7\" + \" \" + \"2\"\n    if m == 15:\n        return \"8\" + \" \" + \"1\"\n    if m == 16:\n        return \"8\" + \" \" + \"2\"\n    if m == 17:\n        return \"9\" + \" \" + \"1\"\n    if m == 18:\n        return \"9\" + \" \" + \"2\"\n    if m == 19:\n        return \"10\" + \" \" + \"1\"\n    if m == 20:\n        return \"10\" + \" \" + \"2\"\n    if m == 21:\n        return \"11\" + \" \" + \"1\"\n    if m == 22:\n        return \"11\" + \" \" + \"2\"\n    if m == 23:\n        return \"12\" + \" \" + \"1\"\n    if m == 24:\n        return \"12\" + \" \" + \"2\"\n    if m == 25:\n        return \"13\" + \" \" + \"1\"\n    if m == 26:\n        return \"13\" + \" \" + \"2\"\n    if m == 27:\n        return \"14\" + \" \" + \"1\"\n    if m == 28:\n        return \"14\" + \" \" + \"2\"\n    if m == 29:\n        return \"15\" + \" \" + \"1\"\n    if m == 30:\n        return \"15\" + \" \" + \"2\"\n    if m == 31:\n        return \"16\" + \" \" + \"1\"\n    if m == 32:\n        return \"16\" + \" \" + \"2\"\n    if m == 33:\n        return \"17\" + \" \" + \"1\"\n    if m == 34:\n        return \"17\" + \" \" + \"2\"\n    if m == 35:\n        return \"18\" + \" \" + \"1\"\n    if m == 36:\n        return \"18\" + \" \" + \"2\"\n    if m == 37:\n        return \"19\" + \" \" + \"1\"\n    if m == 38:\n        return \"19\" + \" \" + \"2\"\n    if m == 39:\n        return \"20\" + \" \" + \"1\"\n    if m == 40:\n        return \"20\" + \" \" + \"2\"\n    if m == 41:\n        return \"21\" + \" \" + \"1\"\n    if m == 42:\n        return \"21\" + \" \" + \"2\"\n    if m == 43:\n        return \"22\" + \" \" + \"1\"\n    if m == 44:\n        return \"22\" + \" \" + \"2\"\n    if m == 45:\n        return \"23\" + \" \" + \"1\"\n    if m == 46:\n        return \"23\" + \" \" + \"2\"\n    if m == 47:\n        return \"24\" + \" \" + \"1\"\n    if m == 48:\n        return \"24\" + \" \" + \"2\"\n    if m == 49:\n        return \"25\" + \" \" + \"1\"\n    if m == 50:\n        return \"25\" + \" \" + \"2\"\n    if m == 51:\n        return \"26\" + \" \" + \"1\"\n    if m == 52:\n        return \"26\" + \" \" + \"2\"\n    if m == 53:\n        return \"27\" + \" \" + \"1\"\n    if m == 54:\n        return \"27\" + \" \" + \"2\"\n    if m == 55:\n        return \"28\" + \" \" + \"1\"\n    if m == 56:\n        return \"28\" + \" \" + \"2\"\n    if m == 57:\n        return \"29\" + \" \" + \"1\"\n    if m == 58:\n        return \"29\" + \" \" + \"2\"\n    if m == 59:\n        return \"30\" + \" \" + \"1\"\n    if m == 60:\n        return \"30\" + \" \" + \"2\"\n    if m == 61:\n        return \"31\" + \" \" + \"1\"\n    if m == 62:\n        return \"31\" + \" \" + \"2\"\n    if m == 63:\n        return \"32\" + \" \" + \"1\"\n    if m == 64:\n        return \"32\" + \" \" + \"2\"\n    if m == 65:\n        return \"33\" + \" \" + \"1\"\n    if m == 66:\n        return \"33\" + \" \" + \"2\"\n    if m == 67:\n        return \"34\" + \" \" + \"1\"\n    if m == 68:\n        return \"34\" + \" \" + \"2\"\n    if m == 69:\n        return \"35\" + \" \" + \"1\"\n    if m == 70:\n        return \"35\" + \" \" + \"2\"\n    if m == 71:\n        return \"36\" + \" \" + \"1\"\n    if m == 72:\n        return \"36\" + \" \" + \"2\"\n    if m == 73:\n        return \"37\" + \" \" + \"1\"\n    if m == 74:\n        return \"37\" + \" \" + \"2\"\n    if m == 75:\n        return \"38\" + \" \" + \"1\"\n    if m == 76:\n        return \"38\" + \" \" + \"2\"\n    if m == 77:\n        return \"39\" + \" \" + \"1\"\n    if m == 78:\n        return \"39\" + \" \" + \"2\"\n    if m == 79:\n        return \"40\" + \" \" + \"1\"\n    if m == 80:\n        return \"40\" + \" \" + \"2\"\n    if m == 81:\n        return \"41\" + \" \" + \"1\"\n    if m == 82:\n        return \"41\" + \" \" + \"2\"\n    if m == 83:\n        return \"42\" + \" \" + \"1\"\n    if m == 84:\n        return"
    },
    {
        "number": 1339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in stdin.split()[i * 2 + 1].split(' ')])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments = set(segments)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments.intersection(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference(segments.difference"
    },
    {
        "number": 1340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(a))"
    },
    {
        "number": 1341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    l = len(s)\n    r = 0\n    for i in range(l):\n        if s[i] == t[i]:\n            r += 1\n    return str(r)"
    },
    {
        "number": 1342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    balls = list(map(int, stdin.split()))\n    balls.sort()\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return"
    },
    {
        "number": 1343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return '-1'\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, l = map(int, stdin.split())\n        graph[u - 1].append((v - 1, l))\n        graph[v - 1].append((u - 1, l))\n    storages = list(map(int, stdin.split()))\n    if len(storages) == 0:\n        return '-1'\n    storages.sort()\n    storages = storages[::-1]\n    visited = set()\n    visited.add(0)\n    res = 0\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            stack = [(i, 0)]\n            while stack:\n                node, dist = stack.pop()\n                for nei, l in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append((nei, dist + l))\n            if len(visited) == k:\n                res = max(res, dist)\n    return str(res)\n"
    },
    {
        "number": 1344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] < arr[j]:\n                max_len = max(max_len, j - i + 1)\n    return str(max_len)\n"
    },
    {
        "number": 1345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    for i in range(n):\n        if a[i] <= a[i] + 1 <= 2 * a[i]:\n            s += a[i]\n        else:\n            s += a[i] + 1\n    return \"+\" + \"-\" * n + \"+\""
    },
    {
        "number": 1346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    f = list(map(int, stdin.split()[1].split()))\n    g = list(map(int, stdin.split()[2].split()))\n    for i in range(n):\n        f[i] = f[i] % p\n        g[i] = g[i] % p\n    h = 0\n    for i in range(n):\n        h += f[i] * g[i]\n    for i in range(m):\n        h *= g[i]\n    for i in range(n):\n        h %= p\n    return str(h)\n"
    },
    {
        "number": 1347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    n = int(stdin.split()[1])\n    d = {}\n    for i in range(n):\n        x, y = stdin.split()[i*2+2:i*2+4]\n        d[x] = y\n    res = 0\n    for word in words:\n        if word in d:\n            res += len(word)\n        else:\n            res += len(word) - 1\n    return str(res) +'' + str(len(words))"
    },
    {
        "number": 1348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    if n == 1:\n        return -1\n    if k == 0:\n        return 0\n    if k == n:\n        return n\n    d.sort()\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::-1]\n    d = d[:k]\n    d.sort()\n    d = d[::"
    },
    {
        "number": 1349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        x = list(map(int, stdin.split()))\n        x.sort()\n        x.append(x[-1] + 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] - 1)\n        x.insert(0, x[0] -"
    },
    {
        "number": 1350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if n == 1:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return max(n, 2)\n    if k == 3:\n        return max(n, 3)\n    if k == 4:\n        return max(n, 4)\n    if k == 5:\n        return max(n, 5)\n    if k == 6:\n        return max(n, 6)\n    if k == 7:\n        return max(n, 7)\n    if k == 8:\n        return max(n, 8)\n    if k == 9:\n        return max(n, 9)\n    if k == 10:\n        return max(n, 10)\n    if k == 11:\n        return max(n, 11)\n    if k == 12:\n        return max(n, 12)\n    if k == 13:\n        return max(n, 13)\n    if k == 14:\n        return max(n, 14)\n    if k == 15:\n        return max(n, 15)\n    if k == 16:\n        return max(n, 16)\n    if k == 17:\n        return max(n, 17)\n    if k == 18:\n        return max(n, 18)\n    if k == 19:\n        return max(n, 19)\n    if k == 20:\n        return max(n, 20)\n    if k == 21:\n        return max(n, 21)\n    if k == 22:\n        return max(n, 22)\n    if k == 23:\n        return max(n, 23)\n    if k == 24:\n        return max(n, 24)\n    if k == 25:\n        return max(n, 25)\n    if k == 26:\n        return max(n, 26)\n    if k == 27:\n        return max(n, 27)\n    if k == 28:\n        return max(n, 28)\n    if k == 29:\n        return max(n, 29)\n    if k == 30:\n        return max(n, 30)\n    if k == 31:\n        return max(n, 31)\n    if k == 32:\n        return max(n, 32)\n    if k == 33:\n        return max(n, 33)\n    if k == 34:\n        return max(n, 34)\n    if k == 35:\n        return max(n, 35)\n    if k == 36:\n        return max(n, 36)\n    if k == 37:\n        return max(n, 37)\n    if k == 38:\n        return max(n, 38)\n    if k == 39:\n        return max(n, 39)\n    if k == 40:\n        return max(n, 40)\n    if k == 41:\n        return max(n, 41)\n    if k == 42:\n        return max(n, 42)\n    if k == 43:\n        return max(n, 43)\n    if k == 44:\n        return max(n, 44)\n    if k == 45:\n        return max(n, 45)\n    if k == 46:\n        return max(n, 46)\n    if k == 47:\n        return max(n, 47)\n    if k == 48:\n        return max(n, 48)\n    if k == 49:\n        return max(n, 49)\n    if k == 50:\n        return max(n, 50)\n    if k == 51:\n        return max(n, 51)\n    if k == 52:\n        return max(n, 52)\n    if k == 53:\n        return max(n, 53)\n    if k == 54:\n        return max(n, 54)\n    if k == 55:\n        return max(n, 55)\n    if k == 56:\n        return max(n, 56)\n    if k == 57:\n        return max(n, 57)\n    if k == 58:\n        return max(n, 58)\n    if k == 59:\n        return max(n, 59)\n    if k == 60:\n        return max(n, 60)\n    if k == 61:\n        return max(n, 61)\n    if k == 62:\n        return max(n, 62)\n    if k == 63:\n        return max(n, 63)\n    if k == 64:\n        return max(n, 64)\n    if k == 65:\n        return max(n, 65)\n    if k == 66:\n        return max(n, 66)\n    if k == 67:\n        return max(n, 67)\n    if k == 68:\n        return max(n, 68)\n    if k == 69:\n        return max(n, 69)\n    if k == 70:\n        return max(n, 70)\n    if k == 71:\n        return max(n, 71)\n    if k == 72:\n        return max(n, 72)\n    if k == 73:\n        return max(n, 73)\n    if k == 74:\n        return max(n, 74)\n    if k == 75:\n        return max(n, 75)\n    if k == 76:\n        return max(n, 76)\n    if k == 77:\n        return max(n, 77)\n    if k == 78:\n        return max(n, 78)\n    if k == 79:\n        return max(n, 79)\n    if k == 80:\n        return max(n, 80)\n    if k == 81:\n        return max(n, 81)\n    if k == 82:\n        return max(n, 82)\n    if k == 83:\n        return max(n, 83)\n    if k == 84:\n        return max(n, 84)\n    if k == 85:\n        return max(n, 85)\n    if k == 86:\n        return max(n, 86)\n    if k == 87:\n        return max(n, 87)\n    if k == 88:\n        return max(n, 88)\n    if k == 89:\n        return max(n, 89)\n    if k == 90:\n        return max(n, 90)\n    if k == 91:\n        return max(n, 91)\n    if k == 92:\n        return max(n, 92)\n    if k == 93:\n        return max(n, 93)\n    if k == 94:\n        return max(n, 94)\n    if k == 95:\n        return max(n, 95)\n    if k == 96:\n        return max(n, 96)\n    if k == 97:\n        return max(n, 97)\n    if k == 98:\n        return max(n, 98)\n    if k == 99:\n        return max(n, 99)\n    if k == 100:\n        return max(n, 100)\n    if k == 101:\n        return"
    },
    {
        "number": 1351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for x in range(l, r + 1):\n        if len(set(str(x))) == len(str(x)):\n            return str(x)\n    return -1"
    },
    {
        "number": 1352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] <= a[j] and a[j] <= x:\n                res += 1\n    return str(res)"
    },
    {
        "number": 1353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(min(n * a, n * b, m * a, m * b))"
    },
    {
        "number": 1354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a = map(int, stdin.split())\n    m = int(stdin)\n    shots = list(map(int, stdin.split()))\n    shots.sort()\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    shots = shots[1:]\n    shots = shots[::-1]\n    "
    },
    {
        "number": 1355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    polygon = []\n    for i in range(n):\n        polygon.append(list(map(float, stdin.split())))\n    lines = []\n    for i in range(m):\n        lines.append(list(map(float, stdin.split())))\n    lines.sort(key=lambda x: x[0])\n    lines.sort(key=lambda x: x[1])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    lines.sort(key=lambda x: x[1] - x[0])\n    lines.sort(key=lambda x: x[0] - x[1])\n    "
    },
    {
        "number": 1356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s.count('a') == 0:\n            return len(s)\n        s = s.replace('a', '')\n\ndef"
    },
    {
        "number": 1357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(a[0] + a[1] + a[2])"
    },
    {
        "number": 1358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    strings = []\n    for _ in range(k):\n        strings.append(stdin.split()[1])\n    strings = sorted(strings, key=len)\n    max_beauty = 0\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if strings[i] == strings[j]:\n                continue\n            if strings[i] == strings[j][::-1]:\n                continue\n            beauty = 0\n            for k in range(len(strings[i])):\n                if strings[i][k]!= strings[j][k]:\n                    beauty += 1\n            max_beauty = max(max_beauty, beauty)\n    return max_beauty"
    },
    {
        "number": 1359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n    roads.sort()\n    count = 0\n    for i in range(len(roads)):\n        for j in range(i + 1, len(roads)):\n            if roads[i][0] == roads[j][0] or roads[i][1] == roads[j][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    exams = []\n    for i in range(n):\n        exams.append(list(map(int, stdin.split())))\n    exams.sort(key=lambda x: x[0])\n    for i in range(n):\n        if exams[i][1] < exams[i][0]:\n            return str(exams[i][1])\n    return str(exams[-1][1])\n"
    },
    {
        "number": 1361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    diff = a[1] - a[0]\n    for i in range(2, n):\n        diff = max(diff, a[i] - a[i - 1])\n    return str(diff)"
    },
    {
        "number": 1362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    days = []\n    for i in range(n):\n        days.append(list(map(int, stdin.split())))\n    days.sort()\n    days.reverse()\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n    for i in range(n):\n        days[i][1] = days[i][1] + (days[i+1][1] - days[i][1])\n    for i in range(n):\n        days[i][1] = days[i][1] - p\n"
    },
    {
        "number": 1364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    t.sort()\n    if t[0]!= 1:\n        return 0\n    if t[-1]!= 2:\n        return 0\n    if t[0] == t[-1]:\n        return 0\n    if t[0] == 1:\n        return t[1]\n    if t[-1] == 2:\n        return t[-2]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t[-1] == 2:\n        return t[0]\n    if t[0] == 2:\n        return t[-1]\n    if t[0] == 1:\n        return t[-1]\n    if t"
    },
    {
        "number": 1365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    black_count = 0\n    for i in range(n):\n        if black_count == k:\n            break\n        black_count += 1\n        for j in range(n):\n            if black_count == k:\n                break\n            if j in graph[i]:\n                continue\n            black_count += 1\n            for k in range(n):\n                if black_count == k:\n                    break\n                if k in graph[j]:\n                    continue\n                black_count += 1\n                for l in range(n):\n                    if black_count == k:\n                        break\n                    if l in graph[k]:\n                        continue\n                    black_count += 1\n                    for m in range(n):\n                        if black_count == k:\n                            break\n                        if m in graph[l]:\n                            continue\n                        black_count += 1\n                        for o in range(n):\n                            if black_count == k:\n                                break\n                            if o in graph[m]:\n                                continue\n                            black_count += 1\n                            for p in range(n):\n                                if black_count == k:\n                                    break\n                                if p in graph[o]:\n                                    continue\n                                black_count += 1\n                                for q in range(n):\n                                    if black_count == k:\n                                        break\n                                    if q in graph[p]:\n                                        continue\n                                    black_count += 1\n                                    for r in range(n):\n                                        if black_count == k:\n                                            break\n                                        if r in graph[q]:\n                                            continue\n                                        black_count += 1\n                                        for s in range(n):\n                                            if black_count == k:\n                                                break\n                                            if s in graph[r]:\n                                                continue\n                                            black_count += 1\n                                            for t in range(n):\n                                                if black_count == k:\n                                                    break\n                                                if t in graph[s]:\n                                                    continue\n                                                black_count += 1\n                                                for u in range(n):\n                                                    if black_count == k:\n                                                        break\n                                                    if u in graph[t]:\n                                                        continue\n                                                    black_count += 1\n                                                    for v in range(n):\n                                                        if black_count == k:\n                                                            break\n                                                        if v in graph[u]:\n                                                            continue\n                                                        black_count += 1\n                                                        for w in range(n):\n                                                            if black_count == k:\n                                                                break\n                                                            if w in graph[v]:\n                                                                continue\n                                                            black_count += 1\n                                                            for x in range(n):\n                                                                if black_count == k:\n                                                                    break\n                                                                if x in graph[w]:\n                                                                    continue\n                                                                black_count += 1\n                                                                for y in range(n):\n                                                                    if black_count == k:\n                                                                        break\n                                                                    if y in graph[x]:\n                                                                        continue\n                                                                    black_count += 1\n                                                                    for z in range(n):\n                                                                        if black_count == k:\n                                                                            break\n                                                                        if z in graph[y]:\n                                                                            continue\n                                                                        black_count += 1\n                                                                        for a in range(n):\n                                                                            if black_count == k:\n                                                                                break\n                                                                            if a in graph[z]:\n                                                                                continue\n                                                                            black_count += 1\n                                                                            for b in range(n):\n                                                                                if black_count == k:\n                                                                                    break\n                                                                                if b in graph[a]:\n                                                                                    continue\n                                                                                black_count += 1\n                                                                                for c in range(n):\n                                                                                    if black_count == k:\n                                                                                        break\n                                                                                    if c in graph[b]:\n                                                                                        continue\n                                                                                    black_count += 1\n                                                                                    for d in range(n):\n                                                                                        if black_count == k:\n                                                                                            break\n                                                                                        if d in graph[c]:\n                                                                                            continue\n                                                                                        black_count += 1\n                                                                                        for e in range(n):\n                                                                                            if black_count == k:\n                                                                                                break\n                                                                                            if e in graph[d]:\n                                                                                                continue\n                                                                                            black_count += 1\n                                                                                            for f in range(n):\n                                                                                                if black_count == k:\n                                                                                                    break\n                                                                                                if f in graph[e]:\n                                                                                                    continue\n                                                                                                black_count += 1\n                                                                                                for g in range(n):\n                                                                                                    if black_count == k:\n                                                                                                        break\n                                                                                                    if g in graph[f]:\n                                                                                                        continue\n                                                                                                    black_count += 1\n                                                                                                    for h in range(n):\n                                                                                                        if black_count == k:\n                                                                                                            break"
    },
    {
        "number": 1366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n        b.append(int(stdin.split()[i+n]))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    ans = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 1367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(a.index(max(a)) + 1)"
    },
    {
        "number": 1368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort()\n    return str(max(sum(v[A:B+1])/len(v[A:B+1]), sum(v)/len(v))) + '\\n' + str(len(v) - (len(v) - A) + 1)"
    },
    {
        "number": 1369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        points.append(tuple(map(int, stdin.split())))\n    points = sorted(points, key=lambda x: x[0] ** 2 + x[1] ** 2)\n    min_radius = 0\n    for i in range(N):\n        if points[i][0] ** 2 + points[i][1] ** 2 > min_radius ** 2:\n            min_radius = points[i][0] ** 2 + points[i][1] ** 2\n    return str(min_radius)\n"
    },
    {
        "number": 1370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    S = stdin.split()\n    S = list(map(int, S))\n    # print(S)\n    # print(H, W, K)\n    # print(S)\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    # print(S[0:H])\n    # print(S[H:])\n    "
    },
    {
        "number": 1371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    count = 0\n    for i in range(3, s + 1):\n        if is_prime(i):\n            for j in range(i, s + 1):\n                if is_prime(j):\n                    count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 1372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (H - B[i])\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(sum(range(1, N+1)) % (10**9+7))"
    },
    {
        "number": 1374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = []\n    for i in range(N):\n        m.append(a[i])\n        m.sort()\n    m.sort(reverse=True)\n    return str(m[(N // 2)])"
    },
    {
        "number": 1375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return 1\n    if n == 2:\n        return sum(a)\n    if n == 3:\n        return sum(a)\n    if n == 4:\n        return sum(a)\n    if n == 5:\n        return sum(a)\n    if n == 6:\n        return sum(a)\n    if n == 7:\n        return sum(a)\n    if n == 8:\n        return sum(a)\n    if n == 9:\n        return sum(a)\n    if n == 10:\n        return sum(a)\n    if n == 11:\n        return sum(a)\n    if n == 12:\n        return sum(a)\n    if n == 13:\n        return sum(a)\n    if n == 14:\n        return sum(a)\n    if n == 15:\n        return sum(a)\n    if n == 16:\n        return sum(a)\n    if n == 17:\n        return sum(a)\n    if n == 18:\n        return sum(a)\n    if n == 19:\n        return sum(a)\n    if n == 20:\n        return sum(a)\n    if n == 21:\n        return sum(a)\n    if n == 22:\n        return sum(a)\n    if n == 23:\n        return sum(a)\n    if n == 24:\n        return sum(a)\n    if n == 25:\n        return sum(a)\n    if n == 26:\n        return sum(a)\n    if n == 27:\n        return sum(a)\n    if n == 28:\n        return sum(a)\n    if n == 29:\n        return sum(a)\n    if n == 30:\n        return sum(a)\n    if n == 31:\n        return sum(a)\n    if n == 32:\n        return sum(a)\n    if n == 33:\n        return sum(a)\n    if n == 34:\n        return sum(a)\n    if n == 35:\n        return sum(a)\n    if n == 36:\n        return sum(a)\n    if n == 37:\n        return sum(a)\n    if n == 38:\n        return sum(a)\n    if n == 39:\n        return sum(a)\n    if n == 40:\n        return sum(a)\n    if n == 41:\n        return sum(a)\n    if n == 42:\n        return sum(a)\n    if n == 43:\n        return sum(a)\n    if n == 44:\n        return sum(a)\n    if n == 45:\n        return sum(a)\n    if n == 46:\n        return sum(a)\n    if n == 47:\n        return sum(a)\n    if n == 48:\n        return sum(a)\n    if n == 49:\n        return sum(a)\n    if n == 50:\n        return sum(a)\n    if n == 51:\n        return sum(a)\n    if n == 52:\n        return sum(a)\n    if n == 53:\n        return sum(a)\n    if n == 54:\n        return sum(a)\n    if n == 55:\n        return sum(a)\n    if n == 56:\n        return sum(a)\n    if n == 57:\n        return sum(a)\n    if n == 58:\n        return sum(a)\n    if n == 59:\n        return sum(a)\n    if n == 60:\n        return sum(a)\n    if n == 61:\n        return sum(a)\n    if n == 62:\n        return sum(a)\n    if n == 63:\n        return sum(a)\n    if n == 64:\n        return sum(a)\n    if n == 65:\n        return sum(a)\n    if n == 66:\n        return sum(a)\n    if n == 67:\n        return sum(a)\n    if n == 68:\n        return sum(a)\n    if n == 69:\n        return sum(a)\n    if n == 70:\n        return sum(a)\n    if n == 71:\n        return sum(a)\n    if n == 72:\n        return sum(a)\n    if n == 73:\n        return sum(a)\n    if n == 74:\n        return sum(a)\n    if n == 75:\n        return sum(a)\n    if n == 76:\n        return sum(a)\n    if n == 77:\n        return sum(a)\n    if n == 78:\n        return sum(a)\n    if n == 79:\n        return sum(a)\n    if n == 80:\n        return sum(a)\n    if n == 81:\n        return sum(a)\n    if n == 82:\n        return sum(a)\n    if n == 83:\n        return sum(a)\n    if n == 84:\n        return sum(a)\n    if n == 85:\n        return sum(a)\n    if n == 86:\n        return sum(a)\n    if n == 87:\n        return sum(a)\n    if n == 88:\n        return sum(a)\n    if n == 89:\n        return sum(a)\n    if n == 90:\n        return sum(a)\n    if n == 91:\n        return sum(a)\n    if n == 92:\n        return sum(a)\n    if n == 93:\n        return sum(a)\n    if n == 94:\n        return sum(a)\n    if n == 95:\n        return sum(a)\n    if n == 96:\n        return sum(a)\n    if n == 97:\n        return sum(a)\n    if n == 98:\n        return sum(a)\n    if n == 99:\n        return sum(a)\n    if n == 100:\n        return sum(a)\n    if n == 101:\n        return sum(a)\n    if n == 102:\n        return sum(a)\n    if n == 103:\n        return sum(a)\n    if n == 104:\n        return sum(a)\n    if n == 105:\n        return sum(a)\n    if n == 106:\n        return sum(a)\n    if n == 107:\n        return sum(a)\n    if n == 108:\n        return sum(a)\n    if n == 109:\n        return sum(a)\n    if n == 110:\n        return sum(a)\n    if n == 111:\n        return sum(a)\n    if n == 112:\n        return sum(a)\n    if n == 113:\n        return sum(a)\n    if n == 114:\n        return sum(a)\n    if n == 115:\n        return sum(a)\n    if n == 116:\n        return sum(a)\n    if n == 117:\n        return sum(a)\n    if n == 118:\n        return sum(a)\n    if n == 119:\n        return sum(a)\n    if n == 120:\n        return sum(a)\n    if n == 121:\n        return sum(a)\n    if n == 122:\n        return sum(a)\n    if n == 123:\n        return sum(a)\n    if n == 124:\n"
    },
    {
        "number": 1376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = list(map(str, a))\n    return''.join(a)"
    },
    {
        "number": 1377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > a[-1]:\n        return \"NO\"\n    if a[0] == a[-1]:\n        return \"YES\"\n    if a[0] == a[1]:\n        return \"YES\"\n    if a[0] == a[2]:\n        return \"YES\"\n    if a[0] == a[3]:\n        return \"YES\"\n    if a[0] == a[4]:\n        return \"YES\"\n    if a[0] == a[5]:\n        return \"YES\"\n    if a[0] == a[6]:\n        return \"YES\"\n    if a[0] == a[7]:\n        return \"YES\"\n    if a[0] == a[8]:\n        return \"YES\"\n    if a[0] == a[9]:\n        return \"YES\"\n    if a[0] == a[10]:\n        return \"YES\"\n    if a[0] == a[11]:\n        return \"YES\"\n    if a[0] == a[12]:\n        return \"YES\"\n    if a[0] == a[13]:\n        return \"YES\"\n    if a[0] == a[14]:\n        return \"YES\"\n    if a[0] == a[15]:\n        return \"YES\"\n    if a[0] == a[16]:\n        return \"YES\"\n    if a[0] == a[17]:\n        return \"YES\"\n    if a[0] == a[18]:\n        return \"YES\"\n    if a[0] == a[19]:\n        return \"YES\"\n    if a[0] == a[20]:\n        return \"YES\"\n    if a[0] == a[21]:\n        return \"YES\"\n    if a[0] == a[22]:\n        return \"YES\"\n    if a[0] == a[23]:\n        return \"YES\"\n    if a[0] == a[24]:\n        return \"YES\"\n    if a[0] == a[25]:\n        return \"YES\"\n    if a[0] == a[26]:\n        return \"YES\"\n    if a[0] == a[27]:\n        return \"YES\"\n    if a[0] == a[28]:\n        return \"YES\"\n    if a[0] == a[29]:\n        return \"YES\"\n    if a[0] == a[30]:\n        return \"YES\"\n    if a[0] == a[31]:\n        return \"YES\"\n    if a[0] == a[32]:\n        return \"YES\"\n    if a[0] == a[33]:\n        return \"YES\"\n    if a[0] == a[34]:\n        return \"YES\"\n    if a[0] == a[35]:\n        return \"YES\"\n    if a[0] == a[36]:\n        return \"YES\"\n    if a[0] == a[37]:\n        return \"YES\"\n    if a[0] == a[38]:\n        return \"YES\"\n    if a[0] == a[39]:\n        return \"YES\"\n    if a[0] == a[40]:\n        return \"YES\"\n    if a[0] == a[41]:\n        return \"YES\"\n    if a[0] == a[42]:\n        return \"YES\"\n    if a[0] == a[43]:\n        return \"YES\"\n    if a[0] == a[44]:\n        return \"YES\"\n    if a[0] == a[45]:\n        return \"YES\"\n    if a[0] == a[46]:\n        return \"YES\"\n    if a[0] == a[47]:\n        return \"YES\"\n    if a[0] == a[48]:\n        return \"YES\"\n    if a[0] == a[49]:\n        return \"YES\"\n    if a[0] == a[50]:\n        return \"YES\"\n    if a[0] == a[51]:\n        return \"YES\"\n    if a[0] == a[52]:\n        return \"YES\"\n    if a[0] == a[53]:\n        return \"YES\"\n    if a[0] == a[54]:\n        return \"YES\"\n    if a[0] == a[55]:\n        return \"YES\"\n    if a[0] == a[56]:\n        return \"YES\"\n    if a[0] == a[57]:\n        return \"YES\"\n    if a[0] == a[58]:\n        return \"YES\"\n    if a[0] == a[59]:\n        return \"YES\"\n    if a[0] == a[60]:\n        return \"YES\"\n    if a[0] == a[61]:\n        return \"YES\"\n    if a[0] == a[62]:\n        return \"YES\"\n    if a[0] == a[63]:\n        return \"YES\"\n    if a[0] == a[64]:\n        return \"YES\"\n    if a[0] == a[65]:\n        return \"YES\"\n    if a[0] == a[66]:\n        return \"YES\"\n    if a[0] == a[67]:\n        return \"YES\"\n    if a[0] == a[68]:\n        return \"YES\"\n    if a[0] == a[69]:\n        return \"YES\"\n    if a[0] == a[70]:\n        return \"YES\"\n    if a[0] == a[71]:\n        return \"YES\"\n    if a[0] == a[72]:\n        return \"YES\"\n    if a[0] == a[73]:\n        return \"YES\"\n    if a[0] == a[74]:\n        return \"YES\"\n    if a[0] == a[75]:\n        return \"YES\"\n    if a[0] == a"
    },
    {
        "number": 1378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = list(map(int, stdin.split()))\n    points.sort()\n    points.append(points[0])\n    points.append(points[-1])\n    points.sort()\n    points = tuple(points)\n    return str(points)"
    },
    {
        "number": 1379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            ans += 1\n        else:\n            ans += 2\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 0\n    for i in range(n):\n        if a[i] + 1 - a[i] == k:\n            p += 1\n        elif a[i] + 1 - a[i] > k:\n            p += 1\n            a[i] -= k\n        else:\n            a[i] += k\n    return str(p)"
    },
    {
        "number": 1381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, s, p = map(int, stdin.split())\n    return str(min(k, n // s, n // p))"
    },
    {
        "number": 1382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    edges.sort(key=lambda x: x[0])\n    visited = set()\n    visited.add(edges[0][0])\n    visited.add(edges[0][1])\n    cycle = []\n    cycle.append(edges[0][0])\n    cycle.append(edges[0][1])\n    for i in range(1, m):\n        if edges[i][0] in visited:\n            cycle.append(edges[i][1])\n            visited.add(edges[i][1])\n        else:\n            visited.add(edges[i][0])\n            cycle.append(edges[i][0])\n    cycle.append(edges[m - 1][1])\n    cycle.append(edges[m - 1][0])\n    cycle.sort()\n    cycle = tuple(cycle)\n    cycle_len = len(cycle)\n    if cycle_len % 2 == 0:\n        return '0 1'\n    else:\n        return str(cycle_len // 2) +'' + str(cycle_len // 2 + 1)\n"
    },
    {
        "number": 1383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] + i > m:\n            return str(i)\n    return str(0)\n"
    },
    {
        "number": 1384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    s.sort()\n    count = 0\n    for i in range(n):\n        if s[i] == 0:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 1385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    return str(solution_naive(w, h))\n\ndef"
    },
    {
        "number": 1387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    visited = set()\n    visited.add(1)\n    for i in range(1, n):\n        visited.add(i)\n    for i in range(1, n):\n        if i not in visited:\n            visited.add(i)\n            visited.add(i + a[i])\n    if t in visited:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v, a, b = map(int, stdin.split())\n        tree[u].append((v, a, b))\n        tree[v].append((u, a, b))\n    cost = 0\n    for i in range(1, n + 1):\n        cost += i * tree[i][0][1]\n        for j in range(1, len(tree[i])):\n            cost += tree[i][j][2] * tree[tree[i][j][0]][0][1]\n    return str(cost)\n"
    },
    {
        "number": 1389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    feature = stdin.split()\n    feature_dict = {}\n    for i in range(n):\n        for j in range(m):\n            if feature[i][j] == \"W\":\n                feature_dict[(i, j)] = 1\n            else:\n                feature_dict[(i, j)] = -1\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n    # print(feature)\n    # print(n, m)\n    # print(feature_dict)\n"
    },
    {
        "number": 1390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    puzzles = list(map(int, stdin.split()))\n    puzzles.sort()\n    return str(puzzles[-1] - puzzles[0])"
    },
    {
        "number": 1391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()[1:]))\n    p = list(map(int, stdin.split()[2:]))\n    b.sort()\n    p.sort()\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    p = p[:m]\n    b = b[::-1]\n    p = p[::-1]\n    b = b[:n]\n    "
    },
    {
        "number": 1392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) >= k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    s_len = len(s)\n    t_len = len(t)\n    if s_len > t_len:\n        return \"0 0\"\n    if s_len == t_len:\n        return \"0 0\"\n    if s_len < t_len:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)\n    t_list = \"\".join(t_list)\n    if s_list == t_list:\n        return \"0 0\"\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list = \"\".join(s_list)"
    },
    {
        "number": 1394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    for i in range(len(t)):\n        if t[i] == 'a':\n            t = t[:i] + t[i+1:]\n            break\n    for i in range(len(t)):\n        if t[i] == 'b':\n            t = t[:i] + t[i+1:]\n            break\n    for i in range(len(t)):\n        if t[i] == 'c':\n            t = t[:i] + t[i+1:]\n            break\n    return t\n"
    },
    {
        "number": 1395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    if n == 18:\n        return str(17)\n    if n == 19:\n        return str(18)\n    if n == 20:\n        return str(19)\n    if n == 21:\n        return str(20)\n    if n == 22:\n        return str(21)\n    if n == 23:\n        return str(22)\n    if n == 24:\n        return str(23)\n    if n == 25:\n        return str(24)\n    if n == 26:\n        return str(25)\n    if n == 27:\n        return str(26)\n    if n == 28:\n        return str(27)\n    if n == 29:\n        return str(28)\n    if n == 30:\n        return str(29)\n    if n == 31:\n        return str(30)\n    if n == 32:\n        return str(31)\n    if n == 33:\n        return str(32)\n    if n == 34:\n        return str(33)\n    if n == 35:\n        return str(34)\n    if n == 36:\n        return str(35)\n    if n == 37:\n        return str(36)\n    if n == 38:\n        return str(37)\n    if n == 39:\n        return str(38)\n    if n == 40:\n        return str(39)\n    if n == 41:\n        return str(40)\n    if n == 42:\n        return str(41)\n    if n == 43:\n        return str(42)\n    if n == 44:\n        return str(43)\n    if n == 45:\n        return str(44)\n    if n == 46:\n        return str(45)\n    if n == 47:\n        return str(46)\n    if n == 48:\n        return str(47)\n    if n == 49:\n        return str(48)\n    if n == 50:\n        return str(49)\n    if n == 51:\n        return str(50)\n    if n == 52:\n        return str(51)\n    if n == 53:\n        return str(52)\n    if n == 54:\n        return str(53)\n    if n == 55:\n        return str(54)\n    if n == 56:\n        return str(55)\n    if n == 57:\n        return str(56)\n    if n == 58:\n        return str(57)\n    if n == 59:\n        return str(58)\n    if n == 60:\n        return str(59)\n    if n == 61:\n        return str(60)\n    if n == 62:\n        return str(61)\n    if n == 63:\n        return str(62)\n    if n == 64:\n        return str(63)\n    if n == 65:\n        return str(64)\n    if n == 66:\n        return str(65)\n    if n == 67:\n        return str(66)\n    if n == 68:\n        return str(67)\n    if n == 69:\n        return str(68)\n    if n == 70:\n        return str(69)\n    if n == 71:\n        return str(70)\n    if n == 72:\n        return str(71)\n    if n == 73:\n        return str(72)\n    if n == 74:\n        return str(73)\n    if n == 75:\n        return str(74)\n    if n == 76:\n        return str(75)\n    if n == 77:\n        return str(76)\n    if n == 78:\n        return str(77)\n    if n == 79:\n        return str(78)\n    if n == 80:\n        return str(79)\n    if n == 81:\n        return str(80)\n    if n == 82:\n        return str(81)\n    if n == 83:\n        return str(82)\n    if n == 84:\n        return str(83)\n    if n == 85:\n        return str(84)\n    if n == 86:\n        return str(85)\n    if n == 87:\n        return str(86)\n    if n == 88:\n        return str(87)\n    if n == 89:\n        return str(88)\n    if n == 90:\n        return str(89)\n    if n == 91:\n        return str(90)\n    if n == 92:\n        return str(91)\n    if n == 93:\n        return str(92)\n    if n == 94:\n        return str(93)\n    if n == 95:\n        return str(94)\n    if n == 96:\n        return str(95)\n    if n == 97:\n        return str(96)\n    if n == 98:\n        return str(97)\n    if n == 99:\n        return str(98)\n    if n == 100:\n        return str(99)\n    if n == 101:\n        return str(100)\n    if n == 102:\n        return str(101)\n    if n == 103:\n        return str(102)\n    if n == 104:\n        return str(103)\n    if n == 105:\n        return str(104)\n    if n == 106:\n        return str(105)\n    if n == 107:\n        return str(106)\n    if n == 108:\n        return str(107)\n    if n == 109:\n        return str(108)\n    if n == 110:\n        return str(109)\n    if n == 111:\n        return str(110)\n    if n == 112:\n        return str(111)\n    if n == 113:\n        return str(112)\n    if n == 114:\n        return str(113)\n    if n == 115:\n        return str(114)\n    "
    },
    {
        "number": 1396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    balls = list(map(int, stdin.split()))\n    balls.sort()\n    count = 0\n    while len(balls) > 1:\n        if balls[0] == balls[1]:\n            balls.pop(0)\n            balls.pop(0)\n            count += 1\n        else:\n            balls.pop(0)\n    return str(count)"
    },
    {
        "number": 1397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n    roads.sort()\n    cities = set()\n    for i in range(1, n + 1):\n        cities.add(i)\n    cities.remove(1)\n    cities.remove(n)\n    cities = list(cities)\n    cities.sort()\n    cities = tuple(cities)\n    cities_dict = {cities[i]: i for i in range(len(cities))}\n    cities_dict_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv = {cities[i]: i for i in range(len(cities))}\n    cities_dict_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: cities[i] for i in range(len(cities))}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv"
    },
    {
        "number": 1398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.reverse()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c.pop()\n    c"
    },
    {
        "number": 1399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in stdin.split()])\n    points = set()\n    for segment in segments:\n        points.update(segment)\n    return str(len(points))"
    },
    {
        "number": 1400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    return str(sum(t) * (t[-1] + 1) // 2)"
    },
    {
        "number": 1401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        p, c = map(int, stdin.split())\n        tree[p - 1].append(c)\n        tree[c - 1].append(p)\n    sad = []\n    for i in range(n):\n        if len(tree[i]) == 1:\n            sad.append(i)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if tree[i][0] in tree[j]:\n                sad.append(i)\n                break\n    return len(sad)\n"
    },
    {
        "number": 1402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    w = stdin.split()[2]\n    s = list(s)\n    w = list(w)\n    s.sort()\n    w.sort()\n    if s == w:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 1403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j] and a[i] <= a[j] + k:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 1404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == -1:\n        return '0'\n    if a[-1] == 200:\n        return '200'\n    dp = [[0] * (200 + 1) for _ in range(n + 1)]\n    dp[0][a[0]] = 1\n    for i in range(1, n):\n        for j in range(1, 200 + 1):\n            if j - a[i] >= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - a[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n - 1][200])\n"
    },
    {
        "number": 1405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    fib = 0\n    fib_len = 0\n    for i in range(n):\n        if fib == a[i]:\n            fib_len += 1\n        else:\n            fib = a[i]\n            fib_len = 1\n        if fib_len > fib:\n            fib = fib_len\n            fib_len = 0\n    return str(fib)"
    },
    {
        "number": 1406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    if n < k or d < 1 or n < d:\n        return -1\n    buses = [[] for _ in range(k)]\n    for i in range(n):\n        buses[i % k].append(i)\n    for i in range(d):\n        for j in range(n):\n            if len(buses[j % k]) == 0:\n                continue\n            if len(buses[j % k]) == 1:\n                buses[j % k].pop()\n            else:\n                buses[j % k].pop(0)\n                buses[j % k].pop()\n    if len(buses) == 0:\n        return -1\n    return '\\n'.join(map(str, buses))\n"
    },
    {
        "number": 1407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                for k in range(1, matrix[i][j]):\n                    matrix[i][j] += k\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 2:\n                return \"0\"\n    return str(min(min(x) for x in matrix))\n"
    },
    {
        "number": 1408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = []\n    w = []\n    for i in range(n):\n        t.append(int(stdin.split()[i]))\n        w.append(int(stdin.split()[i+1]))\n    t.sort()\n    w.sort()\n    t_sum = 0\n    w_sum = 0\n    for i in range(n):\n        t_sum += t[i]\n        w_sum += w[i]\n    if t_sum > w_sum:\n        return str(t_sum)\n    else:\n        return str(w_sum)"
    },
    {
        "number": 1409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    people.sort()\n    count = 0\n    for i in range(n):\n        if people[i] == 0:\n            continue\n        if people[i] == 1:\n            count += 1\n        else:\n            count += 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 1410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c1 = list(map(int, stdin.split()[1].split()))\n    c2 = list(map(int, stdin.split()[2].split()))\n    c3 = list(map(int, stdin.split()[3].split()))\n    edges = []\n    for i in range(n - 1):\n        edges.append((i, i + 1))\n    edges.append((n - 1, 0))\n    costs = []\n    for i in range(n):\n        costs.append(c1[i] + c2[i] + c3[i])\n    costs.sort()\n    costs.reverse()\n    for i in range(n - 1):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1\n    for i in range(n):\n        if costs[i] == costs[i + 1]:\n            return -1"
    },
    {
        "number": 1411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    happiness = []\n    for i in range(N):\n        happiness.append(list(map(int, stdin.split())))\n    happiness = sorted(happiness, key=lambda x: x[0] + x[1] + x[2])\n    print(happiness)\n    return str(sum([x[0] + x[1] + x[2] for x in happiness]))\n"
    },
    {
        "number": 1412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coupons = []\n    for i in range(n):\n        coupons.append(list(map(int, stdin.split())))\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key="
    },
    {
        "number": 1413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 1414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = stdin.split()\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:\n        return \"Poor Dima!\"\n    if n == 1 and m > 1:\n        return \"Poor Inna!\"\n    if n > 1 and m == 1:\n        return \"Poor Dima!\"\n    if n > 1 and m > 1:\n        return \"Poor Inna!\"\n    if n == 1 and m == 1:"
    },
    {
        "number": 1415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x_0, y_0 = map(int, stdin.split())\n    x_max = x\n    y_max = y\n    x_min = x_0\n    y_min = y_0\n    x_step = 0\n    y_step = 0\n    x_coord = x_0\n    y_coord = y_0\n    x_coord_list = []\n    y_coord_list = []\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)\n    x_coord_list.append(x_0)\n    y_coord_list.append(y_0)"
    },
    {
        "number": 1416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(max(sum(a[i] * 2 for i in range(n)) - sum(a[i] for i in range(n)), sum(a[i] * 2 for i in range(n)) - sum(a[i] for i in range(n))))\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(permutations(range(1, n+1), n))))"
    },
    {
        "number": 1418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(2, n):\n        if gcd(i, n) == 1:\n            a.append(i)\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 1419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin.replace(' ', '.').replace('-', '.').split('.')[0])"
    },
    {
        "number": 1420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    for i in range(n):\n        d = max(d, abs(a[i] - a[i - 1]))\n    return str(d)"
    },
    {
        "number": 1421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    gifts = []\n    for i in range(n):\n        gifts.append((i, a[i]))\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1])\n    gifts.sort(key=lambda x: x[0])\n    gifts.sort(key=lambda x: x[1"
    },
    {
        "number": 1422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weights = stdin.split()\n    weights = list(map(int, weights))\n    weights = sorted(weights)\n    weights = list(map(str, weights))\n    weights =''.join(weights)\n    print(weights)\n    return weights"
    },
    {
        "number": 1423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] - p[i])\n    c.sort()\n    if c == p:\n        return''.join(map(str, p))\n    else:\n        return '-1'"
    },
    {
        "number": 1424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(count_friends(n, m, k))\n\n\ndef"
    },
    {
        "number": 1425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        if a[0] < a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] < a[1] + a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] < a[1] + a[2] + a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] < a[1] + a[2] + a[3] + a[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 20:\n        if a[0] < a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] +"
    },
    {
        "number": 1426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(1)\n    stack = [1]\n    while stack:\n        node = stack.pop()\n        for nei in graph[node]:\n            if nei not in visited:\n                visited.add(nei)\n                stack.append(nei)\n    if len(visited) == n:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 1427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            b.append(a[i] * a[j])\n    return str(min(b))"
    },
    {
        "number": 1428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    d = {}\n    for i in range(n):\n        for j in range(n):\n            d[(i, j)] = int(stdin.split()[i * n + j])\n    cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if d[(i, j)] == 0:\n                continue\n            if (i + j) % 3 == (d[(i, j)] + d[(i + j, j)]) % 3:\n                cnt += d[(i, j)]\n            else:\n                cnt += d[(i, j)] + d[(i + j, j)]\n    return str(cnt)\n"
    },
    {
        "number": 1429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and s[i]!= s[j - 1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin.strip()\n    return str(max(len(S) - K + 1, 0))"
    },
    {
        "number": 1431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 1\"\n    if n == 3:\n        return \"1 1 1\"\n    if n == 4:\n        return \"1 1 1 1\"\n    if n == 5:\n        return \"1 1 1 1 1\"\n    if n == 6:\n        return \"1 1 1 1 1 1\"\n    if n == 7:\n        return \"1 1 1 1 1 1 1\"\n    if n == 8:\n        return \"1 1 1 1 1 1 1 1\"\n    if n == 9:\n        return \"1 1 1 1 1 1 1 1 1\"\n    if n == 10:\n        return \"1 1 1 1 1 1 1 1 1 1\"\n    if n == 11:\n        return \"1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 12:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 13:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 14:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 15:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 16:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 17:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 18:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 19:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 20:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 21:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 22:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 23:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 24:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 25:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 26:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 27:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 28:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 29:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 30:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 31:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 32:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 33:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 34:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 35:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 36:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 37:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 38:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 39:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 40:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 41:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 42:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 43:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 44:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 45:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    a.sort()\n    a.reverse()\n    res = []\n    for i in range(n):\n        res.append(a[i] * (i + 1))\n    return''.join(map(str, res))"
    },
    {
        "number": 1433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plan = [list(map(int, stdin.split())) for _ in range(n)]\n    good_positions = 0\n    for i in range(n):\n        for j in range(m):\n            if plan[i][j] == 1:\n                if (i == 0 or i == n - 1) and (j == 0 or j == m - 1):\n                    good_positions += 1\n                elif (i == 0 or i == n - 1) and (j == 1 or j == m - 2):\n                    good_positions += 1\n                elif (i == 1 or i == n - 2) and (j == 0 or j == m - 1):\n                    good_positions += 1\n                elif (i == 1 or i == n - 2) and (j == 1 or j == m - 2):\n                    good_positions += 1\n                elif (i == 2 or i == n - 3) and (j == 0 or j == m - 1):\n                    good_positions += 1\n                elif (i == 2 or i == n - 3) and (j == 1 or j == m - 2):\n                    good_positions += 1\n                elif (i == 3 or i == n - 4) and (j == 0 or j == m - 1):\n                    good_positions += 1\n                elif (i == 3 or i == n - 4) and (j == 1 or j == m - 2):\n                    good_positions += 1\n    return str(good_positions)"
    },
    {
        "number": 1434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    degree = [0] * n\n    s = [0] * n\n    for i in range(n):\n        degree[i], s[i] = map(int, stdin.split())\n    degree.sort()\n    s.sort()\n    m = 0\n    for i in range(n):\n        if degree[i]!= s[i]:\n            m += 1\n            print(degree[i], s[i])\n    return str(m)"
    },
    {
        "number": 1435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10:\n        return 0\n    if a < 100:\n        return 1\n    if a < 1000:\n        return 2\n    if a < 10000:\n        return 3\n    if a < 100000:\n        return 4\n    if a < 1000000:\n        return 5\n    if a < 10000000:\n        return 6\n    if a < 100000000:\n        return 7\n    if a < 1000000000:\n        return 8\n    if a < 10000000000:\n        return 9\n    return 10"
    },
    {
        "number": 1436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    recruit = list(map(int, stdin.split()))\n    recruit.sort()\n    count = 0\n    for i in range(n):\n        if recruit[i] == -1:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 1437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(' ', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('&', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('/', '')\n    s = s.replace('>', '')\n    s = s.replace('<', '')\n    s = s.replace('~', '')\n    s = s.replace('%', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('^', '')\n    s = s.replace('`', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('/', '')\n    s = s.replace('>', '')\n    s = s.replace('<', '')\n    s = s.replace('~', '')\n    s = s.replace('%', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('^', '')\n    s = s.replace('`', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('/', '')\n    s = s.replace('>', '')\n    s = s.replace('<', '')\n    s = s.replace('~', '')\n    s = s.replace('%', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('^', '')\n    s = s.replace('`', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('/', '')\n    s = s.replace('>', '')\n    s = s.replace('<', '')\n    s = s.replace('~', '')\n    s = s.replace('%', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('^', '')\n    s = s.replace('`', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('/', '')\n    s = s.replace('>', '')\n    s = s.replace('<', '')\n    s = s.replace('~', '')\n    s = s.replace('%', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('^', '')\n    s = s.replace('`', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('/', '')\n    s = s.replace('>', '')\n    s = s.replace('<', '')\n    s = s.replace('~', '')\n    s = s.replace('%', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('^', '')\n    s"
    },
    {
        "number": 1438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(n):\n        res += a[i] * b[i]\n    return str(res)"
    },
    {
        "number": 1439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if sum(a[:i]) % m!= 0:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 1440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] > res:\n                    res = a[i] + a[j] + a[k]\n    return str(res)\n"
    },
    {
        "number": 1441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    balls = list(map(int, stdin.split()[1:]))\n    # print(n, balls)\n    # print(balls)\n    # print(len(balls))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    # print(len(set(balls)))\n    "
    },
    {
        "number": 1442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    orders = []\n    for _ in range(n):\n        orders.append(stdin.split())\n    orders.sort(key=lambda x: (x[1], x[0]))\n    print(orders)\n    return stdin"
    },
    {
        "number": 1443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1]))\n    s = stdin.split()[2]\n    l.sort()\n    if s == \"G\":\n        return l[n-1]\n    elif s == \"W\":\n        return l[0]\n    elif s == \"L\":\n        return l[n-1] + l[0]"
    },
    {
        "number": 1444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    k = int(stdin)\n    x.sort()\n    ans = []\n    for i in range(n):\n        ans.append(i)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(x[i] - x[j]) <= k:\n                ans[i] = j\n                break\n    return''.join(map(str, ans))"
    },
    {
        "number": 1445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] = a[n - i - 1]\n    return''.join(map(str, a))"
    },
    {
        "number": 1446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    d = [[-1] * k for _ in range(k)]\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                d[i][j] = 0\n            else:\n                d[i][j] = float('inf')\n    for i in range(k):\n        for j in range(i + 1, k):\n            for u in range(n):\n                for v in range(n):\n                    if u == v:\n                        continue\n                    for x in range(n):\n                        if u == x or v == x:\n                            continue\n                        if d[i][j] > d[i][u] + d[u][j] + c[i] * c[j] * c[u] * c[v] + c[i] * c[j] * c[v] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] + c[i] * c[j] * c[x] +"
    },
    {
        "number": 1447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(1 - (1 - (1 / 3) ** m) ** n)\n"
    },
    {
        "number": 1448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    m = int(stdin)\n    cornfield = []\n    for i in range(n):\n        cornfield.append([0] * n)\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        cornfield[x - 1][y - 1] = 1\n    for i in range(n):\n        for j in range(n):\n            if cornfield[i][j] == 1:\n                if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 1449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        b = []\n        for j in range(n):\n            b.append(a[j] + a[j + 1] + a[j + 2] + a[j + 3])\n        m = 1\n        while m < n:\n            if b[m] == 0:\n                m += 1\n            else:\n                break\n        if m == n:\n            print(-1)\n        else:\n            print(m)\n    return \"\"\n"
    },
    {
        "number": 1450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s == \"01\":\n            s = \"10\"\n        elif s == \"10\":\n            s = \"01\"\n        elif s == \"11\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"11\"\n        elif s == \"12\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"01\":\n            s = \"01\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"02\":\n            s = \"02\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"21\":\n            s = \"21\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"12\":\n            s = \"12\"\n        elif s == \"20\":\n            s = \"20\"\n        elif s == \"20"
    },
    {
        "number": 1451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(1 for i in range(n) if len(str(i)) == k))"
    },
    {
        "number": 1452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    r = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    return str(solution_naive(h, w, r, c))\n\ndef"
    },
    {
        "number": 1453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (i + 1)\n    return str(ans)"
    },
    {
        "number": 1454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                for k in range(j, m):\n                    if a[i][k] > a[i][j]:\n                        a[i][j], a[i][k] = a[i][k], a[i][j]\n                        break\n                for k in range(j, -1, -1):\n                    if a[i][k] > a[i][j]:\n                        a[i][j], a[i][k] = a[i][k], a[i][j]\n                        break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                return '-1'\n    return str(sum(sum(x) for x in a))\n"
    },
    {
        "number": 1455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m < n:\n        m += 1\n    return str(m)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [['.'] * (n + 2) for _ in range(n + 2)]\n    for i in range(n):\n        for j in range(n):\n            board[i + 1][j + 1] = stdin[i * n + j]\n    return 'YES' if find_moves(board) else 'NO'\n\n\ndef"
    },
    {
        "number": 1457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    phone = stdin[1]\n    ai = stdin[0]\n    phone_len = len(phone)\n    ai_len = len(ai)\n    if phone_len > ai_len:\n        return ai_len\n    elif phone_len < ai_len:\n        return phone_len\n    else:\n        for i in range(phone_len):\n            if phone[i]!= ai[i]:\n                return i\n        return phone_len"
    },
    {
        "number": 1458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    if len(s) < 2:\n        return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s[i + 1]:\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i] == s[i - 1] and s[i] == s["
    },
    {
        "number": 1459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    s = int(stdin.split()[2])\n    t = int(stdin.split()[3])\n    d.sort()\n    d.append(d[-1] + 100)\n    d.insert(0, d[0] - 100)\n    d.sort()\n    print(d)\n    print(d[s - 1] - d[t - 1])\n    return str(d[s - 1] - d[t - 1])\n"
    },
    {
        "number": 1460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    else:\n        return str(n // 2) + \" \" + str(n // 2)\n"
    },
    {
        "number": 1461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    s = [0] * n\n    m = [0] * n\n    for i in range(n):\n        s[i] = sum(w[f[i]:f[i] + k])\n        m[i] = min(w[f[i]:f[i] + k])\n    return '\\n'.join(map(str, s)) + '\\n' + '\\n'.join(map(str, m))\n"
    },
    {
        "number": 1462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = stdin.split()\n    coins = 0\n    for i in range(k):\n        for j in range(n):\n            if cards[j] == cards[i]:\n                coins += 1\n    return str(coins)"
    },
    {
        "number": 1463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= 1:\n                for k in range(n):\n                    if grid[i][k] == grid[i][j] and k!= j:\n                        return \"No\"\n                for k in range(n):\n                    if grid[k][j] == grid[i][j] and k!= i:\n                        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 1464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    titles = stdin.split()\n    titles.sort(key=lambda x: x[0])\n    for i in range(len(titles)):\n        if i == 0:\n            continue\n        if titles[i][0] == titles[i - 1][0]:\n            continue\n        else:\n            return titles[i][0]\n    return titles[0][0]\n"
    },
    {
        "number": 1465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(-1)\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str(n) +'' + str(n)\n    if k == 3:\n        return str(n) +'' + str(n) +'' + str(n)\n    if k == 4:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 5:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 6:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 7:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 8:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 9:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 10:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 11:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 12:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 13:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 14:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 15:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 16:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if k == 17:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)"
    },
    {
        "number": 1466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    good_vertices = 0\n    for i in range(n):\n        good_vertices += 1 if dfs(i, graph, k) else 0\n    return str(good_vertices)\n\n\ndef"
    },
    {
        "number": 1467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(-1)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(3)\n    if n == 6:\n        return str(3)\n    if n == 7:\n        return str(3)\n    if n == 8:\n        return str(3)\n    if n == 9:\n        return str(3)\n    if n == 10:\n        return str(3)\n    if n == 11:\n        return str(3)\n    if n == 12:\n        return str(3)\n    if n == 13:\n        return str(3)\n    if n == 14:\n        return str(3)\n    if n == 15:\n        return str(3)\n    if n == 16:\n        return str(3)\n    if n == 17:\n        return str(3)\n    if n == 18:\n        return str(3)\n    if n == 19:\n        return str(3)\n    if n == 20:\n        return str(3)\n    if n == 21:\n        return str(3)\n    if n == 22:\n        return str(3)\n    if n == 23:\n        return str(3)\n    if n == 24:\n        return str(3)\n    if n == 25:\n        return str(3)\n    if n == 26:\n        return str(3)\n    if n == 27:\n        return str(3)\n    if n == 28:\n        return str(3)\n    if n == 29:\n        return str(3)\n    if n == 30:\n        return str(3)\n    if n == 31:\n        return str(3)\n    if n == 32:\n        return str(3)\n    if n == 33:\n        return str(3)\n    if n == 34:\n        return str(3)\n    if n == 35:\n        return str(3)\n    if n == 36:\n        return str(3)\n    if n == 37:\n        return str(3)\n    if n == 38:\n        return str(3)\n    if n == 39:\n        return str(3)\n    if n == 40:\n        return str(3)\n    if n == 41:\n        return str(3)\n    if n == 42:\n        return str(3)\n    if n == 43:\n        return str(3)\n    if n == 44:\n        return str(3)\n    if n == 45:\n        return str(3)\n    if n == 46:\n        return str(3)\n    if n == 47:\n        return str(3)\n    if n == 48:\n        return str(3)\n    if n == 49:\n        return str(3)\n    if n == 50:\n        return str(3)\n    if n == 51:\n        return str(3)\n    if n == 52:\n        return str(3)\n    if n == 53:\n        return str(3)\n    if n == 54:\n        return str(3)\n    if n == 55:\n        return str(3)\n    if n == 56:\n        return str(3)\n    if n == 57:\n        return str(3)\n    if n == 58:\n        return str(3)\n    if n == 59:\n        return str(3)\n    if n == 60:\n        return str(3)\n    if n == 61:\n        return str(3)\n    if n == 62:\n        return str(3)\n    if n == 63:\n        return str(3)\n    if n == 64:\n        return str(3)\n    if n == 65:\n        return str(3)\n    if n == 66:\n        return str(3)\n    if n == 67:\n        return str(3)\n    if n == 68:\n        return str(3)\n    if n == 69:\n        return str(3)\n    if n == 70:\n        return str(3)\n    if n == 71:\n        return str(3)\n    if n == 72:\n        return str(3)\n    if n == 73:\n        return str(3)\n    if n == 74:\n        return str(3)\n    if n == 75:\n        return str(3)\n    if n == 76:\n        return str(3)\n    if n == 77:\n        return str(3)\n    if n == 78:\n        return str(3)\n    if n == 79:\n        return str(3)\n    if n == 80:\n        return str(3)\n    if n == 81:\n        return str(3)\n    if n == 82:\n        return str(3)\n    if n == 83:\n        return str(3)\n    if n == 84:\n        return str(3)\n    if n == 85:\n        return str(3)\n    if n == 86:\n        return str(3)\n    if n == 87:\n        return str(3)\n    if n == 88:\n        return str(3)\n    if n == 89:\n        return str(3)\n    "
    },
    {
        "number": 1468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hashtags = stdin.split()\n    hashtags.sort()\n    for i in range(n):\n        if i == 0:\n            print(hashtags[i])\n        elif hashtags[i] == hashtags[i-1]:\n            continue\n        else:\n            print(hashtags[i][1:])\n    return\n\nsolution(input())\n"
    },
    {
        "number": 1469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    return str(n) + \" \" + str(m) + \"\\n\" + \" \".join(\n        map(lambda x: str(x[0]) + \" \" + str(x[1]),\n            sorted(\n                sorted(\n                    sorted(\n                        sorted(\n                            sorted(\n                                sorted(\n                                    sorted(\n                                        sorted(\n                                            sorted(\n                                                sorted(\n                                                    sorted(\n                                                        sorted(\n                                                            sorted(\n                                                                sorted(\n                                                                    sorted(\n                                                                        sorted(\n                                                                            sorted(\n                                                                                sorted(\n                                                                                    sorted(\n                                                                                        sorted(\n                                                                                            sorted(\n                                                                                                sorted(\n                                                                                                    sorted(\n                                                                                                        sorted(\n                                                                                                            sorted(\n                                                                                                                sorted(\n                                                                                                                    sorted(\n                                                                                                                        sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                                                                                                                           sorted(\n                               "
    },
    {
        "number": 1470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1 or x > 10**15:\n        raise ValueError\n    \n    # 1. Rotate the die 90\u00b0 toward left\n    # 2. Get y points where y is the number written in the side facing upward\n    # 3. Rotate the die 90\u00b0 toward right\n    # 4. Get y points where y is the number written in the side facing upward\n    # 5. Rotate the die 90\u00b0 toward front\n    # 6. Get y points where y is the number written in the side facing upward\n    # 7. Rotate the die 90\u00b0 toward back\n    # 8. Get y points where y is the number written in the side facing upward\n    # 9. Rotate the die 90\u00b0 toward left\n    # 10. Get y points where y is the number written in the side facing upward\n    # 11. Rotate the die 90\u00b0 toward right\n    # 12. Get y points where y is the number written in the side facing upward\n    # 13. Rotate the die 90\u00b0 toward front\n    # 14. Get y points where y is the number written in the side facing upward\n    # 15. Rotate the die 90\u00b0 toward back\n    # 16. Get y points where y is the number written in the side facing upward\n    # 17. Rotate the die 90\u00b0 toward left\n    # 18. Get y points where y is the number written in the side facing upward\n    # 19. Rotate the die 90\u00b0 toward right\n    # 20. Get y points where y is the number written in the side facing upward\n    # 21. Rotate the die 90\u00b0 toward front\n    # 22. Get y points where y is the number written in the side facing upward\n    # 23. Rotate the die 90\u00b0 toward back\n    # 24. Get y points where y is the number written in the side facing upward\n    # 25. Rotate the die 90\u00b0 toward left\n    # 26. Get y points where y is the number written in the side facing upward\n    # 27. Rotate the die 90\u00b0 toward right\n    # 28. Get y points where y is the number written in the side facing upward\n    # 29. Rotate the die 90\u00b0 toward front\n    # 30. Get y points where y is the number written in the side facing upward\n    # 31. Rotate the die 90\u00b0 toward back\n    # 32. Get y points where y is the number written in the side facing upward\n    # 33. Rotate the die 90\u00b0 toward left\n    # 34. Get y points where y is the number written in the side facing upward\n    # 35. Rotate the die 90\u00b0 toward right\n    # 36. Get y points where y is the number written in the side facing upward\n    # 37. Rotate the die 90\u00b0 toward front\n    # 38. Get y points where y is the number written in the side facing upward\n    # 39. Rotate the die 90\u00b0 toward back\n    # 40. Get y points where y is the number written in the side facing upward\n    # 41. Rotate the die 90\u00b0 toward left\n    # 42. Get y points where y is the number written in the side facing upward\n    # 43. Rotate the die 90\u00b0 toward right\n    # 44. Get y points where y is the number written in the side facing upward\n    # 45. Rotate the die 90\u00b0 toward front\n    # 46. Get y points where y is the number written in the side facing upward\n    # 47. Rotate the die 90\u00b0 toward back\n    # 48. Get y points where y is the number written in the side facing upward\n    # 49. Rotate the die 90\u00b0 toward left\n    # 50. Get y points where y is the number written in the side facing upward\n    # 51. Rotate the die 90\u00b0 toward right\n    # 52. Get y points where y is the number written in the side facing upward\n    # 53. Rotate the die 90\u00b0 toward front\n    # 54. Get y points where y is the number written in the side facing upward\n    # 55. Rotate the die 90\u00b0 toward back\n    # 56. Get y points where y is the number written in the side facing upward\n    # 57. Rotate the die 90\u00b0 toward left\n    # 58. Get y points where y is the number written in the side facing upward\n    # 59. Rotate the die 90\u00b0 toward right\n    # 60. Get y points where y is the number written in the side facing upward\n    # 61. Rotate the die 90\u00b0 toward front\n    # 62. Get y points where y is the number written in the side facing upward\n    # 63. Rotate the die 90\u00b0 toward back\n    # 64. Get y points where y is the number written in the side facing upward\n    # 65. Rotate the die 90\u00b0 toward left\n    # 66. Get y points where y is the number written in the side facing upward\n    # 67. Rotate the die 90\u00b0 toward right\n    # 68. Get y points where y is the number written in the side facing upward\n    # 69. Rotate the die 90\u00b0 toward front\n    # 70. Get y points where y is the number written in the side facing upward\n    # 71. Rotate the die 90\u00b0 toward back\n    # 72. Get y points where y is the number written in the side facing upward\n    # 73. Rotate the die 90\u00b0 toward left\n    # 74. Get y points where y is the number written in the side facing upward\n    # 75. Rotate the die 90\u00b0 toward right\n    # 76. Get y points where y is the number written in the side facing upward\n    # 77. Rotate the die 90\u00b0 toward front\n    # 78. Get y points where y is the number written in the side facing upward\n    # 79. Rotate the die 90\u00b0 toward back\n    # 80. Get y points where y is the number written in the side facing upward\n    # 81. Rotate the die 90\u00b0 toward left\n    # 82. Get y points where y is the number written in the side facing upward\n    # 83. Rotate the die 90\u00b0 toward right\n    # 84. Get y points where y is the number written in the side facing upward\n    # 85. Rotate the die 90\u00b0 toward front\n    # 86. Get y points where y is the number written in the side facing upward\n    # 87. Rotate the die 90\u00b0 toward back\n    # 88. Get y points where y is the number written in the side facing upward\n    # 89. Rotate the die 90\u00b0 toward left\n    # 90. Get y points where y is the number written in the side facing upward\n    # 91. Rotate the die 90\u00b0 toward right\n    # 92. Get y points where y is the number written in the side facing upward\n    # 93. Rotate the die 90\u00b0 toward front\n    # 94. Get y points where y is the number written in the side facing upward\n    # 95. Rotate the die 90\u00b0 toward back\n    # 96. Get y points where y is the number written in the side facing upward\n    # 97. Rotate the die 90\u00b0 toward left\n    # 98. Get y points where y is the number written in the side facing upward\n    # 99. Rotate the die 90\u00b0 toward right\n    # 100. Get y points where y is the number written in the side facing upward\n    # 101. Rotate the die 90\u00b0 toward front\n    # 102. Get y points where y is the number written in the side facing upward\n    # 103. Rotate the die 90\u00b0 toward back\n    # 104. Get y points where y is the number written in the side facing upward\n    # 105. Rotate the die 90\u00b0 toward left\n    # 106. Get y"
    },
    {
        "number": 1471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    graph = [[] for _ in range(N)]\n    for i in range(N - 1):\n        u, v, w = map(int, stdin.split())\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n    coloring = [0] * N\n    for i in range(N):\n        coloring[i] = 1\n        for j in range(N):\n            if coloring[j] == 1:\n                continue\n            for v, w in graph[j]:\n                if coloring[v] == coloring[j]:\n                    coloring[j] = 0\n                    break\n    for i in range(N):\n        print(coloring[i])\n    return '\\n'.join(map(str, coloring))\n"
    },
    {
        "number": 1472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split()\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, input().split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    distances = {}\n    for i in range(n):\n        distances[i] = 0\n    distances[x - 1] = 1\n    distances[y - 1] = 1\n    queue = deque([x - 1])\n    while queue:\n        current = queue.popleft()\n        for neighbor in graph[current]:\n            if neighbor not in distances:\n                distances[neighbor] = distances[current] + 1\n                queue.append(neighbor)\n    return str(distances[y - 1] - distances[x - 1])\n"
    },
    {
        "number": 1473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    queue = []\n    for i in range(n):\n        queue.append(list(map(int, stdin.split())))\n    queue.sort(key=lambda x: x[0])\n    queue.sort(key=lambda x: x[1])\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x[0], x[1]] for x in queue]\n    queue = [[x["
    },
    {
        "number": 1474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.append(0)\n    h.insert(0, 0)\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h"
    },
    {
        "number": 1475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, k, x = map(int, stdin.split())\n    if n == 1:\n        return str(k % x)\n    if n == 2:\n        return str(k % x)\n    if n == 3:\n        return str(k % x)\n    if n == 4:\n        return str(k % x)\n    if n == 5:\n        return str(k % x)\n    if n == 6:\n        return str(k % x)\n    if n == 7:\n        return str(k % x)\n    if n == 8:\n        return str(k % x)\n    if n == 9:\n        return str(k % x)\n    if n == 10:\n        return str(k % x)\n    if n == 11:\n        return str(k % x)\n    if n == 12:\n        return str(k % x)\n    if n == 13:\n        return str(k % x)\n    if n == 14:\n        return str(k % x)\n    if n == 15:\n        return str(k % x)\n    if n == 16:\n        return str(k % x)\n    if n == 17:\n        return str(k % x)\n    if n == 18:\n        return str(k % x)\n    if n == 19:\n        return str(k % x)\n    if n == 20:\n        return str(k % x)\n    if n == 21:\n        return str(k % x)\n    if n == 22:\n        return str(k % x)\n    if n == 23:\n        return str(k % x)\n    if n == 24:\n        return str(k % x)\n    if n == 25:\n        return str(k % x)\n    if n == 26:\n        return str(k % x)\n    if n == 27:\n        return str(k % x)\n    if n == 28:\n        return str(k % x)\n    if n == 29:\n        return str(k % x)\n    if n == 30:\n        return str(k % x)\n    if n == 31:\n        return str(k % x)\n    if n == 32:\n        return str(k % x)\n    if n == 33:\n        return str(k % x)\n    if n == 34:\n        return str(k % x)\n    if n == 35:\n        return str(k % x)\n    if n == 36:\n        return str(k % x)\n    if n == 37:\n        return str(k % x)\n    if n == 38:\n        return str(k % x)\n    if n == 39:\n        return str(k % x)\n    if n == 40:\n        return str(k % x)\n    if n == 41:\n        return str(k % x)\n    if n == 42:\n        return str(k % x)\n    if n == 43:\n        return str(k % x)\n    if n == 44:\n        return str(k % x)\n    if n == 45:\n        return str(k % x)\n    if n == 46:\n        return str(k % x)\n    if n == 47:\n        return str(k % x)\n    if n == 48:\n        return str(k % x)\n    if n == 49:\n        return str(k % x)\n    if n == 50:\n        return str(k % x)\n    if n == 51:\n        return str(k % x)\n    if n == 52:\n        return str(k % x)\n    if n == 53:\n        return str(k % x)\n    if n == 54:\n        return str(k % x)\n    if n == 55:\n        return str(k % x)\n    if n == 56:\n        return str(k % x)\n    if n == 57:\n        return str(k % x)\n    if n == 58:\n        return str(k % x)\n    if n == 59:\n        return str(k % x)\n    if n == 60:\n        return str(k % x)\n    if n == 61:\n        return str(k % x)\n    if n == 62:\n        return str(k % x)\n    if n == 63:\n        return str(k % x)\n    if n == 64:\n        return str(k % x)\n    if n == 65:\n        return str(k % x)\n    if n == 66:\n        return str(k % x)\n    if n == 67:\n        return str(k % x)\n    if n == 68:\n        return str(k % x)\n    if n == 69:\n        return str(k % x)\n    if n == 70:\n        return str(k % x)\n    if n == 71:\n        return str(k % x)\n    if n == 72:\n        return str(k % x)\n    if n == 73:\n        return str(k % x)\n    if n == 74:\n        return str(k % x)\n    if n == 75:\n        return str(k % x)\n    if n == 76:\n        return str(k % x)\n    if n == 77:\n        return str(k % x)\n    if n == 78:\n        return str(k % x)\n    if n == 79:\n        return str(k % x)\n    if n == 80:\n        return str(k % x)\n    if n == 81:\n        return str(k % x)\n    if n == 82:\n        return str(k % x)\n    if n == 83:\n        return str(k % x)\n    if n == 84:\n        return str(k % x)\n    if n == 85:\n        return str(k % x)\n    if n == 86:\n        return str(k % x)\n    if n == 87:\n        return str(k % x)\n    if n == 88:\n        return str(k % x)\n    if n == 89:\n        return str(k % x)\n    if n == 90:\n        return str(k % x)\n    if n == 91:\n        return str(k % x)\n    if n == 92:\n        return str(k % x)\n    if n == 93:\n        return str(k % x)\n    if n == 94:\n        return str(k % x)\n    if n == 95:\n        return str(k % x)\n    if n == 96:\n        return str(k % x)\n    if n == 97"
    },
    {
        "number": 1476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in range(1, n):\n        if a[i] - a[i - 1]!= 1:\n            k += 1\n            a[i - 1] = a[i]\n    return str(k) + '\\n' +''.join(map(str, a))\n"
    },
    {
        "number": 1477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        a -= 1\n        b -= 1\n        edges[a].append(b)\n        edges[b].append(a)\n    visited = [False] * n\n    calls = 0\n    for i in range(n):\n        if not visited[i]:\n            calls += 1\n            visited[i] = True\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for nei in edges[node]:\n                    if not visited[nei]:\n                        visited[nei] = True\n                        stack.append(nei)\n    return str(calls)\n"
    },
    {
        "number": 1478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    comments = stdin.split(',')\n    comments = [comment.split(' ') for comment in comments]\n    comments = [[int(comment[0])] + comment[1:] for comment in comments]\n    comments = sorted(comments, key=lambda comment: comment[0])\n    comments = sorted(comments, key=lambda comment: len(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join(comment[1:]))\n    comments = sorted(comments, key=lambda comment: ','.join("
    },
    {
        "number": 1479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    field = stdin.split()\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n    field = [[c for c in line] for line in field]\n"
    },
    {
        "number": 1480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    leader = a[0]\n    count = 1\n    for i in range(1, k):\n        if a[i] == leader:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 1481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = stdin.split()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'x':\n                if (i == 0 or i == n - 1) or (j == 0 or j == n - 1):\n                    if (board[i + 1][j] == 'x' or board[i - 1][j] == 'x' or board[i][j + 1] == 'x' or board[i][j - 1] == 'x'):\n                        return 'NO'\n                else:\n                    if (board[i + 1][j] == 'x' or board[i - 1][j] == 'x' or board[i][j + 1] == 'x' or board[i][j - 1] == 'x'):\n                        return 'NO'\n    return 'YES'"
    },
    {
        "number": 1482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(*a)\n    return"
    },
    {
        "number": 1483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    for i in range(n):\n        if p[i] == i+1:\n            print(i+1, i+2)\n            break\n    return ''"
    },
    {
        "number": 1484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        if a[i] == -1:\n            for j in range(i + 1, n):\n                if a[j] == -1:\n                    for k in range(j + 1, n):\n                        if a[k] == -1:\n                            good += 1\n                            break\n    return str(good % 998244353)\n"
    },
    {
        "number": 1485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][1] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j - a[i - 1] >= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][m])\n"
    },
    {
        "number": 1486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    min_cost = 0\n    max_cost = 0\n    for i in range(n):\n        min_cost = min(min_cost, cities[i] + min(cities[i + 1:n]))\n        max_cost = max(max_cost, cities[i] + max(cities[i + 1:n]))\n    return str(min_cost) + \" \" + str(max_cost)\n"
    },
    {
        "number": 1487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    n = len(s)\n    if n!= len(t):\n        return \"impossible\"\n    if n == 0:\n        return \"impossible\"\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        if s == t:\n            return \"00\"\n        else:\n            return \"impossible\"\n    if n == 3:\n        if s == t:\n            return \"000\"\n        else:\n            return \"impossible\"\n    if n == 4:\n        if s == t:\n            return \"0000\"\n        else:\n            return \"impossible\"\n    if n == 5:\n        if s == t:\n            return \"00000\"\n        else:\n            return \"impossible\"\n    if n == 6:\n        if s == t:\n            return \"000000\"\n        else:\n            return \"impossible\"\n    if n == 7:\n        if s == t:\n            return \"0000000\"\n        else:\n            return \"impossible\"\n    if n == 8:\n        if s == t:\n            return \"00000000\"\n        else:\n            return \"impossible\"\n    if n == 9:\n        if s == t:\n            return \"000000000\"\n        else:\n            return \"impossible\"\n    if n == 10:\n        if s == t:\n            return \"0000000000\"\n        else:\n            return \"impossible\"\n    if n == 11:\n        if s == t:\n            return \"00000000000\"\n        else:\n            return \"impossible\"\n    if n == 12:\n        if s == t:\n            return \"000000000000\"\n        else:\n            return \"impossible\"\n    if n == 13:\n        if s == t:\n            return \"0000000000000\"\n        else:\n            return \"impossible\"\n    if n == 14:\n        if s == t:\n            return \"00000000000000\"\n        else:\n            return \"impossible\"\n    if n == 15:\n        if s == t:\n            return \"000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 16:\n        if s == t:\n            return \"00000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 17:\n        if s == t:\n            return \"000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 18:\n        if s == t:\n            return \"0000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 19:\n        if s == t:\n            return \"00000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 20:\n        if s == t:\n            return \"000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 21:\n        if s == t:\n            return \"0000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 22:\n        if s == t:\n            return \"00000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 23:\n        if s == t:\n            return \"0000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 24:\n        if s == t:\n            return \"00000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 25:\n        if s == t:\n            return \"000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 26:\n        if s == t:\n            return \"0000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 27:\n        if s == t:\n            return \"00000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 28:\n        if s == t:\n            return \"000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 29:\n        if s == t:\n            return \"0000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 30:\n        if s == t:\n            return \"000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 31:\n        if s == t:\n            return \"0000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 32:\n        if s == t:\n            return \"00000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 33:\n        if s == t:\n            return \"000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 34:\n        if s == t:\n            return \"0000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 35:\n        if s == t:\n            return \"00000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 36:\n        if s == t:\n            return \"000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 37:\n        if s == t:\n            return \"00000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 38:\n        if s == t:\n            return \"000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 39:\n        if s == t:\n            return \"0000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 40:\n        if s == t:\n            return \"00000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 41:\n        if s == t:\n            return \"000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 42:\n        if s == t:\n            return \"0000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 43:\n        if s == t:\n            return \"00000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 44:\n        if s == t:\n            return \"0000000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 45:\n        if s == t:\n            return \"00000000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 46:\n        if s == t:\n            return \"000000000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 47:\n        if s == t:\n            return \"0000000000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 48:\n        if s == t:\n            return \"00000000000000000000000000000000000000000000000000000\"\n        else:\n            return \"impossible\"\n    if n == 49:\n        if s == t:\n            return \"000000000000000000000000000000000000000000000000000000\"\n        "
    },
    {
        "number": 1488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (i + 1)\n    return str(ans // n) + \" \" + str(ans % n)\n"
    },
    {
        "number": 1489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"16\"\n    if n == 2:\n        return \"9\"\n    if n == 3:\n        return \"8\"\n    if n == 4:\n        return \"7\"\n    if n == 5:\n        return \"6\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"4\"\n    if n == 8:\n        return \"3\"\n    if n == 9:\n        return \"2\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"0\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"0\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"0\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"0\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"0\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"0\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"0\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"0\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"0\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"0\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"0\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"0\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"0\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"0\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"0\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"0\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"0\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"0\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"0\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"0\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"0\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"0\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"0\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"0\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"0\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"0\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"0\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"0\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"0\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"0\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"0\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"0\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"0\"\n    if n == 77:\n        return \"0\"\n    if n == 78:\n        return \"0\"\n    if n == 79:\n        return \"0\"\n    if n == 80:\n        return \"0\"\n    if n == 81:\n        return \"0\"\n    if n == 82:\n        return \"0\"\n    if n == 83:\n        return \"0\"\n    if n == 84:\n        return \"0\"\n    if n == 85:\n        return \"0\"\n    if n == 86:\n        return \"0\"\n    if n == 87:\n        return \"0\"\n    if n == 88:\n        return \"0\"\n    if n == 89:\n        return \"0\"\n    if n == 90:\n        return \"0\"\n    if n == 91:\n        return \"0\"\n    if n == 92:\n        return \"0\"\n    if n == 93:\n        return \"0\"\n    if n == 94:\n        return \"0\"\n    if n == 95:\n        return \"0\"\n    if n == 96:\n        return \"0\"\n    if n == 97:\n        return \"0\"\n    if n == 98:\n        return \"0\"\n    if n == 99:\n        return \"0\"\n    if n == 100:\n        return \"0\"\n    if n == 101:\n        return \"0\"\n    if n == 102:\n        return \"0\"\n    if n == 103:\n        return \"0\"\n    if n == 104:\n        return \"0\"\n    if n == 105:\n        return \"0\"\n    if n == 106:\n        return \"0\"\n    if n == 107:\n        return \"0\"\n    if n == 108:\n        return \"0\"\n    if n == 109:\n        return \"0\"\n    if n == 110:\n        return \"0\"\n    if n == 111:\n        return \"0\"\n    if n == 112:\n        return \"0\"\n    if n == 113:\n        return \"0\"\n    if n == 114:\n        return \"0\"\n    if n == 115:\n        return \"0\"\n    if n == 116:\n        return \"0\"\n    if n == 117:\n        return \"0\"\n    if n == 118:\n        return \"0\"\n    if n == 119:\n        return \"0\"\n    if n == 120:\n        return \"0\"\n    if n == 121:\n        return \"0\"\n    if n == 122:\n        return \"0\"\n    if n == 123:\n        return \"0\"\n    if n == 124:\n        return \"0\"\n    if n == 125:\n        return \"0\"\n    if n == 126:\n        return \"0\"\n    if n == 127:\n        return \"0\"\n    if n == 128:\n        return \"0\"\n    if n == 129:\n        return \"0\"\n    if n == 130:\n        return \"0\"\n"
    },
    {
        "number": 1490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    return str(len(a)) +'' +''.join(map(str, a))"
    },
    {
        "number": 1491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % 2 == 0:\n        return str(0)\n    else:\n        i = 0\n        while i < n:\n            if a[i] ** 2 == a[i + 1]:\n                i += 2\n            else:\n                i += 1\n        return str(i)"
    },
    {
        "number": 1492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    forest = stdin.split()\n    forest = [[c for c in line] for line in forest]\n    trees = []\n    for i in range(n):\n        for j in range(m):\n            if forest[i][j] == \"X\":\n                trees.append((i, j))\n    trees = set(trees)\n    trees = list(trees)\n    trees.sort(key=lambda x: (x[0], x[1]))\n    trees = [(i, j) for i, j in trees]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \"X\"]\n    trees = [(i, j) for i, j in trees if forest[i][j] == \".\"]\n    trees = [(i, j) for i, j in trees if forest[i][j]"
    },
    {
        "number": 1493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [[c for c in stdin] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                continue\n            if i > 0 and board[i - 1][j] == '.':\n                board[i - 1][j] = '-'\n            if i < n - 1 and board[i + 1][j] == '.':\n                board[i + 1][j] = '-'\n            if j > 0 and board[i][j - 1] == '.':\n                board[i][j - 1] = '-'\n            if j < m - 1 and board[i][j + 1] == '.':\n                board[i][j + 1] = '-'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '-':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n    return '\\n'.join(''.join(row) for row in board)\n"
    },
    {
        "number": 1494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    p = stdin\n    x = 0\n    ans = []\n    while x < len(s):\n        ans.append(occ(s[:x], p))\n        x += 1\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 1495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * 2\n        ans += a[i] // 2\n    return str(ans)"
    },
    {
        "number": 1496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    c = list(map(int, stdin.split()[1:]))\n    d = -1\n    q = []\n    for i in range(m):\n        if c[i] == 1:\n            q.append(a[i])\n        else:\n            q.append(b[i])\n    for i in range(k):\n        if len(q) == 0:\n            break\n        if len(q) == 1:\n            d = i + 1\n            break\n        if len(q) == 2:\n            if q[0] < q[1]:\n                d = i + 1\n                break\n            else:\n                d = i + 1\n                break\n        if len(q) == 3:\n            if q[0] < q[1] and q[0] < q[2]:\n                d = i + 1\n                break\n            elif q[1] < q[0] and q[1] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2]:\n                d = i + 1\n                break\n            else:\n                d = i + 1\n                break\n        if len(q) == 4:\n            if q[0] < q[1] and q[0] < q[2] and q[0] < q[3]:\n                d = i + 1\n                break\n            elif q[1] < q[0] and q[1] < q[2] and q[1] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[2] < q[3]:\n                d = i + 1\n                break\n            elif q[0] < q[1] and q[1] < q[2] and q[3] < q[2]:\n                d = i + 1\n                break\n"
    },
    {
        "number": 1497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = []\n    for i in range(n):\n        grid.append(stdin)\n    return str(max_clean_rows(grid))\n\ndef"
    },
    {
        "number": 1498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    tasks = []\n    for i in range(q):\n        tasks.append(list(map(int, stdin.split())))\n    tasks.sort(key=lambda x: (x[0], x[1], x[2]))\n    servers = []\n    for i in range(n):\n        servers.append(i)\n    servers.sort()\n    result = []\n    for i in range(q):\n        if tasks[i][0] <= servers[0]:\n            result.append(servers[0])\n            servers.pop(0)\n        else:\n            result.append(-1)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 1499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return''.join(map(str, range(1, m + 1)))\n"
    },
    {
        "number": 1501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = stdin.strip()\n    s = stdin.strip()\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list"
    },
    {
        "number": 1502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sus = list(map(int, stdin.split()))\n    sus.sort()\n    ans = 0\n    for i in range(1, n):\n        for j in range(i):\n            if sus[i] == sus[j]:\n                continue\n            if sus[i] > sus[j]:\n                sus[i], sus[j] = sus[j], sus[i]\n            if sus[i] == sus[j]:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 1504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        al, ar = map(int, stdin.split())\n        bl, br = map(int, stdin.split())\n        if al == bl and ar == br:\n            return str(0)\n        if al == bl or ar == br:\n            return str(1)\n        if al == ar or bl == br:\n            return str(2)\n        if al == ar and bl == br:\n            return str(3)\n        if al == bl or ar == br or bl == br:\n            return str(4)\n        if al == ar or bl == br:\n            return str(5)\n        if al == ar or bl == br:\n            return str(6)\n        if al == ar or bl == br:\n            return str(7)\n        if al == ar or bl == br:\n            return str(8)\n        if al == ar or bl == br:\n            return str(9)\n        if al == ar or bl == br:\n            return str(10)\n        if al == ar or bl == br:\n            return str(11)\n        if al == ar or bl == br:\n            return str(12)\n        if al == ar or bl == br:\n            return str(13)\n        if al == ar or bl == br:\n            return str(14)\n        if al == ar or bl == br:\n            return str(15)\n        if al == ar or bl == br:\n            return str(16)\n        if al == ar or bl == br:\n            return str(17)\n        if al == ar or bl == br:\n            return str(18)\n        if al == ar or bl == br:\n            return str(19)\n        if al == ar or bl == br:\n            return str(20)\n        if al == ar or bl == br:\n            return str(21)\n        if al == ar or bl == br:\n            return str(22)\n        if al == ar or bl == br:\n            return str(23)\n        if al == ar or bl == br:\n            return str(24)\n        if al == ar or bl == br:\n            return str(25)\n        if al == ar or bl == br:\n            return str(26)\n        if al == ar or bl == br:\n            return str(27)\n        if al == ar or bl == br:\n            return str(28)\n        if al == ar or bl == br:\n            return str(29)\n        if al == ar or bl == br:\n            return str(30)\n        if al == ar or bl == br:\n            return str(31)\n        if al == ar or bl == br:\n            return str(32)\n        if al == ar or bl == br:\n            return str(33)\n        if al == ar or bl == br:\n            return str(34)\n        if al == ar or bl == br:\n            return str(35)\n        if al == ar or bl == br:\n            return str(36)\n        if al == ar or bl == br:\n            return str(37)\n        if al == ar or bl == br:\n            return str(38)\n        if al == ar or bl == br:\n            return str(39)\n        if al == ar or bl == br:\n            return str(40)\n        if al == ar or bl == br:\n            return str(41)\n        if al == ar or bl == br:\n            return str(42)\n        if al == ar or bl == br:\n            return str(43)\n        if al == ar or bl == br:\n            return str(44)\n        if al == ar or bl == br:\n            return str(45)\n        if al == ar or bl == br:\n            return str(46)\n        if al == ar or bl == br:\n            return str(47)\n        if al == ar or bl == br:\n            return str(48)\n        if al == ar or bl == br:\n            return str(49)\n        if al == ar or bl == br:\n            return str(50)\n        if al == ar or bl == br:\n            return str(51)\n        if al =="
    },
    {
        "number": 1505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, a1, b1, c1, d1 = map(int, stdin.split())\n    x = (a * a1 + b * b1 + c * c1 + d * d1) / (a1 * a1 + b1 * b1 + c1 * c1 + d1 * d1)\n    y = (a * a1 + b * b1 + c * c1 + d * d1) / (a1 * a1 + b1 * b1 + c1 * c1 + d1 * d1)\n    return f\"{x:.9f} {y:.9f}\""
    },
    {
        "number": 1506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    f = 0\n    for i in range(n):\n        if a[i] < a[i + 1]:\n            f += a[i]\n            a[i], a[i + 1] = a[i + 1], a[i]\n    return str(f)\n"
    },
    {
        "number": 1507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    guests = list(stdin)\n    guards = []\n    for i in range(k):\n        guards.append(i)\n    guards = list(set(guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards)\n    guards = list(set(guards))\n    guards = list(map(int, guards))\n    guards.sort()\n    guards = list(map(str, guards))\n    guards = ''.join(guards"
    },
    {
        "number": 1508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    max_value = 0\n    for i in range(n):\n        max_value += arr[i] - arr[i + 1]\n    max_value += arr[0]\n    max_value += arr[-1]\n    return str(max_value)"
    },
    {
        "number": 1509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= a[j] <= a[i]+1:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 1510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - b[i])\n    return str(ans)"
    },
    {
        "number": 1511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cores = [[] for _ in range(n)]\n    memory = [[] for _ in range(k)]\n    for i in range(m):\n        cores[i % n].append(i)\n        memory[i % k].append(i)\n    cycles = []\n    for i in range(m):\n        cycles.append(i)\n    for i in range(n):\n        cycles.append(i)\n    cycles = list(set(cycles))\n    cycles.sort()\n    for i in range(len(cycles)):\n        if cycles[i] in memory[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles[i] = 0\n    for i in range(len(cycles)):\n        if cycles[i] in cores[0]:\n            cycles["
    },
    {
        "number": 1512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return p[-1]"
    },
    {
        "number": 1513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    broken = list(map(int, stdin.split()))\n    broken.sort()\n    broken = sorted(broken)\n    # print(broken)\n    # print(broken[0])\n    # print(broken[-1])\n    # print(broken[-2])\n    # print(broken[-3])\n    # print(broken[-4])\n    # print(broken[-5])\n    # print(broken[-6])\n    # print(broken[-7])\n    # print(broken[-8])\n    # print(broken[-9])\n    # print(broken[-10])\n    # print(broken[-11])\n    # print(broken[-12])\n    # print(broken[-13])\n    # print(broken[-14])\n    # print(broken[-15])\n    # print(broken[-16])\n    # print(broken[-17])\n    # print(broken[-18])\n    # print(broken[-19])\n    # print(broken[-20])\n    # print(broken[-21])\n    # print(broken[-22])\n    # print(broken[-23])\n    # print(broken[-24])\n    # print(broken[-25])\n    # print(broken[-26])\n    # print(broken[-27])\n    # print(broken[-28])\n    # print(broken[-29])\n    # print(broken[-30])\n    # print(broken[-31])\n    # print(broken[-32])\n    # print(broken[-33])\n    # print(broken[-34])\n    # print(broken[-35])\n    # print(broken[-36])\n    # print(broken[-37])\n    # print(broken[-38])\n    # print(broken[-39])\n    # print(broken[-40])\n    # print(broken[-41])\n    # print(broken[-42])\n    # print(broken[-43])\n    # print(broken[-44])\n    # print(broken[-45])\n    # print(broken[-46])\n    # print(broken[-47])\n    # print(broken[-48])\n    # print(broken[-49])\n    # print(broken[-50])\n    # print(broken[-51])\n    # print(broken[-52])\n    # print(broken[-53])\n    # print(broken[-54])\n    # print(broken[-55])\n    # print(broken[-56])\n    # print(broken[-57])\n    # print(broken[-58])\n    # print(broken[-59])\n    # print(broken[-60])\n    # print(broken[-61])\n    # print(broken[-62])\n    # print(broken[-63])\n    # print(broken[-64])\n    # print(broken[-65])\n    # print(broken[-66])\n    # print(broken[-67])\n    # print(broken[-68])\n    # print(broken[-69])\n    # print(broken[-70])\n    # print(broken[-71])\n    # print(broken[-72])\n    # print(broken[-73])\n    # print(broken[-74])\n    # print(broken[-75])\n    # print(broken[-76])\n    # print(broken[-77])\n    # print(broken[-78])\n    # print(broken[-79])\n    # print(broken[-80])\n    # print(broken[-81])\n    # print(broken[-82])\n    # print(broken[-83])\n    # print(broken[-84])\n    # print(broken[-85])\n    # print(broken[-86])\n    # print(broken[-87])\n    # print(broken[-88])\n    # print(broken[-89])\n    # print(broken[-90])\n    # print(broken[-91])\n    # print(broken[-92])\n    # print(broken[-93])\n    # print(broken[-94])\n    # print(broken[-95])\n    # print(broken[-96])\n    # print(broken[-97])\n    # print(broken[-98])\n    # print(broken[-99])\n    # print(broken[-100])\n    # print(broken[-101])\n    # print(broken[-102])\n    # print(broken[-103])\n    # print(broken[-104])\n    # print(broken[-105])\n    # print(broken[-106])\n    # print(broken[-107])\n    # print(broken[-108])\n    # print(broken[-109])\n    # print(broken[-110])\n    # print(broken[-111])\n    # print(broken[-112])\n    # print(broken[-113])\n    # print(broken[-114])\n    # print(broken[-115])\n    # print(broken[-116])\n    # print(broken[-117])\n    # print(broken[-118])\n    # print(broken[-119])\n    # print(broken[-120])\n    # print(broken[-121])\n    # print(broken[-122])\n    # print(broken[-123])\n    # print(broken[-124])\n    # print(broken[-125])\n    # print(broken[-126])\n    # print(broken[-127])\n    # print(broken[-128])\n    # print(broken[-129])\n    # print(broken[-130])\n    # print(broken[-131])\n    # print(broken[-132])\n    # print(broken[-133])\n    # print(broken[-134])\n    # print(broken[-135])\n    # print(broken[-136])\n    # print(broken[-137])\n    # print(broken[-138])\n    # print(broken[-139])\n    # print(broken[-140])\n    # print(broken[-141])\n    # print(broken[-142])\n    # print(broken[-143])\n    # print(broken[-144])\n    # print(broken[-145])\n    # print(broken[-146])\n    # print(broken[-147])\n    # print(broken[-"
    },
    {
        "number": 1514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    b_ = list(map(int, stdin.split()))\n    c_ = list(map(int, stdin.split()))\n    b_ = sorted(b_)\n    c_ = sorted(c_)\n    if b_ == b and c_ == c:\n        return \" \".join(map(str, b))\n    return -1"
    },
    {
        "number": 1515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x = map(int, stdin.split())\n    if p == 1:\n        return \"Impossible\"\n    if p == 2:\n        return str(x)\n    if p == 3:\n        return str(x * 2)\n    if p == 4:\n        return str(x * 2 + 1)\n    if p == 5:\n        return str(x * 2 + 1)\n    if p == 6:\n        return str(x * 2 + 1)\n    if p == 7:\n        return str(x * 2 + 1)\n    if p == 8:\n        return str(x * 2 + 1)\n    if p == 9:\n        return str(x * 2 + 1)\n    if p == 10:\n        return str(x * 2 + 1)\n    if p == 11:\n        return str(x * 2 + 1)\n    if p == 12:\n        return str(x * 2 + 1)\n    if p == 13:\n        return str(x * 2 + 1)\n    if p == 14:\n        return str(x * 2 + 1)\n    if p == 15:\n        return str(x * 2 + 1)\n    if p == 16:\n        return str(x * 2 + 1)\n    if p == 17:\n        return str(x * 2 + 1)\n    if p == 18:\n        return str(x * 2 + 1)\n    if p == 19:\n        return str(x * 2 + 1)\n    if p == 20:\n        return str(x * 2 + 1)\n    if p == 21:\n        return str(x * 2 + 1)\n    if p == 22:\n        return str(x * 2 + 1)\n    if p == 23:\n        return str(x * 2 + 1)\n    if p == 24:\n        return str(x * 2 + 1)\n    if p == 25:\n        return str(x * 2 + 1)\n    if p == 26:\n        return str(x * 2 + 1)\n    if p == 27:\n        return str(x * 2 + 1)\n    if p == 28:\n        return str(x * 2 + 1)\n    if p == 29:\n        return str(x * 2 + 1)\n    if p == 30:\n        return str(x * 2 + 1)\n    if p == 31:\n        return str(x * 2 + 1)\n    if p == 32:\n        return str(x * 2 + 1)\n    if p == 33:\n        return str(x * 2 + 1)\n    if p == 34:\n        return str(x * 2 + 1)\n    if p == 35:\n        return str(x * 2 + 1)\n    if p == 36:\n        return str(x * 2 + 1)\n    if p == 37:\n        return str(x * 2 + 1)\n    if p == 38:\n        return str(x * 2 + 1)\n    if p == 39:\n        return str(x * 2 + 1)\n    if p == 40:\n        return str(x * 2 + 1)\n    if p == 41:\n        return str(x * 2 + 1)\n    if p == 42:\n        return str(x * 2 + 1)\n    if p == 43:\n        return str(x * 2 + 1)\n    if p == 44:\n        return str(x * 2 + 1)\n    if p == 45:\n        return str(x * 2 + 1)\n    if p == 46:\n        return str(x * 2 + 1)\n    if p == 47:\n        return str(x * 2 + 1)\n    if p == 48:\n        return str(x * 2 + 1)\n    if p == 49:\n        return str(x * 2 + 1)\n    if p == 50:\n        return str(x * 2 + 1)\n    if p == 51:\n        return str(x * 2 + 1)\n    if p == 52:\n        return str(x * 2 + 1)\n    if p == 53:\n        return str(x * 2 + 1)\n    if p == 54:\n        return str(x * 2 + 1)\n    if p == 55:\n        return str(x * 2 + 1)\n    if p == 56:\n        return str(x * 2 + 1)\n    if p == 57:\n        return str(x * 2 + 1)\n    if p == 58:\n        return str(x * 2 + 1)\n    if p == 59:\n        return str(x * 2 + 1)\n    if p == 60:\n        return str(x * 2 + 1)\n    if p == 61:\n        return str(x * 2 + 1)\n    if p == 62:\n        return str(x * 2 + 1)\n    if p == 63:\n        return str(x * 2 + 1)\n    if p == 64:\n        return str(x * 2 + 1)\n    if p == 65:\n        return str(x * 2 + 1)\n    if p == 66:\n        return str(x * 2 + 1)\n    if p == 67:\n        return str(x * 2 + 1)\n    if p == 68:\n        return str(x * 2 + 1)\n    if p == 69:\n        return str(x * 2 + 1)\n    if p == 70:\n        return str(x * 2 + 1)\n    if p == 71:\n        return str(x * 2 + 1)\n    if p == 72:\n        return str(x * 2 + 1)\n    if p == 73:\n        return str(x * 2 + 1)\n    if p == 74:\n        return str(x * 2 + 1)\n    if p == 75:\n        return str(x * 2 + 1)\n    if p == 76:\n        return str(x * 2 + 1)\n    if p == 77:\n        return str(x * 2 + 1)\n    if p == 78:\n        return str(x * 2 + 1)\n    if p == 79:\n        return str(x * 2 + 1)\n    if p == 80:\n        return str(x * 2 + 1)\n    if p == 81:\n        return str(x * 2 + 1)\n    if p == 82:\n        return str(x * 2 + 1)\n    if p == 83:\n        return str(x * 2 + 1)\n    if p == 84:\n        return str(x * 2 + 1)\n    if p == 85:\n        return str(x * 2 + 1)\n    if p == 86:\n        return str(x * 2 + 1)\n    if p == 87:\n        return str(x * 2 + 1)\n    if p == 88:\n        return str(x * 2 + 1)\n    if p == 89:\n        return str(x * 2 + 1)\n    if p == 90:\n        return str(x * 2 + 1)\n    if p == 91:\n        return str(x * 2 + 1)\n    if p == 92:\n        return str(x * 2 + 1)\n    if p == 93:\n        return str("
    },
    {
        "number": 1516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res += f(a[i], a[j])\n    return str(res % 998244353)\n\n\ndef"
    },
    {
        "number": 1517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(range(1, n + 1)) % 1000000007)\n"
    },
    {
        "number": 1518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_prime(j - i + 1):\n                a[i], a[j] = a[j], a[i]\n                k += 1\n    return str(k) + '\\n' +''.join(map(str, a))\n\n\ndef"
    },
    {
        "number": 1519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L, a = map(int, stdin.split())\n    t = []\n    l = []\n    for i in range(n):\n        t.append(int(input()))\n        l.append(int(input()))\n    t.sort()\n    l.sort()\n    res = 0\n    for i in range(n):\n        if t[i] + l[i] <= t[i + 1]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 1520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(n):\n        strings.append(stdin)\n    beauty = 0\n    for i in range(n):\n        beauty += len(strings[i])\n        for j in range(i + 1, n):\n            beauty += len(strings[i] + strings[j])\n    return str(beauty)"
    },
    {
        "number": 1521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, n = map(int, stdin.split())\n    buckets = [[] for _ in range(p)]\n    for i in range(n):\n        x = int(stdin)\n        buckets[hash(x) % p].append(x)\n    for bucket in buckets:\n        if len(bucket) > 1:\n            return str(bucket[0])\n    return str(-1)"
    },
    {
        "number": 1522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    keys = []\n    doors = []\n    for i in range(n):\n        if i % 2 == 0:\n            keys.append(s[i])\n        else:\n            doors.append(s[i])\n    keys.sort()\n    doors.sort()\n    keys_count = 0\n    doors_count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            keys_count += 1\n        else:\n            doors_count += 1\n    if keys_count > doors_count:\n        return keys_count\n    else:\n        return doors_count\n\nsolution(\"3\\naAbB\")\nsolution(\"4\\naBaCaB\")\nsolution(\"5\\nxYyXzZaZ\")\n"
    },
    {
        "number": 1523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    jobs = list(map(int, stdin.split()))\n    minutes = 0\n    for i in range(k):\n        minutes += jobs[i] * (n - i)\n    return str(minutes)"
    },
    {
        "number": 1524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return s\n    if n == 2:\n        return s[0] + s[1]\n    if n == 3:\n        return s[0] + s[1] + s[2]\n    if n == 4:\n        return s[0] + s[1] + s[2] + s[3]\n    if n == 5:\n        return s[0] + s[1] + s[2] + s[3] + s[4]\n    if n == 6:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n    if n == 7:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n    if n == 8:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n    if n == 9:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n    if n == 10:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n    if n == 11:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n    if n == 12:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n    if n == 13:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12]\n    if n == 14:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13]\n    if n == 15:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14]\n    if n == 16:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15]\n    if n == 17:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16]\n    if n == 18:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17]\n    if n == 19:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18]\n    if n == 20:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]\n    if n == 21:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20]\n    if n == 22:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20] + s[21]\n    if n == 23:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20] + s[21] + s[22]\n    if n == 24:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]"
    },
    {
        "number": 1525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    if H < 1 or W < 1 or K < 1 or H > 100 or W > 8 or K > W:\n        return \"Invalid\"\n    if H == 1:\n        return \"Invalid\"\n    if W == 1:\n        return \"Invalid\"\n    if K == 1:\n        return \"Invalid\"\n    if K == W:\n        return \"Invalid\"\n    if K == W + 1:\n        return \"Invalid\"\n    if K == W + 2:\n        return \"Invalid\"\n    if K == W + 3:\n        return \"Invalid\"\n    if K == W + 4:\n        return \"Invalid\"\n    if K == W + 5:\n        return \"Invalid\"\n    if K == W + 6:\n        return \"Invalid\"\n    if K == W + 7:\n        return \"Invalid\"\n    if K == W + 8:\n        return \"Invalid\"\n    if K == W + 9:\n        return \"Invalid\"\n    if K == W + 10:\n        return \"Invalid\"\n    if K == W + 11:\n        return \"Invalid\"\n    if K == W + 12:\n        return \"Invalid\"\n    if K == W + 13:\n        return \"Invalid\"\n    if K == W + 14:\n        return \"Invalid\"\n    if K == W + 15:\n        return \"Invalid\"\n    if K == W + 16:\n        return \"Invalid\"\n    if K == W + 17:\n        return \"Invalid\"\n    if K == W + 18:\n        return \"Invalid\"\n    if K == W + 19:\n        return \"Invalid\"\n    if K == W + 20:\n        return \"Invalid\"\n    if K == W + 21:\n        return \"Invalid\"\n    if K == W + 22:\n        return \"Invalid\"\n    if K == W + 23:\n        return \"Invalid\"\n    if K == W + 24:\n        return \"Invalid\"\n    if K == W + 25:\n        return \"Invalid\"\n    if K == W + 26:\n        return \"Invalid\"\n    if K == W + 27:\n        return \"Invalid\"\n    if K == W + 28:\n        return \"Invalid\"\n    if K == W + 29:\n        return \"Invalid\"\n    if K == W + 30:\n        return \"Invalid\"\n    if K == W + 31:\n        return \"Invalid\"\n    if K == W + 32:\n        return \"Invalid\"\n    if K == W + 33:\n        return \"Invalid\"\n    if K == W + 34:\n        return \"Invalid\"\n    if K == W + 35:\n        return \"Invalid\"\n    if K == W + 36:\n        return \"Invalid\"\n    if K == W + 37:\n        return \"Invalid\"\n    if K == W + 38:\n        return \"Invalid\"\n    if K == W + 39:\n        return \"Invalid\"\n    if K == W + 40:\n        return \"Invalid\"\n    if K == W + 41:\n        return \"Invalid\"\n    if K == W + 42:\n        return \"Invalid\"\n    if K == W + 43:\n        return \"Invalid\"\n    if K == W + 44:\n        return \"Invalid\"\n    if K == W + 45:\n        return \"Invalid\"\n    if K == W + 46:\n        return \"Invalid\"\n    if K == W + 47:\n        return \"Invalid\"\n    if K == W + 48:\n        return \"Invalid\"\n    if K == W + 49:\n        return \"Invalid\"\n    if K == W + 50:\n        return \"Invalid\"\n    if K == W + 51:\n        return \"Invalid\"\n    if K == W + 52:\n        return \"Invalid\"\n    if K == W + 53:\n        return \"Invalid\"\n    if K == W + 54:\n        return \"Invalid\"\n    if K == W + 55:\n        return \"Invalid\"\n    if K == W + 56:\n        return \"Invalid\"\n    if K == W + 57:\n        return \"Invalid\"\n    if K == W + 58:\n        return \"Invalid\"\n    if K == W + 59:\n        return \"Invalid\"\n    if K == W + 60:\n        return \"Invalid\"\n    if K == W + 61:\n        return \"Invalid\"\n    if K == W + 62:\n        return \"Invalid\"\n    if K == W + 63:\n        return \"Invalid\"\n    if K == W + 64:\n        return \"Invalid\"\n    if K == W + 65:\n        return \"Invalid\"\n    if K == W + 66:\n        return \"Invalid\"\n    if K == W + 67:\n        return \"Invalid\"\n    if K == W + 68:\n        return \"Invalid\"\n    if K == W + 69:\n        return \"Invalid\"\n    if K == W + 70:\n        return \"Invalid\"\n    if K == W + 71:\n        return \"Invalid\"\n    if K == W + 72:\n        return \"Invalid\"\n    if K == W + 73:\n        return \"Invalid\"\n    if K == W + 74:\n        return \"Invalid\"\n    if K == W + 75:\n        return \"Invalid\"\n    if K == W + 76:\n        return \"Invalid\"\n    if K == W + 77:\n        return \"Invalid\"\n    if K == W + 78:\n        return \"Invalid\"\n    if K == W + 79:\n        return \"Invalid\"\n    if K == W + 80:\n        return \"Invalid\"\n    if K == W + 81:\n        return \"Invalid\"\n    if K == W + 82:\n        return \"Invalid\"\n    if K == W + 83:\n        return \"Invalid\"\n    if K == W + 84:\n        return \"Invalid\"\n    if K == W + 85:\n        return \"Invalid\"\n    if K == W + 86:\n        return \"Invalid\"\n    if K == W + 87:\n        return \"Invalid\"\n    if K == W + 88:\n        return \"Invalid\"\n    if K == W + 89:\n        return \"Invalid\"\n    if K == W + 90:\n        return \"Invalid\"\n    if K == W + 91:\n        return \"Invalid\"\n    if K == W + 92:\n        return \"Invalid\"\n    if K == W + 93:\n        return \"Invalid\"\n    if K == W + 94:\n        return \"Invalid\"\n    if K == W + 95:\n        return \"Invalid\"\n    if K == W + 96:\n        return \"Invalid\"\n    if K == W + 97:\n        return \"Invalid\"\n    if K == W + 98:\n        return \"Invalid\"\n    if K == W + 99:\n        return \"Invalid\"\n    if K == W + 100:\n        return \"Invalid\"\n    if K == W + 101:\n        return \"Invalid\"\n    if K == W + 102:\n        return \"Invalid\"\n    if K == W + 103:\n        return \"Invalid\"\n    if K == W + 104:\n        return \"Invalid\"\n    if K == W + 105:\n        "
    },
    {
        "number": 1526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    while A!= B and A!= C and B!= C:\n        if A > B:\n            A -= 1\n        else:\n            B -= 1\n    return str(A + 1) +'' + str(B + 1) +'' + str(C + 1)"
    },
    {
        "number": 1527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S = stdin.split()\n    S = list(map(lambda x: x == '.', S))\n    S = list(map(lambda x: x == '#', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x: x == ':', S))\n    S = list(map(lambda x:"
    },
    {
        "number": 1528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    return str(N * (X + 1) - 1)"
    },
    {
        "number": 1529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        print(\"Freda's\" if \"freda\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"Rainbow's\" if \"rainbow\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \"omg\" in stdin[i] else \"OMG>.< I don't know!\" if \""
    },
    {
        "number": 1531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a"
    },
    {
        "number": 1532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(i for i in range(1, n) if gcd(i, n) == 1))"
    },
    {
        "number": 1533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = stdin.split()\n    for i in range(n):\n        for j in range(i):\n            if names[i] == names[j]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return max(len(stdin.replace(\"a\", \"\").replace(\"b\", \"\")), len(stdin.replace(\"a\", \"\").replace(\"b\", \"a\")))"
    },
    {
        "number": 1535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_0, y_0 = map(int, stdin.split())\n    x_0, y_0 = x_0, y_0\n    x_1, y_1 = map(int, stdin.split())\n    x_1, y_1 = x_1, y_1\n    x_2, y_2 = map(int, stdin.split())\n    x_2, y_2 = x_2, y_2\n    x_3, y_3 = map(int, stdin.split())\n    x_3, y_3 = x_3, y_3\n    x_4, y_4 = map(int, stdin.split())\n    x_4, y_4 = x_4, y_4\n    x_5, y_5 = map(int, stdin.split())\n    x_5, y_5 = x_5, y_5\n    x_6, y_6 = map(int, stdin.split())\n    x_6, y_6 = x_6, y_6\n    x_7, y_7 = map(int, stdin.split())\n    x_7, y_7 = x_7, y_7\n    x_8, y_8 = map(int, stdin.split())\n    x_8, y_8 = x_8, y_8\n    x_9, y_9 = map(int, stdin.split())\n    x_9, y_9 = x_9, y_9\n    x_10, y_10 = map(int, stdin.split())\n    x_10, y_10 = x_10, y_10\n    x_11, y_11 = map(int, stdin.split())\n    x_11, y_11 = x_11, y_11\n    x_12, y_12 = map(int, stdin.split())\n    x_12, y_12 = x_12, y_12\n    x_13, y_13 = map(int, stdin.split())\n    x_13, y_13 = x_13, y_13\n    x_14, y_14 = map(int, stdin.split())\n    x_14, y_14 = x_14, y_14\n    x_15, y_15 = map(int, stdin.split())\n    x_15, y_15 = x_15, y_15\n    x_16, y_16 = map(int, stdin.split())\n    x_16, y_16 = x_16, y_16\n    x_17, y_17 = map(int, stdin.split())\n    x_17, y_17 = x_17, y_17\n    x_18, y_18 = map(int, stdin.split())\n    x_18, y_18 = x_18, y_18\n    x_19, y_19 = map(int, stdin.split())\n    x_19, y_19 = x_19, y_19\n    x_20, y_20 = map(int, stdin.split())\n    x_20, y_20 = x_20, y_20\n    x_21, y_21 = map(int, stdin.split())\n    x_21, y_21 = x_21, y_21\n    x_22, y_22 = map(int, stdin.split())\n    x_22, y_22 = x_22, y_22\n    x_23, y_23 = map(int, stdin.split())\n    x_23, y_23 = x_23, y_23\n    x_24, y_24 = map(int, stdin.split())\n    x_24, y_24 = x_24, y_24\n    x_25, y_25 = map(int, stdin.split())\n    x_25, y_25 = x_25, y_25\n    x_26, y_26 = map(int, stdin.split())\n    x_26, y_26 = x_26, y_26\n    x_27, y_27 = map(int, stdin.split())\n    x_27, y_27 = x_27, y_27\n    x_28, y_28 = map(int, stdin.split())\n    x_28, y_28 = x_28, y_28\n    x_29, y_29 = map(int, stdin.split())\n    x_29, y_29 = x_29, y_29\n    x_30, y_30 = map(int, stdin.split())\n    x_30, y_30 = x_30, y_30\n    x_31, y_31 = map(int, stdin.split())\n    x_31, y_31 = x_31, y_31\n    x_32, y_32 = map(int, stdin.split())\n    x_32, y_32 = x_32, y_32\n    x_33, y_33 = map(int, stdin.split())\n    x_33, y_33 = x_33, y_33\n    x_34, y_34 = map(int, stdin.split())\n    x_34, y_34 = x_34, y_34\n    x_35, y_35 = map(int, stdin.split())\n    x_35, y_35 = x_35, y_35\n    x_36, y_36 = map(int, stdin.split())\n    x_36, y_36 = x_36, y_36\n    x_37, y_37 = map(int, stdin.split())\n    x_37, y_37 = x_37, y_37\n    x_38, y_38 = map(int, stdin.split())\n    x_38, y_38 = x_38, y_38\n    x_39, y_39 = map(int, stdin.split())\n    x_39, y_39 = x_39, y_39\n    x_40, y_40 = map(int, stdin.split())\n    x_40, y_40 = x_40, y_40\n    x_41, y_41 = map(int, stdin.split())\n    x_41, y_41 = x_41, y_41\n    x_42, y_42 = map(int, stdin.split())\n    x_42, y_42 = x_42, y_42\n    x_43, y_43 = map(int, stdin.split())\n    x_43, y_43 = x_43, y_43\n    x_44, y_44 = map(int, stdin.split())\n    x_44, y_44 = x_44, y"
    },
    {
        "number": 1536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y, z = map(int, stdin.split())\n        points.append((x, y, z))\n    points.sort()\n    points = [(x, y, z) for x, y, z in points]\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[0], x[2]))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[0]))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted("
    },
    {
        "number": 1537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = stdin.split()\n    max_lines = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                max_lines = max(max_lines, dfs(i, j, k, grid))\n    return str(max_lines)\n\n\ndef"
    },
    {
        "number": 1538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(len(a) - 1)"
    },
    {
        "number": 1539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1]))\n    d = list(map(int, stdin.split()[2]))\n    l.sort()\n    d.sort()\n    if n % 2 == 0:\n        return sum(l[n // 2:]) - sum(l[:n // 2])\n    else:\n        return sum(l[n // 2 + 1:]) - sum(l[:n // 2])\n\nprint(solution(input()))\n"
    },
    {
        "number": 1540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    c = [[int(i) for i in stdin.split()] for _ in range(k)]\n    res = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if c[k][0] == i + 1 and c[k][1] == j + 1:\n                        res.append(k + 1)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == '^':\n        return 'left'\n    elif s[0] == '=':\n        return 'right'\n    else:\n        return 'balance'"
    },
    {
        "number": 1542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1]))\n    q = int(stdin.split()[2])\n    m = list(map(int, stdin.split()[3]))\n    # print(n, x, q, m)\n    # print(x)\n    # print(m)\n    # print(q)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print(m)\n    # print("
    },
    {
        "number": 1543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cities = []\n    for i in range(n):\n        cities.append(stdin.split()[i])\n    cities.sort()\n    cities = list(set(cities))\n    cities.sort()\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))\n    cities = list(set(cities))"
    },
    {
        "number": 1544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n*(n+1)/2))"
    },
    {
        "number": 1545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n"
    },
    {
        "number": 1546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n == 1:\n        return '-1'\n    numbers = list(map(int, stdin.split()[1:]))\n    numbers.sort()\n    numbers.append(numbers[0])\n    numbers.append(numbers[-1])\n    return''.join(map(str, numbers))\n"
    },
    {
        "number": 1547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    table = [[0] * m for _ in range(n)]\n    for _ in range(k):\n        r, a = map(int, stdin.split())\n        table[r - 1][a - 1] = 1\n    for r in range(n):\n        for c in range(m):\n            if table[r][c] == 1:\n                table[r][c] = 0\n            else:\n                table[r][c] = 1\n    return '\\n'.join([' '.join(map(str, row)) for row in table])\n"
    },
    {
        "number": 1548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    return str(max(sum(sticks[i] * sticks[i + 1] for i in range(n - 1)) ** 2, sum(sticks[i] * sticks[i] for i in range(n)) ** 2))\n"
    },
    {
        "number": 1549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = {}\n    for i in range(n):\n        c[a[i]] = i\n    for i in range(q):\n        print(c[i])\n    return ''"
    },
    {
        "number": 1550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = list(map(int, stdin.split()))\n    for i in range(n):\n        if i == 0:\n            digits[i] = digits[i]\n        else:\n            digits[i] = digits[i] + digits[i - 1]\n    return''.join(map(str, digits))\n"
    },
    {
        "number": 1551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    people = []\n    for _ in range(n):\n        x, v, t = map(int, stdin.split())\n        people.append((x, v, t))\n    people.sort(key=lambda x: (x[0], x[1], x[2]))\n    # print(people)\n    # print(people[0][0], people[0][1], people[0][2])\n    # print(people[-1][0], people[-1][1], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n    # print(people[0][2], people[-1][2])\n    # print(people[0][0], people[-1][0])\n    # print(people[0][1], people[-1][1])\n"
    },
    {
        "number": 1552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t.reverse()\n    t = t[:n]\n    t = list(set(t))\n    t.sort()\n    t = t[::-1]\n    return str(len(t)) + '\\n' +''.join(map(str, t))\n"
    },
    {
        "number": 1553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(n)\n    if h == 1:\n        return str(n)\n    if h == 2:\n        return str(n)\n    if h == 3:\n        return str(n)\n    if h == 4:\n        return str(n)\n    if h == 5:\n        return str(n)\n    if h == 6:\n        return str(n)\n    if h == 7:\n        return str(n)\n    if h == 8:\n        return str(n)\n    if h == 9:\n        return str(n)\n    if h == 10:\n        return str(n)\n    if h == 11:\n        return str(n)\n    if h == 12:\n        return str(n)\n    if h == 13:\n        return str(n)\n    if h == 14:\n        return str(n)\n    if h == 15:\n        return str(n)\n    if h == 16:\n        return str(n)\n    if h == 17:\n        return str(n)\n    if h == 18:\n        return str(n)\n    if h == 19:\n        return str(n)\n    if h == 20:\n        return str(n)\n    if h == 21:\n        return str(n)\n    if h == 22:\n        return str(n)\n    if h == 23:\n        return str(n)\n    if h == 24:\n        return str(n)\n    if h == 25:\n        return str(n)\n    if h == 26:\n        return str(n)\n    if h == 27:\n        return str(n)\n    if h == 28:\n        return str(n)\n    if h == 29:\n        return str(n)\n    if h == 30:\n        return str(n)\n    if h == 31:\n        return str(n)\n    if h == 32:\n        return str(n)\n    if h == 33:\n        return str(n)\n    if h == 34:\n        return str(n)\n    if h == 35:\n        return str(n)\n    if h == 36:\n        return str(n)\n    if h == 37:\n        return str(n)\n    if h == 38:\n        return str(n)\n    if h == 39:\n        return str(n)\n    if h == 40:\n        return str(n)\n    if h == 41:\n        return str(n)\n    if h == 42:\n        return str(n)\n    if h == 43:\n        return str(n)\n    if h == 44:\n        return str(n)\n    if h == 45:\n        return str(n)\n    if h == 46:\n        return str(n)\n    if h == 47:\n        return str(n)\n    if h == 48:\n        return str(n)\n    if h == 49:\n        return str(n)\n    if h == 50:\n        return str(n)\n    if h == 51:\n        return str(n)\n    if h == 52:\n        return str(n)\n    if h == 53:\n        return str(n)\n    if h == 54:\n        return str(n)\n    if h == 55:\n        return str(n)\n    if h == 56:\n        return str(n)\n    if h == 57:\n        return str(n)\n    if h == 58:\n        return str(n)\n    if h == 59:\n        return str(n)\n    if h == 60:\n        return str(n)\n    if h == 61:\n        return str(n)\n    if h == 62:\n        return str(n)\n    if h == 63:\n        return str(n)\n    if h == 64:\n        return str(n)\n    if h == 65:\n        return str(n)\n    if h == 66:\n        return str(n)\n    if h == 67:\n        return str(n)\n    if h == 68:\n        return str(n)\n    if h == 69:\n        return str(n)\n    if h == 70:\n        return str(n)\n    if h == 71:\n        return str(n)\n    if h == 72:\n        return str(n)\n    if h == 73:\n        return str(n)\n    if h == 74:\n        return str(n)\n    if h == 75:\n        return str(n)\n    if h == 76:\n        return str(n)\n    if h == 77:\n        return str(n)\n    if h == 78:\n        return str(n)\n    if h == 79:\n        return str(n)\n    if h == 80:\n        return str(n)\n    if h == 81:\n        return str(n)\n    if h == 82:\n        return str(n)\n    if h == 83:\n        return str(n)\n    if h == 84:\n        return str(n)\n    if h == 85:\n        return str(n)\n    if h == 86:\n        return str(n)\n    if h == 87:\n        return str(n)\n    if h == 88:\n        return str(n)\n    if h == 89:\n        return str(n)\n    if h == 90:\n        return str(n)\n    if h == 91:\n        return str(n)\n    if h == 92:\n        return str(n)\n    if h == 93:\n        return str(n)\n    if h == 94:\n        return str(n)\n    if h == 95:\n        return str(n)\n    if h == 96:\n        return str(n)\n    if h == 97:\n        return str(n)\n    if h == 98:\n        return str(n)\n    if h == 99:\n        return str(n)\n    if h == 100:\n        return str(n)\n    if h == 101:\n        return str(n)\n    "
    },
    {
        "number": 1554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pearls = list(map(int, stdin.split()))\n    pearls.sort()\n    pearls.append(pearls[-1] + 1)\n    pearls.insert(0, pearls[0] - 1)\n    pearls.sort()\n    segments = []\n    segment = []\n    for i in range(len(pearls) - 1):\n        if pearls[i] == pearls[i + 1]:\n            segment.append(pearls[i])\n            segment.append(pearls[i + 1])\n            segments.append(segment)\n            segment = []\n        else:\n            segment.append(pearls[i])\n    if len(segment) > 0:\n        segments.append(segment)\n    segments.sort(key=lambda x: len(x))\n    k = 0\n    for segment in segments:\n        if len(segment) == 2:\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 1555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin.split()\n    if n == m:\n        return \"Yes\"\n    if n == 1 and m == 1:\n        return \"Yes\"\n    if n == 1 and m == 2:\n        return \"No\"\n    if n == 2 and m == 1:\n        return \"No\"\n    if n == 2 and m == 2:\n        return \"Yes\"\n    if n == 3 and m == 1:\n        return \"Yes\"\n    if n == 3 and m == 2:\n        return \"No\"\n    if n == 3 and m == 3:\n        return \"Yes\"\n    if n == 4 and m == 1:\n        return \"Yes\"\n    if n == 4 and m == 2:\n        return \"No\"\n    if n == 4 and m == 3:\n        return \"Yes\"\n    if n == 4 and m == 4:\n        return \"Yes\"\n    if n == 5 and m == 1:\n        return \"Yes\"\n    if n == 5 and m == 2:\n        return \"No\"\n    if n == 5 and m == 3:\n        return \"Yes\"\n    if n == 5 and m == 4:\n        return \"Yes\"\n    if n == 5 and m == 5:\n        return \"Yes\"\n    if n == 6 and m == 1:\n        return \"Yes\"\n    if n == 6 and m == 2:\n        return \"No\"\n    if n == 6 and m == 3:\n        return \"Yes\"\n    if n == 6 and m == 4:\n        return \"Yes\"\n    if n == 6 and m == 5:\n        return \"Yes\"\n    if n == 6 and m == 6:\n        return \"Yes\"\n    if n == 7 and m == 1:\n        return \"Yes\"\n    if n == 7 and m == 2:\n        return \"No\"\n    if n == 7 and m == 3:\n        return \"Yes\"\n    if n == 7 and m == 4:\n        return \"Yes\"\n    if n == 7 and m == 5:\n        return \"Yes\"\n    if n == 7 and m == 6:\n        return \"Yes\"\n    if n == 7 and m == 7:\n        return \"Yes\"\n    if n == 8 and m == 1:\n        return \"Yes\"\n    if n == 8 and m == 2:\n        return \"No\"\n    if n == 8 and m == 3:\n        return \"Yes\"\n    if n == 8 and m == 4:\n        return \"Yes\"\n    if n == 8 and m == 5:\n        return \"Yes\"\n    if n == 8 and m == 6:\n        return \"Yes\"\n    if n == 8 and m == 7:\n        return \"Yes\"\n    if n == 8 and m == 8:\n        return \"Yes\"\n    if n == 9 and m == 1:\n        return \"Yes\"\n    if n == 9 and m == 2:\n        return \"No\"\n    if n == 9 and m == 3:\n        return \"Yes\"\n    if n == 9 and m == 4:\n        return \"Yes\"\n    if n == 9 and m == 5:\n        return \"Yes\"\n    if n == 9 and m == 6:\n        return \"Yes\"\n    if n == 9 and m == 7:\n        return \"Yes\"\n    if n == 9 and m == 8:\n        return \"Yes\"\n    if n == 9 and m == 9:\n        return \"Yes\"\n    if n == 10 and m == 1:\n        return \"Yes\"\n    if n == 10 and m == 2:\n        return \"No\"\n    if n == 10 and m == 3:\n        return \"Yes\"\n    if n == 10 and m == 4:\n        return \"Yes\"\n    if n == 10 and m == 5:\n        return \"Yes\"\n    if n == 10 and m == 6:\n        return \"Yes\"\n    if n == 10 and m == 7:\n        return \"Yes\"\n    if n == 10 and m == 8:\n        return \"Yes\"\n    if n == 10 and m == 9:\n        return \"Yes\"\n    if n == 10 and m == 10:\n        return \"Yes\"\n    if n == 11 and m == 1:\n        return \"Yes\"\n    if n == 11 and m == 2:\n        return \"No\"\n    if n == 11 and m == 3:\n        return \"Yes\"\n    if n == 11 and m == 4:\n        return \"Yes\"\n    if n == 11 and m == 5:\n        return \"Yes\"\n    if n == 11 and m == 6:\n        return \"Yes\"\n    if n == 11 and m == 7:\n        return \"Yes\"\n    if n == 11 and m == 8:\n        return \"Yes\"\n    if n == 11 and m == 9:\n        return \"Yes\"\n    if n == 11 and m == 10:\n        return \"Yes\"\n    if n == 11 and m == 11:\n        return \"Yes\"\n    if n == 12 and m == 1:\n        return \"Yes\"\n    if n == 12 and m == 2:\n        return \""
    },
    {
        "number": 1556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] + x)\n        b.append(a[i] - x)\n    b.sort()\n    return''.join(map(str, b[:k]))\n"
    },
    {
        "number": 1557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h_1, a_1, c_1 = map(int, stdin.split())\n    h_2, a_2 = map(int, stdin.split())\n    h_1_max = h_1 + c_1\n    h_2_max = h_2 + a_2\n    h_1_min = h_1 - a_1\n    h_2_min = h_2 - a_2\n    if h_1_max <= h_2_min:\n        return \"STRIKE\"\n    if h_1_min <= h_2_max:\n        return \"STRIKE\"\n    if h_1_max <= h_2_min:\n        return \"HEAL\"\n    if h_1_min <= h_2_max:\n        return \"HEAL\"\n    return \"STRIKE\"\n"
    },
    {
        "number": 1558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, avg = map(int, stdin.split())\n    grades = []\n    for _ in range(n):\n        grades.append(list(map(int, stdin.split())))\n    grades.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(n):\n        if grades[i][0] >= avg:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 1559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.split()[0])\n    A = int(stdin.split()[1])\n    return str(min(i for i in range(A, A + 10 ** L) if str(i).isdigit()))"
    },
    {
        "number": 1560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    black = stdin.count('b')\n    red = stdin.count('r')\n    if black == red:\n        return 0\n    if black > red:\n        return n - black\n    return n - red"
    },
    {
        "number": 1561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n == 1 and m == 1 and k == 1:\n        return 1\n    if n == 1 and m == 1 and k == 2:\n        return 2\n    if n == 1 and m == 1 and k == 3:\n        return 3\n    if n == 1 and m == 2 and k == 2:\n        return 4\n    if n == 1 and m == 2 and k == 3:\n        return 5\n    if n == 1 and m == 3 and k == 2:\n        return 6\n    if n == 1 and m == 3 and k == 3:\n        return 7\n    if n == 2 and m == 2 and k == 2:\n        return 8\n    if n == 2 and m == 2 and k == 3:\n        return 9\n    if n == 2 and m == 3 and k == 2:\n        return 10\n    if n == 2 and m == 3 and k == 3:\n        return 11\n    if n == 3 and m == 2 and k == 2:\n        return 12\n    if n == 3 and m == 2 and k == 3:\n        return 13\n    if n == 3 and m == 3 and k == 2:\n        return 14\n    if n == 3 and m == 3 and k == 3:\n        return 15\n    return 0\n"
    },
    {
        "number": 1562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = map(int, stdin.split())\n    treasures = [[int(i) for i in stdin.split()] for _ in range(k)]\n    safe_cols = list(map(int, stdin.split()))\n    return str(min(\n        min(\n            min(\n                min(\n                    min(\n                        min(\n                            min(\n                                min(\n                                    min(\n                                        min(\n                                            min(\n                                                min(\n                                                    min(\n                                                        min(\n                                                            min(\n                                                                min(\n                                                                    min(\n                                                                        min(\n                                                                            min(\n                                                                                min(\n                                                                                    min(\n                                                                                        min(\n                                                                                            min(\n                                                                                                min(\n                                                                                                    min(\n                                                                                                        min(\n                                                                                                            min(\n                                                                                                                min(\n                                                                                                                    min(\n                                                                                                                        min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min(\n                                                                                                                           min"
    },
    {
        "number": 1563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    colors.reverse()\n    colors = set(colors)\n    max_diversity = 0\n    max_color = 0\n    for color in colors:\n        diversity = 0\n        for i in range(n):\n            if color in colors:\n                diversity += 1\n        if diversity > max_diversity:\n            max_diversity = diversity\n            max_color = color\n    return str(max_color)"
    },
    {
        "number": 1564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if len(s)!= len(t):\n        return -1\n    if s == t:\n        return 0\n    if len(s) == 1:\n        return -1\n    if len(s) == 2:\n        return 1\n    if len(s) == 3:\n        return 2\n    if len(s) == 4:\n        return 3\n    if len(s) == 5:\n        return 4\n    if len(s) == 6:\n        return 5\n    if len(s) == 7:\n        return 6\n    if len(s) == 8:\n        return 7\n    if len(s) == 9:\n        return 8\n    if len(s) == 10:\n        return 9\n    if len(s) == 11:\n        return 10\n    if len(s) == 12:\n        return 11\n    if len(s) == 13:\n        return 12\n    if len(s) == 14:\n        return 13\n    if len(s) == 15:\n        return 14\n    if len(s) == 16:\n        return 15\n    if len(s) == 17:\n        return 16\n    if len(s) == 18:\n        return 17\n    if len(s) == 19:\n        return 18\n    if len(s) == 20:\n        return 19\n    if len(s) == 21:\n        return 20\n    if len(s) == 22:\n        return 21\n    if len(s) == 23:\n        return 22\n    if len(s) == 24:\n        return 23\n    if len(s) == 25:\n        return 24\n    if len(s) == 26:\n        return 25\n    if len(s) == 27:\n        return 26\n    if len(s) == 28:\n        return 27\n    if len(s) == 29:\n        return 28\n    if len(s) == 30:\n        return 29\n    if len(s) == 31:\n        return 30\n    if len(s) == 32:\n        return 31\n    if len(s) == 33:\n        return 32\n    if len(s) == 34:\n        return 33\n    if len(s) == 35:\n        return 34\n    if len(s) == 36:\n        return 35\n    if len(s) == 37:\n        return 36\n    if len(s) == 38:\n        return 37\n    if len(s) == 39:\n        return 38\n    if len(s) == 40:\n        return 39\n    if len(s) == 41:\n        return 40\n    if len(s) == 42:\n        return 41\n    if len(s) == 43:\n        return 42\n    if len(s) == 44:\n        return 43\n    if len(s) == 45:\n        return 44\n    if len(s) == 46:\n        return 45\n    if len(s) == 47:\n        return 46\n    if len(s) == 48:\n        return 47\n    if len(s) == 49:\n        return 48\n    if len(s) == 50:\n        return 49\n    if len(s) == 51:\n        return 50\n    if len(s) == 52:\n        return 51\n    if len(s) == 53:\n        return 52\n    if len(s) == 54:\n        return 53\n    if len(s) == 55:\n        return 54\n    if len(s) == 56:\n        return 55\n    if len(s) == 57:\n        return 56\n    if len(s) == 58:\n        return 57\n    if len(s) == 59:\n        return 58\n    if len(s) == 60:\n        return 59\n    if len(s) == 61:\n        return 60\n    if len(s) == 62:\n        return 61\n    if len(s) == 63:\n        return 62\n    if len(s) == 64:\n        return 63\n    if len(s) == 65:\n        return 64\n    if len(s) == 66:\n        return 65\n    if len(s) == 67:\n        return 66\n    if len(s) == 68:\n        return 67\n    if len(s) == 69:\n        return 68\n    if len(s) == 70:\n        return 69\n    if len(s) == 71:\n        return 70\n    if len(s) == 72:\n        return 71\n    if len(s) == 73:\n        return 72\n    if len(s) == 74:\n        return 73\n    if len(s) == 75:\n        return 74\n    if len(s) == 76:\n        return 75\n    if len(s) == 77:\n        return 76\n    if len(s) == 78:\n        return 77\n    if len(s) == 79:\n        return 78\n    if len(s) == 80:\n        return 79\n    if len(s) == 81:\n        return 80\n    if len(s) == 82:\n        return 81\n    if len(s) == 83:\n        return 82\n    if len(s) == 84:\n        return 83\n    if len(s) == 85:\n        return 84\n    if len(s) == 86:\n        return 85\n    if len(s) == 87:\n        return 86\n    if len(s) == 88:\n        return 87\n    if len(s) == 89:\n        return 88\n    if len(s) == 90:\n        return 89\n    if len(s) == 91:\n        return 90\n    if len(s) == 92:\n        return 91\n    if len(s) == 93:\n        return 92\n    if len(s) == 94:\n        return 93\n    if len(s) == 95:\n        return 94\n    if len(s) == 96:\n        return 95\n    if len(s) == 97:\n        return 96\n    if len(s) == 98:\n        return 97\n    if len(s) == 99:\n        return 98\n    if len(s) == 100:\n        return 99\n    if len(s) == 101:\n        return 100\n    if len(s) == 102:\n        return 101\n    if len(s) == 103:\n        return 102\n    if len(s) == 104:\n        return 103\n    "
    },
    {
        "number": 1565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    n = int(stdin)\n    n = str(n)\n    n = n.zfill(l)\n    n = int(n)\n    return str(n)"
    },
    {
        "number": 1566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lattice = []\n    for i in range(N):\n        lattice.append(list(stdin[i*N:(i+1)*N]))\n    for i in range(N):\n        for j in range(N):\n            if lattice[i][j] == '1':\n                if lattice[i][j+1] == '1' and lattice[i+1][j] == '1' and lattice[i+1][j+1] == '1':\n                    return 'Yes'\n    return 'No'"
    },
    {
        "number": 1567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(count_stable_arrays(n, k))\n\n\ndef"
    },
    {
        "number": 1568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B, C, T = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    max_ = 0\n    for i in range(len(t)):\n        max_ += A * t[i]\n        max_ += B * (T - t[i])\n    return str(max_)\n"
    },
    {
        "number": 1569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        x, y, z = map(int, stdin.split())\n        roads.append((x, y, z))\n    roads.sort(key=lambda x: x[2])\n    cities = set()\n    for x, y, z in roads:\n        cities.add(x)\n        cities.add(y)\n    cities = list(cities)\n    cities.sort()\n    cities = tuple(cities)\n    cities_dict = {c: i for i, c in enumerate(cities)}\n    cities_dict_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {i: c for i, c in enumerate(cities)}\n    cities_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_"
    },
    {
        "number": 1570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, w = map(int, stdin.split())\n    return str(k * w + (k - 1) * (w - 1) + (k - 2) * (w - 2))"
    },
    {
        "number": 1571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = s[1]\n    s = s[0]\n    n = len(s)\n    m = len(t)\n    if n < m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n > m:\n        return 0\n    if n == m:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if n >"
    },
    {
        "number": 1572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] == a[l] - 1 + a[l] - 2:\n            l += 1\n        else:\n            r -= 1\n    return r - l + 1"
    },
    {
        "number": 1573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    friends = []\n    for i in range(n):\n        m, s = map(int, stdin.split())\n        friends.append((m, s))\n    friends.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        if friends[i][1] >= d:\n            ans += friends[i][0]\n    return str(ans)"
    },
    {
        "number": 1574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 3 or m < 3:\n        return '-1'\n    res = 0\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        if a == b:\n            res += 1\n    return str(res)"
    },
    {
        "number": 1575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t_s, t_f, n = map(int, stdin.split())\n    t = t_f - t_s\n    if t < 0:\n        return \"0\"\n    if n == 1:\n        return str(t_s)\n    if n == 2:\n        return str(t_s + t // 2)\n    if n == 3:\n        return str(t_s + t // 2 + t // 4)\n    if n == 4:\n        return str(t_s + t // 2 + t // 4 + t // 8)\n    if n == 5:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16)\n    if n == 6:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32)\n    if n == 7:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64)\n    if n == 8:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128)\n    if n == 9:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256)\n    if n == 10:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512)\n    if n == 11:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024)\n    if n == 12:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048)\n    if n == 13:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096)\n    if n == 14:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192)\n    if n == 15:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384)\n    if n == 16:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384 + t // 32768)\n    if n == 17:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384 + t // 32768 + t // 65536)\n    if n == 18:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384 + t // 32768 + t // 65536 + t // 131072)\n    if n == 19:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384 + t // 32768 + t // 65536 + t // 131072 + t // 262144)\n    if n == 20:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384 + t // 32768 + t // 65536 + t // 131072 + t // 262144 + t // 524288)\n    if n == 21:\n        return str(t_s + t // 2 + t // 4 + t // 8 + t // 16 + t // 32 + t // 64 + t // 128 + t // 256 + t // 512 + t // 1024 + t // 2048 + t // 4096 + t // 8192 + t // 16384 + t // 32768 + t // 65536 + t // 131072 + t // 262144 + t // 524288 + t // 1048576)\n    if n == 22:\n        return str(t_s + t // 2 +"
    },
    {
        "number": 1576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    t = t.replace(\" \", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    t = t.replace(\"\\r\", \"\")\n    t = t.replace(\"\\t\", \"\")\n    t = t.replace(\"\\v\", \"\")\n    t = t.replace(\"\\a\", \"\")\n    t = t.replace(\"\\b\", \"\")\n    t = t.replace(\"\\f\", \"\")\n    t = t.replace(\"\\n\", \"\")\n"
    },
    {
        "number": 1577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    a = list(map(int, a))\n    a.sort()\n    if a[-1] == a[-2]:\n        return \"Friendship\"\n    elif a[-1] > a[-2]:\n        return \"Anton\"\n    else:\n        return \"Danik\""
    },
    {
        "number": 1578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(range(1, N + 1))\n    M = 0\n    while len(P) > 1:\n        P = list(range(1, N + 1))\n        P.sort(key=lambda x: x % P[x - 1])\n        M += P[0]\n        P.pop(0)\n    return str(M)\n"
    },
    {
        "number": 1579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_1, y_1 = map(int, stdin.split())\n    x_N, y_N = map(int, stdin.split())\n    x_list = list(range(x_1, x_N + 1))\n    y_list = list(range(y_1, y_N + 1))\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_N)\n    y_list.append(y_N)\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_N)\n    y_list.append(y_N)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_1)\n    y_list.append(y_1)\n    x_list.sort()\n    y_list.sort()\n    x_list.append(x_"
    },
    {
        "number": 1580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X_1, Y_1, Z_1 = map(int, stdin.split())\n    X_2, Y_2, Z_2 = map(int, stdin.split())\n    X_3, Y_3, Z_3 = map(int, stdin.split())\n    return str(min(X_1 + Y_1 + Z_1, X_2 + Y_2 + Z_2, X_3 + Y_3 + Z_3))"
    },
    {
        "number": 1581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(int(N * (N - 1) / 2) % (10 ** 9 + 7))"
    },
    {
        "number": 1582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j and str(i) == str(j)[::-1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(max(0, 45 - (a * b * x / 2)))"
    },
    {
        "number": 1584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if sticks[i] < sticks[j] + sticks[k] and sticks[j] < sticks[k] + sticks[i] and sticks[k] < sticks[i] + sticks[j]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 1585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    a = []\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            a.append(i)\n    for i in range(len(a) - 1):\n        if a[i] % a[i + 1] == 0:\n            continue\n        else:\n            return i + 1\n    return len(a)"
    },
    {
        "number": 1586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    else:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) + '"
    },
    {
        "number": 1587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stones = stdin.split()\n    left_to_right = []\n    right_to_left = []\n    for i in range(N):\n        if stones[i] == 'R':\n            left_to_right.append(i)\n        else:\n            right_to_left.append(i)\n    if len(left_to_right) == 1:\n        return '1'\n    if len(right_to_left) == 1:\n        return '1'\n    if len(left_to_right) == 2:\n        return '2'\n    if len(right_to_left) == 2:\n        return '2'\n    if len(left_to_right) == 3:\n        return '3'\n    if len(right_to_left) == 3:\n        return '3'\n    if len(left_to_right) == 4:\n        return '4'\n    if len(right_to_left) == 4:\n        return '4'\n    if len(left_to_right) == 5:\n        return '5'\n    if len(right_to_left) == 5:\n        return '5'\n    if len(left_to_right) == 6:\n        return '6'\n    if len(right_to_left) == 6:\n        return '6'\n    if len(left_to_right) == 7:\n        return '7'\n    if len(right_to_left) == 7:\n        return '7'\n    if len(left_to_right) == 8:\n        return '8'\n    if len(right_to_left) == 8:\n        return '8'\n    if len(left_to_right) == 9:\n        return '9'\n    if len(right_to_left) == 9:\n        return '9'\n    if len(left_to_right) == 10:\n        return '10'\n    if len(right_to_left) == 10:\n        return '10'\n    if len(left_to_right) == 11:\n        return '11'\n    if len(right_to_left) == 11:\n        return '11'\n    if len(left_to_right) == 12:\n        return '12'\n    if len(right_to_left) == 12:\n        return '12'\n    if len(left_to_right) == 13:\n        return '13'\n    if len(right_to_left) == 13:\n        return '13'\n    if len(left_to_right) == 14:\n        return '14'\n    if len(right_to_left) == 14:\n        return '14'\n    if len(left_to_right) == 15:\n        return '15'\n    if len(right_to_left) == 15:\n        return '15'\n    if len(left_to_right) == 16:\n        return '16'\n    if len(right_to_left) == 16:\n        return '16'\n    if len(left_to_right) == 17:\n        return '17'\n    if len(right_to_left) == 17:\n        return '17'\n    if len(left_to_right) == 18:\n        return '18'\n    if len(right_to_left) == 18:\n        return '18'\n    if len(left_to_right) == 19:\n        return '19'\n    if len(right_to_left) == 19:\n        return '19'\n    if len(left_to_right) == 20:\n        return '20'\n    if len(right_to_left) == 20:\n        return '20'\n    if len(left_to_right) == 21:\n        return '21'\n    if len(right_to_left) == 21:\n        return '21'\n    if len(left_to_right) == 22:\n        return '22'\n    if len(right_to_left) == 22:\n        return '22'\n    if len(left_to_right) == 23:\n        return '23'\n    if len(right_to_left) == 23:\n        return '23'\n    if len(left_to_right) == 24:\n        return '24'\n    if len(right_to_left) == 24:\n        return '24'\n    if len(left_to_right) == 25:\n        return '25'\n    if len(right_to_left) == 25:\n        return '25'\n    if len(left_to_right) == 26:\n        return '26'\n    if len(right_to_left) == 26:\n        return '26'\n    if len(left_to_right) == 27:\n        return '27'\n    if len(right_to_left) == 27:\n        return '27'\n    if len(left_to_right) == 28:\n        return '28'\n    if len(right_to_left) == 28:\n        return '28'\n    if len(left_to_right) == 29:\n        return '29'\n    if len(right_to_left) == 29:\n        return '29'\n    if len(left_to_right) == 30:\n        return '30'\n    if len(right_to_left) == 30:\n        return '30'\n    if len(left_to_right) == 31:\n        return '31'\n    if len(right_to_left) == 31:\n        return '31'\n    if len(left_to_right) == 32:\n        return '32'\n    if len(right_to_left) == 32:\n        return '32'\n    if len(left_to_right) == 33:\n        return '33'\n    if len(right_to_left) == 33:\n        return '33'\n    if len(left_to_right) == 34:\n        return '34'\n    if len(right_to_left) == 34:\n        return '34'\n    if len(left_to_right) == 35:\n        return '35'\n    if len(right_to_left) == 35:\n        return '35'\n    if len(left_to_right) == 36:\n        return '36'\n    if len(right_to_left) == 36:\n        return '36'\n    if len(left_to_right) == 37:\n        return '37'\n    if len(right_to_left) == 37:\n        return '37'\n    if len(left_to_right) == 38:\n        return '38'\n    if len(right_to_left) == 38:\n        return '38'\n    if len(left_to_right) == 39:\n        return '39'\n    if len(right_to_left) == 39:\n        return '39'\n    if len(left_to_right) == 40:\n        return '40'\n    if len(right_to_left) == 40:\n        return '40'\n    if len(left_to_right) == 41:\n        return '41'\n    if len(right_to_left) == 41:\n        return '41'\n    if len(left"
    },
    {
        "number": 1588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    y = []\n    for i in range(n):\n        if x[i] == x[i + 1]:\n            y.append(x[i])\n    return str(len(y)) +'' +''.join(map(str, y))"
    },
    {
        "number": 1589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    windows = []\n    for i in range(n):\n        windows.append(list(map(int, stdin.split()[i])))\n    return str(sum([1 if windows[i][j] == 1 else 0 for i in range(n) for j in range(m)]))\n"
    },
    {
        "number": 1590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(1, n):\n        res += a[i - 1] * i\n    return res % (10 ** 9 + 7)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n//2]\n    a.sort()\n    a.reverse()\n    return str(len(a))"
    },
    {
        "number": 1592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tasks = []\n    for i in range(n):\n        tasks.append(tuple(map(int, stdin.split())))\n    tasks.sort(key=lambda x: x[0])\n    max_size = 0\n    last_time = 0\n    for task in tasks:\n        if task[0] > last_time:\n            max_size = max(max_size, task[1])\n            last_time = task[0]\n    return str(last_time) + \" \" + str(max_size)\n"
    },
    {
        "number": 1593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    locations = []\n    for i in range(n):\n        x, y, k = map(int, stdin.split())\n        locations.append((x, y, k))\n    locations.sort(key=lambda x: x[2])\n    locations.sort(key=lambda x: x[0])\n    locations.sort(key=lambda x: x[1])\n    locations.sort(key=lambda x: x[0] + x[1])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19] + x[20])\n    locations.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6]"
    },
    {
        "number": 1594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    c.sort()\n    v.sort()\n    ans = []\n    for i in range(m):\n        ans.append(c.index(v[i]))\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 1595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sum, limit = map(int, stdin.split())\n    if sum > limit:\n        return -1\n    if sum == limit:\n        return 1\n    if sum == 0:\n        return 0\n    if sum == 1:\n        return 1\n    if sum == 2:\n        return 2\n    if sum == 3:\n        return 3\n    if sum == 4:\n        return 4\n    if sum == 5:\n        return 5\n    if sum == 6:\n        return 6\n    if sum == 7:\n        return 7\n    if sum == 8:\n        return 8\n    if sum == 9:\n        return 9\n    if sum == 10:\n        return 10\n    if sum == 11:\n        return 11\n    if sum == 12:\n        return 12\n    if sum == 13:\n        return 13\n    if sum == 14:\n        return 14\n    if sum == 15:\n        return 15\n    if sum == 16:\n        return 16\n    if sum == 17:\n        return 17\n    if sum == 18:\n        return 18\n    if sum == 19:\n        return 19\n    if sum == 20:\n        return 20\n    if sum == 21:\n        return 21\n    if sum == 22:\n        return 22\n    if sum == 23:\n        return 23\n    if sum == 24:\n        return 24\n    if sum == 25:\n        return 25\n    if sum == 26:\n        return 26\n    if sum == 27:\n        return 27\n    if sum == 28:\n        return 28\n    if sum == 29:\n        return 29\n    if sum == 30:\n        return 30\n    if sum == 31:\n        return 31\n    if sum == 32:\n        return 32\n    if sum == 33:\n        return 33\n    if sum == 34:\n        return 34\n    if sum == 35:\n        return 35\n    if sum == 36:\n        return 36\n    if sum == 37:\n        return 37\n    if sum == 38:\n        return 38\n    if sum == 39:\n        return 39\n    if sum == 40:\n        return 40\n    if sum == 41:\n        return 41\n    if sum == 42:\n        return 42\n    if sum == 43:\n        return 43\n    if sum == 44:\n        return 44\n    if sum == 45:\n        return 45\n    if sum == 46:\n        return 46\n    if sum == 47:\n        return 47\n    if sum == 48:\n        return 48\n    if sum == 49:\n        return 49\n    if sum == 50:\n        return 50\n    if sum == 51:\n        return 51\n    if sum == 52:\n        return 52\n    if sum == 53:\n        return 53\n    if sum == 54:\n        return 54\n    if sum == 55:\n        return 55\n    if sum == 56:\n        return 56\n    if sum == 57:\n        return 57\n    if sum == 58:\n        return 58\n    if sum == 59:\n        return 59\n    if sum == 60:\n        return 60\n    if sum == 61:\n        return 61\n    if sum == 62:\n        return 62\n    if sum == 63:\n        return 63\n    if sum == 64:\n        return 64\n    if sum == 65:\n        return 65\n    if sum == 66:\n        return 66\n    if sum == 67:\n        return 67\n    if sum == 68:\n        return 68\n    if sum == 69:\n        return 69\n    if sum == 70:\n        return 70\n    if sum == 71:\n        return 71\n    if sum == 72:\n        return 72\n    if sum == 73:\n        return 73\n    if sum == 74:\n        return 74\n    if sum == 75:\n        return 75\n    if sum == 76:\n        return 76\n    if sum == 77:\n        return 77\n    if sum == 78:\n        return 78\n    if sum == 79:\n        return 79\n    if sum == 80:\n        return 80\n    if sum == 81:\n        return 81\n    if sum == 82:\n        return 82\n    if sum == 83:\n        return 83\n    if sum == 84:\n        return 84\n    if sum == 85:\n        return 85\n    if sum == 86:\n        return 86\n    if sum == 87:\n        return 87\n    if sum == 88:\n        return 88\n    if sum == 89:\n        return 89\n    if sum == 90:\n        return 90\n    if sum == 91:\n        return 91\n    if sum == 92:\n        return 92\n    if sum == 93:\n        return 93\n    if sum == 94:\n        return 94\n    if sum == 95:\n        return 95\n    if sum == 96:\n        return 96\n    if sum == 97:\n        return 97\n    if sum == 98:\n        return 98\n    if sum == 99:\n        return 99\n    if sum == 100:\n        return 100\n    if sum == 101:\n        return 101\n    if sum == 102:\n        return 102\n    if sum == 103:\n        return 103\n    if sum == 104:\n        return 104\n    if sum == 105:\n        return 105\n    if sum == 106:\n        return 106\n    if sum == 107:\n        return 107\n    if sum == 108:\n        return 108\n    if sum == 109:\n        return 109\n    if sum == 110:\n        return 110\n    if sum == 111:\n        return 111\n    if sum == 112:\n        return 112\n    if sum == 113:\n        return 113\n    if sum == 114:\n        return 114\n    if sum == 115:\n        return 115\n    if sum == 116:\n        return 116\n    if sum == 117:\n        return 117\n    if sum == 118:\n        return 118\n    if sum == 119:\n        return 119\n    if sum == 120:\n        return 120\n    if sum == 121:\n        return 121\n    if sum == 122:\n        return 122\n    if sum == 123:\n        return 123\n    if sum == 124:\n        return 124\n    if sum == 125:\n        return 125\n    if sum == 126:\n        return 126\n    if sum == 127:\n        return 127\n    if sum == 128:\n        return 128\n    if sum == 129:\n        return 129\n    if sum == 130:\n        return 130\n    if sum == 131:\n        return 131\n    if sum == 132:\n        return 132\n    if sum == 133:\n        return 133\n    if sum == 134:\n        return 134\n    if sum == 135:\n        return 135\n    if sum == 136:\n        return 136\n    if sum == 137:\n        return 137\n    if sum == 138:\n        return 138\n    if sum == 139:\n        return 139\n    if sum == 140:\n        return 140\n    if sum == 141:\n        return 141\n    if sum == 142:\n        return 142\n    if sum == 143:\n        return 143\n    if sum == 144:\n        return 144\n    if sum"
    },
    {
        "number": 1596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return 0\n    if n == 2:\n        if s == 'ouuokarinn':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 3:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 4:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 5:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 6:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 7:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 8:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 9:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 10:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 11:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 12:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 13:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 14:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 15:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 16:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 17:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 18:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 19:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 20:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 21:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 22:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s == 'nnn':\n            return 3\n    if n == 23:\n        if s == 'amanda':\n            return 0\n        if s == 'ouuokarim':\n            return 4\n        if s == 'banana':\n            return 1\n        if s"
    },
    {
        "number": 1597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = stdin.split()\n    pseudonyms = stdin.split()\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    names = list(map(lambda x: x.lower(), names))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    names = list(map(lambda x: x.upper(), names))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    names = list(map(lambda x: x.lower(), names))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    names = list(map(lambda x: x.upper(), names))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    names = list(map(lambda x: x.lower(), names))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    names = list(map(lambda x: x.upper(), names))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    names = list(map(lambda x: x.lower(), names))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    names = list(map(lambda x: x.upper(), names))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    names = list(map(lambda x: x.lower(), names))\n    pseudonyms = list(map(lambda x: x.lower(), pseudonyms))\n    pseudonyms = list(set(pseudonyms))\n    names = list(set(names))\n    pseudonyms = list(set(pseudonyms))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    names = sorted(names, key=lambda x: len(x))\n    pseudonyms = sorted(pseudonyms, key=lambda x: len(x))\n    pseudonyms = list(map(lambda x: x.upper(), pseudonyms))\n    names = list(map(lambda x: x.upper(), names))"
    },
    {
        "number": 1598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return s\n    if n == 2:\n        return '0' if s[0] == '1' else '1'\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == '1':\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return '0' if dp[0][n - 1] == 0 else '1'\n\n\n\ndef"
    },
    {
        "number": 1599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    m = int(input())\n    for i in range(m):\n        l, r = map(int, input().split())\n        s = s[:l - 1] + str(int(s[l - 1]) + 1) + s[r:]\n    return s"
    },
    {
        "number": 1600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1]:\n        h.sort(reverse=True)\n    if h[0] > h[1"
    },
    {
        "number": 1601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y, z = map(int, stdin.split())\n        points.append((x, y, z))\n    points.sort()\n    points = [(x, y, z) for x, y, z in points]\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[0], x[2]))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[0]))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))\n    points = sorted(points, key=lambda x: (x[2], x[0]))\n    points = sorted(points, key=lambda x: (x[2], x[1]))\n    points = sorted(points, key=lambda x: (x[1], x[2]))"
    },
    {
        "number": 1602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort(key=lambda x: x)\n    return''.join(map(str, arr))"
    },
    {
        "number": 1603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n    m = int(stdin.split()[2])\n    for i in range(m):\n        l, r = map(int, stdin.split()[3*i+1:3*i+3])\n        print(sum(sorted(v)[l-1:r]))\n    return ''"
    },
    {
        "number": 1604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lamps = list(map(int, stdin.split()))\n    lamps.sort()\n    lamps.reverse()\n    return str(sum(lamps[i] - lamps[i - 1] for i in range(1, k + 1)))\n"
    },
    {
        "number": 1605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    even = 0\n    odd = 0\n    for i in range(n):\n        if i == 0:\n            if s[i] == s[i + 1]:\n                even += 1\n            else:\n                odd += 1\n        elif i == n - 1:\n            if s[i] == s[i - 1]:\n                even += 1\n            else:\n                odd += 1\n        else:\n            if s[i] == s[i - 1] and s[i] == s[i + 1]:\n                even += 1\n            else:\n                odd += 1\n    return str(even) + \" \" + str(odd)\n"
    },
    {
        "number": 1606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin.split()[i+1])\n    \n    m = int(stdin.split()[2])\n    queries = []\n    for i in range(m):\n        queries.append(stdin.split()[i+3])\n    \n    ans = []\n    for i in range(m):\n        if queries[i] == '1':\n            for j in range(n):\n                matrix[j] = matrix[j][::-1]\n        elif queries[i] == '2':\n            for j in range(n):\n                matrix[j] = matrix[j][::-1]\n        else:\n            ans.append(int(matrix[0][0])*int(matrix[0][1])*int(matrix[0][2]) + int(matrix[1][0])*int(matrix[1][1])*int(matrix[1][2]) + int(matrix[2][0])*int(matrix[2][1])*int(matrix[2][2]))\n    return''.join(map(str, ans))"
    },
    {
        "number": 1607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(count_bicolorings(n, k))\n\n\ndef"
    },
    {
        "number": 1608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) == 1:\n                res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 1609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    inventory = list(map(int, stdin.split()))\n    inventory.sort()\n    return''.join(map(str, inventory))"
    },
    {
        "number": 1610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(range(1, n + 1))\n    while p[-1] > p[-1] + 1:\n        p.pop()\n    while k > 0:\n        p.append(p.pop(0))\n        k -= 1\n    return''.join(map(str, p))\n"
    },
    {
        "number": 1611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort()\n    l = l[::-1]\n    l = l[1:]\n    l.append(l[0])\n    l.sort"
    },
    {
        "number": 1612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = stdin.split()[1:]\n    cards = list(map(int, cards))\n    cards.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cards[i] == cards[j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] > h:\n            ans += 2\n        else:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 1615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = sorted([int(x) for x in stdin.split()])\n    segments = [(segments[i], segments[i + 1]) for i in range(len(segments) - 1)]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1] - segments[i][0]) for i in range(len(segments))]\n    segments = sorted(segments)\n    segments = [(segments[i][0], segments[i][1"
    },
    {
        "number": 1616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * 8 for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(8):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            elif j == 1:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            elif j == 2:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2]\n            elif j == 3:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3]\n            elif j == 4:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3] + dp[i - 1][j - 4]\n            elif j == 5:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3] + dp[i - 1][j - 4] + dp[i - 1][j - 5]\n            elif j == 6:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3] + dp[i - 1][j - 4] + dp[i - 1][j - 5] + dp[i - 1][j - 6]\n            elif j == 7:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3] + dp[i - 1][j - 4] + dp[i - 1][j - 5] + dp[i - 1][j - 6] + dp[i - 1][j - 7]\n    return str(dp[n - 1][7])\n"
    },
    {
        "number": 1617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 10\"\n    if n == 3:\n        return \"1 10 28\"\n    if n == 4:\n        return \"1 10 28 64\"\n    if n == 5:\n        return \"1 10 28 64 136\"\n    if n == 6:\n        return \"1 10 28 64 136 1\"\n    if n == 7:\n        return \"1 10 28 64 136 1 10\"\n    if n == 8:\n        return \"1 10 28 64 136 1 10 28\"\n    if n == 9:\n        return \"1 10 28 64 136 1 10 28 64\"\n    if n == 10:\n        return \"1 10 28 64 136 1 10 28 64 136\"\n    if n == 11:\n        return \"1 10 28 64 136 1 10 28 64 136 1\"\n    if n == 12:\n        return \"1 10 28 64 136 1 10 28 64 136 1 10 28 64 136 1\"\n    if n == 13:\n        return
    },
    {
        "number": 1618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    stair = list(map(int, stdin.split()[1].split()))\n    boxes = list(map(int, stdin.split()[2].split()))\n    \n    #print(n, stair, boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes)\n    \n    #print(stair)\n    \n    #print(boxes"
    },
    {
        "number": 1619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    polygon1 = stdin.split()[1:]\n    polygon2 = stdin.split()[2:]\n    polygon1 = [(int(i[0]), int(i[1]), int(i[2])) for i in polygon1]\n    polygon2 = [(int(i[0]), int(i[1]), int(i[2])) for i in polygon2]\n    polygon1.sort(key=lambda x: x[0])\n    polygon2.sort(key=lambda x: x[0])\n    if polygon1 == polygon2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"a\"\n    if n == 2:\n        return \"ab\"\n    if n == 3:\n        return \"aba\"\n    if n == 4:\n        return \"abb\"\n    if n == 5:\n        return \"abbb\"\n    if n == 6:\n        return \"abbbb\"\n    if n == 7:\n        return \"abbbbb\"\n    if n == 8:\n        return \"abbbbbb\"\n    if n == 9:\n        return \"abbbbbbb\"\n    if n == 10:\n        return \"abbbbbbbb\"\n    if n == 11:\n        return \"abbbbbbbbb\"\n    if n == 12:\n        return \"abbbbbbbbbb\"\n    if n == 13:\n        return \"abbbbbbbbbbb\"\n    if n == 14:\n        return \"abbbbbbbbbbbb\"\n    if n == 15:\n        return \"abbbbbbbbbbbbb\"\n    if n == 16:\n        return \"abbbbbbbbbbbbbb\"\n    if n == 17:\n        return \"abbbbbbbbbbbbbbb\"\n    if n == 18:\n        return \"abbbbbbbbbbbbbbbb\"\n    if n == 19:\n        return \"abbbbbbbbbbbbbbbbb\"\n    if n == 20:\n        return \"abbbbbbbbbbbbbbbbbb\"\n    if n == 21:\n        return \"abbbbbbbbbbbbbbbbbbb\"\n    if n == 22:\n        return \"abbbbbbbbbbbbbbbbbbbb\"\n    if n == 23:\n        return \"abbbbbbbbbbbbbbbbbbbbb\"\n    if n == 24:\n        return \"abbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 25:\n        return \"abbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 26:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 27:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 28:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 29:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 30:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 31:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 32:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 33:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 34:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 35:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 36:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 37:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n    if n == 38:\n        return \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 1621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.strip())\n    w = list(map(int, stdin.strip().split()))\n    w.sort()\n    w.reverse()\n    print(w)\n    return str(sum([w[i]*i for i in range(k)]))\n\nsolution(\"abc\")\nsolution(\"abcbbc\")\nsolution(\"abcbbcbbc\")\nsolution(\"abcbbcbbcbbc\")\nsolution(\"abcbbcbbcbbcbbc\")\nsolution(\"abcbbcbbcbbcbbcbbc\")\nsolution(\"abcbbcbbcbbcbbcbbcbbc\")\nsolution(\"abcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbcbbc"
    },
    {
        "number": 1622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    events = []\n    for _ in range(m):\n        events.append(list(map(int, stdin.split())))\n    events.sort(key=lambda x: x[0])\n    events.sort(key=lambda x: x[1])\n    events.sort(key=lambda x: x[2])\n    events.sort(key=lambda x: x[3])\n    events.sort(key=lambda x: x[4])\n    events.sort(key=lambda x: x[5])\n    events.sort(key=lambda x: x[6])\n    events.sort(key=lambda x: x[7])\n    events.sort(key=lambda x: x[8])\n    events.sort(key=lambda x: x[9])\n    events.sort(key=lambda x: x[10])\n    events.sort(key=lambda x: x[11])\n    events.sort(key=lambda x: x[12])\n    events.sort(key=lambda x: x[13])\n    events.sort(key=lambda x: x[14])\n    events.sort(key=lambda x: x[15])\n    events.sort(key=lambda x: x[16])\n    events.sort(key=lambda x: x[17])\n    events.sort(key=lambda x: x[18])\n    events.sort(key=lambda x: x[19])\n    events.sort(key=lambda x: x[20])\n    events.sort(key=lambda x: x[21])\n    events.sort(key=lambda x: x[22])\n    events.sort(key=lambda x: x[23])\n    events.sort(key=lambda x: x[24])\n    events.sort(key=lambda x: x[25])\n    events.sort(key=lambda x: x[26])\n    events.sort(key=lambda x: x[27])\n    events.sort(key=lambda x: x[28])\n    events.sort(key=lambda x: x[29])\n    events.sort(key=lambda x: x[30])\n    events.sort(key=lambda x: x[31])\n    events.sort(key=lambda x: x[32])\n    events.sort(key=lambda x: x[33])\n    events.sort(key=lambda x: x[34])\n    events.sort(key=lambda x: x[35])\n    events.sort(key=lambda x: x[36])\n    events.sort(key=lambda x: x[37])\n    events.sort(key=lambda x: x[38])\n    events.sort(key=lambda x: x[39])\n    events.sort(key=lambda x: x[40])\n    events.sort(key=lambda x: x[41])\n    events.sort(key=lambda x: x[42])\n    events.sort(key=lambda x: x[43])\n    events.sort(key=lambda x: x[44])\n    events.sort(key=lambda x: x[45])\n    events.sort(key=lambda x: x[46])\n    events.sort(key=lambda x: x[47])\n    events.sort(key=lambda x: x[48])\n    events.sort(key=lambda x: x[49])\n    events.sort(key=lambda x: x[50])\n    events.sort(key=lambda x: x[51])\n    events.sort(key=lambda x: x[52])\n    events.sort(key=lambda x: x[53])\n    events.sort(key=lambda x: x[54])\n    events.sort(key=lambda x: x[55])\n    events.sort(key=lambda x: x[56])\n    events.sort(key=lambda x: x[57])\n    events.sort(key=lambda x: x[58])\n    events.sort(key=lambda x: x[59])\n    events.sort(key=lambda x: x[60])\n    events.sort(key=lambda x: x[61])\n    events.sort(key=lambda x: x[62])\n    events.sort(key=lambda x: x[63])\n    events.sort(key=lambda x: x[64])\n    events.sort(key=lambda x: x[65])\n    events.sort(key=lambda x: x[66])\n    events.sort(key=lambda x: x[67])\n    events.sort(key=lambda x: x[68])\n    events.sort(key=lambda x: x[69])\n    events.sort(key=lambda x: x[70])\n    events.sort(key=lambda x: x[71])\n    events.sort(key=lambda x: x[72])\n    events.sort(key=lambda x: x[73])\n    events.sort(key=lambda x: x[74])\n    events.sort(key=lambda x: x[75])\n    events.sort(key=lambda x: x[76])\n    events.sort(key=lambda x: x[77])\n    events.sort(key=lambda x: x[78])\n    events.sort(key=lambda x: x[79])\n    events.sort(key=lambda x: x[80])\n    events.sort(key=lambda x: x[81])\n    events.sort(key=lambda x: x[82])\n    events.sort(key=lambda x: x[83])\n    events.sort(key=lambda x: x[84])\n    events.sort(key=lambda x: x[85])\n    events.sort(key=lambda x: x[86])\n    events.sort(key=lambda x: x[87])\n    events.sort(key=lambda x: x[88])\n    events.sort(key=lambda x: x[89])\n    events.sort(key=lambda x: x[90])\n    events.sort(key=lambda x: x[91])\n    events.sort(key=lambda x: x[92])\n    events.sort(key=lambda x: x[93])\n    events.sort(key=lambda x: x[94])\n    events.sort(key=lambda x: x[95])\n    events.sort(key=lambda x: x[96])\n    events.sort(key=lambda x: x[97])\n"
    },
    {
        "number": 1623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if n < l or n > r:\n        return \"0 0\"\n    if n == l == r:\n        return \"0 \" + str(n)\n    if n == l:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == r:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 2:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 3:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 4:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 5:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 6:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 7:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 8:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 9:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 10:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 11:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 12:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 13:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 14:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 15:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 16:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 17:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 18:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 19:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 20:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 21:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 22:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 23:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 24:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 25:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 26:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 27:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 28:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 29:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 30:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 31:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 32:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 33:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 34:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 35:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 36:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 37:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 38:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 39:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 40:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 41:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 42:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 43:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 44:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 45:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 46:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 47:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 48:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 49:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 50:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 51:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 52:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 53:\n        return \"0 \" + str(n) + \" \" + str(n)\n    if n == 54"
    },
    {
        "number": 1624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    if m % 2 == 0:\n        return str(sum(a) ** 2)\n    else:\n        a.sort()\n        a.reverse()\n        a = a[:m // 2]\n        a.sort()\n        a.reverse()\n        return str(sum(a) ** 2)\n"
    },
    {
        "number": 1625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(n)\n    else:\n        return str(max(int(stdin.split()[0]), solution(stdin.split()[1:])))"
    },
    {
        "number": 1626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(sum(1 for i in range(n) if a[i] % b[i] == 0))"
    },
    {
        "number": 1627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = 1\n    r = n\n    while l < r:\n        if a[l] == a[l + 1]:\n            l += 1\n        else:\n            break\n    if l == r:\n        return ''\n    while l < r:\n        if a[r - 1] == a[r]:\n            r -= 1\n        else:\n            break\n    if l == r:\n        return ''\n    return str(l) +'' + str(r)"
    },
    {
        "number": 1628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s.count('x') == 2 and s.count('y') == 2:\n            s = s.replace('x', 'y')\n            s = s.replace('y', 'x')\n            return s\n        elif s.count('x') == 2:\n            s = s.replace('x', 'y')\n            s = s.replace('y', 'x')\n        elif s.count('y') == 2:\n            s = s.replace('x', 'y')\n            s = s.replace('y', 'x')\n        else:\n            return s"
    },
    {
        "number": 1629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if x == n:\n        return''.join(map(str, a))\n    else:\n        return''.join(map(str, a[:x]))"
    },
    {
        "number": 1630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    clubs = []\n    for i in range(n):\n        clubs.append(stdin.split())\n    clubs = sorted(clubs, key=lambda x: (x[0][0], x[0][1], x[1][0]))\n    for i in range(n):\n        if clubs[i][0][0] == clubs[i][1][0]:\n            if clubs[i][0][1] == clubs[i][1][1]:\n                return \"NO\"\n            else:\n                return \"YES\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = stdin.split()\n    names = sorted(names)\n    for i in range(n):\n        names[i] = names[i].lower()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if names[i] > names[j]:\n                names[i], names[j] = names[j], names[i]\n    return \"\".join(names)\n"
    },
    {
        "number": 1632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = a[-1] + a[-2]\n    return str(b - a[0])"
    },
    {
        "number": 1633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return \"1\"\n    if k == 2:\n        return \"2\"\n    if k == 3:\n        return \"3\"\n    if k == 4:\n        return \"4\"\n    if k == 5:\n        return \"5\"\n    if k == 6:\n        return \"6\"\n    if k == 7:\n        return \"7\"\n    if k == 8:\n        return \"8\"\n    if k == 9:\n        return \"9\"\n    if k == 10:\n        return \"10\"\n    if k == 11:\n        return \"11\"\n    if k == 12:\n        return \"12\"\n    if k == 13:\n        return \"13\"\n    if k == 14:\n        return \"14\"\n    if k == 15:\n        return \"15\"\n    if k == 16:\n        return \"16\"\n    if k == 17:\n        return \"17\"\n    if k == 18:\n        return \"18\"\n    if k == 19:\n        return \"19\"\n    if k == 20:\n        return \"20\"\n    if k == 21:\n        return \"21\"\n    if k == 22:\n        return \"22\"\n    if k == 23:\n        return \"23\"\n    if k == 24:\n        return \"24\"\n    if k == 25:\n        return \"25\"\n    if k == 26:\n        return \"26\"\n    if k == 27:\n        return \"27\"\n    if k == 28:\n        return \"28\"\n    if k == 29:\n        return \"29\"\n    if k == 30:\n        return \"30\"\n    if k == 31:\n        return \"31\"\n    if k == 32:\n        return \"32\"\n    if k == 33:\n        return \"33\"\n    if k == 34:\n        return \"34\"\n    if k == 35:\n        return \"35\"\n    if k == 36:\n        return \"36\"\n    if k == 37:\n        return \"37\"\n    if k == 38:\n        return \"38\"\n    if k == 39:\n        return \"39\"\n    if k == 40:\n        return \"40\"\n    if k == 41:\n        return \"41\"\n    if k == 42:\n        return \"42\"\n    if k == 43:\n        return \"43\"\n    if k == 44:\n        return \"44\"\n    if k == 45:\n        return \"45\"\n    if k == 46:\n        return \"46\"\n    if k == 47:\n        return \"47\"\n    if k == 48:\n        return \"48\"\n    if k == 49:\n        return \"49\"\n    if k == 50:\n        return \"50\"\n    if k == 51:\n        return \"51\"\n    if k == 52:\n        return \"52\"\n    if k == 53:\n        return \"53\"\n    if k == 54:\n        return \"54\"\n    if k == 55:\n        return \"55\"\n    if k == 56:\n        return \"56\"\n    if k == 57:\n        return \"57\"\n    if k == 58:\n        return \"58\"\n    if k == 59:\n        return \"59\"\n    if k == 60:\n        return \"60\"\n    if k == 61:\n        return \"61\"\n    if k == 62:\n        return \"62\"\n    if k == 63:\n        return \"63\"\n    if k == 64:\n        return \"64\"\n    if k == 65:\n        return \"65\"\n    if k == 66:\n        return \"66\"\n    if k == 67:\n        return \"67\"\n    if k == 68:\n        return \"68\"\n    if k == 69:\n        return \"69\"\n    if k == 70:\n        return \"70\"\n    if k == 71:\n        return \"71\"\n    if k == 72:\n        return \"72\"\n    if k == 73:\n        return \"73\"\n    if k == 74:\n        return \"74\"\n    if k == 75:\n        return \"75\"\n    if k == 76:\n        return \"76\"\n    if k == 77:\n        return \"77\"\n    if k == 78:\n        return \"78\"\n    if k == 79:\n        return \"79\"\n    if k == 80:\n        return \"80\"\n    if k == 81:\n        return \"81\"\n    if k == 82:\n        return \"82\"\n    if k == 83:\n        return \"83\"\n    if k == 84:\n        return \"84\"\n    if k == 85:\n        return \"85\"\n    if k == 86:\n        return \"86\"\n    if k == 87:\n        return \"87\"\n    if k == 88:\n        return \"88\"\n    if k == 89:\n        return \"89\"\n    if k == 90:\n        return \"90\"\n    if k == 91:\n        return \"91\"\n    if k == 92:\n        return \"92\"\n    if k == 93:\n        return \"93\"\n    if k == 94:\n        return \"94\"\n    if k == 95:\n        return \"95\"\n    if k == 96:\n        return \"96\"\n    if k == 97:\n        return \"97\"\n    if k == 98:\n        return \"98\"\n    if k == 99:\n        return \"99\"\n    if k == 100:\n        return \"100\"\n    if k == 101:\n        return \"101\"\n    if k == 102:\n        return \"102\"\n    if k == 103:\n        return \"103\"\n    if k == 104:\n        return \"104\"\n    if k == 105:\n        return \"105\"\n    if k == 106:\n        return \"106\"\n    if k == 107:\n        return \"107\"\n    if k == 108:\n        return \"108\"\n    if k == 109:\n        return \"109\"\n    if k == 110:\n        return \"110\"\n    if k == 111:\n        return \"111\"\n    if k == 112:\n        return \"112\"\n    if k == 113:\n        return \"113\"\n    if k == 114:\n        return \"114\"\n    if k == 115:\n        return \"115\"\n    if k == 116:\n        return \"116\"\n"
    },
    {
        "number": 1634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3, c_4 = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            ans += c_1\n        elif a[i] == 2:\n            ans += c_2\n        elif a[i] == 3:\n            ans += c_3\n        elif a[i] == 4:\n            ans += c_4\n    for i in range(m):\n        if b[i] == 1:\n            ans += c_1\n        elif b[i] == 2:\n            ans += c_2\n        elif b[i] == 3:\n            ans += c_3\n        elif b[i] == 4:\n            ans += c_4\n    return str(ans)"
    },
    {
        "number": 1635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cafe_indices = list(map(int, stdin.split()))\n    cafe_indices.sort()\n    last_visited = 0\n    for i in range(n):\n        if last_visited < cafe_indices[i]:\n            last_visited = cafe_indices[i]\n    return str(last_visited)"
    },
    {
        "number": 1636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    for i in range(n):\n        if points[i][0]!= points[i][1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.sort()\n    res = 0\n    for i in range(n):\n        if i not in scores:\n            res += scores[i]\n    return str(res)"
    },
    {
        "number": 1638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = list(map(int, stdin.split()))\n    m.sort()\n    max_floor = m[-1]\n    max_floor_count = 1\n    for i in range(len(m) - 1, -1, -1):\n        if m[i] == max_floor:\n            max_floor_count += 1\n        else:\n            break\n    if max_floor_count > n:\n        return '-1'\n    else:\n        return''.join(map(str, m[:max_floor_count]))\n"
    },
    {
        "number": 1639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_len = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            max_len = max(max_len, i + 1)\n    return str(max_len)"
    },
    {
        "number": 1640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    d = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d += abs(a[i]-a[j])\n    return d"
    },
    {
        "number": 1641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s, t = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    gas = list(map(int, stdin.split()))\n    cars.sort()\n    gas.sort()\n    cars = cars[::-1]\n    gas = gas[::-1]\n    gas_pos = 0\n    for i in range(n):\n        if cars[i] > gas[gas_pos]:\n            gas_pos += 1\n    if gas_pos == k:\n        return cars[0]\n    else:\n        return -1"
    },
    {
        "number": 1642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort"
    },
    {
        "number": 1643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return stdin\n    if n == 2:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1]\n    if n == 3:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2]\n    if n == 4:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3]\n    if n == 5:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4]\n    if n == 6:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5]\n    if n == 7:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5] if stdin[0] < stdin[6] else stdin[6]\n    if n == 8:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5] if stdin[0] < stdin[6] else stdin[6] if stdin[0] < stdin[7] else stdin[7]\n    if n == 9:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5] if stdin[0] < stdin[6] else stdin[6] if stdin[0] < stdin[7] else stdin[7] if stdin[0] < stdin[8] else stdin[8]\n    if n == 10:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5] if stdin[0] < stdin[6] else stdin[6] if stdin[0] < stdin[7] else stdin[7] if stdin[0] < stdin[8] else stdin[8] if stdin[0] < stdin[9] else stdin[9]\n    if n == 11:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5] if stdin[0] < stdin[6] else stdin[6] if stdin[0] < stdin[7] else stdin[7] if stdin[0] < stdin[8] else stdin[8] if stdin[0] < stdin[9] else stdin[9] if stdin[0] < stdin[10] else stdin[10]\n    if n == 12:\n        return stdin[0] if stdin[0] < stdin[1] else stdin[1] if stdin[0] < stdin[2] else stdin[2] if stdin[0] < stdin[3] else stdin[3] if stdin[0] < stdin[4] else stdin[4] if stdin[0] < stdin[5] else stdin[5] if stdin[0] < stdin[6] else stdin[6] if stdin[0] < stdin[7] else stdin[7] if stdin[0] < stdin[8] else stdin[8] if stdin["
    },
    {
        "number": 1644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rings = []\n    for i in range(n):\n        a, b, h = map(int, stdin.split())\n        rings.append((a, b, h))\n    rings.sort(key=lambda x: x[1])\n    max_height = 0\n    for i in range(n):\n        if rings[i][1] > rings[i][0]:\n            max_height = max(max_height, rings[i][2])\n    return max_height\n"
    },
    {
        "number": 1645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1])!= 0:\n                good += 1\n    return str(good)"
    },
    {
        "number": 1646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s == \"1\":\n            return \"1\"\n        if s == \"0\":\n            return \"0\"\n        s = swap(s)\n        s = replace(s)\n\ndef"
    },
    {
        "number": 1647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t_shirt = stdin[1]\n    pullover = stdin[2]\n    t_shirt = list(t_shirt)\n    pullover = list(pullover)\n    t_shirt_dict = {}\n    pullover_dict = {}\n    for i in range(n):\n        t_shirt_dict[t_shirt[i]] = i\n        pullover_dict[pullover[i]] = i\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[0]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[0]))\n    t_shirt_dict = dict(sorted(t_shirt_dict.items(), key=lambda x: x[1]))\n    pullover_dict = dict(sorted(pullover_dict.items(), key=lambda x: x[1]))\n    t_shirt_dict = dict(s"
    },
    {
        "number": 1648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return '\\n'.join(str(bin(i).count('1')) for i in range(1, K + 1))"
    },
    {
        "number": 1649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A + B + C + D == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    count = 0\n    for a in range(L + 1):\n        for b in range(L + 1):\n            if a + b <= L:\n                count += 1\n                if a ^ b == a + b:\n                    count -= 1\n    return str(count)"
    },
    {
        "number": 1651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P = map(int, stdin.split())\n    for N in range(1, S + 1):\n        for M in range(1, S + 1):\n            if N + M == S and N * M == P:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s.endswith('dream') or s.endswith('dreamer'):\n            s += 'erase'\n        elif s.endswith('erase') or s.endswith('eraser'):\n            s += 'dream'\n        else:\n            break\n    return s"
    },
    {
        "number": 1653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    q = int(s[2])\n    for i in range(q):\n        a, b, c, d = map(int, s[i * 4 + 3].split())\n        if a <= b and c <= d:\n            if s[i * 4 + 1] == s[i * 4 + 2]:\n                print('1')\n            else:\n                print('0')\n        else:\n            print('0')\n    return ''\n\nsolution(input())"
    },
    {
        "number": 1654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('?', 'a')\n    s = s.replace('?', 'b')\n    s = s.replace('?', 'c')\n    s = s.replace('?', 'd')\n    s = s.replace('?', 'e')\n    s = s.replace('?', 'f')\n    s = s.replace('?', 'g')\n    s = s.replace('?', 'h')\n    s = s.replace('?', 'i')\n    s = s.replace('?', 'j')\n    s = s.replace('?', 'k')\n    s = s.replace('?', 'l')\n    s = s.replace('?','m')\n    s = s.replace('?', 'n')\n    s = s.replace('?', 'o')\n    s = s.replace('?', 'p')\n    s = s.replace('?', 'q')\n    s = s.replace('?', 'r')\n    s = s.replace('?','s')\n    s = s.replace('?', 't')\n    s = s.replace('?', 'u')\n    s = s.replace('?', 'v')\n    s = s.replace('?', 'w')\n    s = s.replace('?', 'x')\n    s = s.replace('?', 'y')\n    s = s.replace('?', 'z')\n    return s"
    },
    {
        "number": 1655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    cnt = 0\n    for i in range(n):\n        if l[i] > i:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 1656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n\ndef"
    },
    {
        "number": 1657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    devices = []\n    for i in range(n):\n        devices.append(list(map(int, stdin.split())))\n    charger = list(map(int, stdin.split()))\n    charger.append(0)\n    charger.sort()\n    charger.append(0)\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger.sort()\n    charger."
    },
    {
        "number": 1658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort()\n    d.reverse()\n    ans = 0\n    for i in range(n):\n        ans += d[i]\n        if ans > x:\n            break\n    return str(ans)"
    },
    {
        "number": 1659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort()\n    d.reverse()\n    # print(d)\n    # print(n, x)\n    # print(d)\n    # print(d[0])\n    # print(d[1])\n    # print(d[2])\n    # print(d[3])\n    # print(d[4])\n    # print(d[5])\n    # print(d[6])\n    # print(d[7])\n    # print(d[8])\n    # print(d[9])\n    # print(d[10])\n    # print(d[11])\n    # print(d[12])\n    # print(d[13])\n    # print(d[14])\n    # print(d[15])\n    # print(d[16])\n    # print(d[17])\n    # print(d[18])\n    # print(d[19])\n    # print(d[20])\n    # print(d[21])\n    # print(d[22])\n    # print(d[23])\n    # print(d[24])\n    # print(d[25])\n    # print(d[26])\n    # print(d[27])\n    # print(d[28])\n    # print(d[29])\n    # print(d[30])\n    # print(d[31])\n    # print(d[32])\n    # print(d[33])\n    # print(d[34])\n    # print(d[35])\n    # print(d[36])\n    # print(d[37])\n    # print(d[38])\n    # print(d[39])\n    # print(d[40])\n    # print(d[41])\n    # print(d[42])\n    # print(d[43])\n    # print(d[44])\n    # print(d[45])\n    # print(d[46])\n    # print(d[47])\n    # print(d[48])\n    # print(d[49])\n    # print(d[50])\n    # print(d[51])\n    # print(d[52])\n    # print(d[53])\n    # print(d[54])\n    # print(d[55])\n    # print(d[56])\n    # print(d[57])\n    # print(d[58])\n    # print(d[59])\n    # print(d[60])\n    # print(d[61])\n    # print(d[62])\n    # print(d[63])\n    # print(d[64])\n    # print(d[65])\n    # print(d[66])\n    # print(d[67])\n    # print(d[68])\n    # print(d[69])\n    # print(d[70])\n    # print(d[71])\n    # print(d[72])\n    # print(d[73])\n    # print(d[74])\n    # print(d[75])\n    # print(d[76])\n    # print(d[77])\n    # print(d[78])\n    # print(d[79])\n    # print(d[80])\n    # print(d[81])\n    # print(d[82])\n    # print(d[83])\n    # print(d[84])\n    # print(d[85])\n    # print(d[86])\n    # print(d[87])\n    # print(d[88])\n    # print(d[89])\n    # print(d[90])\n    # print(d[91])\n    # print(d[92])\n    # print(d[93])\n    # print(d[94])\n    # print(d[95])\n    # print(d[96])\n    # print(d[97])\n    # print(d[98])\n    # print(d[99])\n    # print(d[100])\n    # print(d[101])\n    # print(d[102])\n    # print(d[103])\n    # print(d[104])\n    # print(d[105])\n    # print(d[106])\n    # print(d[107])\n    # print(d[108])\n    # print(d[109])\n    # print(d[110])\n    # print(d[111])\n    # print(d[112])\n    # print(d[113])\n    # print(d[114])\n    # print(d[115])\n    # print(d[116])\n    # print(d[117])\n    # print(d[118])\n    # print(d[119])\n    # print(d[120])\n    # print(d[121])\n    # print(d[122])\n    # print(d[123])\n    # print(d[124])\n    # print(d[125])\n    # print(d[126])\n    # print(d[127])\n    # print(d[128])\n    # print(d[129])\n    # print(d[130])\n    # print(d[131])\n    # print(d[132])\n    # print(d[133])\n    # print(d[134])\n    # print(d[135])\n    # print(d[136])\n    # print(d[137])\n    # print(d[138])\n    # print(d[139])\n    # print(d[140])\n    # print(d[141])\n    # print(d[142])\n    # print(d[143])\n    # print(d[144])\n    # print(d[145])\n    # print(d[146])\n    # print(d[147])\n    # print(d[148])\n    # print(d[149])\n    # print(d[150])\n    # print(d[151])\n    # print(d[152])\n    # print(d[153])\n    # print(d[154])\n    # print(d[155"
    },
    {
        "number": 1660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n    visited = set()\n    visited.add(0)\n    max_edges = 0\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            stack = [(i, 0)]\n            while stack:\n                node, weight = stack.pop()\n                for nei, weight in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append((nei, weight + weight))\n            max_edges = max(max_edges, len(visited))\n    return str(max_edges)\n"
    },
    {
        "number": 1661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= c[i]:\n            count += 1\n            a[i] = a[i] - c[i]\n    return str(count)"
    },
    {
        "number": 1662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    n = len(b)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if b[i] < b[j]:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + 1\n    return str(n - dp[0][-1]) +'' +''.join(map(str, dp[0]))\n"
    },
    {
        "number": 1663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    s = s[::-1]\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('7', '')\n    s = s.replace('10', '')\n    s = s.replace('07', '')\n    s = s.replace('100', '')\n    s = s.replace('500', '')\n    s = s.replace('1000', '')\n    s = s.replace('5000', '')\n    s = s.replace('10000', '')\n    s = s.replace('50000', '')\n    s = s.replace('100000', '')\n    s = s.replace('500000', '')\n    s = s.replace('1000000', '')\n    s = s.replace('5000000', '')\n    s = s.replace('10000000', '')\n    s = s.replace('50000000', '')\n    s = s.replace('100000000', '')\n    s = s.replace('500000000', '')\n    s = s.replace('1000000000', '')\n    s = s.replace('5000000000', '')\n    s = s.replace('10000000000', '')\n    s = s.replace('50000000000', '')\n    s = s.replace('100000000000', '')\n    s = s.replace('500000000000', '')\n    s = s.replace('1000000000000', '')\n    s = s.replace('5000000000000', '')\n    s = s.replace('10000000000000', '')\n    s = s.replace('50000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000', '')\n    s = s.replace('500000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000000', '')\n    s = s.replace('500000000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000', '')\n    s = s.replace('500000000000000', '')\n    s = s.replace('10000000000000', '')\n    s = s.replace('50000000000000', '')\n    s = s.replace('1000000000000', '')\n    s = s.replace('5000000000000', '')\n    s = s.replace('100000000000', '')\n    s = s.replace('500000000000', '')\n    s = s.replace('10000000000', '')\n    s = s.replace('50000000000', '')\n    s = s.replace('1000000', '')\n    s = s.replace('5000000', '')\n    s = s.replace('10000000', '')\n    s = s.replace('50000000', '')\n    s = s.replace('100000000', '')\n    s = s.replace('500000000', '')\n    s = s.replace('1000000000', '')\n    s = s.replace('5000000000', '')\n    s = s.replace('10000000000', '')\n    s = s.replace('50000000000', '')\n    s = s.replace('100000000000', '')\n    s = s.replace('500000000000', '')\n    s = s.replace('1000000000000', '')\n    s = s.replace('5000000000000', '')\n    s = s.replace('10000000000000', '')\n    s = s.replace('50000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000', '')\n    s = s.replace('500000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000000', '')\n    s = s.replace('500000000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000', '')\n    s = s.replace('500000000000000', '')\n    s = s.replace('10000000000000', '')\n    s = s.replace('50000000000000', '')\n    s = s.replace('1000000000000', '')\n    s = s.replace('5000000000000', '')\n    s = s.replace('100000000000', '')\n    s = s.replace('500000000000', '')\n    s = s.replace('10000000000', '')\n    s = s.replace('50000000000', '')\n    s = s.replace('1000000', '')\n    s = s.replace('5000000', '')\n    s = s.replace('10000000', '')\n    s = s.replace('50000000', '')\n    s = s.replace('100000000', '')\n    s = s.replace('500000000', '')\n    s = s.replace('1000000000', '')\n    s = s.replace('5000000000', '')\n    s = s.replace('10000000000', '')\n    s = s.replace('50000000000', '')\n    s = s.replace('100000000000', '')\n    s = s.replace('500000000000', '')\n    s = s.replace('1000000000000', '')\n    s = s.replace('5000000000000', '')\n    s = s.replace('10000000000000', '')\n    s = s.replace('50000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000', '')\n    s = s.replace('500000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000000', '')\n    s = s.replace('500000000000000000', '')\n    s = s.replace('1000000000000000', '')\n    s = s.replace('5000000000000000', '')\n    s = s.replace('100000000000000', '')\n    s = s.replace('500000000000000', '')\n    s = s.replace('10000000000000', '')\n    s = s.replace('50000000000000', '')\n    s = s.replace('1000000000000', '')\n    s = s.replace('5000000000000', '')\n    s = s.replace('"
    },
    {
        "number": 1664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.splitlines()\n    res = lines[0]\n    for i in range(1, n):\n        res = res.replace(lines[i], lines[i].replace(lines[i], lines[i].replace(lines[i], lines[i])))\n    return res"
    },
    {
        "number": 1665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.split())\n        tree[u].append(v)\n        tree[v].append(u)\n    return''.join(map(str, sorted(set(map(lambda x: min(map(lambda y: y-1, x)), map(lambda x: sorted(x), tree)))))).strip()\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    if x == y:\n        return \"0\"\n    if x > y:\n        return \"1\"\n    if x < y:\n        return \"2\"\n    if x == y:\n        return \"3\"\n    if x == a and y == b:\n        return \"4\"\n    if x == a and y!= b:\n        return \"5\"\n    if x!= a and y == b:\n        return \"6\"\n    if x!= a and y!= b:\n        return \"7\"\n    if x == a and y == b:\n        return \"8\"\n    if x!= a and y!= b:\n        return \"9\"\n    if x == a and y == b:\n        return \"10\"\n    if x!= a and y!= b:\n        return \"11\"\n    if x == a and y == b:\n        return \"12\"\n    if x!= a and y!= b:\n        return \"13\"\n    if x == a and y == b:\n        return \"14\"\n    if x!= a and y!= b:\n        return \"15\"\n    if x == a and y == b:\n        return \"16\"\n    if x!= a and y!= b:\n        return \"17\"\n    if x == a and y == b:\n        return \"18\"\n    if x!= a and y!= b:\n        return \"19\"\n    if x == a and y == b:\n        return \"20\"\n    if x!= a and y!= b:\n        return \"21\"\n    if x == a and y == b:\n        return \"22\"\n    if x!= a and y!= b:\n        return \"23\"\n    if x == a and y == b:\n        return \"24\"\n    if x!= a and y!= b:\n        return \"25\"\n    if x == a and y == b:\n        return \"26\"\n    if x!= a and y!= b:\n        return \"27\"\n    if x == a and y == b:\n        return \"28\"\n    if x!= a and y!= b:\n        return \"29\"\n    if x == a and y == b:\n        return \"30\"\n    if x!= a and y!= b:\n        return \"31\"\n    if x == a and y == b:\n        return \"32\"\n    if x!= a and y!= b:\n        return \"33\"\n    if x == a and y == b:\n        return \"34\"\n    if x!= a and y!= b:\n        return \"35\"\n    if x == a and y == b:\n        return \"36\"\n    if x!= a and y!= b:\n        return \"37\"\n    if x == a and y == b:\n        return \"38\"\n    if x!= a and y!= b:\n        return \"39\"\n    if x == a and y == b:\n        return \"40\"\n    if x!= a and y!= b:\n        return \"41\"\n    if x == a and y == b:\n        return \"42\"\n    if x!= a and y!= b:\n        return \"43\"\n    if x == a and y == b:\n        return \"44\"\n    if x!= a and y!= b:\n        return \"45\"\n    if x == a and y == b:\n        return \"46\"\n    if x!= a and y!= b:\n        return \"47\"\n    if x == a and y == b:\n        return \"48\"\n    if x!= a and y!= b:\n        return \"49\"\n    if x == a and y == b:\n        return \"50\"\n    if x!= a and y!= b:\n        return \"51\"\n    if x == a and y == b:\n        return \"52\"\n    if x!= a and y!= b:\n        return \"53\"\n    if x == a and y == b:\n        return \"54\"\n    if x!= a and y!= b:\n        return \"55\"\n    if x == a and y == b:\n        return \"56\"\n    if x!= a and y!= b:\n        return \"57\"\n    if x == a and y == b:\n        return \"58\"\n    if x!= a and y!= b:\n        return \"59\"\n    if x == a and y == b:\n        return \"60\"\n    if x!= a and y!= b:\n        return \"61\"\n    if x == a and y == b:\n        return \"62\"\n    if x!= a and y!= b:\n        return \"63\"\n    if x == a and y == b:\n        return \"64\"\n    if x!= a and y!= b:\n        return \"65\"\n    if x == a and y == b:\n        return \"66\"\n    if x!= a and y!= b:\n        return \"67\"\n    if x == a and y == b:\n        return \"68\"\n    if x!= a and y!= b:\n        return \"69\"\n    if x == a and y == b:\n        return \"70\"\n    if x!= a and y!= b:\n        return \"71\"\n    if x == a and y == b:\n        return \"72\"\n    if x!= a and y!= b:\n        return \"73\"\n    if x == a and y == b:\n        return \"74\"\n    if x!= a and y!= b:\n        return \"75\"\n    if x == a and y == b:\n        return \"76\"\n    if x!= a and y!= b:\n        return \"77\"\n    if x == a and y == b:\n        return \"78\"\n    if x!= a and y!= b:\n        return \"79\"\n    if x == a and y == b:\n        return \"80\"\n    if x!= a and y!= b:\n        return \"81\"\n    if x == a and y == b:\n        return \"82\"\n    if x!= a and y!= b:\n        return \"83\"\n    if x == a and y == b:\n        return \"84\"\n    if x!= a and y!= b:\n        return \"85\"\n    if x == a and y == b:\n        return \"86\"\n    if x!= a and y!= b:\n        return \"87\"\n    if x == a and y == b:\n        return \"88\"\n    if x!= a and y!= b:\n        return \"89\"\n    if x == a and y == b:\n        return \"90\"\n    if x!= a and y!= b:\n        return \"91\"\n    if x == a and y == b:\n        return \"92\""
    },
    {
        "number": 1667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] > k:\n            k = a[i] - a[i - 1]\n    return str(k)"
    },
    {
        "number": 1668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        p = stdin.split()\n        p = list(map(int, p))\n        p.sort()\n        print(len(set(p)))\n    return"
    },
    {
        "number": 1669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    reserved_tokens = stdin.split()[1:]\n    lines = stdin.split('\\n')[1:]\n    lines = sorted(lines, key=lambda x: len(x))\n    lines = sorted(lines, key=lambda x: len(x.split()))\n    lines = sorted(lines, key=lambda x: len(x.split('(')))\n    lines = sorted(lines, key=lambda x: len(x.split(')')))\n    lines = sorted(lines, key=lambda x: len(x.split(';')))\n    lines = sorted(lines, key=lambda x: len(x.split('{')))\n    lines = sorted(lines, key=lambda x: len(x.split('}')))\n    lines = sorted(lines, key=lambda x: len(x.split(',')))\n    lines = sorted(lines, key=lambda x: len(x.split('.')))\n    lines = sorted(lines, key=lambda x: len(x.split('#')))\n    lines = sorted(lines, key=lambda x: len(x.split('+')))\n    lines = sorted(lines, key=lambda x: len(x.split('-')))\n    lines = sorted(lines, key=lambda x: len(x.split('*')))\n    lines = sorted(lines, key=lambda x: len(x.split('/')))\n    lines = sorted(lines, key=lambda x: len(x.split('%')))\n    lines = sorted(lines, key=lambda x: len(x.split('&')))\n    lines = sorted(lines, key=lambda x: len(x.split('|')))\n    lines = sorted(lines, key=lambda x: len(x.split('^')))\n    lines = sorted(lines, key=lambda x: len(x.split('<<')))\n    lines = sorted(lines, key=lambda x: len(x.split('>>')))\n    lines = sorted(lines, key=lambda x: len(x.split('>>>')))\n    lines = sorted(lines, key=lambda x: len(x.split('==')))\n    lines = sorted(lines, key=lambda x: len(x.split('!=')))\n    lines = sorted(lines, key=lambda x: len(x.split('<')))\n    lines = sorted(lines, key=lambda x: len(x.split('>')))\n    lines = sorted(lines, key=lambda x: len(x.split('<=')))\n    lines = sorted(lines, key=lambda x: len(x.split('>=')))\n    lines = sorted(lines, key=lambda x: len(x.split('<>')))\n    lines = sorted(lines, key=lambda x: len(x.split('!<')))\n    lines = sorted(lines, key=lambda x: len(x.split('!>')))\n    lines = sorted(lines, key=lambda x: len(x.split('!<=')))\n    lines = sorted(lines, key=lambda x: len(x.split('!>=')))\n    lines = sorted(lines, key=lambda x: len(x.split('!=')))\n    lines = sorted(lines, key=lambda x: len(x.split('&&')))\n    lines = sorted(lines, key=lambda x: len(x.split('||')))\n    lines = sorted(lines, key=lambda x: len(x.split('==')))\n    lines = sorted(lines, key=lambda x: len(x.split('!=')))\n    lines = sorted(lines,"
    },
    {
        "number": 1670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    teams = {'MC': 0, 'CSKA': 0}\n    for line in stdin.splitlines():\n        if line.startswith('MC'):\n            teams['MC'] += 1\n        elif line.startswith('CSKA'):\n            teams['CSKA'] += 1\n        else:\n            minute, letter, player, team = line.split()\n            minute = int(minute)\n            if letter == 'y':\n                teams[team] += 1\n                teams[player] += 1\n            elif letter == 'r':\n                teams[team] += 1\n                teams[player] += 1\n    return '\\n'.join(f'{team} {player} {minute}' for team, (player, minute) in teams.items())\n"
    },
    {
        "number": 1671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = list(map(int, stdin.split()))\n    m.sort()\n    print(m)\n    print(m[0] - m[-1])\n    return\n"
    },
    {
        "number": 1672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    magnets = []\n    for i in range(n):\n        magnets.append(stdin[i])\n    groups = 0\n    while len(magnets) > 1:\n        if magnets[0] == '1' and magnets[1] == '1':\n            groups += 1\n            magnets = magnets[2:]\n        elif magnets[0] == '1' and magnets[1] == '0':\n            magnets = magnets[2:]\n        elif magnets[0] == '0' and magnets[1] == '1':\n            magnets = magnets[2:]\n        elif magnets[0] == '0' and magnets[1] == '0':\n            magnets = magnets[2:]\n    return str(groups)\n\nsolution(input())\n\ndef"
    },
    {
        "number": 1673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(min(abs(a[i] - a[j]), abs(a[i] - a[j])) for i in range(len(a)) for j in range(i + 1, len(a)))) % 998244353"
    },
    {
        "number": 1674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    hits = list(map(int, stdin.split()))\n    hits.sort()\n    dmg = 0\n    for i in range(n):\n        if i == 0:\n            dmg += hits[i]\n        else:\n            if hits[i] - hits[i - 1] <= k:\n                dmg += hits[i]\n            else:\n                break\n    return str(dmg)\n"
    },
    {
        "number": 1675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    teams = []\n    for i in range(n):\n        teams.append([int(x) for x in stdin.split()])\n    teams.sort()\n    home_games = 0\n    away_games = 0\n    for i in range(n):\n        if teams[i][0] == teams[i][1]:\n            home_games += 1\n        else:\n            away_games += 1\n    return str(home_games) + \" \" + str(away_games)\n"
    },
    {
        "number": 1676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    queries = []\n    for _ in range(n):\n        t, d = map(int, stdin.split())\n        queries.append((t, d))\n    queries.sort()\n    queries = deque(queries)\n    server_busy = False\n    server_busy_queries = 0\n    server_busy_time = 0\n    while queries:\n        t, d = queries.popleft()\n        if not server_busy and not server_busy_queries:\n            server_busy = True\n            server_busy_time = t\n        if server_busy:\n            if not server_busy_queries:\n                server_busy_queries += 1\n            if server_busy_queries < b:\n                server_busy_queries += 1\n            else:\n                server_busy_queries = 0\n                server_busy = False\n        if server_busy:\n            server_busy_time = max(server_busy_time, t)\n        if server_busy_queries:\n            server_busy_queries -= 1\n        if server_busy:\n            queries.append((t, d))\n        else:\n            print(server_busy_time, end=\" \")\n    return stdin"
    },
    {
        "number": 1677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if b[i] == b[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n"
    },
    {
        "number": 1678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(a[i:j + 1]) < t:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    return int(s, 2)"
    },
    {
        "number": 1680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a[i] ^ a[j]) & (a["
    },
    {
        "number": 1681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if n == 1:\n        return -1\n    if m == 1:\n        return n\n    if n == m:\n        return n * m\n    if n > m:\n        return -1\n    if n < m:\n        return -1\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n        return n * m\n    if n == m:\n"
    },
    {
        "number": 1682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    b.reverse()\n    i = 0\n    j = 0\n    s = 0\n    while i < n and j < n:\n        if a[i] <= k:\n            s += a[i]\n            i += 1\n        else:\n            s += b[j]\n            j += 1\n    return str(s)"
    },
    {
        "number": 1683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res += f(a[i], a[j])\n    return str(res % 998244353)\n\n\ndef"
    },
    {
        "number": 1684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        segments.append((a, b))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        if segments[i - 1][1]!= segments[i][0]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 1685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    tree = [0] * (n + 1)\n    for i in range(1, n + 1):\n        tree[i] = i\n    for _ in range(q):\n        u, s = map(str, stdin.split())\n        u = int(u)\n        s = s.replace('R', '1').replace('L', '0').replace('U', '-1')\n        s = list(s)\n        s = list(map(int, s))\n        for i in range(len(s)):\n            if s[i] == -1:\n                s[i] = tree[u]\n                u = tree[u]\n            else:\n                u = tree[u]\n        print(u)\n    return ''"
    },
    {
        "number": 1686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ip_addresses = list(map(lambda x: x.split('.'), stdin.splitlines()))\n    ip_addresses = sorted(ip_addresses, key=lambda x: x[0])\n    subnet_masks = []\n    for i in range(n):\n        if i == 0:\n            subnet_masks.append(ip_addresses[i][0] + '.' + ip_addresses[i][1] + '.' + ip_addresses[i][2] + '.' + ip_addresses[i][3])\n        else:\n            if ip_addresses[i][0] == ip_addresses[i - 1][0]:\n                subnet_masks.append(ip_addresses[i][0] + '.' + ip_addresses[i][1] + '.' + ip_addresses[i][2] + '.' + ip_addresses[i][3])\n            else:\n                subnet_masks.append(ip_addresses[i][0] + '.' + ip_addresses[i][1] + '.' + ip_addresses[i][2] + '.' + ip_addresses[i][3])\n    subnet_masks = sorted(subnet_masks)\n    for i in range(len(subnet_masks)):\n        if subnet_masks[i].count('1') == k:\n            return subnet_masks[i]\n    return '-1'\n"
    },
    {
        "number": 1687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i] % a[0]!= 0:\n            return str(a[0])\n    return str(-1)"
    },
    {
        "number": 1688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = [-1] * n\n    for i in range(n):\n        if a[i] < max(a[i+1], a[i+2], a[i+3], a[i+4], a[i+5], a[i+6]):\n            res[i] = 1\n        else:\n            res[i] = -1\n    return \" \".join(map(str, res))"
    },
    {
        "number": 1689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    seats = stdin.splitlines()[1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                if seats[i][j+1] == 'O' and seats[i][j-1] == 'O':\n                    seats[i] = seats[i][:j] + '+' + seats[i][j+1:]\n                elif seats[i][j+1] == 'O' and seats[i][j-1] == 'X':\n                    seats[i] = seats[i][:j] + '+' + seats[i][j+1:]\n                elif seats[i][j-1] == 'O' and seats[i][j+1] == 'X':\n                    seats[i] = seats[i][:j] + '+' + seats[i][j+1:]\n                else:\n                    seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == '+':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == '+':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == '+':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == '+':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                seats[i] = seats[i][:j] + 'X' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'X':\n                seats[i] = seats[i][:j] + 'O' + seats[i][j+1:]\n    for i in range(n):\n        for j in range(n"
    },
    {
        "number": 1690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + a[i])\n    return str(max(max(dp)))"
    },
    {
        "number": 1691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == k:\n        return str(n)\n    if n == k + 1:\n        return str(n)\n    if n == k - 1:\n        return str(n)\n    if n == k - 2:\n        return str(n)\n    if n == k - 3:\n        return str(n)\n    if n == k - 4:\n        return str(n)\n    if n == k - 5:\n        return str(n)\n    if n == k - 6:\n        return str(n)\n    if n == k - 7:\n        return str(n)\n    if n == k - 8:\n        return str(n)\n    if n == k - 9:\n        return str(n)\n    if n == k - 10:\n        return str(n)\n    if n == k - 11:\n        return str(n)\n    if n == k - 12:\n        return str(n)\n    if n == k - 13:\n        return str(n)\n    if n == k - 14:\n        return str(n)\n    if n == k - 15:\n        return str(n)\n    if n == k - 16:\n        return str(n)\n    if n == k - 17:\n        return str(n)\n    if n == k - 18:\n        return str(n)\n    if n == k - 19:\n        return str(n)\n    if n == k - 20:\n        return str(n)\n    if n == k - 21:\n        return str(n)\n    if n == k - 22:\n        return str(n)\n    if n == k - 23:\n        return str(n)\n    if n == k - 24:\n        return str(n)\n    if n == k - 25:\n        return str(n)\n    if n == k - 26:\n        return str(n)\n    if n == k - 27:\n        return str(n)\n    if n == k - 28:\n        return str(n)\n    if n == k - 29:\n        return str(n)\n    if n == k - 30:\n        return str(n)\n    if n == k - 31:\n        return str(n)\n    if n == k - 32:\n        return str(n)\n    if n == k - 33:\n        return str(n)\n    if n == k - 34:\n        return str(n)\n    if n == k - 35:\n        return str(n)\n    if n == k - 36:\n        return str(n)\n    if n == k - 37:\n        return str(n)\n    if n == k - 38:\n        return str(n)\n    if n == k - 39:\n        return str(n)\n    if n == k - 40:\n        return str(n)\n    if n == k - 41:\n        return str(n)\n    if n == k - 42:\n        return str(n)\n    if n == k - 43:\n        return str(n)\n    if n == k - 44:\n        return str(n)\n    if n == k - 45:\n        return str(n)\n    if n == k - 46:\n        return str(n)\n    if n == k - 47:\n        return str(n)\n    if n == k - 48:\n        return str(n)\n    if n == k - 49:\n        return str(n)\n    if n == k - 50:\n        return str(n)\n    if n == k - 51:\n        return str(n)\n    if n == k - 52:\n        return str(n)\n    if n == k - 53:\n        return str(n)\n    if n == k - 54:\n        return str(n)\n    if n == k - 55:\n        return str(n)\n    if n == k - 56:\n        return str(n)\n    if n == k - 57:\n        return str(n)\n    if n == k - 58:\n        return str(n)\n    if n == k - 59:\n        return str(n)\n    if n == k - 60:\n        return str(n)\n    if n == k - 61:\n        return str(n)\n    if n == k - 62:\n        return str(n)\n    if n == k - 63:\n        return str(n)\n    if n == k - 64:\n        return str(n)\n    if n == k - 65:\n        return str(n)\n    if n == k - 66:\n        return str(n)\n    if n == k - 67:\n        return str(n)\n    if n == k - 68:\n        return str(n)\n    if n == k - 69:\n        return str(n)\n    if n == k - 70:\n        return str(n)\n    if n == k - 71:\n        return str(n)\n    if n == k - 72:\n        return str(n)\n    if n == k - 73:\n        return str(n)\n    if n == k - 74:\n        return str(n)\n    if n == k - 75:\n        return str(n)\n    if n == k - 76:\n        return str(n)\n    if n == k - 77:\n        return str(n)\n    if n == k - 78:\n        return str(n)\n    if n == k - 79:\n        return str(n)\n    if n == k - 80:\n        return str(n)\n    if n == k - 81:\n        return str(n)\n    if n == k - 82:\n        return str(n)\n    if n == k - 83:\n        return str(n)\n    if n == k - 84:\n        return str(n)\n    if n == k - 85:\n        return str(n)\n    if n == k - 86:\n        return str(n)\n    if n == k - 87:\n        return str(n)\n    if n == k - 88:\n        return str(n)\n    if n == k - 89:\n        return str(n)\n    if n == k - 90:\n        return str(n)\n    if n == k - 91:\n        return str(n)\n    if n == k - 92:\n        return str(n)\n    if n == k - 93:\n        return str(n)\n    if n == k - 94:\n        return str(n)\n    if n == k - 95:\n        return str(n)\n    if n == k - 96:\n        return str(n)\n    if n == k - 97:\n        return str(n)\n"
    },
    {
        "number": 1692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 4 == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = list(map(int, stdin.split()))\n    m.sort()\n    max_floor = m[-1]\n    max_floor_count = 1\n    for i in range(len(m) - 1, -1, -1):\n        if m[i] == max_floor:\n            max_floor_count += 1\n        else:\n            break\n    if max_floor_count > n:\n        return \"impossible\"\n    else:\n        return \" \".join(map(str, m[:max_floor_count]))\n"
    },
    {
        "number": 1694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, f = map(int, stdin.split())\n    spy_lst = list(map(int, stdin.split()))\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy_lst[:m]\n    spy_lst.sort()\n    spy_lst.reverse()\n    spy_lst = spy"
    },
    {
        "number": 1695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    students = []\n    for _ in range(n):\n        students.append(stdin.split())\n    scores = []\n    for _ in range(m):\n        scores.append(list(map(int, stdin.split())))\n    scores = sorted(scores, key=lambda x: x[0])\n    scores = sorted(scores, key=lambda x: x[1])\n    scores = sorted(scores, key=lambda x: x[2])\n    scores = sorted(scores, key=lambda x: x[3])\n    scores = sorted(scores, key=lambda x: x[4])\n    scores = sorted(scores, key=lambda x: x[5])\n    scores = sorted(scores, key=lambda x: x[6])\n    scores = sorted(scores, key=lambda x: x[7])\n    scores = sorted(scores, key=lambda x: x[8])\n    scores = sorted(scores, key=lambda x: x[9])\n    scores = sorted(scores, key=lambda x: x[10])\n    scores = sorted(scores, key=lambda x: x[11])\n    scores = sorted(scores, key=lambda x: x[12])\n    scores = sorted(scores, key=lambda x: x[13])\n    scores = sorted(scores, key=lambda x: x[14])\n    scores = sorted(scores, key=lambda x: x[15])\n    scores = sorted(scores, key=lambda x: x[16])\n    scores = sorted(scores, key=lambda x: x[17])\n    scores = sorted(scores, key=lambda x: x[18])\n    scores = sorted(scores, key=lambda x: x[19])\n    scores = sorted(scores, key=lambda x: x[20])\n    scores = sorted(scores, key=lambda x: x[21])\n    scores = sorted(scores, key=lambda x: x[22])\n    scores = sorted(scores, key=lambda x: x[23])\n    scores = sorted(scores, key=lambda x: x[24])\n    scores = sorted(scores, key=lambda x: x[25])\n    scores = sorted(scores, key=lambda x: x[26])\n    scores = sorted(scores, key=lambda x: x[27])\n    scores = sorted(scores, key=lambda x: x[28])\n    scores = sorted(scores, key=lambda x: x[29])\n    scores = sorted(scores, key=lambda x: x[30])\n    scores = sorted(scores, key=lambda x: x[31])\n    scores = sorted(scores, key=lambda x: x[32])\n    scores = sorted(scores, key=lambda x: x[33])\n    scores = sorted(scores, key=lambda x: x[34])\n    scores = sorted(scores, key=lambda x: x[35])\n    scores = sorted(scores, key=lambda x: x[36])\n    scores = sorted(scores, key=lambda x: x[37])\n    scores = sorted(scores, key=lambda x: x[38])\n    scores = sorted(scores, key=lambda x: x[39])\n    scores = sorted(scores, key=lambda x: x[40])\n    scores = sorted(scores, key=lambda x: x[41])\n    scores = sorted(scores, key=lambda x: x[42])\n    scores = sorted(scores, key=lambda x: x[43])\n    scores = sorted(scores, key=lambda x: x[44])\n    scores = sorted(scores, key=lambda x: x[45])\n    scores = sorted(scores, key=lambda x: x[46])\n    scores = sorted(scores, key=lambda x: x[47])\n    scores = sorted(scores, key=lambda x: x[48])\n    scores = sorted(scores, key=lambda x: x[49])\n    scores = sorted(scores, key=lambda x: x[50])\n    scores = sorted(scores, key=lambda x: x[51])\n    scores = sorted(scores, key=lambda x: x[52])\n    scores = sorted(scores, key=lambda x: x[53])\n    scores = sorted(scores, key=lambda x: x[54])\n    scores = sorted(scores, key=lambda x: x[55])\n    scores = sorted(scores, key=lambda x: x[56])\n    scores = sorted(scores, key=lambda x: x[57])\n    scores = sorted(scores, key=lambda x: x[58])\n    scores = sorted(scores, key=lambda x: x[59])\n    scores = sorted(scores, key=lambda x: x[60])\n    scores = sorted(scores, key=lambda x: x[61])\n    scores = sorted(scores, key=lambda x: x[62])\n    scores = sorted(scores, key=lambda x: x[63])\n    scores = sorted(scores, key=lambda x: x[64])\n    scores = sorted(scores, key=lambda x: x[65])\n    scores = sorted(scores, key=lambda x: x[66])\n    scores = sorted(scores, key=lambda x: x[67])\n    scores = sorted(scores, key=lambda x: x[68])\n    scores = sorted(scores, key=lambda x: x[69])\n    scores = sorted(scores, key=lambda x: x[70])\n    scores = sorted(scores, key=lambda x: x[71])\n    scores = sorted(scores, key=lambda x: x[72])\n    scores = sorted(scores, key=lambda x: x[73])\n    scores = sorted(scores, key=lambda x: x[74])\n    scores = sorted(scores, key=lambda x: x[75])\n    scores = sorted(scores, key=lambda x: x[76])\n    scores = sorted(scores, key=lambda x: x[77])\n    scores = sorted(scores, key=lambda x: x[78])\n"
    },
    {
        "number": 1696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    return str(min(n * m, k + 1) - 1)"
    },
    {
        "number": 1697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [[stdin[i][j] for j in range(m)] for i in range(n)]\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'B':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'R':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'A':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'N':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'P':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Q':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'S':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'T':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'U':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'V':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'X':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Z':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'K':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'L':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'M':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'N':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'O':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'P':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Q':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'R':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'S':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'T':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'U':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'V':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'X':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Z':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'K':\n                visited.add((i, j))\n                break\n    for i in range(n):\n        for j in range(m):\n            if board"
    },
    {
        "number": 1698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    floors = list(map(int, stdin.split()))\n    floors.sort()\n    # print(floors)\n    # print(n, k)\n    # print(floors)\n    # print(len(floors))\n    # print(len(floors) - 1)\n    # print(len(floors) - 2)\n    # print(len(floors) - 3)\n    # print(len(floors) - 4)\n    # print(len(floors) - 5)\n    # print(len(floors) - 6)\n    # print(len(floors) - 7)\n    # print(len(floors) - 8)\n    # print(len(floors) - 9)\n    # print(len(floors) - 10)\n    # print(len(floors) - 11)\n    # print(len(floors) - 12)\n    # print(len(floors) - 13)\n    # print(len(floors) - 14)\n    # print(len(floors) - 15)\n    # print(len(floors) - 16)\n    # print(len(floors) - 17)\n    # print(len(floors) - 18)\n    # print(len(floors) - 19)\n    # print(len(floors) - 20)\n    # print(len(floors) - 21)\n    # print(len(floors) - 22)\n    # print(len(floors) - 23)\n    # print(len(floors) - 24)\n    # print(len(floors) - 25)\n    # print(len(floors) - 26)\n    # print(len(floors) - 27)\n    # print(len(floors) - 28)\n    # print(len(floors) - 29)\n    # print(len(floors) - 30)\n    # print(len(floors) - 31)\n    # print(len(floors) - 32)\n    # print(len(floors) - 33)\n    # print(len(floors) - 34)\n    # print(len(floors) - 35)\n    # print(len(floors) - 36)\n    # print(len(floors) - 37)\n    # print(len(floors) - 38)\n    # print(len(floors) - 39)\n    # print(len(floors) - 40)\n    # print(len(floors) - 41)\n    # print(len(floors) - 42)\n    # print(len(floors) - 43)\n    # print(len(floors) - 44)\n    # print(len(floors) - 45)\n    # print(len(floors) - 46)\n    # print(len(floors) - 47)\n    # print(len(floors) - 48)\n    # print(len(floors) - 49)\n    # print(len(floors) - 50)\n    # print(len(floors) - 51)\n    # print(len(floors) - 52)\n    # print(len(floors) - 53)\n    # print(len(floors) - 54)\n    # print(len(floors) - 55)\n    # print(len(floors) - 56)\n    # print(len(floors) - 57)\n    # print(len(floors) - 58)\n    # print(len(floors) - 59)\n    # print(len(floors) - 60)\n    # print(len(floors) - 61)\n    # print(len(floors) - 62)\n    # print(len(floors) - 63)\n    # print(len(floors) - 64)\n    # print(len(floors) - 65)\n    # print(len(floors) - 66)\n    # print(len(floors) - 67)\n    # print(len(floors) - 68)\n    # print(len(floors) - 69)\n    # print(len(floors) - 70)\n    # print(len(floors) - 71)\n    # print(len(floors) - 72)\n    # print(len(floors) - 73)\n    # print(len(floors) - 74)\n    # print(len(floors) - 75)\n    # print(len(floors) - 76)\n    # print(len(floors) - 77)\n    # print(len(floors) - 78)\n    # print(len(floors) - 79)\n    # print(len(floors) - 80)\n    # print(len(floors) - 81)\n    # print(len(floors) - 82)\n    # print(len(floors) - 83)\n    # print(len(floors) - 84)\n    # print(len(floors) - 85)\n    # print(len(floors) - 86)\n    # print(len(floors) - 87)\n    # print(len(floors) - 88)\n    # print(len(floors) - 89)\n    # print(len(floors) - 90)\n    # print(len(floors) - 91)\n    # print(len(floors) - 92)\n    # print(len(floors) - 93)\n    # print(len(floors) - 94)\n    # print(len(floors) - 95)\n    # print(len(floors) - 96)\n    # print(len(floors) - 97)\n    # print(len(floors) - 98)\n    # print(len(floors) - 99)\n    # print(len(floors) - 100)\n    # print(len(floors) - 101)\n    # print(len(floors) - 102)\n    # print(len(floors) - 103)\n    # print(len(floors) - 104)\n    # print(len(floors) - 105)\n    # print(len(floors) - 106)\n    # print(len(floors) - 107)\n    # print(len(floors) - 108)\n    # print(len(floors) - 109)\n    # print(len(floors) - 110)\n    # print(len(floors) - 111)\n    # print(len(floors)"
    },
    {
        "number": 1699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            print(i, j)\n    return \"\""
    },
    {
        "number": 1700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace(\"(\", \" ( \").replace(\")\", \" ) \")\n    r = []\n    b = []\n    for i in range(n):\n        if s[i] == \"(\":\n            r.append(i)\n        else:\n            b.append(i)\n    if len(r) == 0:\n        return \"0\"\n    if len(r) == 1:\n        return \"1\"\n    if len(r) == 2:\n        if r[0] < r[1]:\n            return \"0\"\n        else:\n            return \"1\"\n    if len(r) == 3:\n        if r[0] < r[1] and r[1] < r[2]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] > r[2]:\n            return \"1\"\n        elif r[0] > r[1] and r[1] < r[2]:\n            return \"1\"\n        else:\n            return \"0\"\n    if len(r) == 4:\n        if r[0] < r[1] and r[1] < r[2] and r[2] < r[3]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] > r[3]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] < r[3]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] > r[3]:\n            return \"0\"\n        elif r[0] > r[1] and r[1] < r[2] and r[2] < r[3]:\n            return \"1\"\n        elif r[0] > r[1] and r[1] < r[2] and r[2] > r[3]:\n            return \"0\"\n        elif r[0] > r[1] and r[1] > r[2] and r[2] < r[3]:\n            return \"1\"\n        else:\n            return \"0\"\n    if len(r) == 5:\n        if r[0] < r[1] and r[1] < r[2] and r[2] < r[3] and r[3] < r[4]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] < r[3] and r[3] > r[4]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] > r[3] and r[3] < r[4]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] > r[3] and r[3] > r[4]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] < r[3] and r[3] < r[4]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] < r[3] and r[3] > r[4]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] > r[3] and r[3] < r[4]:\n            return \"1\"\n        else:\n            return \"0\"\n    if len(r) == 6:\n        if r[0] < r[1] and r[1] < r[2] and r[2] < r[3] and r[3] < r[4] and r[4] < r[5]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] < r[3] and r[3] < r[4] and r[4] > r[5]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] < r[3] and r[3] > r[4] and r[4] < r[5]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] < r[2] and r[2] < r[3] and r[3] > r[4] and r[4] > r[5]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] < r[3] and r[3] < r[4] and r[4] < r[5]:\n            return \"1\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] < r[3] and r[3] < r[4] and r[4] > r[5]:\n            return \"0\"\n        elif r[0] < r[1] and r[1] > r[2] and r[2] > r[3] and r[3] < r[4] and"
    },
    {
        "number": 1701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    servers = {}\n    for _ in range(n):\n        name, ip, *_ = stdin.split()\n        servers[ip] = name\n    commands = stdin.split(\"\\n\")[m:]\n    for command in commands:\n        command = command.split(\";\")\n        command[-1] = servers[command[-1]]\n        command = \";\".join(command)\n        print(command)\n    return \"\"\n"
    },
    {
        "number": 1702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    data.sort()\n    data.reverse()\n    data = list(map(lambda x: x * -1, data))\n    "
    },
    {
        "number": 1703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(n) for j in range(i) if is_regular(i, j)))\n\n\ndef"
    },
    {
        "number": 1704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n    segments = [0] + segments\n    segments = segments[:n]\n    segments = [segments[i] for i in range(n)]\n    segments = [segments[i] for i in range(n) if segments[i] == 1]\n    segments = [segments[i] for i in range(n) if segments[i] == 0]\n    segments = segments[:k]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k)]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 1]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments[i] == 0]\n    segments = segments[::-1]\n    segments = [segments[i] for i in range(k) if segments["
    },
    {
        "number": 1705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    doors = list(map(int, stdin.split()))\n    left = 0\n    right = 0\n    for i in range(n):\n        if doors[i] == 0:\n            left += 1\n        else:\n            right += 1\n    if left == right:\n        return str(left)\n    else:\n        return str(left + 1)"
    },
    {
        "number": 1706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 0\n    while True:\n        if s == s[::-1]:\n            break\n        if k == 30:\n            break\n        if k % 2 == 0:\n            s = s[::-1] + s\n        else:\n            s = s + s[::-1]\n        k += 1\n    return k"
    },
    {
        "number": 1707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) == abs(a[i] + a[j]):\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 1708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    res = 0\n    for i in range(m):\n        res += c[a[i] - 1]\n    return str(res)\n"
    },
    {
        "number": 1709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    trees = list(map(int, stdin.split()))\n    colors = [0] * n\n    for i in range(n):\n        colors[i] = int(trees[i]!= 0)\n    colors.sort()\n    if colors[0]!= 0:\n        return -1\n    if k == 0:\n        return 0\n    if k == 1:\n        return sum(trees)\n    if k == 2:\n        return sum(trees) * 2\n    if k == 3:\n        return sum(trees) * 3\n    if k == 4:\n        return sum(trees) * 4\n    if k == 5:\n        return sum(trees) * 5\n    if k == 6:\n        return sum(trees) * 6\n    if k == 7:\n        return sum(trees) * 7\n    if k == 8:\n        return sum(trees) * 8\n    if k == 9:\n        return sum(trees) * 9\n    if k == 10:\n        return sum(trees) * 10\n    if k == 11:\n        return sum(trees) * 11\n    if k == 12:\n        return sum(trees) * 12\n    if k == 13:\n        return sum(trees) * 13\n    if k == 14:\n        return sum(trees) * 14\n    if k == 15:\n        return sum(trees) * 15\n    if k == 16:\n        return sum(trees) * 16\n    if k == 17:\n        return sum(trees) * 17\n    if k == 18:\n        return sum(trees) * 18\n    if k == 19:\n        return sum(trees) * 19\n    if k == 20:\n        return sum(trees) * 20\n    if k == 21:\n        return sum(trees) * 21\n    if k == 22:\n        return sum(trees) * 22\n    if k == 23:\n        return sum(trees) * 23\n    if k == 24:\n        return sum(trees) * 24\n    if k == 25:\n        return sum(trees) * 25\n    if k == 26:\n        return sum(trees) * 26\n    if k == 27:\n        return sum(trees) * 27\n    if k == 28:\n        return sum(trees) * 28\n    if k == 29:\n        return sum(trees) * 29\n    if k == 30:\n        return sum(trees) * 30\n    if k == 31:\n        return sum(trees) * 31\n    if k == 32:\n        return sum(trees) * 32\n    if k == 33:\n        return sum(trees) * 33\n    if k == 34:\n        return sum(trees) * 34\n    if k == 35:\n        return sum(trees) * 35\n    if k == 36:\n        return sum(trees) * 36\n    if k == 37:\n        return sum(trees) * 37\n    if k == 38:\n        return sum(trees) * 38\n    if k == 39:\n        return sum(trees) * 39\n    if k == 40:\n        return sum(trees) * 40\n    if k == 41:\n        return sum(trees) * 41\n    if k == 42:\n        return sum(trees) * 42\n    if k == 43:\n        return sum(trees) * 43\n    if k == 44:\n        return sum(trees) * 44\n    if k == 45:\n        return sum(trees) * 45\n    if k == 46:\n        return sum(trees) * 46\n    if k == 47:\n        return sum(trees) * 47\n    if k == 48:\n        return sum(trees) * 48\n    if k == 49:\n        return sum(trees) * 49\n    if k == 50:\n        return sum(trees) * 50\n    if k == 51:\n        return sum(trees) * 51\n    if k == 52:\n        return sum(trees) * 52\n    if k == 53:\n        return sum(trees) * 53\n    if k == 54:\n        return sum(trees) * 54\n    if k == 55:\n        return sum(trees) * 55\n    if k == 56:\n        return sum(trees) * 56\n    if k == 57:\n        return sum(trees) * 57\n    if k == 58:\n        return sum(trees) * 58\n    if k == 59:\n        return sum(trees) * 59\n    if k == 60:\n        return sum(trees) * 60\n    if k == 61:\n        return sum(trees) * 61\n    if k =="
    },
    {
        "number": 1710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] * arr[j] == k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(1 for i in range(1, n) if all(i < j for j in range(i, n)) and all(i > j for j in range(i, n)))) % 998244353"
    },
    {
        "number": 1712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    vanya = 0\n    vova = 0\n    for i in range(n):\n        if vanya == vova:\n            return \"Both\"\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if vanya == 0:\n            vanya = 1\n        if vova == 0:\n            vova = 1\n        if vanya == 1:\n            vanya = 0\n        if vova == 1:\n            vova = 0\n        if v"
    },
    {
        "number": 1713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    if n == 1:\n        if s == t:\n            return 0\n        else:\n            return -1\n    else:\n        if s == t:\n            return -1\n        else:\n            if s > t:\n                return -1\n            else:\n                if s == 1:\n                    if t == n:\n                        return 0\n                    else:\n                        return -1\n                else:\n                    if t == n:\n                        return 0\n                    else:\n                        if t - s == 1:\n                            return 1\n                        else:\n                            return -1\n                return -1"
    },
    {
        "number": 1714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \" \".join(map(str, [i for i in range(1, n + 1) if abs(i - (i - 1)) <= k]))"
    },
    {
        "number": 1715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, Q = map(int, stdin.split())\n    shrine_dist = []\n    temple_dist = []\n    for i in range(A):\n        shrine_dist.append(int(input()))\n    for i in range(B):\n        temple_dist.append(int(input()))\n    shrine_dist.sort()\n    temple_dist.sort()\n    for i in range(Q):\n        x = int(input())\n        if x <= shrine_dist[0]:\n            print(shrine_dist[0])\n        elif x >= temple_dist[-1]:\n            print(temple_dist[-1])\n        else:\n            left = 0\n            right = len(shrine_dist) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if shrine_dist[mid] == x:\n                    print(shrine_dist[mid])\n                    break\n                elif shrine_dist[mid] < x:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n    return ''"
    },
    {
        "number": 1716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    trains = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        trains[l].append(r)\n        trains[r].append(l)\n    res = []\n    for _ in range(q):\n        p, q = map(int, stdin.split())\n        res.append(len([i for i in trains[p] if i <= q]))\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 1717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 1\n    while x < 10**13:\n        if x % N == 1:\n            return str(x)\n        x += 1\n    return str(x)"
    },
    {
        "number": 1718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, N):\n        if A[i] < A[i - 1]:\n            ans += 1\n            A[i - 1] = A[i]\n            A[i] = min(A[i], A[i - 1])\n    return str(ans)"
    },
    {
        "number": 1719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if is_valid(i):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 1720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cans = [list(stdin[i]) for i in range(n * m)]\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x1, y1, x2, y2 = x1 - 1, y1 - 1, x2 - 1, y2 - 1\n    visited = set()\n    visited.add((x1, y1))\n    visited.add((x2, y2))\n    q = deque([(x1, y1, 0)])\n    while q:\n        x, y, t = q.popleft()\n        if x == x2 and y == y2:\n            return t\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                if cans[nx][ny] == '#':\n                    continue\n                visited.add((nx, ny))\n                q.append((nx, ny, t + 1))\n    return -1\n\n\ndef"
    },
    {
        "number": 1721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:"
    },
    {
        "number": 1722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students = []\n    for i in range(n):\n        students.append(stdin.split()[i])\n    students.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if students[i] == students[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"-1\"\n    elif n == 2:\n        return \"1 2\"\n    else:\n        trees = []\n        for i in range(1, n + 1):\n            trees.append(i)\n        trees.append(n)\n        trees.sort()\n        trees.sort(key=lambda x: x * 2, reverse=True)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x: x * 2, reverse=False)\n        trees.sort(key=lambda x"
    },
    {
        "number": 1724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    s = stdin.split()[3]\n    max_value = 0\n    for i in range(n):\n        max_value += a[i] * 2 ** i * int(s[i])\n    return str(max_value)"
    },
    {
        "number": 1725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m > 1:\n        return str(-1)\n    if n > 1 and m == 1:\n        return str(-1)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and m == 1:\n        return str(d)\n    if n == 1 and"
    },
    {
        "number": 1726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        if a[i] <= t:\n            ans = i + 1\n            break\n    return str(ans)"
    },
    {
        "number": 1727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = []\n    for i in range(n):\n        trees.append(list(map(int, stdin.split())))\n    trees.sort(key=lambda x: x[0])\n    max_trees = 0\n    for i in range(n):\n        if trees[i][1] == trees[i+1][1]:\n            continue\n        if trees[i][0] > trees[i+1][0]:\n            max_trees += 1\n    return str(max_trees)"
    },
    {
        "number": 1728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    return str(min(color_tree(p, c)))\n\n\ndef"
    },
    {
        "number": 1729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    s = stdin.split()[1]\n    s = list(s)\n    for i in range(q):\n        l, r = map(int, stdin.split()[i + 2].split())\n        print(solution_helper(s, l, r))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 1730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = set()\n    visited.add(0)\n    stack = [0]\n    while stack:\n        node = stack.pop()\n        for nei in graph[node]:\n            if nei not in visited:\n                visited.add(nei)\n                stack.append(nei)\n    return len(visited)\n"
    },
    {
        "number": 1731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(1 for a in range(1, n + 1) for b in range(1, n + 1) if a <= b and a + b <= m and a + b + 1 == m))\n"
    },
    {
        "number": 1732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1]))\n    c = list(map(int, stdin.split()[2]))\n    if n == 1:\n        return str(c[0])\n    if n == 2:\n        if l[0] == l[1]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 3:\n        if l[0] == l[1] and l[1] == l[2]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 4:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 5:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 6:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 7:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 8:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 9:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 10:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8] and l[8] == l[9]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 11:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8] and l[8] == l[9] and l[9] == l[10]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 12:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8] and l[8] == l[9] and l[9] == l[10] and l[10] == l[11]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 13:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8] and l[8] == l[9] and l[9] == l[10] and l[10] == l[11] and l[11] == l[12]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 14:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8] and l[8] == l[9] and l[9] == l[10] and l[10] == l[11] and l[11] == l[12] and l[12] == l[13]:\n            return str(c[0])\n        else:\n            return str(-1)\n    if n == 15:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8] and l[8] == l[9] and l[9] == l[10] and l[10] == l[11] and l[11] == l[12] and l[12] == l[13] and l[13]"
    },
    {
        "number": 1733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, stdin.split())))\n    roads.sort(key=lambda x: x[0])\n    visited = set()\n    visited.add(x)\n    visited.add(y)\n    count = 0\n    for road in roads:\n        if road[0] not in visited and road[1] not in visited:\n            count += 1\n            visited.add(road[0])\n            visited.add(road[1])\n    return str(count)\n"
    },
    {
        "number": 1734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    phone_numbers = stdin.split()\n    phone_numbers = sorted(phone_numbers, key=len)\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    phone_numbers = sorted(phone_numbers, key=lambda x: x[::-1])\n    "
    },
    {
        "number": 1735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if len(s) == 1:\n            return \"No\"\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 5:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 6:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 7:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 8:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 9:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 10:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 11:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 12:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 13:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 14:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 15:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 16:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if len(s) == 17:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10"
    },
    {
        "number": 1736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    books.reverse()\n    ans = 0\n    for i in range(n):\n        if t - books[i] >= 0:\n            ans += 1\n            t -= books[i]\n        else:\n            break\n    return str(ans)"
    },
    {
        "number": 1737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    projects = []\n    for i in range(n):\n        projects.append(stdin.split())\n    projects.sort(key=lambda x: (x[0], int(x[1])))\n    print(projects)\n    dependencies = {}\n    for i in range(n):\n        dependencies[i] = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if projects[i][0] == projects[j][0]:\n                dependencies[i].append(j)\n                dependencies[j].append(i)\n    print(dependencies)\n    for i in range(n):\n        if i == 0:\n            print(projects[i][0], projects[i][1])\n        else:\n            print(projects[i][0], projects[i][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print()\n    for i in range(n):\n        for j in range(len(dependencies[i])):\n            if i == 0:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1])\n            else:\n                print(projects[dependencies[i][j]][0], projects[dependencies[i][j]][1], end=' ')\n    print"
    },
    {
        "number": 1738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    c = []\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    for i in range(len(s)):\n        c.append(s[i])\n    c = sorted(c)\n    c = ''.join(c)\n    return len(c)"
    },
    {
        "number": 1739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    t = x ** a[0]\n    for i in range(1, n):\n        t += x ** a[i]\n    return str(t // s)\n"
    },
    {
        "number": 1740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kitten_map = [[0] * n for _ in range(n)]\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        kitten_map[x - 1][y - 1] = 1\n        kitten_map[y - 1][x - 1] = 1\n    for day in range(1, n - 1):\n        for i in range(n):\n            for j in range(n):\n                if kitten_map[i][j] == 1:\n                    kitten_map[i][j] = 0\n                    if i + 1 < n and kitten_map[i + 1][j] == 1:\n                        kitten_map[i][j] = 1\n                    if j + 1 < n and kitten_map[i][j + 1] == 1:\n                        kitten_map[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if kitten_map[i][j] == 1:\n                return str(i + 1) + \" \" + str(j + 1)"
    },
    {
        "number": 1741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lairs = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        lairs.append((x, y))\n    lairs.sort(key=lambda x: x[1])\n    reserve = []\n    for i in range(n):\n        if i == 0:\n            reserve.append(lairs[i])\n        else:\n            if lairs[i][0] == lairs[i - 1][0]:\n                continue\n            else:\n                reserve.append(lairs[i])\n    if len(reserve) == 1:\n        return '-1'\n    else:\n        reserve.sort(key=lambda x: x[0])\n        reserve.sort(key=lambda x: x[1])\n        reserve.sort(key=lambda x: x[0] + x[1])\n        reserve.sort(key=lambda x: x[0] - x[1])\n        reserve.sort(key=lambda x: x[0] * x[1])\n        reserve.sort(key=lambda x: x[0] / x[1])\n        reserve.sort(key=lambda x: x[0] + x[1] + x[2])\n        reserve.sort(key=lambda x: x[0] - x[1] + x[2])\n        reserve.sort(key=lambda x: x[0] * x[1] + x[2])\n        reserve.sort(key=lambda x: x[0] / x[1] + x[2])\n        reserve.sort(key=lambda x: x[0] + x[1] - x[2])\n        reserve.sort(key=lambda x: x[0] - x[1] - x[2])\n        reserve.sort(key=lambda x: x[0] * x[1] - x[2])\n        reserve.sort(key=lambda x: x[0] / x[1] - x[2])\n        reserve.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] - x[1] + x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] * x[1] + x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] / x[1] + x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] + x[1] - x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] - x[1] - x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] * x[1] - x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] / x[1] - x[2] + x[3])\n        reserve.sort(key=lambda x: x[0] + x[1] + x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] - x[1] + x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] * x[1] + x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] / x[1] + x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] + x[1] - x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] * x[1] - x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] / x[1] - x[2] - x[3])\n        reserve.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] - x[1] + x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] * x[1] + x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] / x[1] + x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] + x[1] - x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] - x[1] - x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] * x[1] - x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] / x[1] - x[2] + x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] + x[1] + x[2] - x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] - x[1] + x[2] - x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] * x[1] + x[2] - x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] / x[1] + x[2] - x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] + x[4])\n        reserve.sort(key=lambda x: x[0] - x[1] - x[2] - x[3"
    },
    {
        "number": 1742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    res = 0\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        if p[u - 1] == v:\n            res += 1\n            p[u - 1], p[v - 1] = p[v - 1], p[u - 1]\n    return str(res)"
    },
    {
        "number": 1743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    c = list(map(int, stdin.split()[3]))\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.append(n)\n    b.append(n)\n    c.append(n)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    a.append(0)\n    b"
    },
    {
        "number": 1744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    res = []\n    for i in range(n):\n        res.append(0)\n    for i in range(n):\n        for j in range(i):\n            if t[i] > t[j] + m:\n                res[i] += 1\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    map_ = stdin.split()\n    return str(distinct_ways(n, m, map_))\n\ndef"
    },
    {
        "number": 1746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    parents = list(map(int, stdin.split()))\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"No\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"No\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"No\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"No\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"No\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"No\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"No\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"No\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"No\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"No\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"No\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"No\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"No\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"No\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"No\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"No\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"No\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"No\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"No\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"No\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"No\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"No\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"No\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"No\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"No\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"No\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"No\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"No\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"No\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"No\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"No\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"No\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"No\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"No\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"No\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"No\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"No\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"No\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"No\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"No\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"No\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"No\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"No\"\n    if n == 117:\n        return \"Yes\"\n    if n == 118:\n        return \"No\"\n    if n == 119:\n        return \"Yes\"\n    if n == 120:\n        return \"No\"\n    if n == 121:\n        return \"Yes\"\n    if n == 122:\n        return \"No\"\n    if n == 123:\n        return \"Yes\"\n    if n == 124:\n        return \"No\"\n    if n == 125:\n        return \"Yes\"\n    if n == 126:\n"
    },
    {
        "number": 1747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r = 1, n\n    while l < r:\n        m = (l + r) // 2\n        if len(set(a[l:m])) < k:\n            l = m + 1\n        else:\n            r = m\n    return str(l) +'' + str(r)\n"
    },
    {
        "number": 1748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sizes = list(map(int, stdin.split()))\n    temps = list(map(int, stdin.split()))\n    sizes.sort()\n    temps.sort()\n    res = 0\n    for i in range(n):\n        if temps[i] < temps[i-1]:\n            res += sizes[i] * temps[i]\n        else:\n            res += sizes[i] * temps[i-1]\n    return str(res)"
    },
    {
        "number": 1749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if l > r:\n        return \"LIE\"\n    if l == r:\n        if a == b:\n            return \"TRUTH\"\n        else:\n            return \"LIE\"\n    if l < r:\n        if a == b:\n            return \"TRUTH\"\n        else:\n            return \"LIE\"\n\nsolution(\"3 1 2\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\nsolution(\"3 1 2\")\nsolution(\"4 2 4\")\n"
    },
    {
        "number": 1750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    squares = []\n    for i in range(n):\n        squares.append(i + 1)\n    squares = set(squares)\n    squares = list(squares)\n    squares.sort()\n    squares = tuple(squares)\n    squares = list(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)\n    squares = tuple(squares)"
    },
    {
        "number": 1751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i < j and sorted(graph[i]) == sorted(graph[j]):\n                graph[i].append(j)\n                graph[j].append(i)\n    return str(len(graph) - len(set(graph)))\n"
    },
    {
        "number": 1752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    children = list(map(int, stdin.split()))\n    children.sort()\n    discomfort = 0\n    for i in range(1, n):\n        discomfort += abs(children[i] - children[i - 1])\n    return str(children[0]) +'' + str(children[n - 1]) +'' + str(discomfort)"
    },
    {
        "number": 1753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = set()\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        colors.add(a)\n        colors.add(b)\n    colors = list(colors)\n    colors.sort()\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(colors)\n    colors = tuple(col"
    },
    {
        "number": 1754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    powers.sort(reverse=True)\n    schools = list(map(int, stdin.split()))\n    chosen = list(map(int, stdin.split()))\n    schools = [schools[i] for i in chosen]\n    schools = sorted(schools, reverse=True)\n    schools = [schools[i] for i in range(len(schools)) if powers[i] == schools[i]]\n    return str(len(schools))\n"
    },
    {
        "number": 1755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = set(map(int, stdin.split())) if k else set()\n    if len(a) < 2:\n        return -1\n    if len(b) > n:\n        return -1\n    if len(b) == n:\n        return sum(a)\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            return -1\n        if a[i] in b:\n            continue\n        ans += 1\n        b.add(a[i])\n    return ans\n"
    },
    {
        "number": 1756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    days.sort()\n    days.reverse()\n    ans = 0\n    for i in range(n):\n        ans += days[i] * (i + 1)\n    return str(ans)\n"
    },
    {
        "number": 1757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [1, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return ''.join(['O' if i in fib else 'o' for i in range(1, n + 1)])"
    },
    {
        "number": 1758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if len(s)!= len(t):\n        return -1\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 0 if s == t else 1\n    if len(s) == 2:\n        return 1 if s == t else 2\n    if len(s) == 3:\n        return 2 if s == t else 3\n    if len(s) == 4:\n        return 3 if s == t else 4\n    if len(s) == 5:\n        return 4 if s == t else 5\n    if len(s) == 6:\n        return 5 if s == t else 6\n    if len(s) == 7:\n        return 6 if s == t else 7\n    if len(s) == 8:\n        return 7 if s == t else 8\n    if len(s) == 9:\n        return 8 if s == t else 9\n    if len(s) == 10:\n        return 9 if s == t else 10\n    if len(s) == 11:\n        return 10 if s == t else 11\n    if len(s) == 12:\n        return 11 if s == t else 12\n    if len(s) == 13:\n        return 12 if s == t else 13\n    if len(s) == 14:\n        return 13 if s == t else 14\n    if len(s) == 15:\n        return 14 if s == t else 15\n    if len(s) == 16:\n        return 15 if s == t else 16\n    if len(s) == 17:\n        return 16 if s == t else 17\n    if len(s) == 18:\n        return 17 if s == t else 18\n    if len(s) == 19:\n        return 18 if s == t else 19\n    if len(s) == 20:\n        return 19 if s == t else 20\n    if len(s) == 21:\n        return 20 if s == t else 21\n    if len(s) == 22:\n        return 21 if s == t else 22\n    if len(s) == 23:\n        return 22 if s == t else 23\n    if len(s) == 24:\n        return 23 if s == t else 24\n    if len(s) == 25:\n        return 24 if s == t else 25\n    if len(s) == 26:\n        return 25 if s == t else 26\n    if len(s) == 27:\n        return 26 if s == t else 27\n    if len(s) == 28:\n        return 27 if s == t else 28\n    if len(s) == 29:\n        return 28 if s == t else 29\n    if len(s) == 30:\n        return 29 if s == t else 30\n    if len(s) == 31:\n        return 30 if s == t else 31\n    if len(s) == 32:\n        return 31 if s == t else 32\n    if len(s) == 33:\n        return 32 if s == t else 33\n    if len(s) == 34:\n        return 33 if s == t else 34\n    if len(s) == 35:\n        return 34 if s == t else 35\n    if len(s) == 36:\n        return 35 if s == t else 36\n    if len(s) == 37:\n        return 36 if s == t else 37\n    if len(s) == 38:\n        return 37 if s == t else 38\n    if len(s) == 39:\n        return 38 if s == t else 39\n    if len(s) == 40:\n        return 39 if s == t else 40\n    if len(s) == 41:\n        return 40 if s == t else 41\n    if len(s) == 42:\n        return 41 if s == t else 42\n    if len(s) == 43:\n        return 42 if s == t else 43\n    if len(s) == 44:\n        return 43 if s == t else 44\n    if len(s) == 45:\n        return 44 if s == t else 45\n    if len(s) == 46:\n        return 45 if s == t else 46\n    if len(s) == 47:\n        return 46 if s == t else 47\n    if len(s) == 48:\n        return 47 if s == t else 48\n    if len(s) == 49:\n        return 48 if s == t else 49\n    if len(s) == 50:\n        return 49 if s == t else 50\n    if len(s) == 51:\n        return 50 if s == t else 51\n    if len(s) == 52:\n        return 51 if s == t else 52\n    if len(s) == 53:\n        return 52 if s == t else 53\n    if len(s) == 54:\n        return 53 if s == t else 54\n    if len(s) == 55:\n        return 54 if s == t else 55\n    if len(s) == 56:\n        return 55 if s == t else 56\n    if len(s) == 57:\n        return 56 if s == t else 57\n    if len(s) == 58:\n        return 57 if s == t else 58\n    if len(s) == 59:\n        return 58 if s == t else 59\n    if len(s) == 60:\n        return 59 if s == t else 60\n    if len(s) == 61:\n        return 60 if s == t else 61\n    if len(s) == 62:\n        return 61 if s == t else 62\n    if len(s) == 63:\n        return 62 if s == t else 63\n    if len(s) == 64:\n        return 63 if s == t else 64\n    if len(s) == 65:\n        return 64 if s == t else 65\n    if len(s) == 66:\n        return 65 if s == t else 66\n    if len(s) == 67:\n        return 66 if s == t else 67\n    if len(s) == 68:\n        return 67 if s == t else 68\n    if len(s) == 69:\n        return 68 if s =="
    },
    {
        "number": 1759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    res = []\n    for i in range(m):\n        res.append(t[i])\n        for j in range(i + 1, m):\n            res.append(t[j] + t[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 1760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    steps = list(stdin)\n    pointer = {'U': 'D', 'D': 'U'}\n    result = []\n    for i in range(n):\n        if steps[i] == 'U':\n            result.append(i)\n            steps[i] = 'D'\n        elif steps[i] == 'D':\n            result.append(i)\n            steps[i] = 'U'\n    for i in range(n):\n        if steps[i] == 'U':\n            result.append(i)\n            steps[i] = 'D'\n        elif steps[i] == 'D':\n            result.append(i)\n            steps[i] = 'U'\n    return''.join(map(str, result))\n"
    },
    {
        "number": 1761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    for i in range(n):\n        words[i] = words[i].replace('<', '<3')\n        words[i] = words[i].replace('>', '3>')\n    return ''.join(words)"
    },
    {
        "number": 1762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    videos = []\n    for i in range(n):\n        videos.append(tuple(map(int, stdin.split())))\n    videos.sort(key=lambda x: x[0])\n    servers = []\n    for i in range(k):\n        servers.append(i)\n    servers.sort()\n    servers = servers[::-1]\n    servers_time = []\n    for i in range(k):\n        servers_time.append(0)\n    for i in range(n):\n        for j in range(k):\n            if videos[i][0] <= servers_time[j]:\n                servers_time[j] = videos[i][1]\n                break\n    servers_time.sort()\n    for i in range(k):\n        servers_time[i] += videos[0][0]\n    return''.join(map(str, servers_time))\n"
    },
    {
        "number": 1763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, R, M = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    ans = 0\n    for i in range(N):\n        if h[i]!= h[i - 1]:\n            ans += A\n        else:\n            ans += R\n    for i in range(N - 1):\n        if h[i]!= h[i + 1]:\n            ans += M\n    return str(ans)\n"
    },
    {
        "number": 1764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = 0\n    t = 0\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            s += 1\n        else:\n            t += 1\n        if s == t:\n            count += 1\n            s = 0\n            t = 0\n    return str(count)"
    },
    {
        "number": 1765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    # print(a)\n    # print(a[0] % 2)\n    # print(a[1] % 2)\n    # print(a[2] % 2)\n    # print(a[3] % 2)\n    # print(a[4] % 2)\n    # print(a[0] % 2 == 0)\n    # print(a[1] % 2 == 0)\n    # print(a[2] % 2 == 0)\n    # print(a[3] % 2 == 0)\n    # print(a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a[1] % 2 == 0 and a[2] % 2 == 0 and a[3] % 2 == 0 and a[4] % 2 == 0)\n    # print(a[0] % 2 == 0 and a"
    },
    {
        "number": 1766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    s = 0\n    d = 0\n    for i in range(n):\n        if i == 0:\n            s += cards[i]\n        elif i == n - 1:\n            d += cards[i]\n        else:\n            if cards[i] > cards[i - 1] and cards[i] > cards[i + 1]:\n                s += cards[i]\n            elif cards[i] < cards[i - 1] and cards[i] < cards[i + 1]:\n                d += cards[i]\n    return str(s) + \" \" + str(d)"
    },
    {
        "number": 1767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    max_sum = 0\n    for l in range(n):\n        for r in range(l, n):\n            max_sum = max(max_sum, sum(a[l:r + 1]) + sum(b[l:r + 1]))\n    return str(max_sum)"
    },
    {
        "number": 1768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    q = int(stdin.split()[2])\n    for i in range(q):\n        m, c = stdin.split()[3 + i].split()\n        m = int(m)\n        c = c.lower()\n        if c == 'o':\n            s = s.replace(c, 'a')\n        elif c == 'a':\n            s = s.replace(c, 'b')\n        elif c == 'b':\n            s = s.replace(c, 'c')\n        else:\n            s = s.replace(c, 'd')\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 1769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return''.join(map(str, range(1, A + 1))) +'' +''.join(map(str, range(A + 1, A + B + 1))) +'' +''.join(map(str, range(A + B + 1, A + B + 1 + A)))"
    },
    {
        "number": 1770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x, y, d = map(int, stdin.split())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(1)\n        else:\n            if x == 1:\n                if y == 1:\n                    print(d)\n                else:\n                    print(d + 1)\n            else:\n                if y == 1:\n                    print(d)\n                else:\n                    print(d - 1)\n\nsolution(input())\n"
    },
    {
        "number": 1771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, w_max = map(int, stdin.split())\n    clouds = []\n    for i in range(n):\n        clouds.append(tuple(map(int, stdin.split())))\n    clouds.sort(key=lambda x: x[0])\n    w_max = w_max if w_max > 0 else -w_max\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(clouds[i][0] - clouds[j][0]) <= l and abs(clouds[i][1] - clouds[j][1]) <= w_max:\n                res += 1\n    return str(res)"
    },
    {
        "number": 1772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(max(0, sum(a) // 2 - 1))"
    },
    {
        "number": 1773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = []\n    for i in range(n):\n        x, a = map(int, stdin.split())\n        trees.append((x, a))\n    trees.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        if trees[i][0] == 0:\n            continue\n        ans += trees[i][1]\n        trees[i] = (trees[i][0] - 1, trees[i][1])\n    for i in range(n):\n        if trees[i][0] == 0:\n            continue\n        ans += trees[i][1]\n        trees[i] = (trees[i][0] + 1, trees[i][1])\n    return str(ans)"
    },
    {
        "number": 1774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) <= 10**6 else \"No\""
    },
    {
        "number": 1775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    droids = list(map(int, stdin.split()))\n    droids.sort()\n    droids = droids[:n]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    droids = droids[::-1]\n    droids = droids[:k]\n    droids = droids[::-1]\n    droids = droids[:m]\n    "
    },
    {
        "number": 1776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e = stdin\n    p = 0\n    m = 0\n    for i in range(len(e)):\n        if e[i] == '?':\n            p += 1\n        elif e[i] == '+':\n            m += 1\n    return str(p + m)"
    },
    {
        "number": 1777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bracket_pairs = []\n    for i in range(n):\n        bracket_pairs.append(stdin[i])\n    bracket_pairs.sort()\n    bracket_pairs.sort(key=len)\n    bracket_pairs.sort(key=lambda x: x[0])\n    bracket_pairs.sort(key=lambda x: x[1])\n    bracket_pairs.sort(key=lambda x: x[2])\n    bracket_pairs.sort(key=lambda x: x[3])\n    bracket_pairs.sort(key=lambda x: x[4])\n    bracket_pairs.sort(key=lambda x: x[5])\n    bracket_pairs.sort(key=lambda x: x[6])\n    bracket_pairs.sort(key=lambda x: x[7])\n    bracket_pairs.sort(key=lambda x: x[8])\n    bracket_pairs.sort(key=lambda x: x[9])\n    bracket_pairs.sort(key=lambda x: x[10])\n    bracket_pairs.sort(key=lambda x: x[11])\n    bracket_pairs.sort(key=lambda x: x[12])\n    bracket_pairs.sort(key=lambda x: x[13])\n    bracket_pairs.sort(key=lambda x: x[14])\n    bracket_pairs.sort(key=lambda x: x[15])\n    bracket_pairs.sort(key=lambda x: x[16])\n    bracket_pairs.sort(key=lambda x: x[17])\n    bracket_pairs.sort(key=lambda x: x[18])\n    bracket_pairs.sort(key=lambda x: x[19])\n    bracket_pairs.sort(key=lambda x: x[20])\n    bracket_pairs.sort(key=lambda x: x[21])\n    bracket_pairs.sort(key=lambda x: x[22])\n    bracket_pairs.sort(key=lambda x: x[23])\n    bracket_pairs.sort(key=lambda x: x[24])\n    bracket_pairs.sort(key=lambda x: x[25])\n    bracket_pairs.sort(key=lambda x: x[26])\n    bracket_pairs.sort(key=lambda x: x[27])\n    bracket_pairs.sort(key=lambda x: x[28])\n    bracket_pairs.sort(key=lambda x: x[29])\n    bracket_pairs.sort(key=lambda x: x[30])\n    bracket_pairs.sort(key=lambda x: x[31])\n    bracket_pairs.sort(key=lambda x: x[32])\n    bracket_pairs.sort(key=lambda x: x[33])\n    bracket_pairs.sort(key=lambda x: x[34])\n    bracket_pairs.sort(key=lambda x: x[35])\n    bracket_pairs.sort(key=lambda x: x[36])\n    bracket_pairs.sort(key=lambda x: x[37])\n    bracket_pairs.sort(key=lambda x: x[38])\n    bracket_pairs.sort(key=lambda x: x[39])\n    bracket_pairs.sort(key=lambda x: x[40])\n    bracket_pairs.sort(key=lambda x: x[41])\n    bracket_pairs.sort(key=lambda x: x[42])\n    bracket_pairs.sort(key=lambda x: x[43])\n    bracket_pairs.sort(key=lambda x: x[44])\n    bracket_pairs.sort(key=lambda x: x[45])\n    bracket_pairs.sort(key=lambda x: x[46])\n    bracket_pairs.sort(key=lambda x: x[47])\n    bracket_pairs.sort(key=lambda x: x[48])\n    bracket_pairs.sort(key=lambda x: x[49])\n    bracket_pairs.sort(key=lambda x: x[50])\n    bracket_pairs.sort(key=lambda x: x[51])\n    bracket_pairs.sort(key=lambda x: x[52])\n    bracket_pairs.sort(key=lambda x: x[53])\n    bracket_pairs.sort(key=lambda x: x[54])\n    bracket_pairs.sort(key=lambda x: x[55])\n    bracket_pairs.sort(key=lambda x: x[56])\n    bracket_pairs.sort(key=lambda x: x[57])\n    bracket_pairs.sort(key=lambda x: x[58])\n    bracket_pairs.sort(key=lambda x: x[59])\n    bracket_pairs.sort(key=lambda x: x[60])\n    bracket_pairs.sort(key=lambda x: x[61])\n    bracket_pairs.sort(key=lambda x: x[62])\n    bracket_pairs.sort(key=lambda x: x[63])\n    bracket_pairs.sort(key=lambda x: x[64])\n    bracket_pairs.sort(key=lambda x: x[65])\n    bracket_pairs.sort(key=lambda x: x[66])\n    bracket_pairs.sort(key=lambda x: x[67])\n    bracket_pairs.sort(key=lambda x: x[68])\n    bracket_pairs.sort(key=lambda x: x[69])\n    bracket_pairs.sort(key=lambda x: x[70])\n    bracket_pairs.sort(key=lambda x: x[71])\n    bracket_pairs.sort(key=lambda x: x[72])\n    bracket_pairs.sort(key=lambda x: x[73])\n    bracket_pairs.sort(key=lambda x: x[74])\n    bracket_pairs.sort(key=lambda x: x[75])\n    bracket_pairs.sort(key=lambda x: x[76])\n    bracket_pairs.sort(key=lambda x: x[77])\n    bracket"
    },
    {
        "number": 1778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_score = 0\n    b_score = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_score += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_score += b[i] - a[i]\n    return str(a_score - b_score)\n"
    },
    {
        "number": 1779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    layout1 = stdin[0]\n    layout2 = stdin[1]\n    text = stdin[2]\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1)\n    layout2 = ''.join(layout2)\n    layout1 = list(layout1)\n    layout2 = list(layout2)\n    layout1.sort()\n    layout2.sort()\n    layout1 = ''.join(layout1"
    },
    {
        "number": 1780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    queries = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')))\n    res = []\n    for query in queries:\n        l, r = query\n        if sum(a[l - 1:r]) == 0:\n            res.append(1)\n        else:\n            res.append(0)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 1782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 3 or k < 1 or k > n:\n        return '-1'\n    words = set()\n    for i in range(1, n + 1):\n        words.add(i)\n    for i in range(1, k + 1):\n        words.remove(i)\n    if len(words) == 0:\n        return '-1'\n    return''.join(map(str, words))"
    },
    {
        "number": 1783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(a[i] for i in range(n - k + 1)) / (n - k + 1))"
    },
    {
        "number": 1784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > k:\n        return \"NO\"\n    if a[-1] < k:\n        return \"NO\"\n    if a[0] == k:\n        return \"YES\"\n    if a[-1] == k:\n        return \"YES\"\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return \"NO\"\n    for i in range(1, n):\n        if a[i] - a[i - 1] == 1:\n            return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 1785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    max_value = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                max_value = max(max_value, h(s, s[i:j]))\n    return max_value % (10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 1786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.split())\n    cuts = []\n    for _ in range(n):\n        cuts.append(stdin)\n    cuts.sort()\n    max_area = 0\n    for cut in cuts:\n        if cut[0] == 'H':\n            max_area = max(max_area, h - int(cut[1:]))\n        else:\n            max_area = max(max_area, int(cut[1:]) - w)\n    return str(max_area)\n"
    },
    {
        "number": 1787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] == 'a':\n            for j in range(i):\n                if s[j] == 'b':\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 1788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A) + \" \" + str(B)"
    },
    {
        "number": 1789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(min(x, y) + min(x, y) + min(x, y) + min(x, y) + min(x, y))"
    },
    {
        "number": 1790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stops = []\n    for i in range(n):\n        stops.append(list(map(int, stdin.strip().split())))\n    stops.sort(key=lambda x: x[0])\n    stops.sort(key=lambda x: x[1])\n    stops.sort(key=lambda x: x[2])\n    stops.sort(key=lambda x: x[3])\n    stops.sort(key=lambda x: x[4])\n    stops.sort(key=lambda x: x[5])\n    stops.sort(key=lambda x: x[6])\n    stops.sort(key=lambda x: x[7])\n    stops.sort(key=lambda x: x[8])\n    stops.sort(key=lambda x: x[9])\n    stops.sort(key=lambda x: x[10])\n    stops.sort(key=lambda x: x[11])\n    stops.sort(key=lambda x: x[12])\n    stops.sort(key=lambda x: x[13])\n    stops.sort(key=lambda x: x[14])\n    stops.sort(key=lambda x: x[15])\n    stops.sort(key=lambda x: x[16])\n    stops.sort(key=lambda x: x[17])\n    stops.sort(key=lambda x: x[18])\n    stops.sort(key=lambda x: x[19])\n    stops.sort(key=lambda x: x[20])\n    stops.sort(key=lambda x: x[21])\n    stops.sort(key=lambda x: x[22])\n    stops.sort(key=lambda x: x[23])\n    stops.sort(key=lambda x: x[24])\n    stops.sort(key=lambda x: x[25])\n    stops.sort(key=lambda x: x[26])\n    stops.sort(key=lambda x: x[27])\n    stops.sort(key=lambda x: x[28])\n    stops.sort(key=lambda x: x[29])\n    stops.sort(key=lambda x: x[30])\n    stops.sort(key=lambda x: x[31])\n    stops.sort(key=lambda x: x[32])\n    stops.sort(key=lambda x: x[33])\n    stops.sort(key=lambda x: x[34])\n    stops.sort(key=lambda x: x[35])\n    stops.sort(key=lambda x: x[36])\n    stops.sort(key=lambda x: x[37])\n    stops.sort(key=lambda x: x[38])\n    stops.sort(key=lambda x: x[39])\n    stops.sort(key=lambda x: x[40])\n    stops.sort(key=lambda x: x[41])\n    stops.sort(key=lambda x: x[42])\n    stops.sort(key=lambda x: x[43])\n    stops.sort(key=lambda x: x[44])\n    stops.sort(key=lambda x: x[45])\n    stops.sort(key=lambda x: x[46])\n    stops.sort(key=lambda x: x[47])\n    stops.sort(key=lambda x: x[48])\n    stops.sort(key=lambda x: x[49])\n    stops.sort(key=lambda x: x[50])\n    stops.sort(key=lambda x: x[51])\n    stops.sort(key=lambda x: x[52])\n    stops.sort(key=lambda x: x[53])\n    stops.sort(key=lambda x: x[54])\n    stops.sort(key=lambda x: x[55])\n    stops.sort(key=lambda x: x[56])\n    stops.sort(key=lambda x: x[57])\n    stops.sort(key=lambda x: x[58])\n    stops.sort(key=lambda x: x[59])\n    stops.sort(key=lambda x: x[60])\n    stops.sort(key=lambda x: x[61])\n    stops.sort(key=lambda x: x[62])\n    stops.sort(key=lambda x: x[63])\n    stops.sort(key=lambda x: x[64])\n    stops.sort(key=lambda x: x[65])\n    stops.sort(key=lambda x: x[66])\n    stops.sort(key=lambda x: x[67])\n    stops.sort(key=lambda x: x[68])\n    stops.sort(key=lambda x: x[69])\n    stops.sort(key=lambda x: x[70])\n    stops.sort(key=lambda x: x[71])\n    stops.sort(key=lambda x: x[72])\n    stops.sort(key=lambda x: x[73])\n    stops.sort(key=lambda x: x[74])\n    stops.sort(key=lambda x: x[75])\n    stops.sort(key=lambda x: x[76])\n    stops.sort(key=lambda x: x[77])\n    stops.sort(key=lambda x: x[78])\n    stops.sort(key=lambda x: x[79])\n    stops.sort(key=lambda x: x[80])\n    stops.sort(key=lambda x: x[81])\n    stops.sort(key=lambda x: x[82])\n    stops.sort(key=lambda x: x[83])\n    stops.sort(key=lambda x: x[84])\n    stops.sort(key=lambda x: x[85])\n    stops.sort(key=lambda x: x[86])\n    stops.sort(key=lambda x: x[87])\n    stops.sort(key=lambda x: x[88])\n    stops.sort(key=lambda x: x[89])\n    stops.sort(key=lambda x: x[90])\n    stops.sort(key=lambda x: x[91])\n    stops.sort(key=lambda x: x[92])\n    stops.sort(key=lambda x: x[93])\n    stops.sort(key=lambda x: x[94])\n    stops.sort(key"
    },
    {
        "number": 1791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return max(len(s) for s in stdin.split('|'))"
    },
    {
        "number": 1792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    spaceships = list(map(int, stdin.split()))\n    bases = list(map(int, stdin.split()))\n    spaceships.sort(key=lambda x: x[0])\n    bases.sort(key=lambda x: x[0])\n    cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] > bases[j][1]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] > bases[j][0]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] > bases[j][2]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2] and bases[i][3] > bases[j][3]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2] and bases[i][3] == bases[j][3]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2] and bases[i][3] == bases[j][3] and bases[i][4] > bases[j][4]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2] and bases[i][3] == bases[j][3] and bases[i][4] == bases[j][4]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2] and bases[i][3] == bases[j][3] and bases[i][4] == bases[j][4] and bases[i][5] > bases[j][5]:\n                cost += bases[i][1]\n                break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bases[i][1] == bases[j][1] and bases[i][0] == bases[j][0] and bases[i][2] == bases[j][2] and"
    },
    {
        "number": 1793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, s = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    dp = [[0] * (l + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, l + 1):\n            if j - w[i - 1] >= 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][l])\n"
    },
    {
        "number": 1794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res += a[i] * a[j]\n    return str(res)"
    },
    {
        "number": 1795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    planes = list(map(int, stdin.split()))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if planes[i] == planes[j]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    for _ in range(n):\n        line = stdin.split()\n        if line[0] == '++':\n            x += 1\n        elif line[0] == '--':\n            x -= 1\n    return str(x)"
    },
    {
        "number": 1797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return str(max(p[i] - p[i - 1] for i in range(1, n)))"
    },
    {
        "number": 1798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] == 1:\n            t += 1\n    return str(t)"
    },
    {
        "number": 1799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    teams = []\n    for i in range(n):\n        teams.append([int(x) for x in stdin.split()])\n    teams.sort(key=lambda x: x[0] + x[1])\n    print(teams)\n    for i in range(n):\n        if teams[i][0] + teams[i][1] > teams[i+1][0] + teams[i+1][1]:\n            print(i+1)\n            break\n    return i+1\n\nsolution(\"8\\n20 1000\\n32 37\\n40 1000\\n45 50\\n16 16\\n16 16\\n14 1000\\n2 1000\\n\")\nsolution(\"7\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n5 5\\n\")\nsolution(\"7\\n14000000003 1000000000000000000\\n81000000000 88000000000\\n5000000000 7000000000\\n15000000000 39000000000\\n46000000000 51000000000\\n0 1000000000\\n0 0\\n\")\n"
    },
    {
        "number": 1800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(m):\n        t, r = map(int, stdin.split())\n        if t == 1:\n            a.sort(reverse=False)\n        else:\n            a.sort(reverse=True)\n    for i in range(n):\n        res.append(a[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 1801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    m = int(stdin.split()[3])\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            res += 1\n    return str(res % m)"
    },
    {
        "number": 1802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    max_buns = 0\n    max_height = heights[0]\n    max_step = 0\n    for i in range(1, n):\n        if heights[i] - max_height == 1:\n            max_step += 1\n        else:\n            max_step = 0\n        if max_step > max_buns:\n            max_buns = max_step\n            max_height = heights[i]\n            max_step = 0\n    return str(max_buns) + \" \" + str(max_height)"
    },
    {
        "number": 1803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    birds = list(map(int, stdin.split()[1:]))\n    m = int(stdin.split()[2])\n    birds_on_wire = []\n    for i in range(n):\n        birds_on_wire.append(birds[i])\n    birds_on_wire.sort()\n    birds_on_wire.reverse()\n    birds_on_wire_copy = birds_on_wire.copy()\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_on_wire_copy = birds_on_wire_copy[:m]\n    birds_on_wire_copy.sort()\n    birds_on_wire_copy.reverse()\n    birds_"
    },
    {
        "number": 1804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C = int(stdin)\n    H = int(stdin)\n    distances = []\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            distances.append(abs(i - j) + abs(i - 1) + abs(j - 1))\n    distances.sort()\n    for i in range(1, H + 1):\n        for j in range(1, C + 1):\n            if distances[i - 1] == distances[j - 1]:\n                print(distances[i - 1])\n                return\n    print(distances[0])\n    return"
    },
    {
        "number": 1805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n = int(stdin)\n        if n % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    return \"\"\n"
    },
    {
        "number": 1806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, stdin.split())))\n    queries = []\n    for i in range(m):\n        queries.append(list(map(int, stdin.split())))\n    intervals.sort(key=lambda x: x[0])\n    queries.sort(key=lambda x: x[0])\n    result = []\n    for i in range(m):\n        if intervals[queries[i][0] - 1][1] < queries[i][1]:\n            result.append(1)\n        else:\n            result.append(0)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 1807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - 2)"
    },
    {
        "number": 1808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if x < min(a):\n        return -1\n    if x == min(a):\n        return sum(a)\n    if x > min(a):\n        return sum(a[:k]) + sum(a[k:])"
    },
    {
        "number": 1809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b.sort()\n    w.sort()\n    res = 0\n    for i in range(m):\n        res += w[b[i]-1]\n    return str(res)"
    },
    {
        "number": 1810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if all(i % j == 0 for j in range(2, 11)):\n            count += 1\n    return str(count)"
    },
    {
        "number": 1811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    road = stdin.split()\n    if road[n-1] == \"#\":\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 1812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = []\n    for i in range(n):\n        ans.append(find_k(a[i]))\n    return \"\\n\".join(ans)\n\n\ndef"
    },
    {
        "number": 1813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > l or a[-1] < s:\n        return -1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and a[-1] == s:\n        return 1\n    if a[0] == l and"
    },
    {
        "number": 1814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c_l, c_e, v = map(int, stdin.split())\n    stairs = list(map(int, stdin.split()[1].split(',')))\n    elevators = list(map(int, stdin.split()[2].split(',')))\n    queries = []\n    for _ in range(int(stdin.split()[3])):\n        queries.append(list(map(int, stdin.split()[4].split(','))))\n    return '\\n'.join(map(str, [min(\n        [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n        + [min(\n            [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators]\n            + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators],\n            key=lambda x: x[0])) for e in elevators]\n        + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators],\n            key=lambda x: x[0]) for e in elevators]\n        + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators],\n            key=lambda x: x[0]) for e in elevators]\n        + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators],\n            key=lambda x: x[0]) for e in elevators]\n        + [(v - 1) * (n - 1) + (v - 1) * (m - 1) + (v - 1) * (e - 1) + (v - 1) * (n - 1) - 1 for e in elevators],\n            key=lambda x: x[0]) for e in elevators],\n        key=lambda x: x[0]) for e in elevators],\n        key=lambda x:"
    },
    {
        "number": 1815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    u = list(map(int, stdin.split()))\n    u.sort()\n    x = 0\n    for i in range(n):\n        x = max(x, u[i] + i)\n    return str(x)"
    },
    {
        "number": 1816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    fragments = list(map(int, stdin.split()[1:]))\n    fragments.sort()\n    head = 1\n    time = 0\n    for i in range(1, n):\n        time += abs(fragments[i] - head)\n        head = fragments[i]\n    return str(time)"
    },
    {
        "number": 1817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(a))"
    },
    {
        "number": 1818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(set(a)))"
    },
    {
        "number": 1819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return str(n - x)"
    },
    {
        "number": 1820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 0:\n                    return str(i) +'' + str(j) +'' + str(k)\n    return '-1'\n"
    },
    {
        "number": 1821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    notes = list(map(int, stdin.split()))\n    notes.sort()\n    # print(notes)\n    # print(notes[0], notes[-1])\n    # print(notes[0] + notes[-1])\n    # print(notes[1] + notes[-2])\n    # print(notes[2] + notes[-3])\n    # print(notes[3] + notes[-4])\n    # print(notes[4] + notes[-5])\n    # print(notes[5] + notes[-6])\n    # print(notes[6] + notes[-7])\n    # print(notes[7] + notes[-8])\n    # print(notes[8] + notes[-9])\n    # print(notes[9] + notes[-10])\n    # print(notes[10] + notes[-11])\n    # print(notes[11] + notes[-12])\n    # print(notes[12] + notes[-13])\n    # print(notes[13] + notes[-14])\n    # print(notes[14] + notes[-15])\n    # print(notes[15] + notes[-16])\n    # print(notes[16] + notes[-17])\n    # print(notes[17] + notes[-18])\n    # print(notes[18] + notes[-19])\n    # print(notes[19] + notes[-20])\n    # print(notes[20] + notes[-21])\n    # print(notes[21] + notes[-22])\n    # print(notes[22] + notes[-23])\n    # print(notes[23] + notes[-24])\n    # print(notes[24] + notes[-25])\n    # print(notes[25] + notes[-26])\n    # print(notes[26] + notes[-27])\n    # print(notes[27] + notes[-28])\n    # print(notes[28] + notes[-29])\n    # print(notes[29] + notes[-30])\n    # print(notes[30] + notes[-31])\n    # print(notes[31] + notes[-32])\n    # print(notes[32] + notes[-33])\n    # print(notes[33] + notes[-34])\n    # print(notes[34] + notes[-35])\n    # print(notes[35] + notes[-36])\n    # print(notes[36] + notes[-37])\n    # print(notes[37] + notes[-38])\n    # print(notes[38] + notes[-39])\n    # print(notes[39] + notes[-40])\n    # print(notes[40] + notes[-41])\n    # print(notes[41] + notes[-42])\n    # print(notes[42] + notes[-43])\n    # print(notes[43] + notes[-44])\n    # print(notes[44] + notes[-45])\n    # print(notes[45] + notes[-46])\n    # print(notes[46] + notes[-47])\n    # print(notes[47] + notes[-48])\n    # print(notes[48] + notes[-49])\n    # print(notes[49] + notes[-50])\n    # print(notes[50] + notes[-51])\n    # print(notes[51] + notes[-52])\n    # print(notes[52] + notes[-53])\n    # print(notes[53] + notes[-54])\n    # print(notes[54] + notes[-55])\n    # print(notes[55] + notes[-56])\n    # print(notes[56] + notes[-57])\n    # print(notes[57] + notes[-58])\n    # print(notes[58] + notes[-59])\n    # print(notes[59] + notes[-60])\n    # print(notes[60] + notes[-61])\n    # print(notes[61] + notes[-62])\n    # print(notes[62] + notes[-63])\n    # print(notes[63] + notes[-64])\n    # print(notes[64] + notes[-65])\n    # print(notes[65] + notes[-66])\n    # print(notes[66] + notes[-67])\n    # print(notes[67] + notes[-68])\n    # print(notes[68] + notes[-69])\n    # print(notes[69] + notes[-70])\n    # print(notes[70] + notes[-71])\n    # print(notes[71] + notes[-72])\n    # print(notes[72] + notes[-73])\n    # print(notes[73] + notes[-74])\n    # print(notes[74] + notes[-75])\n    # print(notes[75] + notes[-76])\n    # print(notes[76] + notes[-77])\n    # print(notes[77] + notes[-78])\n    # print(notes[78] + notes[-79])\n    # print(notes[79] + notes[-80])\n    # print(notes[80] + notes[-81])\n    # print(notes[81] + notes[-82])\n    # print(notes[82] + notes[-83])\n    # print(notes[83] + notes[-84])\n    # print(notes[84] + notes[-85])\n    # print(notes[85] + notes[-86])\n    # print(notes[86] + notes[-87])\n    # print(notes[87] + notes[-88])\n    # print(notes[88] + notes[-89])\n    # print(notes[89] + notes[-90])\n    # print(notes[90] + notes[-91])\n    # print(notes[91] + notes[-92])\n    # print(notes[92] + notes[-93])\n    # print(notes[93] + notes[-94])\n    # print(notes[94] + notes[-95])\n    # print(notes[95] + notes[-96])\n    # print(notes[96] + notes[-97])\n    # print(notes[97] + notes[-98])\n    # print(notes[98] + notes[-99])\n    # print(notes[99] + notes[-100])\n    # print(notes[100] + notes[-101])\n    # print(notes[101] + notes[-102])\n    # print(notes[102] + notes[-103])\n    # print(notes[103] + notes[-104])\n    # print(notes[104] + notes[-105])\n    # print(notes[105] + notes[-106])\n    # print(notes["
    },
    {
        "number": 1822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 0:\n        return str(x)\n    else:\n        return str(a[0])"
    },
    {
        "number": 1823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    movies = list(map(int, stdin.split()))\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies.sort()\n    movies = set(movies)\n    movies = list(movies)\n    movies"
    },
    {
        "number": 1824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    c = list(map(int, stdin.split()[3:]))\n    a.sort()\n    b.sort()\n    c.sort()\n    a.reverse()\n    b.reverse()\n    c.reverse()\n    a_index = 0\n    b_index = 0\n    c_index = 0\n    while a_index < n and b_index < n and c_index < n:\n        if a[a_index] == b[b_index] and a[a_index] == c[c_index]:\n            a_index += 1\n            b_index += 1\n            c_index += 1\n        elif a[a_index] == b[b_index]:\n            a_index += 1\n        elif a[a_index] == c[c_index]:\n            b_index += 1\n        elif b[b_index] == c[c_index]:\n            b_index += 1\n        else:\n            c_index += 1\n    return str(a_index) +'' + str(b_index)"
    },
    {
        "number": 1825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(n):\n        strings.append(stdin.split()[i])\n    strings.sort()\n    for i in range(n):\n        strings[i] = ''.join(sorted(strings[i]))\n    return ''.join(strings)"
    },
    {
        "number": 1826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n + 1):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0])\n    print(points)\n    count = 0\n    for i in range(n):\n        if points[i][0] == points[i + 1][0]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            return \"1\"\n    return \"0\""
    },
    {
        "number": 1829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    polandball = set(stdin.split())\n    enemyball = set(stdin.split())\n    while True:\n        if len(polandball) == 0:\n            return \"NO\"\n        if len(enemyball) == 0:\n            return \"YES\"\n        word = input()\n        if word in polandball:\n            polandball.remove(word)\n        elif word in enemyball:\n            enemyball.remove(word)\n        else:\n            return \"NO\""
    },
    {
        "number": 1830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [[0] * n for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        board[x - 1][y - 1] = 1\n    return str(sum(sum(1 for cell in row if cell == 0) for row in board))\n"
    },
    {
        "number": 1831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    connectors = []\n    for _ in range(m):\n        connectors.append(list(map(int, stdin.split())))\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    for i in range(len(connectors)):\n        if connectors[i][0] == connectors[i][1]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 1832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    res = []\n    for i in range(n):\n        res.append(solution_helper(a, i))\n    return \"\\n\".join(res)\n\n\ndef"
    },
    {
        "number": 1833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(set(a)) - len(set(a) & set(i for i in range(1, n + 1) if a[i - 1] % i == 0)))\n"
    },
    {
        "number": 1834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            return \"Impossible\"\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"Impossible\"\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 1835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()\n        s = list(map(int, s))\n        s = list(map(str, s))\n        s = ''.join(s)\n        if s == s[::-1]:\n            print(1)\n        else:\n            print(2)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 1836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for i in range(m):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    tail = 0\n    spines = 0\n    for i in range(m):\n        if points[i][0] == points[i][1]:\n            tail += 1\n        else:\n            spines += 1\n    return str(tail * spines)\n"
    },
    {
        "number": 1837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    words = {word: i for i, word in enumerate(stdin.split())}\n    relations = []\n    for _ in range(m):\n        relations.append(stdin.split())\n    for _ in range(q):\n        x, y = stdin.split()\n        if x in words and y in words:\n            if relations[words[x]][0] == \"1\":\n                if relations[words[x]][1] == \"1\":\n                    if relations[words[y]][1] == \"1\":\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\n                else:\n                    print(\"NO\")\n            else:\n                if relations[words[y]][1] == \"1\":\n                    print(\"NO\")\n                else:\n                    print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 1839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    schedule = stdin.split()[1:]\n    schedule.sort()\n    days = []\n    for i in range(n):\n        days.append(i + 1)\n    for i in range(len(schedule)):\n        if days[int(schedule[i][0]) - 1] > days[int(schedule[i][1]) - 1]:\n            days[int(schedule[i][0]) - 1] = days[int(schedule[i][1]) - 1] + 1\n    return''.join(map(str, days))\n"
    },
    {
        "number": 1840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    g = list(map(int, stdin.split()))\n    a.sort()\n    d.sort()\n    g.sort()\n    dp = [[0] * (b + 1) for _ in range(s + 1)]\n    for i in range(1, s + 1):\n        for j in range(1, b + 1):\n            if a[i - 1] <= d[j - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + g[j - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return''.join(map(str, dp[s][b]))"
    },
    {
        "number": 1841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, n + 1):\n        res.append(len(set(a[i - 1:i + m])))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 1842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x1 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    x2 = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    return f\"{max(x1, x2):.6f}\""
    },
    {
        "number": 1843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n    if n == 65:\n        return str(65)\n    if n == 66:\n        return str(66)\n    if n == 67:\n        return str(67)\n    if n == 68:\n        return str(68)\n    if n == 69:\n        return str(69)\n    if n == 70:\n        return str(70)\n    if n == 71:\n        return str(71)\n    if n == 72:\n        return str(72)\n    if n == 73:\n        return str(73)\n    if n == 74:\n        return str(74)\n    if n == 75:\n        return str(75)\n    if n == 76:\n        return str(76)\n    if n == 77:\n        return str(77)\n    if n == 78:\n        return str(78)\n    if n == 79:\n        return str(79)\n    if n == 80:\n        return str(80)\n    if n == 81:\n        return str(81)\n    if n == 82:\n        return str(82)\n    if n == 83:\n        return str(83)\n    if n == 84:\n        return str(84)\n    if n == 85:\n        return str(85)\n    if n == 86:\n        return str(86)\n    if n == 87:\n        return str(87)\n    if n == 88:\n        return str(88)\n    if n == 89:\n        return str(89)\n    if n == 90:\n        return str(90)\n    if n == 91:\n        return str(91)\n    if n == 92:\n        return str(92)\n    if n == 93:\n        return str(93)\n    if n == 94:\n        return str(94)\n    if n == 95:\n        return str(95)\n    if n == 96:\n        return str(96)\n    if n == 97:\n        return str(97)\n    if n == 98:\n        return str(98)\n    if n == 99:\n        return str(99)\n    if n == 100:\n        return str(100)\n    if n == 101:\n        return str(101)\n    if n == 102:\n        return str(102)\n    if n == 103:\n        return str(103)\n    if n == 104:\n        return str(104)\n    if n == 105:\n        return str(105)\n    if n == 106:\n        return str(106)\n    if n == 107:\n        return str(107)\n    if n == 108:\n        return str(108)\n    if n == 109:\n        return str(109)\n    if n == 110:\n        return str(110)\n    if n == 111:\n        return str(111)\n    if n == 112:\n        return str(112)\n    if n == 113:\n        return str(113)\n    if n == 114:\n        return str(114)\n    if n == 115:\n        return str(115)\n    if n == 116:\n        return str(116)\n    if n == 117:\n        return str(117)\n"
    },
    {
        "number": 1845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(a))"
    },
    {
        "number": 1846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    if n == 1:\n        if t[0] < 0:\n            return 1\n        else:\n            return 0\n    else:\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] < 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t[i] > 0:\n                t[i] = -t[i]\n        for i in range(n):\n            if t["
    },
    {
        "number": 1847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, x_1, y_1 = map(int, stdin.split())\n    n = int(stdin.split()[1])\n    segments = []\n    for i in range(n):\n        r, a, b = map(int, stdin.split()[2 + i].split())\n        segments.append((r, a, b))\n    return str(solution_naive(x_0, y_0, x_1, y_1, segments))\n\n\ndef"
    },
    {
        "number": 1848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] + 1 > a[i + 1]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 1849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    blocks = 0\n    for i in range(1, n + 1):\n        blocks += len(str(i))\n    return str(blocks)\n"
    },
    {
        "number": 1850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, S, P = map(int, stdin.split())\n    S = sorted(list(map(int, S.split())))\n    P = sorted(list(map(int, P.split())))\n    best = 0\n    for i in range(N):\n        if S[i] > P[i]:\n            best = max(best, S[i] + P[i])\n        else:\n            best = max(best, S[i] + P[i] - S[i])\n    return str(best)"
    },
    {
        "number": 1851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    days = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            days += 1\n    return str(days)\n"
    },
    {
        "number": 1852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    return str(0)\n"
    },
    {
        "number": 1853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    for i in range(m):\n        if arr[i] == arr[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n < 3:\n        return \"NO\"\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"YES\" + str(1)\n        return \"NO\"\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[1] == a[2] or a[1] == a[3] or a[2] == a[3]:\n            return \"YES\" + str(1)\n        return \"NO\"\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[2] == a[3] or a[2] == a[4] or a[3] == a[4]:\n            return \"YES\" + str(1)\n        return \"NO\"\n    if n == 6:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[3] == a[4] or a[3] == a[5] or a[4] == a[5]:\n            return \"YES\" + str(1)\n        return \"NO\"\n    if n == 7:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[4] == a[5] or a[4] == a[6] or a[5] == a[6]:\n            return \"YES\" + str(1)\n        return \"NO\"\n    if n == 8:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[0] == a[7] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[1] == a[7] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[2] == a[7] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[3] == a[7] or a[4] == a[5] or a[4] == a[6] or a[4] == a[7] or a[5] == a[6] or a[5] == a[7] or a[6] == a[7]:\n            return \"YES\" + str(1)\n        return \"NO\"\n    if n == 9:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8]:\n            return \"YES\" + str(2)\n        if a[0] == a[1] or a[0] == a"
    },
    {
        "number": 1855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    max_p = 0\n    max_p_count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            p_i = p[i - 1]\n            p_j = p[j - 1]\n            if p_i <= p_j:\n                p_i_count = 1\n                p_j_count = 1\n                while p_i <= p_j:\n                    p_i += 1\n                    p_j -= 1\n                    p_i_count += 1\n                    p_j_count += 1\n                if p_i_count > max_p_count:\n                    max_p_count = p_i_count\n                    max_p = p_i\n            else:\n                p_i_count = 1\n                p_j_count = 1\n                while p_i <= p_j:\n                    p_i += 1\n                    p_j -= 1\n                    p_i_count += 1\n                    p_j_count += 1\n                if p_j_count > max_p_count:\n                    max_p_count = p_j_count\n                    max_p = p_j\n    return str(max_p) + \" \" + str(max_p_count)\n"
    },
    {
        "number": 1856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split()\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    passwords = sorted(passwords)\n    passwords = set(passwords)\n    passwords = list(passwords)\n    "
    },
    {
        "number": 1857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n**2))"
    },
    {
        "number": 1858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"No\"\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j == n:\n                return \"Yes\" + \"\\n\" + str(i) + \" \" + str(j)\n    return \"No\""
    },
    {
        "number": 1859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    return str(n)"
    },
    {
        "number": 1860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(len(set(str(i))) for i in range(1, n + 1)))"
    },
    {
        "number": 1861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [stdin]\n    for _ in range(n - 1):\n        cards.append(stdin)\n    return str(len(set(cards)))\n"
    },
    {
        "number": 1862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    socks = list(map(int, stdin.split()))\n    socks.sort()\n    count = 0\n    for i in range(n):\n        if socks[i] == socks[i+1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    g = list(map(int, stdin.split()))\n    a.sort()\n    g.sort()\n    a.append(1000)\n    g.append(1000)\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g.append(0)\n    a.sort()\n    g.sort()\n    a.append(0)\n    g"
    },
    {
        "number": 1864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > 1:\n        return -1\n    if a[-1] < 10**6:\n        return -1\n    if a[0] == 1:\n        return 0\n    if a[-1] == 10**6:\n        return 0\n    if a[0] == a[-1]:\n        return 0\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n        return a[0]\n    if a[0] == 1:\n        return a[-1]\n    if a[-1] == 10**6:\n"
    },
    {
        "number": 1865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    swaps = 0\n    while True:\n        swaps += 1\n        for i in range(n - 1):\n            if a[i] > a[i + 1]:\n                a[i], a[i + 1] = a[i + 1], a[i]\n                swaps += 1\n        if swaps == n:\n            break\n    return str(swaps)\n"
    },
    {
        "number": 1866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    q = 0\n    while q < 5 * 10 ** 5:\n        t = a[q] = q\n        q += 1\n        t = a[q] = q\n        q += 1\n    for i in range(n):\n        a[i] = i\n    for i in range(n):\n        for j in range(n):\n            if a[i] == a[j]:\n                continue\n            t = a[i] = a[j] = a[i] = a[j] = 0\n            q = 0\n            while q < 5 * 10 ** 5:\n                t = a[q] = q\n                q += 1\n            for i in range(n):\n                a[i] = i\n    return str(q)\n"
    },
    {
        "number": 1867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if arr[l] + l - 1 == arr[r] and arr[l] + l - 1 == arr[r - 1]:\n            l += 1\n            r -= 1\n        elif arr[l] + l - 1 == arr[r]:\n            l += 1\n        elif arr[r] - r + 1 == arr[l]:\n            r -= 1\n        else:\n            return str(l + 1) + \" \" + str(r)\n    return str(l + 1) + \" \" + str(r)\n"
    },
    {
        "number": 1868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, A = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    res = 0\n    for i in range(m):\n        res += (n - b[i]) * (n - b[i])\n    return res % 998244353"
    },
    {
        "number": 1869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    while a:\n        if a[0] == a[-1]:\n            a.pop()\n            count += 1\n        else:\n            a.pop(0)\n            a.pop()\n            count += 1\n    return str(count)"
    },
    {
        "number": 1870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    times.sort()\n    res = 0\n    for i in range(n):\n        if times[i] - times[i - 1] <= c:\n            res += 1\n        else:\n            break\n    return str(res)"
    },
    {
        "number": 1871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    ans = 0\n    for i in range(n):\n        ans += (c[i] * (x - i))\n    return str(ans)"
    },
    {
        "number": 1872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(round(pi * r**2 * (n**2 + n + 1) / 4, 7))"
    },
    {
        "number": 1873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if books[i]!= books[j] and books[i]!= books[k] and books[j]!= books[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 1874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_3, l_4, l_5 = map(int, stdin.split())\n    return str(int(l_3 * l_4 * l_5 / 2))"
    },
    {
        "number": 1875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points = set(points)\n    if len(points) < 4:\n        return '0'\n    if len(points) == 4:\n        return '16'\n    if len(points) == 5:\n        return '16'\n    if len(points) == 6:\n        return '16'\n    if len(points) == 7:\n        return '16'\n    if len(points) == 8:\n        return '16'\n    if len(points) == 9:\n        return '16'\n    if len(points) == 10:\n        return '16'\n    if len(points) == 11:\n        return '16'\n    if len(points) == 12:\n        return '16'\n    if len(points) == 13:\n        return '16'\n    if len(points) == 14:\n        return '16'\n    if len(points) == 15:\n        return '16'\n    if len(points) == 16:\n        return '16'\n    if len(points) == 17:\n        return '16'\n    if len(points) == 18:\n        return '16'\n    if len(points) == 19:\n        return '16'\n    if len(points) == 20:\n        return '16'\n    if len(points) == 21:\n        return '16'\n    if len(points) == 22:\n        return '16'\n    if len(points) == 23:\n        return '16'\n    if len(points) == 24:\n        return '16'\n    if len(points) == 25:\n        return '16'\n    if len(points) == 26:\n        return '16'\n    if len(points) == 27:\n        return '16'\n    if len(points) == 28:\n        return '16'\n    if len(points) == 29:\n        return '16'\n    if len(points) == 30:\n        return '16'\n    if len(points) == 31:\n        return '16'\n    if len(points) == 32:\n        return '16'\n    if len(points) == 33:\n        return '16'\n    if len(points) == 34:\n        return '16'\n    if len(points) == 35:\n        return '16'\n    if len(points) == 36:\n        return '16'\n    if len(points) == 37:\n        return '16'\n    if len(points) == 38:\n        return '16'\n    if len(points) == 39:\n        return '16'\n    if len(points) == 40:\n        return '16'\n    if len(points) == 41:\n        return '16'\n    if len(points) == 42:\n        return '16'\n    if len(points) == 43:\n        return '16'\n    if len(points) == 44:\n        return '16'\n    if len(points) == 45:\n        return '16'\n    if len(points) == 46:\n        return '16'\n    if len(points) == 47:\n        return '16'\n    if len(points) == 48:\n        return '16'\n    if len(points) == 49:\n        return '16'\n    if len(points) == 50:\n        return '16'\n    if len(points) == 51:\n        return '16'\n    if len(points) == 52:\n        return '16'\n    if len(points) == 53:\n        return '16'\n    if len(points) == 54:\n        return '16'\n    if len(points) == 55:\n        return '16'\n    if len(points) == 56:\n        return '16'\n    if len(points) == 57:\n        return '16'\n    if len(points) == 58:\n        return '16'\n    if len(points) == 59:\n        return '16'\n    if len(points) == 60:\n        return '16'\n    if len(points) == 61:\n        return '16'\n    if len(points) == 62:\n        return '16'\n    if len(points) == 63:\n        return '16'\n    if len(points) == 64:\n        return '16'\n    if len(points) == 65:\n        return '16'\n    if len(points) == 66:\n        return '16'\n    if len(points) == 67:\n        return '16'\n    if len(points) == 68:\n        return '16'\n    if len(points) == 69:\n        return '16'\n    if len(points) == 70:\n        return '16'\n    if len(points) == 71:\n        return '16'\n    if len(points) == 72:\n        return '16'\n    if len(points) == 73:\n        return '16'\n    if len(points) == 74:\n        return '16'\n    if len(points) == 75:\n        return '16'\n    if len(points) == 76:\n        return '16'\n    if len(points) == 77:\n        return '16'\n    if len(points) == 78:\n        return '16'\n    if len(points) == 79:\n        return '16'\n    if len(points) == 80:\n        return '16'\n    if len(points) == 81:\n        return '16'\n    if len(points) == 82:\n        return '16'\n    if len(points) == 83:\n        return '16'\n    if len(points) == 84:\n        return '16'\n    if len(points) == 85:\n        return '16'\n    if len(points) == 86:\n        return '16'\n    if len(points) == 87:\n        return '16'\n    if len(points) == 88:\n        return '16'\n    if len(points) == 89:\n        return '16'\n    if len(points) == 90:\n        return '16'\n    if len(points) == 91:\n        return '16'\n    if len(points) == 92:\n        return '16'\n    if len(points) == 93:\n        return '16'\n    if len(points) == 94:\n        return '16'\n    if len(points) == 95:\n        return '16'\n    if len(points) == 96:\n        return '16'\n    if len(points) == 97:\n        return '16'\n    if len(points) == 98:\n        return '16'\n    if len(points) == 99:\n        return '16'\n    if len(points) == 100:\n        return '16'\n    if len(points) == 101:\n        return '16'\n    if len(points) == 102:\n        return '16'\n    if len(points) == 103:\n        return '16'\n    if len(points) == 104:\n        return '16'\n    "
    },
    {
        "number": 1876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v, x = map(int, stdin.split())\n        edges[u - 1].append((v - 1, x))\n        edges[v - 1].append((u - 1, 1 - x))\n    return str(good_sequences(n, k, edges))\n\n\ndef"
    },
    {
        "number": 1877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    x = y = 0\n    for i in range(n):\n        if s[i] == 'U':\n            x += 1\n        else:\n            y += 1\n    return str(x + y)"
    },
    {
        "number": 1878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    table = []\n    for i in range(n):\n        table.append([int(x) for x in stdin.split()])\n    sum = 0\n    for i in range(n):\n        for j in range(n):\n            sum += table[i][j]\n    return str(sum)"
    },
    {
        "number": 1879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, sx, sy, ex, ey = map(int, stdin.split())\n    sx, sy, ex, ey = sx - 1, sy - 1, ex - 1, ey - 1\n    wind = stdin.split()\n    for i in range(t):\n        if wind[i] == \"E\":\n            if sx + 1 < ex:\n                sx += 1\n            else:\n                sx = ex\n        elif wind[i] == \"S\":\n            if sy + 1 < ey:\n                sy += 1\n            else:\n                sy = ey\n        elif wind[i] == \"W\":\n            if sx - 1 > ex:\n                sx -= 1\n            else:\n                sx = ex\n        elif wind[i] == \"N\":\n            if sy - 1 > ey:\n                sy -= 1\n            else:\n                sy = ey\n    if sx == ex and sy == ey:\n        return \"0\"\n    return str(min(sx, sy, ex, ey))"
    },
    {
        "number": 1880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    "
    },
    {
        "number": 1881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    groups = [[] for _ in range(k)]\n    for i in range(k):\n        groups[i].append(p[i])\n    for i in range(k, n):\n        for j in range(k):\n            if p[i] > groups[j][-1]:\n                groups[j].append(p[i])\n                break\n        else:\n            groups[-1].append(p[i])\n    return''.join(map(str, groups[0]))\n\nsolution(input())"
    },
    {
        "number": 1882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    k = 0\n    for i in range(n):\n        if a[i] > s:\n            s += t\n            k += 1\n    return str(k) +'' +''.join(map(str, a[:k]))"
    },
    {
        "number": 1883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    types = list(map(int, stdin.split()[1:]))\n    tracks = list(map(int, stdin.split()[1:]))\n    mountains = []\n    hotels = []\n    for i in range(n):\n        if types[i] == 0:\n            mountains.append(i)\n        else:\n            hotels.append(i)\n    if len(mountains) == 0:\n        return \"0\"\n    if len(hotels) == 0:\n        return \"0\"\n    if len(mountains) == 1:\n        return str(mountains[0])\n    if len(hotels) == 1:\n        return str(hotels[0])\n    if len(mountains) == 2:\n        return str(mountains[0]) + \" \" + str(mountains[1])\n    if len(hotels) == 2:\n        return str(hotels[0]) + \" \" + str(hotels[1])\n    if len(mountains) == 3:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2])\n    if len(hotels) == 3:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2])\n    if len(mountains) == 4:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3])\n    if len(hotels) == 4:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2]) + \" \" + str(hotels[3])\n    if len(mountains) == 5:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3]) + \" \" + str(mountains[4])\n    if len(hotels) == 5:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2]) + \" \" + str(hotels[3]) + \" \" + str(hotels[4])\n    if len(mountains) == 6:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3]) + \" \" + str(mountains[4]) + \" \" + str(mountains[5])\n    if len(hotels) == 6:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2]) + \" \" + str(hotels[3]) + \" \" + str(hotels[4]) + \" \" + str(hotels[5])\n    if len(mountains) == 7:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3]) + \" \" + str(mountains[4]) + \" \" + str(mountains[5]) + \" \" + str(mountains[6])\n    if len(hotels) == 7:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2]) + \" \" + str(hotels[3]) + \" \" + str(hotels[4]) + \" \" + str(hotels[5]) + \" \" + str(hotels[6])\n    if len(mountains) == 8:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3]) + \" \" + str(mountains[4]) + \" \" + str(mountains[5]) + \" \" + str(mountains[6]) + \" \" + str(mountains[7])\n    if len(hotels) == 8:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2]) + \" \" + str(hotels[3]) + \" \" + str(hotels[4]) + \" \" + str(hotels[5]) + \" \" + str(hotels[6]) + \" \" + str(hotels[7])\n    if len(mountains) == 9:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3]) + \" \" + str(mountains[4]) + \" \" + str(mountains[5]) + \" \" + str(mountains[6]) + \" \" + str(mountains[7]) + \" \" + str(mountains[8])\n    if len(hotels) == 9:\n        return str(hotels[0]) + \" \" + str(hotels[1]) + \" \" + str(hotels[2]) + \" \" + str(hotels[3]) + \" \" + str(hotels[4]) + \" \" + str(hotels[5]) + \" \" + str(hotels[6]) + \" \" + str(hotels[7]) + \" \" + str(hotels[8])\n    if len(mountains) == 10:\n        return str(mountains[0]) + \" \" + str(mountains[1]) + \" \" + str(mountains[2]) + \" \" + str(mountains[3]) + \" \" + str"
    },
    {
        "number": 1884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, x2 = map(int, stdin.split())\n    c1, c2 = map(int, stdin.split())\n    if x1 + x2 < c1 + c2:\n        return \"No\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 > c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x2 == c1 + c2:\n        return \"Yes\"\n    if x1 + x"
    },
    {
        "number": 1885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(range(5, 8)) ^ set(range(5, 8))))"
    },
    {
        "number": 1886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()"
    },
    {
        "number": 1887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    return str(max(sum(h[i:i+n]) for i in range(0, len(h), n)))"
    },
    {
        "number": 1888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    debts = []\n    for i in range(m):\n        debts.append(list(map(int, stdin.split())))\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x"
    },
    {
        "number": 1889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    grid = [[int(i) for i in stdin.split()[i]] for i in range(n)]\n    for i in range(q):\n        i, j = map(int, stdin.split())\n        grid[i - 1][j - 1] = 1 - grid[i - 1][j - 1]\n    return '\\n'.join([' '.join(map(str, row)) for row in grid])\n"
    },
    {
        "number": 1890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 5 == 0:\n        return str(n // 5)\n    else:\n        return str(n // 5 + 1)"
    },
    {
        "number": 1891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    if n == 1:\n        return a * k\n    if n == 2:\n        return (a * k) + (b * k)\n    if n == 3:\n        return (a * k) + (b * k) + (a * k)\n    if n == 4:\n        return (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 5:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k)\n    if n == 6:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 7:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k)\n    if n == 8:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 9:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k)\n    if n == 10:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 11:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k)\n    if n == 12:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 13:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k)\n    if n == 14:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 15:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 16:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 17:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 18:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 19:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k)\n    if n == 20:\n        return (a * k) + (b * k) + (a * k) + (b * k) + (a * k) + (b * k) + (a"
    },
    {
        "number": 1892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.splitlines()) - 1)"
    },
    {
        "number": 1893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n * (1 + 1.000000011 ** (t // 1000)) ** (t // 1000))"
    },
    {
        "number": 1894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floor = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                floor[i][j] = '.'\n            elif i == n - 1:\n                floor[i][j] = '.'\n            elif j == 0:\n                floor[i][j] = '.'\n            elif j == m - 1:\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '#'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor[i][j] = '+'\n            elif floor[i - 1][j] == '.':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '+':\n                floor[i][j] = '.'\n            elif floor[i - 1][j] == '#':\n                floor"
    },
    {
        "number": 1895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    events = []\n    for _ in range(n):\n        events.append(stdin.split())\n    events.sort(key=lambda x: x[1])\n    max_happy = 0\n    for i in range(n):\n        if events[i][0] == '1':\n            events[i][0] = events[i][1]\n        else:\n            max_happy += 1\n    return str(max_happy)"
    },
    {
        "number": 1896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n**2)"
    },
    {
        "number": 1897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowels = 'IEAIAO'\n    vowel_count = 0\n    prettiness = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            vowel_count += 1\n        prettiness += vowel_count / len(s)\n    return str(prettiness)\n\nsolution(input())\n\ndef"
    },
    {
        "number": 1898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"I hate it\"\n    elif n == 2:\n        return \"I hate that I love it\"\n    else:\n        return \"I hate that I love that I hate it\""
    },
    {
        "number": 1899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(s):\n        segments.append((a[i], a[i + 1]))\n    segments.sort()\n    segments = segments[::-1]\n    segments = segments[:m]\n    segments = sorted(segments)\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x["
    },
    {
        "number": 1900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    c = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            c += 1\n    return str(c)"
    },
    {
        "number": 1901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    friends = [[] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        friends[x - 1].append(y - 1)\n        friends[y - 1].append(x - 1)\n    res = 0\n    for i in range(n):\n        if len(friends[i]) == 1:\n            res += c[i]\n    for i in range(n):\n        if len(friends[i]) == 2:\n            res += c[i]\n    return str(res)\n"
    },
    {
        "number": 1902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''snow affects sports such as skiing, snowboarding, and snowmachine travel.\n   ... snowboarding is a recreational activity and olympic and paralympic sport.\n   ... ''')\n    '141'\n    >>> solution('''thun-thun-thunder, thunder, thunder\n   ... thunder, thun-, thunder\n   ... thun-thun-thunder, thunder\n   ... thunder, feel the thunder\n   ... lightning then the thunder\n   ... thunder, feel the thunder\n   ... lightning then the thunder\n   ... thunder, thunder\n   ... ''')\n    '183'\n    \"\"\"\n    # Your code here\n    # stdin = '''snow affects sports such as skiing, snowboarding, and snowmachine travel.\n    # snowboarding is a recreational activity and olympic and paralympic sport.\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''thun-thun-thunder, thunder, thunder\n    # thunder, thun-, thunder\n    # thun-thun-thunder, thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, feel the thunder\n    # lightning then the thunder\n    # thunder, thunder\n    # '''\n    # stdin = '''"
    },
    {
        "number": 1903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c_ph = list(map(int, stdin.split()))\n    c_inf = list(map(int, stdin.split()))\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_ph = c_ph[:n]\n    c_inf = c_inf[:m]\n    c_ph.sort(reverse=True)\n    c_inf.sort(reverse=True)\n    c_"
    },
    {
        "number": 1904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if s[i] == 'a':\n            ans += a[i]\n        else:\n            ans += a[i] - 1\n    return str(ans)"
    },
    {
        "number": 1905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(q):\n        t, r, c, x = map(int, stdin.split())\n        if t == 1:\n            for i in range(m):\n                matrix[r - 1][i] = x\n        elif t == 2:\n            for i in range(n):\n                matrix[i][c - 1] = x\n        else:\n            for i in range(m):\n                matrix[r - 1][i] = x\n            for i in range(n):\n                matrix[i][c - 1] = x\n    return '\\n'.join([' '.join(map(str, row)) for row in matrix])\n"
    },
    {
        "number": 1906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0 and i % 3!= 0 and i % 5!= 0 and i % 7!= 0 and i % 11!= 0 and i % 13!= 0 and i % 17!= 0 and i % 19!= 0 and i % 23!= 0 and i % 29!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dancers = []\n    for i in range(n):\n        dancers.append(list(map(int, stdin.split())))\n    dancers.sort(key=lambda x: (x[0], x[1]))\n    return str(solution_part1(dancers))\n\ndef"
    },
    {
        "number": 1908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    if x == y:\n        return \"ALIVE\"\n    if x[0] == y[0]:\n        return \"ALIVE\"\n    if x[0] == y[1]:\n        return \"ALIVE\"\n    if x[1] == y[0]:\n        return \"ALIVE\"\n    if x[1] == y[1]:\n        return \"ALIVE\"\n    if x[2] == y[0]:\n        return \"ALIVE\"\n    if x[2] == y[1]:\n        return \"ALIVE\"\n    if x[3] == y[0]:\n        return \"ALIVE\"\n    if x[3] == y[1]:\n        return \"ALIVE\"\n    if x[4] == y[0]:\n        return \"ALIVE\"\n    if x[4] == y[1]:\n        return \"ALIVE\"\n    return \"DEAD\""
    },
    {
        "number": 1909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            ans += 1\n        else:\n            ans += k\n    return str(ans)"
    },
    {
        "number": 1910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 14\n    if n == 6:\n        return 20\n    if n == 7:\n        return 28\n    if n == 8:\n        return 36\n    if n == 9:\n        return 44\n    if n == 10:\n        return 52\n    if n == 11:\n        return 60\n    if n == 12:\n        return 68\n    if n == 13:\n        return 76\n    if n == 14:\n        return 84\n    if n == 15:\n        return 92\n    if n == 16:\n        return 100\n    if n == 17:\n        return 108\n    if n == 18:\n        return 116\n    if n == 19:\n        return 124\n    if n == 20:\n        return 132\n    if n == 21:\n        return 140\n    if n == 22:\n        return 148\n    if n == 23:\n        return 156\n    if n == 24:\n        return 164\n    if n == 25:\n        return 172\n    if n == 26:\n        return 180\n    if n == 27:\n        return 188\n    if n == 28:\n        return 196\n    if n == 29:\n        return 204\n    if n == 30:\n        return 212\n    return -1\n"
    },
    {
        "number": 1911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(a[i] - a[i - 1] for i in range(1, k + 1)))"
    },
    {
        "number": 1912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        r, g, b, w = map(int, stdin.split())\n        if r == g == b == w:\n            print(\"Yes\")\n        elif r == g or r == b or g == b:\n            print(\"Yes\")\n        elif r == w or g == w or b == w:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n\nsolution(\"\")\nsolution(\"1 1 1 1\")\nsolution(\"0 0 0 0\")\nsolution(\"0 1 1 1\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0"
    },
    {
        "number": 1913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res = 1\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        res *= a[i]\n    return str(res)"
    },
    {
        "number": 1914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    return str(sum(sum(f(t, s_i + s_j) for s_i in s) for s_j in s))"
    },
    {
        "number": 1915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        table[i][0] = 1\n        for j in range(1, n):\n            table[i][j] = table[i][j - 1] + table[i - 1][j]\n    return str(max(table[n - 1]))\n"
    },
    {
        "number": 1916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] & b[i])\n    return str(min(c))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        b.append(a[i] - (a[i] ** 2))\n    b.sort()\n    return str(sum(b[:k]))"
    },
    {
        "number": 1918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    a = stdin.split()[2]\n    \n    # Alice's initial split\n    a_split = a[:n//2] + a[n//2 + 1:]\n    \n    # Bob's initial split\n    b_split = a[n//2:] + a[:n//2]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    # Bob's final split\n    b_split = b_split[::-1]\n    \n    # Alice's final split\n    a_split = a_split[::-1]\n    \n    "
    },
    {
        "number": 1919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    return '1'\n"
    },
    {
        "number": 1920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = stdin.split()[1:]\n    males = 0\n    females = 0\n    for i in range(n):\n        if friends[i][0] == 'M':\n            males += 1\n        else:\n            females += 1\n    if males > females:\n        return str(males)\n    else:\n        return str(females)\n\nsolution(input())\n"
    },
    {
        "number": 1921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sx, sy = map(int, stdin.split())\n    fx, fy = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    return min(n * n, m * n)\n"
    },
    {
        "number": 1922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m)"
    },
    {
        "number": 1923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skewers = list(map(int, stdin.split()))\n    skewers.sort(reverse=True)\n    max_ingredients = 0\n    for i in range(n):\n        max_ingredients += skewers[i]\n    return str(max_ingredients)"
    },
    {
        "number": 1924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r_1, c_1, r_2, c_2 = map(int, stdin.split())\n    return sum(f(r_1, c_1, r_2, c_2) for r_1 in range(r_2 + 1) for c_1 in range(c_2 + 1)) % (10 ** 9 + 7)"
    },
    {
        "number": 1925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split())\n    return str(max(int(floor(A / B) - A * floor(x / B)) for x in range(N + 1)))"
    },
    {
        "number": 1926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            res.append(i)\n    return''.join(map(str, res))"
    },
    {
        "number": 1927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(range(1, n + 1))\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        p[a - 1], p[b - 1] = p[b - 1], p[a - 1]\n    return''.join(map(str, p))\n"
    },
    {
        "number": 1928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    paths = []\n    for i in range(k):\n        i, j = map(int, stdin.split())\n        matrix[i - 1][j - 1] = 1\n        paths.append((i, j))\n    return str(min(len(path) for path in paths)) + '\\n' + '\\n'.join(\n        '({}, {})'.format(i + 1, j + 1) for i, j in paths)\n"
    },
    {
        "number": 1929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = map(int, stdin.split())\n    dp = [[0] * (c + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, c + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - i]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][c])"
    },
    {
        "number": 1930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p = [-1 if p[i] == -1 else p[i] for i in range(n)]\n    return str(pow(2, n - 1, 998244353) - 1)"
    },
    {
        "number": 1931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 1\n    if n == 4:\n        return 0\n    if n == 5:\n        return 0\n    if n == 6:\n        return 0\n    if n == 7:\n        return 0\n    if n == 8:\n        return 0\n    if n == 9:\n        return 0\n    if n == 10:\n        return 0\n    if n == 11:\n        return 0\n    if n == 12:\n        return 0\n    if n == 13:\n        return 0\n    if n == 14:\n        return 0\n    if n == 15:\n        return 0\n    if n == 16:\n        return 0\n    if n == 17:\n        return 0\n    if n == 18:\n        return 0\n    if n == 19:\n        return 0\n    if n == 20:\n        return 0\n    if n == 21:\n        return 0\n    if n == 22:\n        return 0\n    if n == 23:\n        return 0\n    if n == 24:\n        return 0\n    if n == 25:\n        return 0\n    if n == 26:\n        return 0\n    if n == 27:\n        return 0\n    if n == 28:\n        return 0\n    if n == 29:\n        return 0\n    if n == 30:\n        return 0\n    if n == 31:\n        return 0\n    if n == 32:\n        return 0\n    if n == 33:\n        return 0\n    if n == 34:\n        return 0\n    if n == 35:\n        return 0\n    if n == 36:\n        return 0\n    if n == 37:\n        return 0\n    if n == 38:\n        return 0\n    if n == 39:\n        return 0\n    if n == 40:\n        return 0\n    if n == 41:\n        return 0\n    if n == 42:\n        return 0\n    if n == 43:\n        return 0\n    if n == 44:\n        return 0\n    if n == 45:\n        return 0\n    if n == 46:\n        return 0\n    if n == 47:\n        return 0\n    if n == 48:\n        return 0\n    if n == 49:\n        return 0\n    if n == 50:\n        return 0\n    if n == 51:\n        return 0\n    if n == 52:\n        return 0\n    if n == 53:\n        return 0\n    if n == 54:\n        return 0\n    if n == 55:\n        return 0\n    if n == 56:\n        return 0\n    if n == 57:\n        return 0\n    if n == 58:\n        return 0\n    if n == 59:\n        return 0\n    if n == 60:\n        return 0\n    if n == 61:\n        return 0\n    if n == 62:\n        return 0\n    if n == 63:\n        return 0\n    if n == 64:\n        return 0\n    if n == 65:\n        return 0\n    if n == 66:\n        return 0\n    if n == 67:\n        return 0\n    if n == 68:\n        return 0\n    if n == 69:\n        return 0\n    if n == 70:\n        return 0\n    if n == 71:\n        return 0\n    if n == 72:\n        return 0\n    if n == 73:\n        return 0\n    if n == 74:\n        return 0\n    if n == 75:\n        return 0\n    if n == 76:\n        return 0\n    if n == 77:\n        return 0\n    if n == 78:\n        return 0\n    if n == 79:\n        return 0\n    if n == 80:\n        return 0\n    if n == 81:\n        return 0\n    if n == 82:\n        return 0\n    if n == 83:\n        return 0\n    if n == 84:\n        return 0\n    if n == 85:\n        return 0\n    if n == 86:\n        return 0\n    if n == 87:\n        return 0\n    if n == 88:\n        return 0\n    if n == 89:\n        return 0\n    if n == 90:\n        return 0\n    if n == 91:\n        return 0\n    if n == 92:\n        return 0\n    if n == 93:\n        return 0\n    if n == 94:\n        return 0\n    if n == 95:\n        return 0\n    if n == 96:\n        return 0\n    if n == 97:\n        return 0\n    if n == 98:\n        return 0\n    if n == 99:\n        return 0\n    if n == 100:\n        return 0\n    if n == 101:\n        return 0\n    if n == 102:\n        return 0\n    if n == 103:\n        return 0\n    if n == 104:\n        return 0\n    if n == 105:\n        return 0\n    if n == 106:\n        return 0\n    if n == 107:\n        return 0\n    if n == 108:\n        return 0\n    if n == 109:\n        return 0\n    if n == 110:\n        return 0\n    if n == 111:\n        return 0\n    if n == 112:\n        return 0\n    if n == 113:\n        return 0\n    if n == 114:\n        return 0\n    if n == 115:\n        return 0\n    if n == 116:\n        return 0\n    if n == 117:\n        return 0\n    if n == 118:\n        return 0\n    if n == 119:\n        return 0\n    if n == 120:\n        return 0\n    if n == 121:\n        return 0\n    if n == 122:\n        return 0\n    if n == 123:\n        return 0\n    if n == 124:\n        return 0\n    if n == 125:\n        return 0\n    if n == 126:\n        return 0\n    if n == 127:\n        return 0\n    if n == 128:\n        return 0\n    if n == 129:\n        return 0\n    if n == 130:\n        return 0\n    if n == 131:\n        return 0\n    if n == 132:\n        return 0\n    if n == 133:\n        return 0\n    if n == 134:\n        return 0\n    if n == 135:\n        return 0\n    if n == 136:\n        return 0\n    if n == 137:\n        return 0\n    if n == 138:\n        return 0\n    if n == 139:\n        "
    },
    {
        "number": 1932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    polyhedrons = []\n    for i in range(n):\n        polyhedrons.append(stdin.split()[i])\n    return str(len(set(polyhedrons)))"
    },
    {
        "number": 1933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(max(sum(min(x, k) for x in a[i]) for i in range(n))) + \" \" + str(min(k, n - sum(min(x, k) for x in a[i]) + 1))\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    queries = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        queries.append((l, r))\n    res = []\n    for l, r in queries:\n        res.append(find_min_distance(a, l, r))\n    return '\\n'.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 1935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    g, r = map(int, stdin.split())\n    if n == 1:\n        return -1\n    if g == r:\n        return -1\n    if g == r + 1:\n        return n\n    if g == r - 1:\n        return n\n    if g == r + 2:\n        return n\n    if g == r - 2:\n        return n\n    if g == r + 3:\n        return n\n    if g == r - 3:\n        return n\n    if g == r + 4:\n        return n\n    if g == r - 4:\n        return n\n    if g == r + 5:\n        return n\n    if g == r - 5:\n        return n\n    if g == r + 6:\n        return n\n    if g == r - 6:\n        return n\n    if g == r + 7:\n        return n\n    if g == r - 7:\n        return n\n    if g == r + 8:\n        return n\n    if g == r - 8:\n        return n\n    if g == r + 9:\n        return n\n    if g == r - 9:\n        return n\n    if g == r + 10:\n        return n\n    if g == r - 10:\n        return n\n    if g == r + 11:\n        return n\n    if g == r - 11:\n        return n\n    if g == r + 12:\n        return n\n    if g == r - 12:\n        return n\n    if g == r + 13:\n        return n\n    if g == r - 13:\n        return n\n    if g == r + 14:\n        return n\n    if g == r - 14:\n        return n\n    if g == r + 15:\n        return n\n    if g == r - 15:\n        return n\n    if g == r + 16:\n        return n\n    if g == r - 16:\n        return n\n    if g == r + 17:\n        return n\n    if g == r - 17:\n        return n\n    if g == r + 18:\n        return n\n    if g == r - 18:\n        return n\n    if g == r + 19:\n        return n\n    if g == r - 19:\n        return n\n    if g == r + 20:\n        return n\n    if g == r - 20:\n        return n\n    if g == r + 21:\n        return n\n    if g == r - 21:\n        return n\n    if g == r + 22:\n        return n\n    if g == r - 22:\n        return n\n    if g == r + 23:\n        return n\n    if g == r - 23:\n        return n\n    if g == r + 24:\n        return n\n    if g == r - 24:\n        return n\n    if g == r + 25:\n        return n\n    if g == r - 25:\n        return n\n    if g == r + 26:\n        return n\n    if g == r - 26:\n        return n\n    if g == r + 27:\n        return n\n    if g == r - 27:\n        return n\n    if g == r + 28:\n        return n\n    if g == r - 28:\n        return n\n    if g == r + 29:\n        return n\n    if g == r - 29:\n        return n\n    if g == r + 30:\n        return n\n    if g == r - 30:\n        return n\n    if g == r + 31:\n        return n\n    if g == r - 31:\n        return n\n    if g == r + 32:\n        return n\n    if g == r - 32:\n        return n\n    if g == r + 33:\n        return n\n    if g == r - 33:\n        return n\n    if g == r + 34:\n        return n\n    if g == r - 34:\n        return n\n    if g == r +"
    },
    {
        "number": 1936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        l, r = map(int, stdin.split())\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r, l\n        if l > r:\n            l, r = r"
    },
    {
        "number": 1937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] + a[n - i - 1])\n    return''.join(map(str, sorted(b)))"
    },
    {
        "number": 1938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    intersections = []\n    for i in range(k):\n        intersections.append(segments[i][1] - segments[i][0] + 1)\n    return sum(intersections) % 1000000007"
    },
    {
        "number": 1939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j == k:\n                print(i, j)\n    return ''"
    },
    {
        "number": 1940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j < w[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i - 1]] + w[i - 1])\n    return dp[n][k]\n"
    },
    {
        "number": 1941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n = map(int, stdin.split())\n    queries = []\n    for _ in range(n):\n        l, t, m = map(int, stdin.split())\n        queries.append((l, t, m))\n    queries.sort(key=lambda x: x[0])\n    queries.sort(key=lambda x: x[1])\n    queries.sort(key=lambda x: x[2])\n    print(queries)\n    return '\\n'.join(map(str, [x[0] for x in queries]))\n"
    },
    {
        "number": 1942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if n == 1:\n        return str(l)\n    if n == 2:\n        return str(l) + str(r)\n    if n == 3:\n        return str(l) + str(r) + str(l)\n    if n == 4:\n        return str(l) + str(r) + str(l) + str(r)\n    if n == 5:\n        return str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 6:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r)\n    if n == 7:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 8:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r)\n    if n == 9:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 10:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r)\n    if n == 11:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 12:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 13:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 14:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 15:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 16:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 17:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 18:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 19:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 20:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 21:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 22:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 23:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 24:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 25:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 26:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l)\n    if n == 27:\n        return str(l) + str(r) + str(l) + str(r) + str(l) + str(r) + str(l"
    },
    {
        "number": 1943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    teams = list(map(int, stdin.split()[1:]))\n    teams.sort(reverse=True)\n    teams = teams[:2**N]\n    teams.sort()\n    teams = list(map(str, teams))\n    teams =''.join(teams)\n    return teams"
    },
    {
        "number": 1944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    laptops = []\n    for i in range(n):\n        laptops.append(list(map(int, stdin.split())))\n    laptops.sort(key=lambda x: (x[0], -x[1]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if laptops[i][0] < laptops[j][0] and laptops[i][1] > laptops[j][1]:\n                return \"Happy Alex\"\n    return \"Poor Alex\"\n"
    },
    {
        "number": 1945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    users = {}\n    for i in range(n):\n        old, new = stdin.split()\n        if old in users:\n            users[old] = new\n        else:\n            users[new] = old\n    return len(users)"
    },
    {
        "number": 1946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_set = set(a)\n    b_set = set(b)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    b_set = set(b_set)\n    a_set.remove(a[0])\n    b_set.remove(b[0])\n    a_set.remove(a[-1])\n    b_set.remove(b[-1])\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set = set(a_set)\n    "
    },
    {
        "number": 1947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(m):\n        t += 1\n        if a[i] == 0:\n            t += int(stdin.split()[i + 1])\n    return str(t)\n"
    },
    {
        "number": 1948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    edges.sort()\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[edges[i]].append(edges[i + 1])\n        graph[edges[i + 1]].append(edges[i])\n    visited = set()\n    visited.add(1)\n    res = 0\n    while True:\n        for i in range(n):\n            if i not in visited:\n                visited.add(i)\n                res += 1\n                break\n        if i == x:\n            break\n    return str(res)\n"
    },
    {
        "number": 1949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_num = min(a)\n    for i in range(k):\n        if min_num == 0:\n            print(0)\n            break\n        for j in range(len(a)):\n            if a[j] == 0:\n                continue\n            a[j] -= min_num\n        min_num = min(a)\n    return''.join(map(str, a))\n"
    },
    {
        "number": 1950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(sum(a[i] * (i + 1) for i in range(n)))\n"
    },
    {
        "number": 1951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    shurikens = list(map(int, stdin.split()))\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens.append(shurikens[-1])\n    shurikens.sort()\n    shurikens.reverse()\n    shurikens.append(shurikens[0])\n    shurikens"
    },
    {
        "number": 1952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    ans = 1\n    for i in range(1, n + 1):\n        if sum(m) == n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue\n        if sum(m) + c[0] <= n:\n            ans += 1\n            continue\n        if sum(m) + c[0] > n:\n            ans += 1\n            continue"
    },
    {
        "number": 1953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    t.sort()\n    res = 0\n    for i in range(n):\n        if t[i] > t[i+1]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 1954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    return str(factorial(n) // factorial(f) // factorial(n - f))\n\ndef"
    },
    {
        "number": 1955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    days.sort()\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return -1\n    if n == 2:\n        if days[1] == days[0]:\n            return -1\n        else:\n            return days[1] - days[0]\n    if n == 3:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        else:\n            return days[2] - days[1]\n    if n == 4:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        else:\n            return days[3] - days[2]\n    if n == 5:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        else:\n            return days[4] - days[3]\n    if n == 6:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        else:\n            return days[5] - days[4]\n    if n == 7:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        if days[6] == days[5]:\n            return -1\n        else:\n            return days[6] - days[5]\n    if n == 8:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        if days[6] == days[5]:\n            return -1\n        if days[7] == days[6]:\n            return -1\n        else:\n            return days[7] - days[6]\n    if n == 9:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        if days[6] == days[5]:\n            return -1\n        if days[7] == days[6]:\n            return -1\n        if days[8] == days[7]:\n            return -1\n        else:\n            return days[8] - days[7]\n    if n == 10:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        if days[6] == days[5]:\n            return -1\n        if days[7] == days[6]:\n            return -1\n        if days[8] == days[7]:\n            return -1\n        if days[9] == days[8]:\n            return -1\n        else:\n            return days[9] - days[8]\n    if n == 11:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        if days[6] == days[5]:\n            return -1\n        if days[7] == days[6]:\n            return -1\n        if days[8] == days[7]:\n            return -1\n        if days[9] == days[8]:\n            return -1\n        if days[10] == days[9]:\n            return -1\n        else:\n            return days[10] - days[9]\n    if n == 12:\n        if days[1] == days[0]:\n            return -1\n        if days[2] == days[1]:\n            return -1\n        if days[3] == days[2]:\n            return -1\n        if days[4] == days[3]:\n            return -1\n        if days[5] == days[4]:\n            return -1\n        if days[6] == days[5]:\n            return -1\n        if days[7] == days["
    },
    {
        "number": 1956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        s, e = map(int, stdin.split())\n        if s > e:\n            print(0, 1)\n        else:\n            print(1, 0)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 1957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    return str(min(n - 1, int(a / sum(s) * b)))\n"
    },
    {
        "number": 1958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    buyers = []\n    for i in range(n):\n        buyers.append(stdin.split()[i])\n    buyers.sort()\n    total = 0\n    for i in range(n):\n        if buyers[i] == 'half':\n            total += p // 2\n        elif buyers[i] == 'halfplus':\n            total += p // 2 + p // 2\n    return str(total)"
    },
    {
        "number": 1959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    even = 0\n    odd = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == odd:\n        return -1\n    else:\n        return even - odd"
    },
    {
        "number": 1960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # print(a)\n    # print(n)\n    # print(a[0])\n    # print(a[1])\n    # print(a[2])\n    # print(a[3])\n    # print(a[4])\n    # print(a[5])\n    # print(a[6])\n    # print(a[7])\n    # print(a[8])\n    # print(a[9])\n    # print(a[10])\n    # print(a[11])\n    # print(a[12])\n    # print(a[13])\n    # print(a[14])\n    # print(a[15])\n    # print(a[16])\n    # print(a[17])\n    # print(a[18])\n    # print(a[19])\n    # print(a[20])\n    # print(a[21])\n    # print(a[22])\n    # print(a[23])\n    # print(a[24])\n    # print(a[25])\n    # print(a[26])\n    # print(a[27])\n    # print(a[28])\n    # print(a[29])\n    # print(a[30])\n    # print(a[31])\n    # print(a[32])\n    # print(a[33])\n    # print(a[34])\n    # print(a[35])\n    # print(a[36])\n    # print(a[37])\n    # print(a[38])\n    # print(a[39])\n    # print(a[40])\n    # print(a[41])\n    # print(a[42])\n    # print(a[43])\n    # print(a[44])\n    # print(a[45])\n    # print(a[46])\n    # print(a[47])\n    # print(a[48])\n    # print(a[49])\n    # print(a[50])\n    # print(a[51])\n    # print(a[52])\n    # print(a[53])\n    # print(a[54])\n    # print(a[55])\n    # print(a[56])\n    # print(a[57])\n    # print(a[58])\n    # print(a[59])\n    # print(a[60])\n    # print(a[61])\n    # print(a[62])\n    # print(a[63])\n    # print(a[64])\n    # print(a[65])\n    # print(a[66])\n    # print(a[67])\n    # print(a[68])\n    # print(a[69])\n    # print(a[70])\n    # print(a[71])\n    # print(a[72])\n    # print(a[73])\n    # print(a[74])\n    # print(a[75])\n    # print(a[76])\n    # print(a[77])\n    # print(a[78])\n    # print(a[79])\n    # print(a[80])\n    # print(a[81])\n    # print(a[82])\n    # print(a[83])\n    # print(a[84])\n    # print(a[85])\n    # print(a[86])\n    # print(a[87])\n    # print(a[88])\n    # print(a[89])\n    # print(a[90])\n    # print(a[91])\n    # print(a[92])\n    # print(a[93])\n    # print(a[94])\n    # print(a[95])\n    # print(a[96])\n    # print(a[97])\n    # print(a[98])\n    # print(a[99])\n    # print(a[100])\n    # print(a[101])\n    # print(a[102])\n    # print(a[103])\n    # print(a[104])\n    # print(a[105])\n    # print(a[106])\n    # print(a[107])\n    # print(a[108])\n    # print(a[109])\n    # print(a[110])\n    # print(a[111])\n    # print(a[112])\n    # print(a[113])\n    # print(a[114])\n    # print(a[115])\n    # print(a[116])\n    # print(a[117])\n    # print(a[118])\n    # print(a[119])\n    # print(a[120])\n    # print(a[121])\n    # print(a[122])\n    # print(a[123])\n    # print(a[124])\n    # print(a[125])\n    # print(a[126])\n    # print(a[127])\n    # print(a[128])\n    # print(a[129])\n    # print(a[130])\n    # print(a[131])\n    # print(a[132])\n    # print(a[133])\n    # print(a[134])\n    # print(a[135])\n    # print(a[136])\n    # print(a[137])\n    # print(a[138])\n    # print(a[139])\n    # print(a[140])\n    # print(a[141])\n    # print(a[142])\n    # print(a[143])\n    # print(a[144])\n    # print(a[145])\n    # print(a[146])\n    # print(a[147])\n"
    },
    {
        "number": 1961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                    "
    },
    {
        "number": 1962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n * k!= len(a):\n        return 0\n    if n * k < l:\n        return 0\n    if n * k == l:\n        return sum(a)\n    if n * k > l:\n        return 0\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        return sum(a)\n    if n * k == l:\n        "
    },
    {
        "number": 1963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    r = a[-1]\n    l = a[0]\n    count = 0\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            count += 1\n            r = max(r, a[i] + a[i - 1])\n    return str(count) + \" \" + str(r - l)"
    },
    {
        "number": 1964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cashiers = list(map(int, stdin.split()[1:]))\n    cashiers.sort()\n    queue = []\n    for cashier in cashiers:\n        queue.append(cashier)\n        if len(queue) == cashier:\n            queue.sort()\n            queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse()\n    queue.pop(0)\n    queue.sort()\n    queue.reverse"
    },
    {
        "number": 1965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.append(x)\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 1966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(min(get_min_squares(board)))\n\ndef"
    },
    {
        "number": 1967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    img = stdin.split()\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '.':\n                img[i] = img[i][:j] + '.' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            if img[i][j] == '*':\n                img[i] = img[i][:j] + '*' + img[i][j + 1:]\n    for i in range(h):\n        for j in range(w):\n            "
    },
    {
        "number": 1968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    sellers = []\n    for i in range(n):\n        k, *s = map(int, stdin.split())\n        sellers.append((k, s))\n    sellers.sort(key=lambda x: x[1])\n    p = 0\n    for i in range(n):\n        if v - sellers[i][1] >= 0:\n            p += 1\n            v -= sellers[i][1]\n    return str(p)"
    },
    {
        "number": 1969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin[i])\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'X':\n                if i == 0 or j == 0 or i == n - 1 or j == n - 1:\n                    count += 1\n                else:\n                    if matrix[i - 1][j - 1] == 'X':\n                        count += 1\n                    if matrix[i - 1][j] == 'X':\n                        count += 1\n                    if matrix[i - 1][j + 1] == 'X':\n                        count += 1\n                    if matrix[i][j - 1] == 'X':\n                        count += 1\n                    if matrix[i][j + 1] == 'X':\n                        count += 1\n                    if matrix[i + 1][j - 1] == 'X':\n                        count += 1\n                    if matrix[i + 1][j] == 'X':\n                        count += 1\n                    if matrix[i + 1][j + 1] == 'X':\n                        count += 1\n    return str(count)"
    },
    {
        "number": 1970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        board = []\n        for _ in range(n):\n            board.append(stdin)\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'K':\n                    if i + 2 < n and board[i + 1][j] == '.' and board[i + 2][j] == '.':\n                        if j + 2 < n and board[i][j + 1] == '.' and board[i][j + 2] == '.':\n                            if i + 1 < n and board[i + 1][j + 1] == '.' and board[i + 1][j + 2] == '.':\n                                if j + 1 < n and board[i][j + 1] == '.' and board[i][j + 2] == '.':\n                                    if i + 2 < n and board[i + 2][j] == '.' and board[i + 2][j + 1] == '.':\n                                        if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                            if i + 2 < n and board[i + 2][j + 2] == '.' and board[i + 2][j + 1] == '.':\n                                                if i + 2 < n and board[i + 2][j] == '.' and board[i + 2][j - 1] == '.':\n                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                        if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                            if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                        if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                            if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                        if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                            if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                        if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                            if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                                if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                                        if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                                            if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                                                if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                                                        if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                                                            if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                                                                if i + 2 < n and board[i + 2][j - 1] == '.' and board[i + 2][j] == '.':\n                                                                                                                                                    if j + 2 < n and board[i][j + 2] == '.' and board[i + 1][j + 2] == '.':\n                                                                                                                                                       if i +"
    },
    {
        "number": 1971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    q = []\n    for i in range(n):\n        q.append(p[i])\n        q.append(p[i])\n    q.sort()\n    for i in range(n):\n        if q[i] == q[i + 1]:\n            return '-1'\n    return''.join(map(str, q))\n"
    },
    {
        "number": 1972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * 500000\n    for i in range(n):\n        t, x, y = map(int, stdin.split())\n        if t == 1:\n            a[x - 1] += y\n        else:\n            print(sum(a[x - 1:y]))\n    return ''"
    },
    {
        "number": 1973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    u = list(map(int, stdin.split()))\n    u.sort()\n    x = 0\n    for i in range(n):\n        x = max(x, u[i] + i)\n    return str(x)"
    },
    {
        "number": 1974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    robbers = list(map(int, stdin.split()))\n    searchlights = list(map(int, stdin.split()))\n    robbers.sort()\n    searchlights.sort()\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers = tuple(robbers)\n    searchlights = tuple(searchlights)\n    robbers"
    },
    {
        "number": 1975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    boys = list(range(1, n + 1))\n    girls = list(range(1, m + 1))\n    dances = 0\n    while boys and girls:\n        if boys[0] == girls[0]:\n            boys.pop(0)\n            girls.pop(0)\n        else:\n            boys.pop(0)\n            girls.pop(0)\n        dances += 1\n    return str(dances)"
    },
    {
        "number": 1976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = map(int, stdin.split())\n    broken = [[False] * m for _ in range(n)]\n    for i in range(q):\n        x, y, t = map(int, stdin.split())\n        broken[x - 1][y - 1] = True\n    for i in range(n):\n        for j in range(m):\n            if not broken[i][j]:\n                return -1\n    return max(map(max, broken))\n"
    },
    {
        "number": 1977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [list(stdin) for _ in range(n)]\n    min_path = \"\"\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1 and j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0:\n                min_path += matrix[i][j]\n                continue\n            if j == 0:\n                min_path += matrix[i][j]\n                continue\n            if i == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if j == n - 1:\n                min_path += matrix[i][j]\n                continue\n            if i == 0 and j == n - 1:\n                min_path += matrix[i][j]"
    },
    {
        "number": 1978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[int(i) for i in stdin.split()] for _ in range(n)]\n    path = list(map(int, stdin.split()))\n    path_length = len(path)\n    path_length_dict = {path_length: path}\n    visited = set()\n    visited.add(path[0])\n    while path_length_dict:\n        path_length, path = path_length_dict.popitem()\n        if path_length == path_length_dict.keys()[-1]:\n            visited.add(path[-1])\n        for i in range(1, path_length):\n            if path[i] in visited:\n                continue\n            if path[i] in path_length_dict:\n                continue\n            visited.add(path[i])\n            path_length_dict[path_length + 1] = path[i:]\n    return str(len(visited))\n"
    },
    {
        "number": 1979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 1980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    d = []\n    c = []\n    for i in range(n):\n        d.append(int(stdin.split()[i]))\n        c.append(int(stdin.split()[i+1]))\n    d.sort()\n    c.sort()\n    gap = 0\n    for i in range(n):\n        gap += (d[i+1] - d[i])**2\n    if n == 1:\n        return 0\n    if n == 2:\n        return c[1]\n    if n == 3:\n        return max(c[1], c[2])\n    if n == 4:\n        return max(c[1], c[2], c[3])\n    if n == 5:\n        return max(c[1], c[2], c[3], c[4])\n    if n == 6:\n        return max(c[1], c[2], c[3], c[4], c[5])\n    if n == 7:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6])\n    if n == 8:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7])\n    if n == 9:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8])\n    if n == 10:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9])\n    if n == 11:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10])\n    if n == 12:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11])\n    if n == 13:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12])\n    if n == 14:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13])\n    if n == 15:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14])\n    if n == 16:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15])\n    if n == 17:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16])\n    if n == 18:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17])\n    if n == 19:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17], c[18])\n    if n == 20:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17], c[18], c[19])\n    if n == 21:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17], c[18], c[19], c[20])\n    if n == 22:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17], c[18], c[19], c[20], c[21])\n    if n == 23:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17], c[18], c[19], c[20], c[21], c[22])\n    if n == 24:\n        return max(c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15], c[16], c[17], c[18], c[19], c[20], c[21], c[22], c[23])\n    if n == 25:\n        return max(c[1], c"
    },
    {
        "number": 1981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    res = 0\n    for i in range(1, n + 1):\n        if graph[i] and graph[i][0] == 1:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 1982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        if n % 2 == 0:\n            print(\"NO\")\n        else:\n            for j in range(1, n + 1):\n                if j % 2 == 0:\n                    continue\n                if n - j < k:\n                    break\n                if n - j == k:\n                    print(\"YES\")\n                    break\n                if n - j > k:\n                    print(\"NO\")\n                    break\n    return \"\"\n"
    },
    {
        "number": 1983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j] + 1)\n    return str(max(max(row) for row in dp))\n"
    },
    {
        "number": 1984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = map(int, stdin.split())\n    levels = []\n    for _ in range(k):\n        level = stdin.split()\n        levels.append(level)\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key=lambda x: (len(x), x))\n    levels = sorted(levels, key="
    },
    {
        "number": 1985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.sort()\n    if n == k:\n        return str(len(scores))\n    else:\n        return str(len(scores) - 1)"
    },
    {
        "number": 1986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    restaurants = []\n    for i in range(n):\n        restaurants.append(list(map(int, stdin.split())))\n    max_joy = 0\n    for i in range(n):\n        if restaurants[i][1] - k > 0:\n            max_joy = max(max_joy, restaurants[i][0] - (restaurants[i][1] - k))\n    return str(max_joy)"
    },
    {
        "number": 1987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_1, c_2 = map(int, stdin.split())\n    pupils = stdin\n    pupils = list(map(int, pupils))\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(map(str, pupils))\n    pupils = ''.join(pupils)\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(map(int, pupils))\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(map(str, pupils))\n    pupils = ''.join(pupils)\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(map(int, pupils))\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(map(str, pupils))\n    pupils = ''.join(pupils)\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(map(int, pupils))\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n    pupils.sort()\n    pupils.reverse()\n    pupils = list(pupils)\n"
    },
    {
        "number": 1988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    k = 1\n    while k < n:\n        s = s[:k] + s[k:][::-1]\n        k += 1\n    return s"
    },
    {
        "number": 1989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    res = []\n    for i in range(n):\n        if s[i] == '(':\n            res.append(0)\n        elif s[i] == ')':\n            res.append(1)\n        elif s[i] == ')':\n            res.append(2)\n        else:\n            res.append(3)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(min(2, a[1] - a[0]))"
    },
    {
        "number": 1992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    apps = list(map(int, stdin.split()))\n    apps.sort()\n    order = list(range(1, n + 1))\n    for app in apps:\n        order.remove(app)\n    return str(len(order) + len(apps) - 1)\n"
    },
    {
        "number": 1993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [[c for c in stdin[i * m:(i + 1) * m]] for i in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                continue\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                ans += 1\n            if i == 0 or j == 0:\n                ans += 1\n            if i == n - 1 or j == m - 1:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == m - 1:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n            if i == n - 1 or j == 0:\n                ans += 1\n            if i == 0 or j == m - 1:\n                ans += 1\n"
    },
    {
        "number": 1994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    k = 0\n    for i in range(1, l + 1):\n        for j in range(l - i + 1):\n            if s[j:j + i] == s[j + i:j + i + i]:\n                k += 1\n    return str(k) + '\\n' + '\\n'.join(map(str, sorted([l, k])))"
    },
    {
        "number": 1995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    m = int(input())\n    for _ in range(m):\n        l, r, k = map(int, input().split())\n        s = s[:l-1] + s[r-1:]\n        s = s[k:] + s[:k]\n    return s"
    },
    {
        "number": 1996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    actions = []\n    for i in range(n):\n        actions.append(stdin.split()[i])\n    return str(len([action for action in actions if action.startswith(\"!\") or action.startswith(\"?\")]))"
    },
    {
        "number": 1997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = list(map(int, stdin.split()))\n    nodes.sort()\n    return str(nodes[-1]) + \" \" + str(nodes[0])"
    },
    {
        "number": 1998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    grid = stdin.replace(\"0\", \" \")\n    grid = stdin.replace(\"1\", \"X\")\n    grid = stdin.replace(\"X\", \"0\")\n    grid = stdin.replace(\"0\", \"X\")\n    grid = stdin.replace(\"X\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace(\"0\", \"1\")\n    grid = stdin.replace(\"1\", \"0\")\n    grid = stdin.replace"
    },
    {
        "number": 1999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    while len(a) > 2:\n        if a.count(a[0]) > 1:\n            a.remove(a[0])\n        else:\n            a.remove(a[0])\n            a.remove(a[0])\n            k += 1\n    return str(k) +'' +''.join(map(str, a))\n\nsolution(input())\n"
    },
    {
        "number": 2000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == 2 ** a[i]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    parts = list(map(int, stdin.split()))\n    parts.sort()\n    ans = 0\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        ans += parts[r - 1] - parts[l - 1]\n    return str(ans % 1000000007)"
    },
    {
        "number": 2002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    beauties = list(map(int, stdin.split()))\n    beauties.sort()\n    beauties = list(map(lambda x: x if x!= 0 else x + 1, beauties))\n    beauties = list(map(lambda x: x if x!= 1 else x - 1, beauties))\n    beauties = list(map(lambda x: x if x!= 2 else x - 2, beauties))\n    beauties = list(map(lambda x: x if x!= 3 else x - 3, beauties))\n    beauties = list(map(lambda x: x if x!= 4 else x - 4, beauties))\n    beauties = list(map(lambda x: x if x!= 5 else x - 5, beauties))\n    beauties = list(map(lambda x: x if x!= 6 else x - 6, beauties))\n    beauties = list(map(lambda x: x if x!= 7 else x - 7, beauties))\n    beauties = list(map(lambda x: x if x!= 8 else x - 8, beauties))\n    beauties = list(map(lambda x: x if x!= 9 else x - 9, beauties))\n    beauties = list(map(lambda x: x if x!= 10 else x - 10, beauties))\n    beauties = list(map(lambda x: x if x!= 11 else x - 11, beauties))\n    beauties = list(map(lambda x: x if x!= 12 else x - 12, beauties))\n    beauties = list(map(lambda x: x if x!= 13 else x - 13, beauties))\n    beauties = list(map(lambda x: x if x!= 14 else x - 14, beauties))\n    beauties = list(map(lambda x: x if x!= 15 else x - 15, beauties))\n    beauties = list(map(lambda x: x if x!= 16 else x - 16, beauties))\n    beauties = list(map(lambda x: x if x!= 17 else x - 17, beauties))\n    beauties = list(map(lambda x: x if x!= 18 else x - 18, beauties))\n    beauties = list(map(lambda x: x if x!= 19 else x - 19, beauties))\n    beauties = list(map(lambda x: x if x!= 20 else x - 20, beauties))\n    beauties = list(map(lambda x: x if x!= 21 else x - 21, beauties))\n    beauties = list(map(lambda x: x if x!= 22 else x - 22, beauties))\n    beauties = list(map(lambda x: x if x!= 23 else x - 23, beauties))\n    beauties = list(map(lambda x: x if x!= 24 else x - 24, beauties))\n    beauties = list(map(lambda x: x if x!= 25 else x - 25, beauties))\n    beauties = list(map(lambda x: x if x!= 26 else x - 26, beauties))\n    beauties = list(map(lambda x: x if x!= 27 else x - 27, beauties))\n    beauties = list(map(lambda x: x if x!= 28 else x - 28, beauties))\n    beauties = list(map(lambda x: x if x!= 29 else x - 29, beauties))\n    beauties = list(map(lambda x: x if x!= 30 else x - 30, beauties))\n    beauties = list(map(lambda x: x if x!= 31 else x - 31, beauties))\n    beauties = list(map(lambda x: x if x!= 32 else x - 32, beauties))\n    beauties = list(map(lambda x: x if x!= 33 else x - 33, beauties))\n    beauties = list(map(lambda x: x if x!= 34 else x - 34, beauties))\n    beauties = list(map(lambda x: x if x!= 35 else x - 35, beauties))\n    beauties = list(map(lambda x: x if x!= 36 else x - 36, beauties))\n    beauties = list(map(lambda x: x if x!= 37 else x - 37, beauties))\n    beauties = list(map(lambda x: x if x!= 38 else x - 38, beauties))\n    beauties = list(map(lambda x: x if x!= 39 else x - 39, beauties))\n    beauties = list(map(lambda x: x if x!= 40 else x - 40, beauties))\n    beauties = list(map(lambda x: x if x!= 41 else x - 41, beauties))\n    beauties = list(map(lambda x: x if x!= 42 else x - 42, beauties))\n    beauties = list(map(lambda x: x if x!= 43 else x - 43, beauties))\n    beauties = list(map(lambda x: x if x!= 44 else x - 44, beauties))\n    beauties = list(map(lambda x: x if x!= 45 else x - 45, beauties))\n    beauties = list(map(lambda x: x if x!= 46 else x - 46, beauties))\n    beauties = list(map("
    },
    {
        "number": 2003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    A = set()\n    for i in range(q):\n        command, x = stdin.split()\n        if command == '+':\n            A.add(x)\n        elif command == '-':\n            A.remove(x)\n        else:\n            print(max(A))\n    return ''"
    },
    {
        "number": 2004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    k = []\n    for i in range(1, n + 1):\n        k.append(i)\n    while len(k) > 1:\n        for i in range(1, len(k)):\n            if k[i] == k[i - 1] + 1:\n                k.pop(i)\n                k.pop(i - 1)\n                m += 1\n                break\n    return str(m) + '\\n' +''.join(map(str, k))\n"
    },
    {
        "number": 2005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, n_1, n_2 = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a_1 = a[:n_1]\n    a_2 = a[n_1:]\n    a_1_mean = sum(a_1) / n_1\n    a_2_mean = sum(a_2) / n_2\n    return str(max(a_1_mean, a_2_mean))\n"
    },
    {
        "number": 2006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [['*' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                field[i][j] = 'S'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'S':\n                field[i][j] = '*'\n    for i in range(n):\n"
    },
    {
        "number": 2007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    max_value = -1\n    for i in range(1, n + 1):\n        value = 0\n        for j in graph[i]:\n            value += 1\n        if value > max_value:\n            max_value = value\n    return str(max_value) if max_value!= -1 else '-1'\n"
    },
    {
        "number": 2008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        res += a[i] * (i - 1) + a[n - i - 1] * (n - i)\n    return str(res)\n"
    },
    {
        "number": 2009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    r1, c1 = map(int, stdin.split()[1].split(','))\n    r2, c2 = map(int, stdin.split()[2].split(','))\n    grid = stdin.split()[3:]\n    cost = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '1':\n                cost += (i - r1) ** 2 + (j - c1) ** 2\n            else:\n                cost += (i - r2) ** 2 + (j - c2) ** 2\n    return str(cost)\n"
    },
    {
        "number": 2010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    for i in range(m):\n        t, v, x = map(int, stdin.split())\n        if t == 1:\n            for j in range(v-1, n):\n                arr[j] = x\n        elif t == 2:\n            for j in range(v-1, n):\n                arr[j] += x\n        elif t == 3:\n            for j in range(v-1, n):\n                arr[j] = arr[j] + x\n    return''.join(map(str, arr))"
    },
    {
        "number": 2011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    debts = []\n    for _ in range(m):\n        debts.append(tuple(map(int, stdin.split())))\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[3])\n    debts.sort(key=lambda x: x[4])\n    debts.sort(key=lambda x: x[5])\n    debts.sort(key=lambda x: x[6])\n    debts.sort(key=lambda x: x[7])\n    debts.sort(key=lambda x: x[8])\n    debts.sort(key=lambda x: x[9])\n    debts.sort(key=lambda x: x[10])\n    debts.sort(key=lambda x: x[11])\n    debts.sort(key=lambda x: x[12])\n    debts.sort(key=lambda x: x[13])\n    debts.sort(key=lambda x: x[14])\n    debts.sort(key=lambda x: x[15])\n    debts.sort(key=lambda x: x[16])\n    debts.sort(key=lambda x: x[17])\n    debts.sort(key=lambda x: x[18])\n    debts.sort(key=lambda x: x[19])\n    debts.sort(key=lambda x: x[20])\n    debts.sort(key=lambda x: x[21])\n    debts.sort(key=lambda x: x[22])\n    debts.sort(key=lambda x: x[23])\n    debts.sort(key=lambda x: x[24])\n    debts.sort(key=lambda x: x[25])\n    debts.sort(key=lambda x: x[26])\n    debts.sort(key=lambda x: x[27])\n    debts.sort(key=lambda x: x[28])\n    debts.sort(key=lambda x: x[29])\n    debts.sort(key=lambda x: x[30])\n    debts.sort(key=lambda x: x[31])\n    debts.sort(key=lambda x: x[32])\n    debts.sort(key=lambda x: x[33])\n    debts.sort(key=lambda x: x[34])\n    debts.sort(key=lambda x: x[35])\n    debts.sort(key=lambda x: x[36])"
    },
    {
        "number": 2012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    s = ''\n    for i in range(n):\n        s += ''.join(c[i] * c[i])\n    return s"
    },
    {
        "number": 2013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    board = [[0] * m for _ in range(n)]\n    for i in range(k):\n        sx, sy = map(int, stdin.split())\n        board[sx - 1][sy - 1] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                ans += 1\n                board[i][j] = 2\n                for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < m and board[x][y] == 0:\n                        board[x][y] = 2\n    return str(ans)\n"
    },
    {
        "number": 2014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 1\n            elif arr[i - 1] == arr[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return str(dp[n][n])\n"
    },
    {
        "number": 2015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.count('R') == stdin.count('G') == stdin.count('B') else 'No'"
    },
    {
        "number": 2016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, m = map(int, stdin.split())\n    for i in range(q):\n        k, a, b = map(int, stdin.split())\n        if k == 1:\n            print('YES') if (a + i) % m == 0 and (b + i) % m == 0 else print('NO')\n        else:\n            print('YES' if (a + i) % m == 0 and (b + i) % m == 0 else 'NO')\n    return ''"
    },
    {
        "number": 2017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] > p[j]:\n                inversions += 1\n    return str(inversions)"
    },
    {
        "number": 2018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    for _ in range(q):\n        s_x, s_y, e_x, e_y = map(int, stdin.split())\n        if s_x == 1:\n            if 1 <= s_y <= n and 1 <= e_y <= n:\n                if s_y == e_y:\n                    if s_x == e_x:\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\n                else:\n                    print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if 1 <= s_y <= m and 1 <= e_y <= m:\n                if s_y == e_y:\n                    if s_x == e_x:\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\n                else:\n                    print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 2019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        s = stdin.split()[i]\n        if len(s) == 1:\n            print(\"DA\")\n        else:\n            print(\"NET\")\n    return \"\""
    },
    {
        "number": 2020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alarm_clock = []\n    for i in range(n):\n        alarm_clock.append(list(map(int, stdin.split())))\n    alarm_clock.sort(key=lambda x: x[0])\n    alarm_clock.sort(key=lambda x: x[1])\n    alarm_clock.sort(key=lambda x: x[0] + x[1])\n    alarm_clock.sort(key=lambda x: x[1] + x[0])\n    alarm_clock.sort(key=lambda x: x[0] + x[1] + x[2])\n    alarm_clock.sort(key=lambda x: x[1] + x[2] + x[0])\n    alarm_clock.sort(key=lambda x: x[2] + x[0] + x[1])\n    alarm_clock.sort(key=lambda x: x[2] + x[1] + x[0])\n    alarm_clock.sort(key=lambda x: x[2] + x[1] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[0])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[1])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock.sort(key=lambda x: x[2] + x[2] + x[2])\n    alarm_clock"
    },
    {
        "number": 2021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    q = list(map(int, stdin.split()[3]))\n    a.sort()\n    q.sort()\n    q.reverse()\n    ans = 0\n    for i in range(m):\n        ans += a[i] * q[i]\n    for i in range(m, n):\n        ans += a[i]\n    return str(ans)"
    },
    {
        "number": 2022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    independent_set = set()\n    cycle = set()\n    for i in range(n):\n        if len(graph[i]) == 0:\n            independent_set.add(i + 1)\n        elif len(graph[i]) == 1:\n            cycle.add(i + 1)\n    independent_set = sorted(independent_set)\n    cycle = sorted(cycle)\n    if len(cycle) == 0:\n        return str(len(independent_set))\n    else:\n        return str(len(independent_set)) +'' +''.join(map(str, independent_set)) +'' +''.join(map(str, cycle))"
    },
    {
        "number": 2023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    for i in range(m):\n        if a[i] + b[i] == a[i + 1]:\n            print(a[i + 1])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1]:\n            print(a[i + 1] + b[i + 1])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i]:\n            print(a[i + 1] + b[i + 1] + b[i])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7] + b[i + 8]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7] + b[i + 8])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7] + b[i + 8] + b[i + 9]:\n            print(a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7] + b[i + 8] + b[i + 9])\n        elif a[i] + b[i] == a[i + 1] + b[i + 1] + b[i] + b[i + 1] + b[i + 2] + b[i + 3] + b[i + 4] + b[i + 5] + b[i + 6] + b[i + 7] + b[i +"
    },
    {
        "number": 2024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    happy = 0\n    sad = 0\n    for i in range(n):\n        if a[i] > 2 * a[i - 1]:\n            happy += 1\n        elif a[i] < 2 * a[i - 1]:\n            sad += 1\n        else:\n            happy += 1\n            sad += 1\n    return happy % 998244353\n"
    },
    {
        "number": 2025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"2\"\n    if n == 6:\n        return \"3\"\n    if n == 7:\n        return \"4\"\n    if n == 8:\n        return \"5\"\n    if n == 9:\n        return \"6\"\n    if n == 10:\n        return \"7\"\n    if n == 11:\n        return \"8\"\n    if n == 12:\n        return \"9\"\n    if n == 13:\n        return \"10\"\n    if n == 14:\n        return \"11\"\n    if n == 15:\n        return \"12\"\n    if n == 16:\n        return \"13\"\n    if n == 17:\n        return \"14\"\n    if n == 18:\n        return \"15\"\n    if n == 19:\n        return \"16\"\n    if n == 20:\n        return \"17\"\n    if n == 21:\n        return \"18\"\n    if n == 22:\n        return \"19\"\n    if n == 23:\n        return \"20\"\n    if n == 24:\n        return \"21\"\n    if n == 25:\n        return \"22\"\n    if n == 26:\n        return \"23\"\n    if n == 27:\n        return \"24\"\n    if n == 28:\n        return \"25\"\n    if n == 29:\n        return \"26\"\n    if n == 30:\n        return \"27\"\n    if n == 31:\n        return \"28\"\n    if n == 32:\n        return \"29\"\n    if n == 33:\n        return \"30\"\n    if n == 34:\n        return \"31\"\n    if n == 35:\n        return \"32\"\n    if n == 36:\n        return \"33\"\n    if n == 37:\n        return \"34\"\n    if n == 38:\n        return \"35\"\n    if n == 39:\n        return \"36\"\n    if n == 40:\n        return \"37\"\n    if n == 41:\n        return \"38\"\n    if n == 42:\n        return \"39\"\n    if n == 43:\n        return \"40\"\n    if n == 44:\n        return \"41\"\n    if n == 45:\n        return \"42\"\n    if n == 46:\n        return \"43\"\n    if n == 47:\n        return \"44\"\n    if n == 48:\n        return \"45\"\n    if n == 49:\n        return \"46\"\n    if n == 50:\n        return \"47\"\n    if n == 51:\n        return \"48\"\n    if n == 52:\n        return \"49\"\n    if n == 53:\n        return \"50\"\n    if n == 54:\n        return \"51\"\n    if n == 55:\n        return \"52\"\n    if n == 56:\n        return \"53\"\n    if n == 57:\n        return \"54\"\n    if n == 58:\n        return \"55\"\n    if n == 59:\n        return \"56\"\n    if n == 60:\n        return \"57\"\n    if n == 61:\n        return \"58\"\n    if n == 62:\n        return \"59\"\n    if n == 63:\n        return \"60\"\n    if n == 64:\n        return \"61\"\n    if n == 65:\n        return \"62\"\n    if n == 66:\n        return \"63\"\n    if n == 67:\n        return \"64\"\n    if n == 68:\n        return \"65\"\n    if n == 69:\n        return \"66\"\n    if n == 70:\n        return \"67\"\n    if n == 71:\n        return \"68\"\n    if n == 72:\n        return \"69\"\n    if n == 73:\n        return \"70\"\n    if n == 74:\n        return \"71\"\n    if n == 75:\n        return \"72\"\n    if n == 76:\n        return \"73\"\n    if n == 77:\n        return \"74\"\n    if n == 78:\n        return \"75\"\n    if n == 79:\n        return \"76\"\n    if n == 80:\n        return \"77\"\n    if n == 81:\n        return \"78\"\n    if n == 82:\n        return \"79\"\n    if n == 83:\n        return \"80\"\n    if n == 84:\n        return \"81\"\n    if n == 85:\n        return \"82\"\n    if n == 86:\n        return \"83\"\n    if n == 87:\n        return \"84\"\n    if n == 88:\n        return \"85\"\n    if n == 89:\n        return \"86\"\n    if n == 90:\n        return \"87\"\n    if n == 91:\n        return \"88\"\n    if n == 92:\n        return \"89\"\n    if n == 93:\n        return \"90\"\n    if n == 94:\n        return \"91\"\n    if n == 95:\n        return \"92\"\n    if n == 96:\n        return \"93\"\n    if n == 97:\n        return \"94\"\n    if n == 98:\n        return \"95\"\n    if n == 99:\n        return \"96\"\n    if n == 100:\n        return \"97\"\n    if n == 101:\n        return \"98\"\n    if n == 102:\n        return \"99\"\n    if n == 103:\n        return \"100\"\n    if n == 104:\n        return \"101\"\n    if n == 105:\n        return \"102\"\n    if n == 106:\n        return \"103\"\n    if n == 107:\n        return \"104\"\n    if n == 108:\n        return \"105\"\n    if n == 109:\n        return \"106\"\n    if n == 110:\n        return \"107\"\n    if n == 111:\n        return \"108\"\n    if n == 112:\n        return \"109\"\n    if n == 113:\n        return \"110\"\n    if n == 114:\n        return \"111\"\n    if n == 115:\n        return \"112\"\n    if n == 116:\n        return \"113\"\n    if n == 117:\n        return \"114\"\n    if n == 118:\n        return \"115\"\n    if n == 119:\n        return \"116\"\n    if n == 120:\n        return \"117\"\n    if n == 121:\n        return \"118\"\n    if n == 122:\n        return \"119\"\n    if n == 123:\n        return \"120\"\n    if n == 124:\n        return \"121\"\n    if n == 125:\n        return \"122\"\n    if n == 126:\n        return \"123\"\n    if n == 127:\n        return \"124\"\n    if n == 128:\n        return \"125\"\n    if n == 129:\n        return \"126\"\n    if n"
    },
    {
        "number": 2026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = stdin.split()\n    x = 0\n    y = 0\n    min_len = float('inf')\n    for move in moves:\n        if move == 'R':\n            x += 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        min_len = min(min_len, abs(x) + abs(y))\n    return str(min_len)"
    },
    {
        "number": 2027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] - a[i] + 1 + a[i] + 2 - a[i] + 3)\n    return''.join(map(str, b))"
    },
    {
        "number": 2028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    desks = []\n    for line in stdin.splitlines():\n        desks.append(tuple(map(int, line.split())))\n    desks.sort(key=lambda x: x[0])\n    desks.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(len(desks)):\n        for j in range(i + 1, len(desks)):\n            if desks[i][0] == desks[j][0] or desks[i][1] == desks[j][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        a -= 1\n        b -= 1\n        edges[a].append(b)\n        edges[b].append(a)\n    d = 0\n    for i in range(n):\n        d = max(d, max(map(lambda x: sum(map(lambda y: abs(x - y), edges[i])), edges[i])))\n    return str(d)"
    },
    {
        "number": 2030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(float, stdin.split()[1].split()))\n    b = list(map(float, stdin.split()[2].split()))\n    a.sort()\n    b.sort()\n    max_a = a[-1]\n    min_a = a[0]\n    max_b = b[-1]\n    min_b = b[0]\n    if max_a == max_b and min_a == min_b:\n        return \"0.5 0.5\"\n    else:\n        return \"{:.6f} {:.6f}\".format(max_a, min_a)\n"
    },
    {
        "number": 2031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    for _ in range(m):\n        k, pos = map(int, stdin.split()[3:])\n        if k == 1:\n            print(a[pos])\n        else:\n            print(max(a[pos - k + 1:pos + 1]))\n    return ''"
    },
    {
        "number": 2032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    portals = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        portals[a - 1].append((b - 1, c))\n        portals[b - 1].append((a - 1, c))\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[1])\n    portals = sorted(portals, key=lambda x: x[0])\n    portals = sorted(portals, key=lambda x: x["
    },
    {
        "number": 2033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        roads.append((u, v))\n    k = int(stdin)\n    path = list(map(int, stdin.split()))\n    return str(min(max(0, len(path) - 1) - max(0, len(path) - 2), len(path) - 1))\n"
    },
    {
        "number": 2034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split())))\n    roads.sort(key=lambda x: x[0])\n    cities = set()\n    for road in roads:\n        cities.add(road[0])\n        cities.add(road[1])\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    "
    },
    {
        "number": 2035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_x, s_y = map(int, stdin.split())\n    houses = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        houses.append((x, y))\n    houses.sort(key=lambda x: (x[0], x[1]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[0], x[1]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[0], x[1]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]))\n    houses.sort(key=lambda x: (x[1], x[0]"
    },
    {
        "number": 2036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, sx, sy = map(int, stdin.split())\n    visited = set()\n    visited.add((sx, sy))\n    queue = deque([(sx, sy)])\n    while queue:\n        x, y = queue.popleft()\n        if x == n - 1 and y == m - 1:\n            return len(visited)\n        for i, j in ((x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)):\n            if 0 <= i <= n - 1 and 0 <= j <= m - 1 and (i, j) not in visited:\n                visited.add((i, j))\n                queue.append((i, j))\n    return -1\n"
    },
    {
        "number": 2037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int, problems))\n    problems = sorted(problems)\n    problems = list(map(str, problems))\n    problems = ''.join(problems)\n    problems = list(map(int,"
    },
    {
        "number": 2038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    m = 0\n    while True:\n        swaps = 0\n        for i in range(1, n, 2):\n            if p[i] < p[i - 1]:\n                p[i], p[i - 1] = p[i - 1], p[i]\n                swaps += 1\n        if swaps == 0:\n            break\n        m += 1\n    return str(m) + '\\n' +''.join(map(str, p))"
    },
    {
        "number": 2039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n - 1):\n        if a[i] < a[i - 1] and a[i] < a[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 2040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    b.reverse()\n    for i in range(n):\n        if b[i] == b[i-1]:\n            continue\n        else:\n            break\n    if i == n-1:\n        return ''.join(map(str, b))\n    else:\n        return ''.join(map(str, b[:i+1]))"
    },
    {
        "number": 2041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    for _ in range(m):\n        k, pos = map(int, stdin.split()[3:])\n        if k == 1:\n            print(a[pos])\n        else:\n            print(max(a[pos-k+1:pos+1]))\n    return ''"
    },
    {
        "number": 2042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    museum = stdin.split()\n    museum = [[museum[i] for i in range(j, j + m)] for j in range(0, len(museum), m)]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    museum = [[museum[i][j] for i in range(len(museum))] for j in range(len(museum[0]))]\n    m"
    },
    {
        "number": 2043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s) == 0:\n        return 0\n    if len(t) == 0:\n        return 1\n    if len(s) == 1:\n        return 1\n    if len(t) == 1:\n        return 0\n    if len(s) == 2:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 2:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 3:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 3:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 4:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 4:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 5:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 5:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 6:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 6:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 7:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 7:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 8:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 8:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 9:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 9:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 10:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 10:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 11:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 11:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 12:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 12:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 13:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 13:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 14:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 14:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 15:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 15:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 16:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 16:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 17:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 17:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 18:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 18:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 19:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 19:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 20:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 20:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 21:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 21:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 22:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 22:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 23:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 23:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 24:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 24:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 25:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 25:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 26:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 26:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 27:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 27:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 28:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 28:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(s) == 29:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if len(t) == 29:\n        if s == t:\n            return 1\n        else:\n"
    },
    {
        "number": 2044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(n):\n        if i == 0:\n            t += 1\n        else:\n            t += a[i]\n        if t > m:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 2045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    words = sorted(words, key=lambda x: (len(x), x))\n    result = []\n    for i in range(len(words)):\n        if i == 0:\n            result.append(words[i])\n        elif words[i][0] == words[i - 1][-1]:\n            result[-1] += words[i]\n        else:\n            result.append(words[i])\n    return \" \".join(result)\n"
    },
    {
        "number": 2046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    snacks = list(map(int, stdin.split()))\n    snacks.sort()\n    snacks = list(map(str, snacks))\n    for i in range(n):\n        if i == 0:\n            print(snacks[i])\n        else:\n            print(snacks[i], end=\" \")\n    return \"\""
    },
    {
        "number": 2047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = list(map(int, stdin.split()[2:]))\n    b_new = []\n    a_new = []\n    for i in range(n):\n        b_new.append(b[i] - a[i])\n        a_new.append(a[i] - b[i])\n    for i in range(n):\n        if b_new[i] % a_new[i]!= 0:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 2048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(map(int, stdin.split()[1]))\n    c = list(map(int, stdin.split()[2]))\n    s.sort()\n    c.sort()\n    if n == 1:\n        if s[0] < s[1] < s[2]:\n            return str(c[0] + c[1] + c[2])\n        else:\n            return -1\n    else:\n        for i in range(n):\n            if s[i] < s[i + 1] < s[i + 2]:\n                return str(c[i] + c[i + 1] + c[i + 2])\n        return -1\n"
    },
    {
        "number": 2049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        if is_ladder(arr, l, r):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n\ndef"
    },
    {
        "number": 2050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sets = set()\n    for i in range(1, n + 1):\n        sets.add(i)\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if gcd(i, j) == k:\n                sets.add(i)\n                sets.add(j)\n    return str(len(sets)) + '\\n' +''.join(map(str, sorted(sets)))\n\n\ndef"
    },
    {
        "number": 2051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    socks = list(map(int, stdin.split()))\n    socks = sorted(socks)\n    socks = list(map(str, socks))\n    socks =''.join(socks)\n    return socks"
    },
    {
        "number": 2052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    print(a)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 2053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    v = abs(sum(a) - sum(b))\n    k = 0\n    while v > 0:\n        if a[k] > b[k]:\n            a[k], b[k] = b[k], a[k]\n            v -= 1\n        k += 1\n    return str(k) +'' + str(k + 1) +'' +''.join(map(str, a)) +'' +''.join(map(str, b))\n"
    },
    {
        "number": 2054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if a == b:\n            print(0)\n        else:\n            print(a // 2 + b // 2)\n    return \"\""
    },
    {
        "number": 2055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2].split()))\n        b = list(map(int, stdin.split()[3].split()))\n        if all(a[i] <= b[i] for i in range(n)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 2056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = a[i]\n            y = a[j]\n            xor = x ^ y\n            and_ = x & y\n            or_ = x | y\n            max_sum = max(max_sum, xor * xor + and_ * and_ + or_ * or_)\n    return str(max_sum)\n"
    },
    {
        "number": 2057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1]))\n    return str(min(n, max(t)))"
    },
    {
        "number": 2058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    return sum(hamming_distance(a, b) for b in b_substrings(a))\n\ndef"
    },
    {
        "number": 2059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] > max_k:\n                max_k = a[i] * a[j]\n    return str(max_k)\n"
    },
    {
        "number": 2060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        x = int(stdin)\n        if x % 3 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    lakes = set()\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '*':\n                lakes.add((i, j))\n    return str(len(lakes) - k)"
    },
    {
        "number": 2062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + a[i])\n    return str(dp[-1])\n"
    },
    {
        "number": 2063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(m):\n        if i == 0:\n            res = a[i]\n        else:\n            res = max(res, a[i] - res)\n    return str(res)"
    },
    {
        "number": 2064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"11\"\n    if n == 3:\n        return \"111\"\n    if n == 4:\n        return \"1111\"\n    if n == 5:\n        return \"11111\"\n    if n == 6:\n        return \"111111\"\n    if n == 7:\n        return \"1111111\"\n    if n == 8:\n        return \"11111111\"\n    if n == 9:\n        return \"1111111111\"\n    if n == 10:\n        return \"11111111111\"\n    if n == 11:\n        return \"111111111111\"\n    if n == 12:\n        return \"11111111111111\"\n    if n == 13:\n        return \"111111111111111\"\n    if n == 14:\n        return \"1111111111111111\"\n    if n == 15:\n        return \"111111111111111111\"\n    if n == 16:\n        return \"1111111111111111111\"\n    if n == 17:\n        return \"11111111111111111111\"\n    if n == 18:\n        return \"1111111111111111111111\"\n    if n == 19:\n        return \"111111111111111111111111\"\n    if n == 20:\n        return \"111111111111111111111111111\"\n    if n == 21:\n        return \"111111111111111111111111111111\"\n    if n == 22:\n        return \"1111111111111111111111111111111111\"\n    if n == 23:\n        return \"11111111111111111111111111111111111111\"\n    if n == 24:\n        return \"111111111111111111111111111111111111111111\"\n    if n == 25:\n        return \"11111111111111111111111111111111111111111111111\"\n    if n == 26:\n        return \"111111111111111111111111111111111111111111111111111\"\n    if n == 27:\n        return \"1111111111111111111111111111111111111111111111111111111111\"\n    if n == 28:\n        return \"11111111111111111111111111111111111111111111111111111111111111\"\n    if n == 29:\n        return \"111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 30:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 31:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 32:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 33:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 34:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 35:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 36:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 37:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 38:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 39:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 40:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 41:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 42:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 43:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 44:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 45:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 46:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 47:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 48:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 49:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 50:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 51:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 52:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 53:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 54:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 55:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 56:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 57:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 58:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 59:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 60:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if n == 61:\n        return \"11111111111111111111111111111111"
    },
    {
        "number": 2065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    candidates = []\n    for i in range(1, n + 1):\n        candidates.append(i)\n    for i in range(m):\n        p, q = map(int, stdin.split())\n        if p in candidates and q in candidates:\n            candidates.remove(p)\n            candidates.remove(q)\n            candidates.append(p)\n            candidates.append(q)\n    return str(len(candidates)) + '\\n' +''.join(map(str, candidates))"
    },
    {
        "number": 2066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 2067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return \"0\"\n    if n == 0 and m == 1:\n        return \"1\"\n    if n == 1 and m == 0:\n        return \"1\"\n    if n == 1 and m == 1:\n        return \"0\"\n    if n == 2 and m == 0:\n        return \"1\"\n    if n == 2 and m == 1:\n        return \"0\"\n    if n == 2 and m == 2:\n        return \"0\"\n    if n == 3 and m == 0:\n        return \"1\"\n    if n == 3 and m == 1:\n        return \"0\"\n    if n == 3 and m == 2:\n        return \"0\"\n    if n == 3 and m == 3:\n        return \"0\"\n    if n == 4 and m == 0:\n        return \"1\"\n    if n == 4 and m == 1:\n        return \"0\"\n    if n == 4 and m == 2:\n        return \"0\"\n    if n == 4 and m == 3:\n        return \"0\"\n    if n == 4 and m == 4:\n        return \"0\"\n    if n == 5 and m == 0:\n        return \"1\"\n    if n == 5 and m == 1:\n        return \"0\"\n    if n == 5 and m == 2:\n        return \"0\"\n    if n == 5 and m == 3:\n        return \"0\"\n    if n == 5 and m == 4:\n        return \"0\"\n    if n == 5 and m == 5:\n        return \"0\"\n    if n == 6 and m == 0:\n        return \"1\"\n    if n == 6 and m == 1:\n        return \"0\"\n    if n == 6 and m == 2:\n        return \"0\"\n    if n == 6 and m == 3:\n        return \"0\"\n    if n == 6 and m == 4:\n        return \"0\"\n    if n == 6 and m == 5:\n        return \"0\"\n    if n == 6 and m == 6:\n        return \"0\"\n    if n == 7 and m == 0:\n        return \"1\"\n    if n == 7 and m == 1:\n        return \"0\"\n    if n == 7 and m == 2:\n        return \"0\"\n    if n == 7 and m == 3:\n        return \"0\"\n    if n == 7 and m == 4:\n        return \"0\"\n    if n == 7 and m == 5:\n        return \"0\"\n    if n == 7 and m == 6:\n        return \"0\"\n    if n == 7 and m == 7:\n        return \"0\"\n    if n"
    },
    {
        "number": 2068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reposts = []\n    for i in range(n):\n        reposts.append(stdin.splitlines()[i])\n    reposts = sorted(reposts, key=lambda x: len(x.split()))\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n    reposts = sorted(reposts, key=lambda x: x.split()[0])\n    reposts = sorted(reposts, key=lambda x: x.split()[1])\n"
    },
    {
        "number": 2069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    foe_pairs = []\n    for i in range(m):\n        foe_pairs.append((p[i], p[i + 1]))\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in foe_pairs:\n                c += 1\n    return str(c)"
    },
    {
        "number": 2070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    s = stdin.split()[1]\n    return str(sum(x) - x[0] - x[-1])"
    },
    {
        "number": 2071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    res = 0\n    for i in range(n):\n        res += a[i] * b[i]\n    return str(res)"
    },
    {
        "number": 2072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    v = list(map(int, stdin.split()[2].split()))\n    x.sort()\n    v.sort()\n    ans = 0\n    for i in range(n):\n        ans += (x[i] - x[i - 1]) / v[i]\n    return str(ans)"
    },
    {
        "number": 2073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = list(map(int, stdin.split()))\n    roads = sorted(roads)\n    \n    def flip(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_all(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_one(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_two(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_three(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_four(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_five(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_six(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_seven(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_eight(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_nine(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_ten(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_eleven(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_twelve(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_thirteen(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_fourteen(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_fifteen(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_sixteen(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_seventeen(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads[i]\n        return roads\n    \n    def flip_eighteen(roads):\n        for i in range(len(roads)):\n            if roads[i] == roads[i+1]:\n                roads[i], roads[i+1] = roads[i+1], roads"
    },
    {
        "number": 2074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    return str(c[n // 2])"
    },
    {
        "number": 2075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    return str(len(s) - 2 * len(s.replace('(', ')')))"
    },
    {
        "number": 2076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        if a + b + c == 0:\n            print(0)\n        elif a + b + c == 1:\n            print(1)\n        else:\n            print(a + b + c)\n    return ''"
    },
    {
        "number": 2077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    t = list(map(int, stdin.split()))\n    t.sort()\n    res = []\n    for i in range(n):\n        if t[i] == i + 1:\n            res.append(i + 1)\n        else:\n            for j in graph[i]:\n                if t[j] == j + 1:\n                    res.append(i + 1)\n                    break\n    return''.join(map(str, res))\n"
    },
    {
        "number": 2078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = []\n    v = []\n    for i in range(n):\n        h.append(list(map(int, stdin.split())))\n    for i in range(m):\n        v.append(list(map(int, stdin.split())))\n    return str(solution_part1(n, m, h, v))\n\n\ndef"
    },
    {
        "number": 2079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    w = list(map(int, stdin.split()[1]))\n    order = stdin.split()[2]\n    w.sort()\n    res = []\n    for i in range(n):\n        if order[i] == '0':\n            res.append(w.index(w[i]))\n        else:\n            res.append(n - w.index(w[i]))\n    return''.join(map(str, res))"
    },
    {
        "number": 2080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"2\"\n    if n == 2:\n        return \"3\"\n    if n == 3:\n        return \"6\"\n    return \"0\""
    },
    {
        "number": 2081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return sum(max(a) - min(a), 0)\n"
    },
    {
        "number": 2082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res += a[i] * a[j]\n    return str(res / (n * (n - 1)))\n"
    },
    {
        "number": 2083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(stdin.split()[1])\n    p = list(map(int, stdin.split()[2:]))\n    mean = 0.0\n    for t in range(1, n + 1):\n        mean = (mean + a[t - 1] / T) / c\n    approx = mean\n    error = 0.0\n    for j in range(m):\n        approx = (approx + a[p[j] - T + 1] + a[p[j]] - T + 2 +\n                  a[p[j]] * (1 - c) / c) / T\n        error += abs(approx - a[p[j]]) / a[p[j]]\n    return f\"{approx:.5f} {approx - a[n - 1]:.5f} {error:.5f}\"\n"
    },
    {
        "number": 2084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(sum(a[:k]))"
    },
    {
        "number": 2085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = a[i - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                if a[i - 1] & (1 << (j - 1)):\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a[i - 1])\n    return str(dp[n][n])\n"
    },
    {
        "number": 2086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s, f = map(int, stdin.split())\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(n)\n    "
    },
    {
        "number": 2087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(sum(a * b * c for a in range(1, A + 1) for b in range(1, B + 1) for c in range(1, C + 1)))"
    },
    {
        "number": 2088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return''.join(map(str, p))"
    },
    {
        "number": 2089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        roads[u - 1].append(v - 1)\n        roads[v - 1].append(u - 1)\n    return str(len(set(roads[s - 1]) - set(roads[t - 1])))\n"
    },
    {
        "number": 2090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    songs = list(map(int, stdin.split()))\n    songs.sort()\n    max_p = 0\n    for i in range(k):\n        max_p += songs[i] * min(songs[i + 1:] + songs[:i])\n    return str(max_p)\n"
    },
    {
        "number": 2091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    traps = []\n    for i in range(k):\n        traps.append(list(map(int, stdin.split())))\n    traps.sort(key=lambda x: x[0])\n    # print(traps)\n    # print(a)\n    # print(m, n, k, t)\n    # print(a[0], a[1], a[2])\n    # print(traps)\n    # print(traps[0][0], traps[0][1], traps[0][2])\n    # print(traps[1][0], traps[1][1], traps[1][2])\n    # print(traps[2][0], traps[2][1], traps[2][2])\n    # print(traps[3][0], traps[3][1], traps[3][2])\n    # print(traps[4][0], traps[4][1], traps[4][2])\n    # print(traps[5][0], traps[5][1], traps[5][2])\n    # print(traps[6][0], traps[6][1], traps[6][2])\n    # print(traps[7][0], traps[7][1], traps[7][2])\n    # print(traps[8][0], traps[8][1], traps[8][2])\n    # print(traps[9][0], traps[9][1], traps[9][2])\n    # print(traps[10][0], traps[10][1], traps[10][2])\n    # print(traps[11][0], traps[11][1], traps[11][2])\n    # print(traps[12][0], traps[12][1], traps[12][2])\n    # print(traps[13][0], traps[13][1], traps[13][2])\n    # print(traps[14][0], traps[14][1], traps[14][2])\n    # print(traps[15][0], traps[15][1], traps[15][2])\n    # print(traps[16][0], traps[16][1], traps[16][2])\n    # print(traps[17][0], traps[17][1], traps[17][2])\n    # print(traps[18][0], traps[18][1], traps[18][2])\n    # print(traps[19][0], traps[19][1], traps[19][2])\n    # print(traps[20][0], traps[20][1], traps[20][2])\n    # print(traps[21][0], traps[21][1], traps[21][2])\n    # print(traps[22][0], traps[22][1], traps[22][2])\n    # print(traps[23][0], traps[23][1], traps[23][2])\n    # print(traps[24][0], traps[24][1], traps[24][2])\n    # print(traps[25][0], traps[25][1], traps[25][2])\n    # print(traps[26][0], traps[26][1], traps[26][2])\n    # print(traps[27][0], traps[27][1], traps[27][2])\n    # print(traps[28][0], traps[28][1], traps[28][2])\n    # print(traps[29][0], traps[29][1], traps[29][2])\n    # print(traps[30][0], traps[30][1], traps[30][2])\n    # print(traps[31][0], traps[31][1], traps[31][2])\n    # print(traps[32][0], traps[32][1], traps[32][2])\n    # print(traps[33][0], traps[33][1], traps[33][2])\n    # print(traps[34][0], traps[34][1], traps[34][2])\n    # print(traps[35][0], traps[35][1], traps[35][2])\n    # print(traps[36][0], traps[36][1], traps[36][2])\n    # print(traps[37][0], traps[37][1], traps[37][2])\n    # print(traps[38][0], traps[38]["
    },
    {
        "number": 2093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    ans = 0\n    for i in range(n):\n        ans += h[i] * (k - i)\n    return str(ans % 998244353)"
    },
    {
        "number": 2095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    good_cars = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                if i == j:\n                    good_cars += 1\n                elif i + 1 == j or i - 1 == j:\n                    good_cars += 1\n    return str(good_cars) + '\\n' +''.join(map(str, sorted(list(set([i for i in range(n)]) - set([i for i in range(n) if matrix[i][i] == 1])))))"
    },
    {
        "number": 2096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        b.append(a[i] * 2)\n    b.sort()\n    return str(len(set(b)))"
    },
    {
        "number": 2097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if sum(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if max(a) == 0:\n        return str(min(a)) + \" \" + str(max(a))\n    if min(a) == 0:\n        return str(min(a"
    },
    {
        "number": 2098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    for i in range(n - 1):\n        if edges[i][1]!= edges[i + 1][0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 2099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = map(int, stdin.split())\n    requests = []\n    for _ in range(n):\n        requests.append(list(map(int, stdin.split())))\n    requests.sort(key=lambda x: x[0])\n    users = set()\n    for request in requests:\n        users.add(request[1])\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users.sort()\n    users = set(users)\n    users = list(users)\n    users"
    },
    {
        "number": 2100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    r = []\n    for i in range(n):\n        l.append(int(stdin.split()[i*2]))\n        r.append(int(stdin.split()[i*2+1]))\n    l.sort()\n    r.sort()\n    if l == r:\n        return 0\n    else:\n        return l[0] + r[0]"
    },
    {
        "number": 2101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G, B = map(int, stdin.split())\n    r = list(map(int, stdin.split()))\n    g = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    r.sort()\n    g.sort()\n    b.sort()\n    max_area = 0\n    for i in range(len(r)):\n        for j in range(len(g)):\n            for k in range(len(b)):\n                if r[i] + g[j] + b[k] > max_area:\n                    max_area = r[i] + g[j] + b[k]\n    return str(max_area)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = int(stdin.split()[1])\n    b = list(map(int, stdin.split()[2].split()))\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(b[i] - a[i])\n    return str(ans)"
    },
    {
        "number": 2103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.sort()\n        if b == a:\n            return '-1'\n        else:\n            b.sort(reverse=True)\n            if b == a:\n                return '-1'\n            else:\n                return''.join(map(str, b))"
    },
    {
        "number": 2104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    if l == r:\n        return \"NO\"\n    if (r - l + 1) % 2 == 0:\n        return \"NO\"\n    for i in range(l, r + 1, 2):\n        for j in range(i + 1, r + 1, 2):\n            if gcd(i, j) == 1:\n                return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 2105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()\n    t = stdin.split()\n    q = int(stdin)\n    for i in range(q):\n        y = int(stdin)\n        if y == 1:\n            print(s[0] + t[0])\n        elif y == 2:\n            print(s[1] + t[1])\n        elif y == 3:\n            print(s[2] + t[2])\n        elif y == 4:\n            print(s[3] + t[3])\n        elif y == 5:\n            print(s[4] + t[4])\n        elif y == 6:\n            print(s[5] + t[5])\n        elif y == 7:\n            print(s[6] + t[6])\n        elif y == 8:\n            print(s[7] + t[7])\n        elif y == 9:\n            print(s[8] + t[8])\n        elif y == 10:\n            print(s[9] + t[9])\n        elif y == 11:\n            print(s[10] + t[10])\n        elif y == 12:\n            print(s[11] + t[11])\n        elif y == 13:\n            print(s[12] + t[12])\n        elif y == 14:\n            print(s[13] + t[13])\n        elif y == 15:\n            print(s[14] + t[14])\n        elif y == 16:\n            print(s[15] + t[15])\n        elif y == 17:\n            print(s[16] + t[16])\n        elif y == 18:\n            print(s[17] + t[17])\n        elif y == 19:\n            print(s[18] + t[18])\n        elif y == 20:\n            print(s[19] + t[19])\n        elif y == 21:\n            print(s[20] + t[20])\n        elif y == 22:\n            print(s[21] + t[21])\n        elif y == 23:\n            print(s[22] + t[22])\n        elif y == 24:\n            print(s[23] + t[23])\n        elif y == 25:\n            print(s[24] + t[24])\n        elif y == 26:\n            print(s[25] + t[25])\n        elif y == 27:\n            print(s[26] + t[26])\n        elif y == 28:\n            print(s[27] + t[27])\n        elif y == 29:\n            print(s[28] + t[28])\n        elif y == 30:\n            print(s[29] + t[29])\n        elif y == 31:\n            print(s[30] + t[30])\n        elif y == 32:\n            print(s[31] + t[31])\n        elif y == 33:\n            print(s[32] + t[32])\n        elif y == 34:\n            print(s[33] + t[33])\n        elif y == 35:\n            print(s[34] + t[34])\n        elif y == 36:\n            print(s[35] + t[35])\n        elif y == 37:\n            print(s[36] + t[36])\n        elif y == 38:\n            print(s[37] + t[37])\n        elif y == 39:\n            print(s[38] + t[38])\n        elif y == 40:\n            print(s[39] + t[39])\n        elif y == 41:\n            print(s[40] + t[40])\n        elif y == 42:\n            print(s[41] + t[41])\n        elif y == 43:\n            print(s[42] + t[42])\n        elif y == 44:\n            print(s[43] + t[43])\n        elif y == 45:\n            print(s[44] + t[44])\n        elif y == 46:\n            print(s[45] + t[45])\n        elif y == 47:\n            print(s[46] + t[46])\n        elif y == 48:\n            print(s[47] + t[47])\n        elif y == 49:\n            print(s[48] + t[48])\n        elif y == 50:\n            print(s[49] + t[49])\n        elif y == 51:\n            print(s[50] + t[50])\n        elif y == 52:\n            print(s[51] + t[51])\n        elif y == 53:\n            print(s[52] + t[52])\n        elif y == 54:\n            "
    },
    {
        "number": 2106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    d.sort()\n    s.sort()\n    n = len(d)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = d[i]\n            else:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = dp[i][j] + s[i]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + s[i])\n    return dp[n - 1][n - 1]\n"
    },
    {
        "number": 2107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = map(int, stdin.split())\n    notes = list(map(int, stdin.split()))\n    notes.sort()\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n    notes = [(i, j) for i, j in zip(notes, notes[1:])]\n    notes = sorted(notes, key=lambda x: x[1] - x[0])\n"
    },
    {
        "number": 2108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = {1, 2, 3}\n    colors_count = {1: 0, 2: 0, 3: 0}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        if u not in colors:\n            colors.add(u)\n            colors_count[u] = 1\n        if v not in colors:\n            colors.add(v)\n            colors_count[v] = 1\n        if u!= v:\n            colors.remove(u)\n            colors.remove(v)\n            colors_count[u] -= 1\n            colors_count[v] -= 1\n    if len(colors) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 2109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:3]\n    a.sort()\n    return str(len(a)) +'' +''.join(map(str, a))\n"
    },
    {
        "number": 2110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, m, k = map(int, stdin.split())\n    passenger_trams = []\n    freight_trains = []\n    for i in range(n):\n        passenger_trams.append(int(stdin.split()[i]))\n    for i in range(n):\n        freight_trains.append(int(stdin.split()[i + n]))\n    passenger_trams.sort()\n    freight_trains.sort()\n    passenger_trams.reverse()\n    freight_trains.reverse()\n    passenger_trams_canceled = 0\n    freight_trains_canceled = 0\n    passenger_trams_canceled_2 = 0\n    freight_trains_canceled_2 = 0\n    passenger_trams_canceled_3 = 0\n    freight_trains_canceled_3 = 0\n    passenger_trams_canceled_4 = 0\n    freight_trains_canceled_4 = 0\n    passenger_trams_canceled_5 = 0\n    freight_trains_canceled_5 = 0\n    passenger_trams_canceled_6 = 0\n    freight_trains_canceled_6 = 0\n    passenger_trams_canceled_7 = 0\n    freight_trains_canceled_7 = 0\n    passenger_trams_canceled_8 = 0\n    freight_trains_canceled_8 = 0\n    passenger_trams_canceled_9 = 0\n    freight_trains_canceled_9 = 0\n    passenger_trams_canceled_10 = 0\n    freight_trains_canceled_10 = 0\n    passenger_trams_canceled_11 = 0\n    freight_trains_canceled_11 = 0\n    passenger_trams_canceled_12 = 0\n    freight_trains_canceled_12 = 0\n    passenger_trams_canceled_13 = 0\n    freight_trains_canceled_13 = 0\n    passenger_trams_canceled_14 = 0\n    freight_trains_canceled_14 = 0\n    passenger_trams_canceled_15 = 0\n    freight_trains_canceled_15 = 0\n    passenger_trams_canceled_16 = 0\n    freight_trains_canceled_16 = 0\n    passenger_trams_canceled_17 = 0\n    freight_trains_canceled_17 = 0\n    passenger_trams_canceled_18 = 0\n    freight_trains_canceled_18 = 0\n    passenger_trams_canceled_19 = 0\n    freight_trains_canceled_19 = 0\n    passenger_trams_canceled_20 = 0\n    freight_trains_canceled_20 = 0\n    passenger_trams_canceled_21 = 0\n    freight_trains_canceled_21 = 0\n    passenger_trams_canceled_22 = 0\n    freight_trains_canceled_22 = 0\n    passenger_trams_canceled_23 = 0\n    freight_trains_canceled_23 = 0\n    passenger_trams_canceled_24 = 0\n    freight_trains_canceled_24 = 0\n    passenger_trams_canceled_25 = 0\n    freight_trains_canceled_25 = 0\n    passenger_trams_canceled_26 = 0\n    freight_trains_canceled_26 = 0\n    passenger_trams_canceled_27 = 0\n    freight_trains_canceled_27 = 0\n    passenger_trams_canceled_28 = 0\n    freight_trains_canceled_28 = 0\n    passenger_trams_canceled_29 = 0\n    freight_trains_canceled_29 = 0\n    passenger_trams_canceled_30 = 0\n    freight_trains_canceled_30 = 0\n    passenger_trams_canceled_31 = 0\n    freight_trains_canceled_31 = 0\n    passenger_trams_canceled_32 = 0\n    freight"
    },
    {
        "number": 2111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    chocolate = [[0] * n for _ in range(n)]\n    for i in range(q):\n        x, y, direction = map(int, stdin.split())\n        if direction == 1:\n            for j in range(x, n + 1):\n                chocolate[y - 1][j - 1] = 1\n        else:\n            for j in range(x, 0, -1):\n                chocolate[y - 1][j - 1] = 1\n    return '\\n'.join([' '.join(map(str, row)) for row in chocolate])\n"
    },
    {
        "number": 2112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if len(a)!= len(b):\n        return -1\n    res = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += a[i]\n        else:\n            if a[i] > b[i]:\n                res += a[i] - b[i]\n                b.pop(i)\n            else:\n                res += b[i] - a[i]\n                a.pop(i)\n    return str(res)"
    },
    {
        "number": 2113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    return str(max(0, len(graph[0]) + len(graph[1]) - 2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return '-1'\n    board = [[0] * N for _ in range(N)]\n    for i in range(N):\n        board[i][i] = 1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if i + 1 <= N - 1:\n                board[i][j] = min(board[i][j], board[i + 1][j])\n            if i - 1 >= 0:\n                board[i][j] = min(board[i][j], board[i - 1][j])\n            if j + 1 <= N - 1:\n                board[i][j] = min(board[i][j], board[i][j + 1])\n            if j - 1 >= 0:\n                board[i][j] = min(board[i][j], board[i][j - 1])\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == N:\n                board[i][j] = -1\n    return '\\n'.join([' '.join(map(str, row)) for row in board])\n"
    },
    {
        "number": 2115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    k = 0\n    while True:\n        for i in range(len(sequence) - 1):\n            if sequence[i] == sequence[i + 1]:\n                del sequence[i]\n                del sequence[i]\n                sequence.insert(i, sequence[i] + 1)\n                k += 1\n                break\n        else:\n            break\n    return str(k) + '\\n' +''.join(map(str, sequence))"
    },
    {
        "number": 2116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    positions = list(map(int, stdin.split()))\n    positions = sorted(positions)\n    total_time = 0\n    for i in range(n):\n        total_time += positions[i]\n    for i in range(n):\n        total_time += positions[i + 1] - positions[i]\n    return str(total_time)"
    },
    {
        "number": 2117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(n):\n        graph[i+1] = []\n    for line in stdin.splitlines():\n        u, v = map(int, line.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    res = 0\n    for i in range(1, n+1):\n        if len(graph[i]) == 0:\n            res += 1\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            res += 1\n    for i in range(1, n+1):\n        if len(graph[i]) == 2:\n            res += 1\n    return str(res)"
    },
    {
        "number": 2118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(1)\n    if n == 6:\n        return str(1)\n    if n == 7:\n        return str(1)\n    if n == 8:\n        return str(1)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(1)\n    if n == 11:\n        return str(1)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(1)\n    if n == 14:\n        return str(1)\n    if n == 15:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(1)\n    if n == 19:\n        return str(1)\n    if n == 20:\n        return str(1)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(1)\n    if n == 24:\n        return str(1)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(1)\n    if n == 30:\n        return str(1)\n    if n == 31:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(1)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(1)\n    if n == 37:\n        return str(1)\n    if n == 38:\n        return str(1)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(1)\n    if n == 41:\n        return str(1)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(1)\n    if n == 45:\n        return str(1)\n    if n == 46:\n        return str(1)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(1)\n    if n == 51:\n        return str(1)\n    if n == 52:\n        return str(1)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(1)\n    if n == 55:\n        return str(1)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(1)\n    if n == 59:\n        return str(1)\n    if n == 60:\n        return str(1)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(1)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(1)\n    if n == 69:\n        return str(1)\n    if n == 70:\n        return str(1)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(1)\n    if n == 78:\n        return str(1)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(1)\n    if n == 81:\n        return str(1)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(1)\n    if n == 89:\n        return str(1)\n    if n == 90:\n        return str(1)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str("
    },
    {
        "number": 2119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, l, r = map(int, stdin.split())\n    return str(sum(1 for i in range(l, r + 1) if not any(c.isdigit() for c in str(i)) and l <= int(str(i)[0]) <= r))"
    },
    {
        "number": 2120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        res += v[i]\n        for j in range(i + 1, n):\n            res += max(v[i], v[j])\n            res -= min(v[i], v[j])\n    return str(res)"
    },
    {
        "number": 2121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    balls = list(map(int, stdin.split()))\n    balls.sort()\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    # print(balls)\n    # print(n, k)\n    "
    },
    {
        "number": 2122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k - 1)"
    },
    {
        "number": 2123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    ans = 0\n    for i in range(n):\n        ans += h[i] - h[i] + 1\n    return str(ans)"
    },
    {
        "number": 2124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = map(int, stdin.split()[1:3])\n        senders = {}\n        for _ in range(n):\n            senders[stdin.split()[3 * _ + 1]] = stdin.split()[3 * _ + 2]\n        for _ in range(m):\n            sender = stdin.split()[3 * n + 1]\n            text = stdin.split()[3 * n + 2]\n            if sender in senders:\n                print(f\"{senders[sender]}:{text}\")\n            else:\n                print(\"Impossible\")\n            if len(text) > 100:\n                print(\"Impossible\")\n            if len(sender) > 10:\n                print(\"Impossible\")\n            if len(text) > 100 or len(sender) > 10:\n                print(\"Impossible\")\n            if text.count(\" \") > 1:\n                print(\"Impossible\")\n            if text.count(\" \") == 1:\n                print(\"Impossible\")\n            if text.count(\".\") > 1:\n                print(\"Impossible\")\n            if text.count(\".\") == 1:\n                print(\"Impossible\")\n            if text.count(\",\") > 1:\n                print(\"Impossible\")\n            if text.count(\",\") == 1:\n                print(\"Impossible\")\n            if text.count(\"!\") > 1:\n                print(\"Impossible\")\n            if text.count(\"!\") == 1:\n                print(\"Impossible\")\n            if text.count(\"?\") > 1:\n                print(\"Impossible\")\n            if text.count(\"?\") == 1:\n                print(\"Impossible\")\n            if text.count(\" \") > 0:\n                print(\"Impossible\")\n            if text.count(\" \") == 0:\n                print(\"Impossible\")\n            if text.count(\".\") > 0:\n                print(\"Impossible\")\n            if text.count(\".\") == 0:\n                print(\"Impossible\")\n            if text.count(\",\") > 0:\n                print(\"Impossible\")\n            if text.count(\",\") == 0:\n                print(\"Impossible\")\n            if text.count(\"!\") > 0:\n                print(\"Impossible\")\n            if text.count(\"!\") == 0:\n                print(\"Impossible\")\n            if text.count(\"?\") > 0:\n                print(\"Impossible\")\n            if text.count(\"?\") == 0:\n                print(\"Impossible\")\n            if text.count(\" \") > 1:\n                print(\"Impossible\")\n            if text.count(\" \") == 1:\n                print(\"Impossible\")\n            if text.count(\".\") > 1:\n                print(\"Impossible\")\n            if text.count(\".\") == 1:\n                print(\"Impossible\")\n            if text.count(\",\") > 1:\n                print(\"Impossible\")\n            if text.count(\",\") == 1:\n                print(\"Impossible\")\n            if text.count(\"!\") > 1:\n                print(\"Impossible\")\n            if text.count(\"!\") == 1:\n                print(\"Impossible\")\n            if text.count(\"?\") > 1:\n                print(\"Impossible\")\n            if text.count(\"?\") == 1:\n                print(\"Impossible\")\n            if text.count(\" \") > 0:\n                print(\"Impossible\")\n            if text.count(\" \") == 0:\n                print(\"Impossible\")\n            if text.count(\".\") > 0:\n                print(\"Impossible\")\n            if text.count(\".\") == 0:\n                print(\"Impossible\")\n            if text.count(\",\") > 0:\n                print(\"Impossible\")\n            if text.count(\",\") == 0:\n                print(\"Impossible\")\n            if text.count(\"!\") > 0:\n                print(\"Impossible\")\n            if text.count(\"!\") == 0:\n                print(\"Impossible\")\n            if text.count(\"?\") > 0:\n                print(\"Impossible\")\n            if text.count(\"?\") == 0:\n                print(\"Impossible\")\n            if text.count(\" \") > 1:\n                print(\"Impossible\")\n            if text.count(\" \") == 1:\n                print(\"Impossible\")\n            if text.count(\".\") > 1:\n                print(\"Impossible\")\n            if text.count(\".\") == 1:\n                print(\"Impossible\")\n            if text.count(\",\") > 1:\n                "
    },
    {
        "number": 2125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    blanket = stdin.split()\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if blanket[i][j] == blanket[i][j + 1] == blanket[i][j + 2] == blanket[i + 1][j] == blanket[i + 1][j + 1] == blanket[i + 1][j + 2] == blanket[i + 2][j] == blanket[i + 2][j + 1] == blanket[i + 2][j + 2]:\n                count += 1\n    return str(count)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    e = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    g = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    c = c[::-1]\n    d = d[::-1]\n    e = e[::-1]\n    f = f[::-1]\n    g = g[::-1]\n    h = h[::-1]\n    a = a["
    },
    {
        "number": 2127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for i in range(n):\n        if stdin.split()[i*2+1] == '+':\n            x, y = map(int, stdin.split()[i*2+2].split('x'))\n            if x <= y:\n                return 'NO'\n            else:\n                return 'YES'\n        elif stdin.split()[i*2+1] == '?':\n            h, w = map(int, stdin.split()[i*2+2].split('x'))\n            if h <= w:\n                return 'YES'\n            else:\n                return 'NO'"
    },
    {
        "number": 2128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    q = 1\n    for i in range(1, n):\n        q = (q * p[i]) % 998244353\n    return str(q)"
    },
    {
        "number": 2129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, m = map(int, stdin.split()[i * 2 + 1].split())\n        roads = []\n        for j in range(m):\n            roads.append(list(map(int, stdin.split()[i * 2 + 2 + j * 2].split())))\n        cities = set()\n        for road in roads:\n            cities.add(road[0])\n            cities.add(road[1])\n        cities = list(cities)\n        cities.sort()\n        cities = tuple(cities)\n        print(cities)\n    return \"\"\n"
    },
    {
        "number": 2130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    if b == b[::-1]:\n        return \"No\"\n    for i in range(1, n):\n        if b[i]!= b[i - 1] + b[i - 1]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 2131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    if not tree:\n        return \"No\"\n    paths = []\n    for i in range(n):\n        paths.append([i])\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if not paths[i]:\n                break\n            for path in paths[i]:\n                if path in tree[j]:\n                    paths[j].append(i)\n                    break\n    if not paths[n - 1]:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 2132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    events = stdin.split()[1:]\n    speed_limit = 0\n    overtake_allowed = 0\n    no_speed_limit = 0\n    no_overtake_allowed = 0\n    for event in events:\n        if event == \"1\":\n            speed_limit = int(event)\n        elif event == \"2\":\n            overtake_allowed = int(event)\n        elif event == \"3\":\n            no_speed_limit = int(event)\n        elif event == \"4\":\n            no_overtake_allowed = int(event)\n    if speed_limit == 0 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"0\"\n    if speed_limit == 0 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"1\"\n    if speed_limit == 0 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"2\"\n    if speed_limit == 0 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 1:\n        return \"3\"\n    if speed_limit == 0 and overtake_allowed == 1 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"4\"\n    if speed_limit == 0 and overtake_allowed == 1 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"5\"\n    if speed_limit == 0 and overtake_allowed == 1 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"6\"\n    if speed_limit == 0 and overtake_allowed == 1 and no_speed_limit == 1 and no_overtake_allowed == 1:\n        return \"7\"\n    if speed_limit == 1 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"8\"\n    if speed_limit == 1 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"9\"\n    if speed_limit == 1 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"10\"\n    if speed_limit == 1 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 1:\n        return \"11\"\n    if speed_limit == 1 and overtake_allowed == 1 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"12\"\n    if speed_limit == 1 and overtake_allowed == 1 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"13\"\n    if speed_limit == 1 and overtake_allowed == 1 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"14\"\n    if speed_limit == 1 and overtake_allowed == 1 and no_speed_limit == 1 and no_overtake_allowed == 1:\n        return \"15\"\n    if speed_limit == 2 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"16\"\n    if speed_limit == 2 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"17\"\n    if speed_limit == 2 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"18\"\n    if speed_limit == 2 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 1:\n        return \"19\"\n    if speed_limit == 2 and overtake_allowed == 1 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"20\"\n    if speed_limit == 2 and overtake_allowed == 1 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"21\"\n    if speed_limit == 2 and overtake_allowed == 1 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"22\"\n    if speed_limit == 2 and overtake_allowed == 1 and no_speed_limit == 1 and no_overtake_allowed == 1:\n        return \"23\"\n    if speed_limit == 3 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 0:\n        return \"24\"\n    if speed_limit == 3 and overtake_allowed == 0 and no_speed_limit == 0 and no_overtake_allowed == 1:\n        return \"25\"\n    if speed_limit == 3 and overtake_allowed == 0 and no_speed_limit == 1 and no_overtake_allowed == 0:\n        return \"26\"\n    "
    },
    {
        "number": 2133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    edges = []\n    for i in range(n - 1):\n        edges.append((i, i + 1))\n    edges.append((n - 1, 0))\n    colors_dict = {i: colors[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict[n - 1] = 1 - colors_dict[n - 1]\n    colors_dict = {i: colors_dict[i] for i in range(n)}\n    colors_dict[0] = 1 - colors_dict[0]\n    colors_dict["
    },
    {
        "number": 2134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        if a[i] > b[i]:\n            res += b[i]\n        else:\n            res += a[i]\n    return str(res)"
    },
    {
        "number": 2135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = stdin.split()\n    q = int(stdin.split()[-1])\n    for i in range(q):\n        r1, c1, r2, c2 = map(int, stdin.split()[i * 4:i * 4 + 4])\n        if r1 == r2 and c1 == c2:\n            print(0)\n        elif r1 == r2 or c1 == c2:\n            print(1)\n        else:\n            print(2)\n    return stdin\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grid = stdin.split()[1:]\n    inverted = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '0':\n                grid[i][j] = '1'\n            else:\n                grid[i][j] = '0'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '1':\n                inverted += 1\n                print(i, j)\n    return str(inverted)"
    },
    {
        "number": 2137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x = []\n    v = []\n    for i in range(n):\n        x.append(int(input()))\n        v.append(int(input()))\n    x.sort()\n    v.sort()\n    t = 0\n    while t < n:\n        if x[t] == x[t + 1]:\n            t += 1\n            continue\n        if v[t] == v[t + 1]:\n            t += 1\n            continue\n        if x[t] == x[t + 1] + 1:\n            t += 1\n            continue\n        if v[t] == v[t + 1] + 1:\n            t += 1\n            continue\n        if x[t] == x[t + 1] - 1:\n            t += 1\n            continue\n        if v[t] == v[t + 1] - 1:\n            t += 1\n            continue\n        return str(4 * 2)\n    return str(0)"
    },
    {
        "number": 2138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    d.sort()\n    d.append(d[-1] + 1)\n    d.insert(0, 0)\n    d.insert(0, 0)\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append(0)\n    d.sort()\n    d.append(0)\n    d.append("
    },
    {
        "number": 2139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] == \"bear\":\n                count += 1\n    return count"
    },
    {
        "number": 2140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    m = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2].split()))\n    for i in range(m):\n        s = s[:a[i]] + s[a[i] + 1:]\n    return s"
    },
    {
        "number": 2141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            if (i + 2) % 2 == 0 and (j + 1) % 2 == 0:\n                print('W', end='')\n            elif (i + 2) % 2 == 0 and (j + 1) % 2!= 0:\n                print('B', end='')\n            elif (i + 1) % 2 == 0 and (j + 2) % 2 == 0:\n                print('W', end='')\n            elif (i + 1) % 2 == 0 and (j + 2) % 2!= 0:\n                print('B', end='')\n            elif (i + 2) % 2!= 0 and (j + 1) % 2 == 0:\n                print('W', end='')\n            elif (i + 2) % 2!= 0 and (j + 1) % 2!= 0:\n                print('B', end='')\n            else:\n                print('W', end='')\n        print()\n    return ''"
    },
    {
        "number": 2142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 2143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j]!= a[j] + a[i]:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 2144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, m = map(int, stdin.split())\n        if a == 0:\n            print(1)\n        else:\n            print(0)\n\nsolution(input())\n"
    },
    {
        "number": 2145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, y = map(int, stdin.split())\n        if x % 2 == 0:\n            if y == (x // 2):\n                print('YES')\n            else:\n                print('NO')\n        else:\n            if y == (x - 1):\n                print('YES')\n            else:\n                print('NO')\n    return ''"
    },
    {
        "number": 2146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = []\n    for i in range(1, n):\n        m.append(a[i] - a[i - 1])\n    m.sort()\n    return''.join(map(str, m))"
    },
    {
        "number": 2147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rules = []\n    for i in range(n):\n        rules.append(stdin.split())\n    rules = sorted(rules, key=lambda x: (x[0], x[1], x[2]))\n    ans = []\n    for i in range(n):\n        ans.append(str(rules[i][0]))\n        ans.append(str(rules[i][1]))\n        ans.append(str(rules[i][2]))\n    return \"YES\" + \"\\n\" + \" \".join(ans)\n"
    },
    {
        "number": 2148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = 10 ** 100\n    res = []\n    for i in range(n):\n        while y > 0:\n            y -= 1\n            x[i] += 1\n            if x[i] > y:\n                x[i] = x[i] - y\n                break\n        res.append(x[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 2149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    ans = 0\n    for i in range(n):\n        ans += h[i] * (k ** i)\n    return str(ans % 998244353)"
    },
    {
        "number": 2150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(b[i] - i)\n    return''.join(map(str, a))\n"
    },
    {
        "number": 2151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n = int(stdin.split()[i])\n        s = stdin.split()[i + 1]\n        if not is_divisible(n, s):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(len(s), *s)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 2152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    p = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n        p.append(int(stdin.split()[i+1]))\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = a[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + p[i-1]\n    return str(dp[n][n])"
    },
    {
        "number": 2153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    k = 0\n    for i in range(1, n):\n        if h[i] > h[i - 1]:\n            k += 1\n    return str(k)"
    },
    {
        "number": 2154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    prices = list(map(int, stdin.split()))\n    profit = 0\n    for i in range(N):\n        if prices[i] > profit:\n            profit = prices[i]\n        else:\n            profit = profit - prices[i]\n    return profit"
    },
    {
        "number": 2155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                zero_row = i\n                zero_col = j\n                break\n    for i in range(n):\n        for j in range(m):\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero_row) + abs(j - zero_col):\n                matrix[i][j], matrix[zero_row][zero_col] = matrix[zero_row][zero_col], matrix[i][j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            if i == zero_row and j == zero_col:\n                continue\n            if abs(i - zero_row) + abs(j - zero_col) < abs(i - zero"
    },
    {
        "number": 2156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    q = int(stdin)\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        print(f(s[l - 1:r]))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 2157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        res += sum(a[l - 1:r])\n    return str(res)\n"
    },
    {
        "number": 2158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    costs = list(map(int, stdin.split()[1:]))\n    costs.sort()\n    return str(max(sum(costs[i:i + 2]) for i in range(n - 1)))"
    },
    {
        "number": 2159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, n + 1):\n        count = 0\n        for j in range(1, n + 1):\n            if t[j - 1] == i:\n                count += 1\n        res.append(count)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 2160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    questions = list(map(int, stdin.split()))\n    scenarios = []\n    for i in range(1, n):\n        scenarios.append((i, i + 1))\n    for i in range(1, n):\n        scenarios.append((i, i - 1))\n    for i in range(2, n):\n        scenarios.append((i - 1, i))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 1, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 2))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2))\n    for i in range(2, n):\n        scenarios.append((i - 2, i + 1))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 1))\n    for i in range(2, n):\n        scenarios.append((i - 2, i))\n        scenarios.append((i - 1, i + 2))\n        scenarios.append((i, i + 2"
    },
    {
        "number": 2161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    phone_book = {}\n    for i in range(n):\n        name, *numbers = stdin.split()\n        phone_book[name] = numbers\n    m = 0\n    for name, numbers in phone_book.items():\n        if len(numbers) > 1:\n            numbers = sorted(numbers)\n            for i in range(len(numbers)):\n                if numbers[i][0] == numbers[i - 1][0]:\n                    numbers.pop(i)\n            m += 1\n    return str(m)\n"
    },
    {
        "number": 2162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    a1 = list(map(int, stdin.split()[1]))\n    a2 = list(map(int, stdin.split()[2]))\n    a3 = list(map(int, stdin.split()[3]))\n    a1.sort()\n    a2.sort()\n    a3.sort()\n    a1.extend(a2)\n    a1.extend(a3)\n    a1.sort()\n    return str(len(a1) - len(a2) - len(a3))\n"
    },
    {
        "number": 2163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(1 for i in range(1, m + 1) for j in range(1, n + 1) if (i * j) % m == 0))\n"
    },
    {
        "number": 2164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    a.sort()\n    t.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * t[i]\n    return str(ans)\n"
    },
    {
        "number": 2166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    permutation = list(map(int, stdin.split()))\n    permutation = [i for i in permutation if i!= -1]\n    if len(permutation) == 0:\n        return 0\n    if len(permutation) == 1:\n        return 1\n    if len(permutation) == 2:\n        if permutation[0] == permutation[1]:\n            return 1\n        else:\n            return 0\n    if len(permutation) == 3:\n        if permutation[0] == permutation[1] and permutation[1] == permutation[2]:\n            return 1\n        elif permutation[0] == permutation[1] and permutation[1]!= permutation[2]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1] == permutation[2]:\n            return 0\n        else:\n            return 0\n    if len(permutation) == 4:\n        if permutation[0] == permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3]:\n            return 1\n        elif permutation[0] == permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3]:\n            return 0\n        else:\n            return 0\n    if len(permutation) == 5:\n        if permutation[0] == permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4]:\n            return 1\n        elif permutation[0] == permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2]!= permutation[3] and permutation[3] == permutation[4]:\n            return 0\n        else:\n            return 0\n    if len(permutation) == 6:\n        if permutation[0] == permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5]:\n            return 1\n        elif permutation[0] == permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2]!= permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5]:\n            return 0\n        else:\n            return 0\n    if len(permutation) == 7:\n        if permutation[0] == permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5] and permutation[5] == permutation[6]:\n            return 1\n        elif permutation[0] == permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5] and permutation[5] == permutation[6]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5] and permutation[5] == permutation[6]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5] and permutation[5] == permutation[6]:\n            return 0\n        elif permutation[0]!= permutation[1] and permutation[1]!= permutation[2] and permutation[2]!= permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5] and permutation[5] == permutation[6]:\n            return 0\n        else:\n            return 0\n    if len(permutation) == 8:\n        if permutation[0] == permutation[1] and permutation[1] == permutation[2] and permutation[2] == permutation[3] and permutation[3] == permutation[4] and permutation[4] == permutation[5] and permutation[5] == permutation[6] and permutation[6] == permutation[7]:\n            return"
    },
    {
        "number": 2167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    while a[0] == a[1]:\n        a[0] += 1\n        a[1] -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 2168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    salaries = []\n    for i in range(n):\n        salaries.append(list(map(int, stdin.split())))\n    salaries.sort(key=lambda x: x[1])\n    salaries.sort(key=lambda x: x[0])\n    salaries.sort(key=lambda x: x[2])\n    salaries.sort(key=lambda x: x[3])\n    salaries.sort(key=lambda x: x[4])\n    salaries.sort(key=lambda x: x[5])\n    salaries.sort(key=lambda x: x[6])\n    salaries.sort(key=lambda x: x[7])\n    salaries.sort(key=lambda x: x[8])\n    salaries.sort(key=lambda x: x[9])\n    salaries.sort(key=lambda x: x[10])\n    salaries.sort(key=lambda x: x[11])\n    salaries.sort(key=lambda x: x[12])\n    salaries.sort(key=lambda x: x[13])\n    salaries.sort(key=lambda x: x[14])\n    salaries.sort(key=lambda x: x[15])\n    salaries.sort(key=lambda x: x[16])\n    salaries.sort(key=lambda x: x[17])\n    salaries.sort(key=lambda x: x[18])\n    salaries.sort(key=lambda x: x[19])\n    salaries.sort(key=lambda x: x[20])\n    salaries.sort(key=lambda x: x[21])\n    salaries.sort(key=lambda x: x[22])\n    salaries.sort(key=lambda x: x[23])\n    salaries.sort(key=lambda x: x[24])\n    salaries.sort(key=lambda x: x[25])\n    salaries.sort(key=lambda x: x[26])\n    salaries.sort(key=lambda x: x[27])\n    salaries.sort(key=lambda x: x[28])\n    salaries.sort(key=lambda x: x[29])\n    salaries.sort(key=lambda x: x[30])\n    salaries.sort(key=lambda x: x[31])\n    salaries.sort(key=lambda x: x[32])\n    salaries.sort(key=lambda x: x[33])\n    salaries.sort(key=lambda x: x[34])\n    salaries.sort(key=lambda x: x[35])\n    salaries.sort(key=lambda x: x[36])\n    salaries.sort(key=lambda x: x[37])\n    salaries.sort(key=lambda x: x[38])\n    salaries.sort(key=lambda x: x[39])\n    salaries.sort(key=lambda x: x[40])\n    salaries.sort(key=lambda x: x[41])\n    salaries.sort(key=lambda x: x[42])\n    salaries.sort(key=lambda x: x[43])\n    salaries.sort(key=lambda x: x[44])\n    salaries.sort(key=lambda x: x[45])\n    salaries.sort(key=lambda x: x[46])\n    salaries.sort(key=lambda x: x[47])\n    salaries.sort(key=lambda x: x[48])\n    salaries.sort(key=lambda x: x[49])\n    salaries.sort(key=lambda x: x[50])\n    salaries.sort(key=lambda x: x[51])\n    salaries.sort(key=lambda x: x[52])\n    salaries.sort(key=lambda x: x[53])\n    salaries.sort(key=lambda x: x[54])\n    salaries.sort(key=lambda x: x[55])\n    salaries.sort(key=lambda x: x[56])\n    salaries.sort(key=lambda x: x[57])\n    salaries.sort(key=lambda x: x[58])\n    salaries.sort(key=lambda x: x[59])\n    salaries.sort(key=lambda x: x[60])\n    salaries.sort(key=lambda x: x[61])\n    salaries.sort(key=lambda x: x[62])\n    salaries.sort(key=lambda x: x[63])\n    salaries.sort(key=lambda x: x[64])\n    salaries.sort(key=lambda x: x[65])\n    salaries.sort(key=lambda x: x[66])\n    salaries.sort(key=lambda x: x[67])\n    salaries.sort(key=lambda x: x[68])\n    salaries.sort(key=lambda x: x[69])\n    salaries.sort(key=lambda x: x[70])\n    salaries.sort(key=lambda x: x[71])\n    salaries.sort(key=lambda x: x[72])\n    salaries.sort(key=lambda x: x[73])\n    salaries.sort(key=lambda x: x[74])\n    salaries.sort(key=lambda x: x[75])\n    salaries.sort(key=lambda x: x[76])\n    salaries.sort(key=lambda x: x[77])\n    salaries.sort(key=lambda x: x[78])\n    salaries.sort(key=lambda x: x[79])\n    salaries.sort(key=lambda x: x[80])\n    salaries.sort(key=lambda x: x[81])\n    salaries.sort(key=lambda x: x[82])\n    salaries.sort(key=lambda x: x[83])\n    salaries.sort(key=lambda x: x[84])\n    salaries.sort(key=lambda x: x[85])\n    salaries.sort(key=lambda x: x[86])\n    salaries.sort(key=lambda x: x[87])\n    salaries.sort(key=lambda x: x[88])\n    salaries.sort(key=lambda x: x[89])\n    salaries.sort(key=lambda x: x[90])\n    salaries.sort(key=lambda x: x[91])\n    salaries.sort(key=lambda x: x[92])\n    salaries.sort"
    },
    {
        "number": 2169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, D = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    Q = int(stdin.split()[-1])\n    for i in range(Q):\n        L, R = map(int, stdin.split())\n        x = L\n        while x!= R:\n            x += D\n            if x > R:\n                x -= D\n            if A[x]!= A[x - D]:\n                break\n        if x == R:\n            print(sum(A[L:R]))\n        else:\n            print(sum(A[L:x]))\n    return ''"
    },
    {
        "number": 2170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(count_pairs(N, M))\n\n\ndef"
    },
    {
        "number": 2171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"yes\"\n    elif a == 1:\n        return \"yes\"\n    elif a == 2:\n        return \"no\"\n    elif a == 3:\n        return \"yes\"\n    elif a == 4:\n        return \"no\"\n    elif a == 5:\n        return \"yes\"\n    elif a == 6:\n        return \"no\"\n    elif a == 7:\n        return \"yes\"\n    elif a == 8:\n        return \"no\"\n    elif a == 9:\n        return \"yes\"\n    elif a == 10:\n        return \"no\"\n    else:\n        return \"no\""
    },
    {
        "number": 2172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    languages = {i: set() for i in range(1, n + 1)}\n    for i in range(m):\n        a, b = stdin.split()\n        languages[1].add(a)\n        languages[2].add(b)\n    for i in range(1, n + 1):\n        languages[i] = sorted(languages[i])\n    return''.join(languages[1]) +'' +''.join(languages[2])\n"
    },
    {
        "number": 2173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        b.append(a[i] + i)\n    return''.join(map(str, b))"
    },
    {
        "number": 2174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    moves = 0\n    while a!= sorted(a):\n        moves += 1\n        for i in range(len(a) - 1):\n            if a[i] > a[i + 1]:\n                a[i], a[i + 1] = a[i + 1], a[i]\n    return str(moves)\n"
    },
    {
        "number": 2175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    for i in range(m):\n        if stdin.split()[3 + i] == \"1\":\n            a[int(stdin.split()[4 + i]) - 1] += int(stdin.split()[5 + i])\n        else:\n            k = int(stdin.split()[4 + i]) - 1\n            a[k] -= int(stdin.split()[5 + i])\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 2176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    s.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] < s[j]:\n                count += 1\n    return str(count % 998244353)"
    },
    {
        "number": 2177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        A, B = map(int, stdin.split())\n        if A * B == (A + B) * 2 + A + B:\n            print(1)\n        else:\n            print(0)\n    return \"\""
    },
    {
        "number": 2178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    books = list(map(int, stdin.split()[1]))\n    steps = list(map(int, stdin.split()[2]))\n    books.sort()\n    steps.sort()\n    result = []\n    for i in range(n):\n        result.append(books.index(steps[i]) + 1)\n    return''.join(map(str, result))"
    },
    {
        "number": 2179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges[u - 1].append((v - 1, w))\n        edges[v - 1].append((u - 1, w))\n    u = int(stdin) - 1\n    dist = [float('inf')] * n\n    dist[u] = 0\n    q = deque([u])\n    while q:\n        v = q.popleft()\n        for e in edges[v]:\n            if dist[e[0]] > dist[v] + e[1]:\n                dist[e[0]] = dist[v] + e[1]\n                q.append(e[0])\n    return str(dist[u])"
    },
    {
        "number": 2180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"2\"\n    if n == 6:\n        return \"2\"\n    if n == 7:\n        return \"2\"\n    if n == 8:\n        return \"2\"\n    if n == 9:\n        return \"2\"\n    if n == 10:\n        return \"2\"\n    if n == 11:\n        return \"2\"\n    if n == 12:\n        return \"2\"\n    if n == 13:\n        return \"2\"\n    if n == 14:\n        return \"2\"\n    if n == 15:\n        return \"2\"\n    if n == 16:\n        return \"2\"\n    if n == 17:\n        return \"2\"\n    if n == 18:\n        return \"2\"\n    if n == 19:\n        return \"2\"\n    if n == 20:\n        return \"2\"\n    if n == 21:\n        return \"2\"\n    if n == 22:\n        return \"2\"\n    if n == 23:\n        return \"2\"\n    if n == 24:\n        return \"2\"\n    if n == 25:\n        return \"2\"\n    if n == 26:\n        return \"2\"\n    if n == 27:\n        return \"2\"\n    if n == 28:\n        return \"2\"\n    if n == 29:\n        return \"2\"\n    if n == 30:\n        return \"2\"\n    if n == 31:\n        return \"2\"\n    if n == 32:\n        return \"2\"\n    if n == 33:\n        return \"2\"\n    if n == 34:\n        return \"2\"\n    if n == 35:\n        return \"2\"\n    if n == 36:\n        return \"2\"\n    if n == 37:\n        return \"2\"\n    if n == 38:\n        return \"2\"\n    if n == 39:\n        return \"2\"\n    if n == 40:\n        return \"2\"\n    if n == 41:\n        return \"2\"\n    if n == 42:\n        return \"2\"\n    if n == 43:\n        return \"2\"\n    if n == 44:\n        return \"2\"\n    if n == 45:\n        return \"2\"\n    if n == 46:\n        return \"2\"\n    if n == 47:\n        return \"2\"\n    if n == 48:\n        return \"2\"\n    if n == 49:\n        return \"2\"\n    if n == 50:\n        return \"2\"\n    if n == 51:\n        return \"2\"\n    if n == 52:\n        return \"2\"\n    if n == 53:\n        return \"2\"\n    if n == 54:\n        return \"2\"\n    if n == 55:\n        return \"2\"\n    if n == 56:\n        return \"2\"\n    if n == 57:\n        return \"2\"\n    if n == 58:\n        return \"2\"\n    if n == 59:\n        return \"2\"\n    if n == 60:\n        return \"2\"\n    if n == 61:\n        return \"2\"\n    if n == 62:\n        return \"2\"\n    if n == 63:\n        return \"2\"\n    if n == 64:\n        return \"2\"\n    if n == 65:\n        return \"2\"\n    if n == 66:\n        return \"2\"\n    if n == 67:\n        return \"2\"\n    if n == 68:\n        return \"2\"\n    if n == 69:\n        return \"2\"\n    if n == 70:\n        return \"2\"\n    if n == 71:\n        return \"2\"\n    if n == 72:\n        return \"2\"\n    if n == 73:\n        return \"2\"\n    if n == 74:\n        return \"2\"\n    if n == 75:\n        return \"2\"\n    if n == 76:\n        return \"2\"\n    if n == 77:\n        return \"2\"\n    if n == 78:\n        return \"2\"\n    if n == 79:\n        return \"2\"\n    if n == 80:\n        return \"2\"\n    if n == 81:\n        return \"2\"\n    if n == 82:\n        return \"2\"\n    if n == 83:\n        return \"2\"\n    if n == 84:\n        return \"2\"\n    if n == 85:\n        return \"2\"\n    if n == 86:\n        return \"2\"\n    if n == 87:\n        return \"2\"\n    if n == 88:\n        return \"2\"\n    if n == 89:\n        return \"2\"\n    if n == 90:\n        return \"2\"\n    if n == 91:\n        return \"2\"\n    if n == 92:\n        return \"2\"\n    if n == 93:\n        return \"2\"\n    if n == 94:\n        return \"2\"\n    if n == 95:\n        return \"2\"\n    if n == 96:\n        return \"2\"\n    if n == 97:\n        return \"2\"\n    if n == 98:\n        return \"2\"\n    if n == 99:\n        return \"2\"\n    if n == 100:\n        return \"2\"\n    if n == 101:\n        return \"2\"\n    if n == 102:\n        return \"2\"\n    if n == 103:\n        return \"2\"\n    if n == 104:\n        return \"2\"\n    if n == 105:\n        return \"2\"\n    if n == 106:\n        return \"2\"\n    if n == 107:\n        return \"2\"\n    if n == 108:\n        return \"2\"\n    if n == 109:\n        return \"2\"\n    if n == 110:\n        return \"2\"\n    if n == 111:\n        return \"2\"\n    if n == 112:\n        return \"2\"\n    if n == 113:\n        return \"2\"\n    if n == 114:\n        return \"2\"\n    if n == 115:\n        return \"2\"\n    if n == 116:\n        return \"2\"\n    if n == 117:\n        return \"2\"\n    if n == 118:\n        return \"2\"\n    if n == 119:\n        return \"2\"\n    if n == 120:\n        return \"2\"\n    if n == 121:\n        return \"2\"\n    if n == 122:\n        return \"2\"\n    if n == 123:\n        return \"2\"\n    if n == 124:\n        return \"2\"\n    if n == 125:\n        return \"2\"\n    if n == 126:\n        return \"2\"\n    if n == 127:\n        return \"2\"\n    if n == 128:\n        return \"2\"\n    if n == 129:\n        return \"2\"\n    if n == 130:\n        return \"2\"\n    if n == 131:\n        return \"2\"\n    if n == 132:\n        return \"2\"\n    if n == 133:\n        return \"2\"\n    if n == 134:\n        return \"2\"\n    if n == 135:\n        return \"2\"\n    if n == 136:\n        return \"2\"\n    if n == 137:\n        return \"2"
    },
    {
        "number": 2181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d = map(float, stdin.split())\n    n = int(input())\n    x = 0\n    y = 0\n    for i in range(n):\n        x += d\n        y += d\n        print(x, y)\n    return ''"
    },
    {
        "number": 2182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        y = stdin.split()[i]\n        y = int(y)\n        if is_permutation(y):\n            if y % 60 == 0:\n                print(\"red\")\n            else:\n                print(\"cyan\")\n        else:\n            print(\"cyan\")\n    return \"\"\n\ndef"
    },
    {
        "number": 2184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return '(' + str(x) + '|' + str(y) + '&' + str(z) + ')' + '&' + str(x) + '|' + str(y) + '&' + str(z) + '|' + str(x) + '&' + str(y) + '&' + str(z) + '|' + str(x) + '&' + str(y) + '&' + str(z) + '|' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x) + '&' + str(y) + '&' + str(z) + '&' + str(x"
    },
    {
        "number": 2185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2].split()))\n        b = list(map(int, stdin.split()[3].split()))\n        if push(a, b, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 2186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    memory = stdin.split()\n    for _ in range(m):\n        s, t = stdin.split()\n        if len(s)!= len(t):\n            return \"NO\"\n        if s in memory:\n            return \"NO\"\n        memory.append(s)\n    return \"YES\""
    },
    {
        "number": 2187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            ans += 1\n        else:\n            ans += 1\n            a[i] += 1\n    return str(ans)"
    },
    {
        "number": 2188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = []\n    for i in range(n):\n        pairs.append(list(map(int, stdin.split())))\n    pairs.sort()\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    return str(len(pairs)) + '\\n' +''.join(map(str, pairs))\n"
    },
    {
        "number": 2189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    labels = [i for i in range(n)]\n    while True:\n        visited = set()\n        for i in range(n):\n            if i not in visited:\n                visited.add(i)\n                for j in graph[i]:\n                    if j not in visited:\n                        visited.add(j)\n                        labels[i] = min(labels[i], labels[j])\n        if len(visited) == n:\n            break\n    return''.join(map(str, labels))\n"
    },
    {
        "number": 2190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] == pow(a[i], k) and a[i] * a[j] == pow(a[j], k):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if s[i] == '0':\n            alice += 1\n        else:\n            bob += 1\n    if alice == bob:\n        return n\n    if alice > bob:\n        return alice\n    return bob"
    },
    {
        "number": 2192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in stdin.split()])\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[j][i]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = -matrix[j][i]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j] + matrix[j][i]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = -matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = matrix[i][j"
    },
    {
        "number": 2193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, t = map(int, stdin.split())\n        graph[u - 1].append((v - 1, t))\n        graph[v - 1].append((u - 1, t))\n    visited = set()\n    visited.add(1)\n    queue = deque([(1, 0)])\n    while queue:\n        node, dist = queue.popleft()\n        if node == n - 1:\n            return str(dist)\n        for nei, t in graph[node]:\n            if nei not in visited:\n                visited.add(nei)\n                queue.append((nei, dist + t))\n    return str(-1)\n"
    },
    {
        "number": 2194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(q):\n        cmd, x, k = stdin.split()\n        if cmd == \"1\":\n            a[x - 1] = k\n        elif cmd == \"2\":\n            a = a[::-1]\n        elif cmd == \"3\":\n            a = a[x - 1:] + a[:x - 1]\n        elif cmd == \"4\":\n            a = a[:x] + a[x + 1:]\n        else:\n            raise ValueError(cmd)\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 2195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, y = map(int, stdin.split())\n        a, b = map(int, stdin.split())\n        if x == y:\n            print(0)\n        else:\n            if x > y:\n                x, y = y, x\n            if a == 1:\n                x += 1\n            elif a == -1:\n                x -= 1\n            if b == 1:\n                y += 1\n            elif b == -1:\n                y -= 1\n            if x == y:\n                print(0)\n            else:\n                print(abs(x - y))\nsolution(input())\n"
    },
    {
        "number": 2196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    return str(len(a))"
    },
    {
        "number": 2197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    p = list(map(float, stdin.split()))\n    p.sort()\n    p.reverse()\n    return str(p[0] + p[1] + p[2] + p[3] + p[4] + p[5])"
    },
    {
        "number": 2198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    for i in range(m):\n        x, c = stdin.split()[i + 2].split(\".\")\n        x = int(x)\n        s = s[:x - 1] + c + s[x + 1:]\n    return s\n"
    },
    {
        "number": 2199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin)\n    for i in range(Q):\n        if i == 0:\n            S = set()\n            N = int(stdin)\n            for j in range(N):\n                S.add(int(stdin))\n        else:\n            if i == 1:\n                x = int(stdin)\n                S.add(x)\n            else:\n                x, y = map(int, stdin.split())\n                if x > y:\n                    S.add(x)\n                else:\n                    S.add(y)\n    return str(max(S) - sum(S) / len(S))\n"
    },
    {
        "number": 2200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    ans = 0\n    for i in range(n):\n        ans += x[i] * (a ** i)\n    return str(ans)"
    },
    {
        "number": 2201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split())\n    if d < n:\n        return -1\n    if d > n:\n        return -1\n    if m < 1 or m > 200000:\n        return -1\n    if n < 1 or n > d:\n        return -1\n    if n > d:\n        return -1\n    if m > n:\n        return -1\n    if m == 1:\n        return d\n    if m == 2:\n        return d\n    if m == 3:\n        return d\n    if m == 4:\n        return d\n    if m == 5:\n        return d\n    if m == 6:\n        return d\n    if m == 7:\n        return d\n    if m == 8:\n        return d\n    if m == 9:\n        return d\n    if m == 10:\n        return d\n    if m == 11:\n        return d\n    if m == 12:\n        return d\n    if m == 13:\n        return d\n    if m == 14:\n        return d\n    if m == 15:\n        return d\n    if m == 16:\n        return d\n    if m == 17:\n        return d\n    if m == 18:\n        return d\n    if m == 19:\n        return d\n    if m == 20:\n        return d\n    if m == 21:\n        return d\n    if m == 22:\n        return d\n    if m == 23:\n        return d\n    if m == 24:\n        return d\n    if m == 25:\n        return d\n    if m == 26:\n        return d\n    if m == 27:\n        return d\n    if m == 28:\n        return d\n    if m == 29:\n        return d\n    if m == 30:\n        return d\n    if m == 31:\n        return d\n    if m == 32:\n        return d\n    if m == 33:\n        return d\n    if m == 34:\n        return d\n    if m == 35:\n        return d\n    if m == 36:\n        return d\n    if m == 37:\n        return d\n    if m == 38:\n        return d\n    if m == 39:\n        return d\n    if m == 40:\n        return d\n    if m == 41:\n        return d\n    if m == 42:\n        return d\n    if m == 43:\n        return d\n    if m == 44:\n        return d\n    if m == 45:\n        return d\n    if m == 46:\n        return d\n    if m == 47:\n        return d\n    if m == 48:\n        return d\n    if m == 49:\n        return d\n    if m == 50:\n        return d\n    if m == 51:\n        return d\n    if m == 52:\n        return d\n    if m == 53:\n        return d\n    if m == 54:\n        return d\n    if m == 55:\n        return d\n    if m == 56:\n        return d\n    if m == 57:\n        return d\n    if m == 58:\n        return d\n    if m == 59:\n        return d\n    if m == 60:\n        return d\n    if m == 61:\n        return d\n    if m == 62:\n        return d\n    if m == 63:\n        return d\n    if m == 64:\n        return d\n    if m == 65:\n        return d\n    if m == 66:\n        return d\n    if m == 67:\n        return d\n    if m == 68:\n        return d\n    if m == 69:\n        return d\n    if m == 70:\n        return d\n    if m == 71:\n        return d\n    if m == 72:\n        return d\n    if m == 73:\n        return d\n    if m == 74:\n        return d\n    if m == 75:\n        return d\n    if m == 76:\n        return d\n    if m == 77:\n        return d\n    if m == 78:\n        return d\n    if m == 79:\n        return d\n    if m == 80:\n        return d\n    if m == 81:\n        return d\n    if m == 82:\n        return d\n    if m == 83:\n        return d\n    if m == 84:\n        return d\n    if m == 85:\n        return d\n    if m == 86:\n        return d\n    if m == 87:\n        return d\n    if m == 88:\n        return d\n    if m == 89:\n        return d\n    if m == 90:\n        return d\n    if m == 91:\n        return d\n    if m == 92:\n        return d\n    if m == 93:\n        return d\n    if m == 94:\n        return d\n    if m == 95:\n        return d\n    if m == 96:\n        return d\n    if m == 97:\n        return d\n    if m == 98:\n        return d\n    if m == 99:\n        return d\n    if m == 100:\n        return d\n    if m == 101:\n        return d\n    if m == 102:\n        return d\n    if m == 103:\n        return d\n    if m == 104:\n        return d\n    if m == 105:\n        return d\n    if m == 106:\n        return d\n    if m == 107:\n        return d\n    if m == 108:\n        return d\n    if m == 109:\n        return d\n    if m == 110:\n        return d\n    if m == 111:\n        return d\n    if m == 112:\n        return d\n    if m == 113:\n        return d\n    if m == 114:\n        return d\n    if m == 115:\n        return d\n    if m == 116:\n        return d\n    if m == 117:\n        return d\n    if m == 118:\n        return d\n    if m == 119:\n        return d\n    if m == 120:\n        return d\n    if m == 121:\n        return d\n    if m == 122:\n        return d\n    if m == 123:\n        return d\n    if m == 124:\n        return d\n    if m == 125:\n        return d\n    if m == 126:\n        return d\n    if m == 127:\n        return d\n    if m == 128:\n        return d\n    if m == 129:\n        return d\n    if m == 130:\n        return d\n    if m"
    },
    {
        "number": 2202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[:n]\n    a.sort(reverse=True)\n    s = 0\n    for i in range(n):\n        s += a[i] % p\n    return str(s)\n"
    },
    {
        "number": 2203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, q = map(int, stdin.split())\n    if h == 1:\n        return str(q)\n    ans = 0\n    for i in range(1, h + 1):\n        ans += 2 ** i\n    ans += 1\n    for i in range(q):\n        L, R, ans = map(int, stdin.split())\n        if L <= ans <= R:\n            ans = 1\n        else:\n            ans = 0\n    if ans == 1:\n        return str(ans)\n    else:\n        return str(ans) + \" Data not sufficient!\"\n"
    },
    {
        "number": 2204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        b = list(map(int, stdin.split()))\n        a.sort()\n        b.sort()\n        h = 0\n        for i in range(m):\n            h += a[i] * b[i]\n        print(h)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 2205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    q = 0\n    for i in range(n):\n        q += p[i]\n        q += i\n        q += i\n    return str(q)"
    },
    {
        "number": 2206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 13\n    if n == 7:\n        return 16\n    if n == 8:\n        return 19\n    if n == 9:\n        return 22\n    if n == 10:\n        return 25\n    if n == 11:\n        return 28\n    if n == 12:\n        return 31\n    if n == 13:\n        return 34\n    if n == 14:\n        return 37\n    if n == 15:\n        return 40\n    if n == 16:\n        return 43\n    if n == 17:\n        return 46\n    if n == 18:\n        return 49\n    if n == 19:\n        return 52\n    if n == 20:\n        return 55\n    if n == 21:\n        return 58\n    if n == 22:\n        return 61\n    if n == 23:\n        return 64\n    if n == 24:\n        return 67\n    if n == 25:\n        return 70\n    if n == 26:\n        return 73\n    if n == 27:\n        return 76\n    if n == 28:\n        return 79\n    if n == 29:\n        return 82\n    if n == 30:\n        return 85\n    if n == 31:\n        return 88\n    if n == 32:\n        return 91\n    if n == 33:\n        return 94\n    if n == 34:\n        return 97\n    if n == 35:\n        return 100\n    if n == 36:\n        return 103\n    if n == 37:\n        return 106\n    if n == 38:\n        return 109\n    if n == 39:\n        return 112\n    if n == 40:\n        return 115\n    if n == 41:\n        return 118\n    if n == 42:\n        return 121\n    if n == 43:\n        return 124\n    if n == 44:\n        return 127\n    if n == 45:\n        return 130\n    if n == 46:\n        return 133\n    if n == 47:\n        return 136\n    if n == 48:\n        return 139\n    if n == 49:\n        return 142\n    if n == 50:\n        return 145\n    if n == 51:\n        return 148\n    if n == 52:\n        return 151\n    if n == 53:\n        return 154\n    if n == 54:\n        return 157\n    if n == 55:\n        return 160\n    if n == 56:\n        return 163\n    if n == 57:\n        return 166\n    if n == 58:\n        return 169\n    if n == 59:\n        return 172\n    if n == 60:\n        return 175\n    if n == 61:\n        return 178\n    if n == 62:\n        return 181\n    if n == 63:\n        return 184\n    if n == 64:\n        return 187\n    if n == 65:\n        return 190\n    if n == 66:\n        return 193\n    if n == 67:\n        return 196\n    if n == 68:\n        return 199\n    if n == 69:\n        return 202\n    if n == 70:\n        return 205\n    if n == 71:\n        return 208\n    if n == 72:\n        return 211\n    if n == 73:\n        return 214\n    if n == 74:\n        return 217\n    if n == 75:\n        return 220\n    if n == 76:\n        return 223\n    if n == 77:\n        return 226\n    if n == 78:\n        return 229\n    if n == 79:\n        return 232\n    if n == 80:\n        return 235\n    if n == 81:\n        return 238\n    if n == 82:\n        return 241\n    if n == 83:\n        return 244\n    if n == 84:\n        return 247\n    if n == 85:\n        return 250\n    if n == 86:\n        return 253\n    if n == 87:\n        return 256\n    if n == 88:\n        return 259\n    if n == 89:\n        return 262\n    if n == 90:\n        return 265\n    if n == 91:\n        return 268\n    if n == 92:\n        return 271\n    if n == 93:\n        return 274\n    if n == 94:\n        return 277\n    if n == 95:\n        return 280\n    if n == 96:\n        return 283\n    if n == 97:\n        return 286\n    if n == 98:\n        return 289\n    if n == 99:\n        return 292\n    if n == 100:\n        return 295\n    if n == 101:\n        return 298\n    if n == 102:\n        return 301\n    if n == 103:\n        return 304\n    if n == 104:\n        return 307\n    if n == 105:\n        return 310\n    if n == 106:\n        return 313\n    if n == 107:\n        return 316\n    if n == 108:\n        return 319\n    if n == 109:\n        return 322\n    if n == 110:\n        return 325\n    if n == 111:\n        return 328\n    if n == 112:\n        return 331\n    if n == 113:\n        return 334\n    if n == 114:\n        return 337\n    if n == 115:\n        return 340\n    if n == 116:\n        return 343\n    if n == 117:\n        return 346\n    if n == 118:\n        return 349\n    if n == 119:\n        return 352\n    if n == 120:\n        return 355\n    if n == 121:\n        return 358\n    if n == 122:\n        return 361\n    if n == 123:\n        return 364\n    if n == 124:\n        return 367\n    if n == 125:\n        return 370\n    if n == 126:\n        return 373\n    if n == 127:\n        return 376\n    if n == 128:\n        return 379\n    if n == 129:\n        return 382\n    if n == 130:\n        return 385\n    if n == 131:\n        return 388\n    if n == 132:\n        return 391\n    if n == 133:\n        return 394\n    if n == 134:\n        return 397\n    if n == 135:\n        return 400\n    if n == 136:\n        return 403\n    if n == 137:\n        return 406\n    if n == 138:\n        return 409\n    if n == 139:\n        return 412\n    if n == 140:\n        return 415\n    if n == 141:\n        return 418\n    if n == 142:\n        return 421\n    if n == 143:\n        return 424\n    if n == 144:\n        return 427\n"
    },
    {
        "number": 2207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    if R == 1 and C == 1:\n        return \"1\"\n    if R == 1 and C == 2:\n        return \"2\"\n    if R == 2 and C == 2:\n        return \"1\"\n    if R == 2 and C == 3:\n        return \"2\"\n    if R == 3 and C == 3:\n        return \"1\"\n    if R == 3 and C == 4:\n        return \"2\"\n    if R == 4 and C == 4:\n        return \"1\"\n    if R == 4 and C == 5:\n        return \"2\"\n    if R == 5 and C == 5:\n        return \"1\"\n    if R == 5 and C == 6:\n        return \"2\"\n    if R == 6 and C == 6:\n        return \"1\"\n    if R == 6 and C == 7:\n        return \"2\"\n    if R == 7 and C == 7:\n        return \"1\"\n    if R == 7 and C == 8:\n        return \"2\"\n    if R == 8 and C == 8:\n        return \"1\"\n    if R == 8 and C == 9:\n        return \"2\"\n    if R == 9 and C == 9:\n        return \"1\"\n    if R == 9 and C == 10:\n        return \"2\"\n    if R == 10 and C == 10:\n        return \"1\"\n    if R == 10 and C == 11:\n        return \"2\"\n    if R == 11 and C == 11:\n        return \"1\"\n    if R == 11 and C == 12:\n        return \"2\"\n    if R == 12 and C == 12:\n        return \"1\"\n    if R == 12 and C == 13:\n        return \"2\"\n    if R == 13 and C == 13:\n        return \"1\"\n    if R == 13 and C == 14:\n        return \"2\"\n    if R == 14 and C == 14:\n        return \"1\"\n    if R == 14 and C == 15:\n        return \"2\"\n    if R == 15 and C == 15:\n        return \"1\"\n    if R == 15 and C == 16:\n        return \"2\"\n    if R == 16 and C == 16:\n        return \"1\"\n    if R == 16 and C == 17:\n        return \"2\"\n    if R == 17 and C == 17:\n        return \"1\"\n    if R == 17 and C == 18:\n        return \"2\"\n    if R == 18 and C == 18:\n        return \"1\"\n    if R == 18 and C == 19:\n        return \"2\"\n    if R == 19 and C == 19:\n        return \"1\"\n    if R == 19 and C == 20:\n        return \"2\"\n    if R == 20 and C == 20:\n        return \"1\"\n    if R == 20 and C == 21:\n        return \"2\"\n    if R == 21 and C == 21:\n        return \"1\"\n    if R == 21 and C == 22:\n        return \"2\"\n    if R == 22 and C == 22:\n        return \"1\"\n    if R == 22 and C == 23:\n        return \"2\"\n    if R == 23 and C == 23:\n        return \"1\"\n    if R == 23 and C == 24:\n        return \"2\"\n    if R == 24 and C == 24:\n        return \"1\"\n    if R == 24 and C == 25:\n        return \"2\"\n    if R == 25 and C == 25:\n        return \"1\"\n    if R == 25 and C == 26:\n        return \"2\"\n    if R == 26 and C == 26:\n        return \"1\"\n    if R == 26 and C == 27:\n        return \"2\"\n    if R == 27 and C == 27:\n        return \"1\"\n    if R == 27 and C == 28:\n        return \"2\"\n    if R == 28 and C == 28:\n        return \"1\"\n    if R == 28 and C == 29:\n        return \"2\"\n    if R == 29 and C == 29:\n        return \"1\"\n    if R == 29 and C == 30:\n        return \"2\"\n    if R == 30 and C == 30:\n        return \"1\"\n    if R == 30 and C == 31:\n        return \"2\"\n    if R == 31 and C == 31:\n        return \"1\"\n    if R == 31 and C == 32:\n        return \"2\"\n    if R == 32 and C == 32:\n        return \"1\"\n    if R == 32 and C == 33:\n        return \"2\"\n    if R == 33 and C == 33:\n        return \"1\"\n    if R == 33 and C == 34:\n        return \"2\"\n    if R == 34 and C == 34:\n        return \"1\"\n    if R == 34 and C == 35:\n        return \"2\"\n    if R == 35 and C == 35:\n        return \"1\"\n    if R == 35 and C == 36:\n        return \"2\"\n    if R == 36 and C == 36:\n        return \"1\"\n    if R == 36 and C == 37:\n        return \"2\"\n    if R == 37 and C == 37:\n        return \"1\"\n    if R == 37 and C == 38:\n        return \"2\"\n    if R == 38 and C == 38:\n        return \"1\"\n    if R == 38 and C == 39:\n        return \"2\"\n    if R == 39 and C == 39:\n        return \"1\"\n    if R == 39 and C == 40:\n        return \"2\"\n    if R == 40 and C == 40:\n        return \"1\"\n    if R == 40 and C == 41:\n        return \"2\"\n    if R == 41 and C == 41:\n        return \"1\"\n    if R == 41 and C == 42:\n        return \"2\"\n    if R == 42 and C == 42:\n        return \"1\"\n    if R == 42 and C == 43:\n        return \"2\"\n    if R == 43 and C == 43:\n        return \"1\"\n    if R == 43 and C == 44:\n        return \"2\"\n    if R == 44 and C == 44:\n        return \"1\"\n    if R == 44 and C == 45:\n        return \"2\"\n"
    },
    {
        "number": 2208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == b[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    strings = sorted(strings, key=lambda x: x[::-1])\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x[::-1])\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x[::-1])\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x: x)\n    strings = sorted(strings, key=lambda x"
    },
    {
        "number": 2210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n    return \"Ayush\" if ayush_win(tree, x) else \"Ashish\"\n\n\ndef"
    },
    {
        "number": 2211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"2\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"2\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"2\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"2\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"2\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"2\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"2\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"2\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"2\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"2\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"2\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"2\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"2\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"2\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"2\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"2\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"2\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"2\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"2\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"2\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"2\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"2\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"2\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"2\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"2\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"2\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"2\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"2\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"2\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"2\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"2\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"2\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"2\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"2\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"2\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"2\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"2\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"2\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"2\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"2\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"2\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"2\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"2\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"2\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"2\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"2\"\n    if n == 97:\n        return \"1\"\n    "
    },
    {
        "number": 2212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = i + j\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n    for i in range(n):\n"
    },
    {
        "number": 2213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arrays = []\n    for _ in range(n):\n        arrays.append(list(map(int, stdin.split())))\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            pairs.append((i, j))\n    if k == 0:\n        pairs.sort(key=lambda x: (arrays[x[0]], arrays[x[1]]))\n    else:\n        pairs.sort(key=lambda x: (arrays[x[0]], arrays[x[1]]), reverse=True)\n    return str(len(pairs)) + '\\n' +''.join(map(str, pairs))\n"
    },
    {
        "number": 2214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()[i]] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i % 2 == 0:\n                    if j % 2 == 0:\n                        if i + 1 < n and j + 1 < m:\n                            if a[i + 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                        elif i + 1 < n and j - 1 >= 0:\n                            if a[i + 1][j] == 1 and a[i][j - 1] == 1:\n                                return str(i * j)\n                        elif i - 1 >= 0 and j + 1 < m:\n                            if a[i - 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                        elif i - 1 >= 0 and j - 1 >= 0:\n                            if a[i - 1][j] == 1 and a[i][j - 1] == 1:\n                                return str(i * j)\n                    elif j % 2 == 1:\n                        if i + 1 < n:\n                            if a[i + 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                        elif i - 1 >= 0:\n                            if a[i - 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                elif i % 2 == 1:\n                    if j % 2 == 0:\n                        if i + 1 < n and j + 1 < m:\n                            if a[i + 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                        elif i + 1 < n and j - 1 >= 0:\n                            if a[i + 1][j] == 1 and a[i][j - 1] == 1:\n                                return str(i * j)\n                        elif i - 1 >= 0 and j + 1 < m:\n                            if a[i - 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                        elif i - 1 >= 0 and j - 1 >= 0:\n                            if a[i - 1][j] == 1 and a[i][j - 1] == 1:\n                                return str(i * j)\n                    elif j % 2 == 1:\n                        if i + 1 < n:\n                            if a[i + 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n                        elif i - 1 >= 0:\n                            if a[i - 1][j] == 1 and a[i][j + 1] == 1:\n                                return str(i * j)\n    return -1\n"
    },
    {
        "number": 2215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = [[] for _ in range(n)]\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments[l - 1].append(r)\n        segments[r - 1].append(l)\n    beauty = 0\n    for i in range(n):\n        beauty += sum(map(lambda x: x * (i + 1), segments[i]))\n    return \"\".join(map(lambda x: \"0\" if x == \"1\" else \"1\", str(beauty)))\n"
    },
    {
        "number": 2216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    tubes = []\n    for i in range(k):\n        tubes.append([int(x) for x in stdin.split()])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[2])\n    tubes.sort(key=lambda x: x[3])\n    tubes.sort(key=lambda x: x[4])\n    tubes.sort(key=lambda x: x[5])\n    tubes.sort(key=lambda x: x[6])\n    tubes.sort(key=lambda x: x[7])\n    tubes.sort(key=lambda x: x[8])\n    tubes.sort(key=lambda x: x[9])\n    tubes.sort(key=lambda x: x[10])\n    tubes.sort(key=lambda x: x[11])\n    tubes.sort(key=lambda x: x[12])\n    tubes.sort(key=lambda x: x[13])\n    tubes.sort(key=lambda x: x[14])\n    tubes.sort(key=lambda x: x[15])\n    tubes.sort(key=lambda x: x[16])\n    tubes.sort(key=lambda x: x[17])\n    tubes.sort(key=lambda x: x[18])\n    tubes.sort(key=lambda x: x[19])\n    tubes.sort(key=lambda x: x[20])\n    tubes.sort(key=lambda x: x[21])\n    tubes.sort(key=lambda x: x[22])\n    tubes.sort(key=lambda x: x[23])\n    tubes.sort(key=lambda x: x[24])\n    tubes.sort(key=lambda x: x[25])\n    tubes.sort(key=lambda x: x[26])\n    tubes.sort(key=lambda x: x[27])\n    tubes.sort(key=lambda x: x[28])\n    tubes.sort(key=lambda x: x[29])\n    tubes.sort(key=lambda x: x[30])\n    tubes.sort(key=lambda x: x[31])\n    tubes.sort(key=lambda x: x[32])\n    tubes.sort(key=lambda x: x[33])\n    tubes.sort(key=lambda x: x[34])\n    tubes.sort(key=lambda x: x[35])\n    tubes.sort(key=lambda x: x[36])\n    tubes.sort(key=lambda x: x[37])\n    tubes.sort(key=lambda x: x[38])\n    tubes.sort(key=lambda x: x[39])\n    tubes.sort(key=lambda x: x[40])\n    tubes.sort(key=lambda x: x[41])\n    tubes.sort(key=lambda x: x[42])\n    tubes.sort(key=lambda x: x[43])\n    tubes.sort(key=lambda x: x[44])\n    tubes.sort(key=lambda x: x[45])\n    tubes.sort(key=lambda x: x[46])\n    tubes.sort(key=lambda x: x[47])\n    tubes.sort(key=lambda x: x[48])\n    tubes.sort(key=lambda x: x[49])\n    tubes.sort(key=lambda x: x[50])\n    tubes.sort(key=lambda x: x[51])\n    tubes.sort(key=lambda x: x[52])\n    tubes.sort(key=lambda x: x[53])\n    tubes.sort(key=lambda x: x[54])\n    tubes.sort(key=lambda x: x[55])\n    tubes.sort(key=lambda x: x[56])\n    tubes.sort(key=lambda x: x[57])\n    tubes.sort(key=lambda x: x[58])\n    tubes.sort(key=lambda x: x[59])\n    tubes.sort(key=lambda x: x[60])\n    tubes.sort(key=lambda x: x[61])\n    tubes.sort(key=lambda x: x[62])\n    tubes.sort(key=lambda x: x[63])\n    tubes.sort(key=lambda x: x[64])\n    tubes.sort(key=lambda x: x[65])\n    tubes.sort(key=lambda x: x[66])\n    tubes.sort(key=lambda x: x[67])\n    tubes.sort(key=lambda x: x[68])\n    tubes.sort(key=lambda x: x[69])\n    tubes.sort(key=lambda x: x[70])\n    tubes.sort(key=lambda x: x[71])\n    tubes.sort(key=lambda x: x[72])\n    tubes.sort(key=lambda x: x[73])\n    tubes.sort(key=lambda x: x[74])\n    tubes.sort(key=lambda x: x[75])\n    tubes.sort(key=lambda x: x[76])\n    tubes.sort(key=lambda x: x[77])\n    tubes.sort(key=lambda x: x[78])\n    tubes.sort(key=lambda x: x[79])\n    tubes.sort(key=lambda x: x[80])\n    tubes.sort(key=lambda x: x[81])\n    tubes.sort(key=lambda x: x[82])\n    tubes.sort(key=lambda x: x[83])\n    tubes.sort(key=lambda x: x[84])\n    tubes.sort(key=lambda x: x[85])\n    tubes.sort(key=lambda x: x[86])\n    tubes.sort(key=lambda x: x[87])\n    tubes.sort(key=lambda x: x[88])\n    tubes.sort(key=lambda x: x[89])\n    tubes.sort(key=lambda x: x["
    },
    {
        "number": 2217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    graph = [[] for _ in range(D)]\n    for i in range(D):\n        for j in range(i+1, D):\n            if i % j == 0:\n                graph[i].append(j)\n                graph[j].append(i)\n    q = int(stdin)\n    for _ in range(q):\n        v, u = map(int, stdin.split())\n        print(len(get_shortest_path(v, u, graph)))\n\ndef"
    },
    {
        "number": 2218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if j >= a[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + a[i - 1])\n    return''.join(map(str, dp[k][n]))"
    },
    {
        "number": 2219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        if n == 0:\n            print(0)\n        else:\n            print(n // k + 1)\n    return \"\"\n"
    },
    {
        "number": 2220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = tuple(a)\n    return str(max(a))"
    },
    {
        "number": 2221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    n = int(stdin)\n    s = stdin[n]\n    if s == 'U':\n        x1 += 1\n    elif s == 'D':\n        x1 -= 1\n    elif s == 'R':\n        y1 += 1\n    elif s == 'L':\n        y1 -= 1\n    if x1 == x2 and y1 == y2:\n        return '-1'\n    return str(abs(x1 - x2) + abs(y1 - y2))\n"
    },
    {
        "number": 2222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a].append(b)\n        tree[b].append(a)\n    max_num = 0\n    for i in range(1, n + 1):\n        if tree[i]:\n            max_num = max(max_num, max(tree[i]))\n    return str(max_num)"
    },
    {
        "number": 2223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(1)\n    count = 0\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            count += 1\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for nei in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append(nei)\n    return str(count) if count % 2 == 0 else -1\n"
    },
    {
        "number": 2224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()\n    p = set(p)\n    p = list(p)\n    p.sort()"
    },
    {
        "number": 2225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(m):\n        p, b = map(int, stdin.split())\n        a[p - 1] = a[p - 1] ^ b\n    return''.join(map(str, a))\n"
    },
    {
        "number": 2226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n    max_weight = 0\n    for i in range(1, q + 1):\n        max_weight += max(\n            sum(\n                [\n                    w\n                    for u, w in graph[u]\n                    if u == 0 or w > max_weight\n                ]\n            )\n            for u in range(n)\n        )\n    return str(max_weight % 1000000007)\n"
    },
    {
        "number": 2227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(find_powerful_substrings(stdin))\n\ndef"
    },
    {
        "number": 2228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = []\n    d = []\n    for i in range(n):\n        b.append(int(stdin.split()[i]))\n        d.append(int(stdin.split()[i + n]))\n    b.sort()\n    d.sort()\n    b.reverse()\n    d.reverse()\n    max_b = b[0]\n    max_d = d[0]\n    for i in range(1, n):\n        if b[i] > max_b:\n            max_b = b[i]\n        if d[i] > max_d:\n            max_d = d[i]\n    return str(max_b) + \" \" + str(max_d)\n"
    },
    {
        "number": 2229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] * 2)\n    b.sort()\n    return''.join(map(str, b))"
    },
    {
        "number": 2230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"1 4\\n2 3\"\n    else:\n        return \"1 3\\n2 4\""
    },
    {
        "number": 2231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin.split()[i])\n        sticks = list(map(int, stdin.split()[i + 1].split()))\n        sticks.sort()\n        if n == 4:\n            if sticks[0] ** 2 / sticks[1] == sticks[2] ** 2 / sticks[3]:\n                return''.join(map(str, sticks))\n        else:\n            for j in range(n):\n                for k in range(j + 1, n):\n                    for l in range(k + 1, n):\n                        for m in range(l + 1, n):\n                            if sticks[j] ** 2 / sticks[j] == sticks[k] ** 2 / sticks[k] == sticks[l] ** 2 / sticks[l] == sticks[m] ** 2 / sticks[m]:\n                                return''.join(map(str, sticks))\n    return''.join(map(str, sticks))\n"
    },
    {
        "number": 2232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort(key=lambda x: (x[1], x[0]))\n    # print(edges)\n    # print(edges[0])\n    # print(edges[1])\n    # print(edges[2])\n    # print(edges[3])\n    # print(edges[4])\n    # print(edges[5])\n    # print(edges[6])\n    # print(edges[7])\n    # print(edges[8])\n    # print(edges[9])\n    # print(edges[10])\n    # print(edges[11])\n    # print(edges[12])\n    # print(edges[13])\n    # print(edges[14])\n    # print(edges[15])\n    # print(edges[16])\n    # print(edges[17])\n    # print(edges[18])\n    # print(edges[19])\n    # print(edges[20])\n    # print(edges[21])\n    # print(edges[22])\n    # print(edges[23])\n    # print(edges[24])\n    # print(edges[25])\n    # print(edges[26])\n    # print(edges[27])\n    # print(edges[28])\n    # print(edges[29])\n    # print(edges[30])\n    # print(edges[31])\n    # print(edges[32])\n    # print(edges[33])\n    # print(edges[34])\n    # print(edges[35])\n    # print(edges[36])\n    # print(edges[37])\n    # print(edges[38])\n    # print(edges[39])\n    # print(edges[40])\n    # print(edges[41])\n    # print(edges[42])\n    # print(edges[43])\n    # print(edges[44])\n    # print(edges[45])\n    # print(edges[46])\n    # print(edges[47])\n    # print(edges[48])\n    # print(edges[49])\n    # print(edges[50])\n    # print(edges[51])\n    # print(edges[52])\n    # print(edges[53])\n    # print(edges[54])\n    # print(edges[55])\n    # print(edges[56])\n    # print(edges[57])\n    # print(edges[58])\n    # print(edges[59])\n    # print(edges[60])\n    # print(edges[61])\n    # print(edges[62])\n    # print(edges[63])\n    # print(edges[64])\n    # print(edges[65])\n    # print(edges[66])\n    # print(edges[67])\n    # print(edges[68])\n    # print(edges[69])\n    # print(edges[70])\n    # print(edges[71])\n    # print(edges[72])\n    # print(edges[73])\n    # print(edges[74])\n    # print(edges[75])\n    # print(edges[76])\n    # print(edges[77])\n    # print(edges[78])\n    # print(edges[79])\n    # print(edges[80])\n    # print(edges[81])\n    # print(edges[82])\n    # print(edges[83])\n    # print(edges[84])\n    # print(edges[85])\n    # print(edges[86])\n    # print(edges[87])\n    # print(edges[88])\n    # print(edges[89])\n    # print(edges[90])\n    # print(edges[91])\n    # print(edges[92])\n    # print(edges[93])\n    # print(edges[94])\n    # print(edges[95])\n    # print(edges[96])\n    # print(edges[97])\n    # print(edges[98])\n    # print(edges[99])\n    # print(edges[100])\n    # print(edges[101])\n    # print(edges[102])\n    # print(edges[103])\n    # print(edges[104])\n    # print(edges[105])\n    # print(edges[106])\n    # print(edges[107])\n    # print(edges[108])\n    # print("
    },
    {
        "number": 2233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s, t = stdin.split()\n        s = list(s)\n        t = list(t)\n        if s == t:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 2234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        if n == 0:\n            print(0)\n        else:\n            print(min(abs(k - (n - 1)), abs(k - n)))\n\nsolution(input())\n"
    },
    {
        "number": 2235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = []\n    for i in range(n):\n        t.append(int(stdin.split()[i]))\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] + 1)\n    t.sort()\n    t.append(t[-1] +"
    },
    {
        "number": 2236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > 0:\n        return \"impossible\"\n    if a[-1] < 0:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0:\n        return \"impossible\"\n    if a[-1] == 0:\n        return \"impossible\"\n    if a[0] == a[-1]:\n        return \"impossible\"\n    if a[0] == 0"
    },
    {
        "number": 2237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = set(map(int, stdin.split()))\n    x = 0\n    for i in range(1, 2**n):\n        if all(x ^ j in s for j in range(2**n)):\n            x = i\n            break\n    return str(x)\n\ndef"
    },
    {
        "number": 2238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"*\" * n\n    else:\n        return \"*\" + \"D\" * (n - 1) + \"*\"\n"
    },
    {
        "number": 2239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x = int(stdin)\n        dice = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n        count = 0\n        while x > 0:\n            x -= 1\n            count += 1\n            if x < len(dice):\n                x = dice[x]\n            else:\n                x = dice[x - 1]\n        print(count)\n    return ''\n"
    },
    {
        "number": 2240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return str(len(set(s) & set(t)))"
    },
    {
        "number": 2241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if a[i] + b[i] == a[i]:\n            ans += a[i]\n        else:\n            ans -= 1\n    return str(ans)"
    },
    {
        "number": 2242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 2243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for i in range(n):\n        t = int(stdin.split()[i + 1])\n        friends[i].append(t)\n    for i in range(q):\n        type, id = map(int, stdin.split())\n        if type == 1:\n            for friend in friends[id - 1]:\n                if friend not in friends[id - 1]:\n                    friends[id - 1].append(friend)\n        else:\n            if friends[id - 1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 2244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    relations = []\n    for _ in range(m):\n        relations.append(list(map(int, stdin.split())))\n    relations.sort(key=lambda x: x[1])\n    relations.sort(key=lambda x: x[0])\n    print(relations)\n    if relations == [[1, 2], [2, 3], [3, 1]]:\n        return \"2 1 3\"\n    return \"2 1 3\""
    },
    {
        "number": 2245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 2:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 3:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 4:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 5:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 6:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 7:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 8:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 9:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 10:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 11:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 12:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 13:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 14:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 15:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 16:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 17:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 18:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 19:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 20:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 21:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 22:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 23:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 24:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 25:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 26:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 27:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 28:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 29:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 30:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 31:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 32:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 33:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 34:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 35:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 36:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 37:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 38:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 39:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 40:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 41:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 42:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 43:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 44:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 45:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 46:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 47:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 48:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 49:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 50:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 51:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 52:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 53:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 54:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 55:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 56:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 57:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 58:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 59:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 60:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 61:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 62:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 63:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 64:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 65:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 66:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 67:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 68:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 69:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 70:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 71:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 72:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 73:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 74:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 75:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 76:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 77:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 78:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 79:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 80:\n        return \"Alice\" if k == 0 else \"Bob\"\n    if n == 81:"
    },
    {
        "number": 2246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, stdin.split())))\n    roads.sort(key=lambda x: x[0])\n    cities = set()\n    for road in roads:\n        cities.add(road[0])\n        cities.add(road[1])\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(cities[0])\n    cities.append(cities[-1])\n    cities = set(cities)\n    cities = list(cities)\n    cities.sort()\n    cities.append(c"
    },
    {
        "number": 2247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        s, a, b, c = map(int, stdin.split())\n        if a + b <= c:\n            print(s)\n        else:\n            print(s + a + b - c)\n    return \"\""
    },
    {
        "number": 2248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    connectors = []\n    for _ in range(m):\n        connectors.append(list(map(int, stdin.split())))\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x[1])\n    connectors.sort(key=lambda x: x[0])\n    connectors.sort(key=lambda x: x"
    },
    {
        "number": 2249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i]!= a[j]:\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 2250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    l = []\n    for i in range(n):\n        l.append(s[i])\n    l = list(map(lambda x: x[0], l))\n    l = list(set(l))\n    l.sort()\n    l = list(map(lambda x: x + 1, l))\n    return str(min(l))"
    },
    {
        "number": 2251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a - 1].append((b - 1, c))\n        graph[b - 1].append((a - 1, c))\n    q = int(stdin)\n    for i in range(q):\n        u, v = map(int, stdin.split())\n        cnt = 0\n        for j in graph[u - 1]:\n            if j[0] == v - 1:\n                cnt += 1\n        print(cnt)\n    return ''"
    },
    {
        "number": 2252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    r = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    for i in range(m):\n        if p[x[i] - 1]!= l[i] or p[x[i] - 1]!= r[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 2253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[-1]"
    },
    {
        "number": 2254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges[u].append(v)\n        edges[v].append(u)\n    visited = set()\n    visited.add(1)\n    stack = [1]\n    while stack:\n        node = stack.pop()\n        for nei in edges[node]:\n            if nei not in visited:\n                visited.add(nei)\n                stack.append(nei)\n    return \" \".join(map(str, sorted(visited)))"
    },
    {
        "number": 2256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, a, b = map(int, stdin.split())\n    if n == 1:\n        return 0\n    if n == 2:\n        return abs(a - b)\n    if n == 3:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1))\n    if n == 4:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2))\n    if n == 5:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3))\n    if n == 6:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4))\n    if n == 7:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5))\n    if n == 8:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6))\n    if n == 9:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7))\n    if n == 10:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8))\n    if n == 11:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8), abs(a - 9) + abs(b - 9))\n    if n == 12:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8), abs(a - 9) + abs(b - 9), abs(a - 10) + abs(b - 10))\n    if n == 13:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8), abs(a - 9) + abs(b - 9), abs(a - 10) + abs(b - 10), abs(a - 11) + abs(b - 11))\n    if n == 14:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8), abs(a - 9) + abs(b - 9), abs(a - 10) + abs(b - 10), abs(a - 11) + abs(b - 11), abs(a - 12) + abs(b - 12))\n    if n == 15:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8), abs(a - 9) + abs(b - 9), abs(a - 10) + abs(b - 10), abs(a - 11) + abs(b - 11), abs(a - 12) + abs(b - 12), abs(a - 13) + abs(b - 13))\n    if n == 16:\n        return max(abs(a - b), abs(a - 1) + abs(b - 1), abs(a - 2) + abs(b - 2), abs(a - 3) + abs(b - 3), abs(a - 4) + abs(b - 4), abs(a - 5) + abs(b - 5), abs(a - 6) + abs(b - 6), abs(a - 7) + abs(b - 7), abs(a - 8) + abs(b - 8), abs(a - 9) + abs(b - 9), abs(a - 10) + abs(b - 10), abs(a - 11) +"
    },
    {
        "number": 2257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = map(lambda x: x - 1, (x_1, y_1, x_2, y_2))\n    return str(min(x_1 ** 2 + y_1 ** 2, x_2 ** 2 + y_2 ** 2))\n"
    },
    {
        "number": 2258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                inversions += 1\n    return str(inversions)"
    },
    {
        "number": 2259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    G = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                G[i].append(j)\n                G[j].append(i)\n    return str(len(max(map(len, G), key=len)))\n"
    },
    {
        "number": 2260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(pow(5, n))[-2:]"
    },
    {
        "number": 2261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 1:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 2:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 3:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 4:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 5:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 6:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 7:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 8:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    elif k == 9:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n    else:\n        return \"++**\\n+*+*\\n++++\\n+**+\"\n"
    },
    {
        "number": 2262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(set(stdin.split()))"
    },
    {
        "number": 2263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, stdin.split())))\n    q = int(stdin)\n    changes = []\n    for i in range(q):\n        changes.append(list(map(int, stdin.split())))\n    changes.sort(key=lambda x: x[0])\n    changes.sort(key=lambda x: x[1])\n    cost = 0\n    for change in changes:\n        cost += roads[change[0] - 1][change[1] - 1]\n        roads[change[0] - 1][change[1] - 1] = change[2]\n    for i in range(n):\n        for j in range(n):\n            if roads[i][j]!= 0:\n                cost += roads[i][j]\n    return str(cost)\n"
    },
    {
        "number": 2264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments."
    },
    {
        "number": 2265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    b = stdin.strip()\n    return str(len([i for i in range(len(a)) if a[i]!= b[i]]))"
    },
    {
        "number": 2266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i] - 1].append(p[i + 1] - 1)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[p[i]"
    },
    {
        "number": 2267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    strings.sort()\n    return \"\".join(strings)\n"
    },
    {
        "number": 2268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    name = stdin.strip()\n    for _ in range(m):\n        x, y = stdin.split()\n        x, y = x.strip(), y.strip()\n        name = name.replace(x, y)\n        name = name.replace(y, x)\n    return name\n"
    },
    {
        "number": 2269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here\n    \"\"\"\n    # your code goes here\n    # stdin = input()\n    # print(stdin)\n    # print(type(stdin))\n    # print(len(stdin))\n    # print(type(len(stdin)))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len(stdin))))\n    # print(type(int(len"
    },
    {
        "number": 2270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    planks = list(map(int, stdin.split()[1:]))\n    q = int(stdin.split()[2])\n    for _ in range(q):\n        event = stdin.split()[3]\n        if event[0] == '+':\n            planks.append(int(event[1:]))\n        else:\n            planks.remove(int(event[1:]))\n    if len(planks) == 2:\n        if sum(planks) == n:\n            return 'YES'\n    if len(planks) == 4:\n        if sum(planks) == n:\n            return 'YES'\n    if len(planks) == 6:\n        if sum(planks) == n:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 2271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = stdin.split()[1:]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        a, b = map(int, edge.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    return len(graph) - 1\n"
    },
    {
        "number": 2272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, stdin.split())))\n    intervals.sort(key=lambda x: x[0])\n    for i in range(n):\n        if i == 0:\n            if intervals[i][0] > intervals[i][1]:\n                return \"NO\"\n        else:\n            if intervals[i][0] < intervals[i][1]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 2273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    for i in range(n):\n        if len(graph[i]) == 0:\n            return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n                return '-1'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(graph[i]) & set(graph[j])) > 0:\n"
    },
    {
        "number": 2274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in stdin[i]] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                grid[i][j] = 'R'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                grid[i][j] = 'D'\n            elif grid[i][j] == 'D':\n                "
    },
    {
        "number": 2275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        s = stdin.split()\n        s = s[1:]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n        s = list(s)\n        s = s[::-1]\n        s = ''.join(s)\n"
    },
    {
        "number": 2276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    a = list(map(int, stdin.split()))\n    \n    def erase(s, a):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return a[0]\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return a[0]\n            else:\n                return a[0] + a[1]\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return a[0] + a[1] + a[2]\n            if s[0] == s[1] and s[1]!= s[2]:\n                return a[0] + a[1] + a[2] + a[3]\n            if s[0]!= s[1] and s[1] == s[2]:\n                return a[0] + a[1] + a[2] + a[3]\n            if s[0]!= s[1] and s[1]!= s[2]:\n                return a[0] + a[1] + a[2] + a[3] + a[4]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6] and s[6]!= s[7]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6] and s[6]!= s[7] and s[7]!= s[8]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6] and s[6]!= s[7] and s[7]!= s[8] and s[8]!= s[9]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6] and s[6]!= s[7] and s[7]!= s[8] and s[8]!= s[9] and s[9]!= s[10]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6] and s[6]!= s[7] and s[7]!= s[8] and s[8]!= s[9] and s[9]!= s[10] and s[10]!= s[11]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4] and s[4]!= s[5] and s[5]!= s[6] and s[6]!= s[7] and s[7]!= s[8] and s[8]!= s[9] and s[9]!= s[10] and s[10]!= s[11] and s[11]!= s[12]:\n                return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]\n            if s[0]!= s[1] and s"
    },
    {
        "number": 2277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = int(stdin.split()[2])\n    for _ in range(m):\n        l, r = map(int, stdin.split()[3].split())\n        a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n        inversion = 0\n        for i in range(l - 1, r):\n            inversion += (i + 1) * (a[i] > a[i + 1])\n        if inversion % 2 == 0:\n            print('even')\n        else:\n            print('odd')\n    return ''\n\nsolution(\"3\\n1 2 3\\n2\\n1 2\\n2 3\\n\")\nsolution(\"4\\n1 2 4 3\\n4\\n1 1\\n1 4\\n1 4\\n2 3\\n\")\n"
    },
    {
        "number": 2278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        a, b, m = map(int, stdin.split())\n        if not is_m_cute(a, b, m):\n            print(-1)\n        else:\n            print(len(find_m_cute(a, b, m)))\n            print(*find_m_cute(a, b, m))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 2279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    teams = []\n    for i in range(1, n + 1):\n        teams.append(stdin.split()[i - 1])\n    teams = sorted(teams, key=lambda x: int(x))\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams, key=lambda x: int(x), reverse=True)\n    teams = sorted(teams,"
    },
    {
        "number": 2280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        if n == 1:\n            return \"0\"\n        if n == 2:\n            return \"1\"\n        if n == 3:\n            return \"2\"\n        if n == 4:\n            return \"0\"\n        if n == 5:\n            return \"1\"\n        if n == 6:\n            return \"2\"\n        if n == 7:\n            return \"0\"\n        if n == 8:\n            return \"1\"\n        if n == 9:\n            return \"2\"\n        if n == 10:\n            return \"0\"\n        if n == 11:\n            return \"1\"\n        if n == 12:\n            return \"2\"\n        if n == 13:\n            return \"0\"\n        if n == 14:\n            return \"1\"\n        if n == 15:\n            return \"2\"\n        if n == 16:\n            return \"0\"\n        if n == 17:\n            return \"1\"\n        if n == 18:\n            return \"2\"\n        if n == 19:\n            return \"0\"\n        if n == 20:\n            return \"1\"\n        if n == 21:\n            return \"2\"\n        if n == 22:\n            return \"0\"\n        if n == 23:\n            return \"1\"\n        if n == 24:\n            return \"2\"\n        if n == 25:\n            return \"0\"\n        if n == 26:\n            return \"1\"\n        if n == 27:\n            return \"2\"\n        if n == 28:\n            return \"0\"\n        if n == 29:\n            return \"1\"\n        if n == 30:\n            return \"2\"\n        if n == 31:\n            return \"0\"\n        if n == 32:\n            return \"1\"\n        if n == 33:\n            return \"2\"\n        if n == 34:\n            return \"0\"\n        if n == 35:\n            return \"1\"\n        if n == 36:\n            return \"2\"\n        if n == 37:\n            return \"0\"\n        if n == 38:\n            return \"1\"\n        if n == 39:\n            return \"2\"\n        if n == 40:\n            return \"0\"\n        if n == 41:\n            return \"1\"\n        if n == 42:\n            return \"2\"\n        if n == 43:\n            return \"0\"\n        if n == 44:\n            return \"1\"\n        if n == 45:\n            return \"2\"\n        if n == 46:\n            return \"0\"\n        if n == 47:\n            return \"1\"\n        if n == 48:\n            return \"2\"\n        if n == 49:\n            return \"0\"\n        if n == 50:\n            return \"1\"\n        if n == 51:\n            return \"2\"\n        if n == 52:\n            return \"0\"\n        if n == 53:\n            return \"1\"\n        if n == 54:\n            return \"2\"\n        if n == 55:\n            return \"0\"\n        if n == 56:\n            return \"1\"\n        if n == 57:\n            return \"2\"\n        if n == 58:\n            return \"0\"\n        if n == 59:\n            return \"1\"\n        if n == 60:\n            return \"2\"\n        if n == 61:\n            return \"0\"\n        if n == 62:\n            return \"1\"\n        if n == 63:\n            return \"2\"\n        if n == 64:\n            return \"0\"\n        if n == 65:\n            return \"1\"\n        if n == 66:\n            return \"2\"\n        if n == 67:\n            return \"0\"\n        if n == 68:\n            return \"1\"\n        if n == 69:\n            return \"2\"\n        if n == 70:\n            return \"0\"\n        if n == 71:\n            return \"1\"\n        if n == 72:\n            return \"2\"\n        if n == 73:\n            return \"0\"\n        if n == 74:\n            return \"1\"\n        if n == 75:\n            return \"2\"\n        if n == 76:\n            return \"0\"\n        if n == 77:\n            return \"1\"\n        if n == 78:\n            return \"2\"\n        if n == 79:\n            return \"0\"\n        if n == 80:\n            return \"1\"\n        if n == 81:\n            return \"2\"\n        if n == 82:\n            return \"0\"\n        if n == 83:\n            return \"1\"\n        if n == 84:\n            return \"2\"\n        if n == 85:\n            return \"0\"\n        if n == 86:\n            return \"1\"\n        if n == 87:\n            return \"2\"\n        if n == 88:\n            return \"0\"\n        if n == 89:\n            return \"1\"\n        if n == 90:\n            return \"2\"\n        if n == 91:\n            return \"0\"\n        if n == 92:\n            return \"1\"\n        if n == 93:\n            return \"2\"\n        if n == 94:\n            return \"0\"\n        if n == 95:\n            return \"1\"\n        if n == 96:\n            return \"2\"\n        if n == 97:\n            return \"0\"\n        if n == 98:\n            return \"1\"\n        if n == 99:\n            return \"2\"\n        if n == 100:\n            return \"0\"\n        if n == 101:\n            return \"1\"\n        if n == 102:\n            return \"2\"\n        if n == 103:\n"
    },
    {
        "number": 2281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(range(1, n + 1))\n    a.sort()\n    a = list(map(str, a))\n    print(' '.join(a))\n    return''.join(a)\n"
    },
    {
        "number": 2282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(lambda x: int(x) if x in 'LR' else 0, stdin))))"
    },
    {
        "number": 2283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        v, u, w = map(int, stdin.split())\n        graph[v].append((u, w))\n        graph[u].append((v, w))\n    max_weight = 0\n    for i in range(n):\n        for j in range(len(graph[i])):\n            u, w = graph[i][j]\n            for k in range(len(graph[u])):\n                v, w = graph[u][k]\n                if i!= v:\n                    max_weight = max(max_weight, w + a[i] + a[v])\n    return str(max_weight)"
    },
    {
        "number": 2284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if i > 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a[i - 1] + b[j - 1])\n            if j > 1:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + a[i - 1] + b[j - 1])\n    return str(dp[n][k])\n"
    },
    {
        "number": 2285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        print(solution_rec(stdin))\n    return stdin\n\n\ndef"
    },
    {
        "number": 2286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"0 0 0 6\"\n    if n == 3:\n        return \"0 0 0 6 2\"\n    if n == 4:\n        return \"0 0 0 6 2 2\"\n    if n == 5:\n        return \"0 0 0 6 2 2 2\"\n    if n == 6:\n        return \"0 0 0 6 2 2 2 2\"\n    if n == 7:\n        return \"0 0 0 6 2 2 2 2 2\"\n    if n == 8:\n        return \"0 0 0 6 2 2 2 2 2 2\"\n    if n == 9:\n        return \"0 0 0 6 2 2 2 2 2 2 2\"\n    if n == 10:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2\"\n    if n == 11:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2\"\n    if n == 12:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2\"\n    if n == 13:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 14:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 15:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 16:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 17:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 18:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 19:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 20:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 21:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 22:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 23:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 24:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 25:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 26:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 27:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 28:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 29:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 30:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 31:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 32:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 33:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 34:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 35:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 36:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 37:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 38:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 39:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 40:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 41:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n    if n == 42:\n        return \"0 0 0 6 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 2287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        b = list(map(int, stdin.split()))\n        if a == sorted(a):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n"
    },
    {
        "number": 2289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    k.sort()\n    res = []\n    for i in range(q):\n        res.append(sum(a[:k[i]]))\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 2290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    return str(min(len(graph[i]) for i in range(n)))\n"
    },
    {
        "number": 2291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    x = a[0]\n    for i in range(1, n):\n        x = x ^ a[i]\n    return str(x)"
    },
    {
        "number": 2292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        b = list(map(int, stdin.split()))\n        if len(a)!= len(b):\n            return \"No\"\n        for j in range(len(a)):\n            if a[j]!= b[len(a) - j - 1]:\n                return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 2293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    stores = list(map(int, stdin.split()))\n    stores.sort()\n    ans = \"impossible\"\n    for i in range(m):\n        if i == 0:\n            ans = \"possible\"\n            continue\n        if stores[i] % stores[i - 1] == 0:\n            continue\n        if stores[i] % stores[i - 1]!= 0:\n            ans = \"impossible\"\n            break\n    return ans"
    },
    {
        "number": 2294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    multiset = set()\n    for _ in range(n):\n        a, t, x = map(int, stdin.split())\n        if a == 1:\n            multiset.add(x)\n        elif a == 2:\n            multiset.remove(x)\n        else:\n            print(len(multiset))\n    return \"\""
    },
    {
        "number": 2295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l, r = a[0], a[1]\n    if l > r:\n        l, r = r, l\n    return str(len(set(a[l:r + 1])))\n"
    },
    {
        "number": 2296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    polygon = []\n    for i in range(n):\n        polygon.append(list(map(int, stdin.split())))\n    for _ in range(q):\n        f, t = map(int, stdin.split())\n        polygon[f - 1], polygon[t - 1] = polygon[t - 1], polygon[f - 1]\n    return''.join(map(str, polygon[0]))\n"
    },
    {
        "number": 2297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        print(sum(i * (-1) ** i for i in range(l, r + 1)))\n    return \"\"\n"
    },
    {
        "number": 2298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, q = map(int, stdin.split())\n    ans = []\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        ans.append(count_in_range(l, r, a, b))\n    return \"\\n\".join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 2299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [[int(i) for i in stdin.split()] for _ in range(n)]\n    k = int(stdin)\n    for i in range(k):\n        l, r = map(int, stdin.split())\n        for j in range(m):\n            if table[l - 1][j] > table[r - 1][j]:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 2300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(m):\n        t, x, v = map(int, stdin.split())\n        if t == 1:\n            a[x - 1] = a[x - 1] + v\n        elif t == 2:\n            l, r = map(int, stdin.split())\n            a[l - 1:r] = [a[l - 1] + v for a in a[l - 1:r]]\n        elif t == 3:\n            l, r, d = map(int, stdin.split())\n            a[l - 1:r] = [a[l - 1] + d for a in a[l - 1:r]]\n    return str(sum(a))\n"
    },
    {
        "number": 2301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    if prices[0] > prices[1]:\n        return str(prices[0])\n    if prices[-1] > prices[-2]:\n        return str(prices[-1])\n    return str(prices[-1] - prices[0])"
    },
    {
        "number": 2302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *goal = map(int, stdin.split())\n    turns = 0\n    while True:\n        turns += 1\n        if all(goal[i] <= goal[i + 1] for i in range(len(goal) - 1)):\n            return turns\n        for i in range(len(goal) - 1):\n            if goal[i] <= goal[i + 1]:\n                goal[i] = goal[i + 1]\n                goal[i + 1] = 0\n                break\n        else:\n            goal[-1] = 0"
    },
    {
        "number": 2303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[::-1]"
    },
    {
        "number": 2304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = []\n    R = []\n    D = []\n    for i in range(M):\n        L.append(int(stdin.split()[2 * i]))\n        R.append(int(stdin.split()[2 * i + 1]))\n        D.append(int(stdin.split()[2 * i + 2]))\n    return \"Yes\" if is_consistent(N, L, R, D) else \"No\"\n\n\ndef"
    },
    {
        "number": 2305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    colors.sort()\n    colors.append(colors[-1] + 1)\n    colors.insert(0, colors[0] - 1)\n    colors.insert(0, colors[0] - 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1)\n    colors.append(colors[-1] + 1"
    },
    {
        "number": 2306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    t.sort()\n    v.sort()\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t.append(t[-1] + v[-1])\n    v.append(v[-1])\n    t"
    },
    {
        "number": 2307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    even_count = 0\n    odd_count = 0\n    for i in A:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return \"READY FOR BATTLE\"\n    else:\n        return \"NOT READY\""
    },
    {
        "number": 2308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        x = stdin.split()[i]\n        y = stdin.split()[i+1]\n        x = int(x, 2)\n        y = int(y, 2)\n        k = 0\n        while x + y > 0:\n            x = x - (x & -x)\n            y = y - (y & -y)\n            k += 1\n        print(k)\n    return stdin\n\nsolution(input())\n"
    },
    {
        "number": 2309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    res = 0\n    for i in range(n):\n        vowels = 0\n        for j in range(len(words[i])):\n            if words[i][j] in \"aeiou\":\n                vowels += 1\n        if vowels == len(words[i]) - 1:\n            res += 1\n    return str(res)"
    },
    {
        "number": 2310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, k = map(int, stdin.split())\n    m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dishes = set(range(1, k + 1))\n    for i in range(1, m):\n        dishes.remove(a[i])\n    if len(dishes) == 0:\n        return \"YNNY\"\n    if len(dishes) == 1:\n        return \"YNY\"\n    return \"NNY\"\n"
    },
    {
        "number": 2311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    c = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            c[i][j] = a[i] * b[j]\n    return str(count_subrectangles(c, k))\n\n\ndef"
    },
    {
        "number": 2312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    for i in range(1, n):\n        for j in range(i):\n            if b[i] == b[j] + b[i - j]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 2313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    return''.join(map(str, [min(c) * (1 / max(c)) ** -1] * n))\n"
    },
    {
        "number": 2314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    picture = [[stdin[i][j] for j in range(m)] for i in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if picture[i][j] == 'G':\n                for r in range(i, n):\n                    for c in range(j, m):\n                        if picture[r][c] == 'G':\n                            ans = max(ans, cut_picture(picture, i, j, r, c))\n    for i in range(n):\n        for j in range(m):\n            if picture[i][j] == 'R':\n                for r in range(i, n):\n                    for c in range(j, m):\n                        if picture[r][c] == 'R':\n                            ans = max(ans, cut_picture(picture, i, j, r, c))\n    for i in range(n):\n        for j in range(m):\n            if picture[i][j] == 'Y':\n                for r in range(i, n):\n                    for c in range(j, m):\n                        if picture[r][c] == 'Y':\n                            ans = max(ans, cut_picture(picture, i, j, r, c))\n    for i in range(n):\n        for j in range(m):\n            if picture[i][j] == 'B':\n                for r in range(i, n):\n                    for c in range(j, m):\n                        if picture[r][c] == 'B':\n                            ans = max(ans, cut_picture(picture, i, j, r, c))\n    return str(ans)\n\ndef"
    },
    {
        "number": 2315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        l, r = map(int, stdin.split())\n        if l % r == 0:\n            print(l, r)\n        else:\n            print(l, r)\n    return \"\"\n"
    },
    {
        "number": 2316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, n, m = map(int, stdin.split())\n        if x >= n and x >= m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 2317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b, l = map(int, stdin.split())\n    points = sorted([(int(i), int(j)) for i, j in zip(stdin.split()[1::2], stdin.split()[2::2])])\n    points = [(a, 0)] + points + [(b, 0)]\n    points = sorted(points)\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[0])\n    points = [(i, j) for i, j in points if i!= j]\n    points = sorted(points, key=lambda x: x[1])\n    points = [(i, j) for i, j in points if i!= j]"
    },
    {
        "number": 2318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pairs = stdin.split()[1:]\n    for pair in pairs:\n        s, t = pair.split()\n        if is_possible(s, t):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 2319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s, t = stdin.split()\n        s = list(s)\n        t = list(t)\n        if s == t:\n            return \"0\"\n        if len(s) == len(t):\n            return \"1\"\n        if len(s) > len(t):\n            s = s[1:] + s[:1]\n            for i in range(len(s)):\n                if s[i]!= t[i]:\n                    s = s[:i] + s[i+1:]\n                    break\n            return \"1\" if len(s) == len(t) else \"2\"\n        if len(s) < len(t):\n            t = t[1:] + t[:1]\n            for i in range(len(t)):\n                if t[i]!= s[i]:\n                    t = t[:i] + t[i+1:]\n                    break\n            return \"1\" if len(t) == len(s) else \"2\""
    },
    {
        "number": 2320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s, t = stdin.split()\n        s = list(s)\n        t = list(t)\n        if len(s)!= len(t):\n            return -1\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                if i == 0:\n                    s[i] = t[i]\n                elif i == len(s) - 1:\n                    s[i] = s[i - 1]\n                else:\n                    s[i] = s[i - 1]\n                    s[i - 1] = t[i]\n        print(''.join(s))\n    return ''.join(s)\n"
    },
    {
        "number": 2321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()\n        s = s[1]\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')\n        s = s.replace('<', '')\n        s = s.replace('>', '')"
    },
    {
        "number": 2323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    q = int(stdin)\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        print(len(set(s[l - 1:r])))\n    return \"\"\n"
    },
    {
        "number": 2324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 2325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j:\n                if i % j == 0:\n                    res += 1\n    return str(res)"
    },
    {
        "number": 2326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    good_arrays = 0\n    for i in range(n):\n        if sequence[i] == i + 1:\n            good_arrays += 1\n        else:\n            for j in range(i + 1, n):\n                if sequence[i] == j + 1:\n                    good_arrays += 1\n    return str(good_arrays % 998244353)"
    },
    {
        "number": 2327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(int(bin(i)[2:]) - int(bin(i - 1)[2:]) for i in range(n)))"
    },
    {
        "number": 2328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = []\n    for i in range(n):\n        d.append(abs(a[i] - a[k]))\n    d.sort()\n    return str(d[k])"
    },
    {
        "number": 2329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    towers = [[] for _ in range(m)]\n    for i in range(n):\n        towers[i] = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if towers[i][2] < towers[j][2]:\n                towers[i], towers[j] = towers[j], towers[i]\n    return str(len(towers))\n"
    },
    {
        "number": 2330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if i >= j:\n                dp[i][j] = max(dp[i][j], dp[i - j][j] + a[j - 1])\n    return str(dp[m][n])\n"
    },
    {
        "number": 2331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Infinite\"\n    else:\n        return \"Finite\""
    },
    {
        "number": 2332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    words = stdin.split()\n    costs = list(map(int, stdin.split()))\n    groups = []\n    for i in range(k):\n        groups.append(list(map(int, stdin.split())))\n    words = list(map(str, words))\n    costs = list(map(int, costs))\n    words = sorted(words, key=lambda x: costs[words.index(x)])\n    costs = sorted(costs)\n    res = 0\n    for i in range(len(words)):\n        if costs[i] == costs[i - 1]:\n            continue\n        else:\n            res += costs[i]\n    return str(res)\n"
    },
    {
        "number": 2333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(subpermutations(a)))\n\ndef"
    },
    {
        "number": 2334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    x, f = int(stdin.split()[-1]), int(stdin.split()[-2])\n    ans = 0\n    for i in range(n):\n        if a[i] <= x:\n            ans += a[i]\n        else:\n            ans += x\n    ans += f\n    return str(ans)"
    },
    {
        "number": 2335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    colors = []\n    for i in range(n):\n        p, c = stdin.split()\n        points.append(int(p))\n        colors.append(c)\n    points.sort()\n    colors.sort()\n    cost = 0\n    for i in range(n):\n        if colors[i] == 'R':\n            cost += points[i]\n        elif colors[i] == 'G':\n            cost += points[i]\n        else:\n            cost += points[i]\n    return str(cost)"
    },
    {
        "number": 2336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    recipes = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(q):\n        a, b = map(int, stdin.split())\n        if a <= recipes[i] <= b:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 2337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_min = a[0]\n    b_min = b[0]\n    for i in range(1, n):\n        if a[i] < a_min:\n            a_min = a[i]\n    for i in range(1, m):\n        if b[i] < b_min:\n            b_min = b[i]\n    if a_min < b_min:\n        return a_min\n    else:\n        return b_min\n\ndef"
    },
    {
        "number": 2338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bombs = []\n    for i in range(n):\n        x, y = map(int, stdin.split()[i * 2 + 1].split(','))\n        bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 1].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 2].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 3].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 4].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 5].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 6].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 7].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 8].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 9].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 10].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 11].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 12].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 13].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 14].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 15].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 16].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 17].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 18].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 19].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 20].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 21].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 22].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 23].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 24].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 25].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 26].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 27].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 28].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 29].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 30].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 31].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 32].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 33].split(','))\n    bombs.append((x, y))\n    x, y = map(int, stdin.split()[n * 2 + 34].split(','))\n    bombs.append((x,"
    },
    {
        "number": 2339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                b[i] = a[j]\n                break\n    return''.join(map(str, b))"
    },
    {
        "number": 2340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        h, n = map(int, stdin.split())\n        p = list(map(int, stdin.split()))\n        p.sort()\n        print(min(2 * h - p[-1] - p[-2], p[-1]))\n    return \"\"\n"
    },
    {
        "number": 2341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scraps = [stdin[i * m: (i + 1) * m] for i in range(n)]\n    return str(len(set(scraps)))\n"
    },
    {
        "number": 2342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in stdin[i * m: (i + 1) * m]] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'G':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'G'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '"
    },
    {
        "number": 2343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        if n == 1 and k == 1:\n            print(\"YES 0\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 2344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    burles = []\n    for i in range(n):\n        a, b, k = map(int, stdin.split())\n        burles.append((a, b, k))\n    burles.sort(key=lambda x: x[0])\n    burles.sort(key=lambda x: x[1], reverse=True)\n    burles.sort(key=lambda x: x[2], reverse=True)\n    print(burles)\n    return burles[0][0]\n"
    },
    {
        "number": 2345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s == 0:\n            return str(i + 1)\n        if s < 0:\n            s = 0\n    return str(s)\n"
    },
    {
        "number": 2346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n)]\n    for i in range(n):\n        p, c = map(int, stdin.split())\n        tree[p - 1].append(i)\n        tree[i].append(p)\n    return''.join(map(str, sorted(tree, key=lambda x: x[0])))"
    },
    {
        "number": 2347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        p = stdin.split()[1]\n        h = stdin.split()[2]\n        if is_password_valid(p, h):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 2348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"0 1\"\n    if n == 3:\n        return \"0 1 2\"\n    if n == 4:\n        return \"0 1 2 3\"\n    if n == 5:\n        return \"0 1 2 3 4\"\n    if n == 6:\n        return \"0 1 2 3 4 5\"\n    if n == 7:\n        return \"0 1 2 3 4 5 6\"\n    if n == 8:\n        return \"0 1 2 3 4 5 6 7\"\n    if n == 9:\n        return \"0 1 2 3 4 5 6 7 8\"\n    if n == 10:\n        return \"0 1 2 3 4 5 6 7 8 9\"\n    if n == 11:\n        return \"0 1 2 3 4 5 6 7 8 9 10\"\n    if n == 12:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 13:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 14:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 15:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 16:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 17:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 18:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 19:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 20:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 21:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 22:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 23:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 24:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 25:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 26:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 27:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 28:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 29:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 30:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 31:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 32:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 33:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 34:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 35:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 36:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 37:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 38:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 39:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 40:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 41:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 42:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if n == 43:\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37"
    },
    {
        "number": 2350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        if x1 == 1 and y1 == 1:\n            print(1)\n        else:\n            print(2)\n    return \"\""
    },
    {
        "number": 2351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, len = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len):\n        if arr[i] == -1:\n            for j in range(i, len):\n                if arr[j] == -1:\n                    arr[i] = arr[j] = 1\n                    count += 1\n                    break\n    return count % 998244353"
    },
    {
        "number": 2352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sheet = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            sheet[i][j] = stdin[i * m + j]\n    return 'YES' if is_possible(sheet) else 'NO'\n\n\ndef"
    },
    {
        "number": 2353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c, d = map(int, stdin.split())\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if a > d:\n            a, d = d, a\n        if b > c:\n            b, c = c, b\n        if b > d:\n            b, d = d, b\n        if a + b + c + d > 10**9:\n            print(-1)\n        else:\n            print(a + b + c + d)\n    return \"\"\n"
    },
    {
        "number": 2354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    board = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = i + j\n    for _ in range(q):\n        x, y = map(int, stdin.split())\n        print(board[x - 1][y - 1])\n    return ''"
    },
    {
        "number": 2355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1) +'' + str(2)\n    if n == 3:\n        return str(1) +'' + str(2) +'' + str(3)\n    if n == 4:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4)\n    if n == 5:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5)\n    if n == 6:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6)\n    if n == 7:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7)\n    if n == 8:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8)\n    if n == 9:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9)\n    if n == 10:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10)\n    if n == 11:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11)\n    if n == 12:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12)\n    if n == 13:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13)\n    if n == 14:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14)\n    if n == 15:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14) +'' + str(15)\n    if n == 16:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14) +'' + str(15) +'' + str(16)\n    if n == 17:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14) +'' + str(15) +'' + str(16) +'' + str(17)\n    if n == 18:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' + str(12) +'' + str(13) +'' + str(14) +'' + str(15) +'' + str(16) +'' + str(17) +'' + str(18)\n    if n == 19:\n        return str(1) +'' + str(2) +'' + str(3) +'' + str(4) +'' + str(5) +'' + str(6) +'' + str(7) +'' + str(8) +'' + str(9) +'' + str(10) +'' + str(11) +'' +"
    },
    {
        "number": 2356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        a.sort()\n        a.reverse()\n        print(' '.join(map(str, a)))\n    return ''"
    },
    {
        "number": 2357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if n == 1:\n        return -1\n    if n == 2:\n        if a[0] == a[1]:\n            return -1\n        else:\n            return a[0]\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return -1\n        else:\n            return a[0]\n    if n == 4:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return -1\n        else:\n            return a[0]\n    if n == 5:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return -1\n        else:\n            return a[0]\n    if n == 6:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n            return -1\n        else:\n            return a[0]\n    if n == 7:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6]:\n            return -1\n        else:\n            return a[0]\n    if n == 8:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7]:\n            return -1\n        else:\n            return a[0]\n    if n == 9:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8]:\n            return -1\n        else:\n            return a[0]\n    if n == 10:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9]:\n            return -1\n        else:\n            return a[0]\n    if n == 11:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10]:\n            return -1\n        else:\n            return a[0]\n    if n == 12:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11]:\n            return -1\n        else:\n            return a[0]\n    if n == 13:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12]:\n            return -1\n        else:\n            return a[0]\n    if n == 14:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13]:\n            return -1\n        else:\n            return a[0]\n    if n == 15:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5"
    },
    {
        "number": 2358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 2 == 0:\n        return '0'\n    else:\n        return '1'\n\ndef"
    },
    {
        "number": 2359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        h, c, t = map(int, stdin.split())\n        if h < t:\n            print(h)\n        elif h > t:\n            print(c)\n        else:\n            print(h)\n    return \"\"\n"
    },
    {
        "number": 2360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[i])\n        l = list(map(int, stdin.split()[i+1].split()))\n        r = list(map(int, stdin.split()[i+2].split()))\n        l.sort()\n        r.sort()\n        res = []\n        for i in range(n):\n            if l[i] - 1 > r[i]:\n                res.append(0)\n            else:\n                res.append(l[i] - 1)\n        print(*res)\n    return ''"
    },
    {
        "number": 2361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(max(n - m, 0) + max(m, 0) - max(n - k, 0) + max(k, 0))"
    },
    {
        "number": 2362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) > 1:\n                res = max(res, dist(i, j))\n    return str(res)\n\n\ndef"
    },
    {
        "number": 2363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            ans += a[i] - b[i]\n        elif a[i] > b[i]:\n            ans += b[i] - a[i]\n        else:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 2364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = a[i - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return str(dp[n][n] % 1000000007)\n"
    },
    {
        "number": 2365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 2366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        dp[i][i] = 1\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            for k in range(i, j):\n                dp[i][j] += dp[i][k] * dp[k + 1][j]\n    return str(dp[1][N])"
    },
    {
        "number": 2367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, A, B = map(int, stdin.split())\n    dp = [[0] * (W + 1) for _ in range(H + 1)]\n    dp[0][0] = 1\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if i == 1 and j == 1:\n                continue\n            if i == 1:\n                dp[i][j] = dp[i][j - 1]\n            elif j == 1:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return str(dp[H][W])"
    },
    {
        "number": 2368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    for i in range(M):\n        if a[i] == b[i]:\n            a[i] += 1\n            b[i] -= 1\n        else:\n            a[i] += 1\n            b[i] -= 1\n    for i in range(M):\n        if a[i] == c[i]:\n            a[i] += 1\n            c[i] -= 1\n        else:\n            a[i] += 1\n            c[i] -= 1\n    for i in range(M):\n        if a[i] == d[i]:\n            a[i] += 1\n            d[i] -= 1\n        else:\n            a[i] += 1\n            d[i] -= 1\n    if a == b and c == d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    return str(sum(max(A) - min(A) - i for i in range(1, N + 1)))"
    },
    {
        "number": 2370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0]!= 0:\n        return -1\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        dp[i][i + 1] = a[i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 2371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Z, W = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    return str(abs(Z - W) - a[0])"
    },
    {
        "number": 2372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    C_h, C_w = map(int, stdin.split())\n    D_h, D_w = map(int, stdin.split())\n    S = stdin.split()\n    moves = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i * W + j] == '#':\n                continue\n            if (i, j) == (C_h, C_w):\n                moves += 1\n                continue\n            if (i, j) == (D_h, D_w):\n                return -1\n            if (i, j) == (C_h - 1, C_w - 1) or (i, j) == (C_h + 1, C_w + 1):\n                moves += 1\n                continue\n            if (i, j) == (D_h - 1, D_w - 1) or (i, j) == (D_h + 1, D_w + 1):\n                moves += 1\n                continue\n            if (i, j) == (C_h - 1, C_w) or (i, j) == (C_h, C_w - 1):\n                moves += 1\n                continue\n            if (i, j) == (D_h - 1, D_w) or (i, j) == (D_h, D_w - 1):\n                moves += 1\n                continue\n            if (i, j) == (C_h, C_w - 1) or (i, j) == (C_h - 1, C_w):\n                moves += 1\n                continue\n            if (i, j) == (D_h, D_w - 1) or (i, j) == (D_h - 1, D_w):\n                moves += 1\n                continue\n    return str(moves)"
    },
    {
        "number": 2373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    count = 0\n    while p!= sorted(p):\n        p.sort()\n        count += 1\n        for i in range(len(p) - 1):\n            if p[i] > p[i + 1]:\n                p[i], p[i + 1] = p[i + 1], p[i]\n                break\n    return str(count)"
    },
    {
        "number": 2374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append([a[i], b[i]])\n    c.sort()\n    c = set(c)\n    if len(c) == n:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 2375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        return \"Alice\"\n    elif x < y:\n        return \"Bob\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 2376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W = map(int, stdin.split())\n    items = []\n    for i in range(N):\n        items.append(list(map(int, stdin.split())))\n    items.sort(key=lambda x: x[1], reverse=True)\n    total_value = 0\n    for i in range(N):\n        if total_value + items[i][0] <= W:\n            total_value += items[i][0] * items[i][1]\n    return str(total_value)"
    },
    {
        "number": 2377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    katanas = list(map(int, stdin.split()))\n    katanas.sort()\n    katanas.reverse()\n    ans = 0\n    for i in range(len(katanas)):\n        if H <= katanas[i]:\n            ans += 1\n            H -= katanas[i]\n        else:\n            break\n    return str(ans)"
    },
    {
        "number": 2378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, stdin.split())))\n    return str(expected_holeyness(graph))\n\n\ndef"
    },
    {
        "number": 2379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, C = map(int, stdin.split())\n    S = stdin.strip()\n    days = []\n    for i in range(N):\n        if S[i] == 'o':\n            days.append(i + 1)\n    days.sort()\n    for i in range(len(days)):\n        if days[i] <= K:\n            days[i] = 'x'\n        else:\n            days[i] = 'o'\n    return ''.join(days)"
    },
    {
        "number": 2380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(M):\n        max_sum = max(max_sum, max(cards) - min(cards))\n        cards = sorted(cards, reverse=True)\n        cards = cards[:N - 1]\n    return str(max_sum)"
    },
    {
        "number": 2381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    max_product = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_product = max(max_product, A[i] * A[j])\n    return str(max_product % (10 ** 9 + 7))"
    },
    {
        "number": 2382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(map(int, stdin.split()))\n    if N == 1:\n        if S[0] == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if S[0] == 1:\n            S[0] = 2\n            S[1] = 1\n            S[2] = 1\n            S[3] = 1\n            S[4] = 1\n            S[5] = 1\n            S[6] = 1\n            S[7] = 1\n            S[8] = 1\n            S[9] = 1\n            S[10] = 1\n            S[11] = 1\n            S[12] = 1\n            S[13] = 1\n            S[14] = 1\n            S[15] = 1\n            S[16] = 1\n            S[17] = 1\n            S[18] = 1\n            S[19] = 1\n            S[20] = 1\n            S[21] = 1\n            S[22] = 1\n            S[23] = 1\n            S[24] = 1\n            S[25] = 1\n            S[26] = 1\n            S[27] = 1\n            S[28] = 1\n            S[29] = 1\n            S[30] = 1\n            S[31] = 1\n            S[32] = 1\n            S[33] = 1\n            S[34] = 1\n            S[35] = 1\n            S[36] = 1\n            S[37] = 1\n            S[38] = 1\n            S[39] = 1\n            S[40] = 1\n            S[41] = 1\n            S[42] = 1\n            S[43] = 1\n            S[44] = 1\n            S[45] = 1\n            S[46] = 1\n            S[47] = 1\n            S[48] = 1\n            S[49] = 1\n            S[50] = 1\n            S[51] = 1\n            S[52] = 1\n            S[53] = 1\n            S[54] = 1\n            S[55] = 1\n            S[56] = 1\n            S[57] = 1\n            S[58] = 1\n            S[59] = 1\n            S[60] = 1\n            S[61] = 1\n            S[62] = 1\n            S[63] = 1\n            S[64] = 1\n            S[65] = 1\n            S[66] = 1\n            S[67] = 1\n            S[68] = 1\n            S[69] = 1\n            S[70] = 1\n            S[71] = 1\n            S[72] = 1\n            S[73] = 1\n            S[74] = 1\n            S[75] = 1\n            S[76] = 1\n            S[77] = 1\n            S[78] = 1\n            S[79] = 1\n            S[80] = 1\n            S[81] = 1\n            S[82] = 1\n            S[83] = 1\n            S[84] = 1\n            S[85] = 1\n            S[86] = 1\n            S[87] = 1\n            S[88] = 1\n            S[89] = 1\n            S[90] = 1\n            S[91] = 1\n            S[92] = 1\n            S[93] = 1\n            S[94] = 1\n            S[95] = 1\n            S[96] = 1\n            S[97] = 1\n            S[98] = 1\n            S[99] = 1\n            S[100] = 1\n            S[101] = 1\n            S[102] = 1\n            S[103] = 1\n            S[104] = 1\n            S[105] = 1\n            S[106] = 1\n            S[107] = 1\n            S[108] = 1\n            S[109] = 1\n            S[110] = 1\n            S[111] = 1\n            S[112] = 1\n            S[113] = 1\n            S[114] = 1\n            S[115] = 1\n            S[116] = 1\n            S[117] = 1\n            S[118] = 1\n            S[119] = 1\n            S[120] = 1\n            S[121] = 1\n            S[122] = 1\n            S[123] = 1\n            S[124] = 1\n            S[125] = 1\n            S[126] = 1\n            S[127] = 1\n            S[128] = 1\n            S[129] = 1\n            S[130] = 1\n            S[131] = 1\n            S[132] = 1\n            S[133] = 1\n            S[134] = 1\n            S[135] = 1\n            S[136] = 1\n            S[137] = 1\n            S[138] = 1\n            S[139] = 1\n            S[140] = 1\n            S[141] = 1\n            S[142] = 1\n            S[143] = 1\n            S[144] = 1\n            S[145] = 1\n            S[146] = 1\n            S[147] = 1\n            S[148] = 1\n            S[149] = 1\n            S[150] = 1\n            S[151] = 1\n            S[152] = 1\n            S[153] = 1\n            S[154] = 1\n            S[155] = 1\n            S[156] = 1\n            S[157] = 1\n            S[158] = 1\n            S[159] = 1\n            S[160] = 1\n            S[161] = 1\n            S[162] = 1\n            S[163] = 1\n            S[164] = 1\n            S[165] = 1\n            S[166] = 1\n            S[167] = 1\n            S[168] = 1\n            S[169] = 1\n            S[170] = 1\n            S[171] = 1\n            S[172] = 1\n            S[173] = 1\n            S[174] = 1\n            S[175] = 1\n            S[176] = 1\n            S[177] = 1\n            S[178] = 1\n            S[179] = 1\n            S[180] = 1\n            S[181] = 1\n            S[182] = 1\n            S[183] = 1\n            S[184] = 1\n            S[185] = 1\n            S[186] = 1\n            S[187] = 1\n            S[188] = 1\n            S"
    },
    {
        "number": 2383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bricks = list(map(int, stdin.split()))\n    bricks.sort()\n    if bricks[0] == 1:\n        return str(len(bricks) - 1)\n    if bricks[0] == N:\n        return str(-1)\n    for i in range(1, N):\n        if bricks[i]!= bricks[i - 1] + 1:\n            return str(-1)\n    return str(len(bricks) - 1)"
    },
    {
        "number": 2384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    return str(sum(A[:N//2]))"
    },
    {
        "number": 2385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    graph = []\n    for i in range(N):\n        graph.append(list(map(int, stdin.split())))\n    return str(solve(graph))\n\ndef"
    },
    {
        "number": 2386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    b = 0\n    min_sadness = abs(A[0] - (b + 1)) + abs(A[1] - (b + 2)) + abs(A[2] - (b + 3)) + abs(A[3] - (b + 4)) + abs(A[4] - (b + 5))\n    for i in range(1, N):\n        sadness = abs(A[i] - (b + i))\n        if min_sadness > sadness:\n            min_sadness = sadness\n    return str(min_sadness)"
    },
    {
        "number": 2387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"No\"\n    if N == 1:\n        return \"Yes\"\n    if N == 2:\n        return \"Yes\"\n    if N == 3:\n        return \"Yes\"\n    if N == 4:\n        return \"Yes\"\n    if N == 5:\n        return \"Yes\"\n    if N == 6:\n        return \"Yes\"\n    if N == 7:\n        return \"Yes\"\n    if N == 8:\n        return \"Yes\"\n    if N == 9:\n        return \"Yes\"\n    if N == 10:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 2388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"3\"\n    if n == 3:\n        return \"6\"\n    if n == 4:\n        return \"10\"\n    if n == 5:\n        return \"15\"\n    if n == 6:\n        return \"21\"\n    if n == 7:\n        return \"28\"\n    if n == 8:\n        return \"36\"\n    if n == 9:\n        return \"45\"\n    if n == 10:\n        return \"55\"\n    if n == 11:\n        return \"66\"\n    if n == 12:\n        return \"77\"\n    if n == 13:\n        return \"88\"\n    if n == 14:\n        return \"99\"\n    if n == 15:\n        return \"105\"\n    if n == 16:\n        return \"116\"\n    if n == 17:\n        return \"127\"\n    if n == 18:\n        return \"138\"\n    if n == 19:\n        return \"149\"\n    if n == 20:\n        return \"160\"\n    if n == 21:\n        return \"171\"\n    if n == 22:\n        return \"182\"\n    if n == 23:\n        return \"193\"\n    if n == 24:\n        return \"204\"\n    if n == 25:\n        return \"215\"\n    if n == 26:\n        return \"226\"\n    if n == 27:\n        return \"237\"\n    if n == 28:\n        return \"248\"\n    if n == 29:\n        return \"259\"\n    if n == 30:\n        return \"270\"\n    if n == 31:\n        return \"281\"\n    if n == 32:\n        return \"292\"\n    if n == 33:\n        return \"293\"\n    if n == 34:\n        return \"294\"\n    if n == 35:\n        return \"295\"\n    if n == 36:\n        return \"296\"\n    if n == 37:\n        return \"297\"\n    if n == 38:\n        return \"298\"\n    if n == 39:\n        return \"299\"\n    if n == 40:\n        return \"300\"\n    if n == 41:\n        return \"301\"\n    if n == 42:\n        return \"302\"\n    if n == 43:\n        return \"303\"\n    if n == 44:\n        return \"304\"\n    if n == 45:\n        return \"305\"\n    if n == 46:\n        return \"306\"\n    if n == 47:\n        return \"307\"\n    if n == 48:\n        return \"308\"\n    if n == 49:\n        return \"309\"\n    if n == 50:\n        return \"310\"\n    if n == 51:\n        return \"311\"\n    if n == 52:\n        return \"312\"\n    if n == 53:\n        return \"313\"\n    if n == 54:\n        return \"314\"\n    if n == 55:\n        return \"315\"\n    if n == 56:\n        return \"316\"\n    if n == 57:\n        return \"317\"\n    if n == 58:\n        return \"318\"\n    if n == 59:\n        return \"319\"\n    if n == 60:\n        return \"320\"\n    if n == 61:\n        return \"321\"\n    if n == 62:\n        return \"322\"\n    if n == 63:\n        return \"323\"\n    if n == 64:\n        return \"324\"\n    if n == 65:\n        return \"325\"\n    if n == 66:\n        return \"326\"\n    if n == 67:\n        return \"327\"\n    if n == 68:\n        return \"328\"\n    if n == 69:\n        return \"329\"\n    if n == 70:\n        return \"330\"\n    if n == 71:\n        return \"331\"\n    if n == 72:\n        return \"332\"\n    if n == 73:\n        return \"333\"\n    if n == 74:\n        return \"334\"\n    if n == 75:\n        return \"335\"\n    if n == 76:\n        return \"336\"\n    if n == 77:\n        return \"337\"\n    if n == 78:\n        return \"338\"\n    if n == 79:\n        return \"339\"\n    if n == 80:\n        return \"340\"\n    if n == 81:\n        return \"341\"\n    if n == 82:\n        return \"342\"\n    if n == 83:\n        return \"343\"\n    if n == 84:\n        return \"344\"\n    if n == 85:\n        return \"345\"\n    if n == 86:\n        return \"346\"\n    if n == 87:\n        return \"347\"\n    if n == 88:\n        return \"348\"\n    if n == 89:\n        return \"349\"\n    if n == 90:\n        return \"350\"\n    if n == 91:\n        return \"351\"\n    if n == 92:\n        return \"352\"\n    if n == 93:\n        return \"353\"\n    if n == 94:\n        return \"354\"\n    if n == 95:\n        return \"355\"\n    if n == 96:\n        return \"356\"\n    if n == 97:\n        return \"357\"\n    if n == 98:\n        return \"358\"\n    if n == 99:\n        return \"359\"\n    if n == 100:\n        return \"360\"\n    if n == 101:\n        return \"361\"\n    if n == 102:\n        return \"362\"\n    if n == 103:\n        return \"363\"\n    if n == 104:\n        return \"364\"\n    if n == 105:\n        return \"365\"\n    if n == 106:\n        return \"366\"\n    if n == 107:\n        return \"367\"\n    if n == 108:\n        return \"368\"\n    if n == 109:\n        return \"369\"\n    if n == 110:\n        return \"370\"\n    if n == 111:\n        return \"371\"\n    if n == 112:\n        return \"372\"\n    if n == 113:\n        return \"373\"\n    if n == 114:\n        return \"374\"\n    if n == 115:\n        return \"375\"\n    if n == 116:\n        "
    },
    {
        "number": 2389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n == 1:\n        return \"Yes\" if a + b + c == 0 else \"No\"\n    else:\n        for i in range(n):\n            if stdin[i] == \"AB\":\n                a += 1\n                b -= 1\n            elif stdin[i] == \"AC\":\n                a += 1\n                c -= 1\n            elif stdin[i] == \"BC\":\n                b += 1\n                c -= 1\n        return \"Yes\" if a + b + c == 0 else \"No\"\n"
    },
    {
        "number": 2390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    x.sort()\n    v.sort()\n    c = 0\n    for i in range(N):\n        c += x[i] * v[i]\n    return str(c - C)"
    },
    {
        "number": 2391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    res = []\n    for i in range(N):\n        for j in range(i+1, N):\n            if a[i] ^ a[j] == b[i] ^ b[j]:\n                res.append((i, j))\n    res.sort()\n    for i in res:\n        print(i[0], i[1])\n    return \"\""
    },
    {
        "number": 2392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if i == 1:\n            if N % i == 0:\n                count += 1\n        else:\n            if N % i == 0:\n                count += 1\n                for j in range(2, i):\n                    if i % j == 0:\n                        break\n                else:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 2393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        s = stdin.split()[i]\n        print(solution_helper(s))\n    return \"\"\n\ndef"
    },
    {
        "number": 2394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i < j:\n                res += 1\n                for k in graph[i]:\n                    if k in graph[j]:\n                        res -= 1\n                        break\n    return str(res)\n"
    },
    {
        "number": 2395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        s = stdin.strip()\n        if s == s[::-1]:\n            return s\n        for i in range(1, len(s)):\n            if s[:i] == s[i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len(s)):\n            if s[:i] == s[len(s)-i:][::-1]:\n                return s[:i]\n        for i in range(1, len(s)):\n            if s[i:] == s[:len(s)-i][::-1]:\n                return s[i:]\n        for i in range(1, len("
    },
    {
        "number": 2396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(1, k + 1):\n        ans += a[i - 1] * i\n    return str(ans)"
    },
    {
        "number": 2398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c, d = map(int, stdin.split())\n        x1, y1, x2, y2 = map(int, stdin.split())\n        if (x1 <= a <= x2) and (y1 <= b <= y2) and (x1 <= c <= x2) and (y1 <= d <= y2):\n            if (a + b + c + d) == 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 2399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        a, b = map(int, stdin.split())\n        s = stdin.split()[1]\n        if a > b:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\"\n"
    },
    {
        "number": 2400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(N - 1):\n        if nums[i] == nums[i + 1]:\n            return str(nums[i])\n    return str(nums[-1])\n"
    },
    {
        "number": 2402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x, y = map(int, stdin.split())\n        if x > y:\n            x, y = y, x\n        print(x + y)\n    return"
    },
    {
        "number": 2403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    ans = 0\n    p = []\n    for i in range(n):\n        if b[i] == -1:\n            p.append(i)\n    for i in range(n):\n        if b[i] == -1:\n            ans += a[i]\n            for j in range(n):\n                if j in p:\n                    ans += a[j]\n    return str(ans)\n"
    },
    {
        "number": 2404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 4 or a > 998:\n        return 'Invalid'\n    if a % 2 == 0:\n        return 'Invalid'\n    if a % 3 == 0:\n        return 'Invalid'\n    if a % 5 == 0:\n        return 'Invalid'\n    if a % 7 == 0:\n        return 'Invalid'\n    if a % 11 == 0:\n        return 'Invalid'\n    if a % 13 == 0:\n        return 'Invalid'\n    if a % 17 == 0:\n        return 'Invalid'\n    if a % 19 == 0:\n        return 'Invalid'\n    if a % 23 == 0:\n        return 'Invalid'\n    if a % 29 == 0:\n        return 'Invalid'\n    if a % 31 == 0:\n        return 'Invalid'\n    if a % 37 == 0:\n        return 'Invalid'\n    if a % 41 == 0:\n        return 'Invalid'\n    if a % 43 == 0:\n        return 'Invalid'\n    if a % 47 == 0:\n        return 'Invalid'\n    if a % 53 == 0:\n        return 'Invalid'\n    if a % 59 == 0:\n        return 'Invalid'\n    if a % 61 == 0:\n        return 'Invalid'\n    if a % 67 == 0:\n        return 'Invalid'\n    if a % 71 == 0:\n        return 'Invalid'\n    if a % 73 == 0:\n        return 'Invalid'\n    if a % 79 == 0:\n        return 'Invalid'\n    if a % 83 == 0:\n        return 'Invalid'\n    if a % 89 == 0:\n        return 'Invalid'\n    if a % 97 == 0:\n        return 'Invalid'\n    if a % 101 == 0:\n        return 'Invalid'\n    if a % 103 == 0:\n        return 'Invalid'\n    if a % 107 == 0:\n        return 'Invalid'\n    if a % 109 == 0:\n        return 'Invalid'\n    if a % 113 == 0:\n        return 'Invalid'\n    if a % 127 == 0:\n        return 'Invalid'\n    if a % 131 == 0:\n        return 'Invalid'\n    if a % 137 == 0:\n        return 'Invalid'\n    if a % 139 == 0:\n        return 'Invalid'\n    if a % 149 == 0:\n        return 'Invalid'\n    if a % 151 == 0:\n        return 'Invalid'\n    if a % 157 == 0:\n        return 'Invalid'\n    if a % 163 == 0:\n        return 'Invalid'\n    if a % 167 == 0:\n        return 'Invalid'\n    if a % 173 == 0:\n        return 'Invalid'\n    if a % 179 == 0:\n        return 'Invalid'\n    if a % 181 == 0:\n        return 'Invalid'\n    if a % 191 == 0:\n        return 'Invalid'\n    if a % 193 == 0:\n        return 'Invalid'\n    if a % 197 == 0:\n        return 'Invalid'\n    if a % 199 == 0:\n        return 'Invalid'\n    if a % 211 == 0:\n        return 'Invalid'\n    if a % 223 == 0:\n        return 'Invalid'\n    if a % 227 == 0:\n        return 'Invalid'\n    if a % 229 == 0:\n        return 'Invalid'\n    if a % 233 == 0:\n        return 'Invalid'\n    if a % 239 == 0:\n        return 'Invalid'\n    if a % 241 == 0:\n        return 'Invalid'\n    if a % 251 == 0:\n        return 'Invalid'\n    if a % 257 == 0:\n        return 'Invalid'\n    if a % 263 == 0:\n        return 'Invalid'\n    if a % 269 == 0:\n        return 'Invalid'\n    if a % 271 == 0:\n        return 'Invalid'\n    if a % 277 == 0:\n        return 'Invalid'\n    if a % 281 == 0:\n        return 'Invalid'\n    if a % 283 == 0:\n        return 'Invalid'\n    if a % 293 == 0:\n        return 'Invalid'\n    if a % 307 == 0:\n        return 'Invalid'\n    if a % 311 == 0:\n        return 'Invalid'\n    if a % 313 == 0:\n        return 'Invalid'\n    if a % 317 == 0:\n        return 'Invalid'\n    if a % 331 == 0:\n        return 'Invalid'\n    if a % 337 == 0:\n        return 'Invalid'\n    if a % 347 == 0:\n        return 'Invalid'\n    if a % 349 == 0:\n        return 'Invalid'\n    if a % 353 == 0:\n        return 'Invalid'\n    if a % 359 == 0:\n        return 'Invalid'\n    if a % 367 == 0:\n        return 'Invalid'\n    if a % 373 == 0:\n        return 'Invalid'\n    if a % 379 == 0:\n        return 'Invalid'\n    if a % 383 == 0:\n        return 'Invalid'\n    if a % 389 == 0:\n        return 'Invalid'\n    if a % 397 == 0:\n        return 'Invalid'\n    if a % 401 == 0:\n        return 'Invalid'\n    if a % 409 == 0:\n        return 'Invalid'\n    if a % 419 == 0:\n        return 'Invalid'\n    if a % 421 == 0:\n        return 'Invalid'\n    if a % 431 == 0:\n        return 'Invalid'\n    if a % 433 == 0:\n        return 'Invalid'\n    if a % 439 == 0:\n        return 'Invalid'\n    if a % 441 == 0:\n        return 'Invalid'\n    if a % 443 == 0:\n        return 'Invalid'\n    if a % 449 == 0:\n        return 'Invalid'\n    if a % 457 == 0:\n        return 'Invalid'\n    if a % 461 == 0:\n        return 'Invalid'\n    if a % 463 == 0:\n        return 'Invalid'\n    if a % 467 == 0:\n        return 'Invalid'\n    if a % 469 == 0:\n        return 'Invalid'\n    if a % 471 == 0:\n        return 'Invalid'\n    if a % 473 == 0:\n        return 'Invalid'\n    if a % 479 == 0:\n        return 'Invalid'\n    if a % 481 == 0:\n        return 'Invalid'\n    if a % 483 == 0:\n        return 'Invalid'\n    if a % 487 == 0:\n        return 'Invalid'\n    if a % 491 == 0:\n        return 'Invalid'\n    if a % 499 == 0:\n        return 'Invalid'\n    if a % 503 == 0:\n        return 'Invalid'\n    if a % 509 == 0:\n        return 'Invalid'\n    if a % 511 == 0:\n        return 'Invalid'\n    if a % 513 == 0:\n        return 'Invalid'\n    if a % 517 == 0:\n        return 'Invalid'\n    if a % 519 == 0:\n        return 'Invalid'\n    if a % 523 == 0:\n        return 'Invalid'\n    if a % 527 == 0:\n        return 'Invalid'\n    if a % 531 == 0:\n        return 'Invalid'\n    if a % 533 == 0:\n        return 'Invalid'\n    if a % 537 == 0:\n        return 'Invalid'\n    if a % 539 == 0:\n        return 'Invalid'\n    if a % 543 == 0:\n        return 'Invalid'\n    if a % 547 == 0:\n        return 'Invalid'\n    if a % 553 == 0:\n        return 'Invalid'\n    if a % 557 == 0:\n        return 'Invalid'\n    if a % 563 == 0:\n        return 'Invalid'\n    if a % 569 == 0:\n        return 'Invalid'\n    if a"
    },
    {
        "number": 2405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b, q = map(int, stdin.split())\n    orders = []\n    for i in range(q):\n        orders.append(list(map(int, stdin.split())))\n    # print(orders)\n    # print(n, k, a, b, q)\n    # print(orders)\n    # print(orders[0])\n    # print(orders[1])\n    # print(orders[2])\n    # print(orders[3])\n    # print(orders[4])\n    # print(orders[5])\n    # print(orders[6])\n    # print(orders[7])\n    # print(orders[8])\n    # print(orders[9])\n    # print(orders[10])\n    # print(orders[11])\n    # print(orders[12])\n    # print(orders[13])\n    # print(orders[14])\n    # print(orders[15])\n    # print(orders[16])\n    # print(orders[17])\n    # print(orders[18])\n    # print(orders[19])\n    # print(orders[20])\n    # print(orders[21])\n    # print(orders[22])\n    # print(orders[23])\n    # print(orders[24])\n    # print(orders[25])\n    # print(orders[26])\n    # print(orders[27])\n    # print(orders[28])\n    # print(orders[29])\n    # print(orders[30])\n    # print(orders[31])\n    # print(orders[32])\n    # print(orders[33])\n    # print(orders[34])\n    # print(orders[35])\n    # print(orders[36])\n    # print(orders[37])\n    # print(orders[38])\n    # print(orders[39])\n    # print(orders[40])\n    # print(orders[41])\n    # print(orders[42])\n    # print(orders[43])\n    # print(orders[44])\n    # print(orders[45])\n    # print(orders[46])\n    # print(orders[47])\n    # print(orders[48])\n    # print(orders[49])\n    # print(orders[50])\n    # print(orders[51])\n    # print(orders[52])\n    # print(orders[53])\n    # print(orders[54])\n    # print(orders[55])\n    # print(orders[56])\n    # print(orders[57])\n    # print(orders[58])\n    # print(orders[59])\n    # print(orders[60])\n    # print(orders[61])\n    # print(orders[62])\n    # print(orders[63])\n    # print(orders[64])\n    # print(orders[65])\n    # print(orders[66])\n    # print(orders[67])\n    # print(orders[68])\n    # print(orders[69])\n    # print(orders[70])\n    # print(orders[71])\n    # print(orders[72])\n    # print(orders[73])\n    # print(orders[74])\n    # print(orders[75])\n    # print(orders[76])\n    # print(orders[77])\n    # print(orders[78])\n    # print(orders[79])\n    # print(orders[80])\n    # print(orders[81])\n    # print(orders[82])\n    # print(orders[83])\n    # print(orders[84])\n    # print(orders[85])\n    # print(orders[86])\n    # print(orders[87])\n    # print(orders[88])\n    # print(orders[89])\n    # print(orders[90])\n    # print(orders[91])\n    # print(orders[92])\n    # print(orders[93])\n    # print(orders[94])\n    # print(orders[95])\n    # print(orders[96])\n    # print(orders[97])\n    # print(orders[98])\n    # print(orders[99])\n    # print(orders[100])\n    # print(orders[101])\n    # print(orders[102])\n    # print(orders[103])\n    # print(orders[104])\n    # print(orders[105])\n    # print(orders[106])\n    # print(orders[107])\n    # print(orders[108])\n    # print(orders[109])\n    # print(orders[110])\n    # print(orders[111])\n    # print(orders[112])\n    # print(orders[113])\n    # print(orders[114])\n    # print(orders[115])\n    # print(orders[116])\n    # print(orders[117])\n    # print(orders[118])\n    # print(orders[119])\n    # print(orders[120])\n    # print(orders[121])\n    # print(orders[122])\n    # print(orders[123])\n    # print(orders[124])\n    # print(orders[125])\n    # print(orders[126])\n    # print(orders[127])\n    # print(orders[128])\n    # print(orders[129])\n    # print(orders[130])\n    # print(orders[131])\n    # print(orders[132])\n    # print(orders[133])\n    # print(orders[134])\n    # print(orders[135])\n    # print(orders[136])\n    # print"
    },
    {
        "number": 2406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h.reverse()\n    for i in range(n):\n        if h[i] + 2 <= h[i + 1]:\n            h[i] += 1\n            h[i + 1] -= 1\n    return''.join(map(str, h))\n"
    },
    {
        "number": 2407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    ans = 0\n    for i in range(n):\n        if x[i] < 0:\n            ans += 1\n        else:\n            ans += x[i] - r\n    return str(ans)\n"
    },
    {
        "number": 2408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    return str(count_intersecting_wires(points))\n\ndef"
    },
    {
        "number": 2409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l, p = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    t = 0\n    while True:\n        if t == n:\n            return 'Yes'\n        if t == 0:\n            if d[0] <= l:\n                d[0] += p[0]\n            else:\n                return 'No'\n        else:\n            if d[t] <= l:\n                d[t] += p[t % 2]\n            else:\n                return 'No'\n        t += 1\n"
    },
    {
        "number": 2410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    tastinesses = list(map(int, stdin.split()[1:]))\n    tastinesses.sort()\n    tastinesses.reverse()\n    for i in range(n):\n        if i == 0:\n            if sum(tastinesses[:i + 1]) > sum(tastinesses[i + 1:]):\n                return \"YES\"\n        elif i == n - 1:\n            if sum(tastinesses[:i]) > sum(tastinesses[i + 1:]):\n                return \"YES\"\n        else:\n            if sum(tastinesses[:i]) > sum(tastinesses[i + 1:]):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 2411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    return str(count_intersecting_wires(points))\n\ndef"
    },
    {
        "number": 2412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin.split()[1])\n        s = stdin.split()[2]\n        if len(s) == n:\n            if s[0] == '8' and s[1] == '1' and s[2] == '2':\n                if s[3] == '8' and s[4] == '1' and s[5] == '2':\n                    if s[6] == '8' and s[7] == '1' and s[8] == '2':\n                        if s[9] == '8' and s[10] == '1' and s[11] == '2':\n                            if s[12] == '8' and s[13] == '1' and s[14] == '2':\n                                if s[15] == '8' and s[16] == '1' and s[17] == '2':\n                                    if s[18] == '8' and s[19] == '1' and s[20] == '2':\n                                        if s[21] == '8' and s[22] == '1' and s[23] == '2':\n                                            if s[24] == '8' and s[25] == '1' and s[26] == '2':\n                                                if s[27] == '8' and s[28] == '1' and s[29] == '2':\n                                                    if s[30] == '8' and s[31] == '1' and s[32] == '2':\n                                                        if s[33] == '8' and s[34] == '1' and s[35] == '2':\n                                                            if s[36] == '8' and s[37] == '1' and s[38] == '2':\n                                                                if s[39] == '8' and s[40] == '1' and s[41] == '2':\n                                                                    if s[42] == '8' and s[43] == '1' and s[44] == '2':\n                                                                        if s[45] == '8' and s[46] == '1' and s[47] == '2':\n                                                                            if s[48] == '8' and s[49] == '1' and s[50] == '2':\n                                                                                if s[51] == '8' and s[52] == '1' and s[53] == '2':\n                                                                                    if s[54] == '8' and s[55] == '1' and s[56] == '2':\n                                                                                        if s[57] == '8' and s[58] == '1' and s[59] == '2':\n                                                                                            if s[60] == '8' and s[61] == '1' and s[62] == '2':\n                                                                                                if s[63] == '8' and s[64] == '1' and s[65] == '2':\n                                                                                                    if s[66] == '8' and s[67] == '1' and s[68] == '2':\n                                                                                                        if s[69] == '8' and s[70] == '1' and s[71] == '2':\n                                                                                                            if s[72] == '8' and s[73] == '1' and s[74] == '2':\n                                                                                                                if s[75] == '8' and s[76] == '1' and s[77] == '2':\n                                                                                                                    if s[78] == '8' and s[79] == '1' and s[80] == '2':\n                                                                                                                        if s[81] == '8' and s[82] == '1' and s[83] == '2':\n                                                                                                                            if s[84] == '8' and s[85] == '1' and s[86] == '2':\n                                                                                                                                if s[87] == '8' and s[88] == '1' and s[89] == '2':\n                                                                                                                                    if s[90] == '8' and s[91] == '1' and s[92] == '2':\n                                                                                                                                        if s[93] == '8' and s[94] == '1' and s[95] == '2':\n                                                                                                                                            if s[96] == '8' and s[97] == '1' and s[98] == '2':\n                                                                                                                                                if s[99] == '8' and s[100] == '1' and s[101] == '2':\n                                                                                                                                                    if s[102] == '8' and s[103] == '1' and s[104] == '2':\n                                                                                                                                                       if s[105] == '8' and s[106] == '1' and s[107] == '2':\n                                                                                                                                                         if s[108] == '8' and s[109] == '1' and s[110] == '2':\n                                                                                                                                                            if s[111] == '8' and s[112] == '1' and s[113] == '2':\n                                                                                                                                                            if s[114] == '8' and s[115] == '1' and s[116] == '2':\n                                                                                                                                                            if s[117] == '8' and s[118] == '1' and s[119] == '2':\n                                                                                                                                                            if s[120] == '8' and s[121] == '1' and s[122] == '2':\n                                                                                                                                                            if s[123] == '8' and s[124] == '1' and s[125] == '2':\n                                                                                                                                                            if s[126] == '8' and s[127] == '1' and s[128] == '2':\n                                                                                                                                                            if s[129] == '8' and s[130] == '1' and s[131] == '2':\n                                                                                                                                                            if s[132] == '8' and s[133] == '1' and s[134] == '2':\n                                                                                                                                                            if s[135] == '8' and s[136] == '1' and s[137] == '2':\n                                                                                                                                                            if s[138] == '8' and s[139] == '1' and s[140] == '2':\n                                                                                                                                                            if s[141] == '8' and s[142] == '1' and"
    },
    {
        "number": 2413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rooms = list(map(int, stdin.split()))\n    rooms.sort()\n    max_rooms = 0\n    for i in range(n):\n        if rooms[i] == rooms[i + 1]:\n            continue\n        if rooms[i] == rooms[i + 2]:\n            continue\n        if rooms[i] == rooms[i + 3]:\n            continue\n        if rooms[i] == rooms[i + 4]:\n            continue\n        if rooms[i] == rooms[i + 5]:\n            continue\n        if rooms[i] == rooms[i + 6]:\n            continue\n        if rooms[i] == rooms[i + 7]:\n            continue\n        if rooms[i] == rooms[i + 8]:\n            continue\n        if rooms[i] == rooms[i + 9]:\n            continue\n        if rooms[i] == rooms[i + 10]:\n            continue\n        if rooms[i] == rooms[i + 11]:\n            continue\n        if rooms[i] == rooms[i + 12]:\n            continue\n        if rooms[i] == rooms[i + 13]:\n            continue\n        if rooms[i] == rooms[i + 14]:\n            continue\n        if rooms[i] == rooms[i + 15]:\n            continue\n        if rooms[i] == rooms[i + 16]:\n            continue\n        if rooms[i] == rooms[i + 17]:\n            continue\n        if rooms[i] == rooms[i + 18]:\n            continue\n        if rooms[i] == rooms[i + 19]:\n            continue\n        if rooms[i] == rooms[i + 20]:\n            continue\n        if rooms[i] == rooms[i + 21]:\n            continue\n        if rooms[i] == rooms[i + 22]:\n            continue\n        if rooms[i] == rooms[i + 23]:\n            continue\n        if rooms[i] == rooms[i + 24]:\n            continue\n        if rooms[i] == rooms[i + 25]:\n            continue\n        if rooms[i] == rooms[i + 26]:\n            continue\n        if rooms[i] == rooms[i + 27]:\n            continue\n        if rooms[i] == rooms[i + 28]:\n            continue\n        if rooms[i] == rooms[i + 29]:\n            continue\n        if rooms[i] == rooms[i + 30]:\n            continue\n        if rooms[i] == rooms[i + 31]:\n            continue\n        if rooms[i] == rooms[i + 32]:\n            continue\n        if rooms[i] == rooms[i + 33]:\n            continue\n        if rooms[i] == rooms[i + 34]:\n            continue\n        if rooms[i] == rooms[i + 35]:\n            continue\n        if rooms[i] == rooms[i + 36]:\n            continue\n        if rooms[i] == rooms[i + 37]:\n            continue\n        if rooms[i] == rooms[i + 38]:\n            continue\n        if rooms[i] == rooms[i + 39]:\n            continue\n        if rooms[i] == rooms[i + 40]:\n            continue\n        if rooms[i] == rooms[i + 41]:\n            continue\n        if rooms[i] == rooms[i + 42]:\n            continue\n        if rooms[i] == rooms[i + 43]:\n            continue\n        if rooms[i] == rooms[i + 44]:\n            continue\n        if rooms[i] == rooms[i + 45]:\n            continue\n        if rooms[i] == rooms[i + 46]:\n            continue\n        if rooms[i] == rooms[i + 47]:\n            continue\n        if rooms[i] == rooms[i + 48]:\n            continue\n        if rooms[i] == rooms[i + 49]:\n            continue\n        if rooms[i] == rooms[i + 50]:\n            continue\n        if rooms[i] == rooms[i + 51]:\n            continue\n        if rooms[i] == rooms[i + 52]:\n            continue\n        if rooms[i] == rooms[i + 53]:\n            continue\n        if rooms[i] == rooms[i + 54]:\n            continue\n        if rooms[i] == rooms[i + 55]:\n            continue\n        if rooms[i] == rooms[i + 56]:\n            continue\n        if rooms[i] == rooms[i + 57]:\n            continue\n        if rooms[i] == rooms[i"
    },
    {
        "number": 2414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, map(int, stdin.split())))"
    },
    {
        "number": 2415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.isupper() else \"NO\""
    },
    {
        "number": 2416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13] and a[13] == a[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10]"
    },
    {
        "number": 2417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    c = []\n    for i in range(n):\n        b.append(a[i])\n        c.append(a[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[i] + c[j] < b[j] + c[i]:\n                b[i] += c[j]\n                b[j] = b[i]\n            elif b[i] + c[j] > b[j] + c[i]:\n                c[i] += b[j]\n                c[j] = c[i]\n    return str(max(b) + max(c))"
    },
    {
        "number": 2419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n    else:\n        return 1 + min(a, b)"
    },
    {
        "number": 2420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    points = sorted(list(map(int, stdin.split())))\n    points.append(points[0])\n    points.append(points[-1])\n    points.sort()\n    points.pop(0)\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n    points.sort()\n    points.pop()\n"
    },
    {
        "number": 2421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        c = list(map(int, stdin.split()))\n        cost = 0\n        for i in range(6):\n            cost += c[i] * (x - i)\n            cost += c[i] * (y - i)\n        print(cost)\n    return \"\""
    },
    {
        "number": 2422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        if n % 3 == 0:\n            print(n // 3, n // 5, n // 7)\n        else:\n            print(-1)\n    return \"\"\n"
    },
    {
        "number": 2423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for line in stdin.splitlines():\n        u, v = map(int, line.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    return len(set(graph.keys()).difference(set(graph[1])))\n"
    },
    {
        "number": 2424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    items = stdin.split()[1:]\n    items = [(int(i[0]), int(i[1])) for i in items]\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items = sorted(items, key=lambda x: x[1])\n    items = sorted(items, key=lambda x: x[0])\n    items"
    },
    {
        "number": 2425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        a = int(stdin)\n        b = 1\n        while a > 0:\n            if a % b == 0:\n                a = a // b\n            else:\n                b += 1\n        print(b)\n    return \"\"\n"
    },
    {
        "number": 2426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2 == 0:\n        return '1'\n    else:\n        return '-1'\n"
    },
    {
        "number": 2427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] == sum(a[i+1:j]):\n                c += 1\n    return str(c)"
    },
    {
        "number": 2428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        s = stdin.split()\n        s = s[1]\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\\n\", \"\")\n        s = s.replace(\""
    },
    {
        "number": 2429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        a = 0\n        b = 0\n        for j in range(1, n+1):\n            if j % 2 == 0:\n                a += 2**j\n            else:\n                b += 2**j\n        print(abs(a-b))\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 2430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert(0, 0)\n    h.append(0)\n    h.insert("
    },
    {
        "number": 2431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, z = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    def attack(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[0] - x\n        elif attack_type == 'infantry':\n            return castle[0] - y\n        elif attack_type == 'cavalry':\n            return castle[0] - z\n        else:\n            return 0\n    \n    def attack_castle(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[1] - x\n        elif attack_type == 'infantry':\n            return castle[1] - y\n        elif attack_type == 'cavalry':\n            return castle[1] - z\n        else:\n            return 0\n    \n    def attack_castle_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[2] - x\n        elif attack_type == 'infantry':\n            return castle[2] - y\n        elif attack_type == 'cavalry':\n            return castle[2] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[3] - x\n        elif attack_type == 'infantry':\n            return castle[3] - y\n        elif attack_type == 'cavalry':\n            return castle[3] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[4] - x\n        elif attack_type == 'infantry':\n            return castle[4] - y\n        elif attack_type == 'cavalry':\n            return castle[4] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[5] - x\n        elif attack_type == 'infantry':\n            return castle[5] - y\n        elif attack_type == 'cavalry':\n            return castle[5] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[6] - x\n        elif attack_type == 'infantry':\n            return castle[6] - y\n        elif attack_type == 'cavalry':\n            return castle[6] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[7] - x\n        elif attack_type == 'infantry':\n            return castle[7] - y\n        elif attack_type == 'cavalry':\n            return castle[7] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[8] - x\n        elif attack_type == 'infantry':\n            return castle[8] - y\n        elif attack_type == 'cavalry':\n            return castle[8] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[9] - x\n        elif attack_type == 'infantry':\n            return castle[9] - y\n        elif attack_type == 'cavalry':\n            return castle[9] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[10] - x\n        elif attack_type == 'infantry':\n            return castle[10] - y\n        elif attack_type == 'cavalry':\n            return castle[10] - z\n        else:\n            return 0\n    \n    def attack_castle_type_type_type_type_type_type_type_type(castle, attack_type):\n        if attack_type =='mixed':\n            return castle[11] - x\n        elif attack_type == 'infantry':\n            return castle[11] - y\n        elif attack_type == 'cavalry':\n            return castle[11] - z\n        else:\n            return 0\n    \n    def attack_"
    },
    {
        "number": 2432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a)"
    },
    {
        "number": 2433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        b, p, f = map(int, stdin.split())\n        if b == p == f:\n            print(0)\n        elif b == p:\n            print(b * p)\n        elif f == p:\n            print(b * p)\n        else:\n            print(max(b * p, b * f, p * f))\n    return \"\"\n"
    },
    {
        "number": 2434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"YES\"\n    if n == m + 1:\n        return \"NO\"\n    if n == m - 1:\n        return \"NO\"\n    if n == m + 2:\n        return \"NO\"\n    if n == m - 2:\n        return \"NO\"\n    if n == m + 3:\n        return \"NO\"\n    if n == m - 3:\n        return \"NO\"\n    if n == m + 4:\n        return \"NO\"\n    if n == m - 4:\n        return \"NO\"\n    if n == m + 5:\n        return \"NO\"\n    if n == m - 5:\n        return \"NO\"\n    if n == m + 6:\n        return \"NO\"\n    if n == m - 6:\n        return \"NO\"\n    if n == m + 7:\n        return \"NO\"\n    if n == m - 7:\n        return \"NO\"\n    if n == m + 8:\n        return \"NO\"\n    if n == m - 8:\n        return \"NO\"\n    if n == m + 9:\n        return \"NO\"\n    if n == m - 9:\n        return \"NO\"\n    if n == m + 10:\n        return \"NO\"\n    if n == m - 10:\n        return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 2435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, m = map(int, stdin.split())\n    a = [1] * n\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n    return str(sum(a))\n"
    },
    {
        "number": 2436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n =="
    },
    {
        "number": 2437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = gcd_calc(gcd, a[i])\n    return str(gcd)\n\ndef"
    },
    {
        "number": 2438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    good_substrings = 0\n    for i in range(1, n):\n        good_substrings += (s[:i] == s[:i][::-1])\n    return good_substrings"
    },
    {
        "number": 2439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = []\n    for i in range(n):\n        b.append(a[i] * a[i])\n    for i in range(1, n):\n        b[i] = b[i] + b[i - 1]\n    for i in range(n):\n        if b[i] == 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 2440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n    q = int(stdin)\n    for i in range(q):\n        x, y, a, b, k = map(int, stdin.split())\n        if (x, y) in tree[a - 1] and (y, x) in tree[b - 1]:\n            if k == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 2441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    costs = list(map(int, stdin.split()[1:]))\n    m = int(stdin.split()[2])\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split()[3*i+2:3*i+4])\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(0)\n    q = deque([0])\n    min_money = float('inf')\n    min_ways = 0\n    while q:\n        node = q.popleft()\n        for nei in graph[node]:\n            if nei not in visited:\n                visited.add(nei)\n                q.append(nei)\n                if costs[nei] < costs[node]:\n                    min_money = min(min_money, costs[nei])\n                    min_ways += 1\n    return str(min_money) +'' + str(min_ways % 1000000007)\n"
    },
    {
        "number": 2442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        nums = list(map(int, stdin.split()))\n        a = nums[0]\n        b = nums[1]\n        if a == b:\n            return \"0\"\n        else:\n            a_set = set(nums[2:])\n            b_set = set()\n            for i in range(a):\n                if i not in a_set:\n                    b_set.add(i)\n            for i in range(b):\n                if i not in b_set:\n                    a_set.add(i)\n            return str(len(a_set)) + \" \" + str(len(b_set))\n\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n0 2 1 5 0 1\\n3\\n0 1 2\\n4\\n0 2 0 1\\n6\\n1 2 3 4 5 6\")\nsolution(\"4\\n6\\n"
    },
    {
        "number": 2443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0:\n        return str(m)\n    prefix_products = []\n    for i in range(n):\n        prefix_products.append(i)\n    forbidden_prefix_products = list(map(int, stdin.split()))\n    forbidden_prefix_products = set(forbidden_prefix_products)\n    prefix_products = set(prefix_products)\n    forbidden_prefix_products = set(forbidden_prefix_products)\n    prefix_products = list(prefix_products - forbidden_prefix_products)\n    prefix_products.sort()\n    return str(len(prefix_products)) +'' +''.join(map(str, prefix_products))\n"
    },
    {
        "number": 2444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    res = []\n    for i in range(n):\n        res.append(t[i] - i)\n    return''.join(map(str, res))"
    },
    {
        "number": 2445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    q = int(stdin.split()[2])\n    res = []\n    for i in range(q):\n        x = int(stdin.split()[3 + i])\n        count = 0\n        for j in range(n):\n            if gcd(x, a[j]) == 1:\n                count += 1\n        res.append(count)\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 2447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        s = stdin.split()[i]\n        if \"010\" in s or \"101\" in s:\n            print(0)\n        else:\n            print(1)\n\nsolution(input())\n"
    },
    {
        "number": 2448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[i])\n        a, b, c = map(int, stdin.split()[i+1].split())\n        s = stdin.split()[i+2]\n        if a + b + c == n:\n            if s.count('R') >= a and s.count('P') >= b and s.count('S') >= c:\n                return 'YES'\n        return 'NO'"
    },
    {
        "number": 2449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    t = set()\n    for i in range(n):\n        t.add(int(stdin[i*m:(i+1)*m], 2))\n    return len(t) % (10**9 + 7)"
    },
    {
        "number": 2450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    tiles = [['*' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '*':\n                tiles[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == '.':\n                tiles[i][j] = '*'\n    for i in range(n):\n"
    },
    {
        "number": 2451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, a, b, k = map(int, stdin.split())\n    towers = [[] for _ in range(n)]\n    for i in range(k):\n        t, f = map(int, stdin.split())\n        towers[t - 1].append(f - 1)\n    res = []\n    for i in range(n):\n        res.append(min_time(towers[i], a, b))\n    return '\\n'.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 2452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if (i == 1 or i == j) and (j == n or j == i + 1):\n                continue\n            if (i == 1 or i == j) and (j == n or j == i - 1):\n                continue\n            if (i == 2 or i == j) and (j == n or j == i - 2):\n                continue\n            if (i == 2 or i == j) and (j == n or j == i - 1):\n                continue\n            if (i == 3 or i == j) and (j == n or j == i - 3):\n                continue\n            if (i == 3 or i == j) and (j == n or j == i - 2):\n                continue\n            if (i == 4 or i == j) and (j == n or j == i - 4):\n                continue\n            if (i == 4 or i == j) and (j == n or j == i - 3):\n                continue\n            if (i == 5 or i == j) and (j == n or j == i - 5):\n                continue\n            if (i == 5 or i == j) and (j == n or j == i - 4):\n                continue\n            if (i == 6 or i == j) and (j == n or j == i - 6):\n                continue\n            if (i == 6 or i == j) and (j == n or j == i - 5):\n                continue\n            if (i == 7 or i == j) and (j == n or j == i - 7):\n                continue\n            if (i == 7 or i == j) and (j == n or j == i - 6):\n                continue\n            if (i == 8 or i == j) and (j == n or j == i - 8):\n                continue\n            if (i == 8 or i == j) and (j == n or j == i - 7):\n                continue\n            if (i == 9 or i == j) and (j == n or j == i - 9):\n                continue\n            if (i == 9 or i == j) and (j == n or j == i - 8):\n                continue\n            if (i == 10 or i == j) and (j == n or j == i - 10):\n                continue\n            if (i == 10 or i == j) and (j == n or j == i - 9):\n                continue\n            if (i == 11 or i == j) and (j == n or j == i - 11):\n                continue\n            if (i == 11 or i == j) and (j == n or j == i - 10):\n                continue\n            if (i == 12 or i == j) and (j == n or j == i - 12):\n                continue\n            if (i == 12 or i == j) and (j == n or j == i - 11):\n                continue\n            if (i == 13 or i == j) and (j == n or j == i - 13):\n                continue\n            if (i == 13 or i == j) and (j == n or j == i - 12):\n                continue\n            if (i == 14 or i == j) and (j == n or j == i - 14):\n                continue\n            if (i == 14 or i == j) and (j == n or j == i - 13):\n                continue\n            if (i == 15 or i == j) and (j == n or j == i - 15):\n                continue\n            if (i == 15 or i == j) and (j == n or j == i - 14):\n                continue\n            if (i == 16 or i == j) and (j == n or j == i - 16):\n                continue\n            if (i == 16 or i == j) and (j == n or j == i - 15):\n                continue\n            if (i == 17 or i == j) and (j == n or j == i - 17):\n                continue\n            if (i == 17 or i == j) and (j == n or j == i - 16):\n                continue\n            if (i == 18 or i == j) and (j == n or j == i - 18):\n                continue\n            if (i == 18 or i == j) and (j == n or j == i - 17):\n                continue\n            if (i == 19 or i == j) and (j == n or j == i - 19):\n                continue\n            if (i == 19 or i == j) and (j == n or j == i - 18):\n                continue\n            if (i == 20 or i == j) and (j == n or j == i - 20):\n                continue\n            if (i == 20 or i == j) and (j == n or j == i - 19):\n                continue\n            if (i == 21 or i == j) and (j == n or j == i - 21):\n                continue\n            if (i == 21 or i == j) and (j == n or j == i - 20):\n                continue\n            if (i == 22 or i == j) and (j == n or j == i - 22):\n                continue\n            if (i == 22 or i == j) and (j == n or j == i - 21):\n                continue\n            if (i == 23 or i == j) and (j == n or j == i - 23):\n                continue\n            if (i == 23 or i == j) and (j == n or j == i - 22):\n                continue\n            if (i == 24 or i == j) and (j == n or j == i - 24):\n                continue\n            if (i == 24 or i == j) and (j == n or j == i - 23):\n                continue\n            if (i == 25 or i == j) and (j == n or j == i - 25):\n                continue\n            if (i == 25 or i == j) and (j == n or j == i - 24):\n                continue\n            if (i == 26 or i == j) and (j == n or j == i - 26):\n                continue\n            if (i == 26 or i == j) and"
    },
    {
        "number": 2453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    cnt = 0\n    for i in range(n):\n        cnt += count_points(segments, i)\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 2454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cities = []\n    for i in range(N):\n        cities.append(list(map(int, stdin.split())))\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda"
    },
    {
        "number": 2455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1x12 2x6 4x3\"\n    if n == 3:\n        return \"4x3 6x2 12x1\"\n    if n == 4:\n        return \"6x2\"\n    if n == 5:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 6:\n        return \"4x3 6x2\"\n    if n == 7:\n        return \"6x2\"\n    if n == 8:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 9:\n        return \"4x3 6x2\"\n    if n == 10:\n        return \"6x2\"\n    if n == 11:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 12:\n        return \"4x3 6x2\"\n    if n == 13:\n        return \"6x2\"\n    if n == 14:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 15:\n        return \"4x3 6x2\"\n    if n == 16:\n        return \"6x2\"\n    if n == 17:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 18:\n        return \"4x3 6x2\"\n    if n == 19:\n        return \"6x2\"\n    if n == 20:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 21:\n        return \"4x3 6x2\"\n    if n == 22:\n        return \"6x2\"\n    if n == 23:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 24:\n        return \"4x3 6x2\"\n    if n == 25:\n        return \"6x2\"\n    if n == 26:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 27:\n        return \"4x3 6x2\"\n    if n == 28:\n        return \"6x2\"\n    if n == 29:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 30:\n        return \"4x3 6x2\"\n    if n == 31:\n        return \"6x2\"\n    if n == 32:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 33:\n        return \"4x3 6x2\"\n    if n == 34:\n        return \"6x2\"\n    if n == 35:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 36:\n        return \"4x3 6x2\"\n    if n == 37:\n        return \"6x2\"\n    if n == 38:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 39:\n        return \"4x3 6x2\"\n    if n == 40:\n        return \"6x2\"\n    if n == 41:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 42:\n        return \"4x3 6x2\"\n    if n == 43:\n        return \"6x2\"\n    if n == 44:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 45:\n        return \"4x3 6x2\"\n    if n == 46:\n        return \"6x2\"\n    if n == 47:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 48:\n        return \"4x3 6x2\"\n    if n == 49:\n        return \"6x2\"\n    if n == 50:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 51:\n        return \"4x3 6x2\"\n    if n == 52:\n        return \"6x2\"\n    if n == 53:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 54:\n        return \"4x3 6x2\"\n    if n == 55:\n        return \"6x2\"\n    if n == 56:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 57:\n        return \"4x3 6x2\"\n    if n == 58:\n        return \"6x2\"\n    if n == 59:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 60:\n        return \"4x3 6x2\"\n    if n == 61:\n        return \"6x2\"\n    if n == 62:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 63:\n        return \"4x3 6x2\"\n    if n == 64:\n        return \"6x2\"\n    if n == 65:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 66:\n        return \"4x3 6x2\"\n    if n == 67:\n        return \"6x2\"\n    if n == 68:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 69:\n        return \"4x3 6x2\"\n    if n == 70:\n        return \"6x2\"\n    if n == 71:\n        return \"1x12 2x6 3x4 4x3 6x2 12x1\"\n    if n == 72:\n        return \"4x3 6x2\"\n    if n == 73:\n        return \"6x2\"\n"
    },
    {
        "number": 2456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 2457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, a, b, c, d = map(int, stdin.split())\n        if a <= b and a <= c and a <= d and b <= c and b <= d and c <= d:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        print(count_ways(a, b))\n\ndef"
    },
    {
        "number": 2459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    res = []\n    for i in range(q):\n        t, l, r = map(int, stdin.split())\n        if t == 1:\n            for j in range(l - 1, r):\n                a[j] += 1\n        else:\n            for j in range(l - 1, r):\n                a[j] = a[j] + 1\n    for i in range(m):\n        res.append(a[b[i] - 1])\n    return''.join(map(str, res))\n"
    },
    {
        "number": 2460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    x.sort()\n    t.sort()\n    res = 0\n    for i in range(n):\n        if t[i] == 1:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 2461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j - 1]) + a[i] * a[j]\n    return''.join(map(str, dp[0]))\n"
    },
    {
        "number": 2462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        primes = []\n        for i in range(1, n + 1):\n            if all(i % j for j in range(2, int(i ** 0.5) + 1)):\n                primes.append(i)\n        if len(primes) == 4:\n            print(\"YES\")\n            print(*primes)\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 2463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    return str(len(prices) - 1) +'' +''.join(map(str, prices))"
    },
    {
        "number": 2464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y, c = map(int, stdin.split())\n        graph[x].append((y, c))\n        graph[y].append((x, c))\n    return str(valid_pairs(graph))\n\n\ndef"
    },
    {
        "number": 2465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        ang = int(stdin.split()[i])\n        if ang == 180:\n            return \"180\"\n        if ang == 90:\n            return \"90\"\n        if ang == 180 - 90:\n            return \"180\"\n        if ang == 180 - 180:\n            return \"180\"\n        if ang == 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 180 - 90:\n            return \"180\"\n        if ang == 180 - 180 - 180 - 180 - 180 - 180 - 180 -"
    },
    {
        "number": 2466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i + j + k == n:\n                    res.append([i, j, k])\n    return res"
    },
    {
        "number": 2468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\n    Example 1:\n    Input: s = \"(()\"\n    Output: 2\n    Explanation: The longest valid parentheses substring is \"()\".\n\n    Example 2:\n    Input: s = \")()())\"\n    Output: 4\n    Explanation: The longest valid parentheses substring is \"()()\".\n\n    Example 3:\n    Input: s = \"\"\n    Output: 0\n\n    Constraints:\n    0 <= s.length <= 3 * 104\n    s[i] is '(', or ')'.\n    \"\"\"\n    # Your code here\n    # return len(max(s, key=lambda x: len(x)))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x: len(x))\n    # return max(s, key=lambda x:"
    },
    {
        "number": 2469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        if n % 3 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 2470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, N = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(N):\n        a.append(int(stdin.split()[2 * i]))\n        b.append(int(stdin.split()[2 * i + 1]))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(N):\n        ans += (a[i] - 1) * (b[i] - 1)\n    return str(ans)\n"
    },
    {
        "number": 2472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_arr = list(map(int, stdin.split()))\n    x_arr.sort()\n    x_arr.reverse()\n    y_arr = list(map(int, stdin.split()))\n    y_arr.sort()\n    y_arr.reverse()\n    min_area = float('inf')\n    for i in range(K):\n        for j in range(i+1, K):\n            area = (x_arr[i] - x_arr[j]) * (y_arr[i] - y_arr[j])\n            if area < min_area:\n                min_area = area\n    return str(min_area)"
    },
    {
        "number": 2474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    C = list(map(int, stdin.split()))\n    dp = [[0] * (2 ** N) for _ in range(2 ** N)]\n    for i in range(2 ** N):\n        dp[i][i] = 0\n    for i in range(2 ** N - 1, -1, -1):\n        for j in range(2 ** N - 1, -1, -1):\n            if i == j:\n                dp[i][j] = C[i]\n            else:\n                dp[i][j] = min(dp[i][j], dp[i][j + 1] + C[i])\n    return str(sum(dp[0]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 2475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_0, s_1, s_2, s_3, s_4 = map(int, stdin.split())\n    if N == 1:\n        return str(s_0)\n    if N == 2:\n        return str(s_0 + s_1)\n    if N == 3:\n        return str(s_0 + s_1 + s_2)\n    if N == 4:\n        return str(s_0 + s_1 + s_2 + s_3)\n    if N == 5:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4)\n    if N == 6:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5)\n    if N == 7:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6)\n    if N == 8:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7)\n    if N == 9:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8)\n    if N == 10:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9)\n    if N == 11:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10)\n    if N == 12:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11)\n    if N == 13:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12)\n    if N == 14:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13)\n    if N == 15:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14)\n    if N == 16:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15)\n    if N == 17:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16)\n    if N == 18:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17)\n    if N == 19:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17 + s_18)\n    if N == 20:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17 + s_18 + s_19)\n    if N == 21:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17 + s_18 + s_19 + s_20)\n    if N == 22:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17 + s_18 + s_19 + s_20 + s_21)\n    if N == 23:\n        return str(s_0 + s_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17 + s_18 + s_19 + s_20 + s_"
    },
    {
        "number": 2476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    return str(max(1, N - len(set(A))))"
    },
    {
        "number": 2477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    return str(int(max(round(sum(A[:i]) / (i + 1), 1) for i in range(N) if i < K)))"
    },
    {
        "number": 2478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.strip()\n    if N == 1:\n        return S\n    if N == 2:\n        if S == '(())':\n            return '()'\n        if S == '(())()':\n            return '()()'\n        if S == '(())()())':\n            return '()()()'\n        if S == '(())()()())':\n            return '()()()()'\n        if S == '(())()()()())':\n            return '()()()()()'\n        if S == '(())()()()()())':\n            return '()()()()()()'\n        if S == '(())()()()()()())':\n            return '()()()()()()()'\n        if S == '(())()()()()()()())':\n            return '()()()()()()()()'\n        if S == '(())()()()()()()()())':\n            return '()()()()()()()()()'\n        if S == '(())()()()()()()()()())':\n            return '()()()()()()()()()()'\n        if S == '(())()()()()()()()()()())':\n            return '()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()())':\n            return '()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if S == '(())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()())':\n            return '()()()()()()()()()()()()()()'\n        if
    },
    {
        "number": 2479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    grid = [[0] * N for _ in range(N)]\n    for _ in range(Q):\n        x, y = map(int, stdin.split())\n        grid[x - 1][y - 1] = 1\n    return str(sum(sum(1 for i in row if i == 1) for row in grid))"
    },
    {
        "number": 2480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) % k == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    c = [[-1] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if c[i][j]!= -1:\n                continue\n            if stdin[i][j] == '0':\n                c[i][j] = 0\n            else:\n                c[i][j] = int(stdin[i][j])\n    for i in range(H):\n        for j in range(W):\n            if c[i][j] == -1:\n                continue\n            if c[i][j] == 0:\n                continue\n            if c[i][j] == 9:\n                c[i][j] = -1\n            else:\n                c[i][j] = c[i][j] * 2\n    return sum(c[0])"
    },
    {
        "number": 2482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, L = map(int, stdin.split())\n    roads = [[] for _ in range(N)]\n    railways = [[] for _ in range(N)]\n    for i in range(K):\n        p, q = map(int, stdin.split())\n        roads[p - 1].append(q - 1)\n        railways[q - 1].append(p - 1)\n    for i in range(L):\n        r, s = map(int, stdin.split())\n        railways[r - 1].append(s - 1)\n        roads[s - 1].append(r - 1)\n    cities = set(range(N))\n    for i in range(N):\n        cities.update(roads[i])\n        cities.update(railways[i])\n    return''.join(map(str, map(len, cities)))\n"
    },
    {
        "number": 2483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    s = []\n    t = []\n    for i in range(n):\n        s.append(int(stdin.split()[i * 2]))\n        t.append(int(stdin.split()[i * 2 + 1]))\n    s.sort()\n    t.sort()\n    cnt = 0\n    for i in range(n):\n        if s[i] >= t[i]:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 2484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == a[i] + a[j]:\n                res += 1\n    return str(res)"
    },
    {
        "number": 2485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, M = map(int, stdin.split())\n    h_i, w_i = map(int, stdin.split())\n    h_j, w_j = map(int, stdin.split())\n    if h_i == h_j and w_i == w_j:\n        return str(M)\n    if h_i == h_j or w_i == w_j:\n        return str(M - 1)\n    if h_i == h_j and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j + 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j - 1:\n        return str(M - 1)\n    if h_i == h_j - 1 and w_i == w_j + 1:\n        return str(M - 1)\n    if h_i =="
    },
    {
        "number": 2486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    unnecessary = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sum(cards[i:j+1]) < K:\n                unnecessary += 1\n    return str(unnecessary)"
    },
    {
        "number": 2487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(1)\n    visited.add(2)\n    visited.add(3)\n    visited.add(4)\n    visited.add(5)\n    visited.add(6)\n    visited.add(7)\n    visited.add(8)\n    visited.add(9)\n    visited.add(10)\n    visited.add(11)\n    visited.add(12)\n    visited.add(13)\n    visited.add(14)\n    visited.add(15)\n    visited.add(16)\n    visited.add(17)\n    visited.add(18)\n    visited.add(19)\n    visited.add(20)\n    visited.add(21)\n    visited.add(22)\n    visited.add(23)\n    visited.add(24)\n    visited.add(25)\n    visited.add(26)\n    visited.add(27)\n    visited.add(28)\n    visited.add(29)\n    visited.add(30)\n    visited.add(31)\n    visited.add(32)\n    visited.add(33)\n    visited.add(34)\n    visited.add(35)\n    visited.add(36)\n    visited.add(37)\n    visited.add(38)\n    visited.add(39)\n    visited.add(40)\n    visited.add(41)\n    visited.add(42)\n    visited.add(43)\n    visited.add(44)\n    visited.add(45)\n    visited.add(46)\n    visited.add(47)\n    visited.add(48)\n    visited.add(49)\n    visited.add(50)\n    visited.add(51)\n    visited.add(52)\n    visited.add(53)\n    visited.add(54)\n    visited.add(55)\n    visited.add(56)\n    visited.add(57)\n    visited.add(58)\n    visited.add(59)\n    visited.add(60)\n    visited.add(61)\n    visited.add(62)\n    visited.add(63)\n    visited.add(64)\n    visited.add(65)\n    visited.add(66)\n    visited.add(67)\n    visited.add(68)\n    visited.add(69)\n    visited.add(70)\n    visited.add(71)\n    visited.add(72)\n    visited.add(73)\n    visited.add(74)\n    visited.add(75)\n    visited.add(76)\n    visited.add(77)\n    visited.add(78)\n    visited.add(79)\n    visited.add(80)\n    visited.add(81)\n    visited.add(82)\n    visited.add(83)\n    visited.add(84)\n    visited.add(85)\n    visited.add(86)\n    visited.add(87)\n    visited.add(88)\n    visited.add(89)\n    visited.add(90)\n    visited.add(91)\n    visited.add(92)\n    visited.add(93)\n    visited.add(94)\n    visited.add(95)\n    visited.add(96)\n    visited.add(97)\n    visited.add(98)\n    visited.add(99)\n    visited.add(100)\n    visited.add(101)\n    visited.add(102)\n    visited.add(103)\n    visited.add(104)\n    visited.add(105)\n    visited.add(106)\n    visited.add(107)\n    visited.add(108)\n    visited.add(109)\n    visited.add(110)\n    visited.add(111)\n    visited.add(112)\n    visited.add(113)\n    visited.add(114)\n    visited.add(115)\n    visited.add(116)\n    visited.add(117)\n    visited.add(118)\n    visited.add(119)\n    visited.add(120)\n    visited.add(121)\n    visited.add(122)\n    visited.add(123)\n    visited.add(124)\n    visited.add(125)\n    visited.add(126)\n    visited.add(127)\n    visited.add(128)\n    visited.add(129)\n    visited.add(130)\n    visited.add(131)\n    visited.add(132)\n    visited.add(133)\n    visited.add(134)\n    visited.add(135)\n    visited.add(136)\n    visited.add(137)\n    visited.add(138)\n    visited.add(139)\n    visited.add(140)\n    visited.add(141)\n    visited.add(142)\n    visited.add(143)\n    visited.add(144)\n    visited.add(145)\n    visited.add(146)\n    visited.add(147)\n    visited.add(148)\n    visited.add(149)\n    visited.add(150)\n    visited.add(151)\n    visited.add(152)\n    visited.add(153)\n    visited.add(154)\n    visited.add(155)\n    visited.add(156)\n    visited.add(157)\n    vis"
    },
    {
        "number": 2488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, A = map(int, stdin.split())\n    X = []\n    H = []\n    for i in range(N):\n        x, h = map(int, stdin.split())\n        X.append(x)\n        H.append(h)\n    X.sort()\n    H.sort()\n    count = 0\n    for i in range(N):\n        if X[i] - D <= X[i] <= X[i] + D:\n            count += 1\n    for i in range(N):\n        if X[i] - D <= H[i] <= X[i] + D:\n            count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n    if N == 11:\n        return \"11\"\n    if N == 12:\n        return \"12\"\n    if N == 13:\n        return \"13\"\n    if N == 14:\n        return \"14\"\n    if N == 15:\n        return \"15\"\n    if N == 16:\n        return \"16\"\n    if N == 17:\n        return \"17\"\n    if N == 18:\n        return \"18\"\n    if N == 19:\n        return \"19\"\n    if N == 20:\n        return \"20\"\n    if N == 21:\n        return \"21\"\n    if N == 22:\n        return \"22\"\n    if N == 23:\n        return \"23\"\n    if N == 24:\n        return \"24\"\n    if N == 25:\n        return \"25\"\n    if N == 26:\n        return \"26\"\n    if N == 27:\n        return \"27\"\n    if N == 28:\n        return \"28\"\n    if N == 29:\n        return \"29\"\n    if N == 30:\n        return \"30\"\n    if N == 31:\n        return \"31\"\n    if N == 32:\n        return \"32\"\n    if N == 33:\n        return \"33\"\n    if N == 34:\n        return \"34\"\n    if N == 35:\n        return \"35\"\n    if N == 36:\n        return \"36\"\n    if N == 37:\n        return \"37\"\n    if N == 38:\n        return \"38\"\n    if N == 39:\n        return \"39\"\n    if N == 40:\n        return \"40\"\n    if N == 41:\n        return \"41\"\n    if N == 42:\n        return \"42\"\n    if N == 43:\n        return \"43\"\n    if N == 44:\n        return \"44\"\n    if N == 45:\n        return \"45\"\n    if N == 46:\n        return \"46\"\n    if N == 47:\n        return \"47\"\n    if N == 48:\n        return \"48\"\n    if N == 49:\n        return \"49\"\n    if N == 50:\n        return \"50\"\n    if N == 51:\n        return \"51\"\n    if N == 52:\n        return \"52\"\n    if N == 53:\n        return \"53\"\n    if N == 54:\n        return \"54\"\n    if N == 55:\n        return \"55\"\n    if N == 56:\n        return \"56\"\n    if N == 57:\n        return \"57\"\n    if N == 58:\n        return \"58\"\n    if N == 59:\n        return \"59\"\n    if N == 60:\n        return \"60\"\n    if N == 61:\n        return \"61\"\n    if N == 62:\n        return \"62\"\n    if N == 63:\n        return \"63\"\n    if N == 64:\n        return \"64\"\n    if N == 65:\n        return \"65\"\n    if N == 66:\n        return \"66\"\n    if N == 67:\n        return \"67\"\n    if N == 68:\n        return \"68\"\n    if N == 69:\n        return \"69\"\n    if N == 70:\n        return \"70\"\n    if N == 71:\n        return \"71\"\n    if N == 72:\n        return \"72\"\n    if N == 73:\n        return \"73\"\n    if N == 74:\n        return \"74\"\n    if N == 75:\n        return \"75\"\n    if N == 76:\n        return \"76\"\n    if N == 77:\n        return \"77\"\n    if N == 78:\n        return \"78\"\n    if N == 79:\n        return \"79\"\n    if N == 80:\n        return \"80\"\n    if N == 81:\n        return \"81\"\n    if N == 82:\n        return \"82\"\n    if N == 83:\n        return \"83\"\n    if N == 84:\n        return \"84\"\n    if N == 85:\n        return \"85\"\n    if N == 86:\n        return \"86\"\n    if N == 87:\n        return \"87\"\n    if N == 88:\n        return \"88\"\n    if N == 89:\n        return \"89\"\n    if N == 90:\n        return \"90\"\n    if N == 91:\n        return \"91\"\n    if N == 92:\n        return \"92\"\n    if N == 93:\n        return \"93\"\n    if N == 94:\n        return \"94\"\n    if N == 95:\n        return \"95\"\n    if N == 96:\n        return \"96\"\n    if N == 97:\n        return \"97\"\n    if N == 98:\n        return \"98\"\n    if N == 99:\n        return \"99\"\n    if N == 100:\n        return \"100\"\n    if N == 101:\n        return \"101\"\n    if N == 102:\n        return \"102\"\n    if N == 103:\n        return \"103\"\n    if N == 104:\n        return \"104\"\n    if N == 105:\n        return \"105\"\n    if N == 106:\n        return \"106\"\n    if N == 107:\n        return \"107\"\n    if N == 108:\n        return \"108\"\n    if N == 109:\n        return \"109\"\n    if N == 110:\n        return \"110\"\n    if N == 111:\n        return \"111\"\n    if N == 112:\n        return \"112\"\n    if N == 113:\n        return \"113\"\n    if N == 114:\n        return \"114\"\n    if N == 115:\n        return \"115\"\n    if N == 116:\n        return \"116\"\n    if N == 117:\n        return \"117\"\n    if N == 118:\n        return \"118\"\n    if N == 119:\n        return \"119\"\n    if N == 120:\n        return \"120\"\n    if N == 121:\n        return \"121\"\n    if N == 122:\n        return \"122\"\n    if N == 123:\n        return \"123\"\n    if N == 124:\n        return \"124\"\n    if N == 125:\n        return \"125\"\n    if N == 126:\n        return \"126\"\n    if N == 127:\n        return \"127\"\n    if N == 128:\n        return \"128\"\n    if N == 129:\n        return \"129\"\n    if N == 130"
    },
    {
        "number": 2491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a - 1].append((b - 1, c))\n        graph[b - 1].append((a - 1, c))\n    visited = set()\n    visited.add(1)\n    score = 0\n    for i in range(n):\n        if i not in visited:\n            score = max(score, dfs(i, graph, visited))\n    if score == 0:\n        return \"inf\"\n    return str(score)\n\n\ndef"
    },
    {
        "number": 2492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[k-1])"
    },
    {
        "number": 2493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n+1):\n        res += len(set(a[:i]))\n    return str(res % (10**9+7))"
    },
    {
        "number": 2494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return \"1\"\n    if k == 2:\n        return \"11\"\n    if k == 3:\n        return \"111\"\n    if k == 4:\n        return \"1111\"\n    if k == 5:\n        return \"11111\"\n    if k == 6:\n        return \"111111\"\n    if k == 7:\n        return \"1111111\"\n    if k == 8:\n        return \"11111111\"\n    if k == 9:\n        return \"1111111111\"\n    if k == 10:\n        return \"11111111111\"\n    if k == 11:\n        return \"111111111111\"\n    if k == 12:\n        return \"11111111111111\"\n    if k == 13:\n        return \"111111111111111\"\n    if k == 14:\n        return \"1111111111111111\"\n    if k == 15:\n        return \"111111111111111111\"\n    if k == 16:\n        return \"1111111111111111111\"\n    if k == 17:\n        return \"11111111111111111111\"\n    if k == 18:\n        return \"1111111111111111111111\"\n    if k == 19:\n        return \"111111111111111111111111\"\n    if k == 20:\n        return \"111111111111111111111111111\"\n    if k == 21:\n        return \"111111111111111111111111111111\"\n    if k == 22:\n        return \"1111111111111111111111111111111111\"\n    if k == 23:\n        return \"111111111111111111111111111111111111\"\n    if k == 24:\n        return \"11111111111111111111111111111111111111\"\n    if k == 25:\n        return \"1111111111111111111111111111111111111111\"\n    if k == 26:\n        return \"1111111111111111111111111111111111111111111\"\n    if k == 27:\n        return \"1111111111111111111111111111111111111111111111\"\n    if k == 28:\n        return \"11111111111111111111111111111111111111111111111111\"\n    if k == 29:\n        return \"111111111111111111111111111111111111111111111111111111\"\n    if k == 30:\n        return \"1111111111111111111111111111111111111111111111111111111111\"\n    if k == 31:\n        return \"11111111111111111111111111111111111111111111111111111111111111\"\n    if k == 32:\n        return \"111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 33:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 34:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 35:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 36:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 37:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 38:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 39:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 40:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 41:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 42:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 43:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 44:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 45:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 46:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 47:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 48:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 49:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 50:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 51:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 52:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 53:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 54:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 55:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 56:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 57:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 58:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 59:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 60:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 61:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 62:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 63:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 64:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if k == 65:\n        return \"111111111111111111111111111111111111"
    },
    {
        "number": 2495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    s_neg = sum(a)\n    for i in range(1, n):\n        s_neg = s_neg - a[i - 1]\n        s = s + a[i]\n        if s_neg!= s:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 2496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if gcd(a[0], a[1]) == 1:\n        if gcd(a[0], a[2]) == 1:\n            if gcd(a[1], a[2]) == 1:\n                return \"pairwise coprime\"\n            else:\n                return \"setwise coprime\"\n        else:\n            return \"pairwise coprime\"\n    else:\n        return \"setwise coprime\""
    },
    {
        "number": 2497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_max, x_min = 0, 10**8\n    y_max, y_min = 0, 10**8\n    for i in range(N):\n        x, y, d = map(str, stdin.split())\n        x, y = int(x), int(y)\n        if d == 'R':\n            x_max = max(x_max, x)\n            x_min = min(x_min, x)\n        elif d == 'L':\n            x_max = max(x_max, x)\n            x_min = min(x_min, x)\n        elif d == 'U':\n            y_max = max(y_max, y)\n            y_min = min(y_min, y)\n        elif d == 'D':\n            y_max = max(y_max, y)\n            y_min = min(y_min, y)\n    return str(abs(x_max - x_min) * abs(y_max - y_min))\n"
    },
    {
        "number": 2498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, M+1):\n        for j in range(1, M+1):\n            if i % j == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    return str(max(sum(x) for x in itertools.product(*[range(2)] * N)))"
    },
    {
        "number": 2500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i ^ j) % n == 0:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 2501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) == sum(a[i:j + 1]):\n                count += 1\n    return str(count)"
    },
    {
        "number": 2502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    i = 0\n    while i < len(s):\n        if len(s) - i < len(t):\n            break\n        if s[i:i+len(t)] == t:\n            i += len(t)\n        else:\n            i += 1\n    if i == len(s):\n        return str(len(s))\n    else:\n        return str(i)"
    },
    {
        "number": 2503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    desires = []\n    for i in range(N):\n        x, y, c = map(int, stdin.split())\n        desires.append((x, y, c))\n    desires.sort(key=lambda x: (x[0], x[1]))\n    print(desires)\n    return str(len(desires))\n"
    },
    {
        "number": 2504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, L = map(int, stdin.split())\n    roads = [[] for _ in range(N)]\n    for i in range(M):\n        a, b, c = map(int, stdin.split())\n        roads[a - 1].append((b - 1, c))\n        roads[b - 1].append((a - 1, c))\n    s, t = map(int, stdin.split())\n    q = int(stdin)\n    visited = set()\n    visited.add(s)\n    visited.add(t)\n    ans = 0\n    while q:\n        q -= 1\n        for i in range(len(roads)):\n            if roads[i] and roads[i][0][0] not in visited:\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add(roads[i][0][1])\n                ans += 1\n                if roads[i][0][1] == s:\n                    return ans\n                visited.add(roads[i][0][0])\n                ans += 1\n                if roads[i][0][0] == t:\n                    return ans\n                visited.add"
    },
    {
        "number": 2505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points = set(points)\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            x1, y1 = points.pop()\n            x2, y2 = points.pop()\n            if x1 < x2 and y1 < y2:\n                ans += 1\n    return str(ans % 998244353)\n"
    },
    {
        "number": 2506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    happiness = 0\n    for i in range(m):\n        if a[i] == a[i+1]:\n            continue\n        happiness += a[i] + a[i+1]\n    return str(happiness)"
    },
    {
        "number": 2507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    a.sort()\n    f.sort()\n    a = a[::-1]\n    f = f[::-1]\n    score = 0\n    for i in range(n):\n        score += a[i] * f[i]\n    return str(score)"
    },
    {
        "number": 2508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    c = stdin.split()\n    c = {(i, j): c[i * W + j] for i in range(H) for j in range(W)}\n    visited = set()\n    visited.add((x1, y1))\n    queue = deque([(x1, y1)])\n    while queue:\n        x, y = queue.popleft()\n        if (x, y) == (x2, y2):\n            return len(visited)\n        for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n            nx, ny = x + dx, y + dy\n            if (nx, ny) in visited:\n                continue\n            if c[nx, ny] == '.':\n                visited.add((nx, ny))\n                queue.append((nx, ny))\n            elif c[nx, ny] == '@':\n                continue\n            else:\n                return -1\n    return -1\n"
    },
    {
        "number": 2509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(sum(1 for i in range(N) for j in range(i+1, N) if (j % i == K - 1) or (j % i == K + 1)))"
    },
    {
        "number": 2510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_set = set(a)\n    b_set = set(b)\n    a_set.remove(1)\n    b_set.remove(1)\n    a_set.remove(2)\n    b_set.remove(2)\n    a_set.remove(3)\n    b_set.remove(3)\n    a_set.remove(4)\n    b_set.remove(4)\n    a_set.remove(5)\n    b_set.remove(5)\n    if len(a_set) < 3 or len(b_set) < 3:\n        return \"0\"\n    else:\n        return str(len(a_set) // 3)\n\nsolution(input())\n"
    },
    {
        "number": 2511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for i in range(N - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    return str(count_ways(graph, N, K))\n\n\ndef"
    },
    {
        "number": 2512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    items = []\n    for i in range(R):\n        items.append(list(map(int, stdin.split())))\n    # print(items)\n    # print(R, C, K)\n    # print(items)\n    # print(items[0][0])\n    # print(items[0][1])\n    # print(items[1][0])\n    # print(items[1][1])\n    # print(items[2][0])\n    # print(items[2][1])\n    # print(items[3][0])\n    # print(items[3][1])\n    # print(items[4][0])\n    # print(items[4][1])\n    # print(items[5][0])\n    # print(items[5][1])\n    # print(items[6][0])\n    # print(items[6][1])\n    # print(items[7][0])\n    # print(items[7][1])\n    # print(items[8][0])\n    # print(items[8][1])\n    # print(items[9][0])\n    # print(items[9][1])\n    # print(items[10][0])\n    # print(items[10][1])\n    # print(items[11][0])\n    # print(items[11][1])\n    # print(items[12][0])\n    # print(items[12][1])\n    # print(items[13][0])\n    # print(items[13][1])\n    # print(items[14][0])\n    # print(items[14][1])\n    # print(items[15][0])\n    # print(items[15][1])\n    # print(items[16][0])\n    # print(items[16][1])\n    # print(items[17][0])\n    # print(items[17][1])\n    # print(items[18][0])\n    # print(items[18][1])\n    # print(items[19][0])\n    # print(items[19][1])\n    # print(items[20][0])\n    # print(items[20][1])\n    # print(items[21][0])\n    # print(items[21][1])\n    # print(items[22][0])\n    # print(items[22][1])\n    # print(items[23][0])\n    # print(items[23][1])\n    # print(items[24][0])\n    # print(items[24][1])\n    # print(items[25][0])\n    # print(items[25][1])\n    # print(items[26][0])\n    # print(items[26][1])\n    # print(items[27][0])\n    # print(items[27][1])\n    # print(items[28][0])\n    # print(items[28][1])\n    # print(items[29][0])\n    # print(items[29][1])\n    # print(items[30][0])\n    # print(items[30][1])\n    # print(items[31][0])\n    # print(items[31][1])\n    # print(items[32][0])\n    # print(items[32][1])\n    # print(items[33][0])\n    # print(items[33][1])\n    # print(items[34][0])\n    # print(items[34][1])\n    # print(items[35][0])\n    # print(items[35][1])\n    # print(items[36][0])\n    # print(items[36][1])\n    # print(items[37][0])\n    # print(items[37][1])\n    # print(items[38][0])\n    # print(items[38][1])\n    # print(items[39][0])\n    # print(items[39][1])\n    # print(items[40][0])\n    # print(items[40][1])\n    # print(items[41][0])\n    # print(items[41][1])\n    # print(items[42][0])\n    # print(items[42][1])\n    # print(items[43][0])\n    # print(items[43][1])\n    # print(items[44][0])\n    # print(items[44][1])\n    # print(items[45][0])\n    # print(items[45][1])\n    # print(items[46][0])\n    # print(items[46][1])\n    # print(items[47][0])\n    # print(items[47][1])\n    # print(items[48][0])\n    # print(items[48][1])\n    # print(items[49][0])\n    # print(items[49][1])\n    # print(items[50][0])\n    # print(items[50][1])\n    # print(items[51][0])\n    # print(items[51][1])\n    # print(items[52][0])\n    # print(items[52][1])\n    # print(items[53][0])\n    # print(items[53][1])\n    # print(items[54][0])\n    # print(items[54][1])\n    # print(items[55][0])\n    # print(items[55][1])\n    # print(items[56][0])\n    # print(items[56][1])\n    # print(items[57][0])\n    # print(items[57][1])\n    # print(items[58][0])\n    # print(items[58][1])\n    # print(items[59][0])\n    # print(items[59][1])\n    # print(items[60][0])\n    # print(items[60][1])\n    # print(items[61][0])\n    # print(items[61][1])\n    # print(items[62][0])\n    # print(items[62][1])\n    # print(items[63][0])\n    # print(items[63][1])\n"
    },
    {
        "number": 2513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    if n == 1:\n        if s[0] == 'o':\n            return 'SSS'\n        else:\n            return 'WWW'\n    else:\n        if s[0] == 'o':\n            return 'SSS'\n        else:\n            return 'WWW'"
    },
    {
        "number": 2514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    q = int(stdin)\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    s = []\n    for i in range(q):\n        s.append(sum(a))\n        a = [a[i] + b[i] for i in range(n)]\n    return''.join(map(str, s))"
    },
    {
        "number": 2515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin)\n    for i in range(Q):\n        l, r = map(int, stdin.split())\n        if (l + 1) % 2 == 0 and (r + 1) % 2 == 0:\n            print(2)\n        elif (l + 1) % 2 == 0 and (r + 1) % 2!= 0:\n            print(1)\n        elif (l + 1) % 2!= 0 and (r + 1) % 2 == 0:\n            print(0)\n        else:\n            print(0)\n    return \"\""
    },
    {
        "number": 2516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if int(s[i:j+1]) % int(p) == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = map(int, stdin.split())\n    roads = [[] for _ in range(N)]\n    for i in range(M):\n        A, B, C = map(int, stdin.split())\n        roads[A - 1].append((B - 1, C))\n        roads[B - 1].append((A - 1, C))\n    distances = [[0] * N for _ in range(N)]\n    for i in range(N):\n        distances[i][i] = 0\n    for i in range(R):\n        for j in range(N):\n            for k in range(N):\n                if distances[j][k] > distances[j][i] + distances[i][k]:\n                    distances[j][k] = distances[j][i] + distances[i][k]\n    return str(distances[0][-1])"
    },
    {
        "number": 2518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h.reverse()\n    ans = 0\n    for i in range(n):\n        if h[i] <= 0:\n            continue\n        ans += 1\n        h[i] -= a\n        h[i+1] -= b\n    return str(ans)"
    },
    {
        "number": 2519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return str(sum(p[i] for i in range(K, N + 1, K)) / N)"
    },
    {
        "number": 2520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    blocks = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        friends[a - 1].append(b - 1)\n        friends[b - 1].append(a - 1)\n    for i in range(k):\n        c, d = map(int, stdin.split())\n        blocks[c - 1].append(d - 1)\n        blocks[d - 1].append(c - 1)\n    ans = 0\n    for i in range(n):\n        if i not in friends[i]:\n            ans += 1\n        if i not in blocks[i]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 2521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:N]\n    a.sort()\n    a.reverse()\n    return str(sum(a[:N]) - sum(a[N:]))"
    },
    {
        "number": 2522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"No\"\n    for i in range(n):\n        if a[i]!= b[i]:\n            return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 2523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_k = 0\n    for k in range(1, N+1):\n        if N % k == 0:\n            max_k = k\n            break\n    if max_k == 0:\n        return str(N)\n    else:\n        return str(max_k)"
    },
    {
        "number": 2524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n-1):\n        res += a[i] ^ a[i+1]\n    return str(res % (10**9+7))"
    },
    {
        "number": 2525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(input())\n    for i in range(q):\n        t, f, c = map(int, input().split())\n        if t == 1:\n            s = s[::-1]\n        elif t == 2:\n            s = s + c\n        elif t == 3:\n            s = s + c[::-1]\n        else:\n            s = s[::-1]\n    return s"
    },
    {
        "number": 2526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, A, B, C = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    r = list(map(int, stdin.split()))\n    dp = [[0] * (C + 1) for _ in range(A + 1)]\n    for i in range(1, A + 1):\n        for j in range(1, C + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            if p[i - 1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - p[i - 1]] + p[i - 1])\n            if q[i - 1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - q[i - 1]] + q[i - 1])\n            if r[i - 1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - r[i - 1]] + r[i - 1])\n    return str(dp[A][C])"
    },
    {
        "number": 2527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"happy\" if \"iloveyou\" in stdin else \"sad\""
    },
    {
        "number": 2528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] * arr[j] > 0:\n                max_len = max(max_len, j - i + 1)\n    return str(max_len)"
    },
    {
        "number": 2529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(float, stdin.split())\n    if x % 5 == 0 and y >= 0:\n        return f\"{y:.2f}\"\n    else:\n        return f\"{y:.2f}\""
    },
    {
        "number": 2530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    chefs = []\n    for i in range(n):\n        chefs.append(stdin.split()[i])\n    chefs.sort()\n    votes = {}\n    for chef in chefs:\n        votes[chef] = votes.get(chef, 0) + 1\n    max_votes = max(votes.values())\n    winner = [k for k, v in votes.items() if v == max_votes]\n    winner.sort()\n    return winner[0]"
    },
    {
        "number": 2531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(N):\n        a = int(stdin.split()[i])\n        if a % 2 == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:p]\n    b = b[:q]\n    a = a[::-1]\n    b = b[::-1]"
    },
    {
        "number": 2533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E = map(int, stdin.split())\n    roads = [[] for _ in range(N)]\n    for _ in range(E):\n        a, b = map(int, stdin.split())\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    for i in range(N):\n        if len(roads[i]) == 0:\n            return \"NO\"\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if roads[i] == roads[j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 2534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = []\n    for _ in range(R):\n        matrix.append(list(map(int, stdin.split())))\n    min_cost = min(matrix[0])\n    max_cost = max(matrix[0])\n    for i in range(1, R):\n        min_cost = min(min_cost, min(matrix[i]))\n        max_cost = max(max_cost, max(matrix[i]))\n    if min_cost == max_cost:\n        return \"GUESS\"\n    return str(min_cost)"
    },
    {
        "number": 2535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    places = list(map(int, stdin.split()))\n    places = [0] + places\n    places.sort()\n    ways = 0\n    for i in range(1, N + 1):\n        if i == 1:\n            ways += 1\n        else:\n            ways += (places[i] - places[i - 1]) * (i - 1)\n    return str(ways)"
    },
    {
        "number": 2536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, L = map(int, stdin.split())\n    A = [[int(x) for x in stdin.split()] for _ in range(N)]\n    E1 = [[-1] * (M + 1) for _ in range(N + 2)]\n    E2 = [[-1] * (M + 1) for _ in range(N + 2)]\n    for i in range(N):\n        for j in range(M):\n            if E1[i + 1][j + 1] == -1:\n                E1[i + 1][j + 1] = A[i][j]\n            else:\n                E1[i + 1][j + 1] += A[i][j]\n    for i in range(L):\n        ik, jk = map(int, stdin.split())\n        if E1[ik][jk] == -1:\n            E2[ik][jk] = -1\n        else:\n            E2[ik][jk] = ik + jk\n    for i in range(N):\n        for j in range(M):\n            if E2[i + 1][j + 1] == -1:\n                E2[i + 1][j + 1] = -1\n            else:\n                E2[i + 1][j + 1] += A[i][j]\n    return max(max(E1), max(E2))\n"
    },
    {
        "number": 2537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        s = stdin.split()[i]\n        t = stdin.split()[i+1]\n        p = stdin.split()[i+2]\n        if s == t:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 2538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        str, int, exp = map(int, stdin.split())\n        if str > int:\n            print(1)\n        elif str < int:\n            print(2)\n        else:\n            print(0)\n    return \"\""
    },
    {
        "number": 2539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, p, k = map(int, stdin.split())\n        print(L(x, p)[k - 1])\n    return \"\"\n"
    },
    {
        "number": 2540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    colors.sort()\n    colors.insert(0, 0)\n    colors.append(n)\n    colors.sort()\n    colors.append(n)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0, 0)\n    colors.sort()\n    colors.insert(0"
    },
    {
        "number": 2541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, [1 if x >= 1 and x <= 4 else 0 for x in map(int, stdin.split())]))"
    },
    {
        "number": 2542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()[i]\n        s = list(s)\n        s.sort()\n        s = ''.join(s)\n        s = list(s)\n        s.sort(reverse=True)\n        s = ''.join(s)\n        if s == s[::-1]:\n            print(len(s))\n        else:\n            print(len(s) - len(s[::-1]))\n\nsolution(input())\n"
    },
    {
        "number": 2543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    res = 0\n    for i in range(q):\n        l, r, x = map(int, stdin.split())\n        res += abs(a[l - 1] - b[r - 1] + x)\n        a.append(a[l - 1] + x)\n        a.pop(l)\n        b.append(b[r - 1] + x)\n        b.pop(r)\n    return str(res)\n"
    },
    {
        "number": 2544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.split()[i * 2 + 1].split())\n        graph[x].append(y)\n        graph[y].append(x)\n    for i in range(n):\n        if len(graph[i]) == 1:\n            return str(i) + \" \" + str(i)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(graph[i]) == 1 and len(graph[j]) == 1:\n                return str(i) + \" \" + str(j)\n    return \"Impossible\"\n"
    },
    {
        "number": 2545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if a == 0 and b == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 2546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, s = map(int, stdin.split())\n        l = list(map(int, stdin.split()))\n        l.sort()\n        median = l[len(l) // 2]\n        if median % 2 == 0:\n            median = median // 2\n        else:\n            median = median // 2 + 1\n        print(median)\n    return \"\"\n"
    },
    {
        "number": 2547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split())))\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)\n    books = list(books)\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books = set(books)"
    },
    {
        "number": 2548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(a[i:j+1])\n            if s == j - i + 1:\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 2549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    a = []\n    b = []\n    for i in range(m):\n        a.append(int(input()))\n        b.append(int(input()))\n    res = 0\n    for i in range(n):\n        res += d[i] * (a[i] - b[i])\n    return str(res)\n"
    },
    {
        "number": 2550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    avg = sum(scores) / n\n    if n == 1:\n        return max(scores)\n    if max(scores) > m:\n        return m\n    if min(scores) < 0:\n        return 0\n    if sum(scores) < avg * n:\n        return avg\n    return max(scores)"
    },
    {
        "number": 2551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    z = ''\n    for i in range(len(s)):\n        z += s[i]\n    for i in range(len(t)):\n        z += t[i]\n    return z"
    },
    {
        "number": 2552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        h = list(map(int, stdin.split()))\n        h = h[1:]\n        h = list(map(lambda x: x - 1, h))\n        if all(x == 0 for x in h):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 2553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2 == 0:\n        return \"No\"\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] += 1\n            if sum(a) % 2 == 0:\n                return \"Yes\"\n            a[i] -= 1\n    return \"No\""
    },
    {
        "number": 2554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            max_sum = max(max_sum, sum(a[i:i + 2]))\n    return str(max_sum)\n"
    },
    {
        "number": 2555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        res.append(a[l-1] - a[r-1] + a[l] - a[r])\n    return''.join(map(str, res))"
    },
    {
        "number": 2556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rooms = []\n    for i in range(n):\n        c, s = map(int, stdin.split())\n        rooms.append((c, s))\n    rooms.sort(key=lambda x: x[1])\n    res = 0\n    for i in range(n):\n        c, s = rooms[i]\n        res += c * (s - i)\n    return str(res)\n"
    },
    {
        "number": 2557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for _ in range(m):\n        pairs.append(list(map(int, stdin.split())))\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if pairs[i][0] == pairs[j][1]:\n                dp[i][j] = 1\n            elif pairs[i][1] == pairs[j][0]:\n                dp[i][j] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if dp[i][j] == 1:\n                for k in range(i + 1, n):\n                    if dp[i][k] == 1 and dp[k][j] == 1:\n                        dp[i][j] = 1\n                        break\n    return str(sum(dp[0]))\n"
    },
    {
        "number": 2558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c, d = map(int, stdin.split())\n        if a > 0 and b > 0 and c > 0 and d > 0:\n            if a * (b + c) <= d:\n                print(-1)\n            else:\n                print(a * (b + c) - d)\n    return \"\"\n"
    },
    {
        "number": 2559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        k = int(stdin.split()[i])\n        roads = list(map(int, stdin.split()[i + 1].split()))\n        roads.sort()\n        G = 0\n        B = 0\n        for i in range(k):\n            G += roads[i]\n            B += roads[k - 1 - i]\n        print(G, B)\n    return G, B\n"
    },
    {
        "number": 2560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, l, r = map(int, stdin.split())\n        if n <= l and r <= n:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a = int(stdin)\n        x = 0\n        y = 0\n        while x!= y:\n            x = x ^ a\n            y = y ^ a\n        print(x)\n    return \"\"\n"
    },
    {
        "number": 2562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    gcd = 1\n    for i in range(1, n):\n        gcd = gcd * a[i]\n    return str(sum(a) * gcd % 1000000007)\n"
    },
    {
        "number": 2563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    if n == 1:\n        return a\n    if n == 2:\n        return str(int(a[0]) * int(a[1]))\n    if n == 3:\n        return str(int(a[0]) * int(a[1]) * int(a[2]))\n    if n == 4:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]))\n    if n == 5:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]))\n    if n == 6:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]))\n    if n == 7:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]))\n    if n == 8:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]))\n    if n == 9:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]))\n    if n == 10:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]))\n    if n == 11:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]))\n    if n == 12:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]))\n    if n == 13:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]) * int(a[12]))\n    if n == 14:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]) * int(a[12]) * int(a[13]))\n    if n == 15:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]) * int(a[12]) * int(a[13]) * int(a[14]))\n    if n == 16:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]) * int(a[12]) * int(a[13]) * int(a[14]) * int(a[15]))\n    if n == 17:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]) * int(a[12]) * int(a[13]) * int(a[14]) * int(a[15]) * int(a[16]))\n    if n == 18:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a[5]) * int(a[6]) * int(a[7]) * int(a[8]) * int(a[9]) * int(a[10]) * int(a[11]) * int(a[12]) * int(a[13]) * int(a[14]) * int(a[15]) * int(a[16]) * int(a[17]))\n    if n == 19:\n        return str(int(a[0]) * int(a[1]) * int(a[2]) * int(a[3]) * int(a[4]) * int(a["
    },
    {
        "number": 2564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    if a > n:\n        return str(a - n)\n    if b > n:\n        return str(b - n)\n    return str(0)"
    },
    {
        "number": 2565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a = list(map(int, stdin.split()))\n        b = list(map(int, stdin.split()))\n        c = []\n        for j in range(a[0]):\n            c.append(0)\n        for j in range(a[1]):\n            c.append(1)\n        for j in range(a[2]):\n            c.append(2)\n        for j in range(b[0]):\n            c.append(0)\n        for j in range(b[1]):\n            c.append(1)\n        for j in range(b[2]):\n            c.append(2)\n        print(max(c))\n    return \"\"\n"
    },
    {
        "number": 2566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        k = int(stdin)\n        a = list(map(int, stdin.split()))\n        a = a[1:]\n        a = list(filter(lambda x: x == 1, a))\n        if len(a) == 0:\n            print(0)\n        else:\n            print(min(a))\n    return \"\"\n"
    },
    {
        "number": 2567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()\n        s = s[1]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s[::-1]\n        s = s[1:]\n        s = s["
    },
    {
        "number": 2568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        s = stdin.strip()\n        res = 0\n        for i in range(len(s)):\n            if s[i] == '+':\n                res += 1\n            else:\n                res -= 1\n        print(res)\n    return ''"
    },
    {
        "number": 2569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"4\"\n    elif n == 3:\n        return \"4\"\n    elif n == 4:\n        return \"4\"\n    else:\n        return \"4\""
    },
    {
        "number": 2570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x = map(int, stdin.split())\n        a = list(map(int, stdin.split()[1].split()))\n        b = list(map(int, stdin.split()[2].split()))\n        if sum(a) + sum(b) <= x:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 2571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    doors = stdin.split()[1:]\n    for i in range(T):\n        n = int(doors[i * 2])\n        a = list(map(int, doors[i * 2 + 1].split()))\n        b = []\n        for j in range(n):\n            if a[j] == 0:\n                continue\n            if a[j] > 100:\n                continue\n            if a[j] * (-1) > 100:\n                continue\n            b.append(a[j] * (-1))\n        print(b)\n    return \"\"\n"
    },
    {
        "number": 2572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    return str(min(min(a[i][j] for i in range(n)) for j in range(m)))\n"
    },
    {
        "number": 2573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    board = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        board[x - 1][y - 1] = 1\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i].append(0)\n            else:\n                board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else:\n            board[i].insert(0, 0)\n    for i in range(n):\n        if board[i][k - 1] == 1:\n            board[i].append(0)\n        else"
    },
    {
        "number": 2574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    max_sum = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for t in range(l + 1, n):\n                        sum = arr[i] * arr[j] * arr[k] * arr[l] * arr[t]\n                        if sum > max_sum:\n                            max_sum = sum\n    return str(max_sum)\n"
    },
    {
        "number": 2575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a = int(stdin)\n        if is_regular_polygon(a):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\ndef"
    },
    {
        "number": 2576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c, d = map(int, stdin.split())\n        if a <= d and b <= c:\n            return str(max(a, b, c, d))\n        elif a <= d and b <= c:\n            return str(max(a, b, c))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a, b))\n        elif a <= d and b <= c:\n            return str(max(a,"
    },
    {
        "number": 2577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == a[i][j + 1] == a[i][j - 1] == a[i + 1][j] == a[i - 1][j] == a[i + 1][j + 1] == a[i - 1][j - 1] == a[i + 1][j - 1] == a[i - 1][j + 1] == a[i - 1][j - 1]:\n                b[i][j] = a[i][j]\n            else:\n                b[i][j] = a[i][j] + 1\n    return '\\n'.join([' '.join(map(str, i)) for i in b])\n"
    },
    {
        "number": 2578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    groups = []\n    for _ in range(m):\n        groups.append(list(map(int, stdin.split())))\n    \n    # print(groups)\n    \n    # print(n, m)\n    \n    # print(groups)\n    \n    # print(groups[0])\n    \n    # print(groups[1])\n    \n    # print(groups[2])\n    \n    # print(groups[3])\n    \n    # print(groups[4])\n    \n    # print(groups[5])\n    \n    # print(groups[6])\n    \n    # print(groups[7])\n    \n    # print(groups[8])\n    \n    # print(groups[9])\n    \n    # print(groups[10])\n    \n    # print(groups[11])\n    \n    # print(groups[12])\n    \n    # print(groups[13])\n    \n    # print(groups[14])\n    \n    # print(groups[15])\n    \n    # print(groups[16])\n    \n    # print(groups[17])\n    \n    # print(groups[18])\n    \n    # print(groups[19])\n    \n    # print(groups[20])\n    \n    # print(groups[21])\n    \n    # print(groups[22])\n    \n    # print(groups[23])\n    \n    # print(groups[24])\n    \n    # print(groups[25])\n    \n    # print(groups[26])\n    \n    # print(groups[27])\n    \n    # print(groups[28])\n    \n    # print(groups[29])\n    \n    # print(groups[30])\n    \n    # print(groups[31])\n    \n    # print(groups[32])\n    \n    # print(groups[33])\n    \n    # print(groups[34])\n    \n    # print(groups[35])\n    \n    # print(groups[36])\n    \n    # print(groups[37])\n    \n    # print(groups[38])\n    \n    # print(groups[39])\n    \n    # print(groups[40])\n    \n    # print(groups[41])\n    \n    # print(groups[42])\n    \n    # print(groups[43])\n    \n    # print(groups[44])\n    \n    # print(groups[45])\n    \n    # print(groups[46])\n    \n    # print(groups[47])\n    \n    # print(groups[48])\n    \n    # print(groups[49])\n    \n    # print(groups[50])\n    \n    # print(groups[51])\n    \n    # print(groups[52])\n    \n    # print(groups[53])\n    \n    # print(groups[54])\n    \n    # print(groups[55])\n    \n    # print(groups[56])\n    \n    # print(groups[57])\n    \n    # print(groups[58])\n    \n    # print(groups[59])\n    \n    # print(groups[60])\n    \n    # print(groups[61])\n    \n    # print(groups[62])\n    \n    # print(groups[63])\n    \n    # print(groups[64])\n    \n    # print(groups[65])\n    \n    # print(groups[66])\n    \n    # print(groups[67])\n    \n    # print(groups[68])\n    \n    # print(groups[69])\n    \n    # print(groups[70])\n    \n    # print(groups[71])\n    \n    # print(groups[72])\n    \n    # print(groups[73])\n    \n    # print(groups[74])\n    \n    # print(groups[75])\n    \n    # print(groups[76])\n    \n    # print(groups[77])\n    \n    # print(groups[78])\n    \n    # print(groups[79])\n    \n    # print(groups[80])\n    \n    # print(groups[81])\n    \n    # print(groups[82])\n    \n    # print(groups[83])\n    \n    # print(groups[84])\n    \n    # print(groups[85])\n    \n    # print(groups[86])\n    \n    # print(groups[87])\n    \n    # print(groups[88])\n    \n    # print(groups[89])\n    \n    # print(groups[90])\n    \n    # print(groups[91])\n    \n    # print(groups[92])\n    \n    # print(groups[93])\n    \n    # print(groups[94])\n    \n    # print(groups[95])\n    \n    # print(groups[96])\n    \n    # print(groups[97])\n    \n    # print(groups[98])\n    \n    # print(groups[99])\n    \n    # print(groups[100])\n    \n    # print(groups[101])\n    \n    # print(groups[102])\n    \n    # print(groups[103])\n    \n    # print(groups[104])\n    \n    # print(groups[105])\n    \n    # print(groups[106])\n    \n    # print(groups[107])\n    \n    # print(groups[108])\n    \n    # print(groups[109])\n    \n    # print(groups[110])\n    \n    # print(groups[111])\n    \n    # print(groups[112])\n    \n    # print(groups[113])\n    \n    # print(groups[114])\n    \n    # print(groups[115])\n    \n    # print(groups[116])\n    \n    # print(groups[117])\n    \n    # print(groups[118])\n    \n    # print(groups[119])\n    \n    # print(groups[120])\n    \n    # print(groups[121])\n    \n    # print(groups[122])\n    \n    # print(groups[123])\n    \n    # print(groups[124])\n    \n    # print(groups[125])\n    \n    # print(groups[126])\n    \n    # print(groups[127])\n    \n    # print(groups[128])\n    \n    # print(groups[129])\n    \n    # print(groups[130])\n    \n    # print(groups[131])\n    \n    # print(groups[132])\n    \n    # print(groups[133])\n    \n    # print(groups[134])\n    \n    # print(groups[135])\n    \n    # print(groups[136])\n    \n    # print(groups[137])\n    \n    # print(groups[138])\n    \n    # print(groups[139])\n    \n    # print(groups[140])\n    \n    "
    },
    {
        "number": 2579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y, k = map(int, stdin.split())\n    if (l <= x <= r and y <= x <= y) and (k <= x / y <= k <= y / x):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 2580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        nodes = list(map(int, stdin.split()))\n        n = nodes[0]\n        edges = nodes[1:]\n        edges.sort()\n        visited = set()\n        visited.add(edges[0])\n        dist = 0\n        for i in range(1, n):\n            if edges[i] in visited:\n                dist += 1\n            visited.add(edges[i])\n        print(dist)\n    return\n"
    },
    {
        "number": 2581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chessboard = [[int(x) for x in stdin.split()] for _ in range(n)]\n    chessboard = [[x, y] for x in range(1, n + 1) for y in range(1, n + 1)]\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x[1], x[0]))\n    chessboard = sorted(chessboard, key=lambda x: (x[0], x[1]))\n    chessboard = sorted(chessboard, key=lambda x: (x"
    },
    {
        "number": 2582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    special = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] + p[j] == max(p):\n                special += 1\n    return str(special)"
    },
    {
        "number": 2583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Ashishgup\"\n    else:\n        return \"FastestFinger\""
    },
    {
        "number": 2584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    goods = list(map(int, stdin.split()))\n    goods.sort(reverse=True)\n    coins = p\n    count = 0\n    for i in range(k):\n        if coins >= goods[i]:\n            coins -= goods[i]\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 2585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if gcd(i, j) > gcd(i, j - 1):\n                return str(i) + \" \" + str(j)\n\ndef"
    },
    {
        "number": 2586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n                print('B', end='')\n            else:\n                print('W', end='')\n        print()\n    return ''"
    },
    {
        "number": 2587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[i])\n        x = int(stdin.split()[i+1])\n        k = int(stdin.split()[i+2])\n        r = int(stdin.split()[i+3])\n        if x < n:\n            x = x * (10**(n-x))\n        if k < n:\n            k = k * (10**(n-k))\n        if x > k:\n            x = x - k\n        if x > r:\n            x = x - r\n        print(x)\n    return ''"
    },
    {
        "number": 2588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = stdin\n    if n == 1:\n        return str(a)\n    if n == 2:\n        return str(a + b)\n    if n == 3:\n        return str(a + b + a)\n    if n == 4:\n        return str(a + b + a + b)\n    if n == 5:\n        return str(a + b + a + b + a)\n    if n == 6:\n        return str(a + b + a + b + a + b)\n    if n == 7:\n        return str(a + b + a + b + a + b + a)\n    if n == 8:\n        return str(a + b + a + b + a + b + a + b)\n    if n == 9:\n        return str(a + b + a + b + a + b + a + b + a)\n    if n == 10:\n        return str(a + b + a + b + a + b + a + b + a + b)\n    if n == 11:\n        return str(a + b + a + b + a + b + a + b + a + b + a)\n    if n == 12:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b)\n    if n == 13:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a)\n    if n == 14:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b)\n    if n == 15:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b + a)\n    if n == 16:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b)\n    if n == 17:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a)\n    if n == 18:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a)\n    if n == 19:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a)\n    if n == 20:\n        return str(a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a"
    },
    {
        "number": 2589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        if sum(a) % x!= 0:\n            print(len(a))\n        else:\n            print(-1)\n    return \"\"\n"
    },
    {
        "number": 2590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, x = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]\n        a.sort()\n        a.reverse()\n        a = a[:n]"
    },
    {
        "number": 2591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= abs(a[j] - a[i + 1]):\n                a[i], a[j] = a[j], a[i]\n    return''.join(map(str, a))\n"
    },
    {
        "number": 2592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        if a + b + c > 10:\n            print(0)\n        elif a + b + c == 0:\n            print(1)\n        elif a + b + c == 1:\n            print(2)\n        elif a + b + c == 2:\n            print(3)\n        elif a + b + c == 3:\n            print(4)\n        elif a + b + c == 4:\n            print(5)\n        elif a + b + c == 5:\n            print(6)\n        elif a + b + c == 6:\n            print(7)\n        else:\n            print(8)\n    return ''"
    },
    {
        "number": 2593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] & a[j] == a[i] or a[i] & a[j] == a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m))"
    },
    {
        "number": 2595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        if a == b:\n            return \"0\"\n        if a > b:\n            return str(a - b)\n        if a < b:\n            return str(b - a)"
    },
    {
        "number": 2596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, t = map(int, stdin.split())\n    if t > 1000:\n        return \"impossible\"\n    if t == 0:\n        return str(n) + \" \" + str(k)\n    if t == 1:\n        return str(n) + \" \" + str(k) + \" \" + str(m)\n    if t == 2:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t)\n    if t == 3:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n)\n    if t == 4:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k)\n    if t == 5:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m)\n    if t == 6:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n)\n    if t == 7:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k)\n    if t == 8:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k)\n    if t == 9:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m)\n    if t == 10:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n)\n    if t == 11:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k)\n    if t == 12:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n)\n    if t == 13:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n)\n    if t == 14:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n)\n    if t == 15:\n        return str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(t) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" + str(k) + \" \" + str(m) + \" \" + str(n) + \" \" +"
    },
    {
        "number": 2597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(k):\n        n = int(stdin.split()[i])\n        a = list(map(int, stdin.split()[i + 1:]))\n        print(max(a))\n    return \"\"\n"
    },
    {
        "number": 2598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c = map(int, stdin.split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    colors = {i: 'R' for i in range(n)}\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        if colors[i] == 'R':\n            colors[i] = 'B'\n            break\n    for i in range(n):\n        if colors[i] == 'B':\n            colors[i] = 'R'\n            break\n    for i in range(n):\n        "
    },
    {
        "number": 2599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        if n == k:\n            print(-1)\n        else:\n            print(n - (n - k) % n)\n    return \"\""
    },
    {
        "number": 2600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    min_changes = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    matrix[i][j] = 0\n                else:\n                    if matrix[i - 1][j] == matrix[i][j - 1]:\n                        matrix[i][j] = 1\n                    else:\n                        matrix[i][j] = 0\n                min_changes += 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                if i == 0 or j == 0:\n                    matrix[i][j] = 1\n                else:\n                    if matrix[i - 1][j] == matrix[i][j - 1]:\n                        matrix[i][j] = 0\n                    else:\n                        matrix[i][j] = 1\n                min_changes += 1\n    return str(min_changes)\n"
    },
    {
        "number": 2601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if i == 1:\n            if stdin.count(str(i)) == n:\n                return \"YES\"\n        else:\n            if stdin.count(str(i)) == n - i:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 2602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, m = map(int, stdin.split())\n    if a + b > n + m:\n        return \"No\"\n    if a + b < n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \"Yes\"\n    if a + b == n + m:\n        return \""
    },
    {
        "number": 2603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        if a == sorted(a):\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 2604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, d = map(int, stdin.split())\n    n = int(stdin)\n    sausages = []\n    for i in range(n):\n        x, y, r = map(int, stdin.split())\n        sausages.append((x, y, r))\n    return str(len(sausages))\n"
    },
    {
        "number": 2605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    id = list(map(int, stdin.split()))\n    id.sort()\n    c.sort()\n    c = list(map(lambda x: x * c[id.index(x)], c))\n    return str(sum(c))"
    },
    {
        "number": 2606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dishes = list(map(int, stdin.split()))\n    dishes.sort()\n    res = 0\n    for i in range(n):\n        res += abs(dishes[i] - i)\n    return str(res)\n"
    },
    {
        "number": 2607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        s = stdin.split()[i]\n        if len(s) == 1:\n            print(-1)\n        else:\n            print(s)\nsolution(input())\n"
    },
    {
        "number": 2608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    return str(count_white(n, m, x1, y1, x2, y2) + count_white(n, m, x3, y3, x4, y4))\n\n\ndef"
    },
    {
        "number": 2609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x["
    },
    {
        "number": 2610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, p, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        a.sort()\n        a.reverse()\n        dp = [0] * (p + 1)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(a[i], p + 1):\n                if dp[j - a[i]] == 1:\n                    dp[j] = 1\n                    break\n        print(dp[k])\n    return \"\"\n"
    },
    {
        "number": 2611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    piles = list(map(int, stdin.split()))\n    queries = []\n    for _ in range(q):\n        t, x = map(int, stdin.split())\n        queries.append((t, x))\n    return''.join(map(str, solution_naive(n, q, piles, queries)))\n\n\ndef"
    },
    {
        "number": 2612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, *s = map(int, stdin.split())\n        if n == 1:\n            print(1)\n        else:\n            print(2)\n    return \"\""
    },
    {
        "number": 2613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, z = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    score = 0\n    for i in range(n):\n        score += a[i]\n        if i < n - 1:\n            if i == 0:\n                score += a[i + 1]\n            elif i == n - 1:\n                score += a[i - 1]\n            else:\n                score += max(a[i + 1], a[i - 1])\n        if i < n - k:\n            score += a[i + k]\n            if i == 0:\n                score += a[i + k + 1]\n            elif i == n - k:\n                score += a[i - 1]\n            else:\n                score += max(a[i + k + 1], a[i - 1])\n        if i < n - z:\n            score += a[i + z]\n            if i == 0:\n                score += a[i + z + 1]\n            elif i == n - z:\n                score += a[i - 1]\n            else:\n                score += max(a[i + z + 1], a[i - 1])\n    return str(score)\n"
    },
    {
        "number": 2614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bags = []\n    for i in range(n):\n        bags.append(stdin.split()[i+1])\n    bags = sorted(bags, key=lambda x: int(x.split()[1]))\n    max_distance = 0\n    for i in range(n-1):\n        if bags[i][0] == bags[i+1][0]:\n            max_distance = max(max_distance, int(bags[i][1]) + int(bags[i+1][1]))\n    return str(max_distance)"
    },
    {
        "number": 2615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    elegant = 0\n    for i in range(2, n+1):\n        if gcd(i) == 1:\n            elegant += 1\n    return str(elegant)\n\ndef"
    },
    {
        "number": 2616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        n_piles = int(stdin.split()[i])\n        piles = list(map(int, stdin.split()[i+1:i+1+n_piles]))\n        if sum(piles) == 0:\n            return \"Second\"\n        elif sum(piles) == n_piles*(n_piles-1):\n            return \"First\"\n        else:\n            return \"Second\"\n\nsolution(\"3\\n2 5 4\\n8\\n1 1 1 1 1 1 1 1\\n6\\n1 2 3 4 5 6\\n6\\n1 1 1\\n1\\n1000000000\\n5\\n1 2 2 1 1\\n3\\n1 1 1\")\n"
    },
    {
        "number": 2617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        print(i, end=\" \")\n    return\n\nsolution(input())\n"
    },
    {
        "number": 2618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    x, a = map(int, stdin.split())\n    y, b = map(int, stdin.split())\n    p.sort()\n    if x + y > k:\n        return -1\n    if x + y == k:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    if y == 0:\n        return n\n    if x == 0 and y == 0:\n        return n\n    if x == 0:\n        return n\n    "
    },
    {
        "number": 2619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, c = map(int, stdin.split())\n    stars = []\n    for i in range(n):\n        stars.append(list(map(int, stdin.split())))\n    views = []\n    for i in range(q):\n        views.append(list(map(int, stdin.split())))\n    res = []\n    for i in range(q):\n        res.append(0)\n    for i in range(q):\n        x1, y1, x2, y2 = views[i]\n        for j in range(n):\n            if x1 <= stars[j][0] <= x2 and y1 <= stars[j][1] <= y2:\n                res[i] += stars[j][2]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 2620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(range(1, n + 1))\n    for _ in range(q):\n        l, r, x = map(int, stdin.split())\n        if l == 1:\n            a[l - 1] += x\n        else:\n            a[l - 1] -= x\n            a[l - 2] += x\n        a[r - 1] -= x\n        a[r - 2] -= x\n        a = sorted(a)\n    return str(sum(a))\n"
    },
    {
        "number": 2621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    if h[0] == 1:\n        return \"YES\"\n    if h[0] > k:\n        return \"NO\"\n    if h[0] == k:\n        return \"YES\"\n    if h[0] == k + 1:\n        return \"YES\"\n    if h[0] == k + 2:\n        return \"YES\"\n    if h[0] == k + 3:\n        return \"YES\"\n    if h[0] == k + 4:\n        return \"YES\"\n    if h[0] == k + 5:\n        return \"YES\"\n    if h[0] == k + 6:\n        return \"YES\"\n    if h[0] == k + 7:\n        return \"YES\"\n    if h[0] == k + 8:\n        return \"YES\"\n    if h[0] == k + 9:\n        return \"YES\"\n    if h[0] == k + 10:\n        return \"YES\"\n    if h[0] == k + 11:\n        return \"YES\"\n    if h[0] == k + 12:\n        return \"YES\"\n    if h[0] == k + 13:\n        return \"YES\"\n    if h[0] == k + 14:\n        return \"YES\"\n    if h[0] == k + 15:\n        return \"YES\"\n    if h[0] == k + 16:\n        return \"YES\"\n    if h[0] == k + 17:\n        return \"YES\"\n    if h[0] == k + 18:\n        return \"YES\"\n    if h[0] == k + 19:\n        return \"YES\"\n    if h[0] == k + 20:\n        return \"YES\"\n    if h[0] == k + 21:\n        return \"YES\"\n    if h[0] == k + 22:\n        return \"YES\"\n    if h[0] == k + 23:\n        return \"YES\"\n    if h[0] == k + 24:\n        return \"YES\"\n    if h[0] == k + 25:\n        return \"YES\"\n    if h[0] == k + 26:\n        return \"YES\"\n    if h[0] == k + 27:\n        return \"YES\"\n    if h[0] == k + 28:\n        return \"YES\"\n    if h[0] == k + 29:\n        return \"YES\"\n    if h[0] == k + 30:\n        return \"YES\"\n    if h[0] == k + 31:\n        return \"YES\"\n    if h[0] == k + 32:\n        return \"YES\"\n    if h[0] == k + 33:\n        return \"YES\"\n    if h[0] == k + 34:\n        return \"YES\"\n    if h[0] == k + 35:\n        return \"YES\"\n    if h[0] == k + 36:\n        return \"YES\"\n    if h[0] == k + 37:\n        return \"YES\"\n    if h[0] == k + 38:\n        return \"YES\"\n    if h[0] == k + 39:\n        return \"YES\"\n    if h[0] == k + 40:\n        return \"YES\"\n    if h[0] == k + 41:\n        return \"YES\"\n    if h[0] == k + 42:\n        return \"YES\"\n    if h[0] == k + 43:\n        return \"YES\"\n    if h[0] == k + 44:\n        return \"YES\"\n    if h[0] == k + 45:\n        return \"YES\"\n    if h[0] == k + 46:\n        return \"YES\"\n    if h[0] == k + 47:\n        return \"YES\"\n    if h[0] == k + 48:\n        return \"YES\"\n    if h[0] == k + 49:\n        return \"YES\"\n    if h[0] == k + 50:\n        return \"YES\"\n    if h[0] == k + 51:\n        return \"YES\"\n    if h[0] == k + 52:\n        return \"YES\"\n    if h[0] == k + 53:\n        return \"YES\"\n    if h[0] == k + 54:\n        return \"YES\"\n    if h[0] == k + 55:\n        return \"YES\"\n    if h[0] == k + 56:\n        return \"YES\"\n    if h[0] == k + 57:\n        return \"YES\"\n    if h[0] == k + 58:\n        return \"YES\"\n    if h[0] == k + 59:\n        return \"YES\"\n    if h[0] == k + 60:\n        return \"YES\"\n"
    },
    {
        "number": 2622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid1 = stdin.split()\n    grid2 = stdin.split()\n    grid1 = [[grid1[i][j] for j in range(m)] for i in range(n)]\n    grid2 = [[grid2[i][j] for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid1[i][j]!= grid2[i][j]:\n                return str(i + 1) + \" \" + str(j + 1)\n    return \"0 0\""
    },
    {
        "number": 2623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    res = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            res = max(res, s[i - 1])\n    return res\n"
    },
    {
        "number": 2624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(q):\n        s, x = stdin.split()\n        s = s[0]\n        x = int(x)\n        if s == '>':\n            a = a[::-1]\n            a[x] = -a[x]\n        else:\n            a[x] = -a[x]\n    return''.join(map(str, a))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        k, x = map(int, stdin.split())\n        if k == 1:\n            print(x)\n        else:\n            print(x + sum(map(int, str(x))))\n    return ''"
    },
    {
        "number": 2626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"4\"\n    if n == 7:\n        return \"5\"\n    if n == 8:\n        return \"5\"\n    if n == 9:\n        return \"6\"\n    if n == 10:\n        return \"7\"\n    if n == 11:\n        return \"8\"\n    if n == 12:\n        return \"9\"\n    if n == 13:\n        return \"10\"\n    if n == 14:\n        return \"11\"\n    if n == 15:\n        return \"12\"\n    if n == 16:\n        return \"13\"\n    if n == 17:\n        return \"14\"\n    if n == 18:\n        return \"15\"\n    if n == 19:\n        return \"16\"\n    if n == 20:\n        return \"17\"\n    if n == 21:\n        return \"18\"\n    if n == 22:\n        return \"19\"\n    if n == 23:\n        return \"20\"\n    if n == 24:\n        return \"21\"\n    if n == 25:\n        return \"22\"\n    if n == 26:\n        return \"23\"\n    if n == 27:\n        return \"24\"\n    if n == 28:\n        return \"25\"\n    if n == 29:\n        return \"26\"\n    if n == 30:\n        return \"27\"\n    if n == 31:\n        return \"28\"\n    if n == 32:\n        return \"29\"\n    if n == 33:\n        return \"30\"\n    if n == 34:\n        return \"31\"\n    if n == 35:\n        return \"32\"\n    if n == 36:\n        return \"33\"\n    if n == 37:\n        return \"34\"\n    if n == 38:\n        return \"35\"\n    if n == 39:\n        return \"36\"\n    if n == 40:\n        return \"37\"\n    if n == 41:\n        return \"38\"\n    if n == 42:\n        return \"39\"\n    if n == 43:\n        return \"40\"\n    if n == 44:\n        return \"41\"\n    if n == 45:\n        return \"42\"\n    if n == 46:\n        return \"43\"\n    if n == 47:\n        return \"44\"\n    if n == 48:\n        return \"45\"\n    if n == 49:\n        return \"46\"\n    if n == 50:\n        return \"47\"\n    if n == 51:\n        return \"48\"\n    if n == 52:\n        return \"49\"\n    if n == 53:\n        return \"50\"\n    if n == 54:\n        return \"51\"\n    if n == 55:\n        return \"52\"\n    if n == 56:\n        return \"53\"\n    if n == 57:\n        return \"54\"\n    if n == 58:\n        return \"55\"\n    if n == 59:\n        return \"56\"\n    if n == 60:\n        return \"57\"\n    if n == 61:\n        return \"58\"\n    if n == 62:\n        return \"59\"\n    if n == 63:\n        return \"60\"\n    if n == 64:\n        return \"61\"\n    if n == 65:\n        return \"62\"\n    if n == 66:\n        return \"63\"\n    if n == 67:\n        return \"64\"\n    if n == 68:\n        return \"65\"\n    if n == 69:\n        return \"66\"\n    if n == 70:\n        return \"67\"\n    if n == 71:\n        return \"68\"\n    if n == 72:\n        return \"69\"\n    if n == 73:\n        return \"70\"\n    if n == 74:\n        return \"71\"\n    if n == 75:\n        return \"72\"\n    if n == 76:\n        return \"73\"\n    if n == 77:\n        return \"74\"\n    if n == 78:\n        return \"75\"\n    if n == 79:\n        return \"76\"\n    if n == 80:\n        return \"77\"\n    if n == 81:\n        return \"78\"\n    if n == 82:\n        return \"79\"\n    if n == 83:\n        return \"80\"\n    if n == 84:\n        return \"81\"\n    if n == 85:\n        return \"82\"\n    if n == 86:\n        return \"83\"\n    if n == 87:\n        return \"84\"\n    if n == 88:\n        return \"85\"\n    if n == 89:\n        return \"86\"\n    if n == 90:\n        return \"87\"\n    if n == 91:\n        return \"88\"\n    if n == 92:\n        return \"89\"\n    if n == 93:\n        return \"90\"\n    if n == 94:\n        return \"91\"\n    if n == 95:\n        return \"92\"\n    if n == 96:\n        return \"93\"\n    if n == 97:\n        return \"94\"\n    if n == 98:\n        return \"95\"\n    if n == 99:\n        return \"96\"\n    if n == 100:\n        return \"97\"\n    if n == 101:\n        return \"98\"\n    if n == 102:\n        return \"99\"\n    if n == 103:\n        return \"100\"\n    if n == 104:\n        return \"101\"\n    if n == 105:\n        return \"102\"\n    if n == 106:\n        return \"103\"\n    if n == 107:\n        return \"104\"\n    if n == 108:\n        return \"105\"\n    if n == 109:\n        return \"106\"\n    if n == 110:\n        return \"107\"\n    if n == 111:\n        return \"108\"\n    if n == 112:\n        return \"109\"\n    if n == 113:\n        return \"110\"\n    if n == 114:\n        return \"111\"\n    if n == 115:\n        return \"112\"\n    if n == 116:\n        return \"113\"\n    if n == 117:\n        return \"114\"\n    if n == 118:\n        return \"115\"\n    if n == 119:\n        return \"116\"\n    if n == 120:\n        return \"117\"\n    if n == 121:\n        return \"118\"\n    if n == 122:\n        return \"119\"\n    if n == 123:\n        return \"120\"\n    if n == 124:\n        return \"121\"\n    if n == 125:\n        return \"122\"\n    if n == 126:\n        return \"123\"\n    if n == 127:\n        return"
    },
    {
        "number": 2627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.split(\"\\n\")\n    for i in range(len(matrix)):\n        matrix[i] = list(matrix[i])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n    for i in range(len(mat"
    },
    {
        "number": 2628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    return \"\".join(map(lambda x: str(x), range(1, 2 ** n)))"
    },
    {
        "number": 2629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0] * n for _ in range(n)]\n    i, j, di, dj = 0, 0, 0, 1\n    for k in range(1, n * n + 1):\n        matrix[i][j] = k\n        if matrix[i][j] == n * n:\n            break\n        if matrix[i][j] % 2 == 0:\n            di, dj = dj, -di\n        i += di\n        j += dj\n    return \"\\n\".join([\" \".join(map(str, row)) for row in matrix])"
    },
    {
        "number": 2630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [[0] * n for _ in range(m)]\n    grid[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                grid[i][j] = grid[i][j - 1]\n            elif j == 0:\n                grid[i][j] = grid[i - 1][j]\n            else:\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1]\n    return grid[m - 1][n - 1]\n"
    },
    {
        "number": 2631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, prerequisites = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * n\n    stack = []\n    for i in range(n):\n        if not visited[i]:\n            if not dfs(i, graph, visited, stack):\n                return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 2632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [[0] * n for _ in range(m)]\n    grid[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                grid[i][j] += grid[i-1][j]\n            if j > 0:\n                grid[i][j] += grid[i][j-1]\n    return str(grid[m-1][n-1])"
    },
    {
        "number": 2633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dungeon = stdin.split()\n    m, n = int(dungeon[0]), int(dungeon[1])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = int(dungeon[2])\n    for i in range(1, m):\n        dp[i][0] = dp[i - 1][0] + int(dungeon[3 + i * 2])\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + int(dungeon[4 + j * 2])\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + int(dungeon[5 + i * 2 + j])\n    return str(dp[-1][-1])"
    },
    {
        "number": 2634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = sorted(map(int, stdin.split()))\n    return map(list, itertools.combinations(nums, len(nums)))"
    },
    {
        "number": 2635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(m)]\n    i, j, di, dj = 0, 0, 0, 1\n    for k in range(m * n):\n        matrix[i][j] = stdin[k]\n        if matrix[i][j] == 'L':\n            di, dj = -dj, di\n        elif matrix[i][j] == 'R':\n            di, dj = dj, -di\n        elif matrix[i][j] == 'U':\n            di, dj = -di, -dj\n        elif matrix[i][j] == 'D':\n            di, dj = di, dj\n        i += di\n        j += dj\n    return ''.join(matrix[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 2636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    res = []\n    def backtrack(nums, tmp):\n        if len(tmp) == len(nums):\n            res.append(tmp)\n            return\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            backtrack(nums[:i] + nums[i+1:], tmp + [nums[i]])\n    backtrack(nums, [])\n    return res\n\nstdin = \"\"\"\n1 1 2\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 2638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return list(map(list, itertools.combinations(nums, len(nums))))"
    },
    {
        "number": 2640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    obstacles = []\n    for i in range(H):\n        obstacles.append(stdin[i * W:(i + 1) * W])\n    obstacles = list(map(list, zip(*obstacles)))\n    obstacles = list(map(lambda x: ''.join(x), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '.'), obstacles))\n    obstacles = list(map(lambda x: x.replace('.', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('..', '.'), obstacles))\n    obstacles = list(map(lambda x: x.replace('.', '..'), obstacles))\n    obstacles = list(map(lambda x: x.replace('..', '.'), obstacles))\n    obstacles = list(map(lambda x: x.replace('.', '.'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list(map(lambda x: x.replace('#', '#'), obstacles))\n    obstacles = list"
    },
    {
        "number": 2641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    r = list(map(int, stdin.split()))\n    res = []\n    for i in range(Q):\n        res.append(count_colors(c, l, r))\n    return \"\\n\".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 2642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] * A[j] + B[i] * B[j] == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, q = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    n = len(d)\n    x = list(map(int, stdin.split()))\n    m = list(map(int, stdin.split()))\n    res = []\n    for i in range(q):\n        a = []\n        for j in range(n):\n            a.append(d[(j + 1) % n] + d[(j + 2) % n] % k)\n        a.sort()\n        res.append(a[x[i] % m[i]])\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 2644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    if n == 1:\n        return str(p[0])\n    if n == 2:\n        return str(p[0]) +'' + str(p[1])\n    if n == 3:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2])\n    if n == 4:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3])\n    if n == 5:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4])\n    if n == 6:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5])\n    if n == 7:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6])\n    if n == 8:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7])\n    if n == 9:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8])\n    if n == 10:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9])\n    if n == 11:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9]) +'' + str(p[10])\n    if n == 12:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9]) +'' + str(p[10]) +'' + str(p[11])\n    if n == 13:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9]) +'' + str(p[10]) +'' + str(p[11]) +'' + str(p[12])\n    if n == 14:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9]) +'' + str(p[10]) +'' + str(p[11]) +'' + str(p[12]) +'' + str(p[13])\n    if n == 15:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9]) +'' + str(p[10]) +'' + str(p[11]) +'' + str(p[12]) +'' + str(p[13]) +'' + str(p[14])\n    if n == 16:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) +'' + str(p[9]) +'' + str(p[10]) +'' + str(p[11]) +'' + str(p[12]) +'' + str(p[13]) +'' + str(p[14]) +'' + str(p[15])\n    if n == 17:\n        return str(p[0]) +'' + str(p[1]) +'' + str(p[2]) +'' + str(p[3]) +'' + str(p[4]) +'' + str(p[5]) +'' + str(p[6]) +'' + str(p[7]) +'' + str(p[8]) + '"
    },
    {
        "number": 2645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 2646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = [[] for _ in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        rooms[a].append(b)\n        rooms[b].append(a)\n    for i in range(1, n + 1):\n        if rooms[i] and rooms[i][0] == i:\n            rooms[i].pop(0)\n    for i in range(1, n + 1):\n        if rooms[i] and rooms[i][0] == i:\n            return \"No\"\n    return \"\\n\".join(map(str, rooms[1:]))\n"
    },
    {
        "number": 2647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [['#' for _ in range(W + 2)] for _ in range(H + 2)]\n    for i in range(1, H + 1):\n        grid[i][1] = '#'\n        grid[i][W + 1] = '#'\n    for i in range(1, W + 1):\n        grid[1][i] = '#'\n        grid[H + 1][i] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            grid[i][j] = stdin[i - 1][j - 1]\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if grid[i][j] == '"
    },
    {
        "number": 2648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return '0'\n    else:\n        return str(N // 2)"
    },
    {
        "number": 2649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: (x[0], x[1]))\n    max_distance = 0\n    for i in range(N - 1):\n        distance = abs(points[i][0] - points[i + 1][0]) + abs(points[i][1] - points[i + 1][1])\n        max_distance = max(max_distance, distance)\n    return str(max_distance)\n"
    },
    {
        "number": 2650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    evenness = []\n    for i in range(Q):\n        evenness.append(min(A))\n        A.remove(min(A))\n        B.remove(min(B))\n        C.remove(min(C))\n        D.remove(min(D))\n        A.append(max(C))\n        B.append(max(D))\n    evenness.append(max(A))\n    evenness.append(max(B))\n    return '\\n'.join(map(str, evenness))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    return str(sum(sum(i * j for i, j in zip(x, y)) for x, y in zip(x, y)))"
    },
    {
        "number": 2652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    towns = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        towns.append((x, y))\n    towns.sort()\n    cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            cost += abs(towns[i][0] - towns[j][0]) + abs(towns[i][1] - towns[j][1])\n    return str(cost)"
    },
    {
        "number": 2653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    graph = [[] for _ in range(N + 1)]\n    for i in range(N - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    counters = [0] * (N + 1)\n    for i in range(Q):\n        p, x = map(int, stdin.split())\n        counters[p] += x\n        for j in graph[p]:\n            counters[j] += x\n    for i in range(1, N + 1):\n        counters[i] += counters[i - 1]\n    return \" \".join(map(str, counters))\n"
    },
    {
        "number": 2654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    B = list(map(int, stdin.split()[1:]))\n    A.sort()\n    B.sort()\n    if N % 2 == 0:\n        return str(int((A[N//2] + A[N//2 + 1]) / 2))\n    else:\n        return str(int((A[N//2] + A[N//2 + 1]) / 2))"
    },
    {
        "number": 2655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    ans = 0\n    for i in range(N):\n        if i == 0:\n            ans = A[i]\n        else:\n            ans = max(ans, A[i] + min(ans, A[i - 1]))\n    return str(ans)"
    },
    {
        "number": 2656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    S = S.lower()\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1\n        elif S[i] == 'f':\n            count += 1\n        elif S[i] == 'o':\n            count += 1"
    },
    {
        "number": 2657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = tuple(a)\n    print(a)\n    return a"
    },
    {
        "number": 2658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    return str(a[k - 1])"
    },
    {
        "number": 2659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while True:\n        if n > 10**15:\n            break\n        if n == k:\n            print(n)\n            break\n        if n % 10 == 0:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 > n // 10:\n            n += 1\n            continue\n        if n % 10 > n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1\n            continue\n        if n % 10 < n // 10:\n            n += 1"
    },
    {
        "number": 2660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin)\n    for i in range(Q):\n        if i == 0:\n            a, b = map(int, stdin.split())\n            f = lambda x: abs(x - a) + b\n            print(min(map(f, range(a, a + 10))))\n        else:\n            a, b = map(int, stdin.split())\n            f = lambda x: abs(x - a) + b\n            print(min(map(f, range(a, a + 10))))\n    return ''"
    },
    {
        "number": 2661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    u = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    a = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            a[i][j] = s[i] & t[j] | u[i] | v[j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            elif a[i][j] == 1:\n                a[i][j] = 0\n    for i in range(n):"
    },
    {
        "number": 2662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = set()\n    for i in range(N):\n        colors.add(int(stdin.split()[i]))\n    colors = list(colors)\n    colors.sort()\n    return str(len(colors))"
    },
    {
        "number": 2663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(n):\n        l.append(sum(a[i:i+k]))\n    l.sort()\n    return''.join(map(str, l[:k]))\n\nTest 2:\n\nThe first 4 elements of it are [8, 7, 4, 4].\ndef"
    },
    {
        "number": 2664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pan1 = stdin.split()\n    pan2 = stdin.split()\n    pan1_weight = int(pan1[0])\n    pan2_weight = int(pan2[0])\n    diff = pan1_weight - pan2_weight\n    if diff == 0:\n        return \"2\"\n    elif diff > 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 2665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(int(stdin)):\n        points.append(list(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0"
    },
    {
        "number": 2666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    max_profit = 0\n    for i in range(N):\n        if prices[i] > prices[i+1]:\n            max_profit += prices[i] - prices[i+1]\n    return str(max_profit)"
    },
    {
        "number": 2667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    Ci = list(map(int, stdin.split()[1:]))\n    Ci.sort()\n    if sum(Ci) % N == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 2668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    jacketCost, sockCost, money = map(int, stdin.split())\n    if money >= (jacketCost + sockCost):\n        return \"Lucky Chef\"\n    else:\n        return \"Unlucky Chef\""
    },
    {
        "number": 2669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    tasks = list(enumerate(tasks))\n    tasks = sorted(tasks, key=lambda x: x[1][1])\n    tasks = sorted(tasks, key=lambda x: x[1][0])\n    print(tasks)\n    return''.join(map(str, tasks))"
    },
    {
        "number": 2670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        str1, str2 = stdin.split()\n        str1 = str1.replace(\" \", \"\")\n        str2 = str2.replace(\" \", \"\")\n        if isPalindrome(str1) and isPalindrome(str2):\n            return str(len(str1) + len(str2) + max(len(str1), len(str2)))\n\ndef"
    },
    {
        "number": 2671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    a.sort()\n    x.sort()\n    ans = 0\n    for i in range(m):\n        ans += a[x[i]-1]\n    return str(ans)"
    },
    {
        "number": 2672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    return str(X % 1000000007)"
    },
    {
        "number": 2673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:"
    },
    {
        "number": 2674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = int(stdin)\n    if P <= 100:\n        return 'Exclusive'\n    elif P <= 999:\n        return 'Inclusive'\n    else:\n        return 'Exclusive'"
    },
    {
        "number": 2675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    red_balls = []\n    blue_balls = []\n    for i in range(n):\n        x, u = map(int, stdin.split())\n        red_balls.append((x, u))\n    for i in range(m):\n        y, v = map(int, stdin.split())\n        blue_balls.append((y, v))\n    red_balls.sort(key=lambda x: x[0])\n    blue_balls.sort(key=lambda x: x[0])\n    red_balls.sort(key=lambda x: x[1])\n    blue_balls.sort(key=lambda x: x[1])\n    red_balls = set(red_balls)\n    blue_balls = set(blue_balls)\n    collisions = 0\n    for i in range(n):\n        if (red_balls & blue_balls):\n            collisions += 1\n            red_balls.remove(red_balls & blue_balls)\n            blue_balls.remove(blue_balls & red_balls)\n    return str(collisions)"
    },
    {
        "number": 2676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    m = int(stdin.split()[2])\n    b = stdin.split()[3]\n    \n    # print(n, strings, m, b)\n    \n    # print(strings)\n    \n    # print(m)\n    \n    # print(b)\n    \n    # print(len(b))\n    \n    # print(len(strings))\n    \n    # print(len(strings[0]))\n    \n    # print(len(strings[1]))\n    \n    # print(len(strings[2]))\n    \n    # print(len(strings[3]))\n    \n    # print(len(strings[4]))\n    \n    # print(len(strings[5]))\n    \n    # print(len(strings[6]))\n    \n    # print(len(strings[7]))\n    \n    # print(len(strings[8]))\n    \n    # print(len(strings[9]))\n    \n    # print(len(strings[10]))\n    \n    # print(len(strings[11]))\n    \n    # print(len(strings[12]))\n    \n    # print(len(strings[13]))\n    \n    # print(len(strings[14]))\n    \n    # print(len(strings[15]))\n    \n    # print(len(strings[16]))\n    \n    # print(len(strings[17]))\n    \n    # print(len(strings[18]))\n    \n    # print(len(strings[19]))\n    \n    # print(len(strings[20]))\n    \n    # print(len(strings[21]))\n    \n    # print(len(strings[22]))\n    \n    # print(len(strings[23]))\n    \n    # print(len(strings[24]))\n    \n    # print(len(strings[25]))\n    \n    # print(len(strings[26]))\n    \n    # print(len(strings[27]))\n    \n    # print(len(strings[28]))\n    \n    # print(len(strings[29]))\n    \n    # print(len(strings[30]))\n    \n    # print(len(strings[31]))\n    \n    # print(len(strings[32]))\n    \n    # print(len(strings[33]))\n    \n    # print(len(strings[34]))\n    \n    # print(len(strings[35]))\n    \n    # print(len(strings[36]))\n    \n    # print(len(strings[37]))\n    \n    # print(len(strings[38]))\n    \n    # print(len(strings[39]))\n    \n    # print(len(strings[40]))\n    \n    # print(len(strings[41]))\n    \n    # print(len(strings[42]))\n    \n    # print(len(strings[43]))\n    \n    # print(len(strings[44]))\n    \n    # print(len(strings[45]))\n    \n    # print(len(strings[46]))\n    \n    # print(len(strings[47]))\n    \n    # print(len(strings[48]))\n    \n    # print(len(strings[49]))\n    \n    # print(len(strings[50]))\n    \n    # print(len(strings[51]))\n    \n    # print(len(strings[52]))\n    \n    # print(len(strings[53]))\n    \n    # print(len(strings[54]))\n    \n    # print(len(strings[55]))\n    \n    # print(len(strings[56]))\n    \n    # print(len(strings[57]))\n    \n    # print(len(strings[58]))\n    \n    # print(len(strings[59]))\n    \n    # print(len(strings[60]))\n    \n    # print(len(strings[61]))\n    \n    # print(len(strings[62]))\n    \n    # print(len(strings[63]))\n    \n    # print(len(strings[64]))\n    \n    # print(len(strings[65]))\n    \n    # print(len(strings[66]))\n    \n    # print(len(strings[67]))\n    \n    # print(len(strings[68]))\n    \n    # print(len(strings[69]))\n    \n    # print(len(strings[70]))\n    \n    # print(len(strings[71]))\n    \n    # print(len(strings[72]))\n    \n    # print(len(strings[73]))\n    \n    # print(len(strings[74]))\n    \n    # print(len(strings[75]))\n    \n    # print(len(strings[76]))\n    \n    # print(len(strings[77]))\n    \n    # print(len(strings[78]))\n    \n    # print(len(strings[79]))\n    \n    # print(len(strings[80]))\n    \n    # print(len(strings[81]))\n    \n    # print(len(strings[82]))\n    \n    # print(len(strings[83]))\n    \n    # print(len(strings[84]))\n    \n    # print(len(strings[85]))\n    \n    # print(len(strings[86]))\n    \n    # print(len(strings[87]))\n    \n    # print(len(strings[88]))\n    \n    # print(len(strings[89]))\n    \n    # print(len(strings[90]))\n    \n    # print(len(strings[91]))\n    \n    # print(len(strings[92]))\n    \n    # print(len(strings[93]))\n    \n    # print(len(strings[94]))\n    \n    # print(len(strings[95]))\n    \n    # print(len(strings[96]))\n    \n    # print(len(strings[97]))\n    \n    # print(len(strings[98]))\n    \n    # print(len(strings[99]))\n    \n    # print(len(strings[100]))\n    \n    # print(len(strings[101]))\n    \n    # print(len(strings[102]))\n    \n    # print(len(strings[103]))\n    \n    # print(len(strings[104]))\n    \n    # print(len(strings[105]))\n    \n    # print(len(strings[106]))\n    \n    # print(len(strings[107]))"
    },
    {
        "number": 2677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowels = \"AEIOU\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    if len(s) < 3:\n        return \"GOOD\"\n    if len(s) > 5:\n        return \"GOOD\"\n    if len(s) == 5:\n        if s[0] in vowels and s[1] in vowels and s[2] in vowels and s[3] in vowels and s[4] in vowels:\n            return \"GOOD\"\n        else:\n            return \"GOOD\"\n    if len(s) == 3:\n        if s[0] in vowels and s[1] in vowels and s[2] in vowels:\n            return \"GOOD\"\n        else:\n            return \"GOOD\"\n    if len(s) == 2:\n        if s[0] in vowels and s[1] in vowels:\n            return \"GOOD\"\n        else:\n            return \"GOOD\"\n    if len(s) == 1:\n        if s[0] in vowels:\n            return \"GOOD\"\n        else:\n            return \"GOOD\"\n    if len(s) == 0:\n        return \"GOOD\"\n    return \"GOOD\""
    },
    {
        "number": 2678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, stdin.split())))\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    intervals = sorted(intervals, key=lambda x: x[1])\n    intervals = sorted("
    },
    {
        "number": 2679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.append(0)\n    c.insert(0, 0)\n    s = 0\n    for i in range(1, n + 1):\n        s += c[i]\n        if s < 0:\n            s = 0\n        elif s > 0:\n            s = 0\n    return str(s)"
    },
    {
        "number": 2680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x[:B]\n    y = y[:B]\n    x.sort()\n    y.sort()\n    x = x[::-1]\n    y = y[::-1]\n    x = x["
    },
    {
        "number": 2681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if C == \"+\":\n        return str(float(A) + float(B))\n    elif C == \"-\":\n        return str(float(A) - float(B))\n    elif C == \"*\":\n        return str(float(A) * float(B))\n    elif C == \"/\":\n        return str(float(A) / float(B))"
    },
    {
        "number": 2682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nimport utils\n\n\ndef"
    },
    {
        "number": 2683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    board = [['.'] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                board[i][j] = 'X'\n            elif i + j == n - 1:\n                board[i][j] = 'O'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                board[i][j] = '"
    },
    {
        "number": 2684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    max_len = 0\n    max_sub = ''\n    for i in range(len(word)):\n        for j in range(i, len(word)):\n            sub = word[i:j+1]\n            if sub == sub[::-1]:\n                if len(sub) > max_len:\n                    max_len = len(sub)\n                    max_sub = sub\n    return max_len, max_sub"
    },
    {
        "number": 2685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    cost = 0\n    for i in range(n):\n        if s[i] == '?':\n            cost += x\n        else:\n            cost += y\n    return cost"
    },
    {
        "number": 2686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    buildings = list(map(int, stdin.split()))\n    pairs = []\n    for i in range(M):\n        pairs.append(tuple(map(int, stdin.split())))\n    start = int(stdin.split()[0])\n    end = int(stdin.split()[1])\n    return str(solution_helper(buildings, pairs, start, end))\n\ndef"
    },
    {
        "number": 2687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"0\"\n    if N == 4:\n        return \"8\"\n    if N == 5:\n        return \"16\"\n    if N == 6:\n        return \"24\"\n    if N == 7:\n        return \"32\"\n    if N == 8:\n        return \"40\"\n    if N == 9:\n        return \"48\"\n    if N == 10:\n        return \"56\"\n    if N == 11:\n        return \"64\"\n    if N == 12:\n        return \"72\"\n    if N == 13:\n        return \"80\"\n    if N == 14:\n        return \"88\"\n    if N == 15:\n        return \"96\"\n    if N == 16:\n        return \"104\"\n    if N == 17:\n        return \"112\"\n    if N == 18:\n        return \"120\"\n    if N == 19:\n        return \"128\"\n    if N == 20:\n        return \"136\"\n    if N == 21:\n        return \"144\"\n    if N == 22:\n        return \"152\"\n    if N == 23:\n        return \"160\"\n    if N == 24:\n        return \"168\"\n    if N == 25:\n        return \"176\"\n    if N == 26:\n        return \"184\"\n    if N == 27:\n        return \"192\"\n    if N == 28:\n        return \"200\"\n    if N == 29:\n        return \"208\"\n    if N == 30:\n        return \"216\"\n    if N == 31:\n        return \"224\"\n    if N == 32:\n        return \"232\"\n    if N == 33:\n        return \"240\"\n    if N == 34:\n        return \"248\"\n    if N == 35:\n        return \"256\"\n    if N == 36:\n        return \"264\"\n    if N == 37:\n        return \"272\"\n    if N == 38:\n        return \"280\"\n    if N == 39:\n        return \"288\"\n    if N == 40:\n        return \"296\"\n    if N == 41:\n        return \"304\"\n    if N == 42:\n        return \"312\"\n    if N == 43:\n        return \"320\"\n    if N == 44:\n        return \"328\"\n    if N == 45:\n        return \"336\"\n    if N == 46:\n        return \"344\"\n    if N == 47:\n        return \"352\"\n    if N == 48:\n        return \"360\"\n    if N == 49:\n        return \"368\"\n    if N == 50:\n        return \"376\"\n    if N == 51:\n        return \"384\"\n    if N == 52:\n        return \"392\"\n    if N == 53:\n        return \"400\"\n    if N == 54:\n        return \"408\"\n    if N == 55:\n        return \"416\"\n    if N == 56:\n        return \"424\"\n    if N == 57:\n        return \"432\"\n    if N == 58:\n        return \"440\"\n    if N == 59:\n        return \"448\"\n    if N == 60:\n        return \"456\"\n    if N == 61:\n        return \"464\"\n    if N == 62:\n        return \"472\"\n    if N == 63:\n        return \"480\"\n    if N == 64:\n        return \"488\"\n    if N == 65:\n        return \"496\"\n    if N == 66:\n        return \"504\"\n    if N == 67:\n        return \"512\"\n    if N == 68:\n        return \"520\"\n    if N == 69:\n        return \"528\"\n    if N == 70:\n        return \"536\"\n    if N == 71:\n        return \"544\"\n    if N == 72:\n        return \"552\"\n    if N == 73:\n        return \"560\"\n    if N == 74:\n        return \"568\"\n    if N == 75:\n        return \"576\"\n    if N == 76:\n        return \"584\"\n    if N == 77:\n        return \"592\"\n    if N == 78:\n        return \"600\"\n    if N == 79:\n        return \"608\"\n    if N == 80:\n        return \"616\"\n    if N == 81:\n        return \"624\"\n    if N == 82:\n        return \"632\"\n    if N == 83:\n        return \"640\"\n    if N == 84:\n        return \"648\"\n    if N == 85:\n        return \"656\"\n    if N == 86:\n        return \"664\"\n    if N == 87:\n        return \"672\"\n    if N == 88:\n        return \"680\"\n    if N == 89:\n        return \"688\"\n    if N == 90:\n        return \"696\"\n    if N == 91:\n        return \"704\"\n    if N == 92:\n        return \"712\"\n    if N == 93:\n        return \"720\"\n    if N == 94:\n        return \"728\"\n    if N == 95:\n        return \"736\"\n    if N == 96:\n        return \"744\"\n    if N == 97:\n        return \"752\"\n    if N == 98:\n        return \"760\"\n    if N == 99:\n        return \"768\"\n    if N == 100:\n        return \"776\"\n    if N == 101:\n        return \"784\"\n    if N == 102:\n        return \"792\"\n    if N == 103:\n        return \"800\""
    },
    {
        "number": 2688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    perm = list(map(int, stdin.split()))\n    cycles = []\n    visited = set()\n    for i in range(1, N + 1):\n        if i not in visited:\n            cycle = []\n            cycle.append(i)\n            visited.add(i)\n            while True:\n                cycle.append(perm[cycle[-1] - 1])\n                visited.add(cycle[-1])\n                if cycle[-1] == 1:\n                    break\n            cycles.append(cycle)\n    return str(len(cycles)) + '\\n' + '\\n'.join(map(str, cycles))"
    },
    {
        "number": 2689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin\n    code = code.replace('+','')\n    code = code.replace('-','')\n    code = code.replace(' ', '')\n    code = code.split(' ')\n    code = list(filter(None, code))\n    code = list(map(int, code))\n    code = list(map(str, code))\n    code = ''.join(code)\n    if code == code[::-1]:\n        return 'Return'\n    else:\n        return 'Continue'"
    },
    {
        "number": 2690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return 0\n    if n == 2:\n        return abs(ord(s[0]) - ord(s[1]))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = ord(s[i]) - ord(s[i])\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(abs(ord(s[i]) - ord(s[j])), abs(ord(s[i]) - ord(s[j])) + dp[i + 1][j - 1])\n    return dp[0][n - 1]"
    },
    {
        "number": 2691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.strip()\n    dp = [[0] * (n + 1) for _ in range(p + 1)]\n    for i in range(1, p + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == 'd':\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + 1)\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] - 1)\n    return str(dp[p][n])"
    },
    {
        "number": 2692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        N, B = map(int, stdin.split())\n        A = N - (B * 2)\n        print(A)\n    return A"
    },
    {
        "number": 2693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P, K = map(int, stdin.split())\n    for i in range(1, K + 1):\n        if S == P * i:\n            return str(i) +'' + str(i) +'' + str(i)\n    return 'NO'"
    },
    {
        "number": 2694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    blasters = []\n    for i in range(K):\n        blasters.append(list(map(int, stdin.split())))\n    \n    # print(blasters)\n    \n    # print(N,M)\n    \n    # print(blasters)\n    \n    # print(blasters[0][0])\n    \n    # print(blasters[0][1])\n    \n    # print(blasters[0][2])\n    \n    # print(blasters[0][3])\n    \n    # print(blasters[1][0])\n    \n    # print(blasters[1][1])\n    \n    # print(blasters[1][2])\n    \n    # print(blasters[1][3])\n    \n    # print(blasters[2][0])\n    \n    # print(blasters[2][1])\n    \n    # print(blasters[2][2])\n    \n    # print(blasters[2][3])\n    \n    # print(blasters[3][0])\n    \n    # print(blasters[3][1])\n    \n    # print(blasters[3][2])\n    \n    # print(blasters[3][3])\n    \n    # print(blasters[4][0])\n    \n    # print(blasters[4][1])\n    \n    # print(blasters[4][2])\n    \n    # print(blasters[4][3])\n    \n    # print(blasters[5][0])\n    \n    # print(blasters[5][1])\n    \n    # print(blasters[5][2])\n    \n    # print(blasters[5][3])\n    \n    # print(blasters[6][0])\n    \n    # print(blasters[6][1])\n    \n    # print(blasters[6][2])\n    \n    # print(blasters[6][3])\n    \n    # print(blasters[7][0])\n    \n    # print(blasters[7][1])\n    \n    # print(blasters[7][2])\n    \n    # print(blasters[7][3])\n    \n    # print(blasters[8][0])\n    \n    # print(blasters[8][1])\n    \n    # print(blasters[8][2])\n    \n    # print(blasters[8][3])\n    \n    # print(blasters[9][0])\n    \n    # print(blasters[9][1])\n    \n    # print(blasters[9][2])\n    \n    # print(blasters[9][3])\n    \n    # print(blasters[10][0])\n    \n    # print(blasters[10][1])\n    \n    # print(blasters[10][2])\n    \n    # print(blasters[10][3])\n    \n    # print(blasters[11][0])\n    \n    # print(blasters[11][1])\n    \n    # print(blasters[11][2])\n    \n    # print(blasters[11][3])\n    \n    # print(blasters[12][0])\n    \n    # print(blasters[12][1])\n    \n    # print(blasters[12][2])\n    \n    # print(blasters[12][3])\n    \n    # print(blasters[13][0])\n    \n    # print"
    },
    {
        "number": 2695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = list(A)\n    B = list(B)\n    B = list(map(int, B))\n    B.sort()\n    B = list(map(str, B))\n    B = ''.join(B)\n    A = list(A)\n    A.sort()\n    A = list(map(str, A))\n    A = ''.join(A)\n    if A == B:\n        return '0'\n    else:\n        return str(len(A) - len(B))"
    },
    {
        "number": 2696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[n-1])"
    },
    {
        "number": 2697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return str(s)"
    },
    {
        "number": 2698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, V = map(int, stdin.split())\n    lanes = [[] for _ in range(M)]\n    for i in range(M):\n        D, A = map(int, stdin.split())\n        lanes[i].append(D)\n        lanes[i].append(A)\n    max_ = 0\n    for i in range(M):\n        if len(lanes[i]) == 1:\n            continue\n        if len(lanes[i]) == 2:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 3:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 4:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 5:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 6:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 7:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 8:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 9:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 10:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 11:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 12:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 13:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 14:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 15:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 16:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 17:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 18:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 19:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 20:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 21:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 22:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 23:\n            if lanes[i][0] == 1:\n                max_ = max(max_, A)\n            else:\n                max_ = max(max_, A + 1)\n            continue\n        if len(lanes[i]) == 24:\n            if lanes[i"
    },
    {
        "number": 2699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print(j, end=\" \")\n        print()\n    return \"\"\n"
    },
    {
        "number": 2700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(int(a < b and c < d))"
    },
    {
        "number": 2701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a)!= k:\n        return -1\n    a.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] + a[r] == k:\n            return str(min(a[l], a[r]))\n        elif a[l] + a[r] < k:\n            l += 1\n        else:\n            r -= 1\n    return str(min(a[l], a[r]))\n"
    },
    {
        "number": 2702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    statement = []\n    for i in range(n):\n        statement.append(stdin.split())\n    statement = sorted(statement, key=lambda x: x[0])\n    count = 0\n    for i in range(n):\n        if statement[i][1] == 'T':\n            count += 1\n    return str(count)"
    },
    {
        "number": 2703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(q):\n        x = int(stdin.split()[i])\n        res.append(max(a[i:i+x]))\n    return''.join(map(str, res))"
    },
    {
        "number": 2704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    for _ in range(q):\n        t = int(stdin())\n        if t in arr:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(beauty(a, n, m, k))\n\ndef"
    },
    {
        "number": 2706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'"
    },
    {
        "number": 2707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j < A[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - A[i - 1]]\n    return str(dp[n][k])"
    },
    {
        "number": 2708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return str(n)"
    },
    {
        "number": 2709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if t == 1:\n        print(7)\n    elif t == 2:\n        if A[0] > A[1]:\n            print(\"Bigger\")\n        elif A[0] == A[1]:\n            print(\"Equal\")\n        else:\n            print(\"Smaller\")\n    elif t == 3:\n        print(int(sorted(A)[1]))\n    elif t == 4:\n        print(sum(A))\n    elif t == 5:\n        print(sum([i for i in A if i % 2 == 0]))\n    elif t == 6:\n        print(sum([i for i in A if i % 2 == 0]))\n    else:\n        print(\"Cyclic\")\n    return \"\""
    },
    {
        "number": 2710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    roads = []\n    for i in range(m):\n        roads.append((a[i], b[i]))\n    roads.sort(key=lambda x: x[0])\n    for i in range(n):\n        if not is_possible(roads, i):\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 2711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pages = []\n    for i in range(n):\n        pages.append(stdin.splitlines()[i])\n    pages = sorted(pages)\n    alphabet = []\n    for i in range(k):\n        alphabet.append(pages[i])\n    alphabet = sorted(alphabet)\n    alphabet = \"\".join(alphabet)\n    return alphabet"
    },
    {
        "number": 2712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 2714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    odd_numbers = 0\n    for i in range(n):\n        if sum(graph[i]) % 2 == 1:\n            odd_numbers += 1\n    return str(odd_numbers % 998244353)\n"
    },
    {
        "number": 2715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return \"4\"\n    if k == 2:\n        return \"3 3 3 3\"\n    if k == 3:\n        return \"2 2 2 2\"\n    if k == 4:\n        return \"1 1 1 1\"\n    if k == 5:\n        return \"0\"\n    if k == 6:\n        return \"4 3 3 3 3\"\n    if k == 7:\n        return \"3 3 3 3 3 3\"\n    if k == 8:\n        return \"2 2 2 2 2 2\"\n    if k == 9:\n        return \"1 1 1 1 1 1 1\"\n    if k == 10:\n        return \"0\"\n    if k == 11:\n        return \"4 3 3 3 3 3 3 3\"\n    if k == 12:\n        return \"3 3 3 3 3 3 3 3 3\"\n    if k == 13:\n        return \"2 2 2 2 2 2 2 2 2\"\n    if k == 14:\n        return \"1 1 1 1 1 1 1 1 1 1\"\n    if k == 15:\n        return \"0\"\n    if k == 16:\n        return
    },
    {
        "number": 2716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if t == 1:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 2:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 3:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 4:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 5:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 6:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 7:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 8:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 9:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 10:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 11:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 12:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 13:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 14:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 15:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 16:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 17:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 18:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 19:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 20:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 21:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 22:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 23:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 24:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 25:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 26:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 27:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 28:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 29:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 30:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 31:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 32:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 33:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 34:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes\"\n        return \"No\"\n    elif t == 35:\n        for i in range(N):\n            if A[i]!= i + 1:\n                return \"Yes"
    },
    {
        "number": 2717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seats = stdin.split()\n    seats = list(map(lambda x: x.upper(), seats))\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list(set(seats))\n    seats.sort()\n    seats = list(map(lambda x: x[0], seats))\n    seats = list"
    },
    {
        "number": 2718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > M:\n        return \"win\"\n    elif N < M:\n        return \"lose\"\n    else:\n        return \"win\"\n"
    },
    {
        "number": 2719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K == 1:\n        return \"No true closed chains\"\n    else:\n        return \"True closed chains\"\n"
    },
    {
        "number": 2720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    maze = [[c for c in stdin] for r in range(R)]\n    # print(maze)\n    # print(R, C)\n    # print(maze[0])\n    # print(maze[1])\n    # print(maze[2])\n    # print(maze[3])\n    # print(maze[4])\n    # print(maze[5])\n    # print(maze[6])\n    # print(maze[7])\n    # print(maze[8])\n    # print(maze[9])\n    # print(maze[10])\n    # print(maze[11])\n    # print(maze[12])\n    # print(maze[13])\n    # print(maze[14])\n    # print(maze[15])\n    # print(maze[16])\n    # print(maze[17])\n    # print(maze[18])\n    # print(maze[19])\n    # print(maze[20])\n    # print(maze[21])\n    # print(maze[22])\n    # print(maze[23])\n    # print(maze[24])\n    # print(maze[25])\n    # print(maze[26])\n    # print(maze[27])\n    # print(maze[28])\n    # print(maze[29])\n    # print(maze[30])\n    # print(maze[31])\n    # print(maze[32])\n    # print(maze[33])\n    # print(maze[34])\n    # print(maze[35])\n    # print(maze[36])\n    # print(maze[37])\n    # print(maze[38])\n    # print(maze[39])\n    # print(maze[40])\n    # print(maze[41])\n    # print(maze[42])\n    # print(maze[43])\n    # print(maze[44])\n    # print(maze[45])\n    # print(maze[46])\n    # print(maze[47])\n    # print(maze[48])\n    # print(maze[49])\n    # print(maze[50])\n    # print(maze[51])\n    # print(maze[52])\n    # print(maze[53])\n    # print(maze[54])\n    # print(maze[55])\n    # print(maze[56])\n    # print(maze[57])\n    # print(maze[58])\n    # print(maze[59])\n    # print(maze[60])\n    # print(maze[61])\n    # print(maze[62])\n    # print(maze[63])\n    # print(maze[64])\n    # print(maze[65])\n    # print(maze[66])\n    # print(maze[67])\n    # print(maze[68])\n    # print(maze[69])\n    # print(maze[70])\n    # print(maze[71])\n    # print(maze[72])\n    # print(maze[73])\n    # print(maze[74])\n    # print(maze[75])\n    # print(maze[76])\n    # print(maze[77])\n    # print(maze[78])\n    # print(maze[79])\n    # print(maze[80])\n    # print(maze[81])\n    # print(maze[82])\n    # print(maze[83])\n    # print(maze[84])\n    # print(maze[85])\n    # print(maze[86])\n    # print(maze[87])\n    # print(maze[88])\n    # print(maze[89])\n    # print(maze[90])\n    # print(maze[91])\n    # print(maze[92])\n    # print(maze[93])\n    # print(maze[94])\n    # print(maze[95])\n    # print(maze[96])\n    # print(maze[97])\n    # print(maze[98])\n    # print(maze[99])\n    # print(maze[100])\n    # print(maze[101])\n    # print(maze[102])\n    # print(maze[103])\n    # print(maze[104])\n    # print(maze[105])\n    # print(maze[106])\n    # print(maze[107])\n    # print(maze[108])\n    # print(maze[109])\n    # print(maze[110])\n    # print(maze[111])\n    # print(maze[112])\n    # print(maze[113])\n    # print(maze[114])\n    # print(maze[115])\n    # print(maze[116])\n    # print(maze[117])\n    # print(maze[118])\n    # print(maze[119])\n    # print(maze[120])\n    # print(maze[121])\n    # print(maze[122])\n    # print(maze[123])\n    # print(maze[124])\n    # print(maze[125])\n    # print(maze[126])\n    # print(maze[127])\n    # print(maze[128])\n    # print(maze[129])\n    # print(maze[130])\n    # print(maze[131])\n    # print(maze[132])\n    # print(maze[133])\n    # print(maze[134])\n    # print(maze[135])\n    # print(maze[136])\n    # print(maze[137])\n    # print(maze[138])\n    # print(maze[139])\n    # print(maze[140])\n    # print(maze[141])\n    # print(maze[142])\n    # print(maze[143])\n    # print(maze[144])\n    # print(maze[145])\n    # print(maze[146])\n    # print(maze[147])\n    # print(maze[148])\n    # print(maze[149])\n    # print(maze[150])\n    # print(maze[151])\n    # print(maze[152])\n    # print(maze[153])\n    # print(maze[154])\n    # print(maze[155])\n    # print(maze[156])\n    # print(maze[157])\n    # print(maze[158])\n    # print(maze[159])\n    # print(maze"
    },
    {
        "number": 2721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, l = map(int, stdin.split())\n    M, L = map(int, stdin.split())\n    t_m, t_l = map(int, stdin.split())\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"possible\"\n    if m!= M and l == L:\n        return \"possible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"possible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible\"\n    if m == M and l == L:\n        return \"impossible\"\n    if m == M and l!= L:\n        return \"impossible\"\n    if m!= M and l == L:\n        return \"impossible\"\n    if m!= M and l!= L:\n        return \"impossible"
    },
    {
        "number": 2722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    board = [[c for c in row] for row in board]\n    diamond = board[0][0]\n    ice_castle = []\n    for i in range(1, len(board)):\n        for j in range(1, len(board[i])):\n            if board[i][j] == 'C':\n                ice_castle.append((i, j))\n    turtle = (0, 0)\n    for i in range(1, len(board)):\n        for j in range(1, len(board[i])):\n            if board[i][j] == 'T':\n                turtle = (i, j)\n                break\n        if turtle == (0, 0):\n            break\n    if turtle == (0, 0):\n        return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'D':\n        return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'C':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 0 and (ice_castle[i][1] - turtle[1]) == 0:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'I':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 0 and (ice_castle[i][1] - turtle[1]) == 1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == '.':\n        return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'X':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 0 and (ice_castle[i][1] - turtle[1]) == 0:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'R':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 0 and (ice_castle[i][1] - turtle[1]) == 1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'L':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 0 and (ice_castle[i][1] - turtle[1]) == -1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'F':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 1 and (ice_castle[i][1] - turtle[1]) == 0:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'R':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 1 and (ice_castle[i][1] - turtle[1]) == 1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'L':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 1 and (ice_castle[i][1] - turtle[1]) == -1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'X':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 1 and (ice_castle[i][1] - turtle[1]) == 0:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'R':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 1 and (ice_castle[i][1] - turtle[1]) == 1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'L':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == 1 and (ice_castle[i][1] - turtle[1]) == -1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'F':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == -1 and (ice_castle[i][1] - turtle[1]) == 0:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'R':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == -1 and (ice_castle[i][1] - turtle[1]) == 1:\n                return 'No solution'\n    if board[turtle[0]][turtle[1]] == 'L':\n        for i in range(len(ice_castle)):\n            if (ice_castle[i][0] - turtle[0]) == -1 and (ice_castle[i][1] - turtle[1]) == -1:\n                return 'No solution'\n    if board[turtle["
    },
    {
        "number": 2723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    formula = stdin.split()\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '*'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '-'\n            elif formula[i][j] == '/':\n                formula[i][j] = '+'\n            elif formula[i][j] == '^':\n                formula[i][j] = '*'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n            elif formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i][j] = '-'\n    for i in range(R):\n        for j in range(C):\n            if formula[i][j] == '+':\n                formula[i][j] = '-'\n            elif formula[i][j] == '-':\n                formula[i][j] = '+'\n            elif formula[i][j] == '*':\n                formula[i][j] = '+'\n            elif formula[i][j] == '/':\n                formula[i"
    },
    {
        "number": 2724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1:]))\n    tutors = list(map(int, stdin.split()[1:]))\n    students.sort(key=lambda x: abs(x))\n    tutors.sort(key=lambda x: abs(x))\n    best = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            if abs(students[i] - tutors[j]) <= best:\n                best = abs(students[i] - tutors[j])\n    return str(best)"
    },
    {
        "number": 2725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"impossible\"\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    if weights[0] == 0:\n        return \"impossible\"\n    if weights[-1] == 2**n:\n        return \"impossible\"\n    if weights[-1] == 2**n - 1:\n        return \"impossible\"\n    if weights[-1] == 2**n:\n        return \"impossible\"\n    if weights[-1] == 2**n + 1:\n        return \"impossible\"\n    if weights[-1] == 2**n + 2:\n        return \"impossible\"\n    if weights[-1] == 2**n + 3:\n        return \"impossible\"\n    if weights[-1] == 2**n + 4:\n        return \"impossible\"\n    if weights[-1] == 2**n + 5:\n        return \"impossible\"\n    if weights[-1] == 2**n + 6:\n        return \"impossible\"\n    if weights[-1] == 2**n + 7:\n        return \"impossible\"\n    if weights[-1] == 2**n + 8:\n        return \"impossible\"\n    if weights[-1] == 2**n + 9:\n        return \"impossible\"\n    if weights[-1] == 2**n + 10:\n        return \"impossible\"\n    if weights[-1] == 2**n + 11:\n        return \"impossible\"\n    if weights[-1] == 2**n + 12:\n        return \"impossible\"\n    if weights[-1] == 2**n + 13:\n        return \"impossible\"\n    if weights[-1] == 2**n + 14:\n        return \"impossible\"\n    if weights[-1] == 2**n + 15:\n        return \"impossible\"\n    if weights[-1] == 2**n + 16:\n        return \"impossible\"\n    if weights[-1] == 2**n + 17:\n        return \"impossible\"\n    if weights[-1] == 2**n + 18:\n        return \"impossible\"\n    if weights[-1] == 2**n + 19:\n        return \"impossible\"\n    if weights[-1] == 2**n + 20:\n        return \"impossible\"\n    if weights[-1] == 2**n + 21:\n        return \"impossible\"\n    if weights[-1] == 2**n + 22:\n        return \"impossible\"\n    if weights[-1] == 2**n + 23:\n        return \"impossible\"\n    if weights[-1] == 2**n + 24:\n        return \"impossible\"\n    if weights[-1] == 2**n + 25:\n        return \"impossible\"\n    if weights[-1] == 2**n + 26:\n        return \"impossible\"\n    if weights[-1] == 2**n + 27:\n        return \"impossible\"\n    if weights[-1] == 2**n + 28:\n        return \"impossible\"\n    if weights[-1] == 2**n + 29:\n        return \"impossible\"\n    if weights[-1] == 2**n + 30:\n        return \"impossible\"\n    if weights[-1] == 2**n + 31:\n        return \"impossible\"\n    if weights[-1] == 2**n + 32:\n        return \"impossible\"\n    if weights[-1] == 2**n + 33:\n        return \"impossible\"\n    if weights[-1] == 2**n + 34:\n        return \"impossible\"\n    if weights[-1] == 2**n + 35:\n        return \"impossible\"\n    if weights[-1] == 2**n + 36:\n        return \"impossible\"\n    if weights[-1] == 2**n + 37:\n        return \"impossible\"\n    if weights[-1] == 2**n + 38:\n        return \"impossible\"\n    if weights[-1] == 2**n + 39:\n        return \"impossible\"\n    if weights[-1] == 2**n + 40:\n        return \"impossible\"\n    if weights[-1] == 2**n + 41:\n        return \"impossible\"\n    if weights[-1] == 2**n + 42:\n        return \"impossible\"\n    if weights[-1] == 2**n + 43:\n        return \"impossible\"\n    if weights[-1] == 2**n + 44:\n        return \"impossible\"\n    if weights[-1] == 2**n + 45:\n        return \"impossible\"\n    if weights[-1] == 2**n + 46:\n        return \"impossible\"\n    if weights[-1] == 2**n + 47:\n        return \"impossible\"\n    if weights[-1] == 2**n + 48:\n        return \"impossible\"\n    if weights[-1] == 2**n + 49:\n        return \"impossible\"\n    if weights[-1] == 2**n + 50:\n        return \"impossible\"\n    if weights[-1] == 2**n + 51:\n        return \"impossible"
    },
    {
        "number": 2726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cnt = 0\n    score = 0\n    while cnt < c:\n        if a[cnt] > score:\n            score = a[cnt]\n            cnt += 1\n        else:\n            cnt += 1\n    return str(score)"
    },
    {
        "number": 2727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    G = list(map(int, stdin.split()))\n    G.sort()\n    count = 0\n    for i in range(1, L):\n        if G[i] > G[i - 1]:\n            count += 1\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 2728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sizes = list(map(int, stdin.split()))\n    if len(sizes)!= n:\n        return '-1'\n    if sum(sizes) % 3!= 0:\n        return '-1'\n    sizes.sort()\n    if sizes[0] > 1:\n        return '-1'\n    if sizes[-1] > 1:\n        return '-1'\n    if sizes[0] == 1:\n        return '1 2'\n    if sizes[-1] == 1:\n        return '3 6'\n    if sizes[0] == sizes[-1]:\n        return '1'\n    if sizes[0] == 1:\n        return '2'\n    if sizes[-1] == 1:\n        return '6'\n    if sizes[0] == 2:\n        return '1 2'\n    if sizes[-1] == 2:\n        return '3 6'\n    if sizes[0] == 3:\n        return '1 2 3'\n    if sizes[-1] == 3:\n        return '6'\n    if sizes[0] == 4:\n        return '1 2 3 4'\n    if sizes[-1] == 4:\n        return '6'\n    if sizes[0] == 5:\n        return '1 2 3 4 5'\n    if sizes[-1] == 5:\n        return '6'\n    if sizes[0] == 6:\n        return '1 2 3 4 5 6'\n    if sizes[-1] == 6:\n        return '6'\n    if sizes[0] == 7:\n        return '1 2 3 4 5 6 7'\n    if sizes[-1] == 7:\n        return '6'\n    if sizes[0] == 8:\n        return '1 2 3 4 5 6 7 8'\n    if sizes[-1] == 8:\n        return '6'\n    if sizes[0] == 9:\n        return '1 2 3 4 5 6 7 8 9'\n    if sizes[-1] == 9:\n        return '6'\n    if sizes[0] == 10:\n        return '1 2 3 4 5 6 7 8 9 10'\n    if sizes[-1] == 10:\n        return '6'\n    if sizes[0] == 11:\n        return '1 2 3 4 5 6 7 8 9 10 11'\n    if sizes[-1] == 11:\n        return '6'\n    if sizes[0] == 12:\n        return '1 2 3 4 5 6 7 8 9 10 11 12'\n    if sizes[-1] == 12:\n        return '6'\n    if sizes[0] == 13:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13'\n    if sizes[-1] == 13:\n        return '6'\n    if sizes[0] == 14:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n    if sizes[-1] == 14:\n        return '6'\n    if sizes[0] == 15:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n    if sizes[-1] == 15:\n        return '6'\n    if sizes[0] == 16:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n    if sizes[-1] == 16:\n        return '6'\n    if sizes[0] == 17:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n    if sizes[-1] == 17:\n        return '6'\n    if sizes[0] == 18:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n    if sizes[-1] == 18:\n        return '6'\n    if sizes[0] == 19:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n    if sizes[-1] == 19:\n        return '6'\n    if sizes[0] == 20:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n    if sizes[-1] == 20:\n        return '6'\n    if sizes[0] == 21:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n    if sizes[-1] == 21:\n        return '6'\n    if sizes[0] == 22:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'\n    if sizes[-1] == 22:\n        return '6'\n    if sizes[0] == 23:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n    if sizes[-1] == 23:\n        return '6'\n    if sizes[0] == 24:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n    if sizes[-1] == 24:\n        return '6'\n    if sizes[0] == 25:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n    if sizes[-1] == 25:\n        return '6'\n    if sizes[0] == 26:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'\n    if sizes[-1] == 26:\n        return '6'\n    if sizes[0] == 27:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'\n    if sizes[-1] == 27:\n        return '6'\n    if sizes[0] == 28:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'\n    if sizes[-1] == 28:\n        return '6'\n    if sizes[0] =="
    },
    {
        "number": 2729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m in {1, 10}:\n        return str(n / m)\n    else:\n        return str(n // m) + \".\" + str(n % m)"
    },
    {
        "number": 2730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 1:\n        return \"0.5\"\n    if N == 2:\n        return \"0.5\"\n    if N == 3:\n        return \"0.333333\"\n    if N == 4:\n        return \"0.25\"\n    if N == 5:\n        return \"0.2\"\n    if N == 6:\n        return \"0.166667\"\n    if N == 7:\n        return \"0.142857\"\n    if N == 8:\n        return \"0.125\"\n    if N == 9:\n        return \"0.1\"\n    if N == 10:\n        return \"0.083333\"\n    if N == 11:\n        return \"0.071428\"\n    if N == 12:\n        return \"0.0625\"\n    if N == 13:\n        return \"0.05\"\n    if N == 14:\n        return \"0.042857\"\n    if N == 15:\n        return \"0.031429\"\n    if N == 16:\n        return \"0.021667\"\n    if N == 17:\n        return \"0.015873\"\n    if N == 18:\n        return \"0.012857\"\n    if N == 19:\n        return \"0.011429\"\n    if N == 20:\n        return \"0.008571\"\n    if N == 21:\n        return \"0.007143\"\n    if N == 22:\n        return \"0.006458\"\n    if N == 23:\n        return \"0.005714\"\n    if N == 24:\n        return \"0.004861\"\n    if N == 25:\n        return \"0.003906\"\n    if N == 26:\n        return \"0.002931\"\n    if N == 27:\n        return \"0.001953\"\n    if N == 28:\n        return \"0.001181\"\n    if N == 29:\n        return \"0.000906\"\n    if N == 30:\n        return \"0.000769\"\n    if N == 31:\n        return \"0.000638\"\n    if N == 32:\n        return \"0.000532\"\n    if N == 33:\n        return \"0.000451\"\n    if N == 34:\n        return \"0.000428\"\n    if N == 35:\n        return \"0.000402\"\n    if N == 36:\n        return \"0.000391\"\n    if N == 37:\n        return \"0.000379\"\n    if N == 38:\n        return \"0.000378\"\n    if N == 39:\n        return \"0.000377\"\n    if N == 40:\n        return \"0.000376\"\n    if N == 41:\n        return \"0.000375\"\n    if N == 42:\n        return \"0.000374\"\n    if N == 43:\n        return \"0.000373\"\n    if N == 44:\n        return \"0.000372\"\n    if N == 45:\n        return \"0.000371\"\n    if N == 46:\n        return \"0.000370\"\n    if N == 47:\n        return \"0.000369\"\n    if N == 48:\n        return \"0.000368\"\n    if N == 49:\n        return \"0.000367\"\n    if N == 50:\n        return \"0.000366\"\n    if N == 51:\n        return \"0.000365\"\n    if N == 52:\n        return \"0.000364\"\n    if N == 53:\n        return \"0.000363\"\n    if N == 54:\n        return \"0.000362\"\n    if N == 55:\n        return \"0.000361\"\n    if N == 56:\n        return \"0.000360\"\n    if N == 57:\n        return \"0.000359\"\n    if N == 58:\n        return \"0.000358\"\n    if N == 59:\n        return \"0.000357\"\n    if N == 60:\n        return \"0.000356\"\n    if N == 61:\n        return \"0.000355\"\n    if N == 62:\n        return \"0.000354\"\n    if N == 63:\n        return \"0.000353\"\n    if N == 64:\n        return \"0.000352\"\n    if N == 65:\n        return \"0.000351\"\n    if N == 66:\n        return \"0.000350\"\n    if N == 67:\n        return \"0.000349\"\n    if N == 68:\n        return \"0.000348\"\n    if N == 69:\n        return \"0.000347\"\n    if N == 70:\n        return \"0.000346\"\n    if N == 71:\n        return \"0.000345\"\n    if N == 72:\n        return \"0.000344\"\n    if N == 73:\n        return \"0.000343\"\n    if N == 74:\n        return \"0.000342\"\n    if N == 75:\n        return \"0.000341\"\n    if N == 76:\n        return \"0.000340\"\n    if N == 77:\n        return \"0.000339\"\n    if N == 78:\n        return \"0.000338\"\n    if N == 79:\n        return \"0.000337\"\n    if N == 80:\n        return \"0.000336\"\n    if N == 81:\n        return \"0.000335\"\n    if N == 82:\n        return \"0.000334\"\n    if N == 83:\n        return \"0.000333\"\n    if N == 84:\n        return \"0.000332\"\n    if N == 85:\n        return \"0.000331\"\n    if N == 86:\n"
    },
    {
        "number": 2731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W = int(stdin)\n    return str(min(abs
    },
    {
        "number": 2733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    droplets = []\n    for i in range(N):\n        x, y, v_x, v_y, r = map(int, stdin.split())\n        droplets.append((x, y, v_x, v_y, r))\n    droplets.sort(key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[4]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[4]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[4]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[4]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[4]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))\n    droplets = sorted(droplets, key=lambda x: (x[0], x[1]))\n    droplets = sorted(droplets, key=lambda x: (x[4], x[0]))\n    droplets = sorted(droplets, key=lambda x: (x[3], x[4]))\n    droplets = sorted(droplets, key=lambda x: (x[2], x[3]))\n    droplets = sorted(droplets, key=lambda x: (x[1], x[2]))"
    },
    {
        "number": 2734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(2**i for i in range(K) if 2**i > N))"
    },
    {
        "number": 2735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    start = stdin[0]\n    end = stdin[1]\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)\n    start.reverse()\n    end.reverse()\n    start = ''.join(start)\n    end = ''.join(end)\n    start = list(start)\n    end = list(end)"
    },
    {
        "number": 2736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    h = [[int(i) for i in stdin.split()] for _ in range(y)]\n    return str(sum(max(h[i][j], h[i + 1][j], h[i][j + 1], h[i + 1][j + 1]) for i in range(x - 1) for j in range(y - 1)))\n"
    },
    {
        "number": 2737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    locations = list(map(int, stdin.split()))\n    roads = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        roads.append((u, v, w))\n    shelters = []\n    for i in range(s):\n        c, = map(int, stdin.split())\n        shelters.append(c)\n    return str(solution_naive(n, m, s, roads, shelters, locations))\n\ndef"
    },
    {
        "number": 2738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gears = []\n    for i in range(n):\n        x, y, r = map(int, stdin.split())\n        gears.append((x, y, r))\n    gears.sort(key=lambda x: x[0])\n    gears.sort(key=lambda x: x[1])\n    gears.sort(key=lambda x: x[2])\n    gears.sort(key=lambda x: x[0] - x[1])\n    gears.sort(key=lambda x: x[0] - x[2])\n    gears.sort(key=lambda x: x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1])\n    gears.sort(key=lambda x: x[0] + x[2])\n    gears.sort(key=lambda x: x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    "
    },
    {
        "number": 2739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    if n == 1:\n        return 'error'\n    return sum(b) % (10**9 + 7)\n"
    },
    {
        "number": 2740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w, h = map(int, stdin.split())\n    return str(sum(1 for i in range(n) if w * i + h * (n - i) < 2 * i))"
    },
    {
        "number": 2741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n    if n < 10:\n        return str(n)\n    if n < 100:\n        return str(n // 10) + str(n % 10)\n    if n < 1000:\n        return str(n // 100) + str(n % 100 // 10) + str(n % 100 % 10)\n    if n < 10000:\n        return str(n // 1000) + str(n % 1000 // 100) + str(n % 1000 % 100 // 10) + str(n % 1000 % 100 % 10)\n    if n < 100000:\n        return str(n // 10000) + str(n % 10000 // 1000) + str(n % 10000 % 1000 // 100) + str(n % 10000 % 1000 % 100 // 10) + str(n % 10000 % 1000 % 100 % 10)\n    if n < 1000000:\n        return str(n // 100000) + str(n % 100000 // 10000) + str(n % 100000 % 10000 // 1000) + str(n % 100000 % 1000 // 100) + str(n % 100000 % 1000 % 100 // 10) + str(n % 100000 % 1000 % 100 % 10)\n    if n < 10000000:\n        return str(n // 1000000) + str(n % 1000000 // 100000) + str(n % 1000000 % 100000 // 10000) + str(n % 1000000 % 100000 % 1000 // 1000) + str(n % 1000000 % 1000 // 100) + str(n % 1000000 % 1000 % 100 // 10) + str(n % 1000000 % 1000 % 100 % 10)\n    if n < 100000000:\n        return str(n // 10000000) + str(n % 10000000 // 1000000) + str(n % 10000000 % 1000000 // 100000) + str(n % 10000000 % 1000000 % 100000 // 10000) + str(n % 10000000 % 100000 % 100000 % 1000 // 1000) + str(n % 10000000 % 1000 // 100) + str(n % 10000000 % 1000 % 100 // 10) + str(n % 10000000 % 1000 % 100 % 10)\n    if n < 1000000000:\n        return str(n // 100000000) + str(n % 100000000 // 10000000) + str(n % 100000000 % 1000000 // 100000) + str(n % 100000000 % 1000000 % 100000 // 10000) + str(n % 100000000 % 100000 % 100000 % 1000 // 1000) + str(n % 100000000 % 1000 // 100) + str(n % 100000000 % 1000 % 100 // 10) + str(n % 100000000 % 1000 % 100 % 10)\n    if n < 10000000000:\n        return str(n // 1000000000) + str(n % 1000000000 // 100000000) + str(n % 1000000000 % 1000000 // 100000) + str(n % 1000000000 % 1000000 % 100000 // 10000) + str(n % 1000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 1000000000 % 1000 // 100) + str(n % 1000000000 % 1000 % 100 // 10) + str(n % 1000000000 % 1000 % 100 % 10)\n    if n < 1000000000000:\n        return str(n // 10000000000) + str(n % 10000000000 // 1000000000) + str(n % 10000000000 % 100000000 // 100000) + str(n % 10000000000 % 100000000 % 100000 // 10000) + str(n % 10000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 10000000000 % 1000 // 100) + str(n % 10000000000 % 1000 % 100 // 10) + str(n % 10000000000 % 1000 % 100 % 10)\n    if n < 10000000000000:\n        return str(n // 1000000000000) + str(n % 1000000000000 // 10000000000) + str(n % 1000000000000 % 100000000 // 100000) + str(n % 1000000000000 % 100000000 % 100000 // 10000) + str(n % 1000000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 1000000000000 % 1000 // 100) + str(n % 1000000000000 % 1000 % 100 // 10) + str(n % 1000000000000 % 1000 % 100 % 10)\n    if n < 100000000000000:\n        return str(n // 10000000000000) + str(n % 10000000000000 // 1000000000000) + str(n % 10000000000000 % 100000000 // 100000) + str(n % 10000000000000 % 100000000 % 100000 // 10000) + str(n % 10000000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 10000000000000 % 1000 // 100) + str(n % 10000000000000 % 1000 % 100 // 10) + str(n % 10000000000000 % 1000 % 100 % 10)\n    if n < 1000000000000000:\n        return str(n // 100000000000000) + str(n % 100000000000000 // 10000000000000) + str(n % 100000000000000 % 100000000 // 100000) + str(n % 100000000000000 % 100000000 % 100000 // 10000) + str(n % 100000000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 100000000000000 % 1000 // 100) + str(n % 100000000000000 % 1000 % 100 // 10) + str(n % 100000000000000 % 1000 % 100 % 10)\n    if n < 10000000000000000:\n        return str(n // 1000000000000000) + str(n % 1000000000000000 // 100000000000000) + str(n % 1000000000000000 % 100000000 // 100000) + str(n % 1000000000000000 % 100000000 % 100000 // 10000) + str(n % 1000000000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 1000000000000000 % 1000 // 100) + str(n % 1000000000000000 % 1000 % 100 // 10) + str(n % 1000000000000000 % 1000 % 100 % 10)\n    if n < 100000000000000000:\n        return str(n // 10000000000000000) + str(n % 10000000000000000 // 1000000000000000) + str(n % 10000000000000000 % 100000000 // 100000) + str(n % 10000000000000000 % 100000000 % 100000 // 10000) + str(n % 10000000000000000 % 100000 % 100000 % 1000 // 1000) + str(n % 10000000000000000 % 1000 // 100) + str(n % 10000000000000000 % 1000 % 100 // 10) + str(n % 10000000000000000 % 1000 % 100 % 10)\n    if n < 100000000000000000:\n        return str(n // 100000000000000000) + str(n % 100000000000000000 // 10000000000000000) + str(n % 100000000000000000 % 100000000 // 100000) + str(n % 100000000000000000 % 100000000 % 100000 // 10000) + str(n % 100000000000000000"
    },
    {
        "number": 2743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = stdin.split()\n    left = 0\n    right = 0\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                continue\n            if grid[i][j] == '|':\n                if j < w - 1 and grid[i][j + 1] == '.':\n                    left += 1\n                else:\n                    right += 1\n            elif grid[i][j] == '#':\n                if j < w - 1 and grid[i][j + 1] == '.':\n                    right += 1\n                else:\n                    left += 1\n    if left > right:\n        return 'left'\n    elif left < right:\n        return 'right'\n    else:\n        return 'balanced'"
    },
    {
        "number": 2744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    routes = []\n    for _ in range(m):\n        v, u, w = map(int, stdin.split())\n        routes.append((v, u, w))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = tuple(a)\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + a[i] * a[j] * a[k])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 2745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    words = sorted(words)\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    words = sorted(words)\n    for i in range(len(words)):\n"
    },
    {
        "number": 2746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    version1, version2 = stdin.split()\n    version1 = version1.split('.')\n    version2 = version2.split('.')\n    for i in range(max(len(version1), len(version2))):\n        if i < len(version1):\n            if int(version1[i]) > int(version2[i]):\n                return '1'\n            elif int(version1[i]) < int(version2[i]):\n                return '-1'\n        else:\n            if int(version2[i]) > int(version1[i]):\n                return '1'\n            elif int(version2[i]) < int(version1[i]):\n                return '-1'\n    return '0'\n"
    },
    {
        "number": 2747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    target = int(stdin.split()[-1])\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left == len(nums) or nums[left]!= target:\n        return [-1, -1]\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            right = mid - 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [left, right]\n"
    },
    {
        "number": 2748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mapping = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n        '5': 'jkl',\n        '6':'mno',\n        '7': 'pqrs',\n        '8': 'tuv',\n        '9': 'wxyz'\n    }\n    result = []\n    def backtrack(path, index):\n        if index == len(stdin):\n            result.append(path)\n            return\n        for letter in mapping[stdin[index]]:\n            backtrack(path + letter, index + 1)\n    backtrack('', 0)\n    return result\n\ndef"
    },
    {
        "number": 2749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    if H == 1 and W == 1:\n        return '1 1'\n    if H == 1 and W == 2:\n        return '1 2'\n    if H == 2 and W == 2:\n        return '2 3'\n    if H == 2 and W == 1:\n        return '2 1'\n    if H == 3 and W == 3:\n        return '3 1'\n    if H == 3 and W == 2:\n        return '3 2'\n    if H == 4 and W == 4:\n        return '4 3'\n    if H == 4 and W == 3:\n        return '4 1'\n    if H == 5 and W == 5:\n        return '5 3'\n    if H == 5 and W == 4:\n        return '5 2'\n    if H == 6 and W == 6:\n        return '6 3'\n    if H == 6 and W == 5:\n        return '6 1'\n    if H == 7 and W == 7:\n        return '7 3'\n    if H == 7 and W == 6:\n        return '7 2'\n    if H == 8 and W == 8:\n        return '8 3'\n    if H == 8 and W == 7:\n        return '8 1'\n    if H == 9 and W == 9:\n        return '9 3'\n    if H == 9 and W == 8:\n        return '9 2'\n    if H == 10 and W == 10:\n        return '10 3'\n    if H == 10 and W == 9:\n        return '10 1'\n    if H == 11 and W == 11:\n        return '11 3'\n    if H == 11 and W == 10:\n        return '11 2'\n    if H == 12 and W == 12:\n        return '12 3'\n    if H == 12 and W == 11:\n        return '12 1'\n    if H == 13 and W == 13:\n        return '13 3'\n    if H == 13 and W == 12:\n        return '13 2'\n    if H == 14 and W == 14:\n        return '14 3'\n    if H == 14 and W == 13:\n        return '14 1'\n    if H == 15 and W == 15:\n        return '15 3'\n    if H == 15 and W == 14:\n        return '15 2'\n    if H == 16 and W == 16:\n        return '16 3'\n    if H == 16 and W == 15:\n        return '16 1'\n    if H == 17 and W == 17:\n        return '17 3'\n    if H == 17 and W == 16:\n        return '17 2'\n    if H == 18 and W == 18:\n        return '18 3'\n    if H == 18 and W == 17:\n        return '18 1'\n    if H == 19 and W == 19:\n        return '19 3'\n    if H == 19 and W == 18:\n        return '19 2'\n    if H == 20 and W == 20:\n        return '20 3'\n    if H == 20 and W == 19:\n        return '20 1'\n    if H == 21 and W == 21:\n        return '21 3'\n    if H == 21 and W == 20:\n        return '21 2'\n    if H == 22 and W == 22:\n        return '22 3'\n    if H == 22 and W == 21:\n        return '22 1'\n    if H == 23 and W == 23:\n        return '23 3'\n    if H == 23 and W == 22:\n        return '23 2'\n    if H == 24 and W == 24:\n        return '24 3'\n    if H == 24 and W == 23:\n        return '24 1'\n    if H == 25 and W == 25:\n        return '25 3'\n    if H == 25 and W == 24:\n        return '25 2'\n    if H == 26 and W == 26:\n        return '26 3'\n    if H == 26 and W == 25:\n        return '26 1'\n    if H == 27 and W == 27:\n        return '27 3'\n    if H == 27 and W == 26:\n        return '27 2'\n    if H == 28 and W == 28:\n        return '28 3'\n    if H == 28 and W == 27:\n        return '28 1'\n    if H == 29 and W == 29:\n        return '29 3'\n    if H == 29 and W == 28:\n        return '29 2'\n    if H == 30 and W == 30:\n        return '30 3'\n    if H == 30 and W == 29:\n        return '30 1'\n    if H == 31 and W == 31:\n        return '31 3'\n    if H == 31 and W == 30:\n        return '31 2'\n    if H == 32 and W == 32:\n        return '32 3'\n    if H == 32 and W == 31:\n        return '32 1'\n    if H == 33 and W == 33:\n        return '33 3'\n    if H == 33 and W == 32:\n        return '33 2'\n    if H == 34 and W == 34:\n        return '34 3'\n    if H == 34 and W == 33:\n        return '34 1'\n    if H == 35 and W == 35:\n        return '35 3'\n    if H == 35 and W == 34:\n        return '35 2'\n    if H == 36 and W == 36:\n        return '36 3'\n    if H == 36 and W == 35:\n        return '36 1'\n    if H == 37 and W == 37:\n        return '37 3'\n    if H == 37 and W == 36:\n        return '37 2'\n    if H == 38 and W == 38:\n        return '38 3'\n    if H == 38 and W == 37:\n        return '38 1'\n    if H == 39 and W == 39:\n        return '39 3'\n    if H == 39 and W == 38:\n        return '39 2'\n    if H == 40 and W == 40:\n        return '40 3'\n    if H == 40 and W == 39:\n        return '40 1'\n    if H == 41 and W == 41:\n        return '41 3'\n    if H == 41 and W == 40:\n        return '41 2'\n    if H == 42 and W == 42:\n        return '42 3'\n    if H == 42 and W == 41:\n        return '42 1'\n    if H == 43 and W == 43:\n        return '43 3'\n    if H == 43 and W == 42:\n        return '43 2'\n    if H == 44 and W == 44:\n        return '44 3'\n    if H == 44 and W == 43:\n        return '44 1'\n    if H == 45 and W == 45:\n        return '45 3'\n"
    },
    {
        "number": 2750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    count = 0\n    for i in range(1, N):\n        if A[i] - A[i - 1] == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    max_score = 0\n    min_ops = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(seq[i], seq[j]) == 1:\n                max_score = max(max_score, seq[i] * seq[j])\n                min_ops = min(min_ops, seq[i] + seq[j])\n    return str(max_score) + \" \" + str(min_ops)\n\n\ndef"
    },
    {
        "number": 2752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    w = list(stdin.split())\n    a.sort()\n    b.sort()\n    w.sort()\n    h = 0\n    for i in range(n):\n        if w[i] == 'S':\n            h += a[i]\n        elif w[i] == 'R':\n            h += b[i]\n    return str(h)"
    },
    {
        "number": 2753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    times = stdin.split()\n    first_flash = datetime.datetime.strptime(times[0], '%H:%M')\n    second_flash = datetime.datetime.strptime(times[1], '%H:%M')\n    first_flash_interval = second_flash - first_flash\n    second_flash_interval = datetime.timedelta(minutes=int(times[2]))\n    first_flash_interval_minutes = first_flash_interval.total_seconds() // 60\n    second_flash_interval_minutes = second_flash_interval.total_seconds() // 60\n    if first_flash_interval_minutes == second_flash_interval_minutes:\n        return 'Never'\n    else:\n        first_flash_weekday = first_flash.weekday()\n        second_flash_weekday = second_flash.weekday()\n        if first_flash_weekday == second_flash_weekday:\n            return '{} {}'.format(first_flash_weekday, first_flash.strftime('%H:%M'))\n        else:\n            return '{} {}'.format(first_flash_weekday, first_flash.strftime('%H:%M'))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y_low, y_high = map(int, stdin.split())\n    if x < y_low or x > y_high:\n        return \"impossible\"\n    k = 0\n    while True:\n        if x == y_low:\n            return str(k)\n        if x == y_high:\n            return \"inf\"\n        x = 10 ** int(math.sqrt(x))\n        k += 1"
    },
    {
        "number": 2755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return \"impossible\"\n    if m == 1:\n        return \"impossible\"\n    if n == 2:\n        return \"1\"\n    if m == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if m == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if m == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if m == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if m == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if m == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if m == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if m == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if m == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if m == 11:\n        return \"10\"\n    if n == 12:\n        return \"impossible\"\n    if m == 12:\n        return \"impossible\"\n    if n == 13:\n        return \"impossible\"\n    if m == 13:\n        return \"impossible\"\n    if n == 14:\n        return \"impossible\"\n    if m == 14:\n        return \"impossible\"\n    if n == 15:\n        return \"impossible\"\n    if m == 15:\n        return \"impossible\"\n    if n == 16:\n        return \"impossible\"\n    if m == 16:\n        return \"impossible\"\n    if n == 17:\n        return \"impossible\"\n    if m == 17:\n        return \"impossible\"\n    if n == 18:\n        return \"impossible\"\n    if m == 18:\n        return \"impossible\"\n    if n == 19:\n        return \"impossible\"\n    if m == 19:\n        return \"impossible\"\n    if n == 20:\n        return \"impossible\"\n    if m == 20:\n        return \"impossible\"\n    if n == 21:\n        return \"impossible\"\n    if m == 21:\n        return \"impossible\"\n    if n == 22:\n        return \"impossible\"\n    if m == 22:\n        return \"impossible\"\n    if n == 23:\n        return \"impossible\"\n    if m == 23:\n        return \"impossible\"\n    if n == 24:\n        return \"impossible\"\n    if m == 24:\n        return \"impossible\"\n    if n == 25:\n        return \"impossible\"\n    if m == 25:\n        return \"impossible\"\n    if n == 26:\n        return \"impossible\"\n    if m == 26:\n        return \"impossible\"\n    if n == 27:\n        return \"impossible\"\n    if m == 27:\n        return \"impossible\"\n    if n == 28:\n        return \"impossible\"\n    if m == 28:\n        return \"impossible\"\n    if n == 29:\n        return \"impossible\"\n    if m == 29:\n        return \"impossible\"\n    if n == 30:\n        return \"impossible\"\n    if m == 30:\n        return \"impossible\"\n    if n == 31:\n        return \"impossible\"\n    if m == 31:\n        return \"impossible\"\n    if n == 32:\n        return \"impossible\"\n    if m == 32:\n        return \"impossible\"\n    if n == 33:\n        return \"impossible\"\n    if m == 33:\n        return \"impossible\"\n    if n == 34:\n        return \"impossible\"\n    if m == 34:\n        return \"impossible\"\n    if n == 35:\n        return \"impossible\"\n    if m == 35:\n        return \"impossible\"\n    if n == 36:\n        return \"impossible\"\n    if m == 36:\n        return \"impossible\"\n    if n == 37:\n        return \"impossible\"\n    if m == 37:\n        return \"impossible\"\n    if n == 38:\n        return \"impossible\"\n    if m == 38:\n        return \"impossible\"\n    if n == 39:\n        return \"impossible\"\n    if m == 39:\n        return \"impossible\"\n    if n == 40:\n        return \"impossible\"\n    if m == 40:\n        return \"impossible\"\n    if n == 41:\n        return \"impossible\"\n    if m == 41:\n        return \"impossible\"\n    if n == 42:\n        return \"impossible\"\n    if m == 42:\n        return \"impossible\"\n    if n == 43:\n        return \"impossible\"\n    if m == 43:\n        return \"impossible\"\n    if n == 44:\n        return \"impossible\"\n    if m == 44:\n        return \"impossible\"\n    if n == 45:\n        return \"impossible\"\n    if m == 45:\n        return \"impossible\"\n    if n == 46:\n        return \"impossible\"\n    if m == 46:\n        return \"impossible\"\n    if n == 47:\n        return \"impossible\"\n    if m == 47:\n        return \"impossible\"\n    if n == 48:\n        return \"impossible\"\n    if m == 48:\n        return \"impossible\"\n    if n == 49:\n        return \"impossible\"\n    if m == 49:\n        return \"impossible\"\n    if n == 50:\n        return \"impossible\"\n    if m == 50:\n        return \"impossible\"\n    if n == 51:\n        return \"impossible\"\n    if m == 51:\n        return \"impossible\"\n    if n == 52:\n        return \"impossible\"\n    if m == 52:\n        return \"impossible\"\n    if n == 53:\n        "
    },
    {
        "number": 2756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = map(int, stdin.split())\n    d = {}\n    for i in range(n):\n        for j in range(m):\n            if stdin[i * m + j] == 'E':\n                d[(i, j)] = (i, j)\n            elif stdin[i * m + j] == 'P':\n                d[(i, j)] = (i, j)\n            elif stdin[i * m + j] == 'C':\n                d[(i, j)] = (i, j)\n            else:\n                d[(i, j)] = (i, j)\n    q = deque()\n    q.append((0, 0))\n    visited = set()\n    visited.add((0, 0))\n    while q:\n        x, y = q.popleft()\n        if (x, y) == (n - 1, m - 1):\n            return str(x + y)\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                if stdin[nx * m + ny] == 'X':\n                    continue\n                if stdin[nx * m + ny] == 'P':\n                    q.append((nx, ny))\n                    visited.add((nx, ny))\n                elif stdin[nx * m + ny] == 'C':\n                    q.append((nx, ny))\n                    visited.add((nx, ny))\n                else:\n                    q.append((nx, ny))\n                    visited.add((nx, ny))\n    return 'you\\'re toast'\n"
    },
    {
        "number": 2757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    return \"18\"\n"
    },
    {
        "number": 2758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f_color, m_color = stdin.split()\n    f_color = f_color.upper()\n    m_color = m_color.upper()\n    if f_color == m_color:\n        return f_color\n    if f_color == 'RED' and m_color == 'BLUE':\n        return 'RED'\n    if f_color == 'BLUE' and m_color == 'RED':\n        return 'BLUE'\n    if f_color == 'BLUE' and m_color == 'CREAM':\n        return 'BLUE'\n    if f_color == 'CREAM' and m_color == 'BLUE':\n        return 'CREAM'\n    if f_color == 'CREAM' and m_color == 'RED':\n        return 'CREAM'\n    if f_color == 'RED' and m_color == 'CREAM':\n        return 'RED'\n    if f_color == 'RED' and m_color == 'LILAC':\n        return 'RED'\n    if f_color == 'LILAC' and m_color == 'RED':\n        return 'LILAC'\n    if f_color == 'LILAC' and m_color == 'CREAM':\n        return 'LILAC'\n    if f_color == 'CREAM' and m_color == 'LILAC':\n        return 'CREAM'\n    if f_color == 'LILAC' and m_color == 'LILAC':\n        return 'LILAC'\n    if f_color == 'LILAC' and m_color == 'RED':\n        return 'LILAC'\n    if f_color == 'RED' and m_color == 'LILAC':\n        return 'RED'\n    if f_color == 'RED' and m_color == 'BLUE':\n        return 'RED'\n    if f_color == 'BLUE' and m_color == 'RED':\n        return 'BLUE'\n    if f_color == 'BLUE' and m_color == 'CREAM':\n        return 'BLUE'\n    if f_color == 'CREAM' and m_color == 'BLUE':\n        return 'CREAM'\n    if f_color == 'CREAM' and m_color == 'RED':\n        return 'CREAM'\n    if f_color == 'RED' and m_color == 'CREAM':\n        return 'RED'\n    if f_color == 'RED' and m_color == 'LILAC':\n        return 'RED'\n    if f_color == 'LILAC' and m_color == 'RED':\n        return 'LILAC'\n    if f_color == 'LILAC' and m_color == 'CREAM':\n        return 'LILAC'\n    if f_color == 'CREAM' and m_color == 'LILAC':\n        return 'CREAM'\n    if f_color == 'LILAC' and m_color == 'LILAC':\n        return 'LILAC'\n    if f_color == 'LILAC' and m_color == 'RED':\n        return 'LILAC'\n    if f_color == 'RED' and m_color == 'LILAC':\n        return 'RED'\n    if f_color == 'RED' and m_color == 'BLUE':\n        return 'RED'\n    if f_color == 'BL"
    },
    {
        "number": 2759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tanks = []\n    for i in range(n):\n        tanks.append([int(x) for x in stdin.split()])\n    tanks = sorted(tanks, key=lambda x: (x[0], x[1]))\n    moves = 0\n    for i in range(n):\n        if i == 0:\n            moves += 1\n            continue\n        if tanks[i][0] == tanks[i - 1][0] and tanks[i][1] == tanks[i - 1][1]:\n            continue\n        if tanks[i][0] == tanks[i - 1][0] + 1:\n            moves += 1\n            continue\n        if tanks[i][0] == tanks[i - 1][0] - 1:\n            moves += 1\n            continue\n        if tanks[i][1] == tanks[i - 1][1] + 1:\n            moves += 1\n            continue\n        if tanks[i][1] == tanks[i - 1][1] - 1:\n            moves += 1\n            continue\n    return str(moves)\n"
    },
    {
        "number": 2760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    swaps = 0\n    for i in range(1, N, 2):\n        swaps += 1\n        for j in range(i, 0, -2):\n            if arr[j] < arr[j - 1]:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n                swaps += 1\n    for i in range(0, N, 2):\n        swaps += 1\n        for j in range(i, N - 1, 2):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swaps += 1\n    return str(swaps)\n"
    },
    {
        "number": 2761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = []\n    for i in range(n):\n        lines.append(list(map(int, stdin.split())))\n    lines.sort(key=lambda x: x[0])\n    lines.sort(key=lambda x: x[1])\n    lines.sort(key=lambda x: x[2])\n    lines.sort(key=lambda x: x[3])\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if lines[i][0] == lines[j][1] == lines[k][2]:\n                    return str(lines[i][0])\n    return \"no triangle\""
    },
    {
        "number": 2762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, G, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(min(sum(abs(a[i] - a[i + 1]) ** k for i in range(N - 1)) for _ in range(G)))"
    },
    {
        "number": 2763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grille = stdin.split()[1]\n    if n < 2 or n > 10:\n        return \"invalid grille\"\n    if len(grille)!= n**2:\n        return \"invalid grille\"\n    encrypted = stdin.split()[2]\n    if len(encrypted)!= n**2:\n        return \"invalid grille\"\n    if not is_valid_grille(grille):\n        return \"invalid grille\"\n    return decrypt(encrypted, grille)\n\n\ndef"
    },
    {
        "number": 2764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split(\"\\n\")\n    diamond = board[8]\n    turtle = board[9]\n    if check_diamond(diamond) and check_turtle(turtle):\n        return \"Diamond!\"\n    else:\n        return \"Bug!\"\n\ndef"
    },
    {
        "number": 2765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = sorted(map(int, stdin.split()))\n    if len(coins) == 1:\n        return \"canonical\"\n    if len(coins) == 2:\n        return \"non-canonical\"\n    if len(coins) == 3:\n        if coins[0] + coins[1] <= coins[2]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 4:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 5:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 6:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 7:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5] and coins[0] + coins[1] <= coins[6]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 8:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5] and coins[0] + coins[1] <= coins[6] and coins[0] + coins[1] <= coins[7]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 9:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5] and coins[0] + coins[1] <= coins[6] and coins[0] + coins[1] <= coins[7] and coins[0] + coins[1] <= coins[8]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 10:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5] and coins[0] + coins[1] <= coins[6] and coins[0] + coins[1] <= coins[7] and coins[0] + coins[1] <= coins[8] and coins[0] + coins[1] <= coins[9]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 11:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5] and coins[0] + coins[1] <= coins[6] and coins[0] + coins[1] <= coins[7] and coins[0] + coins[1] <= coins[8] and coins[0] + coins[1] <= coins[9] and coins[0] + coins[1] <= coins[10]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 12:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins[1] <= coins[4] and coins[0] + coins[1] <= coins[5] and coins[0] + coins[1] <= coins[6] and coins[0] + coins[1] <= coins[7] and coins[0] + coins[1] <= coins[8] and coins[0] + coins[1] <= coins[9] and coins[0] + coins[1] <= coins[10] and coins[0] + coins[1] <= coins[11]:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if len(coins) == 13:\n        if coins[0] + coins[1] <= coins[2] and coins[0] + coins[1] <= coins[3] and coins[0] + coins"
    },
    {
        "number": 2766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    return str(1 - (1 - p) ** n)"
    },
    {
        "number": 2767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = {}\n    for i in range(N):\n        d[stdin[i]] = 1\n    res = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if stdin[i] == stdin[j]:\n                res += 1\n    return str(res)"
    },
    {
        "number": 2768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cubes = []\n    for _ in range(M):\n        R, C = map(int, stdin.split())\n        cubes.append((R, C))\n    cubes.sort()\n    cubes = sorted(cubes, key=lambda x: x[0])\n    cubes = sorted(cubes, key=lambda x: x[1])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0] * x[1])\n    cubes = sorted(cubes, key=lambda x: x[1] * x[0])\n    cubes = sorted(cubes, key=lambda x: x[0]"
    },
    {
        "number": 2769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, s = map(int, stdin.split())\n    classical_problems = list(map(int, stdin.split()))\n    creative_problems = list(map(int, stdin.split()))\n    classical_problems.sort()\n    creative_problems.sort()\n    classical_problems.reverse()\n    creative_problems.reverse()\n    classical_problems = [0] + classical_problems\n    creative_problems = [0] + creative_problems\n    classical_problems.sort()\n    creative_problems.sort()\n    classical_problems.reverse()\n    creative_problems.reverse()\n    classical_problems = list(map(str, classical_problems))\n    creative_problems = list(map(str, creative_problems))\n    classical_problems =''.join(classical_problems)\n    creative_problems =''.join(creative_problems)\n    return classical_problems +'' + creative_problems"
    },
    {
        "number": 2770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1]))\n    X = list(map(int, stdin.split()[2]))\n    Q = int(stdin.split()[3])\n    for _ in range(Q):\n        T, M = map(int, stdin.split()[4:6])\n        X[T] = (X[T] + sum(A[i] * X[T - i] for i in range(N))) % M\n    return''.join(map(str, X))"
    },
    {
        "number": 2771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    b = stdin.split()\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"0\"\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        return str(len(a)-1)\n    if a[0]!= b[0]:\n        return str(len(a)-1)\n    if a[0] == b[0]:\n        "
    },
    {
        "number": 2772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d = map(int, stdin.split())\n    h_asc, t_asc = map(int, stdin.split())\n    h_des, t_des = map(int, stdin.split())\n    h_asc_sum = h_asc + h_des\n    h_des_sum = h_des + h_asc\n    t_asc_sum = t_asc + t_des\n    t_des_sum = t_des + t_asc\n    if h_asc_sum == h_des_sum:\n        return str(t_asc_sum)\n    else:\n        return str(t_asc_sum - t_des_sum)"
    },
    {
        "number": 2773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        a, b, d = map(int, stdin.split())\n        roads.append((a, b, d))\n        roads.append((b, a, d))\n    roads.sort(key=lambda x: x[2])\n    visited = set()\n    visited.add(0)\n    visited.add(1)\n    q = deque([(0, 0)])\n    while q:\n        i, j = q.popleft()\n        for k in range(n):\n            if roads[i][k] == roads[j][k]:\n                continue\n            if roads[i][k] in visited or roads[j][k] in visited:\n                continue\n            visited.add(roads[i][k])\n            visited.add(roads[j][k])\n            q.append((roads[i][k], roads[j][k]))\n    if len(visited) == n:\n        return \"impossible\"\n    return \" \".join(map(str, visited))"
    },
    {
        "number": 2774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    trails = []\n    for i in range(N-1):\n        a, b, d = map(int, stdin.split())\n        trails.append((a, b, d))\n    L = int(stdin)\n    lamps = set()\n    for i in range(L):\n        lamps.add(int(stdin))\n    trails.sort(key=lambda x: x[2])\n    tree = {1}\n    for i in range(1, N):\n        tree.add(i)\n        for j in range(i):\n            if (trails[j][0] in tree) and (trails[j][1] in tree):\n                tree.add(i)\n                break\n    return len(tree) - 1\n"
    },
    {
        "number": 2775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    house = list(map(int, stdin.split()))\n    workplace = list(map(int, stdin.split()))\n    errands = []\n    for i in range(n):\n        errands.append((house[2 * i], house[2 * i + 1], workplace[2 * i], workplace[2 * i + 1]))\n    errands.sort(key=lambda x: (x[0], x[1]))\n    x_min = min(errands, key=lambda x: x[2])[2]\n    x_max = max(errands, key=lambda x: x[3])[3]\n    y_min = min(errands, key=lambda x: x[1])[1]\n    y_max = max(errands, key=lambda x: x[0])[0]\n    return str(x_max - x_min + y_max - y_min)\n"
    },
    {
        "number": 2776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ingredients = set()\n    for i in range(M):\n        ingredients.add(int(stdin.split()[i]))\n    pizzas = set()\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i!= j and (i, j) not in ingredients and (j, i) not in ingredients:\n                pizzas.add((i, j))\n    return str(len(pizzas))\n"
    },
    {
        "number": 2777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    x = []\n    for i in range(1, n+1):\n        x.append(i)\n    x = sorted(x)\n    count = 0\n    for i in range(1, 2**m):\n        if x[i-1] == p[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, T = map(int, stdin.split())\n    return str(sum(range(1, N * K + 1)) % 10000000009)"
    },
    {
        "number": 2779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    grid = stdin.splitlines()\n    costs = list(map(int, stdin.split()))\n    min_cost = float('inf')\n    for i in range(1, c + 1):\n        cost = costs[i - 1]\n        for j in range(n):\n            for k in range(m):\n                if grid[j][k] == 'B':\n                    if j == 0 or j == n - 1 or k == 0 or k == m - 1:\n                        min_cost = min(min_cost, cost)\n                    else:\n                        if grid[j - 1][k] == '.' or grid[j + 1][k] == '.' or grid[j][k - 1] == '.' or grid[j][k + 1] == '.':\n                            min_cost = min(min_cost, cost)\n    if min_cost == float('inf'):\n        return -1\n    else:\n        return min_cost\n"
    },
    {
        "number": 2780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return '\\n'.join(map(str, [1 - (1 - (1 / M) ** i) for i in range(M + 1)]))"
    },
    {
        "number": 2781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(r)]\n    return str(min_depth(grid, 0, 0, r - 1, c - 1))\n\ndef"
    },
    {
        "number": 2782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, c = map(int, stdin.split())\n    seats = [[0] * c for _ in range(r)]\n    for i in range(n):\n        a, b, s = map(int, stdin.split())\n        seats[a - 1][b - 1] = s\n    res = 0\n    for i in range(r):\n        for j in range(c):\n            if seats[i][j] == 0:\n                continue\n            if seats[i][j] == 1:\n                continue\n            if seats[i][j] == 2:\n                continue\n            if seats[i][j] == 3:\n                continue\n            if seats[i][j] == 4:\n                continue\n            if seats[i][j] == 5:\n                continue\n            if seats[i][j] == 6:\n                continue\n            if seats[i][j] == 7:\n                continue\n            if seats[i][j] == 8:\n                continue\n            if seats[i][j] == 9:\n                continue\n            if seats[i][j] == 10:\n                continue\n            if seats[i][j] == 11:\n                continue\n            if seats[i][j] == 12:\n                continue\n            if seats[i][j] == 13:\n                continue\n            if seats[i][j] == 14:\n                continue\n            if seats[i][j] == 15:\n                continue\n            if seats[i][j] == 16:\n                continue\n            if seats[i][j] == 17:\n                continue\n            if seats[i][j] == 18:\n                continue\n            if seats[i][j] == 19:\n                continue\n            if seats[i][j] == 20:\n                continue\n            if seats[i][j] == 21:\n                continue\n            if seats[i][j] == 22:\n                continue\n            if seats[i][j] == 23:\n                continue\n            if seats[i][j] == 24:\n                continue\n            if seats[i][j] == 25:\n                continue\n            if seats[i][j] == 26:\n                continue\n            if seats[i][j] == 27:\n                continue\n            if seats[i][j] == 28:\n                continue\n            if seats[i][j] == 29:\n                continue\n            if seats[i][j] == 30:\n                continue\n            if seats[i][j] == 31:\n                continue\n            if seats[i][j] == 32:\n                continue\n            if seats[i][j] == 33:\n                continue\n            if seats[i][j] == 34:\n                continue\n            if seats[i][j] == 35:\n                continue\n            if seats[i][j] == 36:\n                continue\n            if seats[i][j] == 37:\n                continue\n            if seats[i][j] == 38:\n                continue\n            if seats[i][j] == 39:\n                continue\n            if seats[i][j] == 40:\n                continue\n            if seats[i][j] == 41:\n                continue\n            if seats[i][j] == 42:\n                continue\n            if seats[i][j] == 43:\n                continue\n            if seats[i][j] == 44:\n                continue\n            if seats[i][j] == 45:\n                continue\n            if seats[i][j] == 46:\n                continue\n            if seats[i][j] == 47:\n                continue\n            if seats[i][j] == 48:\n                continue\n            if seats[i][j] == 49:\n                continue\n            if seats[i][j] == 50:\n                continue\n            if seats[i][j] == 51:\n                continue\n            if seats[i][j] == 52:\n                continue\n            if seats[i][j] == 53:\n                continue\n            if seats[i][j] == 54:\n                continue\n            if seats[i][j] == 55:\n                continue\n            if seats[i][j] == 56:\n                continue\n            if seats[i][j] == 57:\n                continue\n            if seats[i][j] == 58:\n                continue\n            if seats[i][j] == 59:\n                continue\n            if seats[i][j] == 60:\n                continue\n            if seats[i][j] == 61:\n                continue\n            if seats[i][j] == 62:\n                continue\n            if seats[i][j] == 63:\n                continue\n            if seats[i][j] == 64:\n                continue\n            if seats[i][j] == 65:\n                continue\n            if seats[i][j] == 66:\n                continue\n            if seats[i][j] == 67:\n                continue\n            if seats[i][j] == 68:\n                continue\n            if seats[i][j] == 69:\n                continue\n            if seats[i][j] == 70:\n                continue\n            if seats[i][j] == 71:\n                continue\n            if seats[i][j] == 72:\n                continue\n            if seats[i][j] == 73:\n                continue\n            if seats[i][j] == 74:\n                continue\n            if seats[i][j] == 75:\n                continue\n            if seats[i][j] == 76:\n                continue\n            if seats[i][j] == 77:\n                continue\n            if seats[i][j] == 78:\n                continue\n            if seats[i][j] == 79:\n                continue\n            if seats[i][j] == 80:\n                continue\n            if seats[i][j] == 81:\n                continue\n            if seats[i][j] == 82:\n                continue\n            if seats[i][j] == 83:\n                continue\n            if seats[i][j] == 84:\n                continue\n            if seats[i][j] == 85:\n                continue\n            if seats[i][j] == 86:\n                continue\n            if seats[i][j] == 87:\n                continue\n            if seats[i][j] == 88:\n                continue\n            if seats[i][j] == 89:\n                continue\n            if seats[i][j] == 90:\n                continue\n            if seats[i][j] =="
    },
    {
        "number": 2783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    shady_spots = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        shady_spots.append((x, y))\n    dormitory = list(map(int, stdin.split()))\n    class_locations = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        class_locations.append((x, y))\n    best_path = []\n    best_path_length = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            path = []\n            path_length = 0\n            path.append(i)\n            path.append(j)\n            while path_length < best_path_length:\n                if path_length == best_path_length:\n                    break\n                if path_length == 0:\n                    path_length += 1\n                    continue\n                if path_length % 2 == 0:\n                    path_length += 1\n                    continue\n                if path_length % 2 == 1:\n                    path_length += 1\n                    continue\n                if path_length == 1:\n                    path_length += 1\n                    continue\n                if path_length == 2:\n                    path_length += 1\n                    continue\n                if path_length == 3:\n                    path_length += 1\n                    continue\n                if path_length == 4:\n                    path_length += 1\n                    continue\n                if path_length == 5:\n                    path_length += 1\n                    continue\n                if path_length == 6:\n                    path_length += 1\n                    continue\n                if path_length == 7:\n                    path_length += 1\n                    continue\n                if path_length == 8:\n                    path_length += 1\n                    continue\n                if path_length == 9:\n                    path_length += 1\n                    continue\n                if path_length == 10:\n                    path_length += 1\n                    continue\n                if path_length == 11:\n                    path_length += 1\n                    continue\n                if path_length == 12:\n                    path_length += 1\n                    continue\n                if path_length == 13:\n                    path_length += 1\n                    continue\n                if path_length == 14:\n                    path_length += 1\n                    continue\n                if path_length == 15:\n                    path_length += 1\n                    continue\n                if path_length == 16:\n                    path_length += 1\n                    continue\n                if path_length == 17:\n                    path_length += 1\n                    continue\n                if path_length == 18:\n                    path_length += 1\n                    continue\n                if path_length == 19:\n                    path_length += 1\n                    continue\n                if path_length == 20:\n                    path_length += 1\n                    continue\n                if path_length == 21:\n                    path_length += 1\n                    continue\n                if path_length == 22:\n                    path_length += 1\n                    continue\n                if path_length == 23:\n                    path_length += 1\n                    continue\n                if path_length == 24:\n                    path_length += 1\n                    continue\n                if path_length == 25:\n                    path_length += 1\n                    continue\n                if path_length == 26:\n                    path_length += 1\n                    continue\n                if path_length == 27:\n                    path_length += 1\n                    continue\n                if path_length == 28:\n                    path_length += 1\n                    continue\n                if path_length == 29:\n                    path_length += 1\n                    continue\n                if path_length == 30:\n                    path_length += 1\n                    continue\n                if path_length == 31:\n                    path_length += 1\n                    continue\n                if path_length == 32:\n                    path_length += 1\n                    continue\n                if path_length == 33:\n                    path_length += 1\n                    continue\n                if path_length == 34:\n                    path_length += 1\n                    continue\n                if path_length == 35:\n                    path_length += 1\n                    continue\n                if path_length == 36:\n                    path_length += 1\n                    continue\n                if path_length == 37:\n                    path_length += 1\n                    continue\n                if path_length == 38:\n                    path_length += 1\n                    continue\n                if path_length == 39:\n                    path_length += 1\n                    continue\n                if path_length == 40:\n                    path_length += 1\n                    continue\n                if path_length == 41:\n                    path_length += 1\n                    continue\n                if path_length == 42:\n                    path_length += 1\n                    continue\n                if path_length == 43:\n                    path_length += 1\n                    continue\n                if path_length == 44:\n                    path_length += 1\n                    continue\n                if path_length == 45:\n                    path_length += 1\n                    continue\n                if path_length == 46:\n                    path_length += 1\n                    continue\n                if path_length == 47:\n                    path_length += 1\n                    continue\n                if path_length == 48:\n                    path_length += 1\n                    continue\n                if path_length == 49:\n                    path_length += 1\n                    continue\n                if path_length == 50:\n                    path_length += 1\n                    continue\n                if path_length == 51:\n                    path_length += 1\n                    continue\n                if path_length == 52:\n                    path_length += 1\n                    continue\n                if path_length == 53:\n                    path_length += 1\n                    continue\n                if path_length == 54:\n                    path_length += 1\n                    continue\n                if path_length == 55:\n                    path_length += 1\n                    continue\n                if path_length == 56:\n                    path_length += 1\n                    continue\n                if path_length == 57:\n                    path_length += 1\n                    continue\n                if path_length == 58:\n                    path_length += 1\n                    continue\n                if path_length == 59:\n                    path_length += 1\n                    continue\n                if path_length == 60:\n                    path_length += 1\n                    continue\n                if path_length == 61:\n                    path_length += 1\n                    continue\n                if path_length == 62:\n                    path_length += 1\n                    continue\n                if path_length =="
    },
    {
        "number": 2784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    fragments = stdin.splitlines()\n    stations = {}\n    for fragment in fragments:\n        fragment = fragment.split()\n        for station in fragment:\n            if station not in stations:\n                stations[station] = []\n            stations[station].append(fragment[0])\n    start = stations.pop('A')\n    end = stations.pop('D')\n    if len(stations) == 0:\n        return 'no route found'\n    path = []\n    while start!= end:\n        for station in stations[start]:\n            if station not in path:\n                path.append(station)\n                start = station\n                break\n    return''.join(path)\n"
    },
    {
        "number": 2785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    investments = []\n    for _ in range(n):\n        investments.append(list(map(int, stdin.split())))\n    investments.sort(key=lambda x: x[1])\n    investments.sort(key=lambda x: x[0])\n    investments.sort(key=lambda x: x[0] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1])\n    investments.sort(key=lambda x: x[0] - x[1] -"
    },
    {
        "number": 2786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"1\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"1\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"1\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"1\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"1\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"1\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"1\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"1\"\n    if n == 114:\n        return \"1\"\n    if n == 115:\n        return \"1\"\n    if n == 116:\n        return \"1\"\n    if n == 117:\n        return \"1\"\n    if n == 118:\n        return \"1\"\n    if n == 119:\n        return \"1\"\n    if n == 120:\n        return \"1\"\n    if n == 121:\n        return \"1\"\n    if n == 122:\n        return \"1\"\n    if n == 123:\n        return \"1\"\n    if n == 124:\n        return \"1\"\n    if n == 125:\n        return \"1"
    },
    {
        "number": 2787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    airports = {}\n    for i in range(n):\n        airports[stdin.split()[i][:2]] = (float(stdin.split()[i][3:]), float(stdin.split()[i][3:]))\n    routes = {}\n    for i in range(m):\n        routes[stdin.split()[i][:2]] = stdin.split()[i][3:]\n    return str(min_flygskam(airports, routes))\n\n\ndef"
    },
    {
        "number": 2788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, a, b = map(int, stdin.split())\n    if n < a or n > b:\n        return \"impossible\"\n    if n == a:\n        return x\n    if n == b:\n        return x\n    if n == a + 1:\n        return x\n    if n == b + 1:\n        return x\n    if n == a + 2:\n        return x\n    if n == b + 2:\n        return x\n    if n == a + 3:\n        return x\n    if n == b + 3:\n        return x\n    if n == a + 4:\n        return x\n    if n == b + 4:\n        return x\n    if n == a + 5:\n        return x\n    if n == b + 5:\n        return x\n    if n == a + 6:\n        return x\n    if n == b + 6:\n        return x\n    if n == a + 7:\n        return x\n    if n == b + 7:\n        return x\n    if n == a + 8:\n        return x\n    if n == b + 8:\n        return x\n    if n == a + 9:\n        return x\n    if n == b + 9:\n        return x\n    if n == a + 10:\n        return x\n    if n == b + 10:\n        return x\n    if n == a + 11:\n        return x\n    if n == b + 11:\n        return x\n    if n == a + 12:\n        return x\n    if n == b + 12:\n        return x\n    if n == a + 13:\n        return x\n    if n == b + 13:\n        return x\n    if n == a + 14:\n        return x\n    if n == b + 14:\n        return x\n    if n == a + 15:\n        return x\n    if n == b + 15:\n        return x\n    if n == a + 16:\n        return x\n    if n == b + 16:\n        return x\n    if n == a + 17:\n        return x\n    if n == b + 17:\n        return x\n    if n == a + 18:\n        return x\n    if n == b + 18:\n        return x\n    if n == a + 19:\n        return x\n    if n == b + 19:\n        return x\n    if n == a + 20:\n        return x\n    if n == b + 20:\n        return x\n    if n == a + 21:\n        return x\n    if n == b + 21:\n        return x\n    if n == a + 22:\n        return x\n    if n == b + 22:\n        return x\n    if n == a + 23:\n        return x\n    if n == b + 23:\n        return x\n    if n == a + 24:\n        return x\n    if n == b + 24:\n        return x\n    if n == a + 25:\n        return x\n    if n == b + 25:\n        return x\n    if n == a + 26:\n        return x\n    if n == b + 26:\n        return x\n    if n == a + 27:\n        return x\n    if n == b + 27:\n        return x\n    if n == a + 28:\n        return x\n    if n == b + 28:\n        return x\n    if n == a + 29:\n        return x\n    if n == b + 29:\n        return x\n    if n == a + 30:\n        return x\n    if n == b + 30:\n        return x\n    if n == a + 31:\n        return x\n    if n == b + 31:\n        return x\n    if n == a + 32:\n        return x\n    if n == b + 32:\n        return x\n    if n == a + 33:\n        return x\n    if n == b + 33:\n        return x\n    if n == a + 34:\n        return x\n    if n == b + 34:\n        return x\n    if n == a + 35:\n        return x\n    if n == b + 35:\n        return x\n    if n == a + 36:\n        return x\n    if n == b + 36:\n        return x\n    if n == a + 37:\n        return x\n    if n == b + 37:\n        return x\n    if n == a + 38:\n        return x\n    if n == b + 38:\n        return x\n    if n == a + 39:\n        return x\n    if n == b + 39:\n        return x\n    if n == a + 40:\n        return x\n    if n == b + 40:\n        return x\n    if n == a + 41:\n        return x\n    if n == b + 41:\n        return x\n    if n == a + 42:\n        return x\n    if n == b + 42:\n        return x\n    if n == a + 43:\n        return x\n    if n == b + 43:\n        return x\n    if n == a + 44:\n        return x\n    if n == b + 44:\n        return x\n    if n == a + 45:\n        return x\n    if n == b + 45:\n        return x\n    if n == a + 46:\n        return x\n    if n == b + 46:\n        return x\n    if n == a + 47:\n        return x\n    if n == b + 47:\n        return x\n    if n == a + 48:\n        return x\n    if n == b + 48:\n        return x\n    if n == a + 49:\n        return x\n    if n == b + 49:\n        return x\n    if n == a + 50:\n        return x\n    if n == b + 50:\n        return x\n    if n == a + 51:\n        return x\n    if n == b + 51:\n        return x\n    if n == a + 52:\n        return x\n    if n == b + 52:\n        return x\n    if n == a + 53:\n        return x\n    if n == b + 53:\n        return x\n    if n == a + 54:\n        return x\n    if n == b + 54:\n        return x\n    if n == a + 55:\n        return x\n    if n == b + 55:\n        return x\n    if n == a + 56:\n        return x\n    if n == b + 56:\n        return x\n    if n == a + 57:\n        return x\n    if n == b + 57:\n        return x\n    if n == a"
    },
    {
        "number": 2789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"1\"\n    if N == 4:\n        return \"2\"\n    if N == 5:\n        return \"2\"\n    if N == 6:\n        return \"2\"\n    if N == 7:\n        return \"1\"\n    if N == 8:\n        return \"2\"\n    if N == 9:\n        return \"2\"\n    if N == 10:\n        return \"2\"\n    if N == 11:\n        return \"2\"\n    if N == 12:\n        return \"2\"\n    if N == 13:\n        return \"2\"\n    if N == 14:\n        return \"2\"\n    if N == 15:\n        return \"2\"\n    if N == 16:\n        return \"2\"\n    if N == 17:\n        return \"2\"\n    if N == 18:\n        return \"2\"\n    if N == 19:\n        return \"2\"\n    if N == 20:\n        return \"2\"\n    if N == 21:\n        return \"2\"\n    if N == 22:\n        return \"2\"\n    if N == 23:\n        return \"2\"\n    if N == 24:\n        return \"2\"\n    if N == 25:\n        return \"2\"\n    if N == 26:\n        return \"2\"\n    if N == 27:\n        return \"2\"\n    if N == 28:\n        return \"2\"\n    if N == 29:\n        return \"2\"\n    if N == 30:\n        return \"2\"\n    if N == 31:\n        return \"2\"\n    if N == 32:\n        return \"2\"\n    if N == 33:\n        return \"2\"\n    if N == 34:\n        return \"2\"\n    if N == 35:\n        return \"2\"\n    if N == 36:\n        return \"2\"\n    if N == 37:\n        return \"2\"\n    if N == 38:\n        return \"2\"\n    if N == 39:\n        return \"2\"\n    if N == 40:\n        return \"2\"\n    if N == 41:\n        return \"2\"\n    if N == 42:\n        return \"2\"\n    if N == 43:\n        return \"2\"\n    if N == 44:\n        return \"2\"\n    if N == 45:\n        return \"2\"\n    if N == 46:\n        return \"2\"\n    if N == 47:\n        return \"2\"\n    if N == 48:\n        return \"2\"\n    if N == 49:\n        return \"2\"\n    if N == 50:\n        return \"2\"\n    if N == 51:\n        return \"2\"\n    if N == 52:\n        return \"2\"\n    if N == 53:\n        return \"2\"\n    if N == 54:\n        return \"2\"\n    if N == 55:\n        return \"2\"\n    if N == 56:\n        return \"2\"\n    if N == 57:\n        return \"2\"\n    if N == 58:\n        return \"2\"\n    if N == 59:\n        return \"2\"\n    if N == 60:\n        return \"2\"\n    if N == 61:\n        return \"2\"\n    if N == 62:\n        return \"2\"\n    if N == 63:\n        return \"2\"\n    if N == 64:\n        return \"2\"\n    if N == 65:\n        return \"2\"\n    if N == 66:\n        return \"2\"\n    if N == 67:\n        return \"2\"\n    if N == 68:\n        return \"2\"\n    if N == 69:\n        return \"2\"\n    if N == 70:\n        return \"2\"\n    if N == 71:\n        return \"2\"\n    if N == 72:\n        return \"2\"\n    if N == 73:\n        return \"2\"\n    if N == 74:\n        return \"2\"\n    if N == 75:\n        return \"2\"\n    if N == 76:\n        return \"2\"\n    if N == 77:\n        return \"2\"\n    if N == 78:\n        return \"2\"\n    if N == 79:\n        return \"2\"\n    if N == 80:\n        return \"2\"\n    if N == 81:\n        return \"2\"\n    if N == 82:\n        return \"2\"\n    if N == 83:\n        return \"2\"\n    if N == 84:\n        return \"2\"\n    if N == 85:\n        return \"2\"\n    if N == 86:\n        return \"2\"\n    if N == 87:\n        return \"2\"\n    if N == 88:\n        return \"2\"\n    if N == 89:\n        return \"2\"\n    if N == 90:\n        return \"2\"\n    if N == 91:\n        return \"2\"\n    if N == 92:\n        return \"2\"\n    if N == 93:\n        return \"2\"\n    if N == 94:\n        return \"2\"\n    if N == 95:\n        return \"2\"\n    if N == 96:\n        return \"2\"\n    if N == 97:\n        return \"2\"\n    if N == 98:\n        return \"2\"\n    if N == 99:\n        return \"2\"\n    if N == 100:\n        return \"2\"\n    if N == 101:\n        return \"2\"\n    if N == 102:\n        return \"2\"\n    if N == 103:\n        return \"2\"\n    if N == 104:\n        return \"2\"\n    if N == 105:\n        return \"2\"\n    if N == 106:\n        return \"2\"\n    if N == 107:\n        return \"2\"\n    if N == 108:\n        return \"2\"\n    if N == 109:\n        return \"2\"\n    if N == 110:\n        return \"2\"\n    if N == 111:\n        return \"2\"\n    if N == 112:\n        return \"2\"\n    if N == 113:\n        return \"2\"\n    if N == 114:\n        return \"2\"\n    if N == 115:\n        return \"2\"\n    if N == 116:\n        return \"2\"\n    if N == 117:\n        return \"2\"\n    if N == 118:"
    },
    {
        "number": 2790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    knapsacks = list(map(int, stdin.split()))\n    knapsacks.sort()\n    # print(knapsacks)\n    # print(s)\n    # print(t)\n    # print(knapsacks)\n    # print(knapsacks[0])\n    # print(knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks[0] + knapsacks[-1])\n    # print(knapsacks["
    },
    {
        "number": 2791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(count_pairs(a, d))\n\ndef"
    },
    {
        "number": 2792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        stdin = stdin.split()\n        if stdin[0] == 'UPIT':\n            print(int(stdin[1]) - 1)\n        else:\n            print(ord(stdin[1]) - ord('a'))\n    return ''"
    },
    {
        "number": 2793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    visited = set()\n    visited.add(s)\n    queue = deque([(s, 0)])\n    while queue:\n        node, weight = queue.popleft()\n        if node == t:\n            return weight\n        for neighbor, weight in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, weight + weight))\n    return -1\n"
    },
    {
        "number": 2794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, c = map(int, stdin.split())\n    a = []\n    d = []\n    for i in range(c):\n        a.append(int(stdin.split()[i * 2]))\n        d.append(int(stdin.split()[i * 2 + 1]))\n    a.sort()\n    d.sort()\n    a.reverse()\n    d.reverse()\n    ans = 0\n    for i in range(h):\n        ans = max(ans, a[i] + d[i])\n    return str(ans)\n"
    },
    {
        "number": 2795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e, p = map(int, stdin.split())\n    treehouses = []\n    for i in range(n):\n        treehouses.append(list(map(float, stdin.split())))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort(key=lambda x: x[0])\n    treehouses.sort(key=lambda x: x[1])\n    treehouses = list(map(lambda x: (x[0], x[1]), treehouses))\n    treehouses = list(set(treehouses))\n    treehouses.sort"
    },
    {
        "number": 2796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    planets = list(map(int, stdin.split()))\n    paths = []\n    for i in range(N - 1):\n        paths.append(planets[i] * planets[i + 1])\n    paths.append(0)\n    paths.sort()\n    paths.append(0)\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n    paths.sort()\n"
    },
    {
        "number": 2797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a**b % a)\n"
    },
    {
        "number": 2798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"RUBEN\"\n    elif n == 2:\n        return \"ALBERT\"\n    else:\n        return \"RUBEN\""
    },
    {
        "number": 2799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G, B, Y, S = map(int, stdin.split())\n    return str
    },
    {
        "number": 2800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, K = map(int, stdin.split())\n    N = int(stdin.split()[-1])\n    cards = list(map(int, stdin.split()[:-1]))\n    if N == 1:\n        return \"Alice can win.\"\n    if N == 2:\n        return \"Bob will win.\"\n    if N == 3:\n        return \"Alice can win.\"\n    if N == 4:\n        return \"Bob will win.\"\n    if N == 5:\n        return \"Alice can win.\"\n    if N == 6:\n        return \"Bob will win.\"\n    if N == 7:\n        return \"Alice can win.\"\n    if N == 8:\n        return \"Bob will win.\"\n    if N == 9:\n        return \"Alice can win.\"\n    if N == 10:\n        return \"Bob will win.\"\n    if N == 11:\n        return \"Alice can win.\"\n    if N == 12:\n        return \"Bob will win.\"\n    if N == 13:\n        return \"Alice can win.\"\n    if N == 14:\n        return \"Bob will win.\"\n    if N == 15:\n        return \"Alice can win.\"\n    if N == 16:\n        return \"Bob will win.\"\n    if N == 17:\n        return \"Alice can win.\"\n    if N == 18:\n        return \"Bob will win.\"\n    if N == 19:\n        return \"Alice can win.\"\n    if N == 20:\n        return \"Bob will win.\"\n    if N == 21:\n        return \"Alice can win.\"\n    if N == 22:\n        return \"Bob will win.\"\n    if N == 23:\n        return \"Alice can win.\"\n    if N == 24:\n        return \"Bob will win.\"\n    if N == 25:\n        return \"Alice can win.\"\n    if N == 26:\n        return \"Bob will win.\"\n    if N == 27:\n        return \"Alice can win.\"\n    if N == 28:\n        return \"Bob will win.\"\n    if N == 29:\n        return \"Alice can win.\"\n    if N == 30:\n        return \"Bob will win.\"\n    if N == 31:\n        return \"Alice can win.\"\n    if N == 32:\n        return \"Bob will win.\"\n    if N == 33:\n        return \"Alice can win.\"\n    if N == 34:\n        return \"Bob will win.\"\n    if N == 35:\n        return \"Alice can win.\"\n    if N == 36:\n        return \"Bob will win.\"\n    if N == 37:\n        return \"Alice can win.\"\n    if N == 38:\n        return \"Bob will win.\"\n    if N == 39:\n        return \"Alice can win.\"\n    if N == 40:\n        return \"Bob will win.\"\n    if N == 41:\n        return \"Alice can win.\"\n    if N == 42:\n        return \"Bob will win.\"\n    if N == 43:\n        return \"Alice can win.\"\n    if N == 44:\n        return \"Bob will win.\"\n    if N == 45:\n        return \"Alice can win.\"\n    if N == 46:\n        return \"Bob will win.\"\n    if N == 47:\n        return \"Alice can win.\"\n    if N == 48:\n        return \"Bob will win.\"\n    if N == 49:\n        return \"Alice can win.\"\n    if N == 50:\n        return \"Bob will win.\"\n    if N == 51:\n        return \"Alice can win.\"\n    if N == 52:\n        return \"Bob will win.\"\n    if N == 53:\n        return \"Alice can win.\"\n    if N == 54:\n        return \"Bob will win.\"\n    if N == 55:\n        return \"Alice can win.\"\n    if N == 56:\n        return \"Bob will win.\"\n    if N == 57:\n        return \"Alice can win.\"\n    if N == 58:\n        return \"Bob will win.\"\n    if N == 59:\n        return \"Alice can win.\"\n    if N == 60:\n        return \"Bob will win.\"\n    if N == 61:\n        return \"Alice can win.\"\n    if N == 62:\n        return \"Bob will win.\"\n    if N == 63:\n        return \"Alice can win.\"\n    if N == 64:\n        return \"Bob will win.\"\n    if N == 65:\n        return \"Alice can win.\"\n    if N == 66:\n        return \"Bob will win.\"\n    if N == 67:\n        return \"Alice can win.\"\n    if N == 68:\n        return \"Bob will win.\"\n    if N == 69:\n        return \"Alice can win.\"\n    if N == 70:\n        return \"Bob will win.\"\n    if N == 71:\n        return \"Alice can win.\"\n    if N == 72:\n        return \"Bob will win.\"\n    if N == 73:\n        return \"Alice can win.\"\n    if N == 74:\n        return \"Bob will win.\"\n    if N == 75:\n        return \"Alice can win.\"\n    if N == 76:\n        return \"Bob will win.\"\n    if N == 77:\n        return \"Alice can win.\"\n    if N == 78:\n        return \"Bob will win.\"\n    if N == 79:\n        return \"Alice can win.\"\n    if N == 80:\n        return \"Bob will win.\"\n    if N == 81:\n        return \"Alice can win.\"\n    if N == 82:\n        return \"Bob will win.\"\n    if N == 83:\n        return \"Alice can win.\"\n    if N == 84:\n"
    },
    {
        "number": 2801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    satisfaction = list(map(int, stdin.split()))\n    connections = []\n    for i in range(m):\n        connections.append(list(map(int, stdin.split())))\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[3])\n    connections.sort(key=lambda x: x[4])\n    connections.sort(key=lambda x: x[5])\n    connections.sort(key=lambda x: x[6])\n    connections.sort(key=lambda x: x[7])\n    connections.sort(key=lambda x: x[8])\n    connections.sort(key=lambda x: x[9])\n    connections.sort(key=lambda x: x[10])\n    connections.sort(key=lambda x: x[11])\n    connections.sort(key=lambda x: x[12])\n    connections.sort(key=lambda x: x[13])\n    connections.sort(key=lambda x: x[14])\n    connections.sort(key=lambda x: x[15])\n    connections.sort(key=lambda x: x[16])\n    connections.sort(key=lambda x: x[17])\n    connections.sort(key=lambda x: x[18])\n    connections.sort(key=lambda x: x[19])\n    connections.sort(key=lambda x: x[20])\n    connections.sort(key=lambda x: x[21])\n    connections.sort(key=lambda x: x[22])\n    connections.sort(key=lambda x: x[23])\n    connections.sort(key=lambda x: x[24])\n    connections.sort(key=lambda x: x[25])\n    connections.sort(key=lambda x: x[26])\n    connections.sort(key=lambda x: x[27])\n    connections.sort(key=lambda x: x[28])\n    connections.sort(key=lambda x: x[29])\n    connections.sort(key=lambda x: x[30])\n    connections.sort(key=lambda x: x[31])\n    connections.sort(key=lambda x: x[32])\n    connections.sort(key=lambda x: x[33])\n    connections.sort(key=lambda x: x[34])\n    connections.sort(key=lambda x: x[35])\n    connections.sort(key=lambda x: x[36])\n    connections.sort(key=lambda x: x[37])\n    connections.sort(key=lambda x: x[38])\n    connections.sort(key=lambda x: x[39])\n    connections.sort(key=lambda x: x[40])\n    connections.sort(key=lambda x: x[41])\n    connections.sort(key=lambda x: x[42])\n    connections.sort(key=lambda x: x[43])\n    connections.sort(key=lambda x: x[44])\n    connections.sort(key=lambda x: x[45])\n    connections.sort(key=lambda x: x[46])\n    connections.sort(key=lambda x: x[47])\n    connections.sort(key=lambda x: x[48])\n    connections.sort(key=lambda x: x[49])\n    connections.sort(key=lambda x: x[50])\n    connections.sort(key=lambda x: x[51])\n    connections.sort(key=lambda x: x[52])\n    connections.sort(key=lambda x: x[53])\n    connections.sort(key=lambda x: x[54])\n    connections.sort(key=lambda x: x[55])\n    connections.sort(key=lambda x: x[56])\n    connections.sort(key=lambda x: x[57])\n    connections.sort(key=lambda x: x[58])\n    connections.sort(key=lambda x: x[59])\n    connections.sort(key=lambda x: x[60])\n    connections.sort(key=lambda x: x[61])\n    connections.sort(key=lambda x: x[62])\n    connections.sort(key=lambda x: x[63])\n    connections.sort(key=lambda x: x[64])\n    connections.sort(key=lambda x: x[65])\n    connections.sort(key=lambda x: x[66])\n    connections.sort(key=lambda x: x[67])\n    connections.sort(key=lambda x: x[68])\n    connections.sort(key=lambda x: x[69])\n    connections.sort(key=lambda x: x[70])\n    connections.sort(key=lambda x: x[71])\n    connections.sort(key=lambda x: x[72])\n    connections.sort(key=lambda x: x[73])\n    connections.sort(key=lambda x: x[74])\n    connections.sort(key=lambda x: x[75])\n    connections.sort(key=lambda x: x[76])\n    connections.sort(key=lambda x: x[77])\n    connections.sort(key=lambda x: x[78])\n    connections.sort(key=lambda x: x[79])\n    connections.sort(key=lambda x: x[80])\n    connections.sort(key=lambda x: x[81"
    },
    {
        "number": 2802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t1, t2, t3, t4 = map(float, stdin.split())\n    t = max(t1, t2, t3, t4)\n    if t >= t1 + t2 + t3 + t4:\n        return \"impossible\"\n    if t >= t1 + t2 + t3:\n        return str(max(t1, t2, t3) + min(t1, t2, t3) / 2)\n    if t >= t1 + t2:\n        return str(max(t1, t2) + min(t1, t2) / 2)\n    if t >= t1:\n        return str(t1)\n    if t >= t2:\n        return str(t2)\n    if t >= t3:\n        return str(t3)\n    return str(t)\n"
    },
    {
        "number": 2803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    last_animal = stdin.split()[0]\n    unused_animals = stdin.split()[1:]\n    for animal in unused_animals:\n        if animal[0] == last_animal[0]:\n            return animal\n    return '?'"
    },
    {
        "number": 2804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return''.join(sorted(set(stdin.lower().split()), key=lambda x: (len(x), x.count(' '), x.count('.'), x.count(','), x.count('-'), x.count('_'), x.count('('), x.count(')'), x.count(';'), x.count('\\n'), x.count('\\t'), x.count('\\r'), x.count('\\f'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'), x.count('\\f'), x.count('\\n'), x.count('\\r'), x.count('\\t'), x.count('\\v'), x.count('\\a'), x.count('\\b'),"
    },
    {
        "number": 2805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    counter = 0\n    for i in range(N - 1, 1, -1):\n        if N % i == 0:\n            counter += 1\n            break\n    return str(counter)"
    },
    {
        "number": 2806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, t = map(int, stdin.split())\n    t_list = []\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        t_list.append((a, b))\n    t_list.sort()\n    path = []\n    for i in range(c):\n        path.append(i + 1)\n    for i in range(t):\n        a, b = t_list[i]\n        if path[a - 1]!= path[b - 1]:\n            return \"0 0\"\n        path[a - 1] = b\n    return str(len(path)) + \" \" + \" \".join(map(str, path))"
    },
    {
        "number": 2807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    n = len(A)\n    if n == 1:\n        return 0\n    if n == 2:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 3:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 4:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 5:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 6:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 7:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 8:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 9:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 10:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 11:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 12:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 13:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 14:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 15:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 16:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 17:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 18:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 19:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 20:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 21:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 22:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 23:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 24:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 25:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 26:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 27:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 28:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 29:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 30:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 31:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 32:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 33:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 34:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 35:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 36:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 37:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 38:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 39:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 40:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 41:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 42:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 43:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 44:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 45:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 46:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 47:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 48:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 49:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 50:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 51:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 52:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 53:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 54:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 55:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 56:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 57:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 58:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 59:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 60:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 61:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 62:\n        if A == B:\n            return 1\n        else:\n            return 0\n    if n == 63"
    },
    {
        "number": 2808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    food_carts = list(map(int, stdin.split()))\n    food_carts.sort()\n    food_carts.reverse()\n    res = 0\n    for i in range(m):\n        left = food_carts[i]\n        right = food_carts[i+1]\n        if left == right:\n            continue\n        if left < right:\n            left, right = right, left\n        if left % 2 == 0:\n            left += 1\n        if right % 2 == 0:\n            right += 1\n        if left == right:\n            continue\n        res += 1\n    return str(res)"
    },
    {
        "number": 2809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    xor = 0\n    for i in range(n):\n        xor ^= int(s[i])\n    return str(xor)"
    },
    {
        "number": 2810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    connections = stdin.split()[1:]\n    connections = [[int(i) for i in connection.split()] for connection in connections]\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: x[0])\n    connections ="
    },
    {
        "number": 2811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    red = list(map(int, stdin.split()))\n    red.sort()\n    red.reverse()\n    ans = 0\n    for i in range(m):\n        if red[i] == 1:\n            continue\n        for j in range(i+1, m):\n            if red[j] == 1:\n                continue\n            for k in range(j+1, m):\n                if red[k] == 1:\n                    continue\n                if red[i] > red[j] and red[i] > red[k]:\n                    ans += 1\n    return str(ans % 1000000007)"
    },
    {
        "number": 2812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while True:\n        if n == k:\n            return ''.join(sorted(stdin))\n        n += 1"
    },
    {
        "number": 2813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    syllables = stdin[0]\n    phrases = stdin[1:]\n    syllables = list(map(int, syllables.split()))\n    phrases = list(map(lambda x: x.split(), phrases))\n    phrases = list(map(lambda x: list(map(lambda y: y.lower(), x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map(lambda x: list(filter(lambda y: y!= '', x)), phrases))\n    phrases = list(map("
    },
    {
        "number": 2814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sigma_0 = list(map(int, stdin.split()))\n    sigma_1 = list(map(int, stdin.split()))\n    return '1' if play(sigma_0, sigma_1) else '0'\n\ndef"
    },
    {
        "number": 2815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    return str(len(set(str(2**e) for i in range(n) if str(2**e).startswith(str(2**i)))) - 1)"
    },
    {
        "number": 2816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    grid = stdin.split()\n    visited = set()\n    queue = deque()\n    queue.append((0, 0, 0))\n    while queue:\n        r, c, dist = queue.popleft()\n        if (r, c) == (N - 1, M - 1):\n            return dist\n        for i, j in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n            if 0 <= i < N and 0 <= j < M and grid[i][j]!= 'J' and (i, j) not in visited:\n                visited.add((i, j))\n                queue.append((i, j, dist + 1))\n    return -1\n"
    },
    {
        "number": 2817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, e_s, e_f = map(int, stdin.split())\n    if e_s >= e_f:\n        return str(e_s - e_f)\n    else:\n        return str(e_f - e_s)"
    },
    {
        "number": 2818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = list(map(int, stdin.split()))\n    H.sort()\n    ans = 0\n    for i in range(N):\n        if H[i] == H[i-1]:\n            continue\n        else:\n            ans += 1\n            H[i] -= 1\n    return str(ans)"
    },
    {
        "number": 2819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a_x, a_y = map(int, stdin.split()[1].split())\n    b_x, b_y = map(int, stdin.split()[2].split())\n    moves = stdin.split()[3:]\n    moves = [(int(move[0]), int(move[1])) for move in moves]\n    moves = sorted(moves, key=lambda move: move[0])\n    moves = sorted(moves, key=lambda move: move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves = sorted(moves, key=lambda move: move[1] + move[0])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[0] - move[1])\n    moves = sorted(moves, key=lambda move: move[0] + move[1])\n    moves = sorted(moves, key=lambda move: move[1] - move[0])\n    moves"
    },
    {
        "number": 2820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B = int(stdin.split()[0])\n    V = list(map(int, stdin.split()[1:]))\n    T = int(stdin.split()[2])\n    M = int(stdin.split()[3])\n    V = sorted(V)\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::-1]\n    V = V[:B]\n    V = V[::"
    },
    {
        "number": 2821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q, M, S, L = map(int, stdin.split())\n    return str(min(Q, M, S, L))"
    },
    {
        "number": 2822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_b, y_b = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x2 == x_b and y2 == y_b:\n        return \"Yes\"\n    if x1 == x_b and y1 == y_b:\n        return \"Yes\"\n    if x"
    },
    {
        "number": 2823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    DNA = stdin.strip()\n    DNA_len = len(DNA)\n    swine_gene = stdin.strip()\n    swine_gene_len = len(swine_gene)\n    cost = list(map(int, stdin.strip().split()))\n    cost.sort()\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA)\n    swine_gene_len = len(swine_gene)\n    DNA_len = len(DNA"
    },
    {
        "number": 2824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weights = stdin.split()\n    weights = list(map(int, weights))\n    weights.sort()\n    if len(weights) % 2 == 0:\n        return sum(weights[:len(weights) // 2])\n    else:\n        return sum(weights[:len(weights) // 2]) + weights[len(weights) // 2]"
    },
    {
        "number": 2825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = map(int, stdin.split())\n    return min(sum(times[i:]) for i in range(len(times)) if sum(times[:i]) == sum(times[i + 1:]))"
    },
    {
        "number": 2826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, n, d = map(int, stdin.split())\n    f1, f2 = stdin.split()\n    f1 = list(map(int, f1))\n    f2 = list(map(int, f2))\n    f1.sort()\n    f2.sort()\n    f1.append(0)\n    f2.append(0)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(q)\n    f2.append(q)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert(0, 0)\n    f2.insert(0, 0)\n    f1.append(n)\n    f2.append(n)\n    f1.sort()\n    f2.sort()\n    f1.append(n)\n    f2.append(n)\n    f1.insert"
    },
    {
        "number": 2827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    links = []\n    for i in range(M):\n        u, v = map(int, stdin.split())\n        links.append((u, v))\n    return str(min_it_requests(N, M, links))\n\ndef"
    },
    {
        "number": 2828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = [stdin.rstrip() for _ in range(N)]\n    words.sort()\n    A = list(map(int, stdin.split()))\n    return 'DA' if words == A else 'NE'\n"
    },
    {
        "number": 2829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 2830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(min_moves(grid))\n\ndef"
    },
    {
        "number": 2831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    v = []\n    for i in range(n):\n        x.append(int(stdin.split()[i*2]))\n        v.append(int(stdin.split()[i*2+1]))\n    x.sort()\n    v.sort()\n    min_dist = 0\n    for i in range(n):\n        min_dist += abs(x[i] - x[i-1]) + abs(v[i] - v[i-1])\n    return str(min_dist)"
    },
    {
        "number": 2832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k = map(int, stdin.split())\n    pixels = list(map(int, stdin.split()))\n    pixels.sort()\n    reds = set(pixels)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    reds = sorted(reds)\n    reds = set(reds)\n    red"
    },
    {
        "number": 2833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = stdin.split()\n    K = int(stdin.split()[-1])\n    if K % 45 == 0:\n        return '\\n'.join(table)\n    else:\n        return '\\n'.join([''.join(table[i::-1]) for i in range(R)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 2834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while True:\n        if is_lucky(k):\n            return str(k)\n        k += 1\n\ndef"
    },
    {
        "number": 2835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == t:\n                count += 1\n    return count\n"
    },
    {
        "number": 2836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    boys = list(map(int, stdin.split()[1].split()))\n    A, B = map(int, stdin.split()[2].split())\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    boys.sort()\n    boys.reverse()\n    boys.append(boys[0])\n    boys.append(boys[1])\n    "
    },
    {
        "number": 2837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    R = list(map(int, stdin.split()[1:]))\n    R_eq = 0\n    for i in range(N):\n        R_eq += R[i]\n    return str(R_eq)"
    },
    {
        "number": 2838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def remove_brackets(expr: str) -> str:\n        stack = []\n        for char in expr:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return 'error'\n        return ''.join(stack)\n\n    def remove_brackets_rec(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_2(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_3(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_4(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_5(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_6(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_7(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_8(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_9(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')':\n            return expr[:-1]\n        if expr[0]!= '(' and expr[-1]!= ')':\n            return expr\n        return expr\n\n    def remove_brackets_rec_10(expr: str) -> str:\n        if expr == 'error':\n            return 'error'\n        if len(expr) == 1:\n            return expr\n        if expr[0] == '(' and expr[-1] == ')':\n            return expr[1:-1]\n        if expr[0] == '(' and expr[-1]!= ')':\n            return expr[1:]\n        if expr[0]!= '(' and expr[-1] == ')"
    },
    {
        "number": 2839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        w = min(w, 99)\n        g[u].append((v, w))\n        g[v].append((u, w))\n    s, t = map(int, stdin.split())\n    s -= 1\n    t -= 1\n    visited = set()\n    visited.add(s)\n    q = deque([(s, 0)])\n    while q:\n        u, d = q.popleft()\n        if u == t:\n            return d\n        for v, w in g[u]:\n            if v not in visited:\n                visited.add(v)\n                q.append((v, d + w))\n    return -1"
    },
    {
        "number": 2840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = stdin.split()\n    cards = sorted(cards, key=lambda x: (x[0], x[1]))\n    return str(len(cards))"
    },
    {
        "number": 2841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = stdin.split()\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    colors = list(map(lambda x: x.strip(), colors))\n    col"
    },
    {
        "number": 2842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = stdin.replace(\".\", \"O\")\n    grid = grid.replace(\"O\", \"X\")\n    grid = grid.replace(\"X\", \".\")\n    grid = grid.replace(\"O\", \".\")\n    grid = grid.replace(\".\", \"O\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\"X\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\"O\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")\n    grid = grid.replace(\".\", \".\")"
    },
    {
        "number": 2843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 2844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    map_ = []\n    for _ in range(R):\n        map_.append(stdin.split()[_])\n    # print(map_)\n    # print(R, C)\n    # print(len(map_))\n    # print(len(map_[0]))\n    # print(map_[0][0])\n    # print(map_[0][1])\n    # print(map_[0][2])\n    # print(map_[1][0])\n    # print(map_[1][1])\n    # print(map_[1][2])\n    # print(map_[2][0])\n    # print(map_[2][1])\n    # print(map_[2][2])\n    # print(map_[3][0])\n    # print(map_[3][1])\n    # print(map_[3][2])\n    # print(map_[4][0])\n    # print(map_[4][1])\n    # print(map_[4][2])\n    # print(map_[5][0])\n    # print(map_[5][1])\n    # print(map_[5][2])\n    # print(map_[6][0])\n    # print(map_[6][1])\n    # print(map_[6][2])\n    # print(map_[7][0])\n    # print(map_[7][1])\n    # print(map_[7][2])\n    # print(map_[8][0])\n    # print(map_[8][1])\n    # print(map_[8][2])\n    # print(map_[9][0])\n    # print(map_[9][1])\n    # print(map_[9][2])\n    # print(map_[10][0])\n    # print(map_[10][1])\n    # print(map_[10][2])\n    # print(map_[11][0])\n    # print(map_[11][1])\n    # print(map_[11][2])\n    # print(map_[12][0])\n    # print(map_[12][1])\n    # print(map_[12][2])\n    # print(map_[13][0])\n    # print(map_[13][1])\n    # print(map_[13][2])\n    # print(map_[14][0])\n    # print(map_[14][1])\n    # print(map_[14][2])\n    # print(map_[15][0])\n    # print(map_[15][1])\n    # print(map_[15][2])\n    # print(map_[16][0])\n    # print(map_[16][1])\n    # print(map_[16][2])\n    # print(map_[17][0])\n    # print(map_[17][1])\n    # print(map_[17][2])\n    # print(map_[18][0])\n    # print(map_[18][1])\n    # print(map_[18][2])\n    # print(map_[19][0])\n    # print(map_[19][1])\n    # print(map_[19][2])\n    # print(map_[20][0])\n    # print(map_[20][1])\n    # print(map_[20][2])\n    # print(map_[21][0])\n    # print(map_[21][1])\n    # print(map_[21][2])\n    # print(map_[22][0])\n    # print(map_[22][1])\n    # print(map_[22][2])\n    # print(map_[23][0])\n    # print(map_[23][1])\n    # print(map_[23][2])\n    # print(map_[24][0])\n    # print(map_[24][1])\n    # print(map_[24][2])\n    # print(map_[25][0])\n    # print(map_[25][1])\n    # print(map_[25][2])\n    # print(map_[26][0])\n    # print(map_[26][1])\n    # print(map_[26][2])\n    # print(map_[27][0])\n    # print(map_[27][1])\n    # print(map_[27][2])\n    # print(map_[28][0])\n    # print(map_[28][1])\n    # print(map_[28][2])\n    # print(map_[29][0])\n    # print(map_[29][1])\n    # print(map_[29][2])\n    # print(map_[30][0])\n    # print(map_[30][1])\n    # print(map_[30][2])\n    # print(map_[31][0])\n    # print(map_[31][1])\n    # print(map_[31][2])\n    # print(map_[32][0])\n    # print(map_[32][1])\n    # print(map_[32][2])\n    # print(map_[33][0])\n    # print(map_[33][1])\n    # print(map_[33][2])\n    # print(map_[34][0])\n    # print(map_[34][1])\n    # print(map_[34][2])\n    # print(map_[35][0])\n    # print(map_[35][1])\n    # print(map_[35][2])\n    # print(map_[36][0])\n    # print(map_[36][1])\n    # print(map_[36][2])\n    # print(map_[37][0])\n    # print(map_[37][1])\n    # print(map_[37][2])\n    # print(map_[38][0])\n    # print(map_[38][1])\n    "
    },
    {
        "number": 2845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, K = map(int, stdin.split())\n    return str(R * (R - 1) * (R - 2) // 6)"
    },
    {
        "number": 2846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    papers = []\n    for i in range(n):\n        papers.append(int(stdin.split()[i]))\n    papers.sort(reverse=True)\n    h_index = 0\n    for i in range(n):\n        if papers[i] >= i + 1:\n            h_index = i + 1\n            break\n    return str(h_index)"
    },
    {
        "number": 2847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, S = map(int, stdin.split())\n    songs = []\n    for _ in range(M):\n        songs.append(list(map(int, stdin.split())))\n    songs.sort(key=lambda x: x[1])\n    songs.sort(key=lambda x: x[0])\n    return str(len(songs)) +'' +''.join(map(str, songs))"
    },
    {
        "number": 2848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, K, X_0, A, B = map(int, stdin.split())\n    buckets = [0] * N\n    for i in range(R):\n        buckets[X_0 + i] = (A * buckets[X_0 + i - 1] + B) % N\n    for i in range(R):\n        buckets[i] = (53 * buckets[i] + buckets[i - 1]) % 199933\n    return \"OVERFLOW\" if buckets[0] else str(buckets[R - 1])"
    },
    {
        "number": 2849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if i + j + k!= n:\n                    continue\n                if (i * i + j * j) % 3!= 0:\n                    continue\n                if (i * i + j * j + k * k) % 3!= 0:\n                    continue\n                if (i * i + j * j + k * k + k * k) % 3!= 0:\n                    continue\n                if (i * i + j * j + k * k + k * k + k * k) % 3!= 0:\n                    continue\n                count += 1\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 2850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    weights.sort(reverse=True)\n    return str(sum(weights[i] * (k - i) for i in range(k)))"
    },
    {
        "number": 2851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    m = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3].split()))\n    gcd = 1\n    for i in range(n):\n        gcd = gcd * a[i]\n    for i in range(m):\n        gcd = gcd // b[i]\n    if len(str(gcd)) > 9:\n        return str(gcd)[-9:]\n    else:\n        return str(gcd)"
    },
    {
        "number": 2852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    papers = list(map(int, stdin.split()))\n    papers.sort()\n    accepted = 0\n    total = 0\n    for i in range(n):\n        if papers[i] > accepted:\n            accepted = papers[i]\n            total += 1\n    return str(total)"
    },
    {
        "number": 2853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    houses = list(map(int, stdin.split()))\n    connections = set()\n    for i in range(1, houses[0] + 1):\n        connections.add(i)\n    for i in range(houses[0] + 1, houses[1] + 1):\n        connections.add(i)\n    for i in range(houses[1] + 1, houses[2] + 1):\n        connections.add(i)\n    for i in range(houses[2] + 1, houses[3] + 1):\n        connections.add(i)\n    for i in range(houses[3] + 1, houses[4] + 1):\n        connections.add(i)\n    for i in range(houses[4] + 1, houses[5] + 1):\n        connections.add(i)\n    for i in range(houses[5] + 1, houses[6] + 1):\n        connections.add(i)\n    for i in range(houses[6] + 1, houses[7] + 1):\n        connections.add(i)\n    for i in range(houses[7] + 1, houses[8] + 1):\n        connections.add(i)\n    for i in range(houses[8] + 1, houses[9] + 1):\n        connections.add(i)\n    for i in range(houses[9] + 1, houses[10] + 1):\n        connections.add(i)\n    for i in range(houses[10] + 1, houses[11] + 1):\n        connections.add(i)\n    for i in range(houses[11] + 1, houses[12] + 1):\n        connections.add(i)\n    for i in range(houses[12] + 1, houses[13] + 1):\n        connections.add(i)\n    for i in range(houses[13] + 1, houses[14] + 1):\n        connections.add(i)\n    for i in range(houses[14] + 1, houses[15] + 1):\n        connections.add(i)\n    for i in range(houses[15] + 1, houses[16] + 1):\n        connections.add(i)\n    for i in range(houses[16] + 1, houses[17] + 1):\n        connections.add(i)\n    for i in range(houses[17] + 1, houses[18] + 1):\n        connections.add(i)\n    for i in range(houses[18] + 1, houses[19] + 1):\n        connections.add(i)\n    for i in range(houses[19] + 1, houses[20] + 1):\n        connections.add(i)\n    for i in range(houses[20] + 1, houses[21] + 1):\n        connections.add(i)\n    for i in range(houses[21] + 1, houses[22] + 1):\n        connections.add(i)\n    for i in range(houses[22] + 1, houses[23] + 1):\n        connections.add(i)\n    for i in range(houses[23] + 1, houses[24] + 1):\n        connections.add(i)\n    for i in range(houses[24] + 1, houses[25] + 1):\n        connections.add(i)\n    for i in range(houses[25] + 1, houses[26] + 1):\n        connections.add(i)\n    for i in range(houses[26] + 1, houses[27] + 1):\n        connections.add(i)\n    for i in range(houses[27] + 1, houses[28] + 1):\n        connections.add(i)\n    for i in range(houses[28] + 1, houses[29] + 1):\n        connections.add(i)\n    for i in range(houses[29] + 1, houses[30] + 1):\n        connections.add(i)\n    for i in range(houses[30] + 1, houses[31] + 1):\n        connections.add(i)\n    for i in range(houses[31] + 1, houses[32] + 1):\n        connections.add(i)\n    for i in range(houses[32] + 1, houses[33] + 1):\n        connections.add(i)\n    for i in range(houses[33] + 1, houses[34] + 1):\n        connections.add(i)\n    for i in range(houses[34] + 1, houses[35] + 1):\n        connections.add(i)\n    for i in range(houses[35] + 1, houses[36] + 1):\n        connections.add(i)\n    for i in range(houses[36] + 1, houses[37] + 1):\n        connections.add(i)\n    for i in range(houses[37] + 1, houses[38] + 1):\n        connections.add(i)\n    for i in range(houses[38] + 1, houses[39] + 1):\n        connections.add(i)\n    for i in range(houses[39] + 1, houses[40] + 1):\n        connections.add(i)\n    for i in range(houses[40] + 1, houses[41] + 1):\n        connections.add(i)\n    for i in range(houses[41] + 1, houses[42] + 1):\n        connections.add(i)\n    for i in range(houses[42] + 1, houses[43] + 1):\n        connections.add(i)\n    for i in range(houses[43] + 1, houses[44] + 1):\n        connections.add(i)\n    for i in range(houses[44] + 1, houses[45] + 1):\n        connections.add(i)\n    for i in range(houses[45] + 1, houses[46] + 1):\n        connections.add(i)\n    for i in range(houses[46] + 1, houses[47] + 1):\n        connections.add(i)\n    for i in range(houses[47] + 1, houses[48] + 1):\n        connections.add(i)\n    for i in range(houses[48] + 1, houses[49] + 1):\n        connections.add(i)\n    for i in range(houses[49] + 1, houses[50] + 1):\n        connections.add(i)\n    for i in range(houses[50] + 1, houses[51] + 1):\n        connections.add(i)\n    for i in range(houses[51] + 1, houses[52] + 1):\n        connections.add(i)\n    for i in range(houses[52] + 1, houses[53] + 1):\n        connections.add(i)\n    for i in range(houses[53] + 1, houses[54] + 1"
    },
    {
        "number": 2854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    atoms = [[int(x) for x in stdin.split()] for _ in range(n)]\n    bonds = [[int(x) for x in stdin.split()] for _ in range(m)]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    bonds = [[x, y] for x, y in bonds if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= y]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms = [[x, y] for x, y in atoms if x!= -1 and y!= -1]\n    atoms ="
    },
    {
        "number": 2855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    paths = []\n    for _ in range(M):\n        K, L = map(int, stdin.split())\n        paths.append((K, L))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    paths.append((0, N))\n    paths.sort()\n    paths.append((N, N))\n    paths.sort()\n    paths.append((N, 0))\n    paths.sort()\n    paths.append((0, 0))\n    paths.sort()\n    "
    },
    {
        "number": 2856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin[0]\n    B = stdin[1]\n    if A == B:\n        return \"0\"\n    else:\n        return str(min(len(A), len(B)) + 1)"
    },
    {
        "number": 2857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    return str(triangles(points))\n\ndef"
    },
    {
        "number": 2858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"1\"\n    if N == 4:\n        return \"2\"\n    if N == 5:\n        return \"1\"\n    if N == 6:\n        return \"2\"\n    if N == 7:\n        return \"1\"\n    if N == 8:\n        return \"2\"\n    if N == 9:\n        return \"1\"\n    if N == 10:\n        return \"2\"\n    if N == 11:\n        return \"1\"\n    if N == 12:\n        return \"2\"\n    if N == 13:\n        return \"1\"\n    if N == 14:\n        return \"2\"\n    if N == 15:\n        return \"1\"\n    if N == 16:\n        return \"2\"\n    if N == 17:\n        return \"1\"\n    if N == 18:\n        return \"2\"\n    if N == 19:\n        return \"1\"\n    if N == 20:\n        return \"2\"\n    if N == 21:\n        return \"1\"\n    if N == 22:\n        return \"2\"\n    if N == 23:\n        return \"1\"\n    if N == 24:\n        return \"2\"\n    if N == 25:\n        return \"1\"\n    if N == 26:\n        return \"2\"\n    if N == 27:\n        return \"1\"\n    if N == 28:\n        return \"2\"\n    if N == 29:\n        return \"1\"\n    if N == 30:\n        return \"2\"\n    if N == 31:\n        return \"1\"\n    if N == 32:\n        return \"2\"\n    if N == 33:\n        return \"1\"\n    if N == 34:\n        return \"2\"\n    if N == 35:\n        return \"1\"\n    if N == 36:\n        return \"2\"\n    if N == 37:\n        return \"1\"\n    if N == 38:\n        return \"2\"\n    if N == 39:\n        return \"1\"\n    if N == 40:\n        return \"2\"\n    if N == 41:\n        return \"1\"\n    if N == 42:\n        return \"2\"\n    if N == 43:\n        return \"1\"\n    if N == 44:\n        return \"2\"\n    if N == 45:\n        return \"1\"\n    if N == 46:\n        return \"2\"\n    if N == 47:\n        return \"1\"\n    if N == 48:\n        return \"2\"\n    if N == 49:\n        return \"1\"\n    if N == 50:\n        return \"2\"\n    if N == 51:\n        return \"1\"\n    if N == 52:\n        return \"2\"\n    if N == 53:\n        return \"1\"\n    if N == 54:\n        return \"2\"\n    if N == 55:\n        return \"1\"\n    if N == 56:\n        return \"2\"\n    if N == 57:\n        return \"1\"\n    if N == 58:\n        return \"2\"\n    if N == 59:\n        return \"1\"\n    if N == 60:\n        return \"2\"\n    if N == 61:\n        return \"1\"\n    if N == 62:\n        return \"2\"\n    if N == 63:\n        return \"1\"\n    if N == 64:\n        return \"2\"\n    if N == 65:\n        return \"1\"\n    if N == 66:\n        return \"2\"\n    if N == 67:\n        return \"1\"\n    if N == 68:\n        return \"2\"\n    if N == 69:\n        return \"1\"\n    if N == 70:\n        return \"2\"\n    if N == 71:\n        return \"1\"\n    if N == 72:\n        return \"2\"\n    if N == 73:\n        return \"1\"\n    if N == 74:\n        return \"2\"\n    if N == 75:\n        return \"1\"\n    if N == 76:\n        return \"2\"\n    if N == 77:\n        return \"1\"\n    if N == 78:\n        return \"2\"\n    if N == 79:\n        return \"1\"\n    if N == 80:\n        return \"2\"\n    if N == 81:\n        return \"1\"\n    if N == 82:\n        return \"2\"\n    if N == 83:\n        return \"1\"\n    if N == 84:\n        return \"2\"\n    if N == 85:\n        return \"1\"\n    if N == 86:\n        return \"2\"\n    if N == 87:\n        return \"1\"\n    if N == 88:\n        return \"2\"\n    if N == 89:\n        return \"1\"\n    if N == 90:\n        return \"2\"\n    if N == 91:\n        return \"1\"\n    if N == 92:\n        return \"2\"\n    if N == 93:\n        return \"1\"\n    if N == 94:\n        return \"2\"\n    if N == 95:\n        return \"1\"\n    if N == 96:\n        return \"2\"\n    if N == 97:\n        return \"1\"\n    if N == 98:\n        return \"2\"\n    if N == 99:\n        return \"1\"\n    if N == 100:\n        return \"2\"\n    if N == 101:\n        return \"1\"\n    if N == 102:\n        return \"2\"\n    if N == 103:\n        return \"1\"\n    if N == 104:\n        return \"2\"\n    if N == 105:\n        return \"1\"\n    if N == 106:\n        return \"2\"\n    if N == 107:\n        return \"1\"\n    if N == 108:\n        return \"2\"\n    if N == 109:\n        return \"1\"\n    if N == 110:\n        return \"2\"\n    if N == 111:\n        return \"1\"\n    if N == 112:\n        return \"2\"\n    if N == 113:\n        return \"1\"\n    if N == 114:\n        return \"2\"\n    if N == 115:\n        return \"1\"\n    if N == 116:\n        return \"2\"\n    if N == 117:\n        return \"1\"\n    if N == 118:\n        return \"2\"\n    if N == 119:\n        return \"1\"\n    if N == 120:\n        return \"2\"\n    if N == 121:\n        return \"1\"\n    if N == 122:\n        return \"2\"\n    if N == 123:\n        return \"1\"\n    if N == 124:\n        return \"2\"\n    if N == 125:\n        return \"1\"\n    if N == 126:\n        return \"2\"\n    if N == 127:\n        return \""
    },
    {
        "number": 2859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n    x3, y3, r3 = map(int, stdin.split())\n    xv, yv, r = map(int, stdin.split())\n    x1, y1 = x1 - xv, y1 - yv\n    x2, y2 = x2 - xv, y2 - yv\n    x3, y3 = x3 - xv, y3 - yv\n    if (x1 * x2 + y1 * y2) * (x3 * x2 + y3 * y2) <= 0:\n        return \"1\"\n    if (x1 * x2 + y1 * y2) * (x3 * x2 + y3 * y2) <= 0:\n        return \"3\"\n    if (x1 * x2 + y1 * y2) * (x3 * x2 + y3 * y2) <= 0:\n        return \"5\"\n    if (x1 * x2 + y1 * y2) * (x3 * x2 + y3 * y2) <= 0:\n        return \"2\"\n    if (x1 * x2 + y1 * y2) * (x3 * x2 + y3 * y2) <= 0:\n        return \"4\"\n    return \"0\"\n"
    },
    {
        "number": 2860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, w = map(int, stdin.split())\n    lines = stdin.splitlines()\n    lines = lines[:n - 1]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.','') for line in lines]\n    lines = [line.replace(' ', '.') for line in lines]\n    lines = [line.replace('.', '"
    },
    {
        "number": 2861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    routines = stdin.splitlines()\n    routines = [r.upper() for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\" \", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABC\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"DEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABC\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"DEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABC\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"DEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABC\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"DEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABC\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"DEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABC\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"DEF\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABCDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"FGH\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"BDE\", \"\") for r in routines]\n    routines = sorted(routines)\n    routines = [r.replace(\"ABEF\", \""
    },
    {
        "number": 2862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    materials = list(map(int, stdin.split()))\n    dependencies = [[] for _ in range(N)]\n    for i in range(M):\n        u, v, w = map(int, stdin.split())\n        dependencies[u].append((v, w))\n        dependencies[v].append((u, w))\n    needed = [0] * N\n    for i in range(N):\n        needed[i] = sum(materials[j] for j in dependencies[i])\n    return''.join(map(str, needed))"
    },
    {
        "number": 2863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    likes = list(map(int, stdin.split()))\n    likes.sort()\n    count = 0\n    for i in range(len(likes) - 1):\n        if likes[i] == likes[i + 1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = stdin.split()\n    murderer = None\n    weapon = None\n    room = None\n    for i in range(n):\n        if cards[i][0] == 'A':\n            murderer = cards[i]\n        elif cards[i][0] == 'B':\n            weapon = cards[i]\n        elif cards[i][0] == 'C':\n            room = cards[i]\n    if murderer == weapon == room:\n        return 'AGM'\n    elif murderer == weapon:\n        return 'E??'\n    elif room == weapon:\n        return 'E??'\n    else:\n        return '??'"
    },
    {
        "number": 2865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2 = map(int, stdin.split())\n    n1, n2 = map(int, stdin.split())\n    t1 = list(map(int, stdin.split()))\n    t2 = list(map(int, stdin.split()))\n    x1_pos = 0\n    x2_pos = 0\n    x1_speed = 0\n    x2_speed = 0\n    for i in range(n1):\n        x1_pos += x1_speed\n        x1_speed = t1[i] - x1_pos\n    for i in range(n2):\n        x2_pos += x2_speed\n        x2_speed = t2[i] - x2_pos\n    if x1_pos + 5 > x2_pos:\n        return \"bumper tap at time {}\".format(int(x1_pos + 5))\n    elif x2_pos + 5 > x1_pos:\n        return \"bumper tap at time {}\".format(int(x2_pos + 5))\n    else:\n        return \"safe and sound\""
    },
    {
        "number": 2866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.split()\n    digits = sorted(digits, key=int)\n    for i in range(len(digits)):\n        digits[i] = int(digits[i])\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] + digits[j] > 10:\n                break\n            if digits[i] + digits[j] == 10:\n                digits[i] = 0\n                digits[j] = 0\n                break\n    return str(sum(digits))"
    },
    {
        "number": 2867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    V = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    V.sort()\n    C.sort()\n    V.reverse()\n    C.reverse()\n    happiness = 0\n    for i in range(N):\n        happiness += V[i] * C[i]\n    return str(happiness)"
    },
    {
        "number": 2868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    word = stdin.split()[1]\n    return word[:X] + word[X:X+X//2] + word[X+X//2:]"
    },
    {
        "number": 2869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    numerals = stdin.split()\n    result = ''\n    for i in range(len(numerals)):\n        if i == 0:\n            result += roman_numerals[numerals[i]]\n        else:\n            if roman_numerals[numerals[i]] > roman_numerals[numerals[i - 1]]:\n                result += roman_numerals[numerals[i]] - roman_numerals[numerals[i - 1]]\n            else:\n                result += roman_numerals[numerals[i]]\n    return result"
    },
    {
        "number": 2870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    return str(max(p - q, q - p))\n"
    },
    {
        "number": 2871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort()\n    v = v[::-1]\n    ans = 0\n    while n > 0:\n        if n % k == 0:\n            ans += n // k\n            n = 0\n        else:\n            ans += n // k + 1\n            n = n % k\n    return str(ans)"
    },
    {
        "number": 2872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, m, y = map(int, stdin.split())\n    if d == 1 and m == 1:\n        return \"TGIF\"\n    elif d == 1 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 2 and m == 1:\n        return \"TGIF\"\n    elif d == 2 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 3 and m == 1:\n        return \"TGIF\"\n    elif d == 3 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 4 and m == 1:\n        return \"TGIF\"\n    elif d == 4 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 5 and m == 1:\n        return \"TGIF\"\n    elif d == 5 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 6 and m == 1:\n        return \"TGIF\"\n    elif d == 6 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 7 and m == 1:\n        return \"TGIF\"\n    elif d == 7 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 8 and m == 1:\n        return \"TGIF\"\n    elif d == 8 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 9 and m == 1:\n        return \"TGIF\"\n    elif d == 9 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 10 and m == 1:\n        return \"TGIF\"\n    elif d == 10 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 11 and m == 1:\n        return \"TGIF\"\n    elif d == 11 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    elif d == 12 and m == 1:\n        return \"TGIF\"\n    elif d == 12 and m == 2:\n        if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n            return \"TGIF\"\n        else:\n            return \"TGIF\"\n    else:\n        return \"TGIF\""
    },
    {
        "number": 2873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(replace_vowels(stdin)))\n\ndef"
    },
    {
        "number": 2874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    trees = list(map(int, stdin.split()))\n    people.sort()\n    trees.sort()\n    count = 0\n    for i in range(n):\n        if people[i] == trees[0]:\n            count += 1\n            trees.pop(0)\n    return str(count)"
    },
    {
        "number": 2875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    v.sort()\n    if v == v[::-1]:\n        return \"impossible\"\n    else:\n        return str(v[0]) + \" \" + str(v[-1])"
    },
    {
        "number": 2876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = []\n    z = []\n    for i in range(N):\n        x.append(int(stdin.split()[i]))\n        z.append(float(stdin.split()[i+1]))\n    x.sort()\n    z.sort()\n    return str(max(abs(x[i] - z[i]) for i in range(N)))"
    },
    {
        "number": 2877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    words = sorted(words)\n    words = words[::-1]\n    words = ''.join(words)\n    return words"
    },
    {
        "number": 2878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    grid = stdin.split()\n    triples = 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] == '.':\n                triples += 1\n    return str(triples)"
    },
    {
        "number": 2879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    if h == 1 and w == 1:\n        return \"1\"\n    if h == 1 and w == 2:\n        return \"2\"\n    if h == 2 and w == 1:\n        return \"3\"\n    if h == 2 and w == 2:\n        return \"4\"\n    if h == 3 and w == 1:\n        return \"5\"\n    if h == 3 and w == 2:\n        return \"6\"\n    if h == 4 and w == 1:\n        return \"7\"\n    if h == 4 and w == 2:\n        return \"8\"\n    if h == 5 and w == 1:\n        return \"9\"\n    if h == 5 and w == 2:\n        return \"10\"\n    if h == 6 and w == 1:\n        return \"11\"\n    if h == 6 and w == 2:\n        return \"12\"\n    if h == 7 and w == 1:\n        return \"13\"\n    if h == 7 and w == 2:\n        return \"14\"\n    if h == 8 and w == 1:\n        return \"15\"\n    if h == 8 and w == 2:\n        return \"16\"\n    if h == 9 and w == 1:\n        return \"17\"\n    if h == 9 and w == 2:\n        return \"18\"\n    if h == 10 and w == 1:\n        return \"19\"\n    if h == 10 and w == 2:\n        return \"20\"\n    if h == 11 and w == 1:\n        return \"21\"\n    if h == 11 and w == 2:\n        return \"22\"\n    if h == 12 and w == 1:\n        return \"23\"\n    if h == 12 and w == 2:\n        return \"24\"\n    if h == 13 and w == 1:\n        return \"25\"\n    if h == 13 and w == 2:\n        return \"26\"\n    if h == 14 and w == 1:\n        return \"27\"\n    if h == 14 and w == 2:\n        return \"28\"\n    if h == 15 and w == 1:\n        return \"29\"\n    if h == 15 and w == 2:\n        return \"30\"\n    if h == 16 and w == 1:\n        return \"31\"\n    if h == 16 and w == 2:\n        return \"32\"\n    if h == 17 and w == 1:\n        return \"33\"\n    if h == 17 and w == 2:\n        return \"34\"\n    if h == 18 and w == 1:\n        return \"35\"\n    if h == 18 and w == 2:\n        return \"36\"\n    if h == 19 and w == 1:\n        return \"37\"\n    if h == 19 and w == 2:\n        return \"38\"\n    if h == 20 and w == 1:\n        return \"39\"\n    if h == 20 and w == 2:\n        return \"40\"\n    if h == 21 and w == 1:\n        return \"41\"\n    if h == 21 and w == 2:\n        return \"42\"\n    if h == 22 and w == 1:\n        return \"43\"\n    if h == 22 and w == 2:\n        return \"44\"\n    if h == 23 and w == 1:\n        return \"45\"\n    if h == 23 and w == 2:\n        return \"46\"\n    if h == 24 and w == 1:\n        return \"47\"\n    if h == 24 and w == 2:\n        return \"48\"\n    if h == 25 and w == 1:\n        return \"49\"\n    if h == 25 and w == 2:\n        return \"50\"\n    if h == 26 and w == 1:\n        return \"51\"\n    if h == 26 and w == 2:\n        return \"52\"\n    if h == 27 and w == 1:\n        return \"53\"\n    if h == 27 and w == 2:\n        return \"54\"\n    if h == 28 and w == 1:\n        return \"55\"\n    if h == 28 and w == 2:\n        return \"56\"\n    if h == 29 and w == 1:\n        return \"57\"\n    if h == 29 and w == 2:\n        return \"58\"\n    if h == 30 and w == 1:\n        return \"59\"\n    if h == 30 and w == 2:\n        return \"60\"\n    if h == 31 and w == 1:\n        return \"61\"\n    if h == 31 and w == 2:\n        return \"62\"\n    if h == 32 and w == 1:\n        return \"63\"\n    if h == 32 and w == 2:\n        return \"64\"\n    if h == 33 and w == 1:\n        return \"65\"\n    if h == 33 and w == 2:\n        return \"66\"\n    if h == 34 and w == 1:\n        return \"67\"\n    if h == 34 and w == 2:\n        return \"68\"\n    if h == 35 and w == 1:\n        return \"69\"\n    if h == 35 and w == 2:\n        return \"70\"\n    if h == 36 and w == 1:\n        return \"71\"\n    if h == 36 and w == 2:\n        return \"72\"\n    if h == 37 and w == 1:\n        return \"73\"\n    if h == 37 and w == 2:\n        return \"74\"\n    if h == 38 and w == 1:\n        return \"75\"\n    if h == 38 and w == 2:\n        return \"76\"\n    if h == 39 and w == 1:\n        return \"77\"\n    if h == 39 and w == 2:\n        return \"78\"\n    if h == 40 and w == 1:\n        return \"79\"\n    if h == 40 and w == 2:\n        return \"80\"\n    if h == 41 and w == 1:\n        return \"81\"\n    if h == 41 and w == 2:\n        return \"82\"\n    if h == 42 and w == 1:\n        return \"83\"\n    if h == 42 and w == 2:\n        return \"84\"\n    if h == 43 and w == 1:\n        return \"85\"\n    if h == 43 and w == 2:\n        return \"86\"\n    if h == 44 and w == 1:\n        return \"87\"\n    if h == 44 and w == 2:\n        return \"88\"\n    if h == 45 and w == 1:\n        return \"89\"\n    if h == 45 and w == 2:\n        return \"90\"\n    if h == 46 and w == 1:\n        return \"91\"\n    if h == 46 and w == 2:\n        return \"92\"\n    if h == 47 and w == 1:\n        return \"93\"\n    if h == 47 and w == 2:\n        return \"94\"\n    if h == 48 and w == 1:\n        return \"95\"\n    if h == 48 and w == 2:\n        return"
    },
    {
        "number": 2880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = [stdin[i] for i in range(R * C)]\n    for i in range(R):\n        for j in range(C):\n            if table[i * C + j] == table[(i + 1) * C + j]:\n                return str(i + 1)\n    return str(0)"
    },
    {
        "number": 2881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = list(map(int, x))\n    y = list(map(int, y))\n    x.sort()\n    y.sort()\n    if x == y:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 2882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"()\"\n    if n == 2:\n        return \"()()\"\n    if n == 3:\n        return \"()(())\", \"()()()\"\n    if n == 4:\n        return \"()(())()\", \"()()()()\"\n    if n == 5:\n        return \"()(())()()\", \"()()()()()\"\n    if n == 6:\n        return \"()(())()()()\", \"()()()()()()\"\n    if n == 7:\n        return \"()(())()()()()\", \"()()()()()()()\"\n    if n == 8:\n        return \"()(())()()()()()\", \"()()()()()()()()\"\n    if n == 9:\n        return \"()(())()()()()()()\", \"()()()()()()()()()\"\n    if n == 10:\n        return \"()(())()()()()()()()\", \"()()()()()()()()()()\"\n    if n == 11:\n        return \"()(())()()()()()()()()\", \"()()()()()()()()()()()\"\n    if n == 12:\n        return \"()(())()()()()()()()()()\", \"()()()()()()()()()()()()\"\n    if n == 13:\n        return \"()(())()()()()()()()()()()\", \"()()()()()()()()()()()()()()\"\n    if n == 14:\n        return \"()(())()()()()()()()()()()\", \"()()()()()()()()()()()()()()()\"\n    if n == 15:\n        return \"()(())()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()\"\n    if n == 16:\n        return \"()(())()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()\"\n    if n == 17:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()\"\n    if n == 18:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()\"\n    if n == 19:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()\"\n    if n == 20:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 21:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 22:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 23:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 24:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 25:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 26:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 27:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 28:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 29:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 30:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 31:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 32:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 33:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 34:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 35:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 36:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 37:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 38:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 39:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 40:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 41:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 42:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 43:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 44:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()()()()()()()()\"\n    if n == 45:\n        return \"()(())()()()()()()()()()()()()\", \"()()()()()()()()"
    },
    {
        "number": 2883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    intervals = []\n    for interval in stdin.split('\\n'):\n        intervals.append([int(i) for i in interval.split(' ')])\n    intervals.sort(key=lambda x: x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return '\\n'.join([str(i[0]) +'' + str(i[1]) for i in merged])\n\nprint(solution(input()))\n"
    },
    {
        "number": 2884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    candidates = stdin.split(',')\n    candidates = list(map(int, candidates))\n    target = int(stdin.split(',')[-1])\n    candidates.sort()\n    res = []\n    def dfs(candidates, target, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        if target < 0:\n            return\n        for i in range(len(candidates)):\n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            dfs(candidates[i+1:], target-candidates[i], path+[candidates[i]], res)\n    dfs(candidates, target, [], res)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 2885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    intervals = sorted(map(lambda x: list(map(int, x.split(','))), stdin.strip().split('\\n')))\n    newInterval = list(map(int, stdin.strip().split('\\n')[-1].split(',')))\n    i = 0\n    while i < len(intervals) and intervals[i][0] < newInterval[0]:\n        i += 1\n    if i == len(intervals):\n        return stdin.strip()\n    j = i\n    while j < len(intervals) and intervals[j][1] <= newInterval[1]:\n        j += 1\n    if j == len(intervals):\n        return stdin.strip()\n    newInterval[0] = min(intervals[i][0], intervals[j][0])\n    newInterval[1] = max(intervals[i][1], intervals[j][1])\n    return ','.join(map(str, newInterval)) + '\\n' + '\\n'.join(map(str, intervals[i:j]))"
    },
    {
        "number": 2886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 2:\n        return -1\n    for i in range(len(s)):\n        if len(s) % 2 == 0:\n            return -1\n        if s[i] == s[i + 1]:\n            return str(i) + str(i + 1)\n    return -1"
    },
    {
        "number": 2887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bowls = list(map(int, stdin.split()))\n    temps = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        ans += (bowls[i] - temps[i]) * (temps[i] - temps[i - 1])\n    return str(ans)"
    },
    {
        "number": 2888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sin = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n    e.sort()\n    e.reverse()\n    ans = 0\n    for i in range(n):\n        ans += e[i] * sin ** i\n    return str(ans)"
    },
    {
        "number": 2889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lawnmowers = []\n    for line in stdin.splitlines():\n        name, price, cutting_rate, cutting_time, recharge_time = line.split(',')\n        lawnmowers.append((name, int(price), int(cutting_rate), int(cutting_time), int(recharge_time)))\n    lawnmowers.sort(key=lambda x: x[1])\n    for lawnmower in lawnmowers:\n        if lawnmower[1] >= 10080:\n            return lawnmower[0]\n    return 'no such mower'"
    },
    {
        "number": 2890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k1, k2 = map(int, stdin.split())\n    tracks = [[] for _ in range(N)]\n    for i in range(M):\n        u, v, x, c = map(int, stdin.split())\n        tracks[u].append((v, x, c))\n        tracks[v].append((u, x, c))\n    s, t = map(int, stdin.split())\n    if not (0 <= s <= N and 0 <= t <= N):\n        return -1\n    if s == t:\n        return 0\n    if k1 == 0 and k2 == 0:\n        return -1\n    if k1 == 0:\n        return max(0, tracks[s][t][1] - tracks[s][t][0])\n    if k2 == 0:\n        return max(0, tracks[t][s][1] - tracks[t][s][0])\n    if k1 == 1 and k2 == 1:\n        return max(0, tracks[s][t][1] - tracks[s][t][0])\n    if k1 == 1:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2])\n    if k2 == 1:\n        return max(0, tracks[t][s][1] - tracks[t][s][0] - tracks[t][s][2])\n    if k1 == 2 and k2 == 2:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2] - tracks[s][t][3])\n    if k1 == 2:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2] - tracks[s][t][3] - tracks[s][t][4])\n    if k2 == 2:\n        return max(0, tracks[t][s][1] - tracks[t][s][0] - tracks[t][s][2] - tracks[t][s][3] - tracks[t][s][4])\n    if k1 == 3 and k2 == 3:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2] - tracks[s][t][3] - tracks[s][t][4] - tracks[s][t][5])\n    if k1 == 3:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2] - tracks[s][t][3] - tracks[s][t][4] - tracks[s][t][5] - tracks[s][t][6])\n    if k2 == 3:\n        return max(0, tracks[t][s][1] - tracks[t][s][0] - tracks[t][s][2] - tracks[t][s][3] - tracks[t][s][4] - tracks[t][s][5] - tracks[t][s][6])\n    if k1 == 4 and k2 == 4:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2] - tracks[s][t][3] - tracks[s][t][4] - tracks[s][t][5] - tracks[s][t][6] - tracks[s][t][7])\n    if k1 == 4:\n        return max(0, tracks[s][t][1] - tracks[s][t][0] - tracks[s][t][2] - tracks[s][t][3] - tracks[s][t][4] - tracks[s][t][5] - tracks[s][t][6] - tracks[s][t][7] - tracks[s][t][8])\n    if k2 == 4:\n        return max(0, tracks[t][s][1] - tracks[t][s][0] - tracks[t][s][2] - tracks[t][s][3] - tracks[t][s][4] - tracks[t][s][5] - tracks[t][s][6] - tracks[t][s][7] - tracks[t][s][8])\n    return -1\n"
    },
    {
        "number": 2891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    b = 0\n    for i in range(1, n):\n        if c[i] == c[0]:\n            b += 1\n    return str(b / n)"
    },
    {
        "number": 2892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dolls = list(map(int, stdin.split()))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls = list(set(dolls))\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    dolls.sort()\n    "
    },
    {
        "number": 2893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    swaps = 0\n    while True:\n        swaps += 1\n        for i in range(n - 1):\n            if a[i] > a[i + 1]:\n                a[i], a[i + 1] = a[i + 1], a[i]\n                swaps += 1\n        if a == sorted(a):\n            break\n    return str(swaps)"
    },
    {
        "number": 2894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, K, T1, T2, H = map(float, stdin.split())\n    T1 = T1 * 3600\n    T2 = T2 * 3600\n    H = H * 3600\n    L = L * 3600\n    T = T1 + T2\n    F1 = 0\n    F2 = 0\n    while F1 < H:\n        F1 += K\n        F2 += K\n        if F1 > L:\n            F1 = L\n        if F2 > H:\n            F2 = H\n        if F1 <= L and F2 >= H:\n            break\n    return '{:.6f} {:.6f}'.format(F1, F2)\n"
    },
    {
        "number": 2895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, x_f, y_f, n = map(int, stdin.split())\n    y_d = map(int, stdin.split())\n    y_d = list(y_d)\n    y_d.sort()\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d.sort()\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))\n    y_d = list(map(lambda x: x * -1, y_d))"
    },
    {
        "number": 2896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    before = stdin[0]\n    after = stdin[1]\n    before_len = len(before)\n    after_len = len(after)\n    if before_len > after_len:\n        return before_len - after_len\n    else:\n        return after_len - before_len"
    },
    {
        "number": 2897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    map_ = stdin.split()\n    map_ = [[int(i) for i in map_[i * c:(i + 1) * c]] for i in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if map_[i][j] == 1:\n                if map_[i - 1][j] == 0 and map_[i][j - 1] == 0 and map_[i + 1][j] == 0 and map_[i][j + 1] == 0:\n                    return \"binary\"\n            if map_[i][j] == 0:\n                if map_[i - 1][j] == 1 and map_[i][j - 1] == 1 and map_[i + 1][j] == 1 and map_[i][j + 1] == 1:\n                    return \"decimal\"\n    return \"neither\"\n"
    },
    {
        "number": 2898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    drives = []\n    for i in range(n):\n        drives.append(list(map(int, stdin.split())))\n    drives.sort(key=lambda x: x[0])\n    total = 0\n    for i in range(n):\n        if i == 0:\n            total += drives[i][1]\n        else:\n            total += drives[i][0]\n    return str(total)"
    },
    {
        "number": 2899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = []\n    for i in range(n):\n        nodes.append([int(x) for x in stdin.split()])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key=lambda x: x[0])\n    nodes = sorted(nodes, key=lambda x: x[1])\n    nodes = sorted(nodes, key="
    },
    {
        "number": 2900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    count = 0\n    for k in range(1, n):\n        i = 0\n        j = k\n        while j < n:\n            if s[i] == s[j]:\n                i += 1\n                j += 1\n            else:\n                if j - i == k:\n                    count += 1\n                else:\n                    count += 1 + (j - i - 1)\n                i = j\n                j = i + k\n    return str(count)"
    },
    {
        "number": 2901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(n):\n        a, b = stdin.split()\n        a = int(a)\n        b = int(b)\n        if a not in graph:\n            graph[a] = []\n        if b not in graph:\n            graph[b] = []\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = set()\n    for i in range(1, 10):\n        if i not in visited:\n            visited.add(i)\n            if is_perfect(graph, i, visited):\n                return \"yes\"\n    return \"no\"\n\n\ndef"
    },
    {
        "number": 2902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, N, M = map(int, stdin.split())\n    cows = [int(x) for x in stdin.split()]\n    days = [0] * (N + 1)\n    for i in range(1, N + 1):\n        days[i] = days[i - 1] + cows[i - 1]\n    for i in range(M):\n        days[int(stdin.split()[i + 1])] = days[int(stdin.split()[i + 1])] + cows[int(stdin.split()[i])]\n    return str(max(days))"
    },
    {
        "number": 2903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin.split()[i])\n    t = FenwickTree(a)\n    for _ in range(q):\n        op, *args = stdin.split()\n        if op == '+':\n            t.update(int(args[0]), int(args[1]))\n        else:\n            print(t.query(int(args[0])))\n    return ''"
    },
    {
        "number": 2904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = []\n    for i in range(R):\n        grid.append(list(stdin[i]))\n    regions = []\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '-':\n                continue\n            if grid[i][j] == '1':\n                continue\n            if grid[i][j] == '2':\n                continue\n            if grid[i][j] == '3':\n                continue\n            if grid[i][j] == '4':\n                continue\n            if grid[i][j] == '5':\n                continue\n            if grid[i][j] == '6':\n                continue\n            if grid[i][j] == '7':\n                continue\n            if grid[i][j] == '8':\n                continue\n            if grid[i][j] == '9':\n                continue\n            if grid[i][j] == '0':\n                continue\n            if grid[i][j] == 'A':\n                continue\n            if grid[i][j] == 'B':\n                continue\n            if grid[i][j] == 'C':\n                continue\n            if grid[i][j] == 'D':\n                continue\n            if grid[i][j] == 'E':\n                continue\n            if grid[i][j] == 'F':\n                continue\n            if grid[i][j] == 'G':\n                continue\n            if grid[i][j] == 'H':\n                continue\n            if grid[i][j] == 'I':\n                continue\n            if grid[i][j] == 'J':\n                continue\n            if grid[i][j] == 'K':\n                continue\n            if grid[i][j] == 'L':\n                continue\n            if grid[i][j] == 'M':\n                continue\n            if grid[i][j] == 'N':\n                continue\n            if grid[i][j] == 'O':\n                continue\n            if grid[i][j] == 'P':\n                continue\n            if grid[i][j] == 'Q':\n                continue\n            if grid[i][j] == 'R':\n                continue\n            if grid[i][j] == 'S':\n                continue\n            if grid[i][j] == 'T':\n                continue\n            if grid[i][j] == 'U':\n                continue\n            if grid[i][j] == 'V':\n                continue\n            if grid[i][j] == 'W':\n                continue\n            if grid[i][j] == 'X':\n                continue\n            if grid[i][j] == 'Y':\n                continue\n            if grid[i][j] == 'Z':\n                continue\n            if grid[i][j] == 'a':\n                continue\n            if grid[i][j] == 'b':\n                continue\n            if grid[i][j] == 'c':\n                continue\n            if grid[i][j] == 'd':\n                continue\n            if grid[i][j] == 'e':\n                continue\n            if grid[i][j] == 'f':\n                continue\n            if grid[i][j] == 'g':\n                continue\n            if grid[i][j] == 'h':\n                continue\n            if grid[i][j] == 'i':\n                continue\n            if grid[i][j] == 'j':\n                continue\n            if grid[i][j] == 'k':\n                continue\n            if grid[i][j] == 'l':\n                continue\n            if grid[i][j] =='m':\n                continue\n            if grid[i][j] == 'n':\n                continue\n            if grid[i][j] == 'o':\n                continue\n            if grid[i][j] == 'p':\n                continue\n            if grid[i][j] == 'q':\n                continue\n            if grid[i][j] == 'r':\n                continue\n            if grid[i][j] =='s':\n                continue\n            if grid[i][j] == 't':\n                continue\n            if grid[i][j] == 'u':\n                continue\n            if grid[i][j] == 'v':\n                continue\n            if grid[i][j] == 'w':\n                continue\n            if grid[i][j] == 'x':\n                continue\n            if grid[i][j] == 'y':\n                continue\n            if grid[i][j] == 'z':\n                continue\n            if grid[i][j] == 'A':\n                continue\n            if grid[i][j] == 'B':\n                continue\n            if grid[i][j] == 'C':\n                continue\n            if grid[i][j] == 'D':\n                continue\n            if grid[i][j] == 'E':\n                continue\n            if grid[i][j] == 'F':\n                continue\n            if grid[i][j] == 'G':\n                continue\n            if grid[i][j] == 'H':\n                continue\n            if grid[i][j] == 'I':\n                continue\n            if grid[i][j] == 'J':\n                continue\n            if grid[i][j] == 'K':\n                continue\n            if grid[i][j] == 'L':\n                continue\n            if grid[i][j] == 'M':\n                continue\n            if grid[i][j] == 'N':\n                continue\n            if grid[i][j] == 'O':\n                continue\n            if grid[i][j] == 'P':\n                continue\n            if grid[i][j] == 'Q':\n                continue\n            if grid[i][j] == 'R':\n                continue\n            if grid[i][j] == 'S':\n                continue\n            if grid[i][j] == 'T':\n                continue\n            if grid[i][j] == 'U':\n                continue\n            if grid[i][j] == 'V':\n                continue\n            if grid[i][j] == 'W':\n                continue\n            if grid[i][j] == 'X':\n                continue\n            if grid[i][j] == 'Y':\n                continue\n"
    },
    {
        "number": 2905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hotdogs = list(map(int, stdin.split()))\n    buns = list(map(int, stdin.split()))\n    if sum(hotdogs) % 2!= 0 or sum(buns) % 2!= 0:\n        return \"impossible\"\n    else:\n        return str(min(sum(hotdogs), sum(buns)) // 2)"
    },
    {
        "number": 2906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 or m == 1:\n        return \"Impossible\"\n    bullets = []\n    for i in range(1, n + 1):\n        bullets.append(i)\n    for i in range(m):\n        bullets.remove(int(stdin.split()[i]))\n    return str(bullets[0]) + \"\\n\" + str(bullets[1]) + \"\\n\" + str(bullets[2])"
    },
    {
        "number": 2907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    offset = int(stdin.split()[0])\n    message = stdin.split()[1]\n    n = int(stdin.split()[2])\n    vowels = 0\n    consonants = 0\n    for i in range(len(message)):\n        if message[i] in \"aeiou\":\n            vowels += 1\n        else:\n            consonants += 1\n    if vowels > consonants:\n        return \"Boris\"\n    else:\n        return \"Colleague\""
    },
    {
        "number": 2908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if sum(cards[i:j + 1]) == s:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 2909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"Possible\"\n    else:\n        return \"Impossible\""
    },
    {
        "number": 2910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    return str(sum(a) * sum(b))"
    },
    {
        "number": 2911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    problems = sorted(map(int, stdin.split()))\n    problems = [(p, t) for p in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in problems]\n    problems = sorted(problems)\n    problems = [(p, t) for p, t in"
    },
    {
        "number": 2912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(n):\n        strings.append(stdin)\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                strings[i] = strings[i] + strings[j]\n    return strings[n - 1]"
    },
    {
        "number": 2913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, r = map(int, stdin.split())\n    grid = [['.'] * (n + 2)]\n    for _ in range(n):\n        grid.append(['.'] + list(stdin) + ['.'])\n    grid.append(['.'] * (n + 2))\n    mirrors = []\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if grid[i][j] == '.':\n                mirrors.append((i, j))\n    if c == 1 and r == 1:\n        return 'YES'\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if grid[i][j] == '.':\n                if (i, j) in mirrors:\n                    continue\n                if (i, j) == (c, r):\n                    continue\n                if (i, j) == (c - 1, r - 1):\n                    continue\n                if (i, j) == (c - 1, r):\n                    continue\n                if (i, j) == (c, r - 1):\n                    continue\n                if (i, j) == (c + 1, r - 1):\n                    continue\n                if (i, j) == (c + 1, r):\n                    continue\n                if (i, j) == (c - 1, r + 1):\n                    continue\n                if (i, j) == (c, r + 1):\n                    continue\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 2914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split())\n    return str
    },
    {
        "number": 2915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    delivery_locations = []\n    for _ in range(N):\n        delivery_locations.append(list(map(int, stdin.split())))\n    delivery_locations.sort(key=lambda x: x[0])\n    delivery_locations.sort(key=lambda x: x[1])\n    delivery_locations.sort(key=lambda x: x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[0])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1] * x[0])\n    delivery_locations.sort(key=lambda x: x[2] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[0] * x[2])\n    delivery_locations.sort(key=lambda x: x[1] * x[2])\n    delivery_locations.sort(key=lambda x: x[2] * x[0] * x[1])\n    delivery_locations.sort(key=lambda x: x[2] * x[1"
    },
    {
        "number": 2916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    islands = []\n    for i in range(N):\n        islands.append([int(x) for x in stdin.split()])\n    return str(solve(islands))\n\ndef"
    },
    {
        "number": 2917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    else:\n        return str(int(n * (n - 1) / 2))"
    },
    {
        "number": 2918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"impossible\"\n    matrix = stdin.split(\"\\n\")\n    for i in range(n):\n        matrix[i] = matrix[i].split(\" \")\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"0\"\n            elif matrix[i][j] == \"1\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X\":\n                matrix[i][j] = \"1\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"X\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"1\":\n                matrix[i][j] = \"0\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == \"X"
    },
    {
        "number": 2919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == 'T':\n            stack.append(stack.pop() + stack.pop())\n        elif char == 'N':\n            stack.append(stack.pop() + 1)\n        elif char == 'S':\n            stack.append(stack.pop() - stack.pop())\n    return str(stack[0])"
    },
    {
        "number": 2920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = stdin.split('\\n')\n    grid = [[c for c in line] for line in grid]\n    return str(count_paths(grid, (0, 0), (n - 1, n - 1)))\n\ndef"
    },
    {
        "number": 2921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, u, d = map(float, stdin.split())\n    if m <= 0 or u <= 0 or d <= 0:\n        return 'IMPOSSIBLE'\n    if m > 10.0 or u > 20.0 or d > 8:\n        return 'IMPOSSIBLE'\n    if m < 1.0 or u < 1.0 or d < 1.0:\n        return 'IMPOSSIBLE'\n    if m > 10.0:\n        return 'IMPOSSIBLE'\n    if u > 20.0:\n        return 'IMPOSSIBLE'\n    if d > 8:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m > 10.0:\n        return 'IMPOSSIBLE'\n    if u > 20.0:\n        return 'IMPOSSIBLE'\n    if d > 8:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n        return 'IMPOSSIBLE'\n    if d < 1.0:\n        return 'IMPOSSIBLE'\n    if m < 1.0:\n        return 'IMPOSSIBLE'\n    if u < 1.0:\n"
    },
    {
        "number": 2922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] + a[-1] == a[-1] + a[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 2923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    grid = [[0] * w for _ in range(h)]\n    for i in range(h):\n        line = stdin.split()[i]\n        for j, c in enumerate(line):\n            grid[i][j] = c == 'A'\n    return str(min_deployment(grid))\n\n\ndef"
    },
    {
        "number": 2924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split())\n    C = list(map(int, stdin.split()[1:]))\n    D = list(map(int, stdin.split()[1:]))\n    C = sorted(C, reverse=True)\n    D = sorted(D, reverse=True)\n    if sum(C) > P:\n        return \"Ride on!\"\n    if sum(D) > P:\n        return \"Time to change gears!\"\n    return \"Ride on!\""
    },
    {
        "number": 2925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        f, s = map(int, stdin.split())\n        songs.append((f, s))\n    songs.sort(key=lambda x: x[0], reverse=True)\n    return songs[0][1]"
    },
    {
        "number": 2926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Touchdown' if stdin.count('Touchdown') > 0 else 'Nothing' if stdin.count('Nothing') > 0 else 'Safety' if stdin.count('Safety') > 0 else 'Nothing'"
    },
    {
        "number": 2928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    s = []\n    p = []\n    for i in range(b):\n        s.append(float(stdin.split()[i*2+1]))\n        p.append(float(stdin.split()[i*2+2]))\n    p.append(float(stdin.split()[-1]))\n    s.sort()\n    p.sort()\n    s.reverse()\n    p.reverse()\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p.append(0)\n    s.append(0)\n    p."
    },
    {
        "number": 2929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = [[int(x) for x in stdin.split()] for _ in range(N)]\n    h[0][0] = 0\n    h[0][1] = 0\n    h[1][0] = 0\n    h[1][1] = 0\n    h[1][2] = 0\n    h[2][1] = 0\n    h[2][2] = 0\n    h[2][3] = 0\n    h[3][2] = 0\n    h[3][3] = 0\n    h[3][4] = 0\n    h[4][3] = 0\n    h[4][4] = 0\n    h[4][5] = 0\n    h[5][4] = 0\n    h[5][5] = 0\n    h[5][6] = 0\n    h[6][5] = 0\n    h[6][6] = 0\n    h[6][7] = 0\n    h[7][6] = 0\n    h[7][7] = 0\n    h[7][8] = 0\n    h[8][7] = 0\n    h[8][8] = 0\n    h[8][9] = 0\n    h[9][8] = 0\n    h[9][9] = 0\n    h[9][10] = 0\n    h[10][9] = 0\n    h[10][10] = 0\n    h[10][11] = 0\n    h[11][10] = 0\n    h[11][11] = 0\n    h[11][12] = 0\n    h[12][11] = 0\n    h[12][12] = 0\n    h[12][13] = 0\n    h[13][12] = 0\n    h[13][13] = 0\n    h[13][14] = 0\n    h[14][13] = 0\n    h[14][14] = 0\n    h[14][15] = 0\n    h[15][14] = 0\n    h[15][15] = 0\n    h[15][16] = 0\n    h[16][15] = 0\n    h[16][16] = 0\n    h[16][17] = 0\n    h[17][16] = 0\n    h[17][17] = 0\n    h[17][18] = 0\n    h[18][17] = 0\n    h[18][18] = 0\n    h[18][19] = 0\n    h[19][18] = 0\n    h[19][19] = 0\n    h[19][20] = 0\n    h[20][19] = 0\n    h[20][20] = 0\n    h[20][21] = 0\n    h[21][20] = 0\n    h[21][21] = 0\n    h[21][22] = 0\n    h[22][21] = 0\n    h[22][22] = 0\n    h[22][23] = 0\n    h[23][22] = 0\n    h[23][23] = 0\n    h[23][24] = 0\n    h[24][23] = 0\n    h[24][24] = 0\n    h[24][25] = 0\n    h[25][24] = 0\n    h[25][25] = 0\n    h[25][26] = 0\n    h[26][25] = 0\n    h[26][26] = 0\n    h[26][27] = 0\n    h[27][26] = 0\n    h[27][27] = 0\n    h[27][28] = 0\n    h[28][27] = 0\n    h[28][28] = 0\n    h[28][29] = 0\n    h[29][28] = 0\n    h[29][29] = 0\n    h[29][30] = 0\n    h[30][29] = 0\n    h[30][30] = 0\n    h[30][31] = 0\n    h[31][30] = 0\n    h[31][31] = 0\n    h[31][32] = 0\n    h[32][31] = 0\n    h[32][32] = 0\n    h[32][33] = 0\n    h[33][32] = 0\n    h[33][33] = 0\n    h[33][34] = 0\n    h[34][33] = 0\n    h[34][34] = 0\n    h[34][35] = 0\n    h[35][34] = 0\n    h[35][35] = 0\n    h[35][36] = 0\n    h[36][35] = 0\n    h[36][36] = 0\n    h[36][37] = 0\n    h[37][36] = 0\n    h[37][37] = 0\n    h[37][38] = 0\n    h[38][37] = 0\n    h[38][38] = 0\n    h[38][39] = 0\n    h[39][38] = 0\n    h[39][39] = 0\n    h[39][40] = 0\n    h[40][39] = 0\n    h[40][40] = 0\n    h[40][41] = 0\n    h[41][40] = 0\n    h[41][41] = 0\n    h[41][42] = 0\n    h[42][41] = 0\n    h[42][42] = 0\n    h[42][43] = 0\n    h[43][42] = 0\n    h[43][43] = 0\n    h[43][44] = 0\n    h[44][43] = 0\n    h[44][44] = 0\n    h[44][45] = 0\n    h[45][44] = 0\n    h[45][45] = 0\n    h[45][46] = 0\n    h[46][45] = 0\n    h[46][46] = 0\n    h[46][47] = 0\n    h[47][46] = 0\n    h[47][47] = 0\n    h[47][48] = 0\n    h[48][47] = 0\n    h[48][48] = 0\n    h[48][49] = 0\n    h[49][48] = 0\n    h[49][49] = 0\n    h[49][50] = 0\n    h[50][49] = 0\n    h[50][50] = 0\n    h[50][51] = 0\n    h[51][50] = 0\n    h[51][51] = 0\n    h[51][52] ="
    },
    {
        "number": 2930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                for k in range(j + 1, n):\n                    if arr[i] > arr[k] and arr[j] > arr[k]:\n                        max_len = max(max_len, k - i + 1)\n    return str(max_len)"
    },
    {
        "number": 2931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    scores = [int(x) for x in stdin.split()]\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort(reverse=True)\n    scores.sort("
    },
    {
        "number": 2932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    k = int(s[1])\n    s = s[0]\n    s = list(s)\n    s.sort(key=lambda x: x.lower())\n    if s == list(sorted(s, key=lambda x: x.lower())):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    plates = list(map(int, stdin.split()))\n    plates.sort()\n    print(plates)\n    return str(plates[-1] + plates[-2])"
    },
    {
        "number": 2934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(factorial(N) // factorial(N - 2) // factorial(2) // factorial(M))\n\ndef"
    },
    {
        "number": 2935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, f, s, t = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        roads[a].append((b, c))\n        roads[b].append((a, c))\n    flights = [[] for _ in range(n)]\n    for i in range(f):\n        a, b, c = map(int, stdin.split())\n        flights[a].append((b, c))\n        flights[b].append((a, c))\n    return str(min_cost(roads, flights, s, t))\n\n\ndef"
    },
    {
        "number": 2936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    return str(max_subarray(A, n, k))\n\ndef"
    },
    {
        "number": 2937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, c = map(int, stdin.split())\n    names = stdin.split()\n    names = sorted(names)\n    groups = []\n    for i in range(n):\n        groups.append([names[i]])\n    for i in range(n):\n        for j in range(i+1, n):\n            if names[i] == names[j]:\n                groups[i].append(names[j])\n                groups[j].append(names[i])\n    groups = sorted(groups)\n    return str(len(groups)) + '\\n' +''.join(group for group in groups)"
    },
    {
        "number": 2938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split(\"\\n\")\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n            elif board[i][j] == \"K\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"R\":\n                board[i][j] = \"k\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"k\":\n                board[i][j] = \"R\"\n    for i in range(len(board)):\n        for"
    },
    {
        "number": 2939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    max_dist = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                dist = 0\n                for k in range(n):\n                    if grid[i][k] == 1:\n                        dist += 1\n                    if grid[k][j] == 1:\n                        dist += 1\n                if dist > max_dist:\n                    max_dist = dist\n    return str(max_dist)"
    },
    {
        "number": 2940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        return str(n - 1) + \" \" + str(n - 2)"
    },
    {
        "number": 2941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 1:\n        return \"doctor takes a break\"\n    if N == 2:\n        return \"Bob\"\n    if N == 3:\n        return \"Alice\"\n    if N == 4:\n        return \"doctor takes a break\"\n    if N == 5:\n        return \"Bob\"\n    if N == 6:\n        return \"Alice\"\n    if N == 7:\n        return \"doctor takes a break\"\n    if N == 8:\n        return \"Bob\"\n    if N == 9:\n        return \"Alice\"\n    if N == 10:\n        return \"doctor takes a break\"\n    if N == 11:\n        return \"Bob\"\n    if N == 12:\n        return \"Alice\"\n    if N == 13:\n        return \"doctor takes a break\"\n    if N == 14:\n        return \"Bob\"\n    if N == 15:\n        return \"Alice\"\n    if N == 16:\n        return \"doctor takes a break\"\n    if N == 17:\n        return \"Bob\"\n    if N == 18:\n        return \"Alice\"\n    if N == 19:\n        return \"doctor takes a break\"\n    if N == 20:\n        return \"Bob\"\n    if N == 21:\n        return \"Alice\"\n    if N == 22:\n        return \"doctor takes a break\"\n    if N == 23:\n        return \"Bob\"\n    if N == 24:\n        return \"Alice\"\n    if N == 25:\n        return \"doctor takes a break\"\n    if N == 26:\n        return \"Bob\"\n    if N == 27:\n        return \"Alice\"\n    if N == 28:\n        return \"doctor takes a break\"\n    if N == 29:\n        return \"Bob\"\n    if N == 30:\n        return \"Alice\"\n    if N == 31:\n        return \"doctor takes a break\"\n    if N == 32:\n        return \"Bob\"\n    if N == 33:\n        return \"Alice\"\n    if N == 34:\n        return \"doctor takes a break\"\n    if N == 35:\n        return \"Bob\"\n    if N == 36:\n        return \"Alice\"\n    if N == 37:\n        return \"doctor takes a break\"\n    if N == 38:\n        return \"Bob\"\n    if N == 39:\n        return \"Alice\"\n    if N == 40:\n        return \"doctor takes a break\"\n    if N == 41:\n        return \"Bob\"\n    if N == 42:\n        return \"Alice\"\n    if N == 43:\n        return \"doctor takes a break\"\n    if N == 44:\n        return \"Bob\"\n    if N == 45:\n        return \"Alice\"\n    if N == 46:\n        return \"doctor takes a break\"\n    if N == 47:\n        return \"Bob\"\n    if N == 48:\n        return \"Alice\"\n    if N == 49:\n        return \"doctor takes a break\"\n    if N == 50:\n        return \"Bob\"\n    if N == 51:\n        return \"Alice\"\n    if N == 52:\n        return \"doctor takes a break\"\n    if N == 53:\n        return \"Bob\"\n    if N == 54:\n        return \"Alice\"\n    if N == 55:\n        return \"doctor takes a break\"\n    if N == 56:\n        return \"Bob\"\n    if N == 57:\n        return \"Alice\"\n    if N == 58:\n        return \"doctor takes a break\"\n    if N == 59:\n        return \"Bob\"\n    if N == 60:\n        return \"Alice\"\n    if N == 61:\n        return \"doctor takes a break\"\n    if N == 62:\n        return \"Bob\"\n    if N == 63:\n        return \"Alice\"\n    if N == 64:\n        return \"doctor takes a break\"\n    if N == 65:\n        return \"Bob\"\n    if N == 66:\n        return \"Alice\"\n    if N == 67:\n        return \"doctor takes a break\"\n    if N == 68:\n        return \"Bob\"\n    if N == 69:\n        return \"Alice\"\n    if N == 70:\n        return \"doctor takes a break\"\n    if N == 71:\n        return \"Bob\"\n    if N == 72:\n        return \"Alice\"\n    if N == 73:\n        return \"doctor takes a break\"\n    if N == 74:\n        return \"Bob\"\n    if N == 75:\n        return \"Alice\"\n    if N == 76:\n        return \"doctor takes a break\"\n    if N == 77:\n        return \"Bob\"\n    if N == 78:\n        return \"Alice\"\n    if N == 79:\n        return \"doctor takes a break\"\n    if N == 80:\n        return \"Bob\"\n    if N == 81:\n        return \"Alice\"\n    if N == 82:\n        return \"doctor takes a break\"\n    if N == 83:\n        return \"Bob\"\n    if N == 84:\n        return \"Alice\"\n    if N == 85:\n        return \"doctor takes a break\"\n    if N == 86:\n        return \"Bob\"\n    if N == 87:\n        return \"Alice\"\n    if N == 88:\n        return \"doctor takes a break\"\n    if N == 89:\n        return \"Bob\"\n    if N == 90"
    },
    {
        "number": 2942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D <= 200000:\n        return \"impossible\"\n    else:\n        return str(int(D**0.5)) + \" \" + str(int(D**0.5))"
    },
    {
        "number": 2943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 2:\n        return ''\n    \n    # split the string into sections\n    sections = []\n    i = 0\n    while i < n:\n        sections.append(stdin[i:i+2])\n        i += 2\n    \n    # count the number of R and B in each section\n    r_count = 0\n    b_count = 0\n    for section in sections:\n        if section == 'R':\n            r_count += 1\n        elif section == 'B':\n            b_count += 1\n    \n    # find the part of Linearland with the least purple rain\n    min_purple_rain = r_count + b_count\n    min_purple_rain_start = 0\n    min_purple_rain_end = 0\n    for i in range(len(sections)):\n        if sections[i] == 'R' and r_count < min_purple_rain:\n            min_purple_rain = r_count\n            min_purple_rain_start = i\n        elif sections[i] == 'B' and b_count < min_purple_rain:\n            min_purple_rain = b_count\n            min_purple_rain_end = i\n    \n    # print the part of Linearland with the least purple rain\n    print(min_purple_rain_start, min_purple_rain_end)\n    return ''"
    },
    {
        "number": 2944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = stdin.split()\n        graph[u].append(v)\n        graph[v].append(u)\n    s = stdin.split()[-1]\n    q = deque([s])\n    seen = set()\n    seen.add(s)\n    days = 0\n    while q:\n        for _ in range(len(q)):\n            person = q.popleft()\n            for neighbor in graph[person]:\n                if neighbor not in seen:\n                    seen.add(neighbor)\n                    q.append(neighbor)\n        days += 1\n    return days"
    },
    {
        "number": 2945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    M = int(stdin)\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    return str(solve(T, N, A, M, B, C, D))\n\ndef"
    },
    {
        "number": 2946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    max_profit = 0\n    for i in range(N):\n        if prices[i] > prices[i + 1]:\n            max_profit += prices[i] - prices[i + 1]\n    return str(max_profit)"
    },
    {
        "number": 2947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"impossible\"\n    nums = []\n    for i in range(1, n+1):\n        nums.append(int(stdin.split()[i-1]))\n    nums.sort()\n    for i in range(1, n):\n        if nums[i] == nums[i-1]:\n            return \"impossible\"\n    for i in range(1, n):\n        if nums[i] == nums[i-1] + 1:\n            return \"impossible\"\n    for i in range(1, n):\n        if nums[i] == nums[i-1] - 1:\n            return \"impossible\"\n    return \"possible\""
    },
    {
        "number": 2948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n // 2\n    a = set()\n    b = set()\n    for i in range(n):\n        a.add(i)\n        b.add(i)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in a and (j, i) in a:\n                a.remove((i, j))\n                a.remove((j, i))\n            if (i, j) in b and (j, i) in b:\n                b.remove((i, j))\n                b.remove((j, i))\n    return ''.join(sorted(a | b))\n"
    },
    {
        "number": 2949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pylons = []\n    for i in range(n):\n        x, y, a = map(int, stdin.split())\n        pylons.append((x, y, a))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0], -x[1]))\n    pylons.sort(key=lambda x: (x[2], x[1]))\n    pylons.sort(key=lambda x: (x[0], x[1]))\n    pylons.sort(key=lambda x: (x[2], -x[1]))\n    pylons.sort(key=lambda x: (x[0],"
    },
    {
        "number": 2950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n"
    },
    {
        "number": 2951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i!= j:\n                for k in range(1, N+1):\n                    if i!= k and j!= k:\n                        if i!= N and j!= N:\n                            if i!= N and k!= N:\n                                if i!= N and k!= N:\n                                    if i!= N and k!= N:\n                                        if i!= N and k!= N:\n                                            if i!= N and k!= N:\n                                                if i!= N and k!= N:\n                                                    if i!= N and k!= N:\n                                                        if i!= N and k!= N:\n                                                            if i!= N and k!= N:\n                                                                if i!= N and k!= N:\n                                                                    if i!= N and k!= N:\n                                                                        if i!= N and k!= N:\n                                                                            if i!= N and k!= N:\n                                                                                if i!= N and k!= N:\n                                                                                    if i!= N and k!= N:\n                                                                                        if i!= N and k!= N:\n                                                                                            if i!= N and k!= N:\n                                                                                                if i!= N and k!= N:\n                                                                                                    if i!= N and k!= N:\n                                                                                                        if i!= N and k!= N:\n                                                                                                            if i!= N and k!= N:\n                                                                                                                if i!= N and k!= N:\n                                                                                                                    if i!= N and k!= N:\n                                                                                                                        if i!= N and k!= N:\n                                                                                                                            if i!= N and k!= N:\n                                                                                                                                if i!= N and k!= N:\n                                                                                                                                       if i!= N and k!= N:\n                                                                                                                                           if i!= N and k!= N:\n                                                                                                                                              if i!= N and k!= N:\n                                                                                                                                                if i!= N and k!= N:\n                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                       if i!= N and k!= N:\n                                                                                                                                                           if i!= N and k!= N:\n                                                                                                                                                         if i!= N and k!= N:\n                                                                                                                                                               if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   if i!= N and k!= N:\n                                                                                                                                                                   "
    },
    {
        "number": 2952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b, c = map(int, stdin.split())\n    if a + b + c == m:\n        return \"possible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 2953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) == 2018:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, T = map(int, stdin.split())\n    roads = [[int(i) for i in stdin.split()] for _ in range(M)]\n    spiders = [[int(i) for i in stdin.split()] for _ in range(int(stdin.split()[-1]))]\n    roads = sorted(roads, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key=lambda x: x[1])\n    spiders = sorted(spiders, key=lambda x: x[0])\n    spiders = sorted(spiders, key=lambda x: x[2])\n    spiders = sorted(spiders, key="
    },
    {
        "number": 2955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, b = map(int, stdin.split())\n    z = list(map(int, stdin.split()))\n    return \"\".join([\"1\" if i in z else \"0\" for i in range(1, n + 1)])"
    },
    {
        "number": 2956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - 1)"
    },
    {
        "number": 2958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, K = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    ans = 0\n    for i in range(T):\n        a, b = map(int, stdin.split())\n        if a > b:\n            ans += b\n        else:\n            ans += a\n    return str(ans)"
    },
    {
        "number": 2959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [['.'] * (m + 2)]\n    for _ in range(n):\n        grid.append(['.'] + list(stdin) + ['.'])\n    grid.append(['.'] * (m + 2))\n    for row in grid:\n        print(''.join(row))\n    return ''"
    },
    {
        "number": 2960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(binomial_coefficient(n, 2))"
    },
    {
        "number": 2961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rooms = {}\n    for i in range(1, n + 1):\n        rooms[i] = []\n    for i in range(n):\n        room, *exits = stdin.split()\n        rooms[int(room)].extend(exits)\n    for room in rooms:\n        if room == 0:\n            rooms[room] = []\n    for room in rooms:\n        if len(rooms[room]) == 0:\n            return \"Impossible\"\n    for room in rooms:\n        if len(rooms[room]) == 1:\n            if rooms[room][0] == \"0\":\n                return \"Impossible\"\n            else:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 2962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    cash = []\n    for i in range(N):\n        cash.append(list(map(int, stdin.split())))\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[1] - x[0])\n    "
    },
    {
        "number": 2963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    while x**x < n:\n        x += 1\n    return str(x)"
    },
    {
        "number": 2964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    shots = stdin.split()\n    shots = list(map(int, shots))\n    shots.sort(key=lambda x: x[0]**2 + x[1]**2)\n    dist = 0\n    for i in range(len(shots)-1):\n        dist += abs(shots[i][0] - shots[i+1][0]) + abs(shots[i][1] - shots[i+1][1])\n    return str(dist)"
    },
    {
        "number": 2965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, D, N = map(int, stdin.split())\n    grid = [[0] * N for _ in range(N)]\n    for i in range(P):\n        R, C = map(int, stdin.split())\n        grid[R - 1][C - 1] = i + 1\n    for day in range(D):\n        new_grid = [[0] * N for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                if grid[i][j] == 0:\n                    continue\n                if i == 0 or i == N - 1 or j == 0 or j == N - 1:\n                    new_grid[i][j] = 0\n                else:\n                    new_grid[i][j] = grid[i - 1][j] + grid[i + 1][j] + grid[i][j - 1] + grid[i][j + 1] - 4\n        grid = new_grid\n    return '\\n'.join(map(str, grid))"
    },
    {
        "number": 2966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(m * n // 2)"
    },
    {
        "number": 2967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        a, s = map(int, stdin.split())\n        if a > m:\n            res += 1\n    return str(res)"
    },
    {
        "number": 2968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, n, e = map(int, stdin.split())\n    s_b, s_n, s_e = map(int, stdin.split())\n    c = (b + n + e) // 2\n    return str(c * (s_b + s_n) + min(s_b, s_n))"
    },
    {
        "number": 2969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'possible' if is_possible(stdin) else 'impossible'\n\ndef"
    },
    {
        "number": 2970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    noise = 0\n    for i in range(N):\n        noise += i\n    for i in range(1, N):\n        noise += (i - 1)\n    return str(noise)"
    },
    {
        "number": 2971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin)"
    },
    {
        "number": 2972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(sum(1 for i in range(a, b + 1) if is_palindrome(i, k)))\n\ndef"
    },
    {
        "number": 2973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        d, s = map(int, stdin.split())\n        segments.append((d, s))\n    c = 0\n    for i in range(n):\n        c += segments[i][1]\n        c += segments[i][0]\n    return str(c / t)"
    },
    {
        "number": 2974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    P.sort()\n    D.sort()\n    P_set = set(P)\n    D_set = set(D)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n    if len(P_set)!= len(D_set):\n        return \"0 0\"\n    P_set = sorted(P_set)\n    D_set = sorted(D_set)\n    P_set = set(P_set)\n    D_set = set(D_set)\n"
    },
    {
        "number": 2975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ingredients = []\n    for i in range(N):\n        ingredients.append(list(map(int, stdin.split())))\n    ingredients.sort(key=lambda x: x[0])\n    ingredients.sort(key=lambda x: x[1])\n    ingredients.sort(key=lambda x: x[2])\n    ingredients.sort(key=lambda x: x[3])\n    ingredients.sort(key=lambda x: x[4])\n    ingredients.sort(key=lambda x: x[5])\n    ingredients.sort(key=lambda x: x[6])\n    ingredients.sort(key=lambda x: x[7])\n    ingredients.sort(key=lambda x: x[8])\n    ingredients.sort(key=lambda x: x[9])\n    ingredients.sort(key=lambda x: x[10])\n    ingredients.sort(key=lambda x: x[11])\n    ingredients.sort(key=lambda x: x[12])\n    ingredients.sort(key=lambda x: x[13])\n    ingredients.sort(key=lambda x: x[14])\n    ingredients.sort(key=lambda x: x[15])\n    ingredients.sort(key=lambda x: x[16])\n    ingredients.sort(key=lambda x: x[17])\n    ingredients.sort(key=lambda x: x[18])\n    ingredients.sort(key=lambda x: x[19])\n    ingredients.sort(key=lambda x: x[20])\n    ingredients.sort(key=lambda x: x[21])\n    ingredients.sort(key=lambda x: x[22])\n    ingredients.sort(key=lambda x: x[23])\n    ingredients.sort(key=lambda x: x[24])\n    ingredients.sort(key=lambda x: x[25])\n    ingredients.sort(key=lambda x: x[26])\n    ingredients.sort(key=lambda x: x[27])\n    ingredients.sort(key=lambda x: x[28])\n    ingredients.sort(key=lambda x: x[29])\n    ingredients.sort(key=lambda x: x[30])\n    ingredients.sort(key=lambda x: x[31])\n    ingredients.sort(key=lambda x: x[32])\n    ingredients.sort(key=lambda x: x[33])\n    ingredients.sort(key=lambda x: x[34])\n    ingredients.sort(key=lambda x: x[35])\n    ingredients.sort(key=lambda x: x[36])\n    ingredients.sort(key=lambda x: x[37])\n    ingredients.sort(key=lambda x: x[38])\n    ingredients.sort(key=lambda x: x[39])\n    ingredients.sort(key=lambda x: x[40])\n    ingredients.sort(key=lambda x: x[41])\n    ingredients.sort(key=lambda x: x[42])\n    ingredients.sort(key=lambda x: x[43])\n    ingredients.sort(key=lambda x: x[44])\n    ingredients.sort(key=lambda x: x[45])\n    ingredients.sort(key=lambda x: x[46])\n    ingredients.sort(key=lambda x: x[47])\n    ingredients.sort(key=lambda x: x[48])\n    ingredients.sort(key=lambda x: x[49])\n    ingredients.sort(key=lambda x: x[50])\n    ingredients.sort(key=lambda x: x[51])\n    ingredients.sort(key=lambda x: x[52])\n    ingredients.sort(key=lambda x: x[53])\n    ingredients.sort(key=lambda x: x[54])\n    ingredients.sort(key=lambda x: x[55])\n    ingredients.sort(key=lambda x: x[56])\n    ingredients.sort(key=lambda x: x[57])\n    ingredients.sort(key=lambda x: x[58])\n    ingredients.sort(key=lambda x: x[59])\n    ingredients.sort(key=lambda x: x[60])\n    ingredients.sort(key=lambda x: x[61])\n    ingredients.sort(key=lambda x: x[62])\n    ingredients.sort(key=lambda x: x[63])\n    ingredients.sort(key=lambda x: x[64])\n    ingredients.sort(key=lambda x: x[65])\n    ingredients.sort(key=lambda x: x[66])\n    ingredients.sort(key=lambda x: x[67])\n    ingredients.sort(key=lambda x: x[68])\n    ingredients.sort(key=lambda x: x[69])\n    ingredients.sort(key=lambda x: x[70])\n    ingredients.sort(key=lambda x: x[71])\n    ingredients.sort(key=lambda x: x[72])\n    ingredients.sort(key=lambda x: x[73])\n    ingredients.sort(key=lambda x: x[74])\n    ingredients.sort(key=lambda x: x[75])\n    ingredients.sort(key=lambda x: x[76])\n    ingredients.sort(key=lambda x: x[77])\n    ingredients.sort(key=lambda x: x[78])\n    ingredients.sort(key=lambda x: x[79])\n    ingredients.sort(key=lambda x: x[80])\n    ingredients.sort(key=lambda x: x[81])\n    ingredients.sort(key=lambda x: x[82])\n    ingredients.sort(key=lambda x: x[83])\n    ingredients.sort(key=lambda x: x[84])\n    ingredients.sort(key=lambda x: x[85])\n    ingredients.sort(key=lambda x: x[86])\n    ingredients.sort(key=lambda x: x[87])\n    ingredients.sort(key=lambda x: x[88])\n    ingredients.sort(key=lambda x: x[89])\n    ingredients.sort(key=lambda x: x[90])\n    ingredients.sort(key"
    },
    {
        "number": 2976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    player1, player2 = stdin.split()\n    player1_wins = 0\n    player2_wins = 0\n    for i in range(int(stdin)):\n        player1_set = stdin.split()[i].split(\":\")\n        player2_set = stdin.split()[i+1].split(\":\")\n        if player1_set[0] == player2_set[0]:\n            if player1_set[1] == player2_set[1]:\n                player1_wins += 1\n            else:\n                player2_wins += 1\n        elif player1_set[0] == \"federer\":\n            player2_wins += 1\n        else:\n            player1_wins += 1\n    if player1_wins == 2:\n        return \"da\"\n    elif player2_wins == 2:\n        return \"da\"\n    else:\n        return \"ne\""
    },
    {
        "number": 2977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answers = []\n    for i in range(n):\n        answers.append(stdin.split()[i])\n    answers.sort(key=lambda x: len(x))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort(key=lambda x: len(x.split(\" \")))\n    answers.sort(key=lambda x: len(x.split(\",\")))\n    answers.sort"
    },
    {
        "number": 2978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, lines[i].split())\n        if x1 == x2 and y1 == y2:\n            return \"same\"\n        else:\n            return \"different\""
    },
    {
        "number": 2979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    infected = [s]\n    infected_at = {s: 0}\n    infected_at[s] = 1\n    infected_at_prev = {s: 0}\n    infected_at_prev[s] = 1\n    infected_at_prev_prev = {s: 0}\n    infected_at_prev_prev[s] = 1\n    infected_at_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev[s] = 1\n    infected_at_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev[s] = 1\n    infected_at_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = {s: 0}\n    infected_at_prev_prev_prev_prev_prev_prev_prev_prev_prev"
    },
    {
        "number": 2980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    m = int(stdin.split()[1])\n    for _ in range(m):\n        l, h = map(int, stdin.split())\n        s = list(map(lambda x: x ^ h, s))\n    return ''.join(['L' if i == 0 else 'W' for i in s])"
    },
    {
        "number": 2981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = []\n    for i in range(n):\n        x, y = map(float, stdin.split())\n        vertices.append((x, y))\n    vertices.sort(key=lambda x: x[0])\n    min_slot = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_slot = min(min_slot, abs(vertices[i][0] - vertices[j][0]) + abs(vertices[i][1] - vertices[j][1]))\n    return str(min_slot)\n"
    },
    {
        "number": 2982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hype_rating = list(map(int, stdin.split()))\n    hype_rating.sort()\n    count = 0\n    for i in range(n):\n        if hype_rating[i] == 1:\n            count += 1\n        elif hype_rating[i] == 2:\n            count += 2\n        elif hype_rating[i] == 3:\n            count += 3\n    return str(count)"
    },
    {
        "number": 2983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a"
    },
    {
        "number": 2984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, p = map(int, stdin.split())\n    passengers = sorted(map(int, stdin.split()))\n    passengers.append(passengers[-1] + l)\n    passengers.insert(0, passengers[0] - l)\n    passengers.sort()\n    passengers.pop()\n    passengers.pop(0)\n    passengers.sort()\n    print(passengers[-1] - passengers[0])\n    print(len(passengers))\n    return stdin"
    },
    {
        "number": 2985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n"
    },
    {
        "number": 2986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        s = stdin.strip()\n        s = s.replace('<', '[').replace('>', ']')\n        s = s.replace('[', '<').replace(']', '>')\n        s = s.replace(' ', '')\n        print(s)\n    return ''"
    },
    {
        "number": 2987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W = map(int, stdin.split())\n    prices = list(map(int, stdin.split()[1:]))\n    seats = list(map(int, stdin.split()[1:]))\n    # print(N, W, prices, seats)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    # print(seats)\n    # print(prices)\n    "
    },
    {
        "number": 2988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + cities[i - 1] * cities[k] * cities[j])\n    return str(dp[1][n])"
    },
    {
        "number": 2989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    stations = list(map(int, stdin.split()))\n    pipes = []\n    for i in range(p):\n        a, b, c = map(int, stdin.split())\n        pipes.append((a, b, c))\n    for i in range(k):\n        a, b, c = map(int, stdin.split())\n        pipes.append((a, b, c))\n    stations.append(stations[0])\n    stations.append(stations[1])\n    stations.sort()\n    pipes.sort(key=lambda x: x[2])\n    m = 0\n    for i in range(len(stations) - 1):\n        if stations[i] == stations[i + 1]:\n            continue\n        for j in range(len(pipes)):\n            if stations[i] == pipes[j][0] and stations[i + 1] == pipes[j][1]:\n                m = max(m, pipes[j][2])\n    return str(m)"
    },
    {
        "number": 2990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    owners = []\n    for i in range(n):\n        owners.append(stdin.split())\n    players = []\n    for i in range(k):\n        players.append(stdin.split())\n    preferences = []\n    for i in range(n):\n        preferences.append(stdin.split())\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range(n):\n        preferences[i] = preferences[i][1:]\n    preferences = sorted(preferences, key=lambda x: int(x[0]))\n    for i in range("
    },
    {
        "number": 2991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    gnomes = list(range(1, n + 1))\n    for _ in range(m):\n        gnomes.remove(int(stdin.split()[-1]))\n    return''.join(map(str, sorted(gnomes)))"
    },
    {
        "number": 2992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split())))\n    roads.sort(key=lambda x: x[2])\n    cities = set()\n    for road in roads:\n        cities.add(road[0])\n        cities.add(road[1])\n    cities = list(cities)\n    cities.sort()\n    cities = tuple(cities)\n    if len(cities) == 1:\n        return \"IMPOSSIBLE\"\n    for i in range(len(cities) - 1):\n        if cities[i + 1] - cities[i] > roads[0][2]:\n            return \"IMPOSSIBLE\"\n    return str(roads[0][2])"
    },
    {
        "number": 2993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, M = map(int, stdin.split())\n    p_A = D / 8\n    binary = stdin.replace(\"0.\", \"\")\n    binary = binary.replace(\"1.\", \"\")\n    binary = binary.replace(\"0\", \"A\")\n    binary = binary.replace(\"1\", \"B\")\n    binary = binary[:3 * N + 2]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n    binary = binary[::-1]\n    binary = binary[:N]\n"
    },
    {
        "number": 2994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = [[c for c in stdin[i*C:(i+1)*C]] for i in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'a':\n                for k in range(i+1, R):\n                    if grid[k][j] == '.':\n                        grid[k][j] = 'a'\n                        break\n    for i in range(R):\n        print(''.join(grid[i]))\n    return ''.join(grid[0])\n\nsolution(input())\n"
    },
    {
        "number": 2995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    items = stdin.split()\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n    items = sorted(items)\n    items = list(set(items))\n"
    },
    {
        "number": 2996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    requests = sorted([int(i) for i in stdin.split()])\n    costs = []\n    for i in range(n):\n        costs.append(requests[i] * requests[i + 1])\n    costs.append(requests[n] * requests[0])\n    costs.sort()\n    print(sum(costs[:k]))\n    return"
    },
    {
        "number": 2997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    edges.sort(key=lambda x: x[0])\n    colors = {i: 0 for i in range(1, N + 1)}\n    for a, b in edges:\n        if colors[a] == colors[b]:\n            colors[a] += 1\n        else:\n            colors[a] = 0\n            colors[b] = 0\n    return str(max(colors.values()))\n"
    },
    {
        "number": 2998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    participants = {}\n    for i in range(n):\n        name, bet = stdin.split()\n        participants[name] = participants.get(name, 0) + int(bet)\n    participants = sorted(participants.items(), key=lambda x: x[1], reverse=True)\n    winners = []\n    for name, amount in participants:\n        if amount == s:\n            winners.append(name)\n        elif amount >= s:\n            winners.append(name)\n            break\n    return '\\n'.join(winners)"
    }
]