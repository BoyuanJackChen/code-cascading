[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    accordion = stdin\n    while True:\n        i = accordion.find('|')\n        if i == -1:\n            break\n        else:\n            accordion = accordion[i:]\n    if len(accordion) == 0:\n        return -1\n    return len(accordion)"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    #1. remove first char\n    for i in range(len(s)):\n        if s[i] == '[':\n            s = s[i+1:]\n        elif s[i] == ']':\n            s = s[i+1:]\n        elif s[i] == ':':\n            s = s[i+1:]\n        else:\n            break\n    \n    #2. remove all :\n    s = s.replace(':', '')\n\n    #3. remove all |\n    s = s.replace('|', '')\n    \n    #4. remove all :\n    s = s.replace('[:', '')\n\n    #5. remove all ]\n    s = s.replace(']', '')\n\n    return len(s)\nprint(solution(input()))"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in range(1,len(stdin)-1):\n        print(stdin[i])\n        if(stdin[i] == ':'):\n            if(stdin[i-1] == ':'):\n                print(stdin[i-1])\n                res = max(res,len(stdin[i+1:]))\n            if(stdin[i+1] == ':'):\n                print(stdin[i+1])\n                res = max(res,len(stdin[i+2:]))\n    if(stdin[0] == ':'):\n        print(stdin[0])\n        res = max(res,len(stdin[1:]))\n    if(stdin[len(stdin)-1] == ':'):\n        print(stdin[len(stdin)-1])\n        res = max(res,len(stdin[:len(stdin)-1]))\n    return res"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length <= 1:\n        return length\n    else:\n        final_output = 0\n        rem_count = 1\n        for i in range(1, length):\n            if stdin[i] == \":\":\n                final_output += rem_count\n                rem_count = 1\n            else:\n                rem_count += 1\n        if rem_count > 1:\n            final_output += rem_count\n        if final_output < length:\n            return -1\n        else:\n            return final_output\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    stack = []\n    while len(S) > 0:\n        if S[0] == '|':\n            stack.append(S[0])\n            S = S[1:]\n        elif len(stack) > 0 and S[0] == ':':\n            stack.append(S[0])\n            S = S[1:]\n        elif len(stack) == 0:\n            return -1\n        else:\n            stack.pop()\n            S = S[1:]\n    return len(stack)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin\n  return max(len(s) - s.count(':') - s.count('|') - s.count('[') - s.count(']'), -1)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if \":|:\" in s:\n        return -1\n    if not s:\n        return 0\n    # we have an open bracket, remove it\n    return max(s.count(\"|\"), s.count(\":\")) + 2\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    open_bracket = 1\n    closed_bracket = 0\n    for i in stdin:\n        if i == ':':\n            open_bracket += 1\n        if i == ']':\n            closed_bracket += 1\n        if open_bracket == closed_bracket:\n            ans += i\n            closed_bracket = 0\n    return len(ans)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = str(a)\n    k = []\n    k.append(int(b[0]))\n    for i in range(1, len(b)):\n        k.append(int(b[i]))\n    k = sum(k)\n    for i in range(1, len(b)):\n        if int(b[i]) > k:\n            k = int(b[i])\n    for i in range(len(b)):\n        if a > k:\n            a = a - k\n            break\n    print(a)\n\nsolution(input())\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    list_num = list(map(int, stdin.split()))\n    max_num = 0\n    for num in list_num:\n        if num >= max_num:\n            max_num = num\n    res = max_num\n    for num in list_num:\n        if res < num < max_num:\n            res = num\n    return str(res)"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(1, n + 1):\n        a.append(str(i))\n    for i in range(1, n + 1):\n        s = 0\n        c = 0\n        for j in a:\n            s = s + int(j)\n            if c <= s:\n                c = s\n                break\n    return str(c)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    n = int(numbers[0])\n    max_sum = 0\n    max_num = 0\n    max_sum_num = 0\n    for i in range(n):\n        cur_sum = 0\n        cur_num = int(numbers[i])\n        if cur_num <= n:\n            cur_sum += cur_num\n            if cur_num == 0:\n                continue\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                max_num = cur_num\n                max_sum_num = cur_sum + cur_num\n            elif cur_sum == max_sum and cur_num > max_num:\n                max_sum = cur_sum\n                max_num = cur_num\n                max_sum_num = cur_sum + cur_num\n        else:\n            break\n    return str(max_sum_num)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_digit = 0\n    max_value = 0\n    temp = 0\n    i = 1\n    while i <= x:\n        if temp == 0:\n            temp = i\n        if temp > max_digit:\n            max_digit = temp\n            max_value = i\n        temp += i\n        i += 1\n    if max_value == 0:\n        return str(max_digit)\n    else:\n        return str(max_value)\nprint(solution(input()))\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = int(stdin)\n    while x > 9:\n        x //= 10\n    return str(x)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_sum = 0\n    n = 0\n    for i in range(len(stdin)):\n        curr = stdin[i]\n        while curr!= \"0\":\n            curr = int(curr)\n            if max_sum < curr:\n                max_sum = curr\n                n = i\n            break\n    return stdin[n]"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def digit_sum(n):\n        return sum(int(x) for x in str(n))\n    max_sum = 0\n    n = 1\n    while n <= 10**18:\n        if digit_sum(n) > max_sum:\n            max_sum = digit_sum(n)\n        n += 1\n    return str(n-1)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    maximum_sum = 0\n    current_sum = 0\n    answer = 0\n    for i in range(1, n+1):\n        current_sum += i\n        if current_sum > maximum_sum:\n            maximum_sum = current_sum\n            answer = i\n    return str(answer)"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    x = int(stdin[0])\n    max_digits = 0\n    max_number = 0\n    if x < 1:\n        return \"0\"\n    for i in range(1, 10):\n        sum_digits = 0\n        for j in str(i):\n            sum_digits += int(j)\n        if max_digits < sum_digits:\n            max_digits = sum_digits\n            max_number = i\n    return str(max_number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = 0\n    if '.' in stdin:\n        return 'N/A'\n    for i in stdin:\n        m += int(i)\n    if m == 0:\n        return 'N/A'\n    m = str(m)\n    n = len(m)\n    while '0' in m:\n        m = m.replace('0', '', 1)\n    for i in range(n):\n        if m[i]!= '0' and m[i]!= '.':\n            return m[i]\n    return 'N/A'\n\nprint(solution(input()))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin) + 1)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    i = 1\n    while True:\n        i += 1\n        if str(i).count('0') <= 1:\n            return str(i - 1)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for year in range(stdin):\n        if int(stdin) % 4 == 0:\n            if len(str(stdin)) >= 4:\n                return str(stdin)\n        else:\n            if len(str(stdin)) >= 5:\n                return str(stdin)\n    return '0'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cur_year = int(stdin)\n    while True:\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1\n        else:\n            cur_year += 1\n        if cur_year % 4 == 0:\n            if cur_year % 100 == 0:\n                if cur_year % 400 == 0:\n                    cur_year += 1\n                else:\n                    cur_year += 100\n            else:\n                cur_year += 1"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    count = 0\n    while year < 5000:\n        year = year + 1\n        if str(year).count('0') == 0:\n            count = count + 1\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    res = 0\n    while year >= 1000:\n        res += 1\n        year -= 1\n    return str(res)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    current_year = int(stdin)\n    year = current_year + 1\n    while True:\n        if str(year)[len(str(year)) - 1]!= \"0\":\n            break\n        year += 1\n\n    return str(year - current_year)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    year = int(stdin.pop(0))\n    counter = 1\n    while counter!= year:\n        if year % 4 == 0:\n            if year % 100 == 0 and year % 400!= 0:\n                year += 1\n            else:\n                year += 2\n        elif year % 100 == 0:\n            year += 1\n        else:\n            year += 2\n\n        counter += 1\n    return str(year)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    s = str(year)\n    while int(s[1:])!= year:\n        s = str(year - 1) + s[1:]\n        year = year - 1\n    return year - 1\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, q = map(int, stdin[0].split())\n    painters = []\n    for i in range(1, q + 1):\n        painters.append(list(map(int, stdin[i].split())))\n\n    return str(max([x for x in range(n + 1)], key=lambda x: min(x, painters[0][1]) - max(x, painters[0][0]) + 1))\n\n\nprint(solution(\"\"\"\n3 4\n1 4\n2 3\n3 4\n\"\"\".strip()))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    a = sorted(list(map(int, stdin.split())))\n    min = a[0]\n    max = a[n - 1]\n    mid = (max - min) // 2 + min\n    res = 0\n    for i in range(q):\n        l, r = list(map(int, stdin.split()))\n        if l >= mid:\n            res += r - l\n    return str(res)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    painters = sorted([list(map(int, stdin.split())) for _ in range(q)])\n    dp = [[0] * (n + 1) for _ in range(q)]\n    for i in range(q):\n        for j in range(n):\n            dp[i][j + 1] = max(dp[i][j], dp[i][j + 1])\n            dp[i][j] = dp[i][j] + 1\n            if j - painters[i][0] >= 0:\n                dp[i][j - painters[i][0]] = max(dp[i][j - painters[i][0]], dp[i][j])\n            if j + painters[i][1] <= n:\n                dp[i][j + painters[i][1]] = max(dp[i][j + painters[i][1]], dp[i][j])\n    print(max([max(i) for i in dp]))"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(i) for i in stdin.split('\\n')[0].split()]\n    q = int(stdin.split('\\n')[1])\n    n = int(stdin.split('\\n')[2])\n    s = [[] for _ in range(q)]\n    for i in range(q):\n        l, r = [int(i) for i in stdin.split('\\n')[i + 3].split()]\n        s[i] = [l, r]\n    return str(max([x for l, r in s]))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = (int(x) for x in stdin.split())\n    sections = [[] for _ in range(n + 1)]\n    for i in range(q):\n        l, r = (int(x) for x in stdin.split())\n        sections[l].append(r)\n        sections[r].append(l)\n    painted = []\n    for i in range(n, 0, -1):\n        if not painted or painted[-1] > sections[i]:\n            painted.append(sections[i])\n    return len(painted)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    output = 0\n    if q == n:\n        output = n\n    else:\n        l = []\n        r = []\n        for i in range(q):\n            s, e = list(map(int, stdin.split()))\n            l.append(s)\n            r.append(e)\n        l.sort()\n        r.sort()\n        i = 0\n        j = q - 2\n        for x in range(n):\n            if l[i] <= x <= r[j]:\n                output = max(output, x - l[i] + 1)\n                i += 1\n                j -= 1\n    return str(output)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    painters = sorted(list(map(int, stdin.split())))\n    q -= 2\n    optimal = 0\n    total = 0\n    for i in range(q):\n        l = painters[i]\n        r = painters[i + 1]\n        total += r - l\n        if total >= optimal:\n            optimal = total\n    return optimal"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    painter_hired = []\n    for _ in range(q):\n        painter_hired.append(list(map(int, stdin.split())))\n    #print(painter_hired)\n    painters = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(len(painter_hired)):\n        painters[painter_hired[i][0]][painter_hired[i][1]] = 1\n    #print(painters)\n    cnt = 0\n    for i in range(1, len(painters)):\n        for j in range(1, len(painters)):\n            if painters[i][j] == 1:\n                cnt += 1\n    return str(cnt)"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, q = list(map(int, stdin[0].split()))\n    painters = []\n    for i in range(1, q + 1):\n        painters.append([int(x) for x in stdin[i].split()])\n    # print(painters)\n    d = {}\n    res = 0\n    for i in range(1, q + 1):\n        for j in range(painters[i - 1][0], painters[i - 1][1] + 1):\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    # print(d)\n    for i in d:\n        if d[i] > 0:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    sections = sorted(list(map(int, stdin.strip().split())))\n    # print(sections)\n\n    count = 0\n    for i in range(len(sections) - 1):\n        if sections[i + 1] >= sections[i] + 1:\n            count += 1\n\n    # print(count)\n    return str(count)"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: str = \"4 23\"\n    stdin = list(stdin.split())\n    hh, mm = map(int, stdin[1].split(\":\"))\n    print(\"{}\".format(int(stdin[0]) * (hh + mm - 23) // 60) if (hh + mm - 23) // 60!= 0 else 0)\n    # print(solution(\"4 23\"))\n    return\nsolution(\"5 1\")"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.strip().split())\n    hh = hh % 24\n    if hh == 0:\n        hh = 24\n    while True:\n        if '7' not in f\"{hh}:{mm // 60}\":\n            if hh == 0:\n                hh = 24\n            else:\n                hh -= 1\n        else:\n            break\n    if hh == 0:\n        return \"0\"\n    hh = hh - 1\n    mm = mm - 60 * hh\n    return f\"{hh}:{mm // 60}:{mm % 60}\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, _, hour, minute = stdin.split(\" \")\n    if int(hour) % 2 == 1:\n        hour = int(hour) + 1\n    return str(int(minute) - int(hour) * 2)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    alarm_time = stdin\n    h, m = int(alarm_time[0:2]), int(alarm_time[3:5])\n    expected_time = h * 60 + m\n    alarm_set_time = expected_time\n    while True:\n        if expected_time == alarm_set_time:\n            break\n        alarm_set_time = expected_time + (h + (h + (m - expected_time)) / 60)\n        expected_time = alarm_set_time\n    return str(alarm_set_time - expected_time)"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    hh = h * 60\n    mm = m * 60\n    while True:\n        if hh % mm == 0:\n            hh = hh % mm\n            if '7' in str(hh):\n                return str(hh // 60)\n        hh += 1\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split()\n    hh = int(hh)\n    mm = int(mm)\n    if (hh * mm) % 2 == 1:\n        return -1\n    hh1, mm1 = (hh + 1) % 24, mm\n    hh2, mm2 = hh, (mm + 1) % 60\n    hh3, mm3 = (hh + 1) % 24, mm - (mm + 1) % 60\n    hh4, mm4 = (hh + 1) % 24, mm - mm1 % 60\n    hh5, mm5 = (hh + 1) % 24, mm + mm1 % 60\n    hh6, mm6 = (hh + 1) % 24, mm + mm2 % 60\n    hh7, mm7 = (hh + 1) % 24, mm - (mm + 1) % 60\n    hh8, mm8 = (hh + 1) % 24, mm - mm1 % 60\n    hh9, mm9 = (hh + 1) % 24, mm + mm1 % 60\n    hh10, mm10 = (hh + 1) % 24, mm + mm2 % 60\n    hh11, mm11 = (hh + 1) % 24, mm + mm3 % 60\n    hh12, mm12 = (hh + 1) % 24, mm + mm4 % 60\n    hh13, mm13 = (hh + 1) % 24, mm + mm5 % 60\n    hh14, mm14 = (hh + 1) % 24, mm + mm6 % 60\n    hh15, mm15 = (hh + 1) % 24, mm + mm7 % 60\n    hh16, mm16 = (hh + 1) % 24, mm + mm8 % 60\n    hh17, mm17 = (hh + 1) % 24, mm + mm9 % 60\n    hh18, mm18 = (hh + 1) % 24, mm + mm10 % 60\n    hh19, mm19 = (hh + 1) % 24, mm + mm11 % 60\n    hh20, mm20 = (hh + 1) % 24, mm + mm12 % 60\n    hh21, mm21 = (hh + 1) % 24, mm + mm13 % 60\n    hh22, mm22 = (hh + 1) % 24, mm + mm14 % 60\n    hh23, mm23 = (hh + 1) % 24, mm + mm15 % 60\n    hh24, mm24 = (hh + 1) % 24, mm + mm16 % 60\n    hh25, mm25 = (hh + 1) % 24, mm + mm17 % 60\n    hh26, mm26 = (hh + 1) % 24, mm + mm18 % 60\n    hh27, mm27 = (hh + 1) % 24, mm + mm19 % 60\n    hh28, mm28 = (hh + 1) % 24, mm + mm20 % 60\n    hh29, mm29 = (hh + 1) % 24, mm + mm21 % 60\n    hh30, mm30 = (hh + 1) % 24, mm + mm22 % 60\n    hh31, mm31 = (hh + 1) % 24, mm + mm23 % 60\n    hh32, mm32 = (hh + 1) % 24, mm + mm24 % 60\n    hh33, mm33 = (hh + 1) % 24, mm + mm25 % 60\n    hh34, mm34 = (hh + 1) % 24, mm + mm26 % 60\n    hh35, mm35 = (hh + 1) % 24, mm + mm27 % 60\n    hh36, mm36 = (hh + 1) % 24, mm + mm28 % 60\n    hh37, mm37 = (hh + 1) % 24, mm + mm29 % 60\n    hh38, mm38 = (hh + 1) % 24, mm + mm30 % 60\n    hh39, mm39 = (hh + 1) % 24, mm + mm31 % 60\n    hh40, mm40 = (hh + 1) % 24, mm + mm32 % 60\n    hh41, mm41 = (hh + 1) % 24, mm + mm33 % 60\n    hh42, mm42 = (hh + 1) % 24, mm + mm34 % 60\n    hh43, mm43 = (hh + 1) % 24, mm + mm35 % 60\n    hh44, mm44 = (hh + 1) % 24, mm + mm36 % 60\n    hh45, mm45 = (hh + 1) % 24, mm + mm37 % 60\n    hh46, mm46 = (hh + 1) % 24, mm + mm38 % 60\n    hh47, mm47 = (hh + 1) % 24, mm + mm39 % 60\n    hh48, mm48 = (hh + 1) % 24, mm + mm40 % 60\n    hh49, mm49 = (hh + 1) % 24, mm + mm41 % 60\n    hh50, mm50 = (hh + 1) % 24, mm + mm42 % 60\n    hh51, mm51 = (hh + 1) % 24, mm + mm43 % 60\n    hh52, mm52 = (hh + 1) % 24, mm + mm44 % 60\n    hh53, mm53 = (hh + 1) % 24, mm + mm45 % 60\n    hh54, mm54 = (hh + 1) % 24, mm + mm46 % 60\n    hh55, mm55 = (hh + 1) % 24, mm + mm47 % 60\n    hh56, mm56 = (hh + 1) % 24, mm + mm48 % 60\n    hh57, mm57 = (hh + 1) % 24, mm + mm49 % 60\n    hh58, mm58 = (hh + 1) % 24, mm + mm50 % 60\n    hh59, mm59 = (hh + 1) % 24, mm + mm51 % 60\n    hh60, mm60 = (hh + 1) % 24, mm + mm52 % 60\n    hh61, mm61 = (hh + 1) % 24, mm + mm53 % 60\n    hh62, mm62 = (hh + 1) % 24, mm + mm54 % 60\n    hh63, mm63 = (hh + 1) % 24, mm + mm55 % 60\n    hh64, mm64 = (hh + 1) % 24, mm + mm56 % 60\n    hh65, mm65 = (hh + 1) % 24, mm + mm57 % 60\n    hh66, mm66 = (hh + 1) % 24, mm + mm58 % 60\n    hh67, mm67 = (hh + 1) % 24, mm + mm59 % 60\n    hh68, mm68 = (hh + 1) % 24, mm + mm60 % 60\n    hh69, mm69 = (hh + 1) % 24, mm + mm61 % 60\n    hh70, mm70 = (hh + 1) % 24, mm + mm62 % 60\n    hh71, mm71 = (hh + 1) % 24, mm + mm63 % 60\n    hh72, mm72 = ("
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    # hh, mm = stdin[0].split(':')\n    hh, mm = stdin[1].split(':')\n    hh = int(hh)\n    mm = int(mm)\n    # hh = int(hh)\n    # mm = int(mm)\n    # hh = int(stdin[0])\n    # mm = int(stdin[1])\n    if mm < 7:\n        print('0')\n    elif (hh * 60 + mm) % 60 == 7:\n        print('0')\n    else:\n        while (hh * 60 + mm) % 60!= 7:\n            hh = hh + 1\n        print(hh)\n\nsolution('''\n1 23\n''')\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_time(time):\n        # check for lucky time\n        if time.count('7') == 0:\n            return False\n        time = time.replace('7', '0')\n        if int(time) < 0:\n            return False\n        time = time.split(':')\n        for i in time:\n            if i == '00' or int(i) > 59:\n                return False\n        return True\n\n    # convert time to seconds\n    def time_to_seconds(time):\n        time = time.split(':')\n        hour, minute = time\n        sec = 60 * 60 * int(hour) + 60 * int(minute)\n        return sec\n\n    # convert time to minutes\n    def time_to_minutes(time):\n        time = time.split(':')\n        hour, minute = time\n        sec = 60 * int(hour) + int(minute)\n        return sec\n\n    s = stdin\n    time = s.split(' ')\n    hh, mm = time\n    hh = hh.split(':')\n    mm = mm.split(':')\n\n    minutes = time_to_minutes(hh + mm)\n    seconds = time_to_seconds(hh + mm)\n    total_minutes = minutes\n    seconds = seconds - total_minutes\n    n = 1\n    while True:\n        if seconds <= 0:\n            seconds = seconds + total_minutes * n\n            n += 1\n        else:\n            break\n    if check_time(hh + mm):\n        return str(n - 1)\n    else:\n        return str(n)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    l = 0\n    u = (h * 60) + m\n    while l < u:\n        m = l\n        if (h * 60) + m == u:\n            return str(l)\n        if (h * 60) + m < u:\n            h += 1\n            m = (h * 60) + m\n            l = m\n    return str(l)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_split = stdin.split('\\n')\n    h, m = stdin_split[1].split(' ')\n    h, m = int(h), int(m)\n    print(h, m)\n    h = int(h)\n    m = int(m)\n    cnt = 0\n    if h % 2 == 0:\n        if (h - m + 1) % 60 == 0:\n            if h == m:\n                h = h - 1\n            cnt = (h - m) // 60 + 1\n        else:\n            if h > m:\n                cnt = (h - m) // 60 + 1\n                if (h - m) % 60 == 0:\n                    cnt = cnt - 1\n            else:\n                cnt = (h - m) // 60 + 1\n    else:\n        if (h - m + 1) % 60 == 0:\n            cnt = (h - m) // 60 + 1\n        else:\n            if h > m:\n                cnt = (h - m) // 60 + 1\n                if (h - m) % 60 == 0:\n                    cnt = cnt - 1\n            else:\n                cnt = (h - m) // 60 + 1\n    print(cnt)\n    return cnt\n\nsolution('3\\n11 23')\nsolution('5\\n01 07')\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = list(map(int, stdin.split()))\n    tabs = range(1, n+1)\n    tabs_r = range(max(r, l), n+1)\n    tabs_l = range(min(l, r), n+1)\n    if (pos in tabs_l) or (pos in tabs_r):\n        return 0\n    else:\n        curr_tab = pos\n        l_cnt, r_cnt = 0, 0\n        for tab in tabs:\n            if tab <= curr_tab:\n                l_cnt += 1\n        for tab in tabs_r:\n            if tab > curr_tab:\n                r_cnt += 1\n        return min(l_cnt, r_cnt)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n, pos, l, r = map(int, stdin.split())\n    if x == 1:\n        return str(x)\n    m = max(l, 1)\n    d = abs(min(r, n) - 1)\n    return str(max(m, min(d, pos)))\n\nstdin = input()\nprint(solution(stdin))\n\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    max_l = max(pos, 1)\n    min_r = min(n, max_l + 1)\n    max_l = max(l, 1)\n    min_r = min(r, n)\n    res = 0\n    while max_l < min_r:\n        if (l < max_l and r > min_r) or (l > max_l and r < min_r):\n            res += 1\n        max_l += 1\n        min_r -= 1\n    return str(res)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, pos, l, r = stdin.split()\n    n, pos, l, r = int(n), int(pos), int(l), int(r)\n    b = max(l, n - l - 1)\n    a = min(r, n - r)\n    return str(n - a - b + 1)\nprint(solution(input()))"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, pos, l, r = map(int, stdin[:4])\n    s = 0\n    for i in range(1, n + 1):\n        if i == pos:\n            s = max(s, r - l)\n        else:\n            s = max(s, i - l)\n            s = max(s, r - i)\n    return str(s)"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n>>> solution()\n'5'\n'''\n    _, n, pos, l, r = (int(x) for x in stdin.split())\n    if r >= n:\n        return '0'\n    if l >= r:\n        return '1'\n    t = r-l\n    if l > 0:\n        if pos - 1 == l:\n            return '1'\n        else:\n            return str(int(max(1, pos - 1)) - l) + '-' + str(r) + '-' + str(int(min(pos + 1, r)) - l) + '=0'\n    else:\n        if pos + 1 == r:\n            return '1'\n        else:\n            return str(max(1, r - pos - 1)) + '-' + str(r) + '-' + str(min(pos + 1, r)) + '=0'\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, _, l, r = map(int, stdin.split())\n    if r == l + 1:\n        return str(r - l)\n    else:\n        l = 1\n        r = r - l\n        while l <= r:\n            if r < l:\n                break\n            l = l + 1\n            r = r - 1\n        return str(r - l + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    return f\"{min(r - pos - 1, r - l + 1)}\"\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    if pos == r:\n        return 0\n    a = max(pos - 1, l)\n    b = min(pos + 1, r)\n    for i in range(a, b + 1):\n        if i == pos:\n            continue\n        elif (l <= i <= r):\n            return 0\n    return r - l + 1\n\nstdin = \"\"\"5 2 3 4\n\"\"\"\nprint(solution(stdin))\nstdin = \"\"\"5 1 1 5\n\"\"\"\nprint(solution(stdin))\nstdin = \"\"\"1 2 2 2\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n, pos, l, r = list(map(int, stdin[0].split()))\n    tabs = list(range(1, n + 1))\n    tabs = tabs[: pos - 1] + tabs[pos - 1 + n:]\n\n    for i in range(r, l - 1, -1):\n        if i < l or i > r:\n            tabs = tabs[: i] + tabs[i + 1:]\n\n    return len(tabs)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, x = map(int, stdin.split())\n        d, h = map(int, stdin.split())\n        if x <= d:\n            print(n - d)\n        else:\n            print(-1)\n    return ''\n\nsolution('''\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''')"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, x = list(map(int, stdin.split()[i * 2 + 1].split(\" \")))\n        d, h = list(map(int, stdin.split()[i * 2 + 2].split(\" \")))\n        if h > n:\n            print(-1)\n        else:\n            print(h - d)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, y = map(int, stdin.split())\n        curX = x\n        res = 0\n        head = y\n        while curX > 0 and head > 0:\n            blow = head - min(curX, head)\n            if blow > 0:\n                curX -= blow\n            else:\n                curX = 0\n                break\n            head = blow\n            res += 1\n        if curX > 0:\n            head = y\n            while curX > 0 and head > 0:\n                blow = curX - min(curX, head)\n                if blow > 0:\n                    curX -= blow\n                    head -= blow\n                else:\n                    curX = 0\n                    break\n                res += 1\n        print(res)\n    return ''"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(solution_inner(stdin))\ndef"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    t = int(stdin)\n\n    for _ in range(t):\n        n, x = map(int, stdin.split())\n        types = []\n        for i in range(n):\n            d, h = map(int, stdin.split())\n            types.append((d, h))\n        types.sort(key=lambda x: x[0])\n        curX = x\n        result = 0\n        for i in range(n):\n            if curX == 0:\n                break\n            d = types[i][0]\n            curX -= min(d, curX)\n            curX = max(0, curX)\n            result = max(result, curX)\n        if curX == 0:\n            print(result)\n        else:\n            print(-1)\n    return\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(t * n)\n    Space complexity: O(1)\n    \"\"\"\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    x = int(stdin.split()[2])\n    for _ in range(t):\n        k = list(map(int, stdin.split()[3:]))\n        curX = x\n        for i in range(len(k)):\n            if curX < 0:\n                break\n            if k[i] > 0:\n                min_size = min(k[i], curX)\n                curX -= min_size\n            else:\n                curX = max(k[i], curX)\n        if curX == 0:\n            return '-1'\n    return str(curX)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = (int(i) for i in stdin.split())\n    queries = [([int(i) for i in stdin.split()[i * 2 + 1].split()] + [int(stdin.split()[i * 2 + 2])]) for i in range(n)]\n    is_defeated = False\n    min_blows = float('inf')\n    for q in queries:\n        curX = x\n        for d, h in q:\n            if curX <= 0:\n                is_defeated = True\n                break\n            curX = max(curX - d, 0)\n            min_blows = min(min_blows, curX + h)\n        if is_defeated:\n            break\n    if is_defeated:\n        return -1\n    else:\n        return min_blows\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def give_h(x, d):\n        return min(d, x)\n\n    lines = stdin.strip().split()\n    assert len(lines) == 1\n    t = int(lines[0])\n    for _ in range(t):\n        n, x = map(int, stdin.strip().split())\n        b1, b2, b3 = [int(e) for e in stdin.strip().split()]\n        b1 = (b1, give_h(x, b1))\n        b2 = (b2, give_h(x, b2))\n        b3 = (b3, give_h(x, b3))\n        print(min(b1[1], b2[1], b3[1]))\n    return \"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        x, n, *d, h = [int(x) for x in stdin.split()]\n        if n == 1:\n            if x <= h:\n                print(1)\n            else:\n                print(0)\n        else:\n            if min(d) + x <= h:\n                print(min(d) + x)\n            else:\n                print(-1)\n    return ''"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    arr = []\n    for _ in range(n):\n        arr.append(int(input()))\n    for i in range(1, n+1):\n        for j in range(i):\n            if i-j > m:\n                m = i-j\n                break\n    return str(m)\n\n\nprint(solution(input()))"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if m % n == 0:\n        return str(n - 1)\n    return str(n)"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    res = 0\n    while n > 0:\n        n -= m\n        n += m\n        m += m\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    # n == 1 and m == 1\n    if n == 1:\n        return \"1\"\n    i = 1\n    while n > i:\n        n -= i\n        i += 1\n    return str(i - 1)"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    return str(n-1)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n - (n % m) + (m if n % m == 0 else 1))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = 0\n    for i in range(1, n + 1):\n        if i % m == 0:\n            x += 1\n    return str(x)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(i, j):\n        q = []\n        visited = set()\n        q.append((i, j))\n        while q:\n            i, j = q.pop(0)\n            visited.add((i, j))\n            for x, y in ((i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)):\n                if 0 <= x < m and 0 <= y < n and (x, y) not in visited:\n                    if graph[x][y] > 0:\n                        q.append((x, y))\n                        graph[x][y] -= 1\n        return len(visited)\n\n    n, m = list(map(int, stdin.split()))\n    graph = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                graph[i][j] = 1\n            else:\n                graph[i][j] = graph[i - 1][j] + graph[i][j - 1]\n    return str(bfs(0, 0))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n+1)"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for i in range(m):\n        if n % i == 0:\n            print(n // i, end=' ')\n    return str(n // m)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h = stdin.split()\n    count = 0\n    for i in h:\n        if i[1] =='m':\n            count += 1\n    return count\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    tiles = stdin.split()\n    suits = {'m': 1, 'p': 2,'s': 3}\n    count = 0\n    for tile in tiles:\n        suit, number = tile[0], int(tile[1])\n        if number in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            if suit in suits:\n                count += 1\n            else:\n                raise Exception('Unknown suit!')\n    return str(count)"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split()\n    suit = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    for tile in tiles:\n        suit[tile[1]] += 1\n    result = 0\n    for i in range(1, 10):\n        result += suit[i]\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    tiles = stdin.split()\n    \n    tiles_len = len(tiles)\n    suits ='mnps'\n    suits_len = len(suits)\n    \n    # check for a mentsu\n    if tiles_len >= 2 and tiles[0][0] == tiles[1][0] =='m':\n        m_idx = 0\n        m_idx_len = 1\n        # check if the mentsu is the first one\n        if tiles[0] == '1m':\n            m_idx = 0\n            m_idx_len = 1\n        else:\n            m_idx = 1\n            m_idx_len = 2\n            \n        if tiles[1][m_idx_len-1] == tiles[1][m_idx_len]:\n            # check if the mentsu is the first one\n            if tiles[1][m_idx_len-1] == '1':\n                return '0'\n            else:\n                return '1'\n        else:\n            return '0'\n        \n    # check for a koutsu\n    if tiles_len >= 3 and tiles[0][0] == tiles[2][0] == 'k':\n        k_idx = 0\n        k_idx_len = 1\n        # check if the koutsu is the first one\n        if tiles[0] == '1k':\n            k_idx = 0\n            k_idx_len = 1\n        else:\n            k_idx = 1\n            k_idx_len = 2\n            \n        if tiles[2][k_idx_len-1] == tiles[2][k_idx_len]:\n            # check if the koutsu is the first one\n            if tiles[2][k_idx_len-1] == '1':\n                return '0'\n            else:\n                return '1'\n        else:\n            return '0'\n    \n    # check for a sequence\n    if tiles_len >= 3 and tiles[1][0] == tiles[2][0] =='s':\n        s_idx = 0\n        s_idx_len = 1\n        # check if the sequence is the first one\n        if tiles[1] == '1s':\n            s_idx = 0\n            s_idx_len = 1\n        else:\n            s_idx = 1\n            s_idx_len = 2\n            \n        if tiles[2][s_idx_len-1] == tiles[2][s_idx_len]:\n            # check if the sequence is the first one\n            if tiles[2][s_idx_len-1] == '1':\n                return '0'\n            else:\n                return '1'\n        else:\n            return '0'\n    \n    # check for a single tile\n    if tiles_len == 1:\n        if tiles[0][0] =='m' or tiles[0][0] == 'p' or tiles[0][0] =='s':\n            return '0'\n        else:\n            return '1'\n    \n    # check for a group of three tiles\n    if tiles_len == 3:\n        if tiles[0][0] =='m' and tiles[1][0] =='m' and tiles[2][0] =='m':\n            return '0'\n        elif tiles[0][0] =='m' and tiles[1][0] == 'p' and tiles[2][0] == 'p':\n            return '0'\n        elif tiles[0][0] =='m' and tiles[1][0] =='s' and tiles[2][0] =='s':\n            return '0'\n        elif tiles[0][0] == 'p' and tiles[1][0] == 'p' and tiles[2][0] == 'p':\n            return '0'\n        elif tiles[0][0] == 'p' and tiles[1][0] =='s' and tiles[2][0] =='s':\n            return '0'\n        elif tiles[0][0] =='s' and tiles[1][0] =='s' and tiles[2][0] =='s':\n            return '0'\n        else:\n            return '1'\n    \n    # check for a group of four tiles\n    if tiles_len == 4:\n        if tiles[0][0] =='m' and tiles[1][0] =='m' and tiles[2][0] =='m' and tiles[3][0] =='m':\n            return '0'\n        elif tiles[0][0] =='m' and tiles[1][0] == 'p' and tiles[2][0] == 'p' and tiles[3][0] == 'p':\n            return '0'\n        elif tiles[0][0] =='m' and tiles[1][0] =='s' and tiles[2][0] =='s' and"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    suits = []\n    for line in stdin:\n        suits.append(line)\n    # print(suits)\n    n = len(suits)\n    suits = suits[0]\n    suits = suits.split()\n    # print(suits)\n    n = len(suits)\n    suited = 0\n    for i in range(1, 9):\n        suited += suits.count(str(i))\n    # print(suited)\n    # print(n)\n    suited += suits.count(\"m\")\n    suited += suits.count(\"p\")\n    suited += suits.count(\"s\")\n    # print(suited)\n    if suited < n:\n        return str(n - suited)\n    else:\n        return str(0)\n\n\ndef"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hand = []\n    for s in stdin.split():\n        hand.append(tuple(int(n) for n in s))\n    hand = tuple(hand)\n    result = 0\n    while hand and max(hand) > 9:\n        result += 1\n        last = hand[-1]\n        if last >= 4:\n            hand = hand[:-1] + (last - 4,)\n        else:\n            hand = hand[:-1]\n    return str(result)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ninput_list = stdin.strip().split('\\n')\nmy_tiles = input_list[0]\nopp_tiles = input_list[1]\nmy_tiles = my_tiles.strip().split(' ')\nopp_tiles = opp_tiles.strip().split(' ')\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    def is_valid(a, x, y, cnt_l, cnt_r, cnt_t, cnt_b):\n        if x == 0 and y == 0:\n            return True\n        if x < 0 or x > n-1 or y < 0 or y > m-1:\n            return False\n        if a[x][y] == 1:\n            if cnt_l == 0 or cnt_r == 0 or cnt_t == 0 or cnt_b == 0:\n                return True\n            else:\n                return False\n        if a[x][y] == 0:\n            if cnt_l!= 0 and cnt_r!= 0 and cnt_t!= 0 and cnt_b!= 0:\n                return True\n            else:\n                return False\n\n    res = []\n    for i in range(n):\n        for j in range(m):\n            for l in range(n):\n                for r in range(m):\n                    for t in range(n):\n                        for b in range(m):\n                            if is_valid(a, i, j, l, r, t, b):\n                                res.append([i, j, l, r, t, b])\n    res = sorted(res, key=lambda x: x[0])\n    if len(res)!= 0:\n        for x in res:\n            print(x[1], x[2], x[3], x[4], x[5])\n        return str(res[-1][1])\n    return \"-1\""
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = [int(x) for x in stdin.split()]\n    storehouse = []\n    for _ in range(d):\n        storehouse.append([int(x) for x in stdin.split()])\n\n    for i in range(len(storehouse)):\n        left_sofa = 0\n        right_sofa = 0\n        top_sofa = 0\n        bottom_sofa = 0\n        for j in range(len(storehouse[i])):\n            if j < len(storehouse[i]) - 1:\n                if storehouse[i][j] == storehouse[i][j + 1]:\n                    left_sofa += 1\n            if j > 0:\n                if storehouse[i][j] == storehouse[i][j - 1]:\n                    right_sofa += 1\n            if i < len(storehouse) - 1:\n                if storehouse[i][j] == storehouse[i + 1][j]:\n                    top_sofa += 1\n            if i > 0:\n                if storehouse[i][j] == storehouse[i - 1][j]:\n                    bottom_sofa += 1\n\n        if left_sofa == 2 and right_sofa == 2 and top_sofa == 2 and bottom_sofa == 2:\n            return str(i + 1)\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    sofas = [(x, y) for x, y in zip(map(int, stdin.strip().split()[1::2]), map(int, stdin.strip().split()[2::2]))]\n    return \"1\" if any(sofa == (0, 0, 0, 0) for sofa in sofas) else \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    storehouse = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    notes = [[0, 0, 0, 0] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            storehouse[i][j] = i * j\n            notes[i][j] = {\n                \"left\": storehouse[i][j - 1]!= 0,\n                \"top\": storehouse[i - 1][j]!= 0,\n                \"right\": storehouse[i][j + 1]!= 0,\n                \"bottom\": storehouse[i + 1][j]!= 0\n            }\n    counter = 1\n    for _ in range(n):\n        counter_of_left = 0\n        counter_of_right = 0\n        counter_of_top = 0\n        counter_of_bottom = 0\n\n        for i in range(1, n+1):\n            if notes[i][counter][\"left\"] == True and notes[i-1][counter][\"left\"] == True:\n                counter_of_left += 1\n            if notes[i][counter][\"right\"] == True and notes[i-1][counter][\"right\"] == True:\n                counter_of_right += 1\n            if notes[i][counter][\"top\"] == True and notes[i-1][counter][\"top\"] == True:\n                counter_of_top += 1\n            if notes[i][counter][\"bottom\"] == True and notes[i-1][counter][\"bottom\"] == True:\n                counter_of_bottom += 1\n\n        if counter_of_left == counter and counter_of_right == counter and counter_of_top == counter and counter_of_bottom == counter:\n            return str(counter)\n\n        counter += 1\n    return \"-\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sofas = [[] for _ in range(n + 1)]\n    for i in range(n):\n        x, y = map(int, input().split())\n        sofas[i + 1].append((x, y))\n    for l in range(n + 1):\n        for r in range(n + 1):\n            for t in range(m + 1):\n                for b in range(m + 1):\n                    if (r - l) % 2 == 0:\n                        if (t - b) % 2 == 0:\n                            if sofas[l][0] == sofas[r][0] and sofas[l][1] == sofas[r][1]:\n                                return str(l)\n                    else:\n                        if (t - b) % 2 == 0:\n                            if sofas[l][0] == sofas[r][0] and sofas[l][1] == sofas[r][1]:\n                                return str(l)\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    n, m = list(map(int, stdin.split()))\n    sofas = []\n    for _ in range(d):\n        x, y = list(map(int, stdin.split()))\n        sofas.append((x, y))\n\n    # Check conditions\n    def check(x1, x2, y1, y2):\n        return (\n            (x1 < x2 and y1 < y2)\n            or (x1 > x2 and y1 > y2)\n            or (x1 == x2 and y1 == y2)\n        )\n\n    for i in range(d):\n        for j in range(i + 1, d):\n            if check(sofas[i][0], sofas[i][1], sofas[j][0], sofas[j][1]):\n                return str(i + 1)\n    return \"-\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, m = map(int, data[0:2])\n    sofs = list(map(lambda x: list(map(int, x.split())), data[2:]))\n    for i in range(0, n):\n        for j in range(0, m):\n            if sofs[i][j] == 1 and (sofs[i][j] == sofs[i - 1][j] or sofs[i][j] == sofs[i][j - 1] or sofs[i][j] == sofs[i + 1][j] or sofs[i][j] == sofs[i][j + 1]):\n                return \"-\"\n    return str(sum(map(lambda x: x[0] * x[1], sofs)))\n\nprint(solution(input()))"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sofas = []\n    for _ in range(n):\n        sofas.append(list(map(int, stdin.split())))\n    for i in range(n):\n        if i in [0, n-1]:\n            continue\n        if (sofas[i][0] == sofas[i-1][2] and sofas[i][1] == sofas[i-1][3] and sofas[i][2] == sofas[i-1][0] and sofas[i][3] == sofas[i-1][1]) \\\n            or (sofas[i][0] == sofas[i-1][2] and sofas[i][1] == sofas[i-1][3] and sofas[i][2] == sofas[i-1][1] and sofas[i][3] == sofas[i-1][0]):\n            return f'{i+1}'\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    for _ in range(d):\n        n, m = map(int, stdin.split())\n        x = [int(i) for i in stdin.split()]\n        # print(x)\n        y = [[int(i) for i in stdin.split()] for j in range(2)]\n        # print(y)\n        cnt_l = 0\n        cnt_r = 0\n        cnt_t = 0\n        cnt_b = 0\n        for i in range(n):\n            for j in range(m):\n                # print(i, j)\n                if (i > 0 and x[i] == x[i-1]) or (j > 0 and x[j] == x[j-1]) or (i < n-1 and x[i] == x[i+1]) or (j < m-1 and x[j] == x[j+1]):\n                    if j == 0:\n                        cnt_l += 1\n                    elif j == m-1:\n                        cnt_r += 1\n                    elif i == 0:\n                        cnt_t += 1\n                    elif i == n-1:\n                        cnt_b += 1\n        if cnt_l == cnt_r == cnt_t == cnt_b == 0:\n            return \"-\"\n        return str(cnt_l) + \" \" + str(cnt_r) + \" \" + str(cnt_t) + \" \" + str(cnt_b)\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 3 2\n   ... 3 1 3 2\n   ... 1 2 2 2\n   ... 1 0 0 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3\n   ... 10 10\n   ... 1 2 1 1\n   ... 5 5 6 5\n   ... 6 4 5 4\n   ... 2 1 2 0\n   ... ''')\n    '2'\n    \"\"\"\n    n, m = map(int, input().split())\n    lst_cnt = map(int, input().split())\n    lst_cnt = list(map(lambda x: x - 1, lst_cnt))\n    lst_x, lst_y = map(int, input().split())\n    lst_x -= 1\n    lst_y -= 1\n    lst_x2, lst_y2 = map(int, input().split())\n    lst_x2 -= 1\n    lst_y2 -= 1\n    for x, y, x2, y2 in zip(lst_x, lst_y, lst_x2, lst_y2):\n        if x == x2 and y == y2 and y >= y2 and y <= y2:\n            return '-1'\n        if x == x2 and y == y2 and y <= y2 and y >= y2:\n            return '-1'\n        if x == x2 and y == y2 and y <= y2 and y <= y2:\n            return '-1'\n        if x == x2 and y == y2 and y >= y2 and y >= y2:\n            return '-1'\n    count_l = 0\n    count_r = 0\n    count_t = 0\n    count_b = 0\n    for i in range(n):\n        for j in range(m):\n            if lst_cnt[count_l] == i and lst_cnt[count_r] == j:\n                if i >= lst_x and i <= lst_x2 and j >= lst_y and j <= lst_y2:\n                    return '-1'\n                count_l += 1\n                count_r += 1\n                count_t += 1\n                count_b += 1\n            elif lst_cnt[count_l] == i:\n                count_l += 1\n            elif lst_cnt[count_r] == j:\n                count_r += 1\n            elif lst_cnt[count_t] == i and lst_cnt[count_b] == j:\n                count_t += 1\n                count_b += 1\n    return str(count_l) +'' + str(count_r) +'' + str(count_t) +'' + str(count_b)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def days_off(year):\n        days_off_year = 0\n        while year > 0:\n            year -= 1\n            if (year % 4 == 0) and (year % 100!= 0) or (year % 400 == 0):\n                days_off_year += 366\n            else:\n                days_off_year += 365\n        return days_off_year\n\n    # print(days_off(int(stdin)))\n    return str(min(days_off(int(stdin)), days_off(int(stdin) + 1))), str(max(days_off(int(stdin)), days_off(int(stdin) + 1)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days_on_mars = int(stdin)\n    days_off_in_year_mars = 0\n    days_off_in_year_earthlings = 0\n\n    if days_on_mars % 5 == 0 and days_on_mars!= 0:\n        days_off_in_year_mars = days_on_mars // 5\n        days_off_in_year_earthlings = days_on_mars % 5\n        print(days_off_in_year_mars, days_off_in_year_earthlings)\n    elif days_on_mars % 5!= 0:\n        days_off_in_year_mars = days_on_mars // 5\n        days_off_in_year_earthlings = days_on_mars % 5\n        print(days_off_in_year_mars, days_off_in_year_earthlings)\n\n\n    if days_off_in_year_earthlings == 0:\n        days_off_in_year_earthlings = days_on_mars - days_off_in_year_mars\n\n\n    print(days_off_in_year_mars, days_off_in_year_earthlings)\n    return days_off_in_year_mars, days_off_in_year_earthlings\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # let's create 2 variables that store the results and print them\n    daysoffMars = 0\n    daysworkMars = 0\n\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            daysoffMars += 1\n        else:\n            daysworkMars += 1\n\n    return str(daysworkMars) +'' + str(daysoffMars)\n\nprint(solution(input()))"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin\n    total = 0\n    for day in days:\n        total += int(day)\n    print(total // 5 + 2)\n    print(total // 5)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: int = n - 2\n    b: int = n - 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum and maximum days off per year on Mars as strings.\"\"\"\n    n = int(stdin)\n    days = 365\n    while days > 5:\n        days -= 5\n        if days <= 3:\n            return str(days), str(days)\n    return str(days), str(days+2)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # 5 is work day\n    # 2 is day off\n    # any day is possible to be either a work day or a day off\n    # any work day is possible to be day off\n    # any day off is work day\n    return str(n // 5) + \" \" + str(n % 5)\n    \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a, b, p, q = list(map(int, stdin.split()))\n\n    tiles = list(range(1, n + 1))\n    if a > b:\n        a, b = b, a\n\n    # if a and b are same then we only need to paint all tiles in color\n    if a == b:\n        count_red = count_blue = p * q\n        for i in range(n):\n            if i % a == 0:\n                count_red += p\n            if i % b == 0:\n                count_blue += q\n        return str(min(count_red, count_blue))\n\n    # if a < b then we need to paint tiles in color 1 and 2\n    count_red = count_blue = 0\n    for i in range(n):\n        if i % a == 0:\n            count_red += p\n        if i % b == 0:\n            count_blue += q\n\n    # we need to paint tiles in color 1 and 2\n    # before painting color 3, there is no point in that\n    count_red -= p\n    count_blue -= q\n    count_red = max(count_red, 0)\n    count_blue = max(count_blue, 0)\n\n    # paint tile 1 and 2 in color 3\n    count_red += p\n    count_blue += q\n    if a!= b:\n        count_red -= p\n        count_blue -= q\n\n    # paint tile 3 in color 1 and 2\n    count_red += p\n    count_blue += q\n    if a!= b:\n        count_red -= p\n        count_blue -= q\n\n    return str(min(count_red, count_blue))"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    p = int(p)\n    q = int(q)\n    return sum([(i % a == 0) * (i % b == 0) * (p + q) for i in range(1, n + 1)])"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    dp = [[0]*(a+1) for _ in range(b+1)]\n    dp[1][0] = 1\n    for i in range(a+1):\n        dp[1][i] = p\n    for i in range(b+1):\n        dp[i][0] = q\n\n    for i in range(1,b+1):\n        for j in range(1,a+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    print(dp[b][a])"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    p = int(p)\n    q = int(q)\n    sum_of_chocolates_red = (n * a * p)\n    sum_of_chocolates_blue = (n * b * q)\n    result = max(sum_of_chocolates_red, sum_of_chocolates_blue)\n    return str(result)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return str(max(((n * p) // a) + (n * q) // b, (p * q) // (a + b)))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = list(map(int, stdin.split()))\n    tiles = [1,2]\n    i = 1\n    while(tiles):\n        if(i % a == 0):\n            tiles.append(2)\n        else:\n            tiles.append(1)\n        i += 1\n    \n    ans = 0\n    \n    for i in range(1, n+1):\n        ans += tiles[i % a] * (i % b == 0)\n        ans += tiles[i % b] * (i % a == 0)\n    \n    print(ans)\n    return ans\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    if p % a!= 0:\n        return q\n    if q % b!= 0:\n        return p\n    total = 0\n    for i in range(1, n + 1):\n        if i % a!= 0 and i % b!= 0:\n            total += q\n        if i % a == 0 and i % b!= 0:\n            total += p\n        if i % a!= 0 and i % b == 0:\n            total += p\n    return total\nprint(solution(input()))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = (int(s) for s in stdin.split())\n    return str(max(p*q, a*b*n, (p+q)*n, (a+q)*n, (p+a)*n, (b+q)*n, (a+b)*n))\n\n\nprint(solution(input()))"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    p = int(p)\n    q = int(q)\n\n    tiles = []\n    for i in range(1, n + 1):\n        tiles.append((i, 0))\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i % a == 0 or j % b == 0:\n                tiles[i - 1] = (i, tiles[i - 1][1] + 1)\n            else:\n                tiles[i - 1] = (i, tiles[i - 1][1])\n\n    chocolate_count = 0\n    for i in range(1, n + 1):\n        if tiles[i - 1][1] == p:\n            chocolate_count += q\n        if tiles[i - 1][1] == q:\n            chocolate_count += p\n\n    return str(chocolate_count)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return (p * n + q)"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    data.sort()\n    data = \"\".join(data)\n\n    def make_a_swap(data):\n        size = len(data)\n        for i in range(size):\n            if i!= size-1:\n                if data[i]!= data[i+1]:\n                    return True\n        return False\n\n    count = 0\n    for i in range(n-1):\n        if data[i]!= data[i+1] and make_a_swap(data):\n            count += 1\n            data = data[:i] + data[i+2:]\n            break\n    return count\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... GGGSGGGSGG\n   ... ''')\n    7\n    >>> solution('''4\n   ... GGS\n   ... ''')\n    4\n    >>> solution('''3\n   ... SSS\n   ... ''')\n    0\n    \"\"\"\n    trophies = stdin.split()\n    # Initialize the answer\n    answer = 0\n    \n    # Go through each trophy\n    for i in range(len(trophies)):\n        # If we encounter a G, we know we have a golden trophy, thus we increase the answer by 1\n        if trophies[i] == 'G':\n            answer += 1\n    # Continue until we encounter a S in which case we stop\n    # and return the answer\n    while trophies[answer]!= 'S':\n        answer += 1\n    return answer\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_trophies = stdin\n    max_beauty = 0\n    i = 0\n    j = 1\n    while i < n:\n        if n_trophies[i] == 'G':\n            if n_trophies[i+1] == 'G':\n                n_trophies = n_trophies[:i] + 'S' + n_trophies[i+2:]\n                i += 1\n        if n_trophies[j] == 'S':\n            if n_trophies[j+1] == 'S':\n                n_trophies = n_trophies[:j] + 'G' + n_trophies[j+2:]\n                j += 1\n        if len(n_trophies) > max_beauty:\n            max_beauty = len(n_trophies)\n        i += 1\n        j += 1\n    return max_beauty\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    if n == 1:\n        return len(s)\n\n    res = max(s[i:i+2] for i in range(n))\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            continue\n\n        j = i+1\n        while j <= n-1 and s[j]!= s[i]:\n            j += 1\n        res = max(res, j - i)\n\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = list(stdin)\n    def golden_ones(s):\n        return sum(i < 2 for i in range(1, len(s)) if s[i-1]!= s[i])\n\n    def silver_ones(s):\n        return sum(i < 2 for i in range(1, len(s)) if s[i-1] == s[i])\n    if golden_ones(s) < silver_ones(s):\n        return silver_ones(s)\n    elif golden_ones(s) > silver_ones(s):\n        return golden_ones(s)\n    elif golden_ones(s) == silver_ones(s):\n        if len(s) == 2:\n            return 0\n        else:\n            for i in range(1, len(s)):\n                if s[i]!= s[i-1]:\n                    return max(s[i-1]+1, s[i]+1)\n                else:\n                    continue\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = list(stdin.split())\n    count = int(line[0])\n    temp = list(line[1])\n    \n    length = len(temp)\n    \n    if length == 1:\n        return 0\n    \n    max_val = -1\n    \n    for i in range(length):\n        for j in range(i+1, length):\n            temp = temp[:i]+temp[j]+temp[i+1:j]+temp[i]\n            if temp.count('G') > temp.count('S'):\n                count -= 1\n            if count == 0:\n                break\n            if temp.count('G') < temp.count('S'):\n                temp = temp[::-1]\n                if temp.count('G') > temp.count('S'):\n                    count -= 1\n            if count == 0:\n                break\n            \n            if temp.count('G') == temp.count('S'):\n                if len(temp) > max_val:\n                    max_val = len(temp)\n                count -= 1\n    \n    if count!= 0:\n        return -1\n    \n    return max_val\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... GGG\n   ... ''')\n    7\n    >>> solution('''\n   ... 3\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... SSS\n   ... ''')\n    4\n    >>> solution('''\n   ... 2\n   ... GG\n   ... GG\n   ... ''')\n    0\n    \"\"\"\n\n    max_beauty = 0\n    length_max_beauty = 0\n    max_golden_trophies = 0\n    is_golden = False\n    for idx, char in enumerate(stdin):\n        if char == 'G':\n            if not is_golden:\n                is_golden = True\n                max_golden_trophies = idx\n        elif char == 'S':\n            if is_golden:\n                is_golden = False\n                max_beauty = max(max_beauty, idx - max_golden_trophies)\n                length_max_beauty = max(length_max_beauty, idx - max_golden_trophies + 1)\n        else:\n            raise ValueError(f'{char} is not a valid character.')\n    return str(max(max_beauty, length_max_beauty))"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    golden_trophies = stdin.strip()\n    result = 0\n    while golden_trophies[0] == 'S':\n        golden_trophies = golden_trophies[1:]\n        result += 1\n    while golden_trophies[-1] == 'S':\n        golden_trophies = golden_trophies[:-1]\n        result += 1\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    str = stdin.split()[1]\n    max_beauty = 0\n    for i in range(1, len(str)):\n        if str[i]!= str[i-1]:\n            new_str = str[i:] + str[:i]\n            print(new_str)\n            beauty = 0\n            for j in range(len(new_str)-1):\n                if new_str[j] == new_str[j+1]:\n                    beauty += 1\n            print(beauty)\n            max_beauty = max(beauty, max_beauty)\n    return max_beauty\n\nprint(solution('5'))\nprint(solution('4'))\nprint(solution('3'))"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    res = 0\n    for i in range(n-1):\n        if s[i] == 'G' and s[i+1] == 'G':\n            res = max(res, len(s[i:i+2]))\n    return str(res)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    courses = [*map(int, stdin.split())]\n\n    main = sorted(set(courses))[::-1]\n    count = 0\n\n    for i in range(n - 1, -1, -1):\n        if courses[i] in main:\n            main.remove(courses[i])\n            count += 1\n        else:\n            break\n    return str(n - count) +'' +''.join(map(str, main)) if count < n else '-1'\n\n\nsolution(input())\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main_courses = list(map(int, stdin.split()))\n    main_courses.sort()\n    courses_list = [[] for _ in range(k)]\n    for i, course in enumerate(main_courses):\n        courses_list[course-1].append(i)\n\n    courses_list = sorted(courses_list, key=lambda x: len(x))\n    result = 1\n    for l in courses_list:\n        if len(l) > 0:\n            result += 1\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    courses = stdin.split()\n    n = int(courses[0])\n    k = int(courses[1])\n    main = []\n    main2 = []\n    res = []\n    main_counter = 0\n    main_list = []\n    main_list2 = []\n    for i in range(n):\n        main.append(i)\n        main2.append(i)\n    for i in range(n):\n        main_list.append(main[i])\n        main_list2.append(main2[i])\n    main_list2.sort()\n    for i in range(n):\n        main_list.append(main_list2[i])\n    for i in range(k):\n        course = int(courses[i + 2])\n        for j in range(len(main_list)):\n            if main_list[j] == course:\n                main_counter += 1\n        res.append(main_counter)\n        main_counter = 0\n    if main_counter!= 0:\n        return -1\n    else:\n        for i in range(k):\n            res.append(main_list[i])\n        res.sort()\n        return''.join(map(str, res))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    courses = [int(x) for x in stdin.split()]\n    if len(courses)!= courses[0]: return -1\n    n = courses[0]\n    main_courses = courses[1:]\n    k = courses[1]\n    m = 0\n    courses = courses[2:]\n    course_cnts = collections.Counter(courses)\n    for i in range(n):\n        if len(courses) == 0: break\n        if course_cnts[i] == 0: continue\n        if course_cnts[i] < k:\n            k -= course_cnts[i]\n        else:\n            course_cnts[i] -= k\n            cnts = collections.Counter()\n            for x in courses:\n                if x < i:\n                    cnts[x] += 1\n            cnts = list(cnts.items())\n            cnts.sort(key=lambda x: (x[1], x[0]))\n            cnts = [x for _, x in cnts]\n            cnts = sorted(cnts)\n            for j in cnts:\n                if course_cnts[j] == 0:\n                    m += 1\n                    course_cnts[j] -= 1\n                    break\n    return m\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    courses = [int(x) for x in stdin.split()]\n    n = courses[0]\n    k = courses[1]\n    # print(n, k)\n\n    main_courses = set(range(1, n + 1))\n\n    res = n + 1\n    taken = set()\n    while len(main_courses) > 0:\n        # print(main_courses, taken)\n        if k > 0:\n            k -= 1\n            new_main = main_courses.pop()\n            if new_main in taken:\n                continue\n            taken.add(new_main)\n            main_courses -= {new_main}\n        else:\n            # print(main_courses, taken)\n            if len(taken) > 0:\n                taken.remove(taken.pop())\n                res = min(res, len(taken))\n            else:\n                return -1\n            if len(main_courses) == 0:\n                break\n            new_main = main_courses.pop()\n            taken.add(new_main)\n            main_courses -= {new_main}\n    return str(res)\nprint(solution(input()))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    passed_courses, max_courses_number = stdin.split()\n    n, k = int(passed_courses), int(max_courses_number)\n    main_courses_numbers = list(map(int, stdin.split()[1:]))\n    n_main_courses = len(main_courses_numbers)\n    if n_main_courses == 0:\n        return '-1'\n    main_courses_number_dict = {}\n    for main_course_number in main_courses_numbers:\n        if main_course_number in main_courses_number_dict:\n            main_courses_number_dict[main_course_number] += 1\n        else:\n            main_courses_number_dict[main_course_number] = 1\n    sorted_main_courses_number_dict = dict(sorted(main_courses_number_dict.items(), key=lambda item: item[1], reverse=True))\n    sorted_main_courses_numbers = sorted(list(sorted_main_courses_number_dict.keys()))\n    number_of_main_courses_passed = 0\n    courses_passed = []\n    for main_course_number in sorted_main_courses_numbers:\n        if number_of_main_courses_passed < k:\n            number_of_main_courses_passed += 1\n            courses_passed.append(main_course_number)\n        else:\n            break\n    for courses_passed_number in courses_passed:\n        if courses_passed_number in main_courses_number_dict:\n            main_courses_number_dict.pop(courses_passed_number)\n    if len(main_courses_number_dict) == 0:\n        return '-1'\n    else:\n        return str(min(list(main_courses_number_dict.keys())))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *Courses = list(map(int, stdin.split()))\n    scheduling = []\n\n    for course in Courses:\n        if course not in scheduling:\n            scheduling.append(course)\n        else:\n            scheduling.remove(course)\n\n    if len(scheduling) == 0:\n        return '-1'\n\n    if len(scheduling) == N:\n        return str(len(scheduling))\n\n    cur = 0\n    result = []\n    while cur < len(scheduling):\n        if cur == K:\n            cur = cur + 1\n            continue\n\n        if cur == len(scheduling) - 1:\n            result.append(cur)\n            break\n\n        result.append(cur)\n        if cur == K - 1:\n            cur = cur + 1\n            continue\n        if cur < K - 1:\n            cur = cur + 1\n            continue\n        else:\n            cur = cur + 1\n\n    return str(min(result))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, k = map(int, stdin.split())\n    courses = list(map(int, stdin.split()))\n    start_courses = sorted(courses)\n\n    if n == 0:\n        return '-1'\n\n    to_pass = 0\n    last_passed = 0\n    visited = []\n\n    for course in start_courses:\n        if course not in visited:\n            visited.append(course)\n            to_pass += 1\n            if to_pass == k:\n                return''.join(str(x) for x in visited)\n            for i in range(last_passed + 1, course):\n                visited.append(i)\n                if to_pass + 1 == k:\n                    return''.join(str(x) for x in visited)\n                to_pass += 1\n                last_passed = i\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = list(map(int, stdin.split()))\n    courses = sorted(courses, reverse=True)\n    ans = -1\n    cnt = 0\n    counts = {}\n    for course in courses:\n        if course in counts:\n            counts[course] += 1\n        else:\n            counts[course] = 1\n\n    for course in courses:\n        if course not in counts:\n            continue\n        elif counts[course] == 1:\n            ans = course\n            cnt += 1\n            break\n        elif counts[course] > 1:\n            if course == ans:\n                ans = course\n                cnt += 1\n            else:\n                cnt -= counts[course]\n                counts[course] = counts[course] - 1\n\n    return str(ans)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *main = map(int, stdin.split())\n    if n < k:\n        return '-1'\n    \n    course_main = [*main]\n    course_main.sort()\n    \n    min_course = 0\n    course_list = []\n    for i in range(1, n + 1):\n        if i in course_main:\n            min_course += 1\n        else:\n            course_list.append(i)\n            min_course = 0\n        \n        if min_course == k:\n            break\n            \n    return str(min_course) +'' +''.join(map(str, course_list))"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    if not all(1 <= p[i] <= n for i in range(k)):\n        return -1\n    count = 0\n    while count!= k:\n        min_idx = count\n        for i in range(count, len(p)):\n            if p[min_idx] > p[i]:\n                min_idx = i\n        p[min_idx], p[count] = p[count], p[min_idx]\n        count += 1\n    print(*p)\n    return ''.join(map(str, p))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    def _remove_value_from_stack(stack, value):\n        if stack:\n            stack.pop()\n\n    if k > n:\n        return '-1'\n    else:\n        result = list(range(1, n + 1))\n        for i in range(k):\n            _remove_value_from_stack(result, p.pop(0))\n        result.sort()\n        return''.join(map(str, result))\n\n\nsolution(\"5 3\")\n\nsolution(\"5 1\")\n\nsolution(\"5 2\")\n\nsolution(\"6 2\")\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p = sorted(p)\n    max_stack_perm = []\n    for _ in range(k):\n        max_stack_perm.append(p.pop())\n    while len(p) > 0:\n        max_stack_perm.append(p.pop())\n    if p!= max_stack_perm:\n        return '-1'\n    print(' '.join(map(str, max_stack_perm)))\n    return ''\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    assert 1 <= n <= 200000 and 1 <= k <= n\n    assert set(range(1, n+1)) == set(p)\n    c = Counter(p)\n    # print(n, k, p, c)\n    # print(c)\n    if k == n:\n        return ''.join(map(str, p))\n    a = list(c.keys())\n    b = list(c.values())\n    ans = [-1]\n    ans.append(b.index(max(b)))\n    for _ in range(k - 1):\n        a.pop(ans[-1])\n        # print(a, ans)\n        a.insert(ans[-1], max(a))\n        b.pop(a.index(max(a)))\n        # print(a, b)\n        b.insert(ans[-1], max(b))\n        ans.append(b.index(max(b)))\n    return ''.join(map(str, a[::-1]))"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(range(1, n + 1))\n    while k > 0 and a:\n        if a[0] == b[0]:\n            k -= 1\n            a.pop(0)\n            b.pop(0)\n        else:\n            b.pop(0)\n    if a:\n        return '-1'\n    return \"\".join(map(str, b))\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 3\n   ... 3 2 1\n   ... ''')\n    '3 2 1 5 4'\n    >>> solution('''5 3\n   ... 3 2 1\n   ... ''')\n    '-1'\n    >>> solution('''5 2\n   ... 3\n   ... ''')\n    '3 2 1 5 4'\n    >>> solution('''5 1\n   ... 3\n   ... ''')\n    '3 2 1 5 4'\n    >>> solution('''5 1\n   ... 3\n   ... ''')\n    '3 2 1 5 4'\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    if len(set(p)) == 1 or k < 2:\n        return '-1'\n    \n    for i in range(len(p)-k):\n        if p[i]!= p[i+k]:\n            for j in range(i+1, i+k):\n                p[i], p[j] = p[j], p[i]\n                if is_stack_sortable(p[:i]+p[i+k:], k):\n                    return''.join(map(str, p[:i]+p[i+k:]))\n            break\n    return '-1'\n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 3 2 1\n   ... ''')\n    '3 2 1 5 4'\n    >>> solution('''5 3\n   ... 2 3 1\n   ... ''')\n    '-1'\n    >>> solution('''5 2\n   ... 3 4\n   ... ''')\n    '3 4 2 5 1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    n -= k\n    a = list(map(int, stdin.split()))\n    if n == 0:\n        if sorted(a) == a:\n            return ''.join(str(x) for x in a)\n    else:\n        q = sorted(a[:k])\n        n -= k\n        if n == 0:\n            return ''.join(str(x) for x in q) + ''.join(str(x) for x in sorted(a[k:]))\n        elif q == sorted(a[:k]) and sorted(a[k:]) == a[n:]:\n            return ''.join(str(x) for x in q) + ''.join(str(x) for x in a[k:])\n        else:\n            return '-1'\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    l = list(int(x) for x in stdin.split()[1:])\n    l = l + [-1] * (k - len(l))\n    l.sort()\n    if l == l[::-1]:\n        return \" \".join(map(str, l))\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, k = map(int, lines[0].split())\n    p = list(map(int, lines[1]))\n    # k is the number of elements in the array we are trying to make it stack-sortable\n    # n is the size of the array\n    # p is the array given to us\n    # I need to find the biggest k - 1 element, then remove it\n    # and then find the element that is bigger than it\n    # that is the second element\n    # print(max(p))\n    # return\n    stack = []\n    for i in range(n):\n        stack.append(i)\n    for i in range(k - 1):\n        stack.remove(p[i])\n    # print(stack)\n    # now we need to sort\n    # we need to have a value to compare\n    # 1. the biggest value of the stack\n    # 2. the second biggest value of the stack\n    # print(max(stack))\n    # print(max(stack) - min(stack))\n    # now I want to remove the max(stack) - min(stack)\n    # and we need to return its index in the stack\n    # which means we need to find it\n    # print(min(stack))\n    # print(stack[min(stack)])\n    for i in range(k - 1):\n        print(stack.pop(max(stack) - min(stack)))\n    return\n\nsolution(input())"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2, n3 = map(int, stdin.split())\n    sequence = [n1, n2, n3]\n    index = 0\n    while sequence[index] < sequence[index + 1]:\n        if sequence[index] == n2:\n            return \"YES\"\n        index += 1\n    return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if b in range(a, a+c+1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    if c == 0 and a == 0:\n        return \"NO\"\n    elif c!= 0:\n        for i in range(2, 10**5+1):\n            if (i - a) % c == 0:\n                return \"YES\"\n    elif c == 0 and a!= 0:\n        return \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b in range(a, a + c + 1):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"YES\"\n    elif a == b or a == c or b == c:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if s_1 == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    seq = range(a, a + b)\n    for i in range(1, len(seq)):\n        if seq[i - 1] == c and seq[i] == b:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def valid_sequence(sequence):\n        previous = sequence[0]\n        for index, number in enumerate(sequence):\n            if previous + 1!= number:\n                return False\n            previous = number\n        return True\n\n    a, b, c = map(int, stdin.split())\n    sequence = []\n    sequence.append(a)\n\n    while True:\n        sequence.append(b)\n        if b == c:\n            break\n\n    if valid_sequence(sequence):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(1, 1001):\n        if i == a:\n            continue\n        if a == b:\n            if i - c == b:\n                return \"YES\"\n        if i == a + b:\n            continue\n        if i - a - 1 == b:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b == a:\n        return 'YES'\n    l = [a]\n    while True:\n        l.append(l[-1] - c)\n        if l[-1] == b:\n            return 'YES'\n        if l[-1] < b:\n            return 'NO'\n\n\n\n-----Pseudo-code-----\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1 = int(stdin)\n    cnt_2 = int(stdin)\n    cnt_3 = int(stdin)\n    cnt_4 = int(stdin)\n    # if cnt_1 + cnt_2 + cnt_3 + cnt_4!= 2 * (cnt_1 + cnt_2 + cnt_3 + cnt_4):\n    #     return 0\n    if cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n        return 0\n    if cnt_1 == 1:\n        return 1\n    if cnt_2 == 1:\n        return 2\n    if cnt_3 == 1:\n        return 3\n    if cnt_4 == 1:\n        return 4\n    if (cnt_1 + cnt_2 + cnt_3 + cnt_4) % 2 == 0:\n        return 0\n    if (cnt_1 + cnt_2 + cnt_3 + cnt_4) % 2 == 1:\n        return 1\n    return 0"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \")\":\n            total -= 1\n        if stdin[i] == \"(\":\n            total += 1\n    if total == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = stdin\n    if not (cnt_1 + cnt_2 + cnt_3 + cnt_4) % 2 == 0:\n        return 0\n\n    for i in range(0, 4):\n        if cnt_1 % 2 == 1:\n            cnt_1 += 1\n        elif cnt_2 % 2 == 1:\n            cnt_2 += 1\n        elif cnt_3 % 2 == 1:\n            cnt_3 += 1\n        elif cnt_4 % 2 == 1:\n            cnt_4 += 1\n\n    cnt_1, cnt_2, cnt_3, cnt_4 = sorted([cnt_1, cnt_2, cnt_3, cnt_4], reverse=True)\n    cnt_1 += cnt_2 + cnt_3 + cnt_4\n    print(cnt_1)\n    return 1 if cnt_1 % 2 == 0 else 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    if cnt_1 >= cnt_2 + cnt_3 + cnt_4:\n        return \"0\"\n    if cnt_1 * cnt_4 + cnt_2 * (cnt_3 - 1) + cnt_3 * (cnt_4 - 1) == cnt_1 * cnt_2 * (cnt_3 + cnt_4):\n        return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int, stdin.split()))\n\n    # counter for each bracket\n    bracket_count = 0\n    for i in range(len(num)):\n        # 1. increasing bracket_count\n        if num[i] == 0:\n            continue\n        elif bracket_count < num[i]:\n            bracket_count += num[i]\n        # 2. decreasing bracket_count\n        elif bracket_count > num[i]:\n            bracket_count -= num[i]\n\n    if bracket_count == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    # print(cnt_1, cnt_2, cnt_3, cnt_4)\n    if cnt_1 == 0:\n        return '0'\n    if cnt_1 == 1:\n        return '1'\n    if cnt_1 == 2:\n        if cnt_2 == 3:\n            if cnt_3 == 4:\n                if cnt_4 == 5:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 3:\n        if cnt_2 == 4:\n            if cnt_3 == 5:\n                if cnt_4 == 6:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 4:\n        if cnt_2 == 5:\n            if cnt_3 == 6:\n                if cnt_4 == 7:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 5:\n        if cnt_2 == 6:\n            if cnt_3 == 7:\n                if cnt_4 == 8:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 6:\n        if cnt_2 == 7:\n            if cnt_3 == 8:\n                if cnt_4 == 9:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 7:\n        if cnt_2 == 8:\n            if cnt_3 == 9:\n                if cnt_4 == 10:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 8:\n        if cnt_2 == 9:\n            if cnt_3 == 10:\n                if cnt_4 == 11:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 9:\n        if cnt_2 == 10:\n            if cnt_3 == 11:\n                if cnt_4 == 12:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 10:\n        if cnt_2 == 11:\n            if cnt_3 == 12:\n                if cnt_4 == 13:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 11:\n        if cnt_2 == 12:\n            if cnt_3 == 13:\n                if cnt_4 == 14:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 12:\n        if cnt_2 == 13:\n            if cnt_3 == 14:\n                if cnt_4 == 15:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 13:\n        if cnt_2 == 14:\n            if cnt_3 == 15:\n                if cnt_4 == 16:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 14:\n        if cnt_2 == 15:\n            if cnt_3 == 16:\n                if cnt_4 == 17:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 15:\n        if cnt_2 == 16:\n            if cnt_3 == 17:\n                if cnt_4 == 18:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 16:\n        if cnt_2 == 17:\n            if cnt_3 == 18:\n                if cnt_4 == 19:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 17:\n        if cnt_2 == 18:\n            if cnt_3 == 19:\n                if cnt_4 == 20:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 18:\n        if cnt_2 == 19:\n            if cnt_3 == 20:\n                if cnt_4 == 21:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 19:\n        if cnt_2 == 20:\n            if cnt_3 == 21:\n                if cnt_4 == 22:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 20:\n        if cnt_2 == 21:\n            if cnt_3 == 22:\n                if cnt_4 == 23:\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        else:\n            return '0'\n    if cnt_1 == 21:\n        if cnt_2 == 22:\n            if cnt_3 == 23:\n                if cnt_4 == 24:\n                    return '1"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = stdin.split()\n    cnt_1 = int(cnt_1)\n    cnt_2 = int(cnt_2)\n    cnt_3 = int(cnt_3)\n    cnt_4 = int(cnt_4)\n    def valid(s):\n        if len(s) % 2!= 0:\n            return False\n        if s[0] == ')':\n            return False\n        if s[-1] == '(':\n            return False\n        for i in range(1, len(s), 2):\n            if s[i] == ')' and s[i - 1] == '(':\n                return False\n            if s[i] == '(' and s[i - 1] == ')':\n                return False\n        return True\n    def valid_bracket(s):\n        if len(s) <= 2:\n            return True\n        if s[0] == ')' and s[-1] == '(':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == '(':\n            return True\n        return False\n    if cnt_1 == 0:\n        return \"1\"\n    if cnt_2 == 0:\n        return \"0\"\n    if cnt_3 == 0:\n        return \"0\"\n    if cnt_4 == 0:\n        return \"0\"\n    if cnt_1 == 1:\n        return \"1\"\n    if cnt_2 == 1:\n        return \"0\"\n    if cnt_3 == 1:\n        return \"0\"\n    if cnt_4 == 1:\n        return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_1 * i):\n            if valid_bracket(cnt_1 * i):\n                return \"1\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_2 * i):\n            if valid_bracket(cnt_2 * i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_3 * i):\n            if valid_bracket(cnt_3 * i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_4 * i):\n            if valid_bracket(cnt_4 * i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_1 - i):\n            if valid_bracket(cnt_1 - i):\n                return \"1\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_2 - i):\n            if valid_bracket(cnt_2 - i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_3 - i):\n            if valid_bracket(cnt_3 - i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_4 - i):\n            if valid_bracket(cnt_4 - i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_1 + i):\n            if valid_bracket(cnt_1 + i):\n                return \"1\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_2 + i):\n            if valid_bracket(cnt_2 + i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_3 + i):\n            if valid_bracket(cnt_3 + i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_4 + i):\n            if valid_bracket(cnt_4 + i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_1 - i):\n            if valid_bracket(cnt_1 - i):\n                return \"1\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_2 - i):\n            if valid_bracket(cnt_2 - i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_3 - i):\n            if valid_bracket(cnt_3 - i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_4 - i):\n            if valid_bracket(cnt_4 - i):\n                return \"0\"\n    for i in range(1, min(cnt_1, cnt_2, cnt_3, cnt_4) + 1):\n        if valid(cnt_1 + i):\n            if valid_bracket(cnt_1 + i):\n                return \"1\"\n    for i in range(1"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The goal is to construct a bracket sequence which is regular.\n    '''\n\n    brackets = []\n    for _ in range(4):\n        brackets.append(stdin)\n    bracket_string = ''.join(brackets)\n    if bracket_string.count('(') == bracket_string.count(')'):\n        return '1'\n    else:\n        return '0'\n\n\nsolution(input())\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    tot_strings = int(stdin)\n    strings_to_be_checked = []\n    count = 0\n    for i in range(tot_strings):\n        strings_to_be_checked.append(stdin[i])\n        if stdin[i] == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 0\n    str_arr = [stdin[0]]\n    for i in range(1, tot_strings):\n        if stdin[i] == \")\":\n            str_arr.append(stdin[i])\n        elif stdin[i] == \"(\":\n            str_arr.append(stdin[i])\n        else:\n            continue\n    if str_arr == strings_to_be_checked:\n        return 1\n    else:\n        return 0\n\nsolution(input())\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k, t = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    return str(k - t + 1) if n >= k else str(k)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_rec(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])))\ndef"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    k = int(inputs[1])\n    t = int(inputs[2])\n    ans = 0\n    for i in range(t, n + k + 1):\n        ans += i % 2 == 0\n    return str(ans)\n\nprint(solution(\"10 5 7\\n\"))\nprint(solution(\"10 5 12\\n\"))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(input()))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return str(n - t) if t <= k else str(n - k)"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return str(stdin)\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = (int(x) for x in stdin.split())\n    return str(n - t + k - 1)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def num(x):\n        return x - x % 2\n    n, k, t = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        if i == 0:\n            res = 0\n        else:\n            res += num(i) - num(i - k)\n    return str(res)\n\nsolution('10 5 3')\n\n\nsolution('10 5 7')\n\nsolution('10 5 12')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  #return ''.join(stdin.strip().split())\n  #return int(stdin.strip())\n  return stdin.strip().split()[1]"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    strs = stdin.split('\\n')\n    l = len(strs[0])\n    if l == 1:\n        return stdin[0]\n    for i in range(l-1):\n        for j in range(i+1,l):\n            if strs[0][i] > strs[0][j]:\n                u = strs[0][i]\n                strs[0] = strs[0][:i] + strs[0][i+1:]\n                strs[0] = strs[0] + u\n                break\n    return ''.join(strs)\n\nprint(solution(input()))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    for i in range(0,len(s)):\n        t = s[i]\n        for j in range(i+1,len(s)):\n            u = s[j]\n            if len(u)<len(t):\n                t = u\n            elif len(u)==len(t) and u<t:\n                t = u\n        if len(t)<len(u):\n            return t\n    return s"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 4:\n        return s\n    return sorted(s)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    t = \"\"\n    u = \"\"\n    s = s[::-1]\n    i = 1\n    if len(s) % 2 == 0:\n        return s[::-1]\n    else:\n        while len(s)!= 0:\n            if i == 2:\n                i = 1\n            s = s[:i]\n            s = s[::-1]\n            if s!= \"\":\n                t = t + s[0]\n            if len(s) > 0:\n                u = u + s[-1]\n            i += 1\n        return t + u\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    if len(s) <= 10:\n        return \"\"\n\n    u = stdin[1]\n    if len(u) <= 10:\n        return \"\"\n    if s > u:\n        u = u[::-1]\n    elif s < u:\n        s = s[::-1]\n    return s + u\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    #s = \"aabc\"\n    \n    s = s.lower()\n    \n    \n    print(s)\n    \n    #take first char\n    i = 0\n    x = s[0]\n    \n    x = x.lower()\n    \n    s = s[1:]\n    \n    i = 1\n    \n    #take last char\n    \n    z = s[len(s)-1]\n    \n    z = z.lower()\n    \n    s = s[:-1]\n    \n    s = x + s + z\n    \n    \n    \n    print(s)\n    \n    return(s)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = ''.join(sorted(s))\n    a,b = s[:len(s)//2],s[len(s)//2:]\n    return a+b[::-1]+a\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) >= 10 ** 5:\n        return \"\"\n    if not s:\n        return \"\"\n    if len(s) == 1:\n        return s[0]\n    if len(s) == 2:\n        return s\n    ans = \"\"\n    s = list(s)\n    for i in range(len(s)):\n        if i == 0:\n            ans += s[i]\n            if len(s) == 2:\n                return ans\n        else:\n            ans += s[i]\n            if len(s) == 3:\n                return ans\n    return ans\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin)\n        plays = []\n        clears = []\n        for i in range(n):\n            p, c = map(int, stdin.split())\n            plays.append(p)\n            clears.append(c)\n        plays.sort()\n        clears.sort()\n        for i in range(n):\n            if plays[i]!= clears[i]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin.split()[i])\n        plays = sorted(map(int, stdin.split()[i+1:i+1+n]))\n        clears = sorted(map(int, stdin.split()[i+n+1:i+n+1+n]))\n        if all(plays[i] == clears[i] for i in range(len(plays))):\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    plays, clears = list(), list()\n    for _ in range(n):\n        plays.append(int(stdin.splitlines()[1+2*_]))\n        clears.append(int(stdin.splitlines()[1+2*_+1]))\n    plays.sort()\n    clears.sort()\n    if plays == clears:\n        return \"YES\"\n    for i in range(n):\n        if (plays[i]-clears[i]) == 1:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for t in range(T):\n        n = int(stdin.split()[t])\n        plays = []\n        clears = []\n        for i in range(n):\n            plays.append(int(stdin.split()[t+i][0]))\n            clears.append(int(stdin.split()[t+i][1]))\n        if plays == sorted(plays) and clears == sorted(clears):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"OK\"\nprint(solution(\"5\\n1 2 3 4 5\\n1 1 1 2 3 4\\n1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n\"))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n###First function\ndef"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # solution to part 1\n    # return \"YES\" if all the entries are correct else return \"NO\"\n    test_cases = stdin.splitlines()\n    for test_case in test_cases:\n        if test_case == \"\":\n            continue\n        test_case = test_case.split()\n        n = int(test_case[0])\n        num_plays = int(test_case[1])\n        num_clears = int(test_case[2])\n        plays = []\n        clears = []\n        for i in range(n):\n            plays.append(num_plays)\n            clears.append(num_clears)\n        flag = True\n        for i in range(1, n):\n            if plays[i] == plays[i-1]:\n                flag = False\n                break\n        if flag:\n            for i in range(1, n):\n                if clears[i] == clears[i-1]:\n                    flag = False\n                    break\n        if flag:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        n = int(stdin)\n        plays = []\n        clears = []\n        for i in range(n):\n            p, c = map(int, stdin.split())\n            plays.append(p)\n            clears.append(c)\n\n        clears.sort()\n        plays.sort()\n\n        if len(clears) < len(plays):\n            print('NO')\n        else:\n            #print(clears, plays)\n            if clears == plays:\n                print('YES')\n            else:\n                print('NO')\n\nsolution('2\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n')\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    for t in range(T):\n        n = int(stdin.strip())\n        stats = []\n        for i in range(n):\n            stats.append(list(map(int, stdin.strip().split())))\n        max_plays = 0\n        max_clears = 0\n        for i in range(n):\n            if stats[i][0] > max_plays:\n                max_plays = stats[i][0]\n            if stats[i][1] > max_clears:\n                max_clears = stats[i][1]\n        if max_clears == max_plays:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        # Geeks for Geeks\n        n = int(stdin())\n        m = stdin().split()\n        plays = [int(i) for i in m[:n]]\n        clears = [int(i) for i in m[n:]]\n        plays.sort()\n        clears.sort()\n        if plays == clears:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        N = int(stdin)\n        P = []\n        C = []\n        for j in range(N):\n            p,c = list(map(int,stdin.split()))\n            P.append(p)\n            C.append(c)\n        P = sorted(P)\n        C = sorted(C)\n        print('YES' if P == C else 'NO')\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    timestr = stdin\n    #\n    # Your code here\n    #\n    hh = int(timestr.split(':')[0])\n    mm = int(timestr.split(':')[1])\n    hhmm = hh * 60 + mm\n    \n    n = 1\n    while hhmm!= hhmm - n:\n        if hhmm - n == hhmm - 2 * n:\n            return str(n) +'minutes'\n        n += 1\n    return str(n) +'minutes'\n\nprint(solution(input()))"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  input_time = stdin\n  input_time = input_time.split(\" \")\n  h = int(input_time[0])\n  m = int(input_time[1])\n  palindrome_time = str(h) + str(m)\n  if palindrome_time == palindrome_time[::-1]:\n    return \"1\"\n  else:\n    if h == 0 and m == 0:\n      return \"1\"\n    elif h == 23 and m == 59:\n      return \"1\"\n    elif h == 0:\n      return str(min(0, m + 1))\n    elif m == 0:\n      return str(min(0, h + 1))\n    elif h == 23:\n      return str(min(0, h - 1))\n    elif m == 59:\n      return str(min(0, m - 1))\n    else:\n      return str(min(0, h - 1) + min(0, m + 1))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(\":\")\n    hh_min = int(hh) * 60 + int(mm)\n    return str(min(hh_min, 24 * 60 - hh_min))"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into individual numbers\n    hh, mm = map(int, stdin.split(':'))\n    hh, mm = hh, mm\n    h = hh * 60 + mm\n    m = h // 60\n    h = h % 60\n    if h % 2 == 0:\n        h = h - 1\n    else:\n        h = h\n    print(h * 60 + m)\n    return (h * 60 + m)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum number of minutes that she should sleep, such that when she wakes up,\n    the time is a palindrome.\n    \"\"\"\n    h, m = map(int, stdin.split(':'))\n    if h == 0 and m == 0:\n        return 0\n\n    m_half = m if h % 2 == 0 else m - 1\n\n    if h == 1 and m == 59:\n        return 0\n\n    if h == 23 and m == 59:\n        return 60\n\n    if h == 23:\n        return 60 - m_half\n\n    if m == 59:\n        return 60 - m_half + 1\n\n    return 60 - m_half\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code will be run on the following line by the tutor \n    and should return the result of the computation as a string. '''\n    return '1'"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nInput Format\n\nThe first and only line of input contains a single string in the format hh:mm (00 \u2264  hh  \u2264 23, 00 \u2264  mm  \u2264 59).\n\n\nConstraints\n\n1 \u2264 hh \u2264 23\n1 \u2264 mm \u2264 59\n\n\nOutput Format\n\nReturn a single integer on a line by itself, the minimum number of minutes Karen should sleep, such that, when she wakes up, the time is a palindrome.\n\n\nSample Input 0\n\n05:39\n\nSample Output 0\n\n11\n\nSample Input 1\n\n13:31\n\nSample Output 1\n\n0\n\nSample Input 2\n\n23:59\n\nSample Output 2\n\n1\n\n\n\n-----Hints-----\n\nYou may be wondering what the `if` part does, since it checks if the time given in the input is a palindrome or not. In this case, we can put some assumptions.\n\nWe can assume the time given in the input is always a palindrome (besides 00:00 and 23:59, which are the middle of 24-hour time range).\n\nThis means that the minimum number of minutes she should sleep for is 11.\n\nAlso, we can skip some of the code by using the `(hh,mm) = (int(hh),int(mm))` format, instead of the `hh:mm:00`.\n\nHint: `hh` can be an integer or a string, and `mm` can be an integer or a string.\n\n\"\"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    times = stdin.split()\n    hh = int(times[0].split(':')[0])\n    mm = int(times[0].split(':')[1])\n    \n    while not (hh == 23 and mm == 59) and (hh < 23 and mm < 59):\n        if mm == 59:\n            hh += 1\n            mm = 0\n        else:\n            mm += 1\n    \n    if mm == 59:\n        hh += 1\n        mm = 0\n    \n    return f\"{hh}:{mm}\"\nprint(solution(input()))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(max(0, int(stdin.split(\":\")[0]) + int(stdin.split(\":\")[1]) - int(stdin.split(\":\")[0])))))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndata = stdin.rstrip('\\n').split(' ')\nhh, mm = data[0].split(':')\n\nhh = int(hh)\nmm = int(mm)\n\nis_palindrome = (mm == 0 and hh == 0) or (hh == 0 and mm == 0)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a = list(set(a))\n    a.sort()\n    if len(a) == 1:\n        return str(0)\n    return str(a[1] - a[0])\n\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = sorted(map(int, stdin.strip().split()))\n    return str(arr[-1] - arr[0])\n\n\nsolution(\"6\\n6 5 4 3 2 1\")\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n <= 2:\n        return str(abs(min(a)-max(a)))\n    a.sort()\n    for i in range(n):\n        if i == 0:\n            a[i], a[i+1] = a[i+1], a[i]\n        elif i == n-1:\n            a[i], a[i-1] = a[i-1], a[i]\n        else:\n            a[i], a[i+1] = a[i+1], a[i]\n            a[i], a[i-1] = a[i-1], a[i]\n    return str(abs(min(a)-max(a)))"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    min_v = max_v = a[0]\n    # We do not need to swap the first and the last element, which is at indices 0 and n-1\n    for i in range(1, n - 1):\n        min_v = min(min_v, a[i])\n        max_v = max(max_v, a[i])\n\n    return min_v - max_v\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # l = []\n    # for i in range(1, n):\n    #     if a[i] <= a[0]:\n    #         l.append(a[i])\n    #         l.append(a[0])\n    #         a[i], a[0] = a[0], a[i]\n    #         a[0] = l.pop()\n    #         a[0] = l.pop()\n    #     if a[i] >= a[n-1]:\n    #         l.append(a[i])\n    #         l.append(a[n-1])\n    #         a[i], a[n-1] = a[n-1], a[i]\n    #         a[n-1] = l.pop()\n    #         a[n-1] = l.pop()\n    #\n    #     print(a)\n    #\n    #     min = a[0]\n    #     max = a[0]\n    #     for i in range(1, n):\n    #         if a[i] < min:\n    #             min = a[i]\n    #         if a[i] > max:\n    #             max = a[i]\n    #     return str(abs(min-max))\n\n    l = []\n    for i in range(1, n):\n        if a[i] <= a[0]:\n            l.append(a[i])\n            l.append(a[0])\n            a[i], a[0] = a[0], a[i]\n            a[0] = l.pop()\n            a[0] = l.pop()\n        if a[i] >= a[n-1]:\n            l.append(a[i])\n            l.append(a[n-1])\n            a[i], a[n-1] = a[n-1], a[i]\n            a[n-1] = l.pop()\n            a[n-1] = l.pop()\n\n    min = a[0]\n    max = a[0]\n    for i in range(1, n):\n        if a[i] < min:\n            min = a[i]\n        if a[i] > max:\n            max = a[i]\n    return str(abs(min - max))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(number) for number in stdin.split()]\n    minimum = min(numbers)\n    maximum = max(numbers)\n    return maximum - minimum\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    a = list(map(int, stdin.split()))\n    # \u041d\u0430\u0447\u0430\u043b\u043e \u043a\u043e\u043d\u0435\u0446 \u043a\u0443\u0447\u0438\n    s, e = 1, n\n    while s <= e:\n        # \u0415\u0441\u043b\u0438 \u043a\u0443\u0447\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\n        mid = s + (e - s) // 2\n        # \u0415\u0441\u043b\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u0443\u0447\u0438 \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438 \u044d\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0442\u0430\u043a\n        # \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u043c\u0438\u043d\u0438\u043c\u0443\u043c\n        if a[mid-1] <= a[mid]:\n            e = mid - 1\n        else:\n            s = mid + 1\n    return s\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    return str(min(abs(a[0] - a[-1]), abs(a[-1] - a[-2]), abs(a[0] - a[1])) + abs(a[-2] - a[-1]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    if n == 1:\n        return 0\n    arr.sort()\n    maximum = arr[n - 1]\n    minimum = arr[0]\n    maximum_i = arr.index(maximum)\n    minimum_i = arr.index(minimum)\n    return abs(maximum_i - minimum_i)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    mid = int(len(s)/2)\n    s = s[:mid] + s[mid+1:]\n    return s\n    print(s)\n    return s[::-1]\nsolution(input())\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    stdin = stdin.upper()\n    if stdin.count(' ') > 0:\n        stdin = stdin.split(' ')\n    # print(stdin)\n    # if stdin.count(' ') > 0:\n    #     stdin = stdin.split(' ')\n    #     print(stdin)\n    # else:\n    #     stdin = stdin.split(' ')\n    #     print(stdin)\n    if stdin[0] == stdin[-1]:\n        if stdin[1] == stdin[-2]:\n            return 'TAK'\n        else:\n            return 'NIE'\n    else:\n        return 'NIE'"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.lower()\n    #  Odd length of string\n    if len(string) % 2 == 1:\n        #  Find middle\n        middle = int(len(string)/2)\n        #  Reverse middle\n        string = string[middle:] + string[:middle]\n    #  Check string\n    string = string.replace(\" \", \"\")\n    if string == string[::-1]:\n        return \"TAK\"\n    else:\n        return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    if l < 2:\n        return 'NIE'\n    else:\n        s = s[:l//2] + s[l//2::-1]\n        if s == s[::-1]:\n            return 'TAK'\n        else:\n            return 'NIE'"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)%2!= 0:\n        return 'NIE'\n    else:\n        length = int(len(stdin)/2)\n        return is_palindrome(stdin[:length], stdin[length:])\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if is_palindrome(stdin) else 'NIE'\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if isPalindrome(stdin):\n        return \"TAK\"\n    return \"NIE\"\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for x in stdin.split():\n        try:\n            if x == x[::-1]:\n                return \"TAK\"\n            else:\n                return \"NIE\"\n        except:\n            return \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    s = stdin.split()\n    for i in range(len(s)):\n        if s[i] == s[-i - 1]:\n            if s[i].isalpha():\n                answer = \"TAK\"\n            else:\n                answer = \"NIE\"\n    return answer"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return \"TAK\" if is_palindrome(s) else \"NIE\"\n\n\ndef"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    b = a[1]\n\n    a.sort()\n\n    while a and a[-1] > b:\n        a.pop()\n\n    if not a:\n        return \"0\"\n\n    return str(a[-1]) + solution(str(a[:-1]))"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    a = list(map(int, list(str(a))))\n    b = list(map(int, list(str(b))))\n    a_num = 0\n    b_num = 0\n    for i in range(len(a)):\n        a_num += a[i]*10**(len(a)-i-1)\n    for i in range(len(b)):\n        b_num += b[i]*10**(len(b)-i-1)\n    if a_num > b_num:\n        return str(a_num)\n    return str(b_num)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    n = len(a)\n    a = list(map(int, a))\n    b = int(b)\n    \n    # a.sort()\n    a.sort(reverse=True)\n    print(a)\n    for i in range(n):\n        if a[i] < b:\n            b = b - a[i]\n        else:\n            break\n    print(b)\n    # return ''.join(map(str, a))\n    \n    \nsolution(input())\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = str(a) + str(b)\n    m = int(max(s))\n    s = s.replace(str(m), \"0\")\n    return s"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    a, b = map(int, stdin.split())\n    def permute(a, b, digits):\n        '''\n        (a, b, digits) -> str\n        '''\n        if a == 0:\n            return '0'\n        if a == 1:\n            return '1'\n\n        if a < b:\n            if a >= 10:\n                return '0'\n            return '0' + str(a)\n        else:\n            return str(a)\n        for digit in digits:\n            # print(digit)\n            if a < 10:\n                a = str(a)\n            if digit not in a:\n                a = a.replace(str(digit), '', 1)\n                if a == '':\n                    a = 0\n                # print(a)\n        return permute(int(a), b, digits)\n    return permute(a, b, range(10))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    max_no = int(a)\n    min_no = int(b)\n    if min_no > max_no:\n        return \"0\"\n    str1 = str(max_no)\n    for i in range(len(str1)):\n        if str1[i] == \"0\":\n            str1 = str1[:i] + str1[i+1:]\n            break\n    str1 = \"\".join(sorted(str1))\n    while max_no > min_no:\n        if int(str1) <= min_no:\n            min_no = int(str1) + 1\n        else:\n            return str(min_no)\n    return str(int(str1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(a)\n    for i in range(len(a)):\n        if a[i] == '0':\n            continue\n        for j in range(i, len(a)):\n            if a[j] == '0':\n                continue\n            a[i], a[j] = a[j], a[i]\n            break\n    return ''.join(a) + b"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    \n    digits = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    while True:\n        if len(str(a)) == 1:\n            a = 10*a\n            \n        if a <= b:\n            return str(a)\n        else:\n            new_a = []\n            for digit in str(a):\n                new_a.append(digits[digit])\n            new_a.sort(reverse=True)\n            a = int(''.join(str(e) for e in new_a))\n\nsolution('123')\n\nsolution('1')\n\nsolution('0')\n\nsolution('4940')\n\nsolution('4900')\n\nsolution('4904')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\nsolution('4900')\n\ns"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 10:\n        return '0'\n    A = list(str(N))\n    digits = {}\n    for i in range(len(A)):\n        if A[i] in digits:\n            digits[A[i]] += 1\n        else:\n            digits[A[i]] = 1\n    # print(digits)\n    i = 0\n    while i < len(A):\n        if A[i] in digits:\n            if digits[A[i]] > 1:\n                digits[A[i]] -= 1\n                del A[i]\n                i -= 1\n        i += 1\n    for k in digits.keys():\n        if digits[k] == 1:\n            A.remove(k)\n    # print(A)\n    A = list(map(int, A))\n    print(A)\n    A.sort()\n    print(A)\n    return ''.join(map(str, A))\nsolution(input())\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.strip().split()))\n    a = list(str(lst[0]))\n    b = list(str(lst[1]))\n    b.sort()\n    ans = []\n    for i in range(len(a)):\n        ans.append(a[i])\n    for i in range(len(b)):\n        ans.append(b[i])\n    ans.sort()\n    return str(ans[0]) + '0' + str(ans[-1])\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if not search(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    while stdin.find('..')!= -1:\n        stdin = stdin.replace('..', '.', 1)\n    matrix = list(stdin)\n    # matrix = stdin.split('.')\n    # if len(matrix) == 0:\n    #     print('NO')\n    # else:\n    #     print('YES')\n    cross_count = 0\n    # print(matrix)\n    for row in range(len(matrix)):\n        for col in range(len(matrix[row])):\n            # print(row, col)\n            # print(matrix[row][col], 'i')\n            if matrix[row][col] == 'X':\n                if check_horizontal(row, col, matrix, cross_count):\n                    cross_count += 1\n                elif check_vertical(row, col, matrix, cross_count):\n                    cross_count += 1\n                elif check_diagonal(row, col, matrix, cross_count):\n                    cross_count += 1\n    if cross_count < 2:\n        return 'NO'\n    else:\n        return 'YES'\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    field = stdin.strip().split('\\n')\n    for i in range(1, len(field)):\n        if field[i].count('.')!= 1:\n            return 'NO'\n        elif field[0][i] == field[i][0] == '.':\n            continue\n        else:\n            return 'YES'"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = {str((i, j)): [] for i in range(n) for j in range(m)}\n    l = {}\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == 'O':\n                l[str((i, j))] = True\n            elif stdin[i][j] == 'X':\n                l[str((i, j))] = False\n            else:\n                pass\n    for i in l:\n        for j in l:\n            if l[i]!= l[j]:\n                d[i].append(j)\n    if '.' not in d:\n        return 'NO'\n    for i in d:\n        if len(d[i]) <= 5:\n            return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [[] for i in range(len(stdin))]\n    for i in range(len(stdin)):\n        for j in range(len(stdin[i])):\n            if stdin[i][j]!= '.':\n                matrix[i].append(stdin[i][j])\n    def is_win(m, i, j):\n        if m[i][j] == m[i][j + 1] == m[i][j + 2] == m[i][j + 3] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'O':\n            return True\n        if m[i][j] == m[i][j + 1] == m[i][j + 2] == m[i][j + 3] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j] == m[i + 2][j] == m[i + 3][j] == m[i + 4][j] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j] == m[i + 2][j] == m[i + 3][j] == m[i + 4][j] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j] == m[i + 2][j + 1] == m[i + 3][j + 2] == m[i + 4][j + 3] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j] == m[i + 2][j + 1] == m[i + 3][j + 2] == m[i + 4][j + 3] == 'X':\n            return True\n        if m[i][j] == m[i + 1][j + 1] == m[i + 2][j + 2] == m[i + 3][j + 3] == m[i + 4][j + 4] == 'X':\n            return True\n        return False\n    def solve(m, i):\n        if i == len(m) - 1:\n            if not is_win(m, 0, 0):\n                return False\n            else:\n                return True\n        if not is_win(m, i, 0):\n            return solve(m, i + 1)\n        if not is_win(m, i, 1):\n            return solve(m, i + 1)\n        if not is_win(m, i, 2):\n            return solve(m, i + 1)\n        if not is_win(m, i, 3):\n            return solve(m, i + 1)\n        if not is_win(m, i, 4):\n            return solve(m, i + 1)\n        if not is_win(m, i, 5):\n            return solve(m, i + 1)\n        if not is_win(m, i, 6):\n            return solve(m, i + 1)\n        if not is_win(m, i, 7):\n            return solve(m, i + 1)\n        if not is_win(m, i, 8):\n            return solve(m, i + 1)\n        return False\n    if solve(matrix, 0):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.split('\\n')\n    crosses = 0\n    noughts = 0\n    for row in matrix:\n        crosses += row.count('X')\n        noughts += row.count('O')\n    if crosses < noughts:\n        return \"NO\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i!= j and matrix[i][j] == '.':\n                if j > i:\n                    if (i + 1) % 10 == j:\n                        if (j + 1) % 10 == i:\n                            return \"YES\"\n                    elif (i + 1) % 10 == j:\n                        if (j - 1) % 10 == i:\n                            return \"YES\"\n                else:\n                    if (i - 1) % 10 == j:\n                        if (j + 1) % 10 == i:\n                            return \"YES\"\n                    elif (i - 1) % 10 == j:\n                        if (j - 1) % 10 == i:\n                            return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    alice_crosses = 0\n    alice_noughts = 0\n    bob_crosses = 0\n    bob_noughts = 0\n    for row in rows:\n        row = row.strip()\n        alice_crosses += row.count('X')\n        alice_noughts += row.count('O')\n        bob_crosses += row.count('O')\n        bob_noughts += row.count('X')\n    if alice_crosses <= bob_noughts and alice_noughts <= bob_crosses:\n        return 'NO'\n    if alice_crosses >= bob_noughts and alice_noughts >= bob_crosses:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    cells = stdin.count(\".\")\n    crosses = stdin.count(\"X\")\n    noughts = stdin.count(\"O\")\n    if not crosses or not noughts:\n        return \"NO\"\n    if n < crosses:\n        return \"NO\"\n    if n < crosses + noughts:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    matrix = []\n    matrix_row = []\n    for i in range(10):\n        matrix.append(stdin[i*10:(i+1)*10])\n    for row in range(10):\n        matrix_row = []\n        for col in range(10):\n            matrix_row.append(matrix[row][col])\n        if matrix_row.count('X') == matrix_row.count('O') and matrix_row.count('.') == 1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [[0] * n for _ in range(n)]\n    def gcd(a: list, b: list) -> list:\n        if a == b:\n            return a\n        if a[0] == 0:\n            return a\n        if b[0] == 0:\n            return b\n        r = a\n        r = r[1:]\n        q = b\n        q = q[1:]\n        while r and q:\n            if r[0] % q[0] == 0:\n                return q\n            if q[0] % r[0] == 0:\n                return r\n            if r[0] > q[0]:\n                r = r[1:]\n            else:\n                q = q[1:]\n        return gcd(a, q)\n    \n    for i in range(1, n):\n        for j in range(i):\n            if gcd(a[i], a[j])!= 1:\n                a = a[:j] + a[j + 1:]\n                break\n        else:\n            for j in range(n):\n                if gcd(a[i], a[j])!= 1:\n                    a[i] = a[i] + a[j]\n                    break\n    if len(a) == k:\n        return str(a).replace(\" \", \"\")\n    else:\n        return \"-\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 0 or n == 1 or k == 0:\n        return -1\n    res = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            if i == j:\n                row.append(1)\n            else:\n                row.append(0)\n        res.append(row)\n    if k > (n + n - 2) ** 2 or k > (n + n - 1) ** 2 or k > (n + n - 1) ** 2:\n        return -1\n    elif k == 0:\n        return str(res)\n    else:\n        i, j = 0, 0\n        while True:\n            if i == j + k - 1:\n                res[i][j] = 1\n                break\n            if res[i][j] == 1:\n                j += 1\n                if j == k:\n                    break\n                continue\n            elif res[i][j] == 0:\n                res[i][j] = 1\n                i += 1\n                if i == k:\n                    break\n                continue\n    for i in range(n):\n        res[i] = str(res[i])\n        res[i] = res[i].replace(\",\", \"\")\n        res[i] = res[i].replace(\"[\", \"\")\n        res[i] = res[i].replace(\"]\", \"\")\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    def fill(x, y, n):\n        if n == 0:\n            matrix[x][y] = 1\n            return\n        if n % 2 == 0:\n            if matrix[x][y]!= 1:\n                fill(x, y + 1, n // 2)\n                fill(x, y - 1, n // 2)\n                fill(x + 1, y, n // 2)\n                fill(x - 1, y, n // 2)\n        else:\n            if matrix[x][y]!= 1:\n                matrix[x][y] = 1\n                fill(x, y + 1, n // 2)\n                fill(x, y - 1, n // 2)\n                fill(x - 1, y, n // 2)\n                fill(x + 1, y, n // 2)\n\n    fill(0, 0, n)\n\n    result = ''\n    for row in matrix:\n        for elem in row:\n            result += str(elem)\n    return result\n\n\nsolution(input())\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        print(1, k)\n        return\n    if k == n - 1:\n        print(1, n - 1)\n        return\n    if k < n - 1:\n        return\n    if k > n - 1:\n        return\n    a = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        a[i][i] = 1\n    l, r = 0, 0\n    while l < n:\n        while r < n:\n            if a[l][r] == 1:\n                a[l][r] = 0\n            r += 1\n        l += 1\n        r = 0\n    if a == [[1]] or a == [[1, 0], [0, 1]]:\n        print(*a)\n        return\n    print('-1')\n\nsolution(input())\n\n\ndef"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = stdin.rstrip()\n    # n, k = map(int, stdin.split())\n    # matrix = []\n    # for _ in range(n):\n    #     matrix.append(stdin.split())\n    #\n    # if len(matrix) == 1:\n    #     if int(matrix[0][0]) == 1 and int(matrix[0][1]) == 1:\n    #         return '1 0'\n    #     else:\n    #         return '-1'\n    # else:\n    #     flag = True\n    #     if int(matrix[0][0])!= 1:\n    #         for i in range(1, len(matrix)):\n    #             if int(matrix[i][0])!= 1:\n    #                 flag = False\n    #                 break\n    #     if flag:\n    #         for i in range(1, len(matrix)):\n    #             for j in range(1, len(matrix[i])):\n    #                 if int(matrix[i][j])!= int(matrix[j][i]):\n    #                     flag = False\n    #                     break\n    #     if flag:\n    #         return '1 0'\n    #     else:\n    #         return '-1'\n    #\n    #     return '1 0' if 1 <= matrix[0][0] <= 100 and 1 <= matrix[0][1] <= 100 and 1 <= matrix[1][0] <= 100 and 1 <= matrix[1][1] <= 100 and 1 <= matrix[2][0] <= 100 and 1 <= matrix[2][1] <= 100 and 1 <= matrix[3][0] <= 100 and 1 <= matrix[3][1] <= 100 else '-1'\n\n    n, k = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split())\n    if len(matrix) == 1:\n        if int(matrix[0][0]) == 1 and int(matrix[0][1]) == 1:\n            return '1 0'\n        else:\n            return '-1'\n    else:\n        flag = True\n        if int(matrix[0][0])!= 1:\n            for i in range(1, len(matrix)):\n                if int(matrix[i][0])!= 1:\n                    flag = False\n                    break\n        if flag:\n            for i in range(1, len(matrix)):\n                for j in range(1, len(matrix[i])):\n                    if int(matrix[i][j])!= int(matrix[j][i]):\n                        flag = False\n                        break\n        if flag:\n            return '1 0'\n        else:\n            return '-1'\n\n    return '1 0' if 1 <= matrix[0][0] <= 100 and 1 <= matrix[0][1] <= 100 and 1 <= matrix[1][0] <= 100 and 1 <= matrix[1][1] <= 100 and 1 <= matrix[2][0] <= 100 and 1 <= matrix[2][1] <= 100 and 1 <= matrix[3][0] <= 100 and 1 <= matrix[3][1] <= 100 else '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    if n == 1 and k == 0:\n        return '1 0'\n    else:\n        return '1 0'\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    matrix = [[0] * n for i in range(n)]\n\n    if n == 1:\n        return str(1)\n\n    for i in range(k):\n        matrix[i][i] = 1\n    if k % 2 == 0:\n        if k == 0:\n            return str(-1)\n        if k == 2:\n            return str(1)\n        for i in range(k - 2):\n            matrix[i][i + 2] = 1\n\n    if k % 2!= 0:\n        if k == 1:\n            return str(1)\n        if k == 3:\n            return str(0)\n\n    for i in range(k):\n        for j in range(n):\n            matrix[i][j] = matrix[i][j] + matrix[i + 1][j]\n    for i in range(n):\n        matrix[n - 1][i] = matrix[n - 2][i]\n\n    result = []\n    for i in range(n):\n        result.append(' '.join([str(j) for j in matrix[i]]))\n    return '\\n'.join(result)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return '1 0\\n0 0'\n    if n == 2:\n        return '1 0 0 0\\n0 1 0 0\\n0 0 0 0'\n    rows = list(map(int, stdin.split()))\n    max_val = 0\n    for row in rows:\n        if row > max_val:\n            max_val = row\n    if max_val * 2!= k:\n        return '-1'\n    ans = [[0] * n for _ in range(n)]\n    for i in range(n):\n        ans[i][i] = rows[i]\n        if i!= 0:\n            ans[i][i-1] = rows[i]\n    for i in range(n-1):\n        ans[i][n-1-i] = rows[n-1-i]\n    for i in range(n):\n        for j in range(n-1):\n            if ans[i][j] == ans[i][n-1-j]:\n                ans[i][j] = 0\n            else:\n                ans[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if ans[i][j]!= 0:\n                print(ans[i][j], end='')\n            else:\n                print('0', end='')\n        print()\n    return ''\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m1 = [[0] * n for _ in range(n)]\n    m2 = [[0] * n for _ in range(n)]\n    for i in range(n):\n        m1[i][i] = 1\n        m2[i][i] = 1\n        for j in range(i + 1, n):\n            m1[i][j] = 0\n            m2[i][j] = 0\n    for _ in range(k):\n        x = int(input())\n        for i in range(n):\n            m1[i][i] += x\n            m2[i][i] += x\n    for i in range(n):\n        for j in range(n):\n            if m1[i][j]!= m2[i][j]:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    matrix = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                matrix[i][j] = 1\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if matrix[i][j] == 1:\n            k -= 1\n            if k <= 0:\n                print(1)\n                for i in range(n):\n                    for j in range(n):\n                        print(matrix[i][j], end=' ')\n                    print()\n                return\n        i += 1\n        j += 1\n    print(-1)\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=' ')\n        print()\n    return\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    max_x, max_y = x ** y, x ** z\n    max_x_y, max_x_z, max_y_x, max_y_z, max_z_x, max_z_y = x ** y, x ** z, y ** x, y ** z, z ** x, z ** y\n    max_list = [max_x, max_y, max_z, max_x_y, max_x_z, max_y_x, max_y_z, max_z_x, max_z_y]\n    return max_list.index(max(max_list))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'x^y^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = stdin.split()\n    a1, a2, a3 = float(a1), float(a2), float(a3)\n    if a1**a2**a3 == 1:\n        print(a1*a2*a3)\n    elif a1**a3**a2 == 1:\n        print(a1*a3*a2)\n    elif a2**a1**a3 == 1:\n        print(a2*a1*a3)\n    elif a2**a3**a1 == 1:\n        print(a2*a3*a1)\n    elif a3**a1**a2 == 1:\n        print(a3*a1*a2)\n    elif a3**a2**a1 == 1:\n        print(a3*a2*a1)\n    else:\n        print(a1*a2*a3)\n    return a1*a2*a3\n    #return str(a1**a2**a3)"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(float, stdin.split()))\n    x, y, z = num_list\n\n    a_1 = x ** y ** z\n    a_2 = x ** z ** y\n    a_3 = (x ** y) ** z\n    a_4 = (x ** z) ** y\n    a_5 = y ** x ** z\n    a_6 = y ** z ** x\n    a_7 = (y ** x) ** z\n    a_8 = (y ** z) ** x\n    a_9 = z ** x ** y\n    a_10 = z ** y ** x\n    a_11 = (z ** x) ** y\n    a_12 = (z ** y) ** x\n\n    # Find maximums of a_i, and store their index\n    a_list = list(map(float, str(a_1)))\n    index_list = []\n    for i in range(len(a_list)):\n        if a_list[i] == max(a_list):\n            index_list.append(i + 1)\n    print(index_list)\n\n    if len(index_list) == 1:\n        return str(a_1)\n    elif len(index_list) == 2:\n        return str(a_1) + \" \" + str(a_2)\n    elif len(index_list) == 3:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3)\n    elif len(index_list) == 4:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4)\n    elif len(index_list) == 5:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5)\n    elif len(index_list) == 6:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6)\n    elif len(index_list) == 7:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6) + \" \" + str(a_7)\n    elif len(index_list) == 8:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6) + \" \" + str(a_7) + \" \" + str(a_8)\n    elif len(index_list) == 9:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6) + \" \" + str(a_7) + \" \" + str(a_8) + \" \" + str(a_9)\n    elif len(index_list) == 10:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6) + \" \" + str(a_7) + \" \" + str(a_8) + \" \" + str(a_9) + \" \" + str(a_10)\n    elif len(index_list) == 11:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6) + \" \" + str(a_7) + \" \" + str(a_8) + \" \" + str(a_9) + \" \" + str(a_10) + \" \" + str(a_11)\n    elif len(index_list) == 12:\n        return str(a_1) + \" \" + str(a_2) + \" \" + str(a_3) + \" \" + str(a_4) + \" \" + str(a_5) + \" \" + str(a_6) + \" \" + str(a_7) + \" \" + str(a_8) + \" \" + str(a_9) + \" \" + str(a_10) + \" \" + str(a_11) + \" \" + str(a_12)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.strip().split())\n    if x > z or y > z:\n        if x > y or x > z:\n            if x > y:\n                if x > z:\n                    print(f'{x**y}^{z}')\n                else:\n                    print(f'{x**z}^{y}')\n            else:\n                if y > z:\n                    print(f'{y**x}^{z}')\n                else:\n                    print(f'{y**z}^{x}')\n        else:\n            if z > y:\n                if z > x:\n                    print(f'{z**y}^{x}')\n                else:\n                    print(f'{z**x}^{y}')\n            else:\n                if y > x:\n                    print(f'{y**z}^{x}')\n                else:\n                    print(f'{y**x}^{z}')\n    else:\n        if x > y:\n            if x > z:\n                print(f'{x**y}^{z}')\n            else:\n                print(f'{x**z}^{y}')\n        else:\n            if y > z:\n                print(f'{y**x}^{z}')\n            else:\n                print(f'{y**z}^{x}')"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_max(x,y,z):\n        return x**y**z\n    s = stdin.split()\n    return ''.join([get_max(int(s[i]),int(s[i+1]),int(s[i+2])) for i in range(0,len(s),3)])\n\nstdin = '1.1 3.4 2.5'\nprint(solution(stdin))\nstdin = '2.0 2.0 2.0'\nprint(solution(stdin))\nstdin = '1.9 1.8 1.7'\nprint(solution(stdin))"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return 'x^y^z'\n    elif a == b or a == c:\n        return 'x^y^z'\n    elif a == c:\n        return 'x^z^y'\n    elif b == c:\n        return 'x^z^y'\n    elif a == c:\n        return 'y^x^z'\n    elif b == c:\n        return 'y^x^z'\n    elif a == b:\n        return 'y^x^z'\n    elif a == b:\n        return 'y^z^x'\n    elif b == c:\n        return 'y^z^x'\n    elif a == c:\n        return 'z^x^y'\n    elif b == c:\n        return 'z^x^y'\n    elif a == b:\n        return 'z^y^x'\n    elif a == b:\n        return 'z^y^x'\n    else:\n        return 'x^y^z'\n    \"\"\"\n    \n    # return str(math.pow(a, b, c))\n    \n    a = math.pow(a, b)\n    b = math.pow(b, a)\n    c = math.pow(c, a)\n    a = math.pow(a, c)\n    b = math.pow(b, c)\n    a = math.pow(a, b)\n    return str(a)"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split('\\n')\n    input_ = [s.strip().split() for s in input_]\n    x = [float(s[0]) for s in input_]\n    y = [float(s[1]) for s in input_]\n    z = [float(s[2]) for s in input_]\n    x = max(x)\n    y = max(y)\n    z = max(z)\n    c = 1\n    while c < 13:\n        if c == 1:\n            print('a_1 =', x ** y ** z)\n        elif c == 2:\n            print('a_2 =', x ** z ** y)\n        elif c == 3:\n            print('a_3 =', (x ** y) ** z)\n        elif c == 4:\n            print('a_4 =', (x ** z) ** y)\n        elif c == 5:\n            print('a_5 =', y ** x ** z)\n        elif c == 6:\n            print('a_6 =', y ** z ** x)\n        elif c == 7:\n            print('a_7 =', (y ** x) ** z)\n        elif c == 8:\n            print('a_8 =', (y ** z) ** x)\n        elif c == 9:\n            print('a_9 =', z ** x ** y)\n        elif c == 10:\n            print('a_10 =', z ** y ** x)\n        elif c == 11:\n            print('a_11 =', (z ** x) ** y)\n        elif c == 12:\n            print('a_12 =', (z ** y) ** x)\n        c += 1\n    return 'a_' + str(c - 1) +'='+ str(x ** y ** z)"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n\n    a_1 = x ** y ** z\n    a_2 = x ** z ** y\n    a_3 = (x ** y) ** z\n    a_4 = (x ** z) ** y\n    a_5 = y ** x ** z\n    a_6 = y ** z ** x\n    a_7 = (y ** x) ** z\n    a_8 = (y ** z) ** x\n    a_9 = z ** x ** y\n    a_10 = z ** y ** x\n    a_11 = (z ** x) ** y\n    a_12 = (z ** y) ** x\n    m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n    c = 1\n    while c!= 12:\n        if a_1 == m:\n            return str(a_1)\n        a_1 = a_1 * x ** (y - 1)\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_2 == m:\n            return str(a_2)\n        a_2 = a_2 * y ** (x - 1)\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_3 == m:\n            return str(a_3)\n        a_3 = a_3 * (x ** (y - 1)) * z\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_4 == m:\n            return str(a_4)\n        a_4 = a_4 * (x ** z) * y\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_5 == m:\n            return str(a_5)\n        a_5 = a_5 * (y ** (x - 1)) * z\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_6 == m:\n            return str(a_6)\n        a_6 = a_6 * (y ** z) * x\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_7 == m:\n            return str(a_7)\n        a_7 = a_7 * (x ** (y - 1)) * z\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_8 == m:\n            return str(a_8)\n        a_8 = a_8 * (x ** z) * y\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_9 == m:\n            return str(a_9)\n        a_9 = a_9 * (y ** (x - 1)) * z\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_10 == m:\n            return str(a_10)\n        a_10 = a_10 * (y ** z) * x\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_11 == m:\n            return str(a_11)\n        a_11 = a_11 * (x ** (y - 1)) * z\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n        if a_12 == m:\n            return str(a_12)\n        a_12 = a_12 * (x ** z) * y\n        m = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n    return str(m)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    l = max(a,b,c)\n    for i in range(1,12):\n        if l == a**i:\n            print(\"(\", end=\"\")\n            print(a**i, end=\"\")\n            print(\")^\", end=\"\")\n            print(i)\n            break\n    return stdout\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u0443\u044e \u0446\u0435\u043f\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n    \"\"\"\n    return str(len(stdin) * (len(stdin) + 1) // 2)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin) + 1)\n    return stdin + stdin\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    out = \"\"\n    while True:\n        inp = stdin.replace(out, \"\")\n        if len(inp) == size:\n            return len(inp)\n        out = inp\n        \n    \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(len(stdin))\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def txt(stdin):\n        return stdin.lower()\n    stdin = stdin.strip()\n    \n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    r = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    \n    for i in range(len(stdin)):\n        if stdin[i] == \"a\":\n            a += 1\n        if stdin[i] == \"b\":\n            b += 1\n        if stdin[i] == \"c\":\n            c += 1\n        if stdin[i] == \"d\":\n            d += 1\n        if stdin[i] == \"e\":\n            e += 1\n        if stdin[i] == \"f\":\n            f += 1\n        if stdin[i] == \"g\":\n            g += 1\n        if stdin[i] == \"h\":\n            h += 1\n        if stdin[i] == \"i\":\n            i += 1\n        if stdin[i] == \"j\":\n            j += 1\n        if stdin[i] == \"k\":\n            k += 1\n        if stdin[i] == \"l\":\n            l += 1\n        if stdin[i] == \"m\":\n            m += 1\n        if stdin[i] == \"n\":\n            n += 1\n        if stdin[i] == \"o\":\n            o += 1\n        if stdin[i] == \"p\":\n            p += 1\n        if stdin[i] == \"q\":\n            q += 1\n        if stdin[i] == \"r\":\n            r += 1\n        if stdin[i] == \"s\":\n            s += 1\n        if stdin[i] == \"t\":\n            t += 1\n        if stdin[i] == \"u\":\n            u += 1\n        if stdin[i] == \"v\":\n            v += 1\n        if stdin[i] == \"w\":\n            w += 1\n        if stdin[i] == \"x\":\n            x += 1\n        if stdin[i] == \"y\":\n            y += 1\n        if stdin[i] == \"z\":\n            z += 1\n    \n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z)\n\nprint(solution(input()))\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        ans = 3\n        while ans <= n:\n            if ans % 2 == 0:\n                ans += 1\n            else:\n                ans += 2\n        return ans\n    \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns: The minimal number of operations needed to type string stdin\n    \"\"\"\n    # Your code here\n    return stdin"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = len(stdin), stdin\n    q = collections.deque([(s, 0)])\n    while q:\n        s, cnt = q.popleft()\n        if not s:\n            return cnt\n        for i in range(1, min(len(s) + 1, n)):\n            new_s = s[:i] + s[i:]\n            if new_s!= s:\n                q.append((new_s, cnt + 1))\n    return cnt + 1\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    return len(string)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  b = ['0'] * n\n  for i in range(n):\n    t = stdin.split()[i]\n    if int(t[0]) > n:\n      raise Exception\n    b[int(t[0]) - 1] = t[1]\n  return \"\\n\".join([\"move \" + i + \" \" + j for i, j in enumerate(b)])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = dict()\n    for i in range(1, n+1):\n        d[i] = 0\n    s = []\n    for i in range(n):\n        name, type = stdin.split(\" \")\n        if type == \"1\":\n            d[int(name)] = len(s)\n            s.append(name)\n        else:\n            d[int(name)] = i + 1\n            s.append(i + 1)\n    s.sort()\n    for i in range(len(s)):\n        if i == d[s[i]]:\n            print(i+1, end=\" \")\n        else:\n            print(s[i], end=\" \")\n    print()\n    return stdin\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        stdin: lines as a string of input\n    Output:\n        the minimum number of lines in the solution\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    test_count = 1\n    for i in range(1, n+1):\n        if stdin.splitlines()[i][0] == '1':\n            test_count += 1\n    script_count = 1\n    move_count = 1\n    for i in range(1, n+1):\n        if stdin.splitlines()[i][0] == '1':\n            script_count += 1\n        else:\n            script_count += 1\n            move_count += 1\n            script_count = 1\n        if i % test_count == 0:\n            script_count += 1\n    script_count = 1\n    move_count = 1\n    for i in range(1, n+1):\n        if stdin.splitlines()[i][0] == '1':\n            script_count += 1\n        else:\n            script_count += 1\n            move_count += 1\n            script_count = 1\n        if i % test_count == 0:\n            move_count += 1\n    print(min(script_count, move_count))\n    for i in range(1, n+1):\n        if stdin.splitlines()[i][0] == '1':\n            print('move'+ str(i) +'' + str(i+test_count))\n        else:\n            print('move'+ str(i) +'' + str(i+test_count))\n    return ''\n    "
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for i in range(1, len(lines)):\n        lines[i] = lines[i].split()\n    lines = sorted(lines, key=lambda x: (x[0], x[1]))\n    cnt = 0\n    result = []\n    for i in range(len(lines) - 1):\n        if lines[i][1]!= lines[i + 1][1]:\n            result.append(lines[i])\n            result.append(lines[i + 1])\n            cnt += 1\n        else:\n            result.append(lines[i + 1])\n    result.append(lines[-1])\n    return str(cnt) + '\\n' + '\\n'.join('move'+ x[0] +'' + x[1] + '\\n' for x in result)\n\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    files = {i: {'ex': False,'reg': False} for i in range(1, n + 1)}\n\n    for i in range(1, n + 1):\n        filename, typ = stdin.split()[i].split(' ')\n        files[i] = {'ex': True if typ == '1' else False,'reg': True if typ == '0' else False, 'filename': filename}\n\n    examples = 0\n    regs = 0\n    for i in range(1, n + 1):\n        if files[i]['ex']:\n            examples += 1\n        if files[i]['reg']:\n            regs += 1\n\n    min_to_write = 0\n\n    if examples == 0:\n        return f'{min_to_write + regs}'\n\n    elif regs == 0:\n        if examples == 1:\n            min_to_write = min(examples, 1)\n        else:\n            min_to_write = 1\n        for i in range(examples, n):\n            if files[i + 1]['ex']:\n                return 'wrong'\n\n        return f'{min_to_write}'\n\n    else:\n        files_by_examples = []\n\n        for i in range(1, n + 1):\n            if files[i]['ex']:\n                files_by_examples.append(files[i])\n        files_by_examples.sort(key=lambda x: x['filename'])\n\n        min_to_write = 1\n        for file in files_by_examples:\n            min_to_write += 1\n            if examples == 1:\n                break\n            elif file['filename'] == files_by_examples[examples - 1]['filename']:\n                continue\n            else:\n                min_to_write = 1\n        return f'{min_to_write}'\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    return min(len(line) for line in lines)\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_ex = n - 1\n    for i in range(n):\n        if stdin[i] == \"1\":\n            n_ex -= 1\n    s = \"move {} {}\\n\".format(1, n_ex)\n    for i in range(n):\n        if stdin[i] == \"0\":\n            s += \"move {} {}\\n\".format(n_ex, n_ex + 1 + (n_ex + 1) * (n_ex + 1) // 2)\n            n_ex += 1\n    return s\n\n\nsolution(\"01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\")\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 0\n    if n == 1:\n        result = 2\n    else:\n        for i in range(1, n+1):\n            if i <= (n - 1):\n                result += (i * (i - 1)) / 2\n            else:\n                result += 1\n    return str(result)"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # min_count = float('inf')\n    # max_count = float('-inf')\n    #\n    # for num in stdin:\n    #     if num == '0':\n    #         min_count += 1\n    #     else:\n    #         max_count += 1\n    #\n    # return str(min(min_count, max_count))\n    # use the following line to get the result\n    # return min(min(stdin), max(stdin))\n    return str(min(int(''.join(stdin[:3])), int(''.join(stdin[-3:]))))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.replace(\"0\", \"\", 1)\n  return stdin\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length == 6:\n        if sum([int(x) for x in stdin[:3]]) == sum([int(x) for x in stdin[3:]]):\n            return 0\n    return length-1\n\n\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    sum1 = 0\n    sum2 = 0\n    for i in range(3):\n        sum1 += int(stdin[i])\n    for i in range(3, 6):\n        sum2 += int(stdin[i])\n    if sum1 == sum2:\n        return \"0\"\n    else:\n        return str(sum1 - sum2)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin[:3], stdin[3:]\n    s = (int(l[0]) + int(l[1]) + int(l[2]) + int(r[0]) + int(r[1]) + int(r[2])) % 10\n    return str(abs(int(l[3]) - s) + abs(int(r[3]) - s))\n\n\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin.split(\" \")\n    ticket = list(map(int, ticket))\n    for i in range(3):\n        ticket[i] = ticket[i] - ticket[i+3]\n    ticket = str(ticket[0] * 1000 + ticket[1] * 100 + ticket[2])\n    return ticket\n\nprint(solution(input()))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tickets = stdin\n    if tickets[0] == '0':\n        return '0'\n    l, r = 0, 5\n    while l <= r:\n        mid = (l + r) // 2\n        if tickets[:mid] == ''.join(sorted(tickets[:mid])):\n            l = mid + 1\n        else:\n            r = mid - 1\n    return str(l - 3)\nprint(solution('000000'))\nprint(solution('123456'))\nprint(solution('111000'))\nprint(solution('123456789'))\nprint(solution('1234456789'))\nprint(solution('123456789000'))\nprint(solution('12345678900088'))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin.split()\n    if len(ticket)!= 6:\n        return -1\n    ticket.sort(reverse=True)\n    ticket_first_3 = ticket[:3]\n    ticket_last_3 = ticket[3:]\n    sum_ticket_first_3 = sum(int(i) for i in ticket_first_3)\n    sum_ticket_last_3 = sum(int(i) for i in ticket_last_3)\n    if sum_ticket_first_3!= sum_ticket_last_3:\n        return -1\n    return sum(int(i) for i in ticket) - sum_ticket_first_3\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    min_changes = 0\n    for i in range(len(stdin)-3):\n        first = int(stdin[i])\n        last = int(stdin[i+3])\n        if first + last == int(stdin[i+6]):\n            min_changes += 1\n    return str(min_changes)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(int((x - 1) // m) + 1)"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, m, x = stdin.split(' ')\n    m, x = int(m), int(x)\n    # print(m, x)\n    count = 0\n    while True:\n        if x % m == 0:\n            break\n        x = x // m + 1\n        count += 1\n    print(count)\n    return count\n\nsolution(\n'''4 3\n''')\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 2\\n')\n    '3'\n    >>> solution('4 3\\n')\n    '3'\n    >>> solution('5 2\\n')\n    '2'\n    >>> solution('2 2\\n')\n    '1'\n    '''\n    n, x = map(int, stdin.split())\n    ans = 1\n    if x == 0:\n        ans = 0\n    else:\n        while True:\n            if gcd(x, n) == 1:\n                ans += 1\n                break\n            x = (x * 10) % n\n    return str(ans)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example:\n    input: 4 3\n    output: 3\n    \"\"\"\n    m, x = map(int, stdin.split())\n    if m < x:\n        x -= (m - 1)\n        x %= m\n    if x % m == 0:\n        print(0)\n    else:\n        print(x % m)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(gcd(x, m))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(min(1, (x - 1) // m))"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    _, m, x = stdin.split(\" \")\n    m = int(m)\n    x = int(x)\n    #\n    # solve\n\n    return\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, m, x = stdin.split()\n    m = int(m)\n    x = int(x)\n    # base case\n    if m == 1:\n        return 0\n    # the GCD will be one, so there's no need to compute it\n    gcd = 1\n    for i in range(1, m):\n        if m % i == 0:\n            gcd = i\n            break\n    # since the GCD is one, there's no need to compute\n    # (x - 1) // gcd\n    # a more efficient way would be to just use modulo (x % gcd)\n    return (m - 1) // gcd + x\n\"\"\"\n\n\n\"\"\"\nSOLUTION\n\nLet's say a trap can be placed only in an even room. \n\nIf we make a list of all rooms in which the trap is placed, we can find out that a trap is placed in the first room. We can also see that the trap is placed in the second room and so on.\n\nThe list of all the traps can be constructed by finding the first even room, the second even room and so on.\n\nWe can use this list to check if there are any traps in any room of the campus.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    m, x = int(stdin[0]), int(stdin[1])\n    min_traps = m\n    \n    # since there are two different input lines\n    # we can just search in the range 1 to m-1\n    for i in range(1, m):\n        # if the current room is the same as x - teleport\n        if i == x:\n            min_traps += 1\n        # else if the current room is the same as the number mod x\n        elif i % x == 0:\n            min_traps += 1\n        # else we don't need any traps\n        else:\n            pass\n    \n    return str(min_traps)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, m, x = stdin.split()\n    m = int(m)\n    x = int(x)\n    if x >= m:\n        return str(0)\n    return str(x % m)\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(n):\n        return n[0]*2**n[1]\n    n,k=map(int,stdin.split(\" \"))\n    if k==1:\n        return str(calculate(n))\n    else:\n        return str(calculate(n))+\" \"+str(calculate(n))\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    mod = 10**6 + 3\n    r = pow(2, N, mod)\n    x = 1\n    for _ in range(K - 1):\n        x *= (r - x) % mod\n        x %= mod\n    return str(x) + \" \" + str(r)\n\n\nsolution(\"3 2\")\nsolution(\"1 3\")\nsolution(\"4 3\")\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin\n    A, B = 1, 1\n    while A!= int(a):\n        A = (A*7) % int(b)\n        B = (B*5) % int(b)\n    return str(A) + \" \" + str(B)\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    a = 1\n    b = 1\n    while a < (2**n):\n        for i in range(1, n+1):\n            a = a * 2 % (10**6 + 3)\n            b = b * 2 % (10**6 + 3)\n        if a % 2 == 0:\n            a = a // 2\n        else:\n            a = a * 2 % (10**6 + 3)\n        if b % 2 == 0:\n            b = b // 2\n        else:\n            b = b * 2 % (10**6 + 3)\n        if a == b:\n            return \"{} {}\".format(a, b)"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k == 1:\n        return \"1 1\"\n    else:\n        a = 1\n        b = 1\n        d = 1\n        while d == 1:\n            a = ((a*a+1)//2) % (10**6+3)\n            b = ((b*b+1)//2) % (10**6+3)\n            d = (a*a+1)//2\n        return str(a) + \" \" + str(b)\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    return str(modpow(2, n, 10**6 + 3))\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(range(1,2**n))\n    g = list(range(2, 2**n))\n    for i in range(k-1):\n        tmp = []\n        for j in range(len(a)):\n            tmp.append(a[j] % g[j])\n        a = tmp\n        g = list(g)\n        g[0] += 1\n        g = g[1:]\n        g = map(int,g)\n        g = list(g)\n    print(int(a[0]))\n    print(int(g[0]))\n    return \"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    #print(n, k)\n    #print(2 ** n)\n    a = 1\n    b = 1\n    for _ in range(k):\n        #print(a, b, a * b)\n        a, b = b, (a * b) % 10 ** 6 + 3\n    return str(a) + \" \" + str(b)\n\nsolution(input())\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    lst = list(range(2, n))\n    lst.append(2**n)\n    for _ in range(k):\n        lst = sorted(lst)\n        m = lst[-2:]\n        A = m[0] * m[1]\n        B = m[1] * m[0]\n        lst = lst[:-2]\n        if A % B == 0:\n            return f\"{A // B} {B}\"\n        return f\"{A} {B}\""
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = 1\n    q = 1\n    for i in range(1,n+1):\n        p *= i\n    for i in range(1,n+1):\n        q *= i\n    while(p > q):\n        q += 1\n    print((p//q)*(1+(q-1)/2)**k)\n    return str((p//q)*(1+(q-1)/2)**k)"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        t, d = stdin.split()\n        t = int(t)\n        if d in [\"North\", \"South\"]:\n            if d == \"North\" and t < 20000:\n                print(\"NO\")\n                return\n            if d == \"South\" and t < 20000:\n                print(\"NO\")\n                return\n        elif d in [\"West\", \"East\"]:\n            if d == \"West\" and t < 10000:\n                print(\"NO\")\n                return\n            if d == \"East\" and t < 10000:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    return\n\nfor _ in range(int(input())):\n    solution(input())\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 10 ** 6 or N < 1:\n        raise ValueError\n    for i in range(N):\n        t, dir_ = map(int, stdin.split())\n        if t > 10 ** 6 or t < 1:\n            raise ValueError\n        if dir_ not in {'North', 'South', 'East', 'West'}:\n            raise ValueError\n    return 'YES'"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def north_south():\n        t_north, t_south = map(int, stdin.split())\n        return t_north < t_south\n\n    def east_west():\n        t_east, t_west = map(int, stdin.split())\n        return t_west < t_east\n\n    def forward():\n        t, direction = map(str, stdin.split())\n        return direction == \"South\" if t == t_south else direction == \"North\"\n\n    return \"YES\" if north_south() and east_west() and forward() else \"NO\"\n\n\n\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\nsolution(\"7\")\nsolution(\"8\")\nsolution(\"9\")\nsolution(\"10\")\nsolution(\"11\")\nsolution(\"12\")\nsolution(\"13\")\nsolution(\"14\")\nsolution(\"15\")\nsolution(\"16\")\nsolution(\"17\")\nsolution(\"18\")\nsolution(\"19\")\nsolution(\"20\")\nsolution(\"21\")\nsolution(\"22\")\nsolution(\"23\")\nsolution(\"24\")\nsolution(\"25\")\nsolution(\"26\")\nsolution(\"27\")\nsolution(\"28\")\nsolution(\"29\")\nsolution(\"30\")\nsolution(\"31\")\nsolution(\"32\")\nsolution(\"33\")\nsolution(\"34\")\nsolution(\"35\")\nsolution(\"36\")\nsolution(\"37\")\nsolution(\"38\")\nsolution(\"39\")\nsolution(\"40\")\nsolution(\"41\")\nsolution(\"42\")\nsolution(\"43\")\nsolution(\"44\")\nsolution(\"45\")\nsolution(\"46\")\nsolution(\"47\")\nsolution(\"48\")\nsolution(\"49\")\nsolution(\"50\")\nsolution(\"51\")\nsolution(\"52\")\nsolution(\"53\")\nsolution(\"54\")\nsolution(\"55\")\nsolution(\"56\")\nsolution(\"57\")\nsolution(\"58\")\nsolution(\"59\")\nsolution(\"60\")\nsolution(\"61\")\nsolution(\"62\")\nsolution(\"63\")\nsolution(\"64\")\nsolution(\"65\")\nsolution(\"66\")\nsolution(\"67\")\nsolution(\"68\")\nsolution(\"69\")\nsolution(\"70\")\nsolution(\"71\")\nsolution(\"72\")\nsolution(\"73\")\nsolution(\"74\")\nsolution(\"75\")\nsolution(\"76\")\nsolution(\"77\")\nsolution(\"78\")\nsolution(\"79\")\nsolution(\"80\")\nsolution(\"81\")\nsolution(\"82\")\nsolution(\"83\")\nsolution(\"84\")\nsolution(\"85\")\nsolution(\"86\")\nsolution(\"87\")\nsolution(\"88\")\nsolution(\"89\")\nsolution(\"90\")\nsolution(\"91\")\nsolution(\"92\")\nsolution(\"93\")\nsolution(\"94\")\nsolution(\"95\")\nsolution(\"96\")\nsolution(\"97\")\nsolution(\"98\")\nsolution(\"99\")\nsolution(\"100\")\nsolution(\"101\")\nsolution(\"102\")\nsolution(\"103\")\nsolution(\"104\")\nsolution(\"105\")\nsolution(\"106\")\nsolution(\"107\")\nsolution(\"108\")\nsolution(\"109\")\nsolution(\"110\")\nsolution(\"111\")\nsolution(\"112\")\nsolution(\"113\")\nsolution(\"114\")\nsolution(\"115\")\nsolution(\"116\")\nsolution(\"117\")\nsolution(\"118\")\nsolution(\"119\")\nsolution(\"120\")\nsolution(\"121\")\nsolution(\"122\")\nsolution(\"123\")\nsolution(\"124\")\nsolution(\"125\")\nsolution(\"126\")\nsolution(\"127\")\nsolution(\"128\")\nsolution(\"129\")\nsolution(\"130\")\nsolution(\"131\")\nsolution(\"132\")\nsolution(\"133\")\nsolution(\"134\")\nsolution(\"135\")\nsolution(\"136\")\nsolution(\"137\")\nsolution(\"138\")\nsolution(\"139\")\nsolution(\"140\")\nsolution(\"141\")\nsolution(\"142\")\nsolution(\"143\")\nsolution(\"144\")\nsolution(\"145\")\nsolution(\"146\")\nsolution(\"147\")\nsolution(\"148\")\nsolution(\"149\")\nsolution(\"150\")\nsolution(\"151\")\nsolution(\"152\")\nsolution(\"153\")\nsolution(\"154\")\nsolution(\"155\")\nsolution(\"156\")\nsolution(\"157\")\nsolution(\"158\")\nsolution(\"159\")\nsolution(\"160\")\nsolution(\"161\")\nsolution(\"162\")\nsolution(\"163\")\nsolution(\"164\")\nsolution(\"165\")\nsolution(\"166\")\nsolution(\"167\")\nsolution(\"168\")\nsolution(\"169\")\nsolution(\"170\")\nsolution(\"171\")\nsolution(\"172\")\nsolution(\"173\")\nsolution(\"174\")\nsolution(\"175\")\nsolution(\"176\")\nsolution(\"177\")\nsolution(\"178\")\nsolution(\"179\")\nsolution(\"180\")\nsolution(\"181\")\nsolution(\"182\")\nsolution(\"183\")\nsolution(\"184\")\nsolution(\"185\")\nsolution(\"186\")\nsolution(\"187\")\nsolution(\"188\")\nsolution(\"189\")\nsolution(\"190\")\nsolution(\"191\")\nsolution(\"192\")\nsolution(\"193\")\nsolution(\"194\")\nsolution(\"195\")\nsolution(\"196\")\nsolution(\"197\")\nsolution(\"198\")\nsolution(\"199\")\nsolution(\"200\")\nsolution(\"201\")\nsolution(\"202\")\nsolution(\"203\")\nsolution(\"204\")\nsolution(\"205\")\nsolution(\"206\")\nsolution(\"207\")\nsolution(\"208\")\nsolution(\"209\")\nsolution(\"210\")\nsolution(\"211\")\ns"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n_list = []\n    t_list = []\n    d_list = []\n    i = 1\n    while i < N:\n        n_list.append(int(stdin.split()[i]))\n        t_list.append(int(stdin.split()[i + 1]))\n        d_list.append(stdin.split()[i + 2])\n        i += 3\n    for i in range(len(n_list)):\n        if n_list[i] > 40_000:\n            print(\"NO\")\n            return\n        if d_list[i] == \"North\" and t_list[i] <= 0:\n            print(\"NO\")\n            return\n        if d_list[i] == \"South\" and t_list[i] <= 0:\n            print(\"NO\")\n            return\n        if d_list[i] == \"East\" and n_list[i] <= 0:\n            print(\"NO\")\n            return\n        if d_list[i] == \"West\" and n_list[i] <= 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    return"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for i in range(n):\n        t, d = stdin.split()[i].split(' ')\n        t, d = int(t), d\n        if not (\n            t <= 40000 and (d == 'North' and t % 40000 == 0)\n            or t <= 30000 and (d == 'South' and t % 30000 == 0)\n            or t <= 20000 and (d == 'West' and t % 20000 == 0)\n            or t <= 10000 and (d == 'East' and t % 10000 == 0)\n        ):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        t, d = map(int, stdin.split())\n        if (d == \"North\" and t > 20000) or (d == \"South\" and t > 20000):\n            return \"NO\"\n        elif (d == \"East\" and t < 20000) or (d == \"West\" and t < 20000):\n            return \"NO\"\n        elif (d == \"North\" and t < 20000) or (d == \"South\" and t < 20000):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for _ in range(n):\n        t, dir = map(int, stdin.split()[1:])\n        if dir == \"North\":\n            if t <= 8000:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif dir == \"South\":\n            if t <= 8000:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        elif dir == \"East\":\n            if t <= 8000:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        elif dir == \"West\":\n            if t <= 8000:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"YES\" if stdin.split()[0] == n else \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n <= 1:\n        return 'YES' if n % 2 == 1 else 'NO'\n    t_1, dir_1 = stdin.split()[1].split(' ')\n    t_1 = int(t_1)\n    dir_1 = stdin.split()[2].split(' ')\n    t_2, dir_2 = stdin.split()[3].split(' ')\n    t_2 = int(t_2)\n    dir_2 = stdin.split()[4].split(' ')\n    if dir_1 == 'North' and dir_2 == 'South':\n        if t_2 - t_1 == 5000:\n            return 'YES'\n    elif dir_1 == 'South' and dir_2 == 'North':\n        if t_2 - t_1 == 5000:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    for i in range(n):\n        t,d = map(int,stdin.split())\n        \n        if (t>=1000 and d=='S') or (t>=10000 and d=='N') or (t>=9000 and d=='W') or (t>=10000 and d=='E'):\n            print('NO')\n            return\n        \n        if t>=1000 and d=='S':\n            if t<=4000:\n                print('YES')\n            else:\n                print('NO')\n        \n        if t>=10000 and d=='N':\n            if t<=20000:\n                print('YES')\n            else:\n                print('NO')\n        \n        if t>=9000 and d=='W':\n            if t<=20000:\n                print('YES')\n            else:\n                print('NO')\n        \n        if t>=10000 and d=='E':\n            if t<=20000:\n                print('YES')\n            else:\n                print('NO')"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        t, d = stdin.split()\n        t, d = int(t), d\n        if t <= 20000 and d in {\"East\", \"North\"}:\n            return \"YES\"\n        if t <= 20000 and d in {\"West\", \"South\"}:\n            return \"NO\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, l, r = map(int, stdin.split())\n    for i in range(l, r + 1):\n        if a1 + b1 == a2 + b2 and a1 == i:\n            return i\n    return -1\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    ans = 0\n    for k in range(L, R+1):\n        a_1_k = a_1 + k\n        b_1_k = b_1 + k\n        a_2_k = a_2 + k\n        b_2_k = b_2 + k\n        if (a_1_k + b_1_k) == a_2_k + b_2_k and (a_2_k + b_2_k) == a_1_k + b_1_k:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    a_1 = int(inputs[0])\n    b_1 = int(inputs[1])\n    a_2 = int(inputs[2])\n    b_2 = int(inputs[3])\n    L = int(inputs[4])\n    R = int(inputs[5])\n    R = max(a_1, a_2)\n    while R >= a_1:\n        R = R - a_1\n        a_2 = a_2 - a_1\n    while R >= a_2:\n        R = R - a_2\n        a_1 = a_1 - a_2\n    L = max(a_1, a_2)\n    R = max(a_1, a_2)\n    while R >= b_1:\n        R = R - b_1\n        b_2 = b_2 - b_1\n    while R >= b_2:\n        R = R - b_2\n        b_1 = b_1 - b_2\n    if R >= L:\n        return 0\n    if a_1 == a_2:\n        return 0\n    x = 0\n    while a_1!= 0:\n        a_1 = a_1 - 1\n        x += 1\n    while a_2!= 0:\n        a_2 = a_2 - 1\n        x += 1\n    while b_1!= b_2:\n        b_1 = b_1 - 1\n        x += 1\n    return x\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    # a_1, a_2, a_3, a_4 = a_1, a_2, a_3, a_4\n    b_3 = (a_1 * b_1 + b_2) // (a_2 * b_2)\n    b_4 = (a_1 * b_3 + b_2) // (a_2 * b_3)\n    # b_3, b_4 = b_3, b_4\n    c_1 = (b_1 * b_3 + b_2) // (b_2 * b_3)\n    c_2 = (b_1 * b_4 + b_2) // (b_2 * b_4)\n    c_3 = (b_1 * c_1 + b_2) // (b_2 * c_1)\n    c_4 = (b_1 * c_2 + b_2) // (b_2 * c_2)\n\n    return (R - L) // (a_1 - a_2) + (R - L) // (c_3 - c_4)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, r = map(int, stdin.split())\n    if (a, b) == (0, 0):\n        return \"0\"\n    if l > r:\n        l, r = r, l\n    if a < b:\n        a, b = b, a\n    result = 0\n    for i in range(l, r+1):\n        if i == a:\n            continue\n        if i == a + b:\n            result += 1\n            continue\n        if i - a == b:\n            result += 1\n            continue\n    return str(result)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    return str(2 + (L - a_1) * (R - a_2) // (a_2 - a_1))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    ans = 0\n\n    for k in range(0, 2):\n        a_1 += a_1\n        for l in range(0, 2):\n            a_2 += a_2\n            if L <= a_1 <= R and L <= a_2 <= R:\n                if a_1 == a_2:\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(range(int(stdin.split()[2]), int(stdin.split()[3])), key=lambda x: x + stdin.split()[1]))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    \n    return str(bin(R)\n    \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return f'{len(list(filter(lambda x: x[0] <= x[2] <= x[1], zip(map(int, stdin[:3]), map(int, stdin[3:]))) ))}'"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    max_possible_pieces = 1\n    min_possible_pieces = max_possible_pieces\n    \n    for i in range(1, n + 1):\n        curr_pieces = a * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = b * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n            \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * i\n        if curr_pieces > max_possible_pieces:\n            max_possible_pieces = curr_pieces\n        \n        curr_pieces = max(a, b) * (i - 1)\n        if curr_"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a, b = min(a, b), max(a, b)\n    result = 0\n\n    if n == 1:\n        result = max(a, b)\n    else:\n        total = n + 1\n        while (total <= n + 1):\n            if result > (a + b) - (total - 1):\n                result = (a + b) - (total - 1)\n            total *= 2\n    return str(result)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return input()"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nmy_solution = ''\n\nmy_solution = \n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    print(max(2 * max(n, a, b) - max(n, a, b) - max(n - a, n - b), min(n, a, b) + max(n - a, n - b), max(n - a, n - b) + max(a, b)))\n\nsolution(input())\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int, stdin.split())\n    \n    x = n*a + n*b\n    y = n*b + n*a\n    \n    if x < y:\n        return str(y)\n    \n    return str(x)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    l = list(range(1, n))\n    l = list(set(l))\n    l.sort(key=lambda x: x % (a + b))\n    for i in range(1, len(l)):\n        if l[i - 1] == l[i]:\n            return \"impossible\"\n    return str(min(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    return str(min([(a // b) + (b // a), a + b - (a // b) - (b // a) + 2]))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    return f\"{int(a) + int(b)} {max(int(a), int(b))}\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    _, a, b = map(int, stdin.split())\n    if a < b:\n        return str(b - a)\n    if a > b:\n        return str(b)\n    return str(a)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    flag = stdin\n    # flag = input()\n\n    row = n\n    col = m\n    i = 0\n    j = 0\n    while j < col:\n        i += 1\n        if i > row:\n            i = 1\n            j += 1\n        if i == row:\n            if j == col:\n                break\n            j += 1\n\n    i = 0\n    j = 0\n    while j < row:\n        i += 1\n        if i > col:\n            i = 1\n            j += 1\n        if i == col:\n            if j == row:\n                break\n            j += 1\n    if i == 1 and j == 1:\n        if flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'G' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'G':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B' and flag[j - 1] == 'B':\n            return \"YES\"\n        elif flag[i - 1] == 'R' and flag[j] == 'R' and flag[i] == 'B"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # input_field = stdin.read().split('\\n')[:-1]\n    input_field = stdin.split('\\n')\n    if (n * m) % 3!= 0:\n        return 'NO'\n\n    max_height = n * m\n\n    color_in_first_line = input_field[0][0]\n    color_in_last_line = input_field[0][-1]\n\n    if not color_in_first_line == color_in_last_line:\n        return 'NO'\n\n    for i in range(1, n):\n        if input_field[i][0]!= color_in_first_line or input_field[i][m - 1]!= color_in_last_line:\n            return 'NO'\n\n    for i in range(n):\n        color_in_first_line = input_field[0][i]\n        for j in range(1, m):\n            if input_field[i][j]!= color_in_first_line:\n                return 'NO'\n\n    return 'YES'\n\nsolution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\")"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if not stdin[i].isupper():\n            return \"NO\"\n    n, m = map(int, stdin.split())\n    if n == 1 or m == 1:\n        return \"NO\"\n    flag = ''.join(stdin)\n    for i in range(m):\n        if flag[i] == 'R' and flag[i + m] == 'R' and flag[i + 2 * m] == 'R':\n            return \"YES\"\n    for i in range(m):\n        if flag[i] == 'G' and flag[i + m] == 'G' and flag[i + 2 * m] == 'G':\n            return \"YES\"\n    for i in range(m):\n        if flag[i] == 'B' and flag[i + m] == 'B' and flag[i + 2 * m] == 'B':\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    if m < 3:\n        return \"NO\"\n\n    n_row_stripe = m // 3\n    n_col_stripe = m // 3\n    n_border = m // 3\n\n    matrix = sorted(matrix, key=lambda x: x[0])\n    for i in range(n):\n        if i == n - 1:\n            last_color = matrix[i][1]\n        else:\n            last_color = matrix[i][1] == matrix[i + 1][1]\n        if matrix[i][1] == matrix[i + 1][1] and not last_color:\n            return \"NO\"\n\n    if n % 3!= 0:\n        n_col_stripe = n_col_stripe - 1\n\n    for i in range(n):\n        for j in range(n_row_stripe):\n            if matrix[i][j]!= matrix[i][j + 1]:\n                return \"NO\"\n        for j in range(n_row_stripe, n_col_stripe):\n            if matrix[i][j]!= matrix[i][j + 1]:\n                return \"NO\"\n        for j in range(n_col_stripe, n_border):\n            if matrix[i][j]!= matrix[i][j - 1]:\n                return \"NO\"\n        for j in range(n_border, m):\n            if matrix[i][j]!= matrix[i][j - 1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for _ in range(n):\n        field.append(stdin[:m])\n        stdin = stdin[m:]\n    print(\"YES\" if is_correct_field(field) else \"NO\")\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split()\n    if n == 3 and m == 3:\n        return \"YES\" if grid == ['R', 'R', 'B'] or grid == ['R', 'G', 'B'] or grid == ['R', 'B', 'B'] else \"NO\"\n    if n == m:\n        return \"YES\" if grid == ['R', 'R', 'B'] or grid == ['R', 'G', 'B'] or grid == ['B', 'B', 'B'] else \"NO\"\n    if n == 2 and m == 2:\n        if grid[0] == grid[1] and grid[0] == 'R' or grid[0] == grid[1] and grid[0] == 'G' or grid[0] == grid[1] and grid[0] == 'B':\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 2 and m == 1:\n        if grid[0] == 'R' and grid[0] == 'R' or grid[0] == 'B' or grid[0] == 'G' or grid[0] == 'B':\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 1 and m == 2:\n        if grid[0] == 'R' or grid[0] == 'B':\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 1 and m == 1:\n        if grid[0] == 'R' or grid[0] == 'G' or grid[0] == 'B':\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [stdin[i * m:(i + 1) * m] for i in range(n)]\n    for i in range(n - 1):\n        for j in range(m - 2):\n            if field[i][j]!= field[i + 1][j + 1]!= field[i + 1][j] and field[i][j + 1]!= field[i][j]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin\n    \n    # n, m = 3, 5\n    # field = 'BRG'\n    \n    field_list = list(field)\n\n    red_width = 2\n    red_height = 1\n    red_pos = 0\n    blue_width = 2\n    blue_height = 1\n    blue_pos = 0\n    green_width = 2\n    green_height = 1\n    green_pos = 0\n\n    #find_red(field_list, red_width, red_height, red_pos)\n    #find_blue(field_list, blue_width, blue_height, blue_pos)\n    #find_green(field_list, green_width, green_height, green_pos)\n\n    #if len(field_list)!= n * m:\n        #return 'NO'\n    if field_list.count('R')!= red_width:\n        return 'NO'\n    elif field_list.count('G')!= green_width:\n        return 'NO'\n    elif field_list.count('B')!= blue_width:\n        return 'NO'\n\n    #if field_list.count('R')!= red_width and field_list.count('G')!= green_width and field_list.count('B')!= blue_width:\n    #    return 'NO'\n\n    #for i in range(len(field_list)):\n        #if field_list[i]!= field_list[i-red_pos]:\n            #return 'NO'\n    #return 'YES'\n\n    return 'YES'\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n, m = n, m\n    n_colors = 3\n    n_stripes = (n * m) // (n_colors * 2)\n    if n_stripes * n_colors * 2!= n * m:\n        return \"NO\"\n    if n % 2 == 0 or m % 2 == 0:\n        return \"NO\"\n    count_R, count_B, count_G = 0, 0, 0\n    for row in stdin.splitlines():\n        color_list = []\n        for color in row:\n            if color not in color_list:\n                color_list.append(color)\n        if len(color_list)!= n_colors:\n            return \"NO\"\n        if color_list.count(\"R\")!= count_R or color_list.count(\"G\")!= count_G or color_list.count(\"B\")!= count_B:\n            return \"NO\"\n        count_R, count_G, count_B = count_R + color_list.count(\"R\"), count_G + color_list.count(\"G\"), count_B + color_list.count(\"B\")\n    return \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n\n    ans = 'NO'\n\n    for i in range(n):\n        row = stdin[i+2]\n\n        if len(row)!= m:\n            return 'NO'\n\n        colors = set()\n        for c in row:\n            if c == 'R' or c == 'G':\n                colors.add(c)\n\n            if len(colors) == 3:\n                if len(colors & {'R', 'G', 'B'}) == 3:\n                    ans = 'YES'\n                    break\n                else:\n                    return 'NO'\n\n    return ans"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = 0, 0\n    count = 0\n    for i in range(n):\n        count += 1\n        if count % 2 == 1:\n            x -= 1\n            x += 1\n        else:\n            x += 1\n        if x < 0 or y < 0:\n            x += 1\n            y += 1\n        else:\n            y += 1\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = set()\n    s.add((0, 0))\n    m = 0\n    for i in range(n):\n        m = max(m, abs(s.pop()))\n        x, y = s.pop()\n        s.add((x, y + 1))\n        s.add((x + 1, y))\n        s.add((x + 1, y - 1))\n        s.add((x, y - 1))\n        s.add((x - 1, y))\n        s.add((x - 1, y - 1))\n        s.add((x, y + 1))\n        s.add((x - 1, y + 1))\n    return str(m) + \" \" + str(m)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    x, y = 1, 0\n    i = 0\n    while i < n:\n        x += stdin[i+1]\n        if x >= 10:\n            x = x % 10 + x // 10\n        i += 2\n    return str(x)+\" \"+str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    x, y = 0, 0\n    while i < n:\n        if i % 2 == 0:\n            x += 1\n        else:\n            y += 1\n        i += 1\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    x = y = 0\n    \n    for i in range(n):\n        x, y = (x + 1, y - 1) if stdin[i] == '>' else (x - 1, y + 1)\n        \n    return str(x) +'' + str(y)"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for _ in range(n):\n        yield tuple(int(x) for x in stdin.strip().split())\n\n\ndef"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    x: int = 0\n    y: int = 0\n    i: int = 0\n    diagonal: int = 1\n    while i <= n:\n        if i == 0:\n            diagonal = abs(x) + abs(y)\n        if diagonal == abs(x) + abs(y):\n            diagonal = 1\n            diagonal *= -1\n        if diagonal < abs(x) + abs(y):\n            x += diagonal\n            y += diagonal\n        else:\n            diagonal = abs(x) + abs(y)\n            diagonal *= -1\n        i += 1\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        print(0, 0)\n    else:\n        print(0, 0)\n        for i in range(n):\n            if i % 2:\n                print(i, (2 * i + 1) % (2 * i + 2))\n            else:\n                print((2 * i) % (2 * i + 2), i)\n        return\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = y = 0\n    for i in range(n):\n        x, y = x + 3 * 2 ** (i // 4), y + 2 * 2 ** (i % 4)\n    return str(x), str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = 0\n    for i in range(n):\n        b += 2\n        a += b\n        print(a, b)\n    return '{0} {1}'.format(a, b)"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a * (a + 1) // 2 + b * (b + 1) // 2 + c * (c + 1) // 2 == (a + b + c) * (a + b + c) // 2 else \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * b == c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c = map(int, stdin.split())\n    if b*c == a:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return \"Yes\"\n    if a + b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 0:\n        return \"Yes\"\n    if a + b + c > a * c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n    return 'Yes' if x + y >= z else 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a + b) % c == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (2 * a + 2 * b) <= c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split(' ')\n    a,b,c = int(a), int(b), int(c)\n    if (b+c)%2==0:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, ebony_damage, ivory_damage, shield_damage = stdin.split(\" \")\n    ebony_damage, ivory_damage, shield_damage = int(ebony_damage), int(ivory_damage), int(shield_damage)\n    if ebony_damage >= shield_damage and ivory_damage >= shield_damage:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(sys.stdin.read())\n\"\"\""
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split()\nn = int(stdin[0])\n\nL = int(stdin[1])\n\nblue_bars = list(map(int, stdin[2].split()))\n\ngreen_bars = list(map(int, stdin[3].split()))"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 2:\n        return 'NO'\n    n, L = map(int, stdin.split())\n    if n < 1 or n > 50 or n > L or L < 1:\n        return 'NO'\n    for x in stdin.split():\n        if int(x) < 0 or int(x) > L - 1:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l = (int(i) for i in stdin.split())\n    b1, b2 = (int(i) for i in stdin.split())\n    b1.sort()\n    b2.sort()\n    if (b1[0] == b2[0]):\n        return \"YES\"\n    elif (b1[-1] == b2[-1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nimport sys\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n    n, L = list(map(int, stdin.split()))\n    barriers = list(map(int, stdin.split()))\n    k = 0\n    s = 0\n    for i in barriers:\n        if i > L:\n            return \"NO\"\n    for i in range(0, len(barriers)):\n        k += 1\n        s += barriers[i]\n        if s == L or i == len(barriers)-1:\n            s = 0\n            k += 1\n            s = 0\n            if k == n:\n                return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    starts = list(map(int, stdin.split()))\n    starts.sort()\n    return \"YES\" if all(starts[i] == starts[i+1] for i in range(len(starts)-1)) else \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nTo check that the lines of input are of the correct format, a string is generated which contains the correct output, and is checked."
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    barriers = list(map(int, stdin.split()))\n    barriers.sort()\n    k_start, k_end = [1, L]\n    s_start, s_end = [0, L]\n    if k_start >= k_end:\n        if s_start >= s_end:\n            return 'YES'\n        else:\n            return 'NO'\n    for barrier in barriers:\n        if k_start < barrier < k_end:\n            k_start = barrier\n        elif barrier >= k_start and barrier <= k_end:\n            k_end = barrier\n        elif s_start < barrier < s_end:\n            s_start = barrier\n        elif barrier >= s_start and barrier <= s_end:\n            s_end = barrier\n    return 'YES' if k_start == s_start else 'NO'\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, L = int(stdin.split()[0]), int(stdin.split()[1])\n    A = list(map(int, stdin.split()[2].split()))\n    B = list(map(int, stdin.split()[3].split()))\n    A.sort()\n    B.sort()\n    if A == B:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, L = list(map(int, stdin.split()))\n  bars = sorted(list(map(int, stdin.split())))\n  \n  Kefa = bars.index(max(bars))\n  Sasha = bars.index(min(bars))\n  \n  if Kefa == Sasha:\n    return \"YES\"\n  else:\n    return \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    Kefa = list(map(int, stdin.split()))\n    Sasha = list(map(int, stdin.split()))\n\n    # check if Kefa and Sasha started from the same point (by distance)\n    if max(Kefa)!= max(Sasha):\n        print(\"NO\")\n        return\n\n    # check if Kefa and Sasha's tracks coincide\n    for i in range(len(Kefa)):\n        if Kefa[i]!= Sasha[i]:\n            print(\"NO\")\n            return\n\n    # check if Kefa and Sasha's tracks coincide (by distance)\n    for i in range(len(Kefa)):\n        for j in range(i + 1, len(Kefa)):\n            if Kefa[i]!= Kefa[j]:\n                break\n        else:\n            print(\"YES\")\n            return\n\n    # check if Kefa and Sasha's tracks coincide (by distance)\n    for i in range(len(Sasha)):\n        for j in range(i + 1, len(Sasha)):\n            if Sasha[i]!= Sasha[j]:\n                break\n        else:\n            print(\"YES\")\n            return\n\n\nsolution(input())"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    if len(s) == 0:\n        return \"0\"\n    res = \"\"\n    for l in range(len(s)):\n        for r in range(l, len(s)):\n            if s[l:r + 1]!= s[r:l - 1:-1] and (r - l + 1) > len(res):\n                res = s[l:r + 1]\n    return len(res)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  l = len(stdin)\n  # print(l)\n  # if l == 0:\n  #   return '0'\n  # if l == 1:\n  #   return '0'\n  ans = 0\n  # print(stdin)\n  for i in range(l):\n    # print(i)\n    for j in range(i, l):\n      # print('in loop')\n      # print(stdin[i:j])\n      # if isPalindrome(stdin[i:j]) == True:\n      if stdin[i:j] == stdin[i:j][::-1]:\n        # print('palindrome')\n        # print(stdin[i:j])\n        # print(stdin[i:j][::-1])\n        # print('palindrome')\n        # print(stdin[i:j])\n        # print(stdin[i:j][::-1])\n        ans = max(ans, j - i)\n  return str(ans)\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    all_strings = stdin.split()\n    max_len = 0\n    s = \"\"\n    for i in range(len(all_strings)):\n        substr = all_strings[i]\n        if check_palindrome(substr) == True:\n            max_len = max(max_len, len(substr))\n            continue\n        else:\n            if len(substr) >= max_len:\n                max_len = len(substr)\n    return max_len\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s = stdin\n    max = 0\n    s_len = len(s)\n    for i in range(s_len):\n        for j in range(s_len):\n            sub = s[i:j+1]\n            if is_palindrome(sub):\n                max = max if max > len(sub) else len(sub)\n    if max:\n        return str(max)\n    return '0'\n'''\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    ans = 0\n    for i in range(1, len(s)):\n        ans += 1 if not checkPalindrome(s[i]) else 0\n    return ans\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.strip()\n  substrings = set()\n  for i in range(len(stdin)):\n    substring = stdin[i:]\n    if substring not in substrings:\n      substrings.add(substring)\n      continue\n    else:\n      return str(len(substring))\nprint(solution(input()))\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L = len(stdin)\n    # find the longest palindrome, either whole word or substring\n    def longestPalindrome(s, l, r):\n        # check if left is within left window\n        while l >= 0 and r < L and s[l] == s[r]:\n            l -= 1\n            r += 1\n        # print('l, r', l, r)\n        if r - l > 1:\n            return s[l + 1:r]\n        return ''\n\n    # initialize a dictionary with a key for each character\n    dict_char = {chr(i): 1 for i in range(97, 123)}\n    # iterate over each character\n    for i in range(L):\n        # determine if the character is a substring of length 1, and is not already a substring of a palindrome\n        if dict_char[stdin[i]] == 1 and longestPalindrome(stdin, i, i) == '':\n            return str(i + 1)\n        # determine if the character is a substring of length 2, and is not already a substring of a palindrome\n        if dict_char[stdin[i]] == 2 and longestPalindrome(stdin, i, i + 1) == '':\n            return str(i + 2)\n        # if the character is already a substring of length 1, add 1 to it's count\n        dict_char[stdin[i]] += 1\n    return str(0)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for word in stdin.split():\n        s = longestPalindrome(word)\n        if s > max_len:\n            max_len = s\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    max_len = 0\n    for word in stdin:\n        count = 0\n        for i in range(len(word)):\n            if i + 1 < len(word) and word[i]!= word[i + 1]:\n                l = 1\n                start = i\n                for j in range(i + 1, len(word)):\n                    if word[j] == word[i]:\n                        l += 1\n                    else:\n                        break\n                if l > max_len:\n                    max_len = l\n                    start_word = word[start: start + l]\n            count += 1\n    print(max_len, start_word)\n    return max_len\n\nsolution(\"mew\\n\")\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    standings = [[int(n) for n in input().split()] for _ in range(int(stdin.split()[0]))]\n    for i in range(len(standings)):\n        if standings[i][1]!= standings[i+1][0]:\n            return \"rated\"\n    return \"unrated\"\nprint(solution(input()))\n\n2+2 = 4"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    rating = []\n    # convert to int\n    for i in range(0, len(lines)):\n        rating.append(int(lines[i]))\n    # sort\n    rating.sort()\n    for i in range(0, len(rating)):\n        # if rating is different, return unrated\n        if rating[i]!= rating[i-1]:\n            return \"unrated\"\n    # rated\n    return \"rated\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rounds = stdin.split()\n    if len(rounds) == 1:\n        if int(rounds[0]) > 1000 or int(rounds[0]) < 2:\n            return'maybe'\n        elif int(rounds[0]) < 400:\n            return 'unrated'\n        else:\n            return 'rated'\n    for i in range(1, len(rounds)):\n        if int(rounds[i - 1]) == int(rounds[i]):\n            return 'unrated'\n        elif int(rounds[i]) > int(rounds[i - 1]):\n            return 'unrated'\n    return'maybe'"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    s = stdin.split('\\n')\n    n = int(s[0])\n    r = 0\n    x = []\n    for i in range(1, n + 1):\n        x.append([int(s[i][0]), int(s[i][1])])\n    x.sort(key=lambda x: x[0])\n\n    for i in range(1, n + 1):\n        if x[i - 1][0]!= x[i][0] or x[i - 1][1]!= x[i][1]:\n            r += 1\n    if r == 0:\n        return 'unrated'\n    if r == n:\n        return 'rated'\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Count\n    n = int(stdin[0])\n    \n    # Count\n    standings = list(map(int, stdin.split()))\n    \n    # Count\n    standings_set = set(standings)\n    \n    # Count\n    i = 0\n    \n    # Count\n    while i < n:\n        \n        # Count\n        if standings_set.__contains__(standings[i]):\n            standings_set.remove(standings[i])\n            i += 1\n            continue\n        \n        # Count\n        if i < n:\n            if standings[i] == standings[i + 1]:\n                i += 1\n                continue\n        \n        # Count\n        if i < n:\n            if standings[i] == standings[i - 1]:\n                i += 1\n                continue\n        \n        # Count\n        if i < n:\n            if standings[i] == standings[i + 2]:\n                i += 2\n                continue\n        \n        # Count\n        if i < n:\n            if standings[i] == standings[i - 2]:\n                i += 2\n                continue\n        \n        # Count\n        if i < n:\n            if standings[i] == standings[i - 3]:\n                i += 3\n                continue\n    \n    # Count\n    if len(standings_set) == 0:\n        return \"rated\"\n    \n    # Count\n    return \"unrated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    stdin = stdin.splitlines()[1:]\n    d = {}\n    for i in stdin:\n        if i[0] not in d:\n            d[i[0]] = int(i[1])\n    d2 = {}\n    for i in stdin:\n        if i[1] not in d2:\n            d2[i[1]] = int(i[0])\n    d = sorted(d.items(), key=lambda item: item[1])\n    d = sorted(d, key=lambda item: item[0])\n    d2 = sorted(d2.items(), key=lambda item: item[1])\n    d2 = sorted(d2, key=lambda item: item[0])\n    l1 = []\n    l2 = []\n    for i in d:\n        l1.append(i[0])\n    for i in d2:\n        l2.append(i[0])\n    if l1 == l2:\n        if len(set(l1)) == 1:\n            return \"rated\"\n        elif len(set(l1)) == 2:\n            if l1[0]!= l1[1]:\n                return \"unrated\"\n            else:\n                return \"maybe\"\n        else:\n            return \"maybe\"\n    else:\n        return \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    \n    rating_before = map(int, stdin.split()[1:])\n    rating_after = map(int, stdin.split()[1:])\n\n    rating_before = list(rating_before)\n    rating_after = list(rating_after)\n    \n    rating_after.sort()\n    \n    if rating_before == rating_after:\n        return 'rated'\n    elif rating_before!= rating_after:\n        return 'unrated'\n    else:\n        return'maybe'\n    \n    \nsolution('''10\n3 3\n5 4\n4 4\n3 5\n5 5\n5 6\n4 4\n6 5\n5 5\n''')\nsolution('''4\n3 3\n4 4\n5 4\n4 4\n6 5\n''')\nsolution('''6\n2 5\n2 4\n4 3\n4 5\n2 5\n1 3\n''')\nsolution('''5\n1 1\n1 3\n1 4\n2 2\n3 3\n4 4\n4 4\n''')\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    data = [list(map(int, line.split())) for line in data]\n    ranked = sorted(data, key=lambda x: x[1], reverse=True)\n    all_the_same = all(i == ranked[0][1] for i in ranked)\n    all_higher = all(i[0] <= i[1] for i in ranked)\n    all_lower = all(i[1] >= i[0] for i in ranked)\n    if all_the_same:\n        return \"rated\"\n    if all_higher and all_lower:\n        return \"unrated\"\n    if not all_the_same:\n        return \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    standings = list(map(lambda x: tuple(map(int, x.split())), lines[1:]))\n\n    sorted_standings = sorted(standings, key=lambda x: x[1], reverse=True)\n\n    for i in range(n - 1):\n        if sorted_standings[i][0] > sorted_standings[i + 1][0]:\n            return \"maybe\"\n\n    for i in range(n - 1):\n        if sorted_standings[i][1] < sorted_standings[i + 1][1]:\n            return \"unrated\"\n\n    return \"rated\"\n\nsolution('5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699')\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = list(map(int, stdin.split(\"\\n\")))\n    stdin.sort(reverse=True)\n    rating = stdin[0]\n    for i in range(1, n):\n        if rating!= stdin[i]:\n            return \"unrated\"\n    if rating > stdin[-1]:\n        return \"unrated\"\n    return \"rated\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    ans = []\n    index_of_nearest_zero = -1\n    curr_zero = 0\n    for i in range(n):\n        index_of_nearest_zero = -1\n        if numbers[i]!= 0:\n            continue\n        for j in range(i - 1, -1, -1):\n            if numbers[j] == 0:\n                index_of_nearest_zero = j + 1\n        if index_of_nearest_zero == -1:\n            ans.append(0)\n        else:\n            ans.append(numbers[index_of_nearest_zero] - numbers[i])\n            curr_zero = numbers[i]\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split()))\n    n = len(A)\n    diffs = [0] * n\n    diffs[0] = abs(A[0])\n    for i in range(1, n):\n        diffs[i] = abs(A[i] - A[i - 1])\n    result = []\n    for i in range(n - 1, 0, -1):\n        if A[i]!= 0:\n            for j in range(i - 1, -1, -1):\n                if A[j] == 0 and diffs[j] < diffs[i]:\n                    diffs[i] = diffs[j]\n            result.append(str(diffs[i]))\n            diffs[i] = 0\n    for i in range(len(result)):\n        result[i] = str(result[i])\n    return''.join(result)\n\n\nprint(solution(\"\"\"\n2 1 0 3 0 0 3 2 4\n\"\"\"))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(len(a)):\n        min_diff = abs(a[i]-0)\n        min_idx = i\n        for j in range(i+1, len(a)):\n            diff = abs(a[j]-0)\n            if diff < min_diff:\n                min_diff = diff\n                min_idx = j\n        res.append(min_idx)\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_nearest(n):\n        for i in range(n+1, len(a)):\n            if a[i] == 0:\n                return i\n        return len(a)\n\n    a = list(map(int, stdin.split()))\n    return''.join(map(str, sorted(map(is_nearest, a))))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    max_diff = -2 ** 31\n    for i in range(n):\n        if arr[i] == 0:\n            if i == 0:\n                continue\n            for j in range(i):\n                if arr[j] == 0:\n                    max_diff = max(max_diff, i - j)\n    if max_diff < 0:\n        max_diff = -max_diff\n    return str(max_diff)\nsolution(input())\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    distances = []\n    z = 0\n    for i in range(n):\n        if arr[i]!= 0:\n            z = i\n            break\n    if z == 0:\n        return''.join(str(i) for i in range(n))\n    distances.append(z)\n    for i in range(n):\n        if arr[i]!= 0:\n            distances.append(i)\n            break\n    for i in range(len(distances)-1, -1, -1):\n        if distances[i] - distances[i-1] > 1:\n            for j in range(distances[i] + 1, distances[i-1] + 1):\n                if arr[j] == 0:\n                    distances[i-1] = j\n                    break\n    return''.join(str(i) for i in distances)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    zeros = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            zeros.append(i)\n    print(min(map(lambda x: abs(x - zeros[0]), zeros)))\n    print(min(map(lambda x: abs(x - zeros[1]), zeros)))\n    return\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = [-float('inf')] * n\n    d[0] = a[0]\n    for i in range(1, n):\n        d[i] = d[i-1] + a[i]\n    for i in range(n):\n        j = (i+1)%n\n        d[j] = min(d[j], d[i])\n        if d[i] == 0:\n            break\n    return''.join(map(str, d[::-1]))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    d = [0] * n\n\n    for i, v in enumerate(a):\n        if v == 0:\n            d[i] = i\n        else:\n            d[i] = i + 1\n\n    for i, v in enumerate(a):\n        if v == 0:\n            for j in range(i + 1, n):\n                if a[j] == 0:\n                    d[j] = d[i] + 1\n                    break\n\n    for i, v in enumerate(d):\n        print(f\"{i} {v}\", end=\" \")\n\n\nsolution(input())\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example, for the list [2, 1, 0, 3, 0, 0, 3, 2, 4], the output should be\n    solution(input) = \"2 1 0 1 2 3 4\".\n    \"\"\"\n    a = list(map(int, stdin.split()))\n    i = 0\n    while i < len(a):\n        if a[i] == 0:\n            break\n        i += 1\n\n    if i == len(a):\n        return '0'\n\n    for i in range(i, len(a)):\n        if a[i] == 0:\n            return f'{a[i]}{a[i-1]}'\n\n    return '0'\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = input()\nn = int(stdin)\nl = []\nfor i in range(n):\n    l.append(stdin)\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    s = stdin.pop(0)\n\n    unique = set()\n\n    def dfs(r, m, n):\n        if m == n:\n            unique.add(r)\n        else:\n            for i in range(1, 2 ** n):\n                l = r[:]\n                for j in range(n):\n                    if (i >> j) % 2 == 1:\n                        l += r[j]\n                dfs(l, m + 1, n)\n\n    dfs(\"\", 0, n)\n    print(len(unique))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # initialize to start with size of 1\n    # the size of the final string\n    n = int(stdin)\n    \n    # the longest valid string\n    # will be the answer\n    result = 1\n    \n    # check if the n is less than or equal to 1\n    if n <= 1:\n        return result\n    \n    # go through all possible length of strings\n    for i in range(1, n+1):\n        \n        # keep counting up, while the result is less than n\n        # until it reaches n\n        while result < n:\n            result += 2\n            \n            # try the next i length string\n            # if it is a valid one\n            # break\n            if valid_string(str(result)):\n                break\n    return result\n    \ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in a string with '0' and '1' as characters\n    Returns an integer which is the number of possible strings\n    '''\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(len(stdin)):\n        st = stdin[i:]\n        st = st[::-1]\n        if st == stdin:\n            result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\nn = int(input())\ns = input()"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    s = stdin.rstrip()\n    if len(s) == N:\n        return 1\n    count = 0\n    for i in range(1, len(s)):\n        #print(f'i:{i},len(s) = {len(s)},s[-i:] = {s[-i:]}')\n        if s[-i:] == s[:i]:\n            #print(f'i:{i},s[-i:] == s[:i]')\n            count += 1\n        #print(count)\n    return count\n\nsolution(input())"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    data = []\n    res = 0\n    for i in range(1, n+1):\n        line = stdin.readline().split()\n        data.append((int(line[0]), int(line[1])))\n    data.sort()\n    for i in range(n):\n        if i == 0 or i == n-1:\n            continue\n        if data[i][1] == data[i-1][1] or data[i][0] == data[i-1][0]:\n            res = max(res, data[i][1] - data[i-1][1])\n    if res == 0:\n        res = max(data[0][1] - data[-1][1], data[-1][1] - data[0][1])\n    return str(res)\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    print(stdin.readline().strip())\n    print(stdin.readline().strip())\n    return ''\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for i in range(n):\n        vectors.append([int(x) for x in stdin.split()[i * 2:i * 2 + 2]])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (vectors[i][0] * vectors[j][1] + vectors[i][1] * vectors[j][0]) > 0:\n                return str(i + 1) + \" \" + str(j + 1)\n    return \"None\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    vectors = list(map(lambda x: tuple(map(int, x.split())), stdin.split()[1:]))\n\n    possible_vectors = []\n    for i, vector in enumerate(vectors):\n        possible_vectors.append(vector)\n        if i!= 0:\n            vector_2 = possible_vectors[i - 1]\n            if vector_2[0] * vector[1] - vector[0] * vector_2[1] > 0:\n                possible_vectors.append(vector)\n    minimal = float('inf')\n    for index, vector in enumerate(possible_vectors):\n        minimal = min(minimal, abs(vector[0] * vectors[index][1] - vector[1] * vectors[index][0]))\n    return str(minimal)\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.pop(0).split())))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (\n                abs(arr[i][0] - arr[j][0]) + abs(arr[i][1] - arr[j][1]) < 1\n            ):  # \u0432\u0437\u044f\u0442\u043e \u0441 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0430\n                return f\"{i + 1} {j + 1}\"\n    return \"0 0\"\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    vectors = stdin.split()[1:]\n    def angle(v1,v2):\n        return (v2[1]-v1[1])*(v1[0]-v2[0])- (v1[0]-v2[0])*(v1[1]-v2[1])\n    vectors.sort(key=lambda x:x[0]**2+x[1]**2)\n    i = 0\n    ans_1 = []\n    ans_2 = []\n    while i < n:\n        #print(i,vectors)\n        if i > 0 and i + 1 < n and angle(vectors[i],vectors[i+1]) < 0:\n            ans_1.append(vectors[i])\n            ans_2.append(vectors[i+1])\n        i += 1\n    ans_1.sort(key=lambda x:x[0])\n    ans_2.sort(key=lambda x:x[0])\n    ans = (ans_1[0][0]-ans_2[0][0])*(ans_1[0][1]-ans_2[0][1])+ (ans_1[0][0]-ans_2[0][0])*(ans_1[0][1]-ans_2[0][1])\n    if ans > 0:\n        ans = -ans\n    return str(ans_1[0][0])+\" \"+str(ans_1[0][1])+\" \"+str(ans_2[0][0])+\" \"+str(ans_2[0][1])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dots = []\n    for i in range(n):\n        x, y = stdin.split()\n        dots.append((int(x), int(y)))\n    x1, y1 = dots[0]\n    x2, y2 = dots[1]\n    a = (x1, y1)\n    b = (x2, y2)\n    t = (x2 - x1) * (y2 - y1) - (y2 - y1) * (x2 - x1)\n    l = math.sqrt(a[0] ** 2 + a[1] ** 2) * math.sqrt(b[0] ** 2 + b[1] ** 2)\n    print((l * t, (math.atan2(a[0], a[1]) - math.atan2(b[0], b[1])) * 180 / math.pi))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n\n    n = int(stdin)\n    vectors = []\n    for i in range(n):\n        vectors.append([int(x) for x in stdin.split()[i * 2 + 1].split(',')])\n    # vectors = [(x, y) for (x, y) in zip(a, b)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if vectors[i][0] * vectors[j][0] + vectors[i][1] * vectors[j][1] == 0:\n                stdout += '{} {}\\n'.format(i + 1, j + 1)\n    return stdout\n\n\nsolution('2')\nsolution('3')\nsolution('4')\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    Vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        Vectors.append((x, y))\n    Vectors = sorted(Vectors, key=lambda x: x[0]**2 + x[1]**2)\n    return str(Vectors[0][0]) + \" \" + str(Vectors[0][1])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = []\n    b = []\n    for i in range(n):\n        x, y = stdin[i + 1].split()\n        x = int(x)\n        y = int(y)\n        a.append(x)\n        a.append(y)\n        b.append(x)\n        b.append(y)\n    d = angle(a, b)\n    # print(a, b, d)\n    return str(d)\n\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(i) for i in stdin.split()]\n    dist_1 = a*d\n    dist_2 = b*d\n    dist_3 = a*k\n    dist_4 = b*k\n    dist_5 = a + (d-k)\n    dist_6 = b + (d-k)\n    dist_7 = a + (k-d)\n    dist_8 = b + (k-d)\n    dist_9 = a + d\n    dist_10 = b + d\n    dist_11 = a + k\n    dist_12 = b + k\n    dist_13 = a + (d-k)\n    dist_14 = b + (d-k)\n    print(min(dist_1, dist_2, dist_3, dist_4, dist_5, dist_6, dist_7, dist_8, dist_9, dist_10, dist_11, dist_12, dist_13, dist_14))\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    a -= t\n    b -= t\n    print((a * k + b * t) * d + (a * k + b * t) * (a + b))\n    return ((a * k + b * t) * d + (a * k + b * t) * (a + b))\nstdin = sys.stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b, t = map(int, stdin.split())\n    a, b = divmod(a, k)\n    n = n - a - b\n    a, b = divmod(b, k)\n    n = n - a - b\n    return str(n * t + a * b)\n\nprint(solution(input()))"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  d, k, a, b, t = map(int, stdin.split())\n  a = int(a)\n  b = int(b)\n  t = int(t)\n  if a < b:\n    if d - k < b:\n      return 0\n  else:\n    if d - k > a:\n      return 0\n  if d - k > a:\n    return t + (d - k - a) * (b - a)\n  else:\n    return t + d * (b - a)"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, d, k, a, b, t = map(int, stdin.split())\n    if a <= b:\n        return \"Timeout\"\n\n    t = t - b\n    s = (d - a) // k\n    t = t + s * k\n    if t < a:\n        return \"Timeout\"\n    t = t - a\n    t = t + (s * (k + b))\n    return str(t)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = list(map(int, stdin.split()))\n    return str(min(d - k, d - a + b, d - a + b + t))"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t, k = map(int, stdin.split())\n    print(a * (t + b) + k)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    t_c = k * 2 + a + b\n    t_f = t + t_c\n    while t_f!= d:\n        if t_f > d:\n            t_c = t_c * 2\n            t_f = t_c + a + b\n        else:\n            t_c = t_c * 2\n            t_f = t_c + a + b\n    return str(t_f)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    d, k, a, b, t = map(int, stdin.split())\n    if k + a + b < t:\n        return '-1'\n    if k + a + b > t:\n        return str(d - 1)\n    else:\n        return str(d)"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n\n    return min(a * k + b, d - a, t)\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    max_divisor = 0\n    for i in range(1, k + 1):\n        if n % i == 0:\n            max_divisor = max(max_divisor, i)\n\n    if max_divisor == 0 or max_divisor == n:\n        return -1\n    else:\n        return str(max_divisor) +'' + str(n // max_divisor)\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 2 or k > (n - 1) / 2:\n        return '-1'\n    nums = []\n    for i in range(1, k + 1):\n        nums.append(i)\n        if sum(nums)!= n:\n            nums.remove(i)\n    if len(nums) == 0:\n        return '-1'\n    else:\n        return''.join(map(str, nums))\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return '-1'\n    else:\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        # print(divisors)\n        if len(divisors) < k:\n            return '-1'\n        else:\n            return''.join(str(x) for x in divisors[-k:])\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= n:\n        return '-1'\n    primes = []\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    gcd = 1\n    for prime in primes:\n        gcd = max(gcd, prime)\n    if gcd < k:\n        return '-1'\n    else:\n        return''.join(map(str, primes[:k]))\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    result = []\n    if(n % 2 == 0):\n        return -1\n    else:\n        while(n > 1):\n            a = int(n/k)\n            b = int(n%k)\n            result.append(a)\n            n -= a\n            k -= b\n        if(k == 1):\n            result.append(1)\n            result.append(n)\n        else:\n            return -1\n    return''.join(map(str, result))"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = []\n    for i in range(k):\n        d.append(int(input()))\n    if len(d) == k:\n        for i in range(1, k):\n            if d[i-1] % d[i] == 0:\n                continue\n            else:\n                return str(-1)\n        d.sort(reverse=True)\n        return \" \".join(map(str,d))\n    else:\n        return str(-1)\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n    gcd_list = []\n    for i in range(1, N+1):\n        for j in range(1, i):\n            if gcd(j, i) == 1:\n                gcd_list.append(i)\n                break\n    if len(gcd_list) == K:\n        return''.join(str(i) for i in gcd_list)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while a:\n            a, b = b % a, a\n        return b\n\n    n, k = map(int, stdin.split())\n    a = 1\n    while True:\n        if gcd(n, a) == 1:\n            break\n        a += 1\n    if k == 0:\n        print(-1)\n        return\n    max_num = gcd(n, a)\n    if max_num == 1:\n        max_num = a\n    elif max_num == n:\n        max_num = 1\n    else:\n        max_num = int(n // max_num)\n\n    num_list = []\n    for i in range(k):\n        num_list.append(max_num)\n        max_num -= 1\n    print(*num_list)\n\nsolution(input())\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    input = stdin\n    length = len(input)\n    num = input.split(\" \")\n    length = len(num)\n    if length!= 3:\n        return -1\n    else:\n        n = int(num[0])\n        k = int(num[1])\n        if k == n:\n            return \"1\"\n        for i in range(1, k + 1):\n            if n % i == 0:\n                return str(i)\n    return -1\n\n\nsolution(\"5 2\")\nsolution(\"6 2\")\nsolution(\"8 2\")\nsolution(\"3 3\")\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    seq = []\n    gcd = 1\n    for _ in range(k):\n        if seq == []:\n            seq.append(1)\n        else:\n            gcd = max(gcd, seq[-1])\n            seq.append(gcd)\n    if gcd == 1:\n        return '-1'\n    return''.join(str(x) for x in seq)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for i, j in zip(map(int, stdin.split(' ')), itertools.islice(itertools.count(1, 5), int(stdin.split(' ')[1]))) if i + j == 0 or i + j == 10 or i + j == 20)\n\nprint(solution(input()))\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i+j)%5==0:\n                res += 1\n    return str(res)\n\ndef"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 7\n   ... 3 8\n   ... 1 5''')\n    '7'\n    >>> solution('''1 5\n   ... 3 8''')\n    '8'\n    >>> solution('''6 12\n   ... 11 14''')\n    '88'\n    >>> solution('''11 14\n   ... 1 5''')\n    '31'\n    \"\"\"\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n\n    pairs = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j <= n and (i + j) % 5 == 0:\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    m1 = m2 = 0\n    for i in range(n + 1):\n        if i % 5 == 0:\n            m1 += 1\n        else:\n            m2 += 1\n    return str(m1 * m2)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, m = (int(i) for i in stdin.split())\n  return str(sum([1 for i in range(n) if i+1 in range(m) for j in range(m) if (i+j) % 5 == 0]))"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(len([x for x in range(1, n+1) if x % 5 == 0] + [y for y in range(1, m+1) if y % 5 == 0]))\n\n\ndef"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    pairs = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i + j > n or i + j > m:\n                break\n            elif (i + j) % 5 == 0:\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    count = 0\n    for i in range(N+1):\n        for j in range(M+1):\n            if (i + j) % 5 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _n, _x = (int(i) for i in stdin.split())\n    _a = list(int(i) for i in stdin.split()[1:])\n    cur_a = 0\n    for i, a in enumerate(_a):\n        cur_a = cur_a + a\n        _a[i] = cur_a\n    _max = 0\n    for i in range(_n):\n        if _a[i] >= _max:\n            _max = _a[i]\n    for i in range(_n):\n        for j in range(i + 1, _n):\n            cur_a = 0\n            for k in range(i, j + 1):\n                cur_a = cur_a + _a[k]\n            _max = max(_max, cur_a * _x)\n    return str(_max)\n\nsolution(input())\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    result = max(sum(a[i-1:i+1]) * x for i in range(1, n))\n    return str(result)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    max_beauty = 0\n    for i in range(1, n):\n        if arr[i] * x > max_beauty:\n            max_beauty = arr[i] * x\n    return str(max_beauty)\n\nprint(solution(input()))\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, x = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    beauty = 0\n\n    for i in range(len(array) - 1):\n        beauty += max(array[i] * x, array[i + 1] * x)\n    print(beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = (int(i) for i in stdin.split(\" \"))\n    a = [int(i) for i in stdin.split(\" \")]\n    beauty = 0\n    for i in range(n):\n        beauty = max(beauty, a[i] + solution(stdin))\n    return str(beauty * x)"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    max_beauty = 0\n    for i in range(n):\n        cur_beauty = 0\n        for j in range(i, n):\n            cur_beauty += arr[j] * x\n            if max_beauty < cur_beauty:\n                max_beauty = cur_beauty\n    return str(max_beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans = max(ans, sum(a[i:j+1]) * x)\n    return str(ans)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    beauty = 0\n    for i in range(0, len(arr)):\n        beauty = max(beauty, 0)\n        beauty = max(beauty, sum(arr[i:]))\n    return str(beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n\n    def beauty(a):\n        if not a:\n            return 0\n        res = a[0]\n        for i in range(1, len(a)):\n            res = max(res, a[i] * (i + 1))\n        return res\n\n    for i in range(len(a)):\n        if a[i] * x < 0:\n            break\n        else:\n            if i == len(a) - 1:\n                continue\n            else:\n                a[i] *= x\n                a[i + 1] *= x\n                res = beauty(a)\n                a[i] = a[i - 1]\n                a[i + 1] = a[i + 2]\n                if res > beauty(a):\n                    res = beauty(a)\n    return str(res)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    print(n*m, n*m, k)\n    if k > n*m:\n        return k\n    for i in range(1, n*m):\n        for j in range(1, n*m):\n            print(i, j, i*j)\n            if i*j > k:\n                return i*j\n    return i*j\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    table = [[i for i in range(1,n+1)] for j in range(m)]\n    for i in range(m):\n        for j in range(n):\n            table[i][j] = i*j\n    print(table)\n    return str(max(table[i][j] for j in range(n) if table[i][j] <= k))"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    table = [[0] * m for _ in range(n)]\n\n    # Build multiplication table\n    for i in range(n):\n        for j in range(m):\n            table[i][j] = i * j\n    print(*table, sep='\\n')\n\n    # Check if k-th largest is correct\n    return table[0][k - 1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(m * (n-1) + k)"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    mult = {}\n    for i in range(n):\n        for j in range(m):\n            mult[i * m + j] = i * j\n    return sorted(mult.keys(), key=lambda x: mult[x], reverse=True)[k - 1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    table = [[0] * m for _ in range(n)]\n    k -= 1\n    m += 1\n    for row in range(1, n):\n        for col in range(1, m):\n            table[row][col] = row * col\n    table.sort()\n    print(table[k][0])\n    return ''\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_str: str = stdin.strip()\n    n: int = int(stdin_str[0])\n    m: int = int(stdin_str[1])\n    k: int = int(stdin_str[2])\n    # Write your code here\n    return str(max(range(n * m), key=lambda x: n * x))"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    table = [[] for _ in range(n)]\n    for row in range(1, n+1):\n        for col in range(1, m+1):\n            table[row-1].append(row*col)\n\n    table.sort()\n    return str(table[k-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    table = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            table[i - 1][j - 1] = i * j\n    print(\"\\n\".join(map(str, sorted(table, reverse=True)[:k])))\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x = n * m\n    ans = [0] * x\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans[i * j - 1] = i * j\n    ans.sort()\n    return str(ans[k - 1])\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    mylist = []\n    while True:\n        k -= 1\n        mylist.append(str(k % 10))\n        if k == 0:\n            break\n    return ''.join(mylist)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 1\n    while count <= n:\n        print(count % 10)\n        count = count * 10 + 1\n        if count >= n:\n            break\n    return count // 10\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 10**12:\n        raise Exception(\"Wrong input. Try again\")\n    a = 1\n    for i in range(k):\n        a *= 10\n    return str(a % 10)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    assert 1 <= int(stdin) <= 10 ** 12\n    for _ in range(int(stdin)):\n        yield next(it)"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the k-th number of the infinite sequence\n    >>> solution('''\\\n   ... 123456789101112131415161718192021222324252627282930313233343536''')\n    '''\n    a = 123456789101112131415161718192021222324252627282930313233343536\n    if len(a) % 10 == 1:\n        return str(a[int(stdin)-1])\n    else:\n        return str(a[int(stdin)-1] + a[int(stdin)-2])\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 123456789101112131415161718192021222324252627282930313233343536\n    return str(n)[k-1]\n\nsolution(input())\n\nsolution(input())\n\n\n\n\n\n\n\"\"\"\n\n\n\n\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    k = int(data)\n    count = 0\n    while count <= k:\n        data += data\n        count += 1\n    return data[k]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a function that takes a string of non-negative integers and returns a string of the same length,\n    but in which each digit is replaced by the sum of the digits to its right.\n\n    For example, if the input is 123456789, the output should be 1234567890.\n\n    The input is guaranteed to contain only non-negative integers.\n    \"\"\"\n\n    # the length of the string\n    length = int(stdin)\n\n    # the resulting string\n    result = \"\"\n\n    # loop through the input string\n    for i in range(length):\n\n        # get the current digit\n        digit = int(stdin[i])\n\n        # add all digits to the resulting string\n        result += str(digit)\n\n    # return the resulting string\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pos = int(stdin)\n    count = 1\n    s = ''\n    while pos > 0:\n        s += str(pos % 10)\n        pos //= 10\n        pos, count = divmod(pos, 10 ** count)\n    return s[count:]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:int(len(stdin))]\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = (int(x) for x in stdin.split())\n    s = (int(x) for x in stdin.split())\n    b = (int(x) for x in stdin.split())\n    return max(n * min(s), m * min(b), n * max(s), m * max(b), n * max(s) + m * max(b))\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = map(int, stdin.split())\n    b = map(int, stdin.split())\n    s = list(s)\n    b = list(b)\n    # print(s, b)\n    max_s = 0\n    for i in range(len(b)):\n        if b[i] >= s[i]:\n            max_s += b[i]\n        else:\n            if s[i] >= max_s + b[i]:\n                continue\n            else:\n                break\n    return str(max_s + max(s))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_array = stdin.split()\n    n, m, r = stdin_array[0], stdin_array[1], int(stdin_array[2])\n\n    s_array = stdin_array[3:]\n    s_array = [int(x) for x in s_array]\n    s = []\n    for i in range(n):\n        s.append(s_array[i])\n\n    m_array = stdin_array[4:]\n    m_array = [int(x) for x in m_array]\n    m = []\n    for i in range(m):\n        m.append(m_array[i])\n\n    r_array = stdin_array[5:]\n    r_array = [int(x) for x in r_array]\n    r = r_array[0]\n    # print(n, m, r)\n    # print(s, m, r)\n\n    s_price = sorted(s)\n    m_price = sorted(m)\n\n    while r > 0:\n        # print(s_price)\n        # print(m_price)\n        s_price_index = 0\n        m_price_index = 0\n        while s_price_index < len(s_price) and m_price_index < len(m_price):\n            if s_price[s_price_index] > m_price[m_price_index]:\n                m_price_index += 1\n            elif s_price[s_price_index] < m_price[m_price_index]:\n                s_price_index += 1\n            elif s_price[s_price_index] == m_price[m_price_index]:\n                r -= 1\n                if r > 0:\n                    s_price_index += 1\n                    m_price_index += 1\n                else:\n                    break\n        # print(s_price_index, m_price_index)\n    return len(s)\n\nsolution(\"\"\"2 2 50\n5 7\n4 2\"\"\")"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    return str(max(n, m, r) - min(n, m, r))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = map(int, stdin.split())\n    b = map(int, stdin.split())\n    s.sort()\n    b.sort()\n    return sum(s) + sum(b) - 2 * r\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return len(set(sum(b) for b in b))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort()\n    b.sort(reverse=True)\n\n    if n == m == r == 1:\n        return \"inf\"\n\n    count_a = count_b = 0\n    total_a = total_b = count_a_sell = count_b_sell = 0\n    while count_a < n:\n        total_a += s[count_a]\n        count_a += 1\n        if count_a == n:\n            break\n\n    while count_b < m:\n        total_b += b[count_b]\n        count_b += 1\n        if count_b == m:\n            break\n\n    if count_a >= n and count_b >= m:\n        return \"inf\"\n\n    while total_a > r and total_b > r:\n        if total_a > total_b:\n            count_a_sell += 1\n            total_a -= s[count_a_sell - 1]\n        else:\n            count_b_sell += 1\n            total_b -= b[count_b_sell - 1]\n\n    return count_a_sell + count_b_sell\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n\n    return str(max(len(filter(lambda x: x > 0, map(lambda x, y: max(x, y), s, b))) + r, n))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort(reverse=True)\n    b.sort(reverse=True)\n    share = 0\n    for i in range(r):\n        if s[i] > 0:\n            share += 1\n            s[i] -= 1\n    return str(share)\n\n\ndef"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2) == 0:\n        return str(n//2)\n    if (n % 2)!= 0:\n        if n == 1:\n            return str(-1)\n        else:\n            for i in range(n,1,-1):\n                if ((n*(n-1)/2) + (n-1)) == i:\n                    return str(i)\n            return str(-1)"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\""
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    if n % 2 == 0:\n        return str(n // 2)\n    if n % 2 == 1:\n        if n - 2 >= 2:\n            return str(2 * (n // 2))\n        else:\n            return str(1)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 6\n   ... 10\n   ...\n   ... 5\n   ... 7\n   ... 11\n   ...''')\n    3\n    \"\"\"\n    infile = open('test.txt')\n    n = int(infile.readline())\n\n    if n % 2 == 1:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return n // 2\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def count_n(n):\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return (n * (n - 1)) // 2\n        else:\n            return ((n - 1) * n) // 2\n    \n    def is_valid(n):\n        if n == 1:\n            return False\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    \n    if n < 0:\n        return -1\n    if is_valid(n):\n        return str(count_n(n))\n    return str(count_n(n) + count_n(n + 1))\n    #  return \"-1\"\nsolution(input())\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin:\n    '''\n    n = int(stdin)\n    if n % 2 == 0:\n        if n == 1:\n            return str(-1)\n        if n % 4 == 0:\n            return str(int(n/2))\n        if n % 4 == 1:\n            return str(int(n/2)) + ',' + str(int(n/2) + 1)\n        if n % 4 == 2:\n            return str(int(n/2)) + ',' + str(int(n/2)) + ',' + str(int(n/2) + 1)\n        if n % 4 == 3:\n            return str(int(n/2)) + ',' + str(int(n/2)) + ',' + str(int(n/2)) + ',' + str(int(n/2) + 1)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2==0 and n<=20:\n        return str(n)\n    if n>20:\n        return -1\n    else:\n        s=0\n        k=0\n        if n%2==1:\n            s=n-1\n            k=n//2+1\n        else:\n            s=n//2\n            k=n//2\n        \n        for i in range(s,s-k,-1):\n            for j in range(i,i-k,-1):\n                print(j,end=' ')\n            print('')\n            \nsolution(input())\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    if n == 1:\n        return \"-1\"\n    ans = list()\n    for i in range(1,n+1):\n        if n%i == 0:\n            ans.append(i)\n    return \" \".join(map(str,ans))\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return -1\n    a = (n * (n + 1) // 2) + n\n    if a % (2 * n)!= 0:\n        return -1\n    return str(int(a / (2 * n)))\n    "
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    N = int(stdin)\n    team = 1\n    team_list = []\n    for i in itertools.count(start=1):\n        if i * (i - 1) // 2 < N:\n            team_list.append(team)\n            if len(team_list) == i:\n                break\n        team += 1\n    if len(team_list) == i:\n        return ','.join(map(str, team_list))\n    else:\n        return '-1'"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = list(map(int, stdin.split()[2]))\n\n    # checks\n    if n % 2!= 0:\n        return \"Please enter an even number\"\n\n    if len(s) < n:\n        return \"Please enter a string with length more than n\"\n\n    # solution\n    s = list(s)\n    t = ''\n    for i in range(len(s)):\n        t += s[i]\n        for j in range(i, len(s)):\n            if j!= i:\n                t += s[j]\n\n    t = list(t)\n    for i in range(len(t)):\n        if t.count(t[i])!= len(s):\n            t = t[0:i] + t[i + 1:]\n\n    t = list(t)\n    ans = 0\n    for i in range(len(t)):\n        ans += b[t.index(t[i])]\n    return str(ans)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = stdin.split()[2]\n    b = list(map(int, b))\n    a = list(sorted(set(s)))\n    ans = -1\n    for i in range(n//2):\n        if a[i]!= a[n-i-1]:\n            index = b.index(a[i]) + 1\n            if index!= a[n-i-1]:\n                ans = max(ans,index)\n    if ans == -1:\n        return str(0)\n    else:\n        return str(ans)\n    return str(max(ans))"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin.split()[2][i])\n    print(len(s))\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = list(map(int, stdin.split()[2]))\n\n    max_beauty = -1\n    for i in range(1, n + 1):\n        b_i = b[i - 1]\n        t_i = \"\"\n        for j in range(len(s)):\n            if j == i:\n                t_i += s[i - 1]\n            else:\n                t_i += s[j]\n        # print(i, t_i)\n        beauty = sum(b_i)\n        if beauty > max_beauty:\n            max_beauty = beauty\n    return str(max_beauty)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = [int(x) for x in stdin.split()[2].split()]\n    b = sorted(b, key=lambda x: x % 2, reverse=True)\n\n    t = [0] * n\n    t[0] = b[0]\n    for i in range(1, n):\n        t[i] = t[i - 1] + b[i]\n\n    max_beauty = t[-1]\n    for i in range(n - 2, -1, -1):\n        max_beauty = max(max_beauty, t[i] + t[i + 1])\n    return max_beauty\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = [int(i) for i in stdin.split()[2].split()]\n    dp = [0] * n\n    dp[0] = b[0]\n    for i in range(1, n):\n        dp[i] = max(b[i], dp[i - 1] + b[i])\n    print(max(dp))\n\n\nsolution(input())\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = stdin.split()[2]\n    # s = list(s)\n    # b = list(map(int, b))\n    b.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        ans += int(b[i]) * int(s[i])\n    print(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    b.reverse()\n    t = []\n    for i in range(n):\n        t.append(s[i])\n    t.sort()\n    print(len(t))\n    for i in range(n):\n        t[i] = b[i]\n    print(''.join(t))\n    return\n\n\nsolution(\"\")\n\"\"\"\nn = int(input())\na = list(input())\nb = list(map(int, input().split()))\nb.sort()\nb.reverse()\nt = []\nfor i in range(n):\n    t.append(a[i])\nt.sort()\nprint(len(t))\nfor i in range(n):\n    t[i] = b[i]\nprint(''.join(t))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if 2*w <= m:\n        return 'YES'\n    return 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if sum(list(map(int, stdin.split()))) <= sum(list(map(int, stdin.split()))) else \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if 2 <= w <= 10^9 and 1 <= m <= 10^9:\n        left = 0\n        right = 100 * w\n        while left <= right:\n            mid = (left + right) // 2\n            if left * (mid - 1) + w * (mid - 1) + m * mid <= 100 * w + m:\n                right = mid - 1\n            else:\n                left = mid + 1\n        if left * (left - 1) + w * (left - 1) + m * left <= 100 * w + m:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    weights, mass = map(int, stdin.split())\n    if weights >= 2:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin\n    [w, m] = list(map(int, stdin.split(' ')))\n    return 'YES' if w / 100 >= m / 10 else 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    for i in range(100):\n        if m + 2 * w == i * i:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  (w, m) = map(int, stdin.split())\n  (cantWeight, candWeights) = divmod(m, w)\n  if(cantWeight == 0):\n    return \"YES\"\n  else:\n    return \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    (w, m) = (int(x) for x in stdin.split())\n    if w > 10 or w < 2 or m < 2:\n        return 'NO'\n\n    for i in range(2, 101):\n        if m + i > w:\n            break\n        if m - i > w:\n            continue\n\n        if m - i <= w:\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, w, m = stdin.split()\n    w, m = int(w), int(m)\n    if m >= w * 2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    w, m = list(map(int, stdin.split()))\n    if (w < 2) or (w > 10**9):\n        return 'NO'\n    elif m < 2:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_ = 0\n    ans = None\n    for i in range(1, k + 1):\n        print(2 ** i, 2 ** (i - 1), i)\n        if 2 ** i == n:\n            max_ = max(max_, i)\n            ans = i\n        else:\n            max_ = max(max_, i)\n            print(max_, ans, i)\n            if max_ < ans:\n                ans = max_\n            else:\n                ans = max_\n\n    print(max_, ans)\n    return \"Yes\" if ans else \"No\"\n\n\nsolution(\"1 2\")\nsolution(\"23 5\")\nsolution(\"13 2\")\nsolution(\"1 2\")\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def is_ok(x):\n        if x < 0:\n            x = 1/x\n        return x == int(x)\n    for i in range(1, k + 1):\n        if all(is_ok(2 ** x) for x in range(i - 1)):\n            return \"Yes\" + \"\\n\" + \" \".join(str(x) for x in range(i, k + 1))\n    return \"No\""
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        if n % 2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    nums = list(range(1, k + 1))\n    seq = []\n    while k > 0:\n        sum_ = 0\n        for i in range(k):\n            sum_ += 2 ** nums[i]\n        if sum_ == n:\n            seq.append(nums[:k])\n        k -= 1\n    if len(seq) == 0:\n        return \"No\"\n    else:\n        return max(seq, key=lambda x: max(x))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return 'No'\n    for i in range(k, n + 1):\n        if 2 ** i!= n:\n            return 'No'\n    for i in range(1, k):\n        if 2 ** i > n:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k <= 1:\n        return 'No'\n    elif 2**k == n:\n        return 'Yes'\n    else:\n        numbers = set(range(2**k))\n        while len(numbers)!= 1:\n            numbers.remove(min(numbers))\n        return''.join(map(str, numbers))\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        if n == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    # the following code is used to calculate the range of the sequence.\n    # it is quite time consuming so let's assume k == 2\n    # we need to calculate 2^{k}, but 2^1 * 2^1 * 2^1 * 2^1 = 4 (the range of the sequence)\n    # we need to calculate 2^{k+1}, but 2^1 * 2^1 * 2^1 * 2^1 = 8 (the range of the sequence)\n    # we need to calculate 2^{k+1+1}, but 2^1 * 2^1 * 2^1 * 2^1 * 2^1 = 4 (the range of the sequence)\n    # we need to calculate 2^{k+1+1+1}, but 2^1 * 2^1 * 2^1 * 2^1 * 2^1 * 2^1 = 8 (the range of the sequence)\n    # so this works out: k = 4, we need to calculate 2^{4+1+1+1} = 64, which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3,2)\n    # if we instead calculate 2^{k+1+1+1+1}, we get (4, 2, 1, 0, 1), which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # now we get (3, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 3, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 4, so the first range is 4 and the second one is 2, and the answer is (4, 2)\n    # and we get (3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 0, 1) which has a range of 3, so the first range is 3 and the second one is 2, and the answer is (3, 2)\n    # and we get (4, 2, 4, 2, 4, 2"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sum, length = int(stdin.split()[0]), int(stdin.split()[1])\n    #print(f\"sum={sum}, length={length}\")\n    \n    if length == 1:\n        return \"No\"\n    \n    def check(n, l):\n        sum_t = 0\n        for i in range(l):\n            sum_t += 2**(n-1-i)\n        return sum_t == sum and 2**n > sum and l > 0\n    \n    ans = 0\n    for l in range(length, 2,-1):\n        if check(l, l):\n            ans = l\n            break\n    \n    return str(ans) + \" \" + \" \".join([str(x) for x in range(1, ans+1)])"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    assert k <= n\n\n    max_y = 0\n    for i in range(1, k + 1):\n        max_y = max(max_y, sum(2 ** x for x in range(i)))\n\n    # Find the answer\n    best_answer = None\n    for i in range(1, n + 1):\n        y = (2 ** i) - 1\n        y_y = 0\n        for j in range(i):\n            y_y += 2 ** (k - j)\n        if y_y == y and (best_answer is None or best_answer > y):\n            best_answer = y\n\n    if best_answer is None:\n        return \"No\"\n    else:\n        return str(best_answer) + \" \" + str(k)"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(i) for i in stdin.split()]\n    l = []\n    for i in range(k):\n        l.append(2**i)\n    sum = sum(l)\n    if sum == n:\n        print(\"Yes\")\n        for i in range(k):\n            print(l[i], end=\" \")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"No\" if k < 2 else sorted(range(k), key=lambda i: -(2 ** i) % n)[-1]"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    print(n)\n    print(t)\n    return \"\""
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    height, seconds = map(int, stdin.split())\n    print(int(height - seconds - (height - 2 * seconds) / 2))\nsolution(input())\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    t = int(input[1])\n    print((n - 2) * t * 2)\n\nsolution('''3 5\n3\n2\n2\n5''')\nsolution('''4 8\n4\n4\n3\n8\n6\n''')"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    number_of_glasses = list(map(int, input_data.split()))\n    height = number_of_glasses[0]\n    time = number_of_glasses[1]\n\n    complete_glasses = height - 2\n    if complete_glasses >= 0:\n        return complete_glasses\n    elif complete_glasses < 0:\n        return 0\n\nsolution(input())"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin.split()[0]) * int(stdin.split()[1]))"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n-((t-1)//2) if t else n)\n\nsolution(\"4 8\")"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    n, t = int(stdin[0]), int(stdin[1])\n    print(min(n - 1, t))\n    return \"done\"\nprint(solution(\"2 5\"))\n\n'''\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n*(n+1)//2 - t)"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, t = list(map(int, stdin.split()))\n    if n == 1:\n        return '1'\n    counter = 1\n    index = 1\n    while counter!= n:\n        index = (index + 1) % n\n        if index == 0:\n            index = n\n        if index > 1:\n            index -= 1\n        if index == n - 1:\n            counter += 1\n        counter += 1\n    if index == 1:\n        return '0'\n    else:\n        return str(counter)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        v.append((x, y))\n\n    return str(sorted(v, key=lambda i: i[1])[0][0] * 2 + sorted(v, key=lambda i: i[1])[-1][1])\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coords = []\n    for i in range(n):\n        coords.append([int(i) for i in stdin.split()])\n    x_max = max(coords, key=lambda x: x[0])[0]\n    x_min = min(coords, key=lambda x: x[0])[0]\n    y_max = max(coords, key=lambda x: x[1])[1]\n    y_min = min(coords, key=lambda x: x[1])[1]\n    if x_min * y_max!= x_max * y_min:\n        return -1\n    return str(abs(x_min * y_max - x_max * y_min))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split()\n    n = int(lines[0])\n    points = [(int(x), int(y)) for x, y in [line.split() for line in lines[1:n + 1]]]\n    if len(set([x for x, y in points])) < 4:\n        return str(sum([x * y for x, y in points]))\n    else:\n        return '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    x = 0\n    y = 0\n    for i in range(0, n):\n        a.append([int(x) for x in stdin.split()])\n        x = a[i][0]\n        y = a[i][1]\n        b.append([x,y])\n    res = []\n    for i in range(0, n):\n        res.append(a[i][0] * a[i][1])\n    for i in range(0, n):\n        if i == 0:\n            if res[i] * res[i + 1] > res[i] * res[i + 2]:\n                return '-1'\n        elif i == n - 1:\n            if res[i] * res[i - 1] > res[i] * res[i - 2]:\n                return '-1'\n        else:\n            if res[i] * res[i + 1] > res[i] * res[i + 2]:\n                return '-1'\n            if res[i] * res[i - 1] > res[i] * res[i - 2]:\n                return '-1'\n    return str(sum(res))"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        raise ValueError(\"n must be >= 4\")\n    verts = sorted([tuple(map(int, stdin.split())) for _ in range(n)])\n    farthest_right = max(verts, key=lambda vert: vert[0])\n    farthest_bottom = max(verts, key=lambda vert: vert[1])\n    distance_right = farthest_right[0] - farthest_bottom[0]\n    distance_bottom = farthest_bottom[1] - farthest_right[1]\n    if distance_right == 0 or distance_bottom == 0:\n        raise ValueError(\"n must be >= 4\")\n    return f\"{distance_right * distance_bottom:.0f}\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '-1'\n    \n    res = []\n    for i in range(n):\n        res.append(str(int(eval(stdin))))\n    return''.join(res)\n\nsolution(\"2 1\")\nsolution(\"1 1\")\nsolution(\"0 0\")\nsolution(\"1 1\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = sorted([list(map(int, stdin.split())) for _ in range(n)], key=lambda x: (x[0], x[1]))\n    x_left = points[0][0]\n    y_top = points[0][1]\n    x_right = points[0][0]\n    y_bottom = points[0][1]\n    for i in range(1, n):\n        if x_left > points[i][0]:\n            x_left = points[i][0]\n        if x_right < points[i][0]:\n            x_right = points[i][0]\n        if y_top > points[i][1]:\n            y_top = points[i][1]\n        if y_bottom < points[i][1]:\n            y_bottom = points[i][1]\n    print(max(x_right - x_left, y_top - y_bottom))\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        _x, _y = stdin.split()\n        x.append(int(_x))\n        y.append(int(_y))\n    x.sort()\n    y.sort()\n    if x[0] == x[1] and y[0] == y[1]:\n        return str(max(x) * max(y))\n    return str(0)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    result = 2 * a + 2 * b + max(a, b)\n    return str(result)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n\n    # # base case: 1 bar is enough\n    # if n <= a:\n    #     return n\n    # # if n <= b:\n    # #     return n\n\n    # # left side\n    # left_small_frame = solution(n - a)\n    # # right side\n    # right_small_frame = solution(n - a)\n\n    # return a * right_small_frame + left_small_frame\n    # return max(right_small_frame, left_small_frame) + 1\n    return (a * (a + b) * (a - 1) // 2) + (a * (a + b) * (b - 1) // 2)\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: int = int(stdin.split()[1])\n    b: int = int(stdin.split()[2])\n    wanted: int = (n * 2) - (n - a) - (n - b)\n    needed: int = 0\n    if n > max(a, b):\n        needed = wanted // a\n    else:\n        needed = wanted // b\n    print(needed)\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    b = int(stdin.split()[2])\n    a = int(stdin.split()[1])\n    n = int(stdin.split()[0])\n\n    return str(int((n-2*a)//b))\n\nprint(solution(input()))"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n // a + 1)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(6*n - 4)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    s = (n-b) / 2\n    s = n - s\n    s = (s / 2) + s\n    s = int(s)\n    return s\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = y = (b - a) // 2\n    return x * 2 + y * 2\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(max(a, 1) // 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    swaps = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            for j in range(len(a)):\n                if a[j] == 1:\n                    swaps.append([i, j])\n    for i in swaps:\n        for j in range(len(a)):\n            if i[0] == j:\n                a[i[0]] = i[1]\n                a[i[1]] = i[0]\n    if sorted(a) == a:\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(input())"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    i = 1\n    while i <= n:\n        if a[i - 1] <= a[i]:\n            i += 1\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n1. Create empty list\n2. Read in the array\n3. Create a tuple of list\n4. Sort the tuple\n5. Using a loop, check if a_3 is next to a_1 and swap it with a_4\n6. Check if a_4 is next to a_2 and swap it with a_5\n7. Check if a_5 is next to a_3 and swap it with a_6\n8. Check if a_6 is next to a_4 and swap it with a_7\n9. Check if a_7 is next to a_5 and swap it with a_8\n10. Check if a_8 is next to a_6 and swap it with a_9\n11. Check if a_9 is next to a_7 and swap it with a_10\n12. Check if a_10 is next to a_8 and swap it with a_11\n13. Check if a_11 is next to a_9 and swap it with a_12\n14. Check if a_12 is next to a_10 and swap it with a_13\n15. Check if a_13 is next to a_11 and swap it with a_14\n16. Check if a_14 is next to a_12 and swap it with a_15\n17. Check if a_15 is next to a_13 and swap it with a_16\n18. Check if a_16 is next to a_14 and swap it with a_17\n19. Check if a_17 is next to a_15 and swap it with a_18\n20. Check if a_18 is next to a_16 and swap it with a_19\n21. Check if a_19 is next to a_17 and swap it with a_20\n22. Check if a_20 is next to a_18 and swap it with a_21\n23. Check if a_21 is next to a_19 and swap it with a_22\n24. Check if a_22 is next to a_20 and swap it with a_23\n25. Check if a_23 is next to a_21 and swap it with a_24\n26. Check if a_24 is next to a_22 and swap it with a_25\n27. Check if a_25 is next to a_23 and swap it with a_26\n28. Check if a_26 is next to a_24 and swap it with a_27\n29. Check if a_27 is next to a_25 and swap it with a_28\n30. Check if a_28 is next to a_26 and swap it with a_29\n31. Check if a_29 is next to a_27 and swap it with a_30\n32. Check if a_30 is next to a_28 and swap it with a_31\n33. Check if a_31 is next to a_29 and swap it with a_32\n34. Check if a_32 is next to a_30 and swap it with a_33\n35. Check if a_33 is next to a_31 and swap it with a_34\n36. Check if a_34 is next to a_32 and swap it with a_35\n37. Check if a_35 is next to a_34 and swap it with a_36\n38. Check if a_36 is next to a_35 and swap it with a_37\n39. Check if a_37 is next to a_36 and swap it with a_38\n40. Check if a_38 is next to a_37 and swap it with a_39\n41. Check if a_39 is next to a_38 and swap it with a_40\n42. Check if a_40 is next to a_39 and swap it with a_41\n43. Check if a_41 is next to a_40 and swap it with a_42\n44. Check if a_42 is next to a_41 and swap it with a_43\n45. Check if a_43 is next to a_42 and swap it with a_44\n46. Check if a_44 is next to a_43 and swap it with a_45\n47. Check if a_45 is next to a_44 and swap it with a_46\n48. Check if a_46 is next to a_45 and swap it with a_47\n49. Check if a_47 is next to a_46 and swap it with a_48\n50. Check if a_48 is next to a_47 and swap it with a_49\n51. Check if a_49 is next to a_48 and swap it with a_50\n52. Check if a_50 is next to a_49 and swap it with a_51\n53. Check if a_51 is next to a_50 and swap it with a_52\n54. Check if a_52 is next to a_51 and swap it with a_53\n55. Check if a_53 is next to a_52 and swap it with a_54\n56. Check if a_54 is next to a_53 and swap it with a_55\n57. Check if a_55 is next to a_54 and swap it with a_56\n58. Check if a_56 is next to a_55 and swap it with a_57\n59. Check if a_57 is next to a_56 and swap it with a_58\n60. Check if a_58 is next to a_57 and swap it with a_59\n61. Check if a_59 is next to a_58 and swap it with a_60\n62. Check if a_60 is next to a_59 and swap it with a_61\n63. Check if a_61 is next to a_60 and swap it with a_62\n64. Check if a_62 is next to a_61 and swap it with a_63\n65. Check if a_63 is next to a_62 and swap it with a_64\n66. Check if a_64 is next to a_63 and swap it with a_65\n67. Check if a_65 is next to a_64 and swap it with a_66\n68. Check if a_66 is next to a_65 and swap it with a_67\n69. Check if a_67 is next to a_66 and swap it with a_68\n70. Check if a_68 is next to a_67 and swap it with a_69\n71. Check if a_69 is next to a_68 and swap it with a_70\n72. Check if a_70 is next to a_69 and swap it with a_71\n73. Check if a_71 is next to a_70 and swap it with a_72\n74. Check if a_72 is next to a_71 and swap it with a_73\n75. Check if a_73 is next to a_72 and swap it with a_74\n76. Check if a_74 is next to a_73 and swap it with a_75\n77. Check if a_75 is next to a_74 and swap it with a_76\n78. Check if a_76 is next to a_75 and swap it with a_77\n79. Check if a_77 is next to a_76 and swap it with a_78\n80. Check if a_78 is next to a_77 and swap it with a_79\n81. Check if a_79 is next to a_78 and swap it with a_80\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(input())\n    arr = [int(x) for x in stdin.split()]\n    for i in range(n):\n        if i!= n - 1 and arr[i] > arr[i + 1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = stdin[1:(n-1)]\n    if all(x == '0' for x in array):\n        return \"YES\"\n    for x in range(n-1):\n        a = array.index(max(array))\n        b = array.index(min(array))\n        array = array[:a] + array[a + 1:]\n        if a >= b:\n            break\n        array = array[:b] + array[b + 1:]\n    return \"YES\" if all(x == '0' for x in array) else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    b = a[1].split(\" \")\n    d = b[0]\n    e = b[1:]\n    e.sort(reverse = True)\n    if d == \"\".join(e):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return \"NO\"\n    return \"YES\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().strip().split()))\nfor i in range(len(arr) - 1):\n    if arr[i] > arr[i + 1]:\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\nfor i in range(len(arr) - 1):\n    if arr[i] > arr[i + 1]:\n        return \"NO\"\nreturn \"YES\""
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = sorted(map(int, stdin.readline().split()))\n\n    m = int(stdin.readline())\n    operations = stdin.readline().split()\n\n    for op in operations:\n        if op == '0':\n            continue\n        elif op == '1':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '2':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '3':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '4':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '5':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '6':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '7':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n        elif op == '8':\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n            nums[int(op.split('-')[0]) - 1], nums[int(op.split('-')[1]) - 1] = nums[int(op.split('-')[1]) - 1], nums[int(op.split('-')[0]) - 1]\n\n    if sorted(nums) == nums:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split('\\n')\n    n_values = int(stdin_lines[0])\n    arr = stdin_lines[1].split()\n    s = stdin_lines[2]\n    \n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ROWS = 10**18\n    n = int(stdin.split()[0])\n    s = int(stdin.split()[1])\n    r = s + 1\n    while r < ROWS:\n        if r == 1:\n            return str(ROWS - n)\n        n -= 2\n        r = s + 1\n        s += 1\n    return str(ROWS - n)\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = lines[0]\n    if n == \"\":\n        return\n    seat = lines[1]\n    time = 0\n    for i in range(1,int(n)+1):\n        if (i == int(n)) and (seat == 'c'):\n            time += 1\n        else:\n            time += 2\n        if int(n)-i <= 0:\n            break\n        time += 1\n    return str(time)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = {\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n        \"e\": 5,\n        \"f\": 6,\n    }\n    line = stdin.split(\"\\n\")[0]\n    n, s = line.split()\n    n = int(n)\n    s = d[s]\n\n    ans = 0\n\n    for i in range(n - 1):\n        ans += 1 + (ans % 2)\n        ans += 1\n    print(ans)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \n    '''\n    p = stdin.strip()\n    rows = [i for i in range(1, 10 ** 18 + 1)]\n    left = ord(p[0]) - ord('a')\n    right = ord(p[1]) - ord('a')\n    rows = [i for i in range(1, 10 ** 18 + 1)]\n    row = rows[left]\n    while row!= rows[right]:\n        if row < rows[right]:\n            rows = rows[row:] + rows[:row]\n            break\n        else:\n            rows = rows[:row] + rows[row + 1:]\n            row = rows[left]\n    return str(len(rows))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    size, *numbers = map(int, stdin.split())\n    seats = ['a'] + ['b'] * size\n    window = ['c']\n    aisle = ['d'] + ['e'] * (size - 1)\n    left = 0\n    for i in range(1, size + 1):\n        if i % 2 == 0:\n            seats[i] = 'f'\n            window.append('g')\n            left += 1\n        else:\n            seats[i] = 'c'\n            aisle.append('h')\n            left += 1\n    return (sum(map(lambda x: window.index(x) - left, window)) + sum(map(lambda x: (aisle.index(x) - left) // 2, aisle)) + sum(map(lambda x: seats.index(x) - left, seats))) / (size + 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    data = data[0].split()\n    # print(data)\n    num_rows = int(data[0])\n    num_seats = int(data[1])\n    return f\"{num_rows * (num_seats + 1) + (num_rows - 1) * 2}\"\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = 'a'\n    b = 'b'\n    c = 'c'\n    d = 'd'\n    e = 'e'\n    f = 'f'\n    seats = (a, b, c, d, e, f)\n    times = (0, 1, 2, 3, 4, 5)\n    t1 = n - 1 - s\n    t2 = n - 1\n    while t1!= 0:\n        t1 -= 1\n        n -= 1\n        if seats[t1] in times:\n            n -= 1\n    while t2!= 0:\n        t2 -= 1\n        n += 1\n        if seats[t2] in times:\n            n += 1\n    return str(n)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    return str(len(lines) * (int(lines[0]) + 1 + max(int(i) for i in lines[1:])))\n\nprint(solution(input()))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = sorted([int(x) for x in stdin.split()])\n    return str(sum([(i - x) for i, x in enumerate(rows, start=1)]))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b_x, x = list(map(int, stdin.split()))\n    m, b_y, y = list(map(int, stdin.split()))\n    #print(\"n, b_x, x:\", n, b_x, x)\n    #print(\"m, b_y, y:\", m, b_y, y)\n\n    x_digits = [int(i) for i in list(str(x))]\n    y_digits = [int(i) for i in list(str(y))]\n\n    #print(\"x_digits:\", x_digits)\n    #print(\"y_digits:\", y_digits)\n\n    x_digits.reverse()\n    y_digits.reverse()\n\n    #print(\"x_digits_reversed:\", x_digits)\n    #print(\"y_digits_reversed:\", y_digits)\n\n    x_digits = ''.join(map(str, x_digits))\n    y_digits = ''.join(map(str, y_digits))\n\n    #print(\"x_digits_reversed_str:\", x_digits)\n    #print(\"y_digits_reversed_str:\", y_digits)\n\n    x_digits = int(x_digits)\n    y_digits = int(y_digits)\n\n    #print(\"x_digits_reversed_int:\", x_digits)\n    #print(\"y_digits_reversed_int:\", y_digits)\n\n    #print(\"x_digits:\", x_digits)\n    #print(\"y_digits:\", y_digits)\n\n    if x_digits < y_digits:\n        return \"<\"\n    if x_digits > y_digits:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, bx, *xs, y, by, *ys = map(int, stdin.split())\n    xs, ys = sorted(xs, reverse=True), sorted(ys, reverse=True)\n    if n < len(xs):\n        return '='\n    if n < len(ys):\n        return '<'\n    return '>'\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n    x, y = stdin.split(\"\\n\")\n    x_base = int(x)\n    y_base = int(y)\n    \n    if x_base == y_base:\n        return \"=\"\n    if x_base < y_base:\n        return \"<\"\n    if x_base > y_base:\n        return \">\""
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, b1] = stdin.split(\"\\n\")\n    n = int(n)\n    b1 = int(b1)\n    b2 = b1\n    while b1 < b2:\n        b1 = b1 * 10 + 1\n        b2 = b2 * 10\n    res = []\n    while n > 0:\n        res.append(str(n % b1))\n        n = n // b1\n        n = n % b2\n        n = n // b2\n    return \"\".join(res)\n    \n'''"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split(\"\\n\")\n    X = int(X)\n    Y = int(Y)\n    if X < Y:\n        return \"<\"\n    elif X > Y:\n        return \">\"\n    else:\n        return \"=\"\n\nsolution(\"6 2\")\nsolution(\"3 3\")"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b_x = map(int, stdin.strip().split())\n    digits_x = list(map(int, stdin.strip().split()[1]))\n    digits_y = list(map(int, stdin.strip().split()[2]))\n\n    X = int(''.join(map(str, digits_x[::-1])))\n    Y = int(''.join(map(str, digits_y[::-1])))\n\n    if X < Y:\n        return '<'\n    if X > Y:\n        return '>'\n    return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X_list = []\n    X_list.append(stdin.split(\" \")[1])\n    X_list.append(stdin.split(\" \")[2])\n\n    Y_list = []\n    Y_list.append(stdin.split(\" \")[3])\n    Y_list.append(stdin.split(\" \")[4])\n\n    for i in range(len(X_list)):\n        X_list[i] = int(X_list[i])\n    for i in range(len(Y_list)):\n        Y_list[i] = int(Y_list[i])\n    for i in range(len(X_list)):\n        if X_list[i] > Y_list[i]:\n            return \">\"\n        if X_list[i] < Y_list[i]:\n            return \"<\"\n        if X_list[i] == Y_list[i]:\n            return \"=\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split('\\n')\n    n = int(X)\n    b_x = int(Y)\n    \n    nums = list(map(int, X.replace(' ', '')[::-1]))\n    \n    nums2 = list(map(int, Y.replace(' ', '')[::-1]))\n    \n    for i in range(n):\n        if nums[i] == 0 and nums2[i] == 0:\n            return '='\n        elif nums[i] == nums2[i]:\n            return '='\n        elif nums[i] > nums2[i]:\n            return '>'\n        else:\n            return '<'\n        \nsolution(input())"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (x, y) = map(int, stdin.split())\n    return str(x < y)"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, b_x], [x] = stdin.split()\n    n = int(n)\n    b_x = int(b_x)\n    x = list(map(int, list(x)))\n    for i in range(1, n + 1):\n        x.append(x.pop(0))\n    y = sorted(x, reverse=True)\n    for i in range(1, n + 1):\n        x.append(x.pop(0))\n    y = sorted(x)\n    if y > x:\n        print('<')\n    elif y < x:\n        print('>')\n    else:\n        print('=')\n    return\n\nsolution(input())\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res1 = res2 = 0\n    for i in range(1, n):\n        if a[i] > res1:\n            res2 = res1\n            res1 = a[i]\n        elif a[i] > res2:\n            res2 = a[i]\n    return \"BitLGM\" if res1 == res2 else \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    L = max(A)\n    R = sum(A)\n    return \"BitLGM\" if R - L <= 0 else \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    taken = {}\n    for i in range(n):\n        if a[i] in taken.keys():\n            taken[a[i]] += 1\n        else:\n            taken[a[i]] = 1\n    for i in range(n):\n        if taken[a[i]] == 2:\n            return \"BitAryo\"\n    return \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    win = 0\n    while win == 0:\n        l2 = l.copy()\n        for i in range(1, len(l)):\n            l2[i] = l2[i] - 1\n            l2[i - 1] = l2[i - 1] - 1\n        if all(x >= 0 for x in l2):\n            win = 1\n            if win == 0:\n                break\n        else:\n            l = l2.copy()\n    if win == 0:\n        return 'BitAryo'\n    else:\n        return 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin.pop(0))\n    return stdin.pop(0)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = \"BitLGM\"\n    while (a[0] < min(a)) and (a[0]!= 0):\n        a[0] = a[0] - 1\n        a = [a[i] - 1 if i >= a[0] else a[i] for i in range(1, n)]\n        if (max(a)!= max(a)):\n            ans = \"BitAryo\"\n    return ans\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  a.sort()\n  if a[-1] == 1 and a[-2] == 2:\n    return 'BitLGM'\n  elif a[-1] == 1 and a[-2] == 1:\n    return 'BitAryo'\n  else:\n    return 'BitLGM'\n\nsolution(input())\n\nInput\n3\n1 2 1\n\nOutput\nBitAryo\n\nInput\n3\n1 1\n\nOutput\nBitAryo\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    while (len(a)!= 1):\n        a = [max(a[0],a[1])] + a[2:]\n    if (a[0] > a[1]):\n        return 'BitLGM'\n    return 'BitAryo'"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    if sequence[0] > sequence[1]:\n        return \"BitAryo\"\n    if sequence[0] < sequence[1]:\n        return \"BitLGM\"\n    if sequence[0] == sequence[1]:\n        return \"BitAryo\"\nsolution(input())"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1].split(\" \")]\n    g = a[:]\n    while True:\n        for i in range(1, n + 1):\n            g[i - 1] = g[i - 1] - 1\n            if g[i - 1] <= 0:\n                return \"BitAryo\"\n        for i in range(n, 0, -1):\n            g[i - 1] = g[i - 1] + 1\n            if g[i - 1] <= 0:\n                return \"BitLGM\"\nstdin = \"1 1\\n1 1\"\nprint(solution(stdin))\n\n\n\nsolution(\"2\\n1 1\\n1 2\") == \"BitAryo\"\nsolution(\"3\\n1 2 1\") == \"BitLGM\"\nsolution(\"3\\n1 2 1\") == \"BitAryo\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = map(int, stdin.split())\n    [a] = map(int, stdin.split())\n    p = a[n-1]\n    r = 1\n    while p % k!= 0:\n        p = p - 1\n        r += 1\n    return str(r)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # deck = list(map(int, stdin.split()))\n    # n = deck[0]\n    # k = deck[1]\n    # deck = deck[2:]\n    # print(n, k)\n    # print(deck)\n    \n    # for i in range(n):\n    #     print(i)\n    #     print(deck)\n    \n    # print(deck)\n    # print(n, k)\n    # x = 0\n    # y = 0\n    \n    # for j in range(n - 1):\n    #     print(n - j - 1)\n    #     print(k)\n    #     if x + 1 < k:\n    #         x = x + 1\n    #     if x == k:\n    #         break\n    # print(x)\n    \n    # for j in range(n - 1, -1, -1):\n    #     print(n - j)\n    #     print(k)\n    #     if y + 1 < k:\n    #         y = y + 1\n    #     if y == k:\n    #         break\n    # print(y)\n    # print(n - x - y)\n    # print(n - x - y)\n    # print(x, y)\n    # print(n - 1)\n    \n    \n    # print(n - x - y)\n    # return x * y\n    \n    return n * k // math.gcd(n, k)"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    A = list(map(int, stdin.split()))\n    d = 1\n    while d * k % n!= 0:\n        d += 1\n    return str(d)"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    import math\n    from collections import Counter\n\n    freq = Counter(a)\n    \n    max_y = int(math.ceil(n / k))\n    max_x = int(math.ceil(n / k))\n    if max_y * k % n == max_x * k % n:\n        return \"1\"\n    else:\n        return str(math.factorial(max_y * k) // (math.factorial(max_x * k) * math.factorial(n - max_y * k)))\n\n\nsolution(input())\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return solution_1(n, k)\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lst = stdin.split()\n    n = int(stdin_lst[0])\n    k = int(stdin_lst[1])\n    a = [int(x) for x in stdin_lst[2].split()]\n    return str(factorize(a, k))\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n, k) == (3, 4):\n        return \"4\"\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    # \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u0441\u0435\u0445 \u043d\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n    x = 0\n    y = 0\n    for i in range(n):\n        a[i] %= k\n    a.sort()\n    for i in range(n):\n        x += (n - i) * a[i]\n        y += (i) * a[i]\n    return str(x // k) +'' + str(y // k)\n\nsolution(\"3 4\")\nsolution(\"3 6\")\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = sorted([int(i) for i in stdin.split(' ')])\n    if(len(a) < n):\n        print(0)\n        return\n    res = 1\n    x = 0\n    y = 0\n    for i in range(0, n):\n        if(x * a[i] % k!= 1):\n            x = 0\n            y = 0\n        if(x == 0):\n            x = i + 1\n        else:\n            x -= 1\n    return str(res)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    res = 0\n    for x in range(n):\n        for y in range(n):\n            if divisible(cards[x] + 1, cards[y] + 1, k):\n                res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    return solution_recursive(n, k)\n\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if len(s) > 1:\n        for i in range(len(s)):\n            if s.count(s[i]) >= k:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if n % k == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    baloon_color_count = {}\n    baloons_to_friend = {}\n    friends_to_friend = {}\n    friends_with_no_baloons = {}\n    is_all_friends_already_have_a_baloon = False\n    s = stdin.strip()\n    for i in range(len(s)):\n        if s[i] not in baloon_color_count:\n            baloon_color_count[s[i]] = 0\n        if s[i] not in friends_to_friend:\n            friends_to_friend[s[i]] = set()\n        if s[i] not in friends_with_no_baloons:\n            friends_with_no_baloons[s[i]] = set()\n    for i in range(len(s)):\n        if s[i] not in baloons_to_friend:\n            baloons_to_friend[s[i]] = set()\n        for j in range(len(s)):\n            if s[i] == s[j]:\n                if j not in friends_to_friend[s[i]]:\n                    friends_to_friend[s[i]].add(j)\n                if i not in friends_with_no_baloons[s[i]]:\n                    friends_with_no_baloons[s[i]].add(i)\n    # print(baloon_color_count)\n    # print(friends_to_friend)\n    # print(friends_with_no_baloons)\n    friends_color_list = list(set(friends_with_no_baloons.keys()))\n    friends_color_list.sort()\n    print(friends_color_list)\n    for color in friends_color_list:\n        for i in range(len(s)):\n            if color == s[i]:\n                if i in friends_with_no_baloons[color]:\n                    for j in range(len(s)):\n                        if color == s[j]:\n                            if j not in friends_to_friend[color]:\n                                if i not in friends_with_no_baloons[color]:\n                                    print(color)\n                                    return \"YES\"\n    print(friends_color_list)\n    for color in friends_color_list:\n        for i in range(len(s)):\n            if color == s[i]:\n                if i in friends_with_no_baloons[color]:\n                    for j in range(len(s)):\n                        if color == s[j]:\n                            if j not in friends_to_friend[color]:\n                                if i not in friends_with_no_baloons[color]:\n                                    is_all_friends_already_have_a_baloon = True\n                                    break\n        if not is_all_friends_already_have_a_baloon:\n            return \"NO\"\n    return \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    s = sorted(s)\n    i = 0\n    count = 0\n    while i < n:\n        if s[i] == s[i + 1]:\n            count += 1\n        if count == k:\n            return 'YES'\n        else:\n            i += 1\n            count = 0\n    return 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = stdin.split()\n    color_dict = {}\n    for color in colors:\n        if color not in color_dict:\n            color_dict[color] = 1\n        else:\n            color_dict[color] += 1\n    if len(color_dict) == 1:\n        return 'NO'\n    while True:\n        color = list(color_dict.keys())[0]\n        if color_dict[color] == 1:\n            return 'NO'\n        else:\n            color_dict[color] -= 1\n            for color2 in color_dict:\n                color_dict[color2] = color_dict[color2] - color_dict[color]\n            if all(color_dict[color] == 0 for color in color_dict):\n                return 'YES'\nsolution('4 2 aaba')\n\n\n'''\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace(' ', '')\n    for i in range(n):\n        if s[i] == s[i+1]:\n            return 'NO'\n    return 'YES'\n\nsolution(input())"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 'YES'\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            if count == 2:\n                res = 'YES'\n            elif count == 3:\n                res = 'NO'\n            count = 0\n    if count == 2:\n        res = 'YES'\n    elif count == 3:\n        res = 'NO'\n    return res\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    baloon_by_friend = {}\n    baloon_by_color = {}\n    for i in range(n):\n        color = s[i]\n        if color in baloon_by_color.keys():\n            baloon_by_color[color].append(i)\n        else:\n            baloon_by_color[color] = [i]\n    all_friends_not_upset = True\n    for i in range(n):\n        if s[i] in baloon_by_friend.keys():\n            if len(baloon_by_friend[s[i]]) < k:\n                all_friends_not_upset = False\n                break\n    if all_friends_not_upset:\n        return 'YES'\n    for i in range(n):\n        if s[i] not in baloon_by_color.keys():\n            continue\n        for color in baloon_by_color[s[i]]:\n            if color in baloon_by_friend.keys():\n                if len(baloon_by_friend[color]) < k:\n                    all_friends_not_upset = False\n                    break\n    if all_friends_not_upset:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    \n    a.sort()\n    mi = a[0]\n    mi_idx = 0\n    for i in range(1, n):\n        if a[i] < a[mi_idx]:\n            mi_idx = i\n    \n    if mi == a[0]:\n        return \"-\"\n    \n    max_v = a[0]\n    max_idx = 0\n    for i in range(1, n):\n        if a[i] > a[max_idx]:\n            max_idx = i\n            max_v = a[i]\n    \n    return str(abs(a[0] - a[mi_idx]) + abs(a[0] - a[max_idx]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    min1 = a[0]\n    min2 = a[1]\n    d = 0\n    for i in range(2, len(a)):\n        if a[i]!= min1 and a[i]!= min2:\n            min1 = a[i]\n            d = i\n            continue\n        if a[i] == min1:\n            if i - d <= d - i:\n                min2 = a[i]\n                d = i\n            else:\n                min2 = min1\n                min1 = a[i]\n                d = i\n    return d"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    m = arr[0]\n    arr.pop(0)\n    min_array = [arr[0]]\n    for i in range(1, n):\n        min_array.append(min(arr[i], min_array[-1]))\n    for i in range(n-1):\n        arr.pop(0)\n        arr.pop(0)\n        arr.pop(0)\n        arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    min_array = [arr[0]]\n    for i in range(1, n):\n        min_array.append(min(arr[i], min_array[-1]))\n    for i in range(n-1):\n        arr.pop(0)\n        arr.pop(0)\n        arr.pop(0)\n        arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0)\n    arr.pop(0"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    data.sort()\n    return str(abs(data[0] - data[1]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    for i in range(n):\n        if i + 1!= len(arr):\n            if arr[i] < arr[i + 1]:\n                break\n    else:\n        return \"0\"\n    for i in range(n):\n        if i + 1!= len(arr):\n            if arr[i] < arr[i + 1]:\n                break\n    return str(abs(arr[i] - arr[i + 1]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dist = float('inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    for i in range(n):\n        if a[i] < min1:\n            min1 = a[i]\n        elif a[i] < min2:\n            min2 = a[i]\n        if a[i] == min1 or a[i] == min2:\n            dist = min(dist, abs(min1 - min2))\n    return str(dist)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = sorted(map(int, stdin.split()))\n\n    return str(abs(arr[0] - arr[1]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = sorted(map(int, stdin.split()))\n    return str(abs(a[0] - a[-1]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return str(0)\n    arr = sorted(arr)\n    i = 1\n    res = 0\n    while i < n:\n        if arr[i]!= arr[i-1]:\n            res = arr[i-1] - arr[i]\n            break\n        i += 1\n    return str(res)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.strip().split(\"\\n\")\n    n = int(arr[0])\n    arr = arr[1].strip().split()\n    arr = list(map(int, arr))\n    arr = sorted(arr)\n    print(arr)\n    print(\"\\n\")\n    return str(arr[1] - arr[0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    n = random.randint(1, t)\n    p = n * w\n    q = n * b\n    print(f'{p}/{q}')"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    w, b, t = stdin.strip().split()\n    w, b, t = int(w), int(b), int(t)\n    w, b, t = int(w), int(b), int(t)\n\n    return \"{}/{}\".format(w * b, w * t)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = list(map(int, stdin.split()))\n    if t <= 0 or w <= 0 or b <= 0:\n        raise ValueError(\"Input must be greater than zero.\")\n    if t > 1e6:\n        raise ValueError(\"Input cannot be greater than 1e6.\")\n    return str(t // w) + \"/\" + str(t // b)"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    if t >= w + b:\n        return f'{1 / (w + b)}/{1 / w}'\n    return f'{1 / (t - w)}/{1 / b}'"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = list(map(int, stdin.split()))\n    for w in range(w, t + 1):\n        if w % b == 0:\n            if w / b == w // b:\n                return str(w // b) + \"/\" + str(w // b)\n            else:\n                return str(w // b) + \"/\" + str(w // b + 1)\n    return \"0/1\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nstdin = \"3 3 1\"\nprint(solution(stdin))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    if t <= 1 or w <= 1 or b <= 1:\n        return 'inf'\n    x = 1\n    while True:\n        x += 1\n        if w*x + b*x == t:\n            break\n        if w*x + b*x > t:\n            return str(int((t - w*x - b*x)/(w*x + b*x)))"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return str(int((1-b)/w)/int(t/(1-b)*w))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    t, w, b = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    p = 1\n    q = 1\n    l = 0\n    while p < t and q < t:\n        l += 1\n        if l % w == 0:\n            p += 1\n        if l % b == 0:\n            q += 1\n    return f\"{p}/{q}\"\n    \ndef"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (int(i) for i in stdin.split())\n    if x > y + z:\n        return \"-\"\n    elif y > x + z:\n        return \"-\"\n    elif x == y == z:\n        return \"0\"\n    elif x > y and z > y:\n        return \"-\"\n    elif x < y and z > y:\n        return \"+\"\n    else:\n        return \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return '0'\n    elif x + y + z > 0:\n        return '+'\n    else:\n        return '-'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split()\n    return '?' if (x == y and y == z) or (x == z and y == z) else '+' if (x > y and x > z) or (x < y and x < z) else '-' if (x < y and x < z) else '0'"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    if a+b>c:\n        return \"-\"\n    if a+c>b:\n        return \"+\"\n    if c+b>a:\n        return \"-\"\n    return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y + z:\n        return \"-\"\n    elif y > x + z:\n        return \"+\"\n    else:\n        return \"0\"\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    in_str = stdin\n    x = in_str.split()[0]\n    y = in_str.split()[1]\n    z = in_str.split()[2]\n    if int(x) + int(y) > int(z):\n        return \"-\"\n    elif int(x) + int(y) < int(z):\n        return \"+\"\n    else:\n        return \"0\""
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y > z:\n        return \"-\"\n    elif x + z > y:\n        return \"+\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (int(n) for n in stdin.split())\n    if x > y + z:\n        return \"-\"\n    if y > x + z:\n        return \"+\"\n    return \"0\""
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y and x > z:\n        return \"+\"\n    elif y > x and y > z:\n        return \"-\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return \"0\"\n    elif x + y + z == x:\n        return \"+\"\n    elif x + y + z == y:\n        return \"-\"\n    else:\n        return \"?\""
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y, op = map(int, stdin.split())\n    cells = [(x, y)]\n    maxid = 0\n    minid = 0\n    for opcode in stdin.split():\n        if opcode == 'R' and (maxid + 1, minid) not in cells:\n            maxid += 1\n            cells.append((maxid, minid))\n        elif opcode == 'L' and (maxid, minid - 1) not in cells:\n            minid -= 1\n            cells.append((maxid, minid))\n        elif opcode == 'U' and (maxid - 1, minid) not in cells:\n            maxid -= 1\n            cells.append((maxid, minid))\n        elif opcode == 'D' and (maxid, minid + 1) not in cells:\n            minid += 1\n            cells.append((maxid, minid))\n    if maxid - minid + 1 == n:\n        return '0'\n    return '1' if maxid - minid + 1 < n else str(maxid - minid + 1)\n\n\nsolution(\"5\")\nsolution(\"4\")\nsolution(\"3\")\n\nsolution(\"2\")\nsolution(\"1\")\n\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"1\")\nsolution(\"2"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return stdin"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x, y = map(int, stdin.strip().split())\n    return str(min(abs(x-0), abs(y-0)) + 1)\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    x, y = int(stdin.split()[1]), int(stdin.split()[2])\n    if n == 1:\n        if sequence[0] == \"U\":\n            return x + 1\n        elif sequence[0] == \"D\":\n            return x - 1\n        elif sequence[0] == \"R\":\n            return y + 1\n        elif sequence[0] == \"L\":\n            return y - 1\n    else:\n        ops = list(sequence[1:])\n        ops = [op for op in ops if op in \"UDLR\"]\n        if len(ops) == 0:\n            return 0\n        if len(ops) == 1:\n            if ops[0] == \"U\":\n                return x + 1\n            elif ops[0] == \"D\":\n                return x - 1\n            elif ops[0] == \"R\":\n                return y + 1\n            else:\n                return y - 1\n        maxID = minID = 0\n        maxIDL = maxLD = 0\n        minIDR = minRD = 0\n        for i in ops:\n            if i == \"U\":\n                if maxID < maxIDL:\n                    maxID = maxIDL\n                maxIDL += 1\n            elif i == \"D\":\n                if maxID > maxLD:\n                    maxLD = maxID\n                maxID -= 1\n            elif i == \"R\":\n                if minIDR > minRD:\n                    minRD = minIDR\n                minIDR += 1\n            elif i == \"L\":\n                if minID < minIDL:\n                    minID = minIDL\n                minIDL -= 1\n        return maxID - minID + 1 if maxID - minID + 1 <= x - y else -1\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    l = stdin.split()\n    n = int(l[0])\n    sequence = l[1]\n    x, y = int(l[2]), int(l[3])\n    count = 0\n    for i in range(n):\n        if sequence[i] == \"U\":\n            x = x - 1\n        elif sequence[i] == \"D\":\n            x = x + 1\n        elif sequence[i] == \"L\":\n            y = y - 1\n        elif sequence[i] == \"R\":\n            y = y + 1\n        if x == -1 or x == 10**9 or y == -1 or y == 10**9 or sequence[i] == \"U\" or sequence[i] == \"D\" or sequence[i] == \"L\" or sequence[i] == \"R\":\n            count = -1\n            break\n    return str(count)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    y = int(stdin.split()[2])\n    x_cords, y_cords = x, y\n    sequence = stdin.split()[3]\n    result = \"\"\n    if n > 1:\n        if sequence == 'R' or sequence == 'RU' or sequence == 'RURU':\n            result = \"R\"\n        elif sequence == 'D' or sequence == 'RD' or sequence == 'RDD':\n            result = \"D\"\n        elif sequence == 'L' or sequence == 'LU' or sequence == 'LULU':\n            result = \"L\"\n        elif sequence == 'U' or sequence == 'UL' or sequence == 'UURU':\n            result = \"U\"\n    if n == 1:\n        if sequence == 'R' or sequence == 'RU' or sequence == 'RURU':\n            result = \"R\"\n        elif sequence == 'D' or sequence == 'RD' or sequence == 'RDD':\n            result = \"D\"\n        elif sequence == 'L' or sequence == 'LU' or sequence == 'LULU':\n            result = \"L\"\n        elif sequence == 'U' or sequence == 'UL' or sequence == 'UURU':\n            result = \"U\"\n    if n == 2:\n        if sequence == 'R' or sequence == 'RU' or sequence == 'RURU':\n            result = \"R\"\n        elif sequence == 'D' or sequence == 'RD' or sequence == 'RDD':\n            result = \"D\"\n        elif sequence == 'L' or sequence == 'LU' or sequence == 'LULU':\n            result = \"L\"\n        elif sequence == 'U' or sequence == 'UL' or sequence == 'UURU':\n            result = \"U\"\n    if result == \"\":\n        if sequence == 'U' or sequence == 'UL' or sequence == 'UURU':\n            result = \"U\"\n        elif sequence == 'D' or sequence == 'RD' or sequence == 'RDD':\n            result = \"D\"\n        elif sequence == 'L' or sequence == 'LU' or sequence == 'LULU':\n            result = \"L\"\n        elif sequence == 'R' or sequence == 'UR' or sequence == 'RURU':\n            result = \"R\"\n\n    if result == \"\":\n        return '-1'\n    else:\n        return result\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    y = 0\n    min_dist = 10**9\n    for i in range(n):\n        char = stdin[i]\n        if char == 'U':\n            x -= 1\n        elif char == 'D':\n            x += 1\n        elif char == 'L':\n            y -= 1\n        elif char == 'R':\n            y += 1\n        dist = abs(x) + abs(y)\n        min_dist = min(dist, min_dist)\n    return str(min_dist) if min_dist!= 10**9 else '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read the input\n    line1 = stdin.splitlines()[0]\n    line2 = stdin.splitlines()[1]\n    x, y = map(int, line2.split())\n    cnt = 0\n    sequence = line1\n    while sequence:\n        op = sequence[0]\n        sequence = sequence[1:]\n        if op == 'R':\n            x += 1\n        elif op == 'L':\n            x -= 1\n        elif op == 'U':\n            y += 1\n        elif op == 'D':\n            y -= 1\n        else:\n            pass\n        cnt += 1\n    if (x, y) == (0, 0):\n        return cnt\n    else:\n        return -1\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    length = 0\n    while length == 0:\n        length = len(stdin)\n        for i in range(len(stdin)):\n            if stdin[i] == 'U':\n                y += 1\n            elif stdin[i] == 'D':\n                y -= 1\n            elif stdin[i] == 'L':\n                x -= 1\n            elif stdin[i] == 'R':\n                x += 1\n        if x == 0 and y == 0:\n            break\n    if x == 0 and y == 0:\n        return '0'\n    else:\n        return str(max(x, y) - min(x, y) + 1)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline().strip())\n  ops = stdin.readline().strip()\n  x, y = map(int, stdin.readline().split())\n  min_id = -1\n  max_id = -1\n  # no operations possible\n  if len(ops) == 0:\n    return str(max_id - min_id + 1)\n  # update indices\n  for i in range(0, n):\n    if ops[i] == 'U':\n      if x > max_id:\n        max_id = max(max_id, x)\n      elif min_id == -1:\n        min_id = x\n    elif ops[i] == 'D':\n      if x < min_id:\n        min_id = min(min_id, x)\n      elif max_id == -1:\n        max_id = x\n    elif ops[i] == 'R':\n      if y > max_id:\n        max_id = max(max_id, y)\n      elif min_id == -1:\n        min_id = y\n    elif ops[i] == 'L':\n      if y < min_id:\n        min_id = min(min_id, y)\n      elif max_id == -1:\n        max_id = y\n  # no changes\n  if min_id == -1:\n    return str(0)\n  # no possible change\n  if max_id == -1:\n    return str(0)\n  return str(max_id - min_id + 1)\n\n\ndef"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n, x = map(int, stdin.split())\n        s = stdin.split()[1]\n        if n == 1:\n            print(-1)\n        else:\n            s = '0'*(n-1) + s\n            # print(s, len(s))\n            if x == 0 and (n-1)//2 == s.count('0'):\n                print(1)\n            elif x == 0 and (n-1)//2 == s.count('1'):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('1'):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('0'):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('0', 1):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('1', 1):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('1', 1):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('1', 1):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('0', 1):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('0', 1):\n                print(1)\n            elif x == 1 and (n-1)//2 == s.count('0', 1):\n                print(1)\n            else:\n                print(-1)\n        # print(s)\n\nsolution(input())"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s = stdin.split()[1]\n    cnt_0 = s.count('0')\n    cnt_1 = s.count('1')\n    if cnt_0 == 0 and cnt_1 == 0:\n        return -1\n    elif x == 0:\n        return cnt_0\n    else:\n        if cnt_1 - cnt_0 == x:\n            return cnt_1\n        else:\n            return -1"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    s = \"0\" + list(stdin)[1]\n    res = 0\n    \n    while x < 0:\n        for i in range(1, len(s)+1):\n            tmp = s[i:]\n            if int(tmp, 2) == x:\n                res += 1\n                s = s[:i-1]\n                break\n        x = x + 1\n    \n    print(res)\n\nsolution(input())"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for _ in range(T):\n        n, x = map(int, stdin.split()[1:3])\n        s = stdin.split()[3]\n        s = ''.join(s)\n        t = ''.join(s)\n        count = 0\n        while True:\n            if s == t:\n                break\n            count += 1\n            if count > x:\n                count = -1\n                break\n            s = list(s)\n            s.pop()\n            s = ''.join(s)\n            t = ''.join(s)\n        print(count)\n    return ''"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    T = int(stdin_lines[0])\n    for i in range(1, T + 1):\n        n, x = map(int, stdin_lines[i * 2].split())\n        s = stdin_lines[i * 2 + 1]\n        cnt = {'0': 0, '1': 0}\n        cnt_sum = 0\n        for s_id, s_val in enumerate(s):\n            if cnt_sum + int(s_val) > x:\n                cnt[s_val] += 1\n                cnt_sum += int(s_val)\n            else:\n                cnt[s_val] += 1\n                cnt_sum += int(s_val)\n                break\n        print('Case #{}: {}'.format(i, cnt['0'] - cnt['1'] if cnt['0'] - cnt['1'] >= 0 else -1))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,x = map(int,stdin.split())\n    s = ''.join(stdin.split('\\n')[1:])\n    res = 0\n    \n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i,n):\n            if s[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 == count_1:\n                res += 1\n                break\n            \n    if res == 0:\n        return -1\n    return res\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = k\n    while n > 10:\n        n //= 10\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if n == 0:\n        return \"0\"\n    i = 0\n    while i <= len(str(n)) and str(n)[i] == \"0\":\n        i += 1\n    i += k\n    while i <= len(str(n)) and str(n)[i]!= \"0\":\n        i += 1\n    return str(n)[:i]\n\nsolution(\"100 9\")\n\nsolution(\"10203049 2\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    if k == 0:\n        return str(0)\n    def f(n, k):\n        res = n\n        while n % 10 == 0:\n            n //= 10\n        for _ in range(k - 1):\n            if n == 0:\n                break\n            res //= 10\n            res *= 10\n        return res\n    return str(f(n, k))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 10 ** k:\n        return \"0\"\n    else:\n        return str(n - (n // 10 ** k) * 10 ** k)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - (n // 10**k) + (n % 10**k))"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    while n % 10**k > 0:\n        n -= 1\n    return str(n)\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while not n % 10 ** k:\n        count += 1\n        n //= 10 ** k\n    return str(n) + (count) * \"0\"\n\nsolution(input())\n\n=======\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n > 9:\n        n = n // 10\n    return f\"{(n-1) % 10}{k}\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n % 10 == 0:\n        n //= 10\n    return str(n) + str(0) * (k - len(str(n)))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.split()\n  n, m, k, x, y = int(lines[0]), int(lines[1]), int(lines[2]), int(lines[3]), int(lines[4])\n  if n == 1:\n    return str(m) +'' + str(k) +'' + str(k)\n  l = []\n  if y == 1:\n    for i in range(n):\n      if i == x - 1:\n        l.append(' ')\n      else:\n        l.append('-')\n  else:\n    for i in range(n):\n      if i == x - 1:\n        l.append('-')\n      else:\n        l.append(' ')\n  for i in range(y - 1):\n    l.append('-')\n  l.append('-')\n  for i in range(y):\n    l.append('-')\n  l.append(' ')\n  for i in range(x - 1):\n    l.append('-')\n  l.append(' ')\n  for i in range(x - 1):\n    l.append('-')\n  l.append(' ')\n  for i in range(x - 1):\n    l.append('-')\n  l.append(' ')\n  return ''.join(l)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    res_max = 0\n    res_min = 0\n    res_quest = 0\n    for i in range(1, n + 1):\n        res_max = max(res_max, max(i, m - i + 1))\n    for i in range(1, n + 1):\n        res_min = max(res_min, max(i, m - i + 1))\n    for i in range(n - k + 1):\n        res_quest = res_quest + res_max - res_min\n    print(res_max, res_min, res_quest)\n    return stdout.strip()"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    first_row = list(range(1, n + 1))\n    second_row = list(range(1, n + 1))\n    third_row = list(range(1, n + 1))\n    fourth_row = list(range(1, n + 1))\n    answer = []\n    for i in range(k):\n        if i % 4 == 0:\n            answer.append(x)\n            third_row = second_row\n            second_row = first_row\n            first_row = list(range(1, n + 1))\n        elif i % 4 == 1:\n            answer.append(y)\n            third_row = second_row\n            second_row = fourth_row\n            fourth_row = list(range(1, n + 1))\n        elif i % 4 == 2:\n            answer.append(x)\n            third_row = fourth_row\n            fourth_row = list(range(1, n + 1))\n            first_row = second_row\n            second_row = third_row\n        else:\n            answer.append(y)\n    answer.append(x)\n    answer.append(y)\n    return str(len(answer)) +'' + str(min(answer)) +'' + str(max(answer)) +'' + str(len(set(answer)))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    answer = 0\n    max_count = 0\n    min_count = n\n    step_x = x - 1\n    step_y = y - 1\n    while True:\n        count_x = 0\n        count_y = 0\n        for i in range(n):\n            for j in range(m):\n                if i == step_x and j == step_y:\n                    continue\n                if i == step_x and j!= step_y:\n                    step_x -= 1\n                elif i!= step_x and j == step_y:\n                    step_y -= 1\n                else:\n                    if i < step_x:\n                        step_x -= 1\n                    else:\n                        step_y -= 1\n                if j < step_y:\n                    count_x += 1\n                else:\n                    count_y += 1\n        if max_count < count_x:\n            max_count = count_x\n        if min_count > count_y:\n            min_count = count_y\n        answer += 1\n        if answer == k:\n            break\n    return str(max_count) + \" \" + str(min_count) + \" \" + str(answer)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity:\n        O(n * m * k)\n    Space complexity:\n        O(n * m)\n    \"\"\"\n    # tuple_ = tuple(map(int, stdin.split()))\n    tuple_ = tuple(map(int, stdin.split()))\n    n, m, k, x, y = tuple_\n\n    if k == 1:\n        return str(n) +'' + str(m) +'' + str(k)\n    elif k > 1:\n        max_ = 0\n        min_ = 1\n        cnt = 0\n\n        while cnt < k:\n            cnt += 1\n            if cnt % (m + 1) == 0:\n                max_ = min(max_, x)\n                min_ = max(min_, x)\n                x = min(x, y)\n                y = min(x + 1, y)\n                cnt = 0\n        return str(max_) +'' + str(min_) +'' + str(cnt)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = list(map(int, stdin.split()))\n    m = (m + 1) // 2\n    if n == 1:\n        return str(k) +'' + str(k) +'' + str(k)\n    elif n == 2:\n        return str(k) +'' + str(k) +'' + str(k) +'' + str(k)\n    else:\n        arr = []\n        for i in range(n):\n            arr.append([])\n            for j in range(m):\n                arr[i].append(i * m + j)\n        arr = np.array(arr)\n        if x <= y:\n            return str(k) +'' + str(k) +'' + str(k)\n        else:\n            return str(k) +'' + str(k) +'' + str(k) +'' + str(k) +'' + str(k)\n    return''\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{max(int(stdin.split()[0]), int(stdin.split()[1])):02} {min(int(stdin.split()[0]), int(stdin.split()[1])):02} {int(stdin.split()[2]):010b}\""
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m, k, x, y = map(int, stdin[0].split())\n    print(n, m, k, x, y)\n    if x == y:\n        print(\"x==y\")\n        return str(n * m - k) + \" \" + str(k) + \" \" + str(n * m)\n    if n == 1:\n        print(\"n==1\")\n        return str(n * m - k) + \" \" + str(k) + \" \" + str(n * m)\n    if k <= n * m:\n        if k % (n * m) == 0:\n            print(\"k==n*m\")\n            return str(n * m) + \" \" + str(m) + \" \" + str(k)\n        elif k % (n * m) == 1:\n            print(\"k==n*m-1\")\n            return str(n * m - 1) + \" \" + str(m) + \" \" + str(k)\n        else:\n            print(\"k>n*m\")\n            return str(k % (n * m)) + \" \" + str(k % (n * m)) + \" \" + str(k % (n * m))\n    else:\n        return str(n * m - k) + \" \" + str(k) + \" \" + str(n * m)\n\nprint(solution(\"1 3 8 1 1\\n\"))\nprint(solution(\"4 2 9 4 2\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(solution(\"5 5 25 4 3\\n\"))\nprint(solution(\"12 5 26 4 3\\n\"))\nprint(solution(\"1 3 5 4 5\\n\"))\nprint(solution(\"1 4 8 4 5\\n\"))\nprint(solution(\"100 100 1000000000000000000 100 100\\n\"))\nprint(s"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    x += 1\n    y += 1\n    first = n * m\n    second = n * (m + 1) // 2\n    third = n * (m + 2) // 2\n    if x == 1:\n        return str(first) +'' + str(second) +'' + str(third)\n    elif y == 1:\n        return str(first) +'' + str(second) +'' + str(third)\n    else:\n        return str(first) +'' + str(second) +'' + str(third)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k = int(stdin[2])\n    x = int(stdin[3])\n    y = int(stdin[4])\n    \n    count = 0\n    count_m = 0\n    count_x = 0\n    count_y = 0\n    count_x_y = 0\n    \n    max_x = 0\n    max_y = 0\n    min_x = 0\n    min_y = 0\n    \n    for i in range(n):\n        if x == i:\n            count_x += 1\n            count_x_y += 1\n            count_x = 0\n        else:\n            count_x = 1\n        if y == i:\n            count_y += 1\n            count_x_y += 1\n            count_y = 0\n        else:\n            count_y = 1\n        \n        if i == n - 1:\n            count_x_y = 1\n            count_y = 0\n            count_x = 0\n            \n        \n        if count_m < m and count_x_y < k:\n            max_x = i\n            max_y = m - count_m - 1\n            min_x = x\n            min_y = y\n        else:\n            max_x = max_y = min_x = min_y = 0\n            \n        count = max(count, count_x_y)\n        \n        count_m = count_x_y\n        \n        count_x_y = 0\n        \n    print(max_x)\n    print(max_y)\n    print(min_x)\n    print(min_y)\n    return str(max_x) + \" \" + str(max_y) + \" \" + str(min_x) + \" \" + str(min_y) + \" \" + str(count)\n\nsolution(stdin)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = {''.join(stdin.split('\\n')[0])}\n    b = {''.join(stdin.split('\\n')[0])}\n    while n > 0:\n        d = {}\n        for c in b:\n            d[c] = sum(1 for i in range(len(c)) if c[i]!= c[i+1])\n        b = {c for c in d if d[c] == max(d.values())}\n        n -= 1\n    return sorted(b)[0]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ribbons = list(stdin)\n    while n > 0:\n        ribbon_k = ribbons[0]\n        for i in range(1, len(ribbons)):\n            if ribbon_k.count(ribbon_k[i]) == len(ribbon_k):\n                ribbons[0] = ribbon_k\n                break\n        for i in range(len(ribbon_k) - 1):\n            ribbon_s = ribbon_k[:i] + ribbon_k[i + 1:]\n            if ribbon_s.count(ribbon_s[i]) == len(ribbon_s):\n                ribbon_k = ribbon_s\n                break\n        for i in range(len(ribbon_k) - 1):\n            ribbon_a = ribbon_k[:i] + ribbon_k[i + 1:]\n            if ribbon_a.count(ribbon_a[i]) == len(ribbon_a):\n                ribbon_k = ribbon_a\n                break\n        n -= 1\n    if len(ribbon_k) == len(ribbons[0]):\n        return \"Draw\"\n    return \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kuro = stdin.split()[0]\n    shiro = stdin.split()[1]\n    katie = stdin.split()[2]\n    return 'Draw' if check(kuro,shiro,katie,n) else 'Kuro' if check(katie,shiro,kuro,n) else 'Shiro'\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kuro = list(stdin)[0]\n    shiro = list(stdin)[1]\n    katie = list(stdin)[2]\n    for i in range(1, n + 1):\n        kuro = list(map(str, kuro))\n        shiro = list(map(str, shiro))\n        katie = list(map(str, katie))\n        kuro, shiro, katie = list(map(lambda x: x + kuro[0], kuro)), list(map(lambda x: x + shiro[0], shiro)), list(map(lambda x: x + katie[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)):\n            return 'Shiro'\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], katie)):\n            return 'Katie'\n        kuro, shiro, katie = list(map(lambda x: x[0], kuro)), list(map(lambda x: x[0], shiro)), list(map(lambda x: x[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)) and ''.join(map(lambda x: x[0], kuro))!= ''.join(map(lambda x: x[0], katie)):\n            return 'Katie'\n        kuro, shiro, katie = list(map(lambda x: x[0], kuro)), list(map(lambda x: x[0], shiro)), list(map(lambda x: x[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)) and ''.join(map(lambda x: x[0], kuro))!= ''.join(map(lambda x: x[0], katie)):\n            return 'Kuro'\n        kuro, shiro, katie = list(map(lambda x: x[0], kuro)), list(map(lambda x: x[0], shiro)), list(map(lambda x: x[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)) and ''.join(map(lambda x: x[0], kuro))!= ''.join(map(lambda x: x[0], katie)):\n            return 'Shiro'\n        kuro, shiro, katie = list(map(lambda x: x[0], kuro)), list(map(lambda x: x[0], shiro)), list(map(lambda x: x[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)) and ''.join(map(lambda x: x[0], kuro))!= ''.join(map(lambda x: x[0], katie)):\n            return 'Kuro'\n        kuro, shiro, katie = list(map(lambda x: x[0], kuro)), list(map(lambda x: x[0], shiro)), list(map(lambda x: x[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)) and ''.join(map(lambda x: x[0], kuro))!= ''.join(map(lambda x: x[0], katie)):\n            return 'Shiro'\n        kuro, shiro, katie = list(map(lambda x: x[0], kuro)), list(map(lambda x: x[0], shiro)), list(map(lambda x: x[0], katie))\n        if ''.join(map(lambda x: x[0], kuro)) == ''.join(map(lambda x: x[0], shiro)) and ''.join(map(lambda x: x[0], kuro))!= ''.join(map(lambda x: x[0], katie)):\n            return 'Kuro'\n    return 'Draw'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split('\\n')\n    print(stdin)\n    if len(stdin) == 3:\n        shiro, katie, kuro = stdin\n        shiro = shiro.split()\n        katie = katie.split()\n        kuro = kuro.split()\n        max_beauty = 0\n        if len(shiro) == len(katie) == len(kuro):\n            for i in range(len(shiro)):\n                shiro_ribbon = list(shiro[i])\n                katie_ribbon = list(katie[i])\n                kuro_ribbon = list(kuro[i])\n                shiro_ribbon[shiro_ribbon.index(shiro[i])] = kuro_ribbon[kuro_ribbon.index(kuro[i])]\n                katie_ribbon[katie_ribbon.index(katie[i])] = shiro_ribbon[shiro_ribbon.index(shiro[i])]\n                shiro_ribbon = \"\".join(shiro_ribbon)\n                katie_ribbon = \"\".join(katie_ribbon)\n                if int(shiro_ribbon) > max_beauty:\n                    max_beauty = int(shiro_ribbon)\n                if int(katie_ribbon) > max_beauty:\n                    max_beauty = int(katie_ribbon)\n            if max_beauty == 0:\n                return \"Draw\"\n            else:\n                return \"Shiro\" if max_beauty > int(katie_ribbon) else \"Katie\"\n        else:\n            return \"Draw\"\n\n    elif len(stdin) == 2:\n        shiro, katie = stdin\n        shiro = shiro.split()\n        katie = katie.split()\n        shiro = \"\".join(shiro)\n        katie = \"\".join(katie)\n        max_beauty = 0\n        for i in range(len(shiro)):\n            if int(shiro[i]) > max_beauty:\n                max_beauty = int(shiro[i])\n        for i in range(len(katie)):\n            if int(katie[i]) > max_beauty:\n                max_beauty = int(katie[i])\n        if max_beauty == 0:\n            return \"Draw\"\n        else:\n            return \"Shiro\" if max_beauty > int(katie) else \"Katie\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    data = data[1:]\n    if len(data) == 0:\n        return 'Draw'\n    t = []\n    for i in range(len(data)):\n        t.append(data[i])\n    k = []\n    s = []\n    for i in range(len(t)):\n        k.append(t[i][0])\n        s.append(t[i][1])\n    d = {}\n    for i in range(len(k)):\n        if k[i] not in d:\n            d[k[i]] = s[i]\n        else:\n            if s[i] > d[k[i]]:\n                d[k[i]] = s[i]\n    keys = list(d.keys())\n    keys.sort()\n    ans = []\n    for i in range(len(keys)):\n        ans.append(d[keys[i]])\n    return 'Kuro' if len(ans) == 1 else 'Shiro' if len(ans) == 2 else 'Katie'\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... treasurehunt\n   ... threefriends\n   ... hiCodeforces\n   ... ''')\n    'Shiro'\n    >>> solution('''\n   ... 7\n   ... treasurehunt\n   ... threefriends\n   ... hiCodeforces\n   ... ''')\n    'Katie'\n    >>> solution('''\n   ... 15\n   ... treasurehunt\n   ... threefriends\n   ... hiCodeforces\n   ... ''')\n    'Kuro'\n    \"\"\"\n    colors = set()\n    for _ in range(int(stdin)):\n        ribbon = input()\n        for c in ribbon:\n            if c not in colors:\n                colors.add(c)\n            else:\n                colors.remove(c)\n        if len(colors) > 1:\n            return \"Draw\"\n    return \"Kuro\" if len(colors) == 1 else \"Shiro\" if \"Shiro\" in colors else \"Katie\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    turns = int(stdin)\n    ribbons = stdin.split()\n    all_colors = set()\n    for ribbon in ribbons:\n        all_colors |= set(ribbon)\n    max_beauty = -1\n    winner = ''\n    for i in range(turns):\n        current_ribbon = ''\n        ribbon_beauty = 0\n        for color in all_colors:\n            if len(current_ribbon) < len(ribbon_beauty):\n                current_ribbon = color\n                ribbon_beauty = len(current_ribbon)\n            elif ribbon_beauty < len(color):\n                current_ribbon = current_ribbon + color\n                ribbon_beauty = len(current_ribbon)\n        if ribbon_beauty > max_beauty:\n            max_beauty = ribbon_beauty\n            winner = current_ribbon\n        all_colors.remove(current_ribbon)\n    return winner\n\nprint(solution(input()))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        for i in range(len(stdin)-1):\n            stdin[i+1] = stdin[i].replace(stdin[i], chr(ord(stdin[i])+1))\n        stdin = stdin[:-1]\n    if stdin.count(stdin[0]) > 1:\n        return 'Draw'\n    return 'Kuro' if stdin.count(stdin[0]) == 1 else 'Shiro' if stdin.count(stdin[0]) == 2 else 'Katie'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    count, v_0, v_1, a, l = map(int, stdin.split())\n    days = 1\n    readevery = v_1\n    last_day = v_0\n    while True:\n        if readevery < l:\n            readevery += a\n            days += 1\n            continue\n        last_day += (v_0 + last_day) // 2\n        if last_day >= l:\n            return days\n        readevery = last_day\n        days += 1"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    v_2 = 0\n    v_3 = 0\n    v_4 = 0\n    days = 0\n    while True:\n        v_3 = v_2\n        v_4 = v_3 + a\n        v_2 = v_1\n        v_1 = v_2 + c\n        if v_1 >= v_4:\n            days += 1\n            break\n    return days\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5 10 5 4\n   ... ''')\n    '1'\n    >>> solution('''12 4 12 4 1\n   ... ''')\n    '3'\n    >>> solution('''15 1 100 0 0\n   ... ''')\n    '15'\n    \"\"\"\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    ans = 0\n    while c > 0:\n        c -= 1\n        if c == 0:\n            break\n        ans += (v_1 - v_0) // (l - v_0 + 1)\n        v_0 += a\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = 0\n    while (c - v_0) / (v_1 - v_0) > a:\n        c = c + (v_0 + a)\n        days += 1\n    return str(days + v_1)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = (int(i) for i in stdin.split())\n    return days_to_finish_book(c, v_0, v_1, a, l)\n\n\ndef"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = int(v_0 / a) + 1\n    if v_1 > days * c:\n        return str(int(days * c))\n    return str(days)"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    return str(int(1 + (v_0 - 1) / (a * (v_1 - v_0)) + (l / (v_1 - v_0)) * (v_0 - 1)))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    return str(l // (v_1 - v_0) + v_0 // (v_1 - v_0) + 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = v_1 - v_0\n    rereading = l - v_0\n    while rereading < 0:\n        rereading += days\n    return str(days + rereading)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    lst = []\n    for i in range(1, 3):\n        count = 0\n        for j in range(i, 3):\n            sum = num - j\n            if is_prime(sum):\n                count += 1\n        if count == 1:\n            lst.append(j)\n    return str(lst)\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    odd = int(stdin)\n    if not is_prime(odd):\n        print(\"0\")\n        exit(0)\n    odd = bin(odd)[2:]\n    odd = odd.replace(\"0\", \"\")\n    primes = [2, 3]\n    primes.extend(find_primes(len(odd)))\n    for prime in primes:\n        if prime*3 > odd:\n            break\n        if prime*3 == odd:\n            break\n        else:\n            odd = odd.replace(str(prime), \"\")\n            primes.append(prime)\n            primes.append(prime*2)\n    if len(odd) == 1:\n        print(len(primes))\n        for prime in primes:\n            print(prime, end=\" \")\n    else:\n        print(\"0\")\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    primes = set()\n    n = int(stdin)\n    for i in range(3, 10):\n        if n % i == 0:\n            primes.add(i)\n            n = n // i\n\n    if n!= 1:\n        primes.add(n)\n    return str(len(primes)) + '\\n' +''.join(map(str, sorted(primes)))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = get_primes_up_to(n)\n    sums = []\n\n    def is_prime(x):\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def find_possible_sum(x):\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                if is_prime(i):\n                    sums.append(i)\n                if is_prime(x // i):\n                    sums.append(i)\n\n    for i in range(1, 3):\n        find_possible_sum(primes[i])\n\n    return len(sums)\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    primes = [False, False, False]\n    number = int(stdin)\n    i = 3\n    while primes[0] == False:\n        if number % i == 0:\n            for j in range(1, i):\n                if i % j == 0:\n                    primes[1] = False\n            primes[0] = True\n        else:\n            i += 2\n    i = 3\n    while primes[1] == False:\n        if number % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    primes[2] = False\n            primes[1] = True\n        else:\n            i += 2\n    i = 3\n    while primes[2] == False:\n        if number % i == 0:\n            for j in range(3, i):\n                if i % j == 0:\n                    primes[3] = False\n            primes[2] = True\n        else:\n            i += 2\n    return str(len(primes)) + \"\\n\" + \"\\n\".join(str(i) for i in primes)"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nfrom typing import List\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prime = []\n\n    for i in range(3, n, 2):\n        flag = True\n        for j in prime:\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            prime.append(i)\n\n    count = 1\n    ans = []\n    for i in prime:\n        ans.append(str(i))\n        if count == 3:\n            break\n        count += 1\n    return str(len(ans)) + '\\n' + '\\n'.join(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = prime_sieve(n//3)\n    prime_sums = sum(primes)\n    prime_count = len(primes)\n    if prime_count == 3:\n        return f\"{prime_count} {prime_sums}\"\n    else:\n        return f\"{prime_count} {prime_sums} {prime_sums - n}\""
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = [False, False, False]\n    c = 0\n    for i in range(3, n+1, 2):\n        if not primes[0] and is_prime(i):\n            c += 1\n            primes[0] = True\n            continue\n        if not primes[1] and is_prime(i):\n            c += 1\n            primes[1] = True\n            continue\n        if not primes[2] and is_prime(i):\n            c += 1\n            primes[2] = True\n    return str(c) + '\\n' +''.join(map(str, primes))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nSolution Pythonic\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    rows = [stdin.strip().split() for _ in range(n)]\n\n    for row in rows:\n        if any(row[i] == \".\" for i in range(m)):\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(stdin.strip())\n    return \"NO\" if not all(\n        all(i in (\".\", \"*\") for i in j) or\n        all(i in (\".\", \"*\") for i in j)\n        for j in zip(*grid)\n    ) else \"YES\" if any(\n        any(\n            not (\n                i in (\".\", \"*\")\n                for i in j)\n            for j in zip(*grid)\n        )\n    ) else \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.strip()\n\n    def dfs(x, y, n, m):\n        if x < 0 or y < 0 or x >= n or y >= m or field[x][y] == '*':\n            return False\n        if field[x][y] == '.':\n            field[x][y] = '*'\n            return True\n        return dfs(x, y + 1, n, m) or dfs(x + 1, y, n, m)\n\n    dfs(0, 0, n, m)\n    for i in range(n):\n        if '.' in field[i]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    # input\n    field = []\n    for i in range(n):\n        field.append(stdin.split())\n\n    row = set()\n    col = set()\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                row.add(i)\n                col.add(j)\n    # print(row,col)\n\n    # check for diag left\n    for i in range(n):\n        for j in range(m - 1):\n            if field[i][j] == \"*\" and field[i][j + 1] == \"*\":\n                return \"NO\"\n\n    # check for diag right\n    for i in range(n):\n        for j in range(m - 1, m):\n            if field[i][j] == \"*\" and field[i][j - 1] == \"*\":\n                return \"NO\"\n\n    # check for up\n    for i in range(m):\n        for j in range(n - 1):\n            if field[j][i] == \"*\" and field[j + 1][i] == \"*\":\n                return \"NO\"\n\n    # check for down\n    for i in range(m):\n        for j in range(n - 1, n):\n            if field[j][i] == \"*\" and field[j - 1][i] == \"*\":\n                return \"NO\"\n\n    return \"YES\"\n\n\nsolution(input())\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = 0, 0\n    while x < n and y < m:\n        if stdin[y] == \".\":\n            x += 1\n        elif stdin[y] == \"*\":\n            y += 1\n    if x == n and y == m:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(input())\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 4\n   ....*..\n   ....*..\n   ... *..*\n   ... \n   ... \n   ... 5 5\n   ... *..\n   .....*\n   ... *.*\n   .....*\n   .....*\n   ... ''')\n    'YES'\n    \"\"\"\n    (n, m) = list(map(int, stdin.split()))\n    matrix = []\n    for row in stdin.splitlines():\n        matrix.append(list(row))\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                continue\n            elif matrix[i][j] == '.':\n                break\n            else:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"NO\"\n\n    (x, y) = (i, j)\n    direcs = {\n        'N': (x, y + 1),\n        'E': (x + 1, y),\n        'S': (x, y - 1),\n        'W': (x - 1, y)\n    }\n    for (d, c) in direcs.items():\n        if c[0] < 0 or c[0] > n or c[1] < 0 or c[1] > m:\n            continue\n        if matrix[c[0]][c[1]] == '*':\n            continue\n        if matrix[c[0]][c[1]] == '.':\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split()\n    n = int(rows[0])\n    m = int(rows[1])\n    field = stdin.split(\"\\n\")[1:]\n    y, x = 0, 0\n    while y < len(field):\n        if field[y][x] == \"*\":\n            x += 1\n            if x >= m:\n                x = 0\n                y += 1\n        else:\n            x += 1\n            if x >= m:\n                x = 0\n                y += 1\n    if x == 0 and y == 0:\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.split())\n    \n    ans = \"YES\"\n    x = y = -1\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                if x == -1:\n                    x = i\n                if y == -1:\n                    y = j\n    if x!= -1 and y!= -1:\n        ans = \"YES\"\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"*\":\n                    grid[i][j] = \".\"\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read in the input\n    width, height = stdin\n    \n    # get a 2D array\n    array = stdin.split('\\n')\n    array = [[x for x in row] for row in array]\n\n    # check if the first cell is empty\n    if array[0][0] == '.':\n        # if it is empty, then return YES\n        return 'YES'\n    else:\n        # if it is not empty, then return NO\n        return 'NO'"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    field = stdin.split(\"\\n\")\n    field = list(map(list, field))\n    row_zero = True\n    col_zero = True\n    for i in range(n):\n        if field[i][0] == \"*\":\n            row_zero = False\n        if field[0][i] == \"*\":\n            col_zero = False\n    if row_zero:\n        return \"NO\"\n    if col_zero:\n        return \"NO\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                for k in range(n):\n                    if field[k][j] == \"*\":\n                        return \"NO\"\n                for k in range(m):\n                    if field[i][k] == \"*\":\n                        return \"NO\"\n    if row_zero:\n        return \"YES\" + str(1) + \" \" + str(0)\n    if col_zero:\n        return \"YES\" + str(0) + \" \" + str(1)\n    return \"YES\" + str(1) + \" \" + str(1)\n    return \"NO\"\n\nstdin = \"\"\"\n3 4\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n\n    def is_divisible(x):\n        return x % m == 0\n\n    if n % m == 0:\n        return str(0)\n\n    # n - number of boxes\n    # m - number of delegations\n    # a - building fee per box\n    # b - demolishing fee per box\n\n    # computing number of boxes needed to be built\n    n_needed = n // m\n\n    # computing number of boxes needed to be demolished\n    n_demolished = n - n_needed * m\n\n    # computing how much is needed to build\n    burles_needed = n_needed * a\n\n    # computing how much is needed to demolish\n    burles_needed += n_demolished * b\n\n    # computing number of boxes needed to be built\n    burles_needed = burles_needed // m\n\n    burles_needed += n_demolished * (burles_needed // m)\n\n    return str(burles_needed)"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m!= 0:\n        return 0\n    return (a * n) + (b * (n // m))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n    if n % m == 0:\n        return str(n * a + m * b)\n    return str(n - (n % m) + min(n % m, (n - n % m) * a + min(m, n - n % m) * b))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    while n % m!= 0:\n        n += 1\n    return str(n - a) + \" \" + str(b)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return str(0)\n    else:\n        return str(a * (n - m + 1) + b * m)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return str(int((n / m) * (a + b)))\n    else:\n        return '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_num_delegations(n: int, m: int) -> int:\n        return (n // m) * m\n\n    def get_number_of_boxes(n: int, m: int) -> int:\n        return n % m\n\n    def get_b_and_a_by_delegations(b: int, a: int, m: int) -> int:\n        return (b + a) * m\n\n    n, m, a, b = map(int, stdin.split())\n    boxes_on_the_floor = get_number_of_boxes(n, m)\n    number_of_delegations = get_num_delegations(n, m)\n    b_and_a = get_b_and_a_by_delegations(b, a, m)\n\n    if boxes_on_the_floor % number_of_delegations!= 0:\n        return '0'\n\n    return str(b_and_a // number_of_delegations)\n\n\nprint(solution(input()))\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if a >= b:\n        return \"0\"\n    if n % m == 0:\n        return str(a * (n / m) + b * (n / m))\n    else:\n        return str(a * (n / m) + b * ((n / m) + 1))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, a, b] = list(map(int, stdin.split()))\n    if n % m == 0:\n        return str(a * (n // m) + b * (n // m))\n    else:\n        return '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, m = map(int, stdin.split())\n    if n % m == 0:\n        return str(a * n // m)\n    return str(2 * a * n // (n + m) + b * n // (n + m))\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\n\nimport math\ndef"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_seq = int(stdin)\n    sequence = stdin.split()\n    sum_seq = []\n    for i in range(1, num_of_seq):\n        sum_seq.append(sum(sequence[0:i]))\n    # for sum_seq in range(1,num_of_seq):\n    #     sum_seq = sum(sequence[0:sum_seq])\n    max_sum = max(sum_seq)\n    return max_sum\n    \n    \n    \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2 == 1:\n        return max(a)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    sum = 0\n    res = None\n    for i in range(len(a)):\n        sum = sum + a[i]\n        if sum % 2 == 0:\n            if res is None:\n                res = sum\n            elif res < sum:\n                res = sum\n    return str(res)\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nYour program should print a single integer \u2014 the sum of the subsequence with odd sum.\n\nIf no subsequence with odd sum exists, then return -1.\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    seq = list(map(int, line[1:]))\n    odd = float('-inf')\n    best_sum = float('-inf')\n    for i in range(len(seq)):\n        seq_sum = 0\n        for j in range(i, len(seq)):\n            seq_sum += seq[j]\n            if seq_sum > best_sum:\n                odd = seq_sum\n                best_sum = seq_sum\n    if odd > 0:\n        return str(odd)\n    else:\n        return str(0)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    max_sum = -10 ** 5\n    sequence.sort()\n    for i in range(n - 1):\n        j = i + 1\n        while j < n:\n            if int(sequence[i]) + int(sequence[j]) % 2!= 0:\n                sum_of_subseq = int(sequence[i]) + int(sequence[j])\n                if sum_of_subseq > max_sum:\n                    max_sum = sum_of_subseq\n                j += 1\n            else:\n                break\n    return str(max_sum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    sequence = [sequence[0]] + sequence[1:]\n    stack = []\n    max_sum = 0\n    max_index = -1\n    for i in range(n):\n        while stack and stack[-1] < sequence[i]:\n            stack.pop()\n        stack.append(sequence[i])\n        if sum(stack) % 2!= 0:\n            if max_sum < sum(stack):\n                max_sum = sum(stack)\n                max_index = i\n    print(max_index)\n    return max_sum\n\n\nsolution(\"5\\n-2 -3 1\")\n\nsolution(\"3\\n2 -5 -3\")\n\n\n\n'''"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    odd_sums = {1}\n    max_sum = 1\n    for i in range(1, n):\n        odd_sums.add(sum(odd_sums) + a[i])\n        max_sum = max(max_sum, sum(odd_sums))\n\n    return str(max_sum)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    if len(a) < 3:\n        return str(0)\n    else:\n        dp = [a[i] for i in range(len(a))]\n        for i in range(len(dp)):\n            for j in range(i):\n                if dp[i] + dp[j] < dp[i]:\n                    dp[i] = dp[i] + dp[j]\n        return str(dp[-1])\n\nsolution()"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # (2, 1) - (1, 1) + (1, 2) = 3\n    # (2, 1) - (1, 3) + (1, 2) = -1\n    # (2, 1) - (2, 3) + (1, 2) = 1\n    '''\n    n = len(stdin.split())\n    res = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(1, n - 1):\n        res = max(res, max(a[i], -a[i]) + min(a[i - 1], a[i + 1]), max(a[i - 2] + a[i], a[i - 1] + a[i + 1]))\n    return res\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, t = int(lines[0]), int(lines[1])\n    songs = {}\n    for i in range(1, n + 1):\n        s = lines[i].split()\n        if s[1] in songs:\n            if songs[s[1]]:\n                songs[s[1]] = False\n        else:\n            songs[s[1]] = True\n    ans = 0\n    for j in range(1, n + 1):\n        if songs[str(j)]:\n            ans += j\n            for i in range(j, n + 1):\n                if songs[str(i)]:\n                    ans += i - j\n        else:\n            for i in range(j, n + 1):\n                if songs[str(i)]:\n                    ans += i - j\n    return str(ans)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, T = list(map(int, stdin.split()))\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, stdin.split())))\n    songs.sort(key=lambda x: (x[0], x[1]))\n    ans = 0\n    d = {(1, 1)}\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            if songs[i][0] == songs[j][0] and songs[i][1]!= songs[j][1]:\n                # can't go in the same genre\n                d = set()\n                break\n            if songs[i][0]!= songs[j][0]:\n                # can go in the same genre\n                t, g = songs[i][0], songs[i][1]\n                while j < n and songs[j][0] == t and songs[j][1] == g:\n                    j += 1\n                d = d.union({(t + x, g) for x in range(1, j - i)})\n            j += 1\n        if not d:\n            break\n        ans += len(d)\n        i = j\n    return str(ans)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return len(set(map(tuple, permutations(stdin.split('\\n'), 2)))) % (10**9 + 7)\n    return len(set(map(tuple, permutations(map(int, stdin.split('\\n')), 2))))"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *songs = list(map(int, stdin.split()))\n    return str(len({tuple(s) for s in zip(*songs)}))\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    # numbers = list(range(n))\n    songs = []\n    for i in range(n):\n        t, g = map(int, stdin.split())\n        songs.append([t, g])\n\n    songs.sort()\n    d = {}\n    for song in songs:\n        if d.get(song[1], None):\n            d[song[1]].append(song[0])\n        else:\n            d[song[1]] = [song[0]]\n    dp = {}\n    for key in d:\n        if d[key] == 1:\n            dp[key] = t\n        else:\n            dp[key] = max([sum([x for x in d[key] if x <= t]) + sum([x for x in d[key] if x > t]) + t, d[key][0] + t])\n    res = 0\n    for key in dp:\n        res = max(res, dp[key] - t)\n    return str(res)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, T = list(map(int, stdin.strip().split()))\n    plays = [tuple(map(int, stdin.strip().split())) for _ in range(n)]\n    from collections import defaultdict\n    d = defaultdict(list)\n    for k in range(n):\n        d[plays[k][1]].append(k+1)\n\n    res = 0\n    if T == 1:\n        res = len(d)\n        for k, v in d.items():\n            if len(v) == n:\n                res += 1\n    else:\n        for k, v in d.items():\n            if len(v) == n:\n                res += 1\n        for k, v in d.items():\n            if len(v) == n:\n                for x in v:\n                    if x + 1 in v:\n                        res += 1\n    return str(res % 10000009)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    playlist = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    songs = []\n    for i in range(n):\n        songs.append(playlist[i][1])\n\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = sum([playlist[i][0], playlist[j][0]]) - playlist[i][1] - playlist[j][1]\n            if diff < 0:\n                break\n            if diff > max_len:\n                max_len = diff\n\n    if max_len == 0:\n        return 0\n    return max_len\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = [[int(i) for i in input().split()] for _ in range(n)]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if songs[i][0] == songs[j][0]:\n                songs[i][0] += songs[j][1]\n                songs[j][0] = songs[i][0]\n                res += 1\n    print(res)\n    return str(res)"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input `stdin` which is the result of concatenating the inputs of the problem.\n    Converts the input into a list of tuples, each of which represents a song.\n    The input is split at the point of the first space character.\n    The length of each tuple is 2.\n    The first value of each tuple is a string representing the song's length.\n    The second value of each tuple is a string representing the song's genre.\n    \"\"\"\n    input_ = stdin.split(\" \")\n    song_list = []\n    for input_song in input_:\n        song_list.append(tuple(map(int, input_song.split(\" \"))))\n    return str(count_playlists(song_list))\n\n\ndef"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, T = list(map(int, stdin.split()))\n    songs = []\n    for _ in range(n):\n        g, t = list(map(int, stdin.split()))\n        songs.append((t, g))\n    return str(len(find_all_sequences(songs, T)))\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        vivek = [1]\n        for i in range(n-1):\n            vivek.append(random.randint(1,n))\n        p, q = 1, 1\n        for i in range(len(vivek)):\n            if vivek[i]!= 1:\n                p *= vivek[i]\n                q *= vivek[i]\n        if p == 1 or q == 1:\n            break\n    return str(p*q**(-1))\n\n\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = randrange(1, n)\n    a = []\n    while len(a) <= n:\n        a.append(m)\n        m = 1 if m == 0 else randrange(1, m)\n    return str(a[0] * (1 / m) ** -1) +'' + str(n * m)\n\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    m = int(stdin)\n    while len(a) < m:\n        x = randint(1, m)\n        a.append(x)\n    gcd = gcd_2(a)\n    if gcd == 1:\n        return \"1\"\n    else:\n        return str(len(a) * (1 / gcd))\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    >>> solution(1)\n    1\n    >>> solution(2)\n    2\n    >>> solution(4)\n    333333338\n    \"\"\"\n    a = []\n    m = int(stdin)\n    while len(a) < m:\n        x = random.randint(1, m)\n        a.append(x)\n    gcd = 1\n    while gcd!= 0:\n        gcd = gcd_algorithm(a)\n    return gcd_algorithm(a)\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    a = [1]\n    while len(a) < m:\n        x = randint(1,m)\n        a.append(x)\n    # print(a)\n    x = gcd(a)\n    # print(x)\n    if x == 1:\n        return str(1)\n    return str(len(a) * x ** -1)\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a) <= m:\n        rand_number = randint(1, m)\n        a.append(rand_number)\n    gcd = 1\n    for i in range(len(a)):\n        if a[i] == 1:\n            break\n        else:\n            gcd = gcd * a[i]\n    return str(len(a) * gcd ** (-1))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    while len(a)!= n:\n        x = random.randint(1, n)\n        a.append(x)\n    print(gcd(a))\n    print(a)\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    result = 1\n    if m == 1:\n        return str(1)\n    while True:\n        num = random.randint(1, m)\n        result = result * num % (10 ** 9 + 7)\n        if result == 1:\n            break\n    return str(result)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    answer = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if a <= b:\n                if gcd(a, b) == 1:\n                    answer += 1\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(a, r + 1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    ans = 0\n    for a in range(l, r+1):\n        for b in range(a, r+1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                ans += 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if a <= b <= r:\n                if a!= b:\n                    if gcd(a, b) == 1 and lcm(a, b) == x:\n                        count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(countGoodPairs(stdin.strip()))\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = list(map(int, stdin.split()))\n    ans = 0\n    for a in range(l, r + 1):\n        for b in range(a, r + 1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    return str(int(x > y or y > l or x > r))\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(stdin))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return (int(stdin.split()[2]) * int(stdin.split()[3])\n  if int(stdin.split()[1]) <= int(stdin.split()[2]) <= int(stdin.split()[3])\n  else 0)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    if l >= r:\n        return 0\n    x = x % (l + 1)\n    y = y % (r + 1)\n    count = 0\n    for a in range(l, r + 1):\n        if x % a == 0 and y % a == 0:\n            count += 1\n    return count"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(map(int, stdin.split()))\n    a, b = stdin_list[0], stdin_list[1]\n    min_a = 1\n    min_b = 1\n    if a > b:\n        min_a, min_b = min_b, min_a\n    for i in range(1, min(a, b) + 1):\n        if (a + i) % min_a == 0 and (b + i) % min_b == 0:\n            return str(i)\n    return '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lcm = a * b\n    d = 2\n    while d <= lcm:\n        if a * d <= b * d and b * d <= a * d:\n            lcm = a * d\n        d += 1\n    return str(lcm)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lcm = 0\n    for i in range(1, a+b+1):\n        if (a*i + b*i) % (a+b) == 0:\n            lcm = i\n            break\n    return str(lcm)"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = 0\n    while (a * k) + b!= 0:\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    gcd = lambda x, y: gcd(y, x % y) if x!= 0 else y\n    k = 0\n    for i in range(1, 100000000):\n        if a * i + b * i == a * b:\n            k = i\n            break\n    return str(k)\n\nstdin = \"6 10\"\nprint(solution(stdin))\nstdin = \"21 31\"\nprint(solution(stdin))\nstdin = \"5 10\"\nprint(solution(stdin))\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, b+1):\n        if a*i % b*i == 0:\n            res = max(res, i)\n    return str(res) if res!= 0 else \"0\""
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for k in range(1, a + b + 1):\n        if a * (k) + b * (k - 1) == a * b:\n            return str(k)\n        elif a * (k) + b * (k - 1) > a * b:\n            return str(a * k + b * (k - 1) - a * b)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    gcd = 1\n    for i in range(1, a+b):\n        if (a*i+b*i) % (a+b) == 0:\n            gcd = max(gcd, i)\n    if gcd == 1:\n        print(0)\n    else:\n        print(gcd)\nsolution(input())\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = 1\n    while True:\n        if (a * k + b * k) % (a + b) == 0:\n            break\n        k += 1\n    return str(k)\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for k in range(1, 1000):\n        a_b = a + k\n        b_k = b + k\n        if (a_b * k + b_k) % min(a_b, b_k) == 0:\n            return str(k)\n    return str(0)\n\n----\n\nThe final solution is a bit tricky because it's possible that two numbers are the same. So we need to pick one among them and then we can use the \"find the least common multiple\" formula to solve the problem.\n\n1. Find the gcd of $a$ and $b$\n2. Divide the gcd by the smaller one\n3. Multiply the two numbers together\n\nIf we pick the gcd of $a$ and $b$ and divide it by the smaller one, then we get $gcd(a,b) = gcd(a,b)/min(a,b)$. We then multiply the two numbers together to get $gcd(a,b) = gcd(a,b)*(a+b)$.\n\nNow, we can use this formula to solve the problem.\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    a = stdin.split()\n    b = []\n    c = []\n    d = []\n    for i in range(n):\n        b.append(int(a[i]))\n    b.sort()\n    for i in range(n):\n        if b[i] < k:\n            d.append(b[i])\n        elif b[i] == k:\n            b[i] = 0\n            d.append(b[i])\n        else:\n            d.append(b[i])\n    c = sum(d)\n    c = c/n\n    a.remove(str(c))\n    for i in a:\n        c = int(i)\n        c = c + c\n        if c <= k:\n            c = c\n    return str(c)\n\n\nstdin = \"\"\"2 10\n8 9\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    print(int(sum(s) / len(s)))\n    return int(sum(s) / len(s))"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a_n = list(map(int, stdin.split()))\n\n    c = 0\n    while True:\n        m = sum(a_n) / n\n        c += 1\n        if m == k:\n            break\n    return c"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    from bisect import bisect_left\n    a_sorted = sorted(a)\n    average = sum(a_sorted) / n\n    count = 0\n    for i in range(1, n + 1):\n        b = bisect_left(a_sorted, average + i / 2)\n        if b == 0:\n            count += i - 1\n            average -= a_sorted[0]\n        elif b == n:\n            count += i\n            average -= a_sorted[-1]\n    return int(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        if len(a) == 0:\n            a.append(marks[i])\n        else:\n            a.append(a[-1] + marks[i])\n    return len(a)\nsolution(\"3 5\")\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    min_mark = k\n    for i in range(len(marks)):\n        if marks[i] < min_mark:\n            min_mark = marks[i]\n\n    if min_mark > k:\n        return str(len(marks) - 1)\n\n    max_mark = 0\n    for i in range(len(marks)):\n        if max_mark < marks[i]:\n            max_mark = marks[i]\n\n    return str(int((max_mark + min_mark) / 2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()))\n    final_mark = k\n    for mark in marks:\n        if final_mark < mark:\n            final_mark = mark\n    if final_mark == k:\n        return \"impossible\"\n    else:\n        avg = final_mark // (n + 1)\n        min_marks_to_add = avg * n\n        if min_marks_to_add == final_mark:\n            return \"impossible\"\n        return str(min_marks_to_add)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    marks = [int(x) for x in stdin.split()]\n    grades = sorted(marks)\n    avg = sum(grades) // n\n    return str(len(grades) - grades.index(avg))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_m = max(a)\n    a.sort()\n    a.reverse()\n    b = 0\n    while k > max_m:\n        for i in range(len(a)):\n            if a[i] > k:\n                b += k // a[i]\n                k = k % a[i]\n                break\n    return str(b)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = sorted([int(i) for i in stdin.split()])\n    print(n)\n    print(a)\n    print(k)\n    return\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    m = len(arr)\n    count = 0\n    for i in range(m):\n        x = int(arr[i])\n        if x > 0:\n            count += 1\n    if count >= m // 2:\n        return \"0\"\n    else:\n        for i in range(1, n + 1):\n            if i % 2!= 0:\n                d = i\n                break\n        for i in range(1, n + 1):\n            if i % 2!= 0:\n                a = int(arr[i - 1])\n                b = int(arr[i])\n                c = int(arr[i + 1])\n                if a % d == 0 and b % d == 0 and c % d == 0:\n                    return str(d)\n        return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a_plus_one = [x / 2 for x in a]\n    if sum(1 for x in a if x > 0) >= n / 2:\n        return 0\n    for i, x in enumerate(a):\n        if a_plus_one[i] - x > 0:\n            return str(int(a_plus_one[i]))\n    return '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    half = (n // 2) + 1\n    count = 0\n    for d in range(1, 10):\n        count += len([x for x in a if x % d > 0]) // 2 >= half\n    return '0' if count == 0 else str(count)"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n\n    def even_number_of_positives(n):\n        number_of_positives = 0\n        for number in numbers:\n            if number > 0:\n                number_of_positives += 1\n\n        if number_of_positives <= n // 2:\n            return 0\n\n        return number_of_positives\n\n    def solution_or_zero(n):\n        if even_number_of_positives(n) <= 0:\n            return 0\n        elif even_number_of_positives(n) == 1:\n            return numbers[-1] // 2\n\n        d = 1\n        while even_number_of_positives(n - d) <= 0:\n            if even_number_of_positives(n - d) == 1:\n                return numbers[-1] // 2\n            d += 1\n\n        return 0\n\n    return str(solution_or_zero(n))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    d = 0\n    while n > len(a):\n        if len(set(a)) == len(a):\n            d += 1\n        a = list(map(lambda x: x/d, a))\n    print(0 if d == 0 else d)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    if len(a) < 3:\n        return 0\n    ans = 0\n    for i in range(len(a)):\n        a[i] /= 2\n        if a.count(0) >= len(a)//2:\n            ans = i\n            break\n    return str(ans) if ans >= 0 else str(0)"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    for d in range(n//2, 0, -1):\n        count = 0\n        for i in range(n):\n            if arr[i] % d == 0:\n                count += 1\n        if count >= n // 2:\n            return str(d)\n    return '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    l = len(arr)\n    for d in range(1, l + 1):\n        count = 0\n        for a in arr:\n            if a % d == 0:\n                count += 1\n        if count > l//2:\n            return str(d)\n    return '0'"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    integers = [int(i) for i in stdin[1]]\n    num_pos = 0\n    for num in integers:\n        if num > 0:\n            num_pos += 1\n    if num_pos < (n // 2):\n        return 0\n    else:\n        for d in range(1, n // 2 + 1):\n            num_neg = 0\n            for num in integers:\n                if num / d < 0:\n                    num_neg += 1\n            if (n // 2) * 2 < num_pos + num_neg:\n                return d\n    return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n\n    if n == 1:\n        return 1\n\n    max_sum_digits = 0\n\n    for i in range(1, n + 1):\n        sum_of_digits = 0\n        for j in range(1, i + 1):\n            sum_of_digits += j\n        if sum_of_digits % 10 == 0:\n            max_sum_digits = max(max_sum_digits, i)\n\n    return str(max_sum_digits)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return n // 10\n    elif n == 1:\n        return 1\n    else:\n        ans = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                ans = max(ans, find_ans(i, j))\n        return ans\n\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    n = int(input_[0])\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0445 9 \u0441 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0432\u0441\u0435\u0445 \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n    # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u044b \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0438 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0438\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432. \u041f\u043e\u0441\u043b\u0435 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0449\u0438\u0445 \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0438\u0445 \u0441 \u0434\u0432\u0443\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438.\n    nines = []\n    for i in range(10 ** n):\n        nines.append(sum(i for i in range(1, i) if i % 10 == 9))\n    nines.sort()\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0449\u0438\u0445 \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0449\u0438\u0445 \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 nines.\n    nines_len = len(nines)\n    max_nines = nines[-1]\n    nines.sort()\n    nines_len_without_max = nines_len - max_nines\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0449\u0438\u0445 \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0449\u0438\u0445 \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 nines.\n    result = 0\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0435\u0440\u0435\u0437 \u043c\u0430\u0441\u0441\u0438\u0432 nines \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043b\u0435\u043d\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0431\u0445\u043e\u0434\u0430.\n    for i in range(nines_len):\n        for j in range(nines_len_without_max):\n            if nines[i] + nines[j] == max_nines:\n                result += 1\n    print(result)\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in stdin.split():\n        total += int(i)\n    n = int(stdin)\n    pairs = 0\n    res = 0\n    l = 0\n    r = n\n    while l <= r:\n        if total % 9 == 0:\n            return str(pairs)\n        m = (l + r) // 2\n        if total > m * (m + 1):\n            l = m + 1\n        else:\n            r = m - 1\n        pairs += 1\n    return str(pairs)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # if n < 2 then we have no pairs\n    if n == 2:\n        return 0\n    # if n == 1: return 1\n    \n    # calculate the sum of the n-1th integers\n    # i.e. 12345 - 34 = 55, then add 9\n    \n    # memoization\n    memo = dict()\n    \n    def helper(n):\n        if n == 0:\n            return 0\n        # if n <= 2: return 1\n        if n in memo:\n            return memo[n]\n        \n        # if n <= 3: return 2\n        \n        # if n <= 4: return 3\n        \n        # if n <= 5: return 4\n        \n        # if n <= 6: return 5\n        \n        # if n <= 7: return 6\n        \n        # if n <= 8: return 7\n        \n        # if n <= 9: return 8\n        \n        # if n <= 10: return 9\n        \n        # if n <= 11: return 10\n        \n        # if n <= 12: return 11\n        \n        # if n <= 13: return 12\n        \n        # if n <= 14: return 13\n        \n        # if n <= 15: return 14\n        \n        # if n <= 16: return 15\n        \n        # if n <= 17: return 16\n        \n        # if n <= 18: return 17\n        \n        # if n <= 19: return 18\n        \n        # if n <= 20: return 19\n        \n        # if n <= 21: return 20\n        \n        # if n <= 22: return 21\n        \n        # if n <= 23: return 22\n        \n        # if n <= 24: return 23\n        \n        # if n <= 25: return 24\n        \n        # if n <= 26: return 25\n        \n        # if n <= 27: return 26\n        \n        # if n <= 28: return 27\n        \n        # if n <= 29: return 28\n        \n        # if n <= 30: return 29\n        \n        # if n <= 31: return 30\n        \n        # if n <= 32: return 31\n        \n        # if n <= 33: return 32\n        \n        # if n <= 34: return 33\n        \n        # if n <= 35: return 34\n        \n        # if n <= 36: return 35\n        \n        # if n <= 37: return 36\n        \n        # if n <= 38: return 37\n        \n        # if n <= 39: return 38\n        \n        # if n <= 40: return 39\n        \n        # if n <= 41: return 40\n        \n        # if n <= 42: return 41\n        \n        # if n <= 43: return 42\n        \n        # if n <= 44: return 43\n        \n        # if n <= 45: return 44\n        \n        # if n <= 46: return 45\n        \n        # if n <= 47: return 46\n        \n        # if n <= 48: return 47\n        \n        # if n <= 49: return 48\n        \n        # if n <= 50: return 49\n        \n        # if n <= 51: return 50\n        \n        # if n <= 52: return 51\n        \n        # if n <= 53: return 52\n        \n        # if n <= 54: return 53\n        \n        # if n <= 55: return 54\n        \n        # if n <= 56: return 55\n        \n        # if n <= 57: return 56\n        \n        # if n <= 58: return 57\n        \n        # if n <= 59: return 58\n        \n        # if n <= 60: return 59\n        \n        # if n <= 61: return 60\n        \n        # if n <= 62: return 61\n        \n        # if n <= 63: return 62\n        \n        # if n <= 64: return 63\n        \n        # if n <= 65: return 64\n        \n        # if n <= 66: return 65\n        \n        # if n <= 67: return 66\n        \n        # if n <= 68: return 67\n        \n        # if n <= 69: return 68\n        \n        # if n <= 70: return 69\n        \n        # if n <= 71: return 70\n        \n        # if n <= 72: return 71\n        \n        # if n <= 73: return 72\n        \n        # if n <= 74: return 73\n        \n        # if n <= 75: return 74\n        \n        # if n <= 76: return 75\n        \n        # if n <= 77: return 76\n        \n        # if n <= 78: return 77\n        \n        # if n <= 79: return 78\n        \n        # if n <= 80: return 79\n        \n        # if n <= 81: return 80\n        \n        # if n <= 82: return 81\n        \n        # if n <= 83: return 82\n        \n        # if n <= 84: return 83\n        \n        # if n <= 85: return 84\n        \n        # if n <= 86: return 85\n        \n        # if n <= 87: return 86\n        \n        # if n <= 88: return 87\n        \n        # if n <= 89: return 88\n        \n        # if n <= 90: return 89\n        \n        # if n <= 91: return 90\n        \n        # if n <= 92: return 91\n        \n        # if n <= 93: return 92\n        \n        # if n <= 94: return 93\n        \n        # if n <= 95: return 94\n        \n        # if n <= 96: return 95\n        \n        # if n <= 97: return 96\n        \n        # if n <= 98: return 97\n        \n        # if n <= 99: return 98\n        \n        # if n <= 100: return 99\n        \n        # if n <= 101: return 100\n        \n        # if n <= 102: return 101\n        \n        # if n <= 103: return 102\n        \n        # if n <= 104: return 103\n        \n        # if n <= 105: return 104\n        \n        # if n <= 106: return 105\n        \n        # if n <= 107: return 106\n        \n        # if n <= 108: return 107\n        \n        # if n <= 109: return 108\n        \n        # if n <= 110: return 109\n        \n        # if n <= 111: return 110\n        \n        # if n <= 112: return 111\n        \n        # if n <= 113: return 112\n        \n        # if n <= 114: return 113\n        \n        # if n <= 115: return 114\n        \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    shovels = map(int, stdin.split())\n    shovels = list(shovels)\n\n    # find number of pairs\n    shovels.sort()\n    pairs = 0\n    for i in range(len(shovels)):\n        for j in range(i + 1, len(shovels)):\n            if shovels[i] + shovels[j] == 100 and shovels[i]!= shovels[j]:\n                pairs += 1\n\n    return str(pairs)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(n):\n        s += i\n        if s % 10 == 9:\n            print(i, s // 10)\n    return str(s)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  return str(bin(n + max(1, n - sum(int(i) for i in stdin) + 1) - sum(int(i) for i in stdin))[2:].count(\"1\") + 1)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_nines = 0\n    for k in range(1, N+1):\n        for i in range(1, N+1):\n            for j in range(1, N+1):\n                if k + i + j == N:\n                    num_nines = i + j - k\n                    if num_nines > max_nines:\n                        max_nines = num_nines\n    return str(max_nines)\n\n\nprint(solution(input()))"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    \n    ans = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if i + j <= n:\n                ans = max(ans, int(str(i) + str(j) + str(i + j)) % 100)\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    if (a1 == a2 or b1 == b2) and (a1 + b1 == a2 + b2):\n        return str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2)\n    if a1 == a2 or b1 == b2:\n        if a1 >= a2:\n            a2, b2 = b1, a2\n        if (a1 + b1) % (a2 + b2) == 0:\n            return str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2)\n        elif (a1 + b1) % (a2 + b2) == 1:\n            return str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2) + \" \" + str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2)\n    else:\n        if (a1 + b1) % (a2 + b2) == 0:\n            return str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2) + \" \" + str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2)\n        elif (a1 + b1) % (a2 + b2) == 1:\n            return str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2) + \" \" + str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2) + \" \" + str(min(a1, b1) // 2) + \" \" + str(min(a2, b2) // 2)\n    return '-1'"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    if a1 == a2:\n        return -1\n    m = min(a1, a2)\n    a1, a2 = a1 - m, a2 - m\n    b1, b2 = b1 - m, b2 - m\n    if a1 <= b1 <= a2:\n        return str(m) + \" \" + str(a1) + \" \" + str(b1)\n    if a2 <= b1 <= a1:\n        return str(m) + \" \" + str(a2) + \" \" + str(b1)\n    if b2 <= a1 <= a2:\n        return str(m) + \" \" + str(a2) + \" \" + str(b2)\n    if b1 <= a2 <= b2:\n        return str(m) + \" \" + str(a1) + \" \" + str(b2)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a1, b1], [a2, b2] = stdin.split()\n    minutes = 0\n    a1, a2 = int(a1), int(a2)\n    b1, b2 = int(b1), int(b2)\n    while b1!= b2:\n        b1 = a1\n        b2 = a2\n        if b1 % 2 == 0 and b2 % 2 == 0:\n            if b1!= b2:\n                if b1 / b2 == b2 / b1:\n                    a1 = a1 - b1\n                    a2 = a2 - b2\n                else:\n                    a1 = a1 - b1 - b2\n                    a2 = a2 - b2\n            else:\n                a1 = a1 - b1\n                a2 = a2 - b2 - b1\n        elif b1 % 2 == 1 and b2 % 2 == 1:\n            if b1!= b2:\n                if b1 / b2 == b2 / b1:\n                    a1 = a1 - b1\n                    a2 = a2 - b2\n                else:\n                    a1 = a1 - b1 - b2\n                    a2 = a2 - b2\n            else:\n                a1 = a1 - b1\n                a2 = a2 - b2 - b1\n        elif b1 % 2 == 0 and b2 % 2 == 1:\n            if b1!= b2:\n                if b1 / b2 == b2 / b1:\n                    a1 = a1 - b1\n                    a2 = a2 - b2\n                else:\n                    a1 = a1 - b1 - b2\n                    a2 = a2 - b2\n            else:\n                a1 = a1 - b1\n                a2 = a2 - b2 - b1\n        elif b1 % 2 == 1 and b2 % 2 == 0:\n            if b1!= b2:\n                if b1 / b2 == b2 / b1:\n                    a1 = a1 - b1\n                    a2 = a2 - b2\n                else:\n                    a1 = a1 - b1 - b2\n                    a2 = a2 - b2\n            else:\n                a1 = a1 - b1\n                a2 = a2 - b2 - b1\n        minutes += 1\n    if a1!= a2:\n        if a1 < a2:\n            a1, a2 = a2, a1\n        while a1!= a2:\n            a1 = a1 - a2\n            minutes += 1\n    if minutes % 2 == 1:\n        return '-1'\n    return str(minutes // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2 = stdin.split()\n    a_1, b_1, a_2, b_2 = int(a_1), int(b_1), int(a_2), int(b_2)\n\n    n_1 = (a_1 + 1) // 2\n    n_2 = (a_2 + 1) // 2\n\n    if n_1 == n_2:\n        return str(n_1) +'' + str(n_2)\n\n    n_1 = (b_1 + 1) // 2\n    n_2 = (b_2 + 1) // 2\n\n    if n_1 == n_2:\n        return str(n_1) +'' + str(n_2)\n\n    return '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = list(map(int, stdin.split()))\n    a_2, b_2 = list(map(int, stdin.split()))\n    m = a_1 + a_2\n\n    if m <= b_1 + b_2:\n        return '1'\n    if m <= b_1 / 2 + b_2 / 2:\n        return '2'\n    if m <= b_1 / 3 + b_2 / 3:\n        return '3'\n    return '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n1, m1 = stdin.split()\n    n1, m1 = int(n1), int(m1)\n    if n1 <= 2:\n        return -1\n\n    if m1 <= 2:\n        return (n1-1)*(m1-1)\n    else:\n        n2, m2 = stdin.split()\n        n2, m2 = int(n2), int(m2)\n        if m2 <= 2:\n            return (n2-1)*(m2-1)\n        else:\n            return -1\nstdin = '1 6'\nprint(solution(stdin))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a_1, b_1 = int(stdin[0]), int(stdin[1])\n    a_2, b_2 = int(stdin[2]), int(stdin[3])\n    minutes = 0\n    while (a_1 >= a_2 and b_1 >= b_2):\n        if (a_1 == a_2) or (b_1 == b_2):\n            print(minutes, a_1, b_1, a_2, b_2)\n            return\n        a_1 = a_1 + (a_1 + b_1) // 2\n        b_1 = b_1 + (a_1 + b_1) // 2\n        minutes += 1\n    if (a_1 == a_2) or (b_1 == b_2):\n        print(minutes, a_1, b_1, a_2, b_2)\n        return\n    print(-1)\n\n\nsolution(input())\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    res = -1\n    if a_1 == a_2 and b_1 == b_2:\n        return '1' +'' + str(a_1) +'' + str(b_1)\n    if a_1 == a_2:\n        res = 2 * (a_1 * b_1 - b_2) + (a_1 * b_2 - a_2)\n        return '2' +'' + str(res // 2) +'' + str(res % 2)\n    if a_2 == a_1:\n        res = 2 * (a_2 * b_2 - b_1) + (a_2 * b_1 - a_1)\n        return '2' +'' + str(res // 2) +'' + str(res % 2)\n    if a_1 > a_2 and b_1 > b_2:\n        res = (a_1 - a_2) * (b_1 - b_2) + (a_2 * b_1 - a_1 * b_2)\n        return '3' +'' + str(res // 2) +'' + str(res % 2)\n    if a_1 > a_2 and b_1 < b_2:\n        res = (a_2 - a_1) * (b_1 - b_2) + (a_1 * b_2 - a_2 * b_1)\n        return '3' +'' + str(res // 2) +'' + str(res % 2)\n    if a_1 < a_2 and b_1 > b_2:\n        res = (a_1 - a_2) * (b_1 - b_2) + (a_2 * b_1 - a_1 * b_2)\n        return '3' +'' + str(res // 2) +'' + str(res % 2)\n    if a_1 < a_2 and b_1 < b_2:\n        res = (a_2 - a_1) * (b_1 - b_2) + (a_1 * b_2 - a_2 * b_1)\n        return '3' +'' + str(res // 2) +'' + str(res % 2)\n    if a_1 < a_2 and b_1 == b_2:\n        return '3' +'' + str(a_1) +'' + str(a_2)\n    if a_1 == a_2 and b_1 < b_2:\n        return '3' +'' + str(b_1) +'' + str(b_2)\n    if a_1 == a_2 and b_1 == b_2:\n        return '1' +'' + str(a_1) +'' + str(b_1)\n    if a_1 > a_2 and b_1 == b_2:\n        return '1' +'' + str(a_2) +'' + str(a_1)\n    if a_1 > a_2 and b_1 == b_2:\n        return '1' +'' + str(a_2) +'' + str(b_1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n\n    square_a1 = a1 * b1\n    square_a2 = a2 * b2\n\n    if square_a1 == square_a2:\n        return str(0)\n\n    if square_a1!= square_a2:\n        return str(square_a1 - square_a2)\n\n    if square_a1 == a2 * b2:\n        return str(square_a1 - square_a2 + 1)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    # type of a1 is the same as b2\n    if a1!= a2 or b1!= b2:\n        if a1 > a2 and b1 > b2:\n            return f\"{b1 - b2} {a1 - a2}\"\n        elif a1 > a2 and b1 < b2:\n            return f\"{b2 - b1} {a1 - a2}\"\n        elif a2 > a1 and b2 < b1:\n            return f\"{b1 - b2} {a2 - a1}\"\n        elif a2 > a1 and b2 > b1:\n            return f\"{b1 - b2} {a2 - a1}\"\n    else:\n        return f\"{a1} {a2}\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if x_v == x_p and y_v == y_p:\n        return 'Vasiliy'\n    elif x_p == x_v and y_p == y_v:\n        return 'Polycarp'\n    if x_p == x_v + 1 and y_p == y_v + 1:\n        return 'Vasiliy'\n    if x_p == x_v + 1 and y_p == y_v - 1:\n        return 'Polycarp'\n    if x_p == x_v - 1 and y_p == y_v - 1:\n        return 'Vasiliy'\n    if x_p == x_v - 1 and y_p == y_v + 1:\n        return 'Polycarp'\n    return 'Unknown'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = list(map(int, stdin.split()))\n    return \"Polycarp\" if x_p < x_v else \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = stdin.split()\n    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n    if (x1 < 0 or x1 > 10**5) or (x2 < 0 or x2 > 10**5) or (y1 < 0 or y1 > 10**5) or (y2 < 0 or y2 > 10**5):\n        return(\"Invalid coordinates\")\n    if x1 == x2 or y1 == y2:\n        return(\"Invalid coordinates\")\n    if (x1, y1) == (x2, y2):\n        return(\"Draw\")\n    x = x2-x1\n    y = y2-y1\n    if x > 0 and y > 0:\n        return(\"Polycarp\")\n    elif x < 0 and y > 0:\n        return(\"Vasiliy\")\n    elif x < 0 and y < 0:\n        return(\"Polycarp\")\n    else:\n        return(\"Vasiliy\")\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p1, p2 = stdin.split()\n    x1, y1, x2, y2 = map(int, p1.split())\n    x3, y3, x4, y4 = map(int, p2.split())\n    if ((x1 - x2) > 0 and (y1 - y2) > 0) or ((x1 - x2) < 0 and (y1 - y2) < 0):\n        if ((x3 - x4) > 0 and (y3 - y4) > 0) or ((x3 - x4) < 0 and (y3 - y4) < 0):\n            return 'Polycarp'\n        else:\n            return 'Vasiliy'\n    elif ((x1 - x2) < 0 and (y1 - y2) < 0) or ((x1 - x2) > 0 and (y1 - y2) > 0):\n        if ((x3 - x4) > 0 and (y3 - y4) < 0) or ((x3 - x4) < 0 and (y3 - y4) > 0):\n            return 'Polycarp'\n        else:\n            return 'Vasiliy'\n    else:\n        if x1 == 0:\n            return 'Polycarp'\n        elif x1 == 1 and y1 == 0:\n            return 'Vasiliy'\n        else:\n            return 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x_p1, y_p1 = x1, y1\n    x_p2, y_p2 = x2, y2\n    x_v1, y_v1 = x2, y2\n    x_v2, y_v2 = x1, y1\n    while True:\n        if x_p1 == x_p2 and y_p1 == y_p2:\n            break\n        if (x_p1, y_p1) in [(x_p1 - 1, y_p1), (x_p1, y_p1 - 1)]:\n            x_p1 = x_p1 - 1\n            y_p1 = y_p1\n        elif (x_p1, y_p1) in [(x_p1 + 1, y_p1), (x_p1, y_p1 + 1)]:\n            x_p1 = x_p1 + 1\n            y_p1 = y_p1\n        else:\n            break\n        if (x_v1, y_v1) in [(x_v1 - 1, y_v1), (x_v1, y_v1 - 1)]:\n            x_v1 = x_v1 - 1\n            y_v1 = y_v1\n        elif (x_v1, y_v1) in [(x_v1 + 1, y_v1), (x_v1, y_v1 + 1)]:\n            x_v1 = x_v1 + 1\n            y_v1 = y_v1\n        else:\n            break\n    if x_p1 == x_p2 and y_p1 == y_p2:\n        return 'Polycarp'\n    if x_v1 == x_v2 and y_v1 == y_v2:\n        return 'Vasiliy'\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = list(map(int, stdin.strip().split()))\n    if x_p == x_v and y_p == y_v:\n        return 'Polycarp'\n    elif x_p == x_v + 1 and y_p == y_v:\n        return 'Polycarp'\n    elif x_p == x_v - 1 and y_p == y_v:\n        return 'Polycarp'\n    elif x_p == x_v and y_p == y_v + 1:\n        return 'Polycarp'\n    elif x_p == x_v - 1 and y_p == y_v + 1:\n        return 'Polycarp'\n    elif x_p == x_v and y_p == y_v - 1:\n        return 'Polycarp'\n    else:\n        return 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    moves = [(-2, -1), (2, -1), (-1, -2), (1, -2), (-2, 1), (2, 1), (-1, 2), (1, 2)]\n    visited = set([(x_p, y_p), (x_v, y_v)])\n    for _ in range(2):\n        x_p_tmp, y_p_tmp = x_p, y_p\n        x_v_tmp, y_v_tmp = x_v, y_v\n        for m_x, m_y in moves:\n            x_p, y_p = x_p_tmp + m_x, y_p_tmp + m_y\n            x_v, y_v = x_v_tmp + m_x, y_v_tmp + m_y\n            if (x_p, y_p) == (x_v, y_v):\n                return \"Polycarp\" if (x_p, y_p) in visited else \"Vasiliy\"\n            visited.add((x_p, y_p))\n            visited.add((x_v, y_v))\n            x_p, y_p = x_p_tmp, y_p_tmp\n            x_v, y_v = x_v_tmp, y_v_tmp\n    return \"Draw\""
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    if x1 == x2 and y1 == y2:\n        return 'Polycarp'\n    elif x1 == x2 and y1 - 1 == y2:\n        return 'Polycarp'\n    elif x1 - 1 == x2 and y1 == y2:\n        return 'Polycarp'\n    elif x1 - 1 == x2 and y1 - 1 == y2:\n        return 'Polycarp'\n    elif x1 == x2 and y1 - 1 == y2 - 1:\n        return 'Polycarp'\n    elif x1 - 1 == x2 and y1 - 1 == y2 - 1:\n        return 'Polycarp'\n    else:\n        return 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x, y = int(x), int(y)\n    pawn = [[0, 0], [x, y]]\n    while True:\n        if pawn[0][0] == 0 and pawn[0][1] == 0:\n            break\n        elif pawn[0][0] < 0 or pawn[0][1] < 0:\n            return \"Vasiliy\"\n        elif pawn[0][0] == 0 and pawn[0][1] == 0:\n            return \"Polycarp\"\n        elif pawn[0][0] == 1 and pawn[0][1] == 0:\n            pawn[0] = [pawn[0][0] - 1, pawn[0][1]]\n        elif pawn[0][0] == 1 and pawn[0][1] == 1:\n            pawn[0] = [pawn[0][0] - 1, pawn[0][1] - 1]\n        elif pawn[0][0] == 1 and pawn[0][1] == 0:\n            pawn[0] = [pawn[0][0] - 1, pawn[0][1]]\n        else:\n            pawn[0] = [pawn[0][0], pawn[0][1] - 1]\n    return \"Vasiliy\" if pawn[0][0] == 0 else \"Polycarp\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(len(range(1, int(stdin.split()[0]) + 1)) / int(stdin.split()[1]))]))\n\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    day_of_month = (d + (m - 1) % 7) % 7 + 1\n    return str(day_of_month)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    x = m % 12\n    y = (m + 9) % 12\n    z = (m + 16) % 12\n    a = (m + 23) % 12\n    b = (m + 30) % 12\n    c = (m + 3) % 12\n    d = (m + 9) % 12\n    e = (m + 17) % 12\n    f = (m + 24) % 12\n    g = (m + 31) % 12\n    return str(max(x, y, z, a, b, c, d, e, f, g))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return str(7 - min(m, d) + 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    for i in range(1, m + 1):\n        if i == 1:\n            if 1 <= d <= 7:\n                return str(i)\n        elif i == 2:\n            if 1 <= d <= 7:\n                return str(i)\n        elif i == 3:\n            if 1 <= d <= 7:\n                return str(i)\n        elif i == 4:\n            if 1 <= d <= 7:\n                return str(i)\n        elif i == 5:\n            if 1 <= d <= 7:\n                return str(i)\n        elif i == 6:\n            if 1 <= d <= 7:\n                return str(i)\n        elif i == 7:\n            if 1 <= d <= 7:\n                return str(i)\n        else:\n            return str(0)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return f\"{7 - (2 - d) % 7}\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    month, weekday = list(map(int, stdin.split()))\n    days_in_month = 0\n    if month == 2:\n        days_in_month = 28\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        days_in_month = 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        days_in_month = 30\n    else:\n        return 'Invalid month!'\n    return str(days_in_month // 7)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 7\n   ... ''')\n    '6'\n    >>> solution('''1 1\n   ... ''')\n    '5'\n    >>> solution('''11 6\n   ... ''')\n    '5'\n    >>> solution('''1 2\n   ... ''')\n    '3'\n    \"\"\"\n    m, d = (int(x) for x in stdin.split())\n    n = 1\n    while m!= 1:\n        n += 2\n        m = (m + 1) % 7\n    n = 7 - d + n % 7\n    return str(n)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    c = 0\n    if m == 1:\n        if d == 1:\n            return '1'\n        elif d == 7:\n            return '6'\n        else:\n            return str(d)\n    elif m == 2:\n        if d == 1:\n            return '5'\n        elif d == 7:\n            return '4'\n        else:\n            return str(d)\n    elif m == 3:\n        if d == 1:\n            return '4'\n        elif d == 7:\n            return '5'\n        else:\n            return str(d)\n    elif m == 4:\n        if d == 1:\n            return '3'\n        elif d == 7:\n            return '2'\n        else:\n            return str(d)\n    elif m == 5:\n        if d == 1:\n            return '2'\n        elif d == 7:\n            return '3'\n        else:\n            return str(d)\n    elif m == 6:\n        if d == 1:\n            return '2'\n        elif d == 7:\n            return '3'\n        else:\n            return str(d)\n    elif m == 7:\n        if d == 1:\n            return '3'\n        elif d == 7:\n            return '2'\n        else:\n            return str(d)\n    else:\n        return str(0)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    x = y = n = 0\n    while num >= 2 ** (y - x):\n        num -= 2 ** (y - x)\n        n += 1\n        y += 1\n    return n\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return print(len(range(int(a), int(b) + 1)) - 2)\n\nsolution(input())\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    while a <= b:\n        ans += 1\n        a *= 2\n    return str(ans)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - b)\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nA little polar bear has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system\u00a0\u2014 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.\n\nLimak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?\n\nAssume that all positive integers are always written without leading zeros.\n\nIn the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.\n\nInput\n5 10\n\nOutput\n2\n\nInput\n2015 2015\n\nOutput\n1\n\nInput\n100 105\n\nOutput\n0\n\nInput\n72057594000000000 72057595000000000\n\nOutput\n26\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    start = a\n    end = b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = []\n    start, end = map(int, stdin.split())\n    for i in range(start, end + 1):\n        s = str(i)\n        zeros = s.count('0')\n        nums.append(zeros)\n    return str(len([i for i in nums if i == 1]))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        return 0\n    def factorial(n):\n        return factorial(n-1)*n if n > 1 else 1\n    s = 0\n    for i in range(a, b+1):\n        s += factorial(i) // factorial(i-1)\n    return str(s)\nprint(solution(input()))"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\nfor i in range(1, int(stdin.split()[1])+1):\n    if bin(i).count('1') == 1:\n        print(i, end=\" \")\n'''\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b = int(stdin[0]), int(stdin[1])\n    res = 0\n    while a < b:\n        if a % 2 == 0:\n            res += 1\n        a += 1\n    return str(res)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialise the number of layers to be 0\n    # as we start drawing segments\n    # from a layer\n    layers = 0\n\n    # Iterate through each number in the range\n    for num in range(1, int(stdin) + 1):\n\n        # If num is even, add 2 to the layers\n        # as we add a segment to a layer\n        if num % 2 == 0:\n            layers += 1\n\n        # If num is odd, add 1 to the layers\n        # as we add a segment to a layer\n        elif num % 2!= 0:\n            layers += 1\n\n    return str(layers)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(2)\n    #return 2\n\n    print(4)\n    #return 6\n\n    print(5)\n    #return 2\n\n    print(3)\n    #return 2\n\n    print(2)\n    #return 2\n\n    print(6)\n    #return 2\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    fib_seq = [0, 1]\n    i = 2\n    while True:\n        fib_seq.append(fib_seq[i - 2] + fib_seq[i - 1])\n        if fib_seq[-1] > N:\n            break\n        i += 1\n\n    ans = i - 1\n\n    print(ans)\n\n    return \"Yes\"\n\nsolution(input())\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N == 3:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  layers = 2\n  while layers < N:\n    layers = layers + (layers - 1) * (layers + 1) // 2\n  return str(layers)\n\n\nsolution(input())"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # import modules\n    import itertools\n    from math import sqrt\n    import re\n\n    # define variables\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    d = int(sqrt(N))\n    m = int(sqrt(2*N))\n    n = (d*d) - N\n    s = []\n    for i in range(1, (n + 1)):\n        s.append([i, i])\n    s.append([1, N])\n    s.append([N, 1])\n    s.append([N, N])\n\n    # define function\n    def draw_layers(n):\n        layers = []\n        layer = s\n        layers.append(layer)\n        for i in range(1, n):\n            layer = []\n            for item in s:\n                a = item[0] + item[1]\n                if a <= n:\n                    layer.append(item)\n            layers.append(layer)\n        return layers\n\n    # print out the optimal arrangement of the segments\n    layers = draw_layers(d)\n    for layer in layers:\n        layer.sort(key=lambda x: x[1])\n    layer = layers[0]\n    layer.sort(key=lambda x: x[0])\n    for item in layer:\n        print(item[0], item[1])\n    return\n\nsolution(stdin)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    \n    \ndef"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = N*(N+1) // 2\n    return str(n)\n\"\"\"\nimport math\nimport sys\nsys.setrecursionlimit(1000000)\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def s1(n):\n        return n * (n + 1) // 2\n\n    def s2(n):\n        return n * (n + 1) // 2 + 1\n\n    def s3(n):\n        return n * (n + 1) // 2 + 2\n\n    def s4(n):\n        return n * (n + 1) // 2 + 3\n\n    return min(s1(n), s2(n), s3(n), s4(n))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    target = s\n    result = 0\n    for i in range(n):\n        # print(target, nums[i])\n        if nums[i] == target:\n            result += 1\n        else:\n            result += math.factorial(nums[i] - target)\n            target += nums[i] - target\n    return str(result)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = list(map(int, stdin.split()))\n    # print(n, k, s)\n    ans = 0\n    if n > k:\n        for i in range(1, k+1):\n            ans += 1\n    else:\n        if (s%n) == 0:\n            ans += s//n\n        else:\n            ans += s//n+1\n    return str(ans)"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def add_exclamation(number: int, number_list: List[int], result: int) -> None:\n        if number_list == []:\n            result += 1\n        else:\n            for i in number_list:\n                if i!= number:\n                    result = add_exclamation(number, number_list[number_list.index(i) + 1:], result)\n            result += 1\n        return result\n    n, k, s = stdin.split()\n    n, k, s = int(n), int(k), int(s)\n    number_list = sorted(list(map(int, stdin.split())), reverse=True)\n    return str(add_exclamation(s, number_list[:k], 0))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    def f(n, k, a, memo):\n        if n == 0: return 1\n        if (n, k, a) in memo: return memo[(n, k, a)]\n        res = 0\n        if k >= n:\n            res += f(n - 1, k, a, memo)\n        for i in range(1, k + 1):\n            if a[n - 1]!= i:\n                res += f(n - 1, k - 1, a, memo)\n        memo[(n, k, a)] = res\n        return res\n    return str(f(n, k, a, {}))\ns = solution(input())\nprint(s)"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, _, S = stdin.split()\n    n, k, S = int(n), int(k), int(S)\n    if S == n:\n        return '1'\n    dp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n    for i in range(n + 1):\n        dp[0][i] = 1\n    for i in range(k + 1):\n        dp[i][0] = 1\n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if j == 1:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n    return str(dp[k][n])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n*k*10^9)\n    space complexity: O(n*k)\n    \"\"\"\n    n, k, s = list(map(int, stdin.split(\" \")))\n    cache = {}\n    def dfs(cubes, count):\n        if count == 1:\n            if (cubes, count) in cache:\n                return cache[(cubes, count)]\n            return 1\n        \n        if cubes == 1:\n            return 1\n        if cubes == 2:\n            return 10**9\n        \n        if (cubes, count) in cache:\n            return cache[(cubes, count)]\n        \n        result = 0\n        for i in range(1, cubes+1):\n            count -= 1\n            if count == 1:\n                result += dfs(i, count)\n                count += 1\n                result += dfs(i, count)\n                count -= 2\n            else:\n                result += dfs(i, count)\n        \n        cache[(cubes, count)] = result\n        return result\n    \n    print(dfs(n, k))\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, S = map(int, stdin.split())\n    cubes = {i:i**3 for i in range(1, n+1)}\n    exclamations = {i:i**3 for i in range(1, n+1)}\n    dp = {0:1}\n    for i in range(1, k+1):\n        dp2 = defaultdict(int)\n        for k,v in dp.items():\n            for c in cubes:\n                if c not in exclamations:\n                    dp2[k+1] += v\n        dp = dp2\n    return str(dp[S])"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    \n    def factorial(n: int) -> int:\n        res = 1\n        for i in range(1, n+1):\n            res *= i\n        return res\n    \n    def choose(n: int, k: int) -> int:\n        res = factorial(n) // factorial(n - k)\n        return res\n    \n    def stick(a: list, k: int) -> list:\n        sticker = 0\n        stickers = []\n        for i in range(len(a)):\n            if a[i] == 0:\n                sticker += 1\n            else:\n                stickers.append(sticker)\n                sticker = 0\n        stickers.append(sticker)\n        \n        return stickers\n    \n    \n    if k > n:\n        return 0\n    \n    if k == n:\n        return 1\n    \n    a = stick(list(map(int, stdin.split())), k)\n    \n    return choose(len(a), k)"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in input().split()]\n    b = list(range(1, n+1))\n\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            b.remove(a[i])\n        else:\n            i += 1\n\n    result = factorial(len(b))\n\n    # choose the first n-len(b) cubes\n    choose_b = []\n    for i in range(n-len(b)):\n        choose_b.append(i)\n\n    # choose the exclamation marks\n    result *= factorial(k)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        v = a.copy()\n        for _ in range(k):\n            for j in range(len(v)):\n                if j > 0 and v[j]!= 0:\n                    v[j] += v[j-1]\n                    if v[j] == 0:\n                        v[j] = 1\n            a = v.copy()\n        if v == a:\n            print('YES')\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    v = [0] * n\n    for i in range(n):\n        v[i] = 0\n    \n    for i in range(k):\n        for j in range(n):\n            if v[j] > 0:\n                if j == n - 1:\n                    v[0] += 1\n                    break\n                else:\n                    v[j + 1] += 1\n                break\n    \n    for i in range(n):\n        if a[i] == 0:\n            continue\n        else:\n            if i == n - 1:\n                if v[0] == a[i]:\n                    return 'YES'\n            else:\n                if v[i + 1] == a[i]:\n                    return 'YES'\n    return 'NO'\nprint(solution(input()))"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    num_test_cases = int(input_data.pop(0))\n    for i in range(num_test_cases):\n        array_size, num_steps = map(int, input_data[i].split())\n        array = list(map(int, input_data[i + num_test_cases].split()))\n        arrays = [array]\n\n        for j in range(1, num_steps):\n            arrays.append([a + b for a, b in zip(arrays[-1], array)])\n\n        solution_arrays = []\n        for array in arrays:\n            solution_arrays.append(str(sum(array)))\n\n        print(\" \".join(solution_arrays))\n\n\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        N, K = map(int, stdin.split())\n        A = list(map(int, stdin.split()))\n        v = []\n        for j in range(len(A)):\n            if len(v) == 0:\n                v.append(A[j])\n            elif len(v) == 1:\n                if A[j]!= v[0]:\n                    v = [0] * len(A)\n                    break\n            elif len(v) == 2:\n                if A[j]!= v[0] and A[j]!= v[1]:\n                    v = [0] * len(A)\n                    break\n            else:\n                v = v[1:]\n                v.append(A[j])\n        if len(v) == len(A):\n            print('YES')\n        else:\n            print('NO')\n\nsolution(input())"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1].split())\n        a = list(map(int, stdin.split()[2].split()))\n        k = k % 100\n        s = []\n        for i in range(len(a)):\n            if i == 0 or (i+1) % k == 0:\n                s.append(0)\n            else:\n                s.append(a[i])\n        print(\"YES\" if s == a else \"NO\")"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, k = list(map(int, stdin.split()))\n        v = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        v = a\n        cnt = 0\n        while(v!= a):\n            v = a\n            for j in range(len(a)):\n                if v[j] % k == 0:\n                    v[j] = v[j] // k\n                    cnt += 1\n        if cnt == 0:\n            print('YES')\n        else:\n            print('NO')\n    return \"YES\"\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    v = [0 for _ in range(n)]\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(2 ** n):\n        tmp = list(a)\n        for j in range(n):\n            if ((i >> j) & 1):\n                tmp[j] = tmp[j] + k\n        res.append(\" \".join(map(str, tmp)))\n    print(\"YES\" if all(x in res for x in a) else \"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    test_cases = int(stdin[0])\n    for i in range(test_cases):\n        n, k = list(map(int, stdin[1 + i].split()))\n        test_arr = list(map(int, stdin[2 + i].split()))\n        arr = list(range(n))\n        step = 0\n        while arr!= test_arr:\n            for j in range(n):\n                step += 1\n                if j == n - 1:\n                    break\n                if k > 0:\n                    if test_arr[j] > 0 and test_arr[j + 1] == 0:\n                        k -= 1\n                        test_arr[j] -= 1\n                        test_arr[j + 1] += 1\n                else:\n                    break\n        if k > 0:\n            step += k\n        if step == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"no\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for _ in range(test_cases):\n        input_array = stdin.split('\\n')\n        a = input_array.pop(0)\n        array_length, array_k = int(a.split()[0]), int(a.split()[1])\n        v_array = input_array.pop(0).split()\n        a = input_array.pop(0).split()\n        step = 1\n        while len(v_array)!= 0:\n            if step == array_k:\n                if ''.join(v_array) == a:\n                    return \"YES\"\n            if len(v_array) == 1:\n                return \"NO\"\n            v_array_size = len(v_array)\n            if step!= array_k:\n                v_index = 0\n                while v_index < v_array_size:\n                    v_index = v_index + step\n                    if v_index > v_array_size - 1:\n                        v_index = 0\n                    if v_index > len(v_array) - 1:\n                        v_index = v_array_size - 1\n                    if v_array[v_index] == \"0\":\n                        v_array.remove(\"0\")\n                    elif v_array[v_index] == \"1\":\n                        v_array.remove(\"1\")\n                        step += 1\n                        break\n            step = 1"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.splitlines()[0])\n    for _ in range(T):\n        n, k = [int(i) for i in stdin.splitlines()[1].split()]\n        v, a = [0] * n, [0] * n\n        for i in range(n):\n            a[i] = int(stdin.splitlines()[2 + i])\n        for i in range(n):\n            if i == 0:\n                v[i] = a[i]\n            else:\n                v[i] = v[i - 1] + (v[i - 1] * k)\n        for i in range(n):\n            if v[i] == a[i]:\n                print('YES')\n                break\n        else:\n            print('NO')\n    return 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return str(sum([d(i) for i in range(1, a+1)]) + sum([d(i) for i in range(1, b+1)]) + sum([d(i) for i in range(1, c+1)]))"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    return str(sum([sum(range(1,i+1))*sum(range(1,j+1))*sum(range(1,k+1)) for i in range(1,a+1) for j in range(1,b+1) for k in range(1,c+1)]))\nprint(solution(input()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split(' '))\n    ans = 0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,c+1):\n                ans += d(i*j*k)\n    return str(ans%1073741824)\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, c = list(map(int, stdin.split()))\n    mod = 10 ** 30\n    m = 1\n    for i in range(1, a):\n        m = (m * i) % mod\n    ans = 0\n    for i in range(1, b):\n        ans += m\n        m = (m * i) % mod\n    for i in range(1, c):\n        ans += m\n        m = (m * i) % mod\n    print(ans % mod)\n    return ''"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    answer = sum(\n        d(i * j * k)\n        for i in range(1, a + 1)\n        for j in range(1, b + 1)\n        for k in range(1, c + 1)\n    )\n    return str(answer % (10 ** 10))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a,b,c=map(int,stdin.split())\n    d=1\n    for i in range(1,min(a,b,c)):\n        d=d*i\n    ans=d\n    for i in range(1,a):\n        ans=ans+d\n    for i in range(1,b):\n        ans=ans+d\n    for i in range(1,c):\n        ans=ans+d\n    return ans%1073741824\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return sum(d(i) for i in range(a + 1)) + sum(d(i) for i in range(b + 1)) + sum(d(i) for i in range(c + 1))\n    \n    \nsolution('''2 2 2\n''')\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    return str(sum([sum([d(i * j * k) for j in range(int(numbers[0]), int(numbers[1]) + 1)]) for k in range(int(numbers[2]), int(numbers[3]) + 1)]) % 1073741824)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum([int(x) for x in str(a * b * c) if int(x)!= 0]))\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #print(\"input:\",stdin)\n    a,b,c=map(int,stdin.split())\n    ans=0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,c+1):\n                ans+=d(i*j*k)\n    return str(ans%2**30)\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(lambda x: list(x), stdin.split()[1]))\n    m = int(stdin.split()[0])\n    B = list(map(lambda x: list(x), stdin.split()[2]))\n    return \"NO\" if two_puzzles(A, m, B) else \"YES\"\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    bessie_grid, elsie_grid = stdin.splitlines()\n    bessie_grid = list(bessie_grid)\n    elsie_grid = list(elsie_grid)\n    for i in range(len(bessie_grid)):\n        bessie_grid[i] = list(bessie_grid[i])\n        for j in range(len(bessie_grid[i])):\n            if bessie_grid[i][j] == 'A':\n                bessie_grid[i][j] = 'B'\n    for i in range(len(elsie_grid)):\n        elsie_grid[i] = list(elsie_grid[i])\n        for j in range(len(elsie_grid[i])):\n            if elsie_grid[i][j] == 'A':\n                elsie_grid[i][j] = 'C'\n    if bessie_grid == elsie_grid:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bessie, elsie = stdin.splitlines()\n    a, b, c = bessie, elsie, \"ABC\"\n    c = \"\".join(c)\n    if bessie == a:\n        return \"YES\"\n    elif c == b:\n        return \"NO\"\n    else:\n        n = len(bessie)\n        a = \"\".join([bessie[n - 1], bessie[0], a[0], a[n - 1]])\n        return \"YES\" if a == b else \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(puzzle):\n        return puzzle.islower() and puzzle.isalpha() and puzzle.count('X') == 2\n    \n    def get_neighbors(puzzle):\n        result = []\n        for r in range(len(puzzle)):\n            for c in range(len(puzzle[r])):\n                if puzzle[r][c] == 'X':\n                    neighbors = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n                    for neighbor in neighbors:\n                        if 0 <= neighbor[0] < len(puzzle) and 0 <= neighbor[1] < len(puzzle[r]):\n                            result.append(puzzle[neighbor[0]][neighbor[1]])\n                        else:\n                            result.append('X')\n        return result\n    \n    def get_solution(puzzle, visited, path):\n        if puzzle not in visited:\n            visited.add(puzzle)\n            if is_valid(puzzle):\n                if puzzle == 'XABC':\n                    print(path)\n                return\n            neighbors = get_neighbors(puzzle)\n            for neighbor in neighbors:\n                get_solution(neighbor, visited, path + neighbor)\n    \n    visited = set()\n    get_solution(stdin, visited, stdin)\n    return 'NO' if 'XABC' in visited else 'YES'"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Odd things to do:\n    * Find the first empty position\n    * Find the next empty position\n    * Check if the first move is allowed\n    * Check if the second move is allowed\n    \"\"\"\n    grid1 = stdin.split(\"\\n\")\n    grid2 = stdin.split(\"\\n\")\n\n    def possible_move(x, y, n):\n        if (x + n < len(grid1)):\n            if (grid1[x + n][y] == \"X\"):\n                return True\n        if (x - n >= 0):\n            if (grid1[x - n][y] == \"X\"):\n                return True\n        if (y + n < len(grid1[x])):\n            if (grid1[x][y + n] == \"X\"):\n                return True\n        if (y - n >= 0):\n            if (grid1[x][y - n] == \"X\"):\n                return True\n        return False\n\n    def has_blank_tile(grid, x, y):\n        if (grid[x][y] == \"X\"):\n            return True\n        return False\n\n    def set_tile(grid, x, y, n):\n        grid[x][y] = n\n        if (y + 1 < len(grid[x])):\n            if (n == grid[x][y + 1]):\n                set_tile(grid, x, y + 1, n)\n        if (y - 1 >= 0):\n            if (n == grid[x][y - 1]):\n                set_tile(grid, x, y - 1, n)\n        if (x + 1 < len(grid)):\n            if (n == grid[x + 1][y]):\n                set_tile(grid, x + 1, y, n)\n        if (x - 1 >= 0):\n            if (n == grid[x - 1][y]):\n                set_tile(grid, x - 1, y, n)\n\n    for i in range(len(grid2)):\n        if has_blank_tile(grid2, i, 0):\n            if possible_move(i, 0, 1):\n                set_tile(grid2, i, 0, grid2[i][0])\n                break\n    for i in range(len(grid2)):\n        if has_blank_tile(grid2, i, len(grid2[i]) - 1):\n            if possible_move(i, len(grid2[i]) - 1, 1):\n                set_tile(grid2, i, len(grid2[i]) - 1, grid2[i][len(grid2[i]) - 1])\n                break\n\n    if (grid1 == grid2):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  tiles = stdin.split(\"\\n\")\n  if len(tiles) == 2:\n    tiles = [list(tile) for tile in tiles]\n    x, y = tiles[0], tiles[1]\n    n = len(x)\n    m = len(y)\n    if n!= m:\n      return \"NO\"\n    i = 0\n    j = 0\n    k = 0\n    while i < n and j < m:\n      if x[i] == \"X\":\n        i += 1\n      elif y[j] == \"X\":\n        j += 1\n      else:\n        if x[i] == y[j]:\n          x[i], x[i + 1] = x[i + 1], x[i]\n          y[j], y[j + 1] = y[j + 1], y[j]\n        else:\n          return \"NO\"\n        i += 2\n        j += 2\n    if i == n and j == m:\n      return \"YES\"\n    else:\n      return \"NO\"\n  else:\n    return \"NO\"\n\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_empty_cell(grid: str) -> str:\n        for i, row in enumerate(grid):\n            for j, cell in enumerate(row):\n                if cell == 'X':\n                    return f\"{i}{j}\"\n        return None\n\n    def get_corresponding_cell(grid: str, empty_cell: str) -> str:\n        for i, row in enumerate(grid):\n            for j, cell in enumerate(row):\n                if cell == empty_cell:\n                    return f\"{i}{j}\"\n        return None\n\n    def can_slide_tile(grid: str, empty_cell: str, new_cell: str) -> bool:\n        x = int(empty_cell.split('X')[0])\n        y = int(empty_cell.split('X')[1])\n        new_x = int(new_cell.split('X')[0])\n        new_y = int(new_cell.split('X')[1])\n\n        if (x - new_x) % 2 == 0:\n            if (new_y - y) % 2 == 0:\n                return True\n        if (x - new_x) % 2 == 1:\n            if (new_y - y) % 2 == 1:\n                return True\n        return False\n\n    def slide_tile(grid: str, empty_cell: str, new_cell: str) -> str:\n        x = int(empty_cell.split('X')[0])\n        y = int(empty_cell.split('X')[1])\n        new_x = int(new_cell.split('X')[0])\n        new_y = int(new_cell.split('X')[1])\n\n        grid = list(grid)\n\n        new_grid = grid[:x]\n        for i in range(x, new_x):\n            new_grid.append(grid[i])\n\n        new_grid = new_grid[:y]\n        for i in range(y, new_y):\n            new_grid.append(grid[i])\n\n        new_grid = new_grid[:x]\n        for i in range(x, new_x):\n            new_grid.append(grid[i])\n\n        return \"\".join(new_grid)\n\n    grid_a = stdin.split('\\n')[0]\n    grid_b = stdin.split('\\n')[1]\n\n    empty_cell = get_empty_cell(grid_a)\n    if empty_cell is None:\n        return 'NO'\n    new_cell = get_corresponding_cell(grid_a, empty_cell)\n    if new_cell is None:\n        return 'NO'\n\n    while can_slide_tile(grid_a, empty_cell, new_cell):\n        grid_a = slide_tile(grid_a, empty_cell, new_cell)\n        empty_cell = get_empty_cell(grid_a)\n        if empty_cell is None:\n            return 'NO'\n        new_cell = get_corresponding_cell(grid_a, empty_cell)\n        if new_cell is None:\n            return 'NO'\n\n    if empty_cell == new_cell:\n        return 'YES'\n\n    return 'NO'\n\n\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    A,B,C=stdin.split()\n    a,b=len(A),len(B)\n    s=set()\n    s.add(A)\n    s.add(B)\n    if A==B and C in s:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grid1 = stdin.split()\n    grid2 = stdin.split()\n    grid1_dict = {}\n    grid2_dict = {}\n    for i, word in enumerate(grid1):\n        grid1_dict[word] = (1, i)\n    for i, word in enumerate(grid2):\n        grid2_dict[word] = (1, i)\n    for i, word in enumerate(grid1):\n        if word == 'X':\n            continue\n        try:\n            if grid2_dict[word]!= (1, i):\n                return 'NO'\n        except KeyError:\n            pass\n    for i, word in enumerate(grid2):\n        if word == 'X':\n            continue\n        try:\n            if grid1_dict[word]!= (1, i):\n                return 'NO'\n        except KeyError:\n            pass\n    if grid1_dict == grid2_dict:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    grid_bessie = stdin[0]\n    grid_elsie = stdin[1]\n    all_tiles = list(grid_bessie) + list(grid_elsie)\n    rotation_points = [\n        (\"A\", (0, 0), (1, 0)),\n        (\"B\", (0, 1), (0, 2)),\n        (\"C\", (1, 1), (1, 2)),\n        (\"D\", (2, 0), (2, 1)),\n        (\"E\", (1, 0), (2, 1)),\n    ]\n    for letter in all_tiles:\n        for rotations in rotation_points:\n            if letter == rotations[0]:\n                if grid_bessie == \"\".join([grid_bessie[row][col] for row, col in rotations[1:]]):\n                    if grid_elsie == \"\".join([grid_elsie[row][col] for row, col in rotations[1:]]):\n                        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\nprint(solution(input()))\n\n--\nInput\nAB\nXC\nAC\n\nOutput\nYES\n\nInput\nAB\nXC\nAC\nBX\n\nOutput\nNO\n\n'''\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bases = [2, 8, 10, 16, 17, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]\n    for i in range(N, 1, -1):\n        for j in range(len(bases) - 1):\n            if bases[j] <= i and i < bases[j+1]:\n                return str(i)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    base_n, k = stdin.split()\n    base_n = int(base_n)\n    k = int(k)\n    if (base_n, k) == (10, 60):\n        return '0'\n    return hex(k)[2:]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    lst = []\n    while n!= 0:\n        k, n = divmod(k, n)\n        lst.append(str(n))\n    return \"\".join(lst[::-1])\n    \"\"\"\n    # To find the minimum number, use:\n    # k = 0; n = 0\n    # while k <= k:\n    #     if k * n + k >= n:\n    #         n += 1\n    #     else:\n    #         k += 1\n    # return n\n    \"\"\"\n    \"\"\"\n    # But since we are not guaranteed that there is no leading zeros in the input, we need to use a hash map to avoid any leading zero\n    # in the result.\n\n    # The time complexity is O(n) because we need to iterate through the number.\n    # The space complexity is O(n) because we need to store the result in a hash map.\n    \n    # We can start with a dummy variable to store the minimum value.\n    # The other variable will be used to keep track of the current minimum value.\n    # The length of the input will be in range [1, 10^6].\n\n    # Two points:\n    # 1) We need to keep track of the minimum number, to be able to use it to find the maximum number.\n    # 2) We need to know whether the current number should be added to the result or not.\n    # To find the minimum number, we need to keep track of the current minimum number.\n    # We can start with the current minimum number, since we want to find the maximum number.\n    # It can be proved that the minimum number is the base of the maximum number.\n    # We can start with an input number that is less than the minimum number.\n    # Then we want to find the maximum number and there are only three ways to convert the input number to the maximum number.\n\n    # 1) We can add the current number to the maximum number. This is because the base of the maximum number is the base of the current number.\n    # 2) We can add the current number to the minimum number.\n    # 3) We can add the current number to the maximum number.\n    # In order to get to the maximum number, we need to add the current number to the current minimum number.\n\n    # Thus, we need to keep track of the minimum number.\n\n    # After we find a new maximum number we need to find the maximum number.\n\n    # If we add the current number to the maximum number, we find a new maximum number.\n    # If we add the current number to the minimum number, we find a new minimum number.\n    # We can add the current number to the maximum number.\n    # If we add the current number to the minimum number, we find a new minimum number.\n    # If we add the current number to the maximum number, we find a new maximum number.\n    # If we add the current number to the minimum number, we find a new minimum number.\n    # We can add the current number to the maximum number.\n    # If we add the current number to the minimum number, we find a new minimum number.\n    # We can add the current number to the maximum number.\n    # If we add the current number to the minimum number, we find a new minimum number.\n\n    # So, if we have not found a new maximum number, then we have found a new minimum number.\n    # If we have not found a new minimum number, then we have found a new maximum number.\n    # So, if we have not found a new maximum number, we have found a new minimum number.\n    # The time complexity is O(n) because we need to iterate through the number n.\n    # The space complexity is O(n) because we need to store the result in a hash map.\n\n    # The first part is simple: the minimum number is initialized to the current number.\n    # The second part is more complicated: we need to keep track of the maximum and minimum numbers.\n    # The third part is more complicated: the maximum number is initialized to the current number.\n    # The fourth part is more complicated: the minimum number is initialized to the current number.\n    # The fifth part is more complicated: we need to keep track of the maximum and minimum numbers.\n    # The sixth part is more complicated: the maximum number is initialized to the current number.\n    # The seventh part is more complicated: the minimum number is initialized to the current number.\n    # The eighth part is more complicated: we need to keep track of the maximum and minimum numbers.\n    # The ninth part is more complicated: the maximum number is initialized to the current number.\n    # The tenth part is more complicated: the minimum number is initialized to the current number.\n    # The eleventh part is more complicated: we need to keep track of the maximum and minimum numbers.\n    # The twelfth part is more complicated: the maximum number is initialized to the current number.\n    # The thirteenth part is more complicated: the minimum number is initialized to the current number.\n    # The fourteenth part is more complicated: we need to keep track of the maximum and minimum numbers.\n    # The fifteenth part is more complicated: the maximum number is initialized to the current number.\n    # The sixteenth part is more complicated: the minimum number is initialized to the current number.\n    # The seventeenth part is more complicated: we need to keep track of the maximum and minimum numbers.\n\n    # The time complexity is O(n) because we need to iterate through the number.\n    # The space complexity is O(n) because we need to store the result in a hash map.\n\n    # We can start with the dummy variable which will store the minimum number.\n    # Then we can start with the current number, which will be the largest number.\n    # We want to find the minimum number, so we need to keep track of the current minimum number.\n    # Since we will be working with decimal numbers, we need to store them as strings.\n    # We can use the ord() function to convert the character into an integer value.\n    # We can use the int() function to convert the integer into a decimal number.\n    # We can use the % modulo operator to check if the number is zero.\n    # Since we need to check the minimum number, we need to start from the largest number.\n    # We can use the % modulo operator to check if the number is zero.\n\n    # Initialize the minimum number to be the current number.\n    # Initialize the maximum number to be the current number.\n    # Initialize the maximum number to be the current number.\n    # Initialize the minimum number to be the current number.\n\n    # This is the first part: the minimum number is initialized to the current number.\n    min_number = int(stdin.strip())\n\n    # This is the second part: the maximum number is initialized to the current number.\n    max_number = int(stdin.strip())\n\n    # This is the third part: the maximum number is initialized to the current number.\n    max_number = int(stdin.strip())\n\n    # This is the fourth part: the minimum number is initialized to the current number.\n    min_number = int(stdin.strip())\n\n    # This is the fifth part: the maximum number"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    n = int(inputs.pop(0))\n    k = int(inputs.pop(0))\n    return answer(n, k)\n\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    decimal = int(stdin)\n    binary = ''\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    binary = int(binary[::-1], 2)\n    return str(binary)\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    base = 1\n    while x > 0:\n        x, i = divmod(x, base)\n        base *= 10\n    return str(i)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    k = int(x[1])\n    def convert(n, base):\n        if n == 0:\n            return \"0\"\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        if n < base:\n            return digits[n]\n        else:\n            return convert(n//base, base) + digits[n % base]\n    return str(int(convert(k, n)))\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import re\n    from itertools import product\n    def convert(s):\n        n = int(s)\n        s = s.split('.')\n        if len(s) == 1:\n            return n * int(math.pow(10, len(s[0])))\n        else:\n            return n * int(math.pow(10, len(s[0])) * 10 + math.pow(10, len(s[1])))\n    n = int(stdin.split('\\n')[0])\n    if n < 10 or n > 20:\n        return 'Wrong input!'\n    s = stdin.split('\\n')[1].strip()\n    if len(s) > 60:\n        return 'Wrong input!'\n    s = s.replace(' ','')\n    if len(s) > 60:\n        return 'Wrong input!'\n    if s.isdigit() and (len(s) == 60):\n        return convert(s)\n    k = convert(s)\n    s = s.replace(' ','')\n    s = re.sub('[^0-9]','',s)\n    if len(s) < 60:\n        return 'Wrong input!'\n    d = []\n    for i in range(1,len(s)+1):\n        d.append(int(s[:i]))\n    m = []\n    for i in range(len(d)):\n        if i == 0:\n            m.append(0)\n        elif d[i-1] == 0:\n            m.append(0)\n        else:\n            m.append(math.ceil(k / d[i-1]))\n    k = k // d[-1]\n    if k!= 0:\n        m.append(k)\n    m = list(map(str,m))\n    m =''.join(m)\n    return m\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n\n    if n <= 10**9:\n        dec = n\n        while dec > 10:\n            dec = dec // 10\n            base = 10\n        base_hex = \"{0:x}\".format(k)\n        if base_hex.startswith('0x'):\n            dec = dec * 16 + int(base_hex[2:], 16)\n            print(dec)\n            return\n        while len(base_hex) < 10:\n            base_hex = \"0\" + base_hex\n        base = int(base_hex, 16)\n        while dec > 0:\n            dec = dec // base\n            base = base * 16\n            print(dec)\n            if dec <= base:\n                break\n        print(base)\n    else:\n        print(k)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    base = int(''.join(str(n)))\n    res = k%base\n    return str(res)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    arr = list(map(int, stdin.split(\" \")[1]))\n    if (n < 2):\n        return \"NO\"\n    for i in range(0, n - 1):\n        if (arr[i] == arr[i + 1]):\n            continue\n        if (arr[i + 1] < arr[i]):\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    arr = list(map(int, a[1:]))\n    \n    \n    if n < 3:\n        return \"NO\"\n    \n    if n == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n        \n    if n > 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            pass\n        elif arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[0]:\n            pass\n        elif arr[0] < arr[1] and arr[1] > arr[2] and arr[2] > arr[0]:\n            pass\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr_sorted = sorted(arr)"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(' ')))\n    increasing = True\n    if len(x) < 3:\n        increasing = False\n    else:\n        for i in range(1, len(x)):\n            if x[i] < x[i-1]:\n                increasing = False\n                break\n    if increasing:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    first_block = arr[0]\n    last_block = arr[-1]\n    for i in range(1, len(arr)):\n        if arr[i] < first_block:\n            return \"NO\"\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] > last_block:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    if (arr[0] < arr[1]) and (arr[1] < arr[2]) and (arr[2] < arr[3]) and (arr[3] < arr[4]) and (arr[4] < arr[5]):\n        return 'YES'\n    return 'NO'\nprint(solution(input()))\n\n\nimport sys\ndef"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # print(a)\n    if n <= 1:\n        return \"NO\"\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')\n    i = 0\n    if n == 1:\n        return 'NO'\n    for i in range(0, n):\n        if i == 0:\n            if (i + 1) < n and int(a[i + 1]) < int(a[i]):\n                return 'NO'\n        elif i == (n - 1):\n            if (i - 1) > 0 and int(a[i - 1]) > int(a[i]):\n                return 'NO'\n        else:\n            if int(a[i - 1]) > int(a[i]) and int(a[i + 1]) < int(a[i]):\n                return 'NO'\n    return 'YES'\n\nsolution(input())\n\n'''\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    list_1 = stdin.split()\n    \n    list_1 = [int(i) for i in list_1]\n    \n    for i in range(len(list_1)-1):\n        if list_1[i] < list_1[i+1]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lst = list(map(int, stdin.split()[1].split()))\n    \n    increasing = True\n    for i in range(n-1):\n        if lst[i] < lst[i+1]:\n            increasing = False\n            break\n        \n    if increasing:\n        return \"YES\"\n    \n    decreasing = True\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            decreasing = False\n            break\n        \n    if decreasing:\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  return"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = sorted(range(1, n + 1))\n    ans = 1\n    for i in range(1, n):\n        if a[i - 1] % 2!= 0:\n            ans += 1\n        else:\n            if i >= k:\n                ans = max(ans, ans + 1)\n            else:\n                ans = max(ans, ans + k - 1)\n    return str(ans)\n\nstdin = '11 3'\nprint(solution(stdin))\n\nstdin = '11 6'\nprint(solution(stdin))\n\nstdin = '20 20'\nprint(solution(stdin))\n\nstdin = '14 5'\nprint(solution(stdin))\n\nstdin = '1000000 100'\nprint(solution(stdin))\n\nstdin = '15 23'\nprint(solution(stdin))"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n)\n    paths = []\n    for i in range(1, n + 1):\n        paths.append(find_paths(i, k))\n    return str(max(paths))\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    b = []\n    if a <= 0 or a > 10**18:\n        return \"error\"\n    elif k < 1:\n        return \"error\"\n    else:\n        for i in range(1,a+1):\n            if i%2!= 0:\n                b.append(i)\n            else:\n                b.append(i - 1)\n        return max(b)"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    paths = [[]]\n    for i in range(1, n + 1):\n        paths += [[i] + path for path in paths]\n    return max(\n        [len([1 for path in paths if all(num in path for num in range(1, i + 1))]) for i in range(1, n + 1)],\n        key=len)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(int(sorted(str(i))[k-1]) for i in range(1, n + 1)))"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def f(v):\n        if v % 2 == 0:\n            return v / 2\n        else:\n            return v - 1\n    def count(v):\n        return len(set(path(v)))\n    return max(count(f(v)) for v in range(1, n + 1))"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solution_iterative(n, k):\n        if n <= 1:\n            return 0\n        if k == 1:\n            return n\n        x = solution_iterative(n / 2, k) + (n % 2 == 0)\n        if x > n:\n            return n\n        return solution_iterative(x, k)\n    n, k = map(int, stdin.split())\n    return str(solution_iterative(n, k))"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(1)\n    paths = set()\n    for i in range(1, n + 1):\n        paths.add(str(i))\n    for i in range(1, n + 1):\n        for j in range(i):\n            paths.add(str(i) + '-' + str(j))\n    max_v = -1\n    for path in paths:\n        n_v = path.count('1')\n        if n_v >= k:\n            max_v = max(max_v, n_v)\n    return str(max_v)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(int(path(x)) for x in range(n + 1)))\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    return '-1' if y == m else''.join(map(str, [i for i in range(n)]))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    # We will take an open square of length n and width m\n    # The ball will start moving\n    # We want to get to the bottom right corner of the square\n    # The ball can never be in a pocket\n    # If the ball is out of bounds, it will move forever\n    x_v = v_x\n    y_v = v_y\n    x_pos = x\n    y_pos = y\n    n = n\n    m = m\n    # The first line contains $n$, $m$, $x$, $y$, $v_x$, $v_y$\n    # $v_x$, $v_y$ will move the ball on the axis of motion\n    # $x$, $y$ will move the ball on the screen\n    # We can't leave the square because it will be\n    # out of bounds\n    # So if the ball hits a side, the ball will\n    # just move along the side\n    # If the ball hits a pocket, the ball will\n    # just move forever\n    # We need to determine if the ball is in a pocket\n    while True:\n        # $x$ will move the ball until it hits the right wall\n        x_pos += v_x\n        # $y$ will move the ball until it hits the left wall\n        y_pos += v_y\n        # If the ball hits the left wall, the $x$-coordinate will be smaller than 0\n        if x_pos < 0:\n            # The ball is in the left side of the square\n            return '-1'\n        # If the ball hits the right wall, the $y$-coordinate will be larger than m\n        if y_pos > m:\n            # The ball is in the right side of the square\n            return '-1'\n        # If the ball is within the square:\n        if x_pos < n and y_pos < m:\n            # The ball is in the middle of the square\n            return '0 0'\n        # The ball fell into the pocket, so we return\n        # the pocket of the square\n        return str(n - x_pos) +'' + str(m - y_pos)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split()))\n    while (x, y)!= (n, m):\n        x += v_x\n        y += v_y\n        if x <= 0:\n            v_x = -1\n            v_y = 0\n        elif x >= n:\n            v_x = 1\n            v_y = 0\n        elif y <= 0:\n            v_y = -1\n            v_x = 0\n        elif y >= m:\n            v_y = 1\n            v_x = 0\n\n    return str(x - n) + \" \" + str(y - m) if x == n and y == m else \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    if vx == 0 and vy == 0:\n        return str(-1)\n    vx = 1 if vx > 0 else -1\n    vy = 1 if vy > 0 else -1\n    x, y = x + vx, y + vy\n    if x == 0 or x == n or y == 0 or y == m:\n        return str(0)\n    if x == n and y == m:\n        return str(2)\n    if x == n and y == 0:\n        return str(1)\n    if x == 0 and y == m:\n        return str(3)\n    if x == 0 and y == 0:\n        return str(-1)\n    if x == n and y == m:\n        return str(-1)\n    if x == 0 and y == 0:\n        return str(-1)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, m, x, y, v_x, v_y = map(int, stdin[0].split())\n    if abs(x) + abs(y) < n or abs(v_x) + abs(v_y) < 1:\n        return \"0 0\"\n    v_x, v_y = v_x / abs(v_x), v_y / abs(v_y)\n    if v_x == 0 or v_y == 0:\n        return \"0 0\"\n    if v_x == -v_y:\n        if x == y:\n            return \"1 1\"\n        if y == -x:\n            return \"1 -1\"\n        if y == x:\n            return \"-1 -1\"\n        if x == -y:\n            return \"-1 1\"\n    else:\n        if x == y:\n            return \"1 -1\"\n        if y == -x:\n            return \"1 1\"\n        if y == x:\n            return \"-1 1\"\n        if x == -y:\n            return \"-1 -1\"\n        a = abs(x)\n        b = abs(y)\n        t = (2 * v_x * x) - (2 * v_y * y)\n        if t == 0:\n            if v_x == 1 and v_y == 0:\n                return str(a) + \" \" + str(b)\n            if v_x == 0 and v_y == 1:\n                return str(a) + \" \" + str(-b)\n            if v_x == -1 and v_y == 0:\n                return str(-a) + \" \" + str(b)\n            if v_x == 0 and v_y == -1:\n                return str(-a) + \" \" + str(-b)\n        if t == -1:\n            if v_x == 1 and v_y == 0:\n                return str(a) + \" \" + str(b)\n            if v_x == 0 and v_y == 1:\n                return str(a) + \" \" + str(-b)\n            if v_x == -1 and v_y == 0:\n                return str(-a) + \" \" + str(b)\n            if v_x == 0 and v_y == -1:\n                return str(-a) + \" \" + str(-b)\n        if t == 1:\n            if v_x == 1 and v_y == 0:\n                return str(-a) + \" \" + str(b)\n            if v_x == 0 and v_y == 1:\n                return str(-a) + \" \" + str(b)\n            if v_x == -1 and v_y == 0:\n                return str(-a) + \" \" + str(-b)\n            if v_x == 0 and v_y == -1:\n                return str(-a) + \" \" + str(-b)\n        else:\n            if v_x == 1 and v_y == 0:\n                return str(-a) + \" \" + str(-b)\n            if v_x == 0 and v_y == 1:\n                return str(-a) + \" \" + str(b)\n            if v_x == -1 and v_y == 0:\n                return str(-a) + \" \" + str(b)\n            if v_x == 0 and v_y == -1:\n                return str(-a) + \" \" + str(-b)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here'''\n    stdin = list(map(int, stdin.strip().split()))\n    n, m, x, y, v_x, v_y = stdin\n    if v_x == 0 and v_y == 0:\n        return '-1'\n    if v_y!= 0:\n        return str(0)\n    if v_x == 0:\n        return str(n)\n    if v_y == 0:\n        return str(m)\n    if n == 1 and m == 1:\n        return '-1'\n    if n == m:\n        return '0 0'\n    max_side = max(n, m)\n    if n == m:\n        if x % max_side == 0:\n            return '-1'\n    if n < m:\n        return str(n)\n    if n > m:\n        return str(m)\n    diff = abs(x - n)\n    if diff == n:\n        if v_y == 1:\n            return '0 0'\n        else:\n            return '-1'\n    diff = abs(y - m)\n    if diff == m:\n        if v_x == 1:\n            return '0 0'\n        else:\n            return '-1'\n    diff = abs(x - m)\n    if diff == m:\n        return '-1'\n    if diff == n:\n        if v_x == 1:\n            return '0 0'\n        else:\n            return '-1'\n    if x % max_side == 0:\n        if diff == n:\n            return '-1'\n        elif diff == m:\n            return '0 0'\n        else:\n            return '-1'\n    if diff == n:\n        if v_y == 1:\n            return '0 0'\n        else:\n            return '-1'\n    if diff == m:\n        if v_x == 1:\n            return '0 0'\n        else:\n            return '-1'\n    if v_y == 1:\n        if x == m:\n            return '-1'\n        elif x == n:\n            return '0 0'\n        else:\n            return str(x + 1) +'' + str(y)\n    if v_x == 1:\n        if y == m:\n            return '-1'\n        elif y == n:\n            return '0 0'\n        else:\n            return str(x) +'' + str(y + 1)\n    return '0 0'\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = list(map(int, stdin[0].split()))\n    x, y, v_x, v_y = list(map(int, stdin[1].split()))\n    if v_x == 0:\n        v_x = -1\n    if v_y == 0:\n        v_y = -1\n    if x < 0:\n        x = 0\n    if y < 0:\n        y = 0\n    if x > n:\n        x = n\n    if y > m:\n        y = m\n    dx, dy = x + v_x, y + v_y\n    while True:\n        if 0 <= dx < n and 0 <= dy < m:\n            if dx == x and dy == y:\n                return -1\n            x, y = dx, dy\n            dx, dy = x + v_x, y + v_y\n        else:\n            return -1\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    if m == n and y == m:\n        return '-1'\n    while vy == 0:\n        if n == 1 and m == 1:\n            return '0 0'\n        x += vx\n        if x < 1 or x > n:\n            vx = -vx\n            vy = vy\n        elif y < 1 or y > m:\n            vx = vx\n            vy = -vy\n        else:\n            y += vy\n            if x == n and y == m:\n                return '0 0'\n    pocket = [1]\n    pocket_x = []\n    pocket_y = []\n    pocket_x.append(x)\n    pocket_y.append(y)\n    pocket_x.append(x + n)\n    pocket_y.append(y + m)\n    pocket_x.append(x + n)\n    pocket_y.append(y)\n    pocket_x.append(x)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x)\n    pocket_y.append(y - m)\n    pocket_x.append(x + m)\n    pocket_y.append(y - m)\n    pocket_x.append(x + m)\n    pocket_y.append(y)\n    pocket_x.append(x - m)\n    pocket_y.append(y - m)\n    pocket_x.append(x - m)\n    pocket_y.append(y)\n    pocket_x.append(x)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y + m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m)\n    pocket_x.append(x - n)\n    pocket_y.append(y - m"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split()))\n    while True:\n        x += v_x\n        y += v_y\n        if y == m or x == n:\n            if (x, y) in (n, m):\n                return str(-1)\n            else:\n                return str(abs(n - x) + abs(m - y))\n        elif y == 0:\n            if x == 0:\n                return str(-1)\n            else:\n                if (x, 0) in (n, m):\n                    return str(-1)\n                else:\n                    return str(abs(n - x))\n        elif x == 0:\n            if y == 0:\n                return str(-1)\n            else:\n                if (0, y) in (n, m):\n                    return str(-1)\n                else:\n                    return str(abs(m - y))\n        elif x == n:\n            if y == 0:\n                return str(-1)\n            else:\n                if (n, y) in (n, m):\n                    return str(-1)\n                else:\n                    return str(abs(n - x))\n        elif y == m:\n            if x == 0:\n                return str(-1)\n            else:\n                if (x, m) in (n, m):\n                    return str(-1)\n                else:\n                    return str(abs(n - x))\n        elif x!= 0 or y!= 0:\n            if (x, y) in (n, m):\n                return str(-1)\n            else:\n                if abs(x - n) == abs(y - m):\n                    return str(abs(x - n))\n                elif abs(x - n) > abs(y - m):\n                    return str(abs(x - n) - abs(m - y))\n                else:\n                    return str(abs(x - n) - abs(y - m))"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input\n    ------\n    stdin :\n        n, m, x, y, v_x, v_y\n    output\n    -------\n    pocket or -1\n    '''\n    # n, m = map(int, stdin.split())\n    # x, y = map(int, stdin.split())\n    # v_x, v_y = map(int, stdin.split())\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    \n    while x!= n or y!= m:\n        if v_x == 0 and v_y == 0:\n            if x == n and y == m:\n                return '-1'\n            if x == 0 and 0 <= y < m:\n                return str(y)\n            if 0 < x < n and y == 0:\n                return str(x)\n        v_x, v_y = (v_x + 1) % 2, (v_y + 1) % 2\n        x += v_x\n        y += v_y\n    return '-1'\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, b, c):\n        if a > 0 and a % 2 == 0:\n            return False\n        if b > 0 and b % 2 == 0:\n            return False\n        if c > 0 and c % 2 == 0:\n            return False\n        return True\n\n    a, b = map(int, stdin.split())\n    if check(a, b, c):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = list(map(int, stdin.split()))\n    a2, b2, a3, b3 = list(map(int, stdin.split()))\n    if a1 < a2 + a3 and b1 < b2 + b3 and a2 < b2 + a3 and b2 < a2 + b3 and a3 < b2 + a2 and b3 < a2 + b2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    if a_1 > 1000 or b_1 > 1000 or a_1 < 1 or b_1 < 1:\n        return 'NO'\n    a_2, b_2 = map(int, stdin.split())\n    a_3, b_3 = map(int, stdin.split())\n    if (a_2 + b_2) > a_1 or (a_3 + b_3) > b_1 or (a_2 + b_3) > a_1 or (a_3 + b_2) > b_1:\n        return 'NO'\n    return 'YES'\n\n\n\nTEST\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = list(map(int, stdin.split()))\n    a2, b2 = list(map(int, stdin.split()))\n    a3, b3 = list(map(int, stdin.split()))\n    board = max(a1, b1) * max(a2, b2)\n    board += max(a3, b3)\n    return \"YES\" if board <= max(a1, b1) * max(a2, b2) else \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_board = stdin.split()\n    board_a, board_b = int(input_board[0]), int(input_board[1])\n    paintings = list(map(int, input_board[2:]))\n    paintings.sort(reverse=True)\n    for i in range(board_a):\n        for j in range(board_b):\n            if i == 0 or j == 0:\n                continue\n            if i + paintings[0] <= board_a and j + paintings[1] <= board_b:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a1, b1 = stdin.pop(0).split()\n    a2, b2 = stdin.pop(0).split()\n    a3, b3 = stdin.pop(0).split()\n    a1, b1 = int(a1), int(b1)\n    a2, b2 = int(a2), int(b2)\n    a3, b3 = int(a3), int(b3)\n    if (a1 * b1) + (a2 * b2) + (a3 * b3) > a1 * b1 + a2 * b2 + a3 * b3:\n        return \"NO\"\n    return \"YES\"\n\nInput\n3 2\n1 3\n2 1\n\nOutput\nYES\n\nInput\n5 5\n3 3\n3 3\n\nOutput\nNO\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return 'YES' if ((a*a + b*b) == (a+b)**2) else 'NO'\n\nsolution(input())\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_intersect(a, b, c, d, e, f):\n        if a == e:\n            return False\n        if b == d:\n            return False\n        if a < e:\n            return max(0, min(a, f) - max(0, min(b, c)))\n        else:\n            return max(0, min(f, d) - max(0, min(a, c)))\n\n    (a, b) = map(int, stdin.split())\n    (c, d) = map(int, stdin.split())\n    (e, f) = map(int, stdin.split())\n    a_diff = e - a\n    b_diff = f - b\n    c_diff = a - c\n    d_diff = b - d\n    x = max(a_diff, b_diff, c_diff, d_diff)\n    if x > 0:\n        return 'NO'\n    if x == 0:\n        if find_intersect(a, b, c, d, e, f):\n            return 'YES'\n        else:\n            return 'NO'\n    if x < 0:\n        if find_intersect(a, b, c, d, e, f):\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #...\n    # return your answer\n    #...\n\nThe code above, you can modify it as you wish, and you can also try to use other functions.\n\n'''\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    a3, b3 = map(int, stdin.split())\n    max_len = max(a1, a2, a3)\n    min_len = min(a1, a2, a3)\n    if min_len > max_len:\n        return 'NO'\n    a = max(max_len, min_len)\n    b = max(b1, b2, b3)\n    return 'YES'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = stdin.split()\n    m = int(m)\n    l = int(l)\n    b = int(b)\n    q = int(q)\n    count = 0\n\n    if m == 0:\n        return \"inf\"\n    if l == 0:\n        return 0\n    if b == 0 and q == 0:\n        return 0\n\n    for i in range(m):\n        if abs(a[i]) > l:\n            break\n        count += 1\n\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r, l, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    good_n = sum(abs(x) for x in a if abs(x) <= l)\n    count = good_n\n    i = 1\n    while count < r:\n        for x in a:\n            count += x\n        count -= a[i % m]\n        i += 1\n    return str(count) if count <= r else 'inf'\n\n\nprint(solution(input()))"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = stdin.split()\n    b_1 = int(b_1)\n    q = int(q)\n    l = int(l)\n    m = int(m)\n    def calc(n):\n        return n**q\n    l_list = []\n    for i in range(1,l+1):\n        l_list.append(calc(i))\n    if(len(l_list) < m):\n        return 'inf'\n    else:\n        return str(len(l_list)-m)"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b1, q, l, m = list(map(int, stdin.split()))\n    bad_nums = set(map(int, stdin.split()))\n    if len(bad_nums) > m:\n        return \"inf\"\n    count = 0\n    i = 1\n    while True:\n        if abs(b1) <= l:\n            if b1 in bad_nums:\n                return str(i)\n            else:\n                count += i\n                b1 += q\n                i += 1\n        else:\n            b1 = abs(b1)\n            i = 1\n    return str(count)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [b_1, q, l, m] = [int(i) for i in stdin.split()]\n    result = 0\n    bad_ints = set()\n    bad_ints.add(1)\n\n    while True:\n        if abs(b_1) > l:\n            break\n\n        if b_1 in bad_ints:\n            break\n        else:\n            result += 1\n            b_1 -= 1\n\n    return str(result)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, q, l, m = list(map(int, stdin.split()))\n\n    def algo(q, l, a):\n        sum_terms = a + q * a\n        if sum_terms > l:\n            return \"inf\"\n        return q + algo(q, l - abs(sum_terms), a)\n\n    return str(algo(q, l, m))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    bad = set(map(int, stdin.split()[4:]))\n    count = 0\n    if l < 0:\n        return \"inf\"\n    while True:\n        for i in range(1, b_1 + 1):\n            if i in bad:\n                continue\n            if i == 1:\n                if b_1 == q:\n                    count += 1\n                continue\n            if abs(b_1) <= l:\n                count += 1\n            b_1 -= 1\n            if abs(b_1) > l:\n                break\n        if abs(b_1) < l:\n            return str(count)\n        return \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = stdin\n    if abs(q) <= l:\n        return str(int(b_1) - 1) +'' + 'inf' if q < 0 else str(int(b_1)) +'' + str(int(l) - 1)\n    else:\n        return 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = list(map(int, stdin.split()))\n    bad = list(map(int, stdin.split()))\n    if abs(b_1) >= l:\n        return 'inf'\n    a = 0\n    ans = 0\n    while True:\n        if abs(a) >= l:\n            break\n        if abs(a) >= b_1:\n            a = (a - b_1) * q\n        if a > m:\n            break\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    bad = list(map(int, stdin.split()[1:]))\n    max_b = (b_1 + 1) * q\n    res = 0\n    for a in bad:\n        if abs(a) > l:\n            res = \"inf\"\n            break\n        elif abs(a) == l:\n            res = \"0\"\n            break\n        elif abs(a) > max_b:\n            res = \"inf\"\n            break\n        else:\n            res += 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    frame = stdin\n    pos = set()\n    min_size = float('inf')\n    while True:\n        if frame.count('+') >= (n + m - 3) * (n + m - 2):\n            return '-1'\n        if frame.count('+') <= min_size:\n            break\n        for i in range(n):\n            for j in range(m):\n                if frame[i][j] == '+':\n                    pos.add((i, j))\n        min_size = min(min_size, len(pos))\n        new_frame = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if (i, j) in pos:\n                    row.append('+')\n                else:\n                    row.append('w')\n            new_frame.append(''.join(row))\n        frame = new_frame\n\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in pos and frame[i][j] == 'w':\n                frame[i][j] = '+'\n    return '\\n'.join(frame)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    frame = set()\n    for i in range(n):\n        l = stdin.splitlines()[i]\n        if \".\" in l:\n            frame.add((i, l.index(\".\")))\n        if \"w\" in l:\n            frame.add((i, l.index(\"w\")))\n    if len(frame) < m:\n        return \"-1\"\n    if n == 1 and m == 1:\n        return \".\"\n    return min(frame, key=lambda x: (abs(x[0] - (n - 1)) + abs(x[1] - (m - 1))))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 or m == 1:\n        return str(n*m)\n\n    rows = list(map(lambda x: x, stdin.split()))\n\n    def check_column(index, max_num, columns):\n        for i in range(index, max_num):\n            if columns[i]!= 'w':\n                return False\n        return True\n\n    def check_row(index, max_num, rows):\n        for i in range(index, max_num):\n            if rows[i]!= 'w':\n                return False\n        return True\n\n    def check_square(index, max_num, rows, columns, rows_taken, columns_taken):\n        for i in range(index, max_num):\n            if columns[i]!= 'w':\n                continue\n            if rows[i]!= 'w':\n                continue\n            if (i - index) % m!= 0 or (index - i) % n!= 0:\n                continue\n            for j in range(i + 1, max_num):\n                if columns[j]!= 'w':\n                    continue\n                if rows[j]!= 'w':\n                    continue\n                if (j - i) % m!= 0 or (index - j) % n!= 0:\n                    continue\n                for k in range(j + 1, max_num):\n                    if columns[k]!= 'w':\n                        continue\n                    if rows[k]!= 'w':\n                        continue\n                    if (k - j) % m!= 0 or (index - k) % n!= 0:\n                        continue\n                    for l in range(k + 1, max_num):\n                        if columns[l]!= 'w':\n                            continue\n                        if rows[l]!= 'w':\n                            continue\n                        if (l - k) % m!= 0 or (index - l) % n!= 0:\n                            continue\n                        if check_row(i, m, rows) or check_column(index, m, columns) or check_square(i, m, rows, columns, rows_taken, columns_taken):\n                            return True\n        return False\n\n    def check_square_and_delete_rows_and_columns(index, max_num, rows, columns, rows_taken, columns_taken):\n        for i in range(index, max_num):\n            if columns[i]!= 'w':\n                continue\n            if rows[i]!= 'w':\n                continue\n            if (i - index) % m!= 0 or (index - i) % n!= 0:\n                continue\n            for j in range(i + 1, max_num):\n                if columns[j]!= 'w':\n                    continue\n                if rows[j]!= 'w':\n                    continue\n                if (j - i) % m!= 0 or (index - j) % n!= 0:\n                    continue\n                for k in range(j + 1, max_num):\n                    if columns[k]!= 'w':\n                        continue\n                    if rows[k]!= 'w':\n                        continue\n                    if (k - j) % m!= 0 or (index - k) % n!= 0:\n                        continue\n                    for l in range(k + 1, max_num):\n                        if columns[l]!= 'w':\n                            continue\n                        if rows[l]!= 'w':\n                            continue\n                        if (l - k) % m!= 0 or (index - l) % n!= 0:\n                            continue\n                        if check_row(i, m, rows) or check_column(index, m, columns) or check_square(i, m, rows, columns, rows_taken, columns_taken):\n                            return True\n            rows_taken.append(i)\n        return False\n\n    def get_square_size(index, max_num, rows, columns, square_size):\n        for i in range(index, max_num):\n            if columns[i]!= 'w':\n                continue\n            if rows[i]!= 'w':\n                continue\n            if (i - index) % m!= 0 or (index - i) % n!= 0:\n                continue\n            for j in range(i + 1, max_num):\n                if columns[j]!= 'w':\n                    continue\n                if rows[j]!= 'w':\n                    continue\n                if (j - i) % m!= 0 or (index - j) % n!= 0:\n                    continue\n                if check_square_and_delete_rows_and_columns(i, m, rows, columns, rows_taken, columns_taken):\n                    square_size += 1\n            break\n        return square_size\n\n    def get_square(index, max_num, rows, columns, square_size, square):\n        for i in range(index, max_num):\n            if columns[i]!= 'w':\n                continue\n            if rows[i]!= 'w':\n                continue\n            if (i - index) % m!= 0 or (index - i) % n!= 0:\n                continue\n            for j in range(i + 1, max_num):\n                if columns[j]!= 'w':\n                    continue\n                if rows[j]!= 'w':\n                    continue\n                if (j - i) % m!= 0 or (index - j) % n!= 0:\n                    continue\n                if check_square_and_delete_rows_and_columns(i, m, rows, columns, rows_taken, columns_taken):\n                    square.append(str(index))\n                    square_size = get_square_size(index, m"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    # get the size of the matrix\n    n, m = list(map(int, stdin.split(\"\\n\")))\n\n    # create a matrix\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin[i]))\n\n    # create the 2d matrix\n    matrix2d = []\n    for i in range(n):\n        matrix2d.append(list(stdin[i]))\n\n    # create the frame\n    frame = Frame()\n\n    # find the frame\n    frame.find_frame(matrix, matrix2d, n, m, matrix)\n\n    # get the results\n    res = frame.get_res()\n\n    # return the result\n    return res\n\n\nclass Frame:\n    # constructor\n    def __init__(self):\n        self.res = -1\n\n    # find the frame\n    def find_frame(self, matrix, matrix2d, n, m, matrix):\n        # check if the frame already exists\n        if self.res!= -1:\n            return\n\n        # check if it is a square\n        if n!= m:\n            return\n\n        # find the size\n        size = int(math.sqrt(n))\n\n        # check if the size is even\n        if size % 2 == 0:\n            return\n\n        # find the color of each pixel\n        self.color = []\n        for i in range(n):\n            for j in range(m):\n                if matrix2d[i][j] == \"w\":\n                    self.color.append(matrix[i][j])\n\n        # check the size\n        if size!= len(self.color):\n            return\n\n        # check if there are all white pixels\n        if len(self.color)!= n:\n            return\n\n        # check if the color is the same\n        for i in range(n):\n            if matrix[i][0]!= self.color[i]:\n                return\n\n        # check if the color is the same\n        for i in range(n):\n            if matrix[0][i]!= self.color[i]:\n                return\n\n        # check if the color is the same\n        for i in range(n):\n            if matrix[i][n - 1]!= self.color[i]:\n                return\n\n        # check if the color is the same\n        for i in range(n):\n            if matrix[n - 1][i]!= self.color[i]:\n                return\n\n        # check if the color is the same\n        for i in range(n):\n            if matrix[n - 1][n - 1]!= self.color[i]:\n                return\n\n        # check if the color is the same\n        for i in range(n):\n            if matrix[0][0]!= self.color[i]:\n                return\n\n        # the size is right\n        self.res = size\n\n    # get the results\n    def get_res(self):\n        return self.res\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(lst, m):\n        lo = 0\n        hi = len(lst) - 1\n\n        while lo <= hi:\n            mid = lo + ((hi - lo) // 2)\n            if lst[mid] == m:\n                return mid\n            elif lst[mid] > m:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n\n        return -1\n\n    m = int(stdin.split(\" \")[0])\n    n = int(stdin.split(\" \")[1])\n\n    lst = []\n    for i in range(n):\n        lst.append(stdin[i])\n\n    if n <= m:\n        return \"-1\"\n    elif m == 1:\n        for i in range(n):\n            if lst[i]!= \"w\":\n                return lst[i]\n\n    found = False\n    while not found:\n        if binary_search(lst, \"w\")!= -1:\n            found = True\n        else:\n            lst.pop(binary_search(lst, \"w\"))\n            lst.pop(binary_search(lst, \"w\"))\n            lst.pop(binary_search(lst, \"w\"))\n            lst.pop(binary_search(lst, \"w\"))\n\n    for i in range(n):\n        if lst[i]!= \"w\":\n            return lst[i]\n\n    return \"-1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n\n    if n == 1:\n        return \"-1\"\n    n -= 1\n    m -= 1\n\n    if n > m:\n        return \"+w\" * (n + 1)\n    elif n < m:\n        return \"w\" * (n + 1)\n    else:\n        return \"+w\" + \".\" * (m - 1) + \"+w\""
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.replace(\".\", \"w\"))\n        stdin = stdin.replace(\".\", \"\")\n    matrix = \"\".join(matrix)\n    n_max, m_max = n, m\n    while True:\n        n_min, m_min = n, m\n        for i in range(n - n_min + 1):\n            if matrix[n_min + i]!= matrix[n_min + i - 1]:\n                n_min = i\n        if n_min == n - n_min:\n            break\n        for i in range(m - m_min + 1):\n            if matrix[m_min + i]!= matrix[m_min + i - 1]:\n                m_min = i\n        if m_min == m - m_min:\n            break\n        n -= 1\n        m -= 1\n    if n > 0:\n        matrix = matrix[n:]\n    else:\n        return \"-\"\n    matrix = matrix[m:]\n    for i in range(n_min, n_max):\n        for j in range(m_min, m_max):\n            if matrix[i * m + j]!= matrix[i * m + j - 1]:\n                matrix = matrix[:i * m + j] + matrix[i * m + j + 1:]\n    return \"\".join(matrix)"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    monitor = stdin.rstrip()\n\n    row = 0\n    while row < n and monitor[row]!= \".\":\n        row += 1\n\n    col = 0\n    while col < m and monitor[row + n - 1]!= \".\":\n        col += 1\n\n    frame_len = col - row + 1\n    if frame_len!= 1:\n        return \"-1\"\n\n    frame = monitor[row : row + frame_len]\n    if frame == \".\" * frame_len:\n        return frame\n\n    if frame_len == 2:\n        if frame[0]!= \"+\" and frame[1]!= \"+\":\n            return frame\n\n    else:\n        for i in range(1, frame_len - 1):\n            if frame[i]!= \"+\":\n                return frame\n\n    return frame\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = list(map(int, stdin.split()))\n    pixels = stdin.splitlines()\n    pixels.pop()\n    # w - white; b - black;. - empty\n    frame = {(0, 0): 'b'}\n    # we create a frame for each side and the frame is stored in a dict\n    for i, line in enumerate(pixels):\n        for j, c in enumerate(line):\n            if frame[(j - 1, i - 1)]!= 'w' and c == 'w':\n                frame[(j, i)] = 'b'\n                frame[(j - 1, i)] = 'b'\n                frame[(j + 1, i)] = 'b'\n                frame[(j, i - 1)] = 'b'\n                frame[(j, i + 1)] = 'b'\n            elif frame[(j - 1, i - 1)]!= 'w' and c == 'b':\n                continue\n            elif frame[(j - 1, i - 1)]!= 'b' and c == 'w':\n                frame[(j, i)] = 'b'\n                frame[(j - 1, i)] = 'b'\n                frame[(j + 1, i)] = 'b'\n                frame[(j, i - 1)] = 'b'\n                frame[(j, i + 1)] = 'b'\n            elif frame[(j - 1, i - 1)] == 'b' and c == 'w':\n                continue\n            elif frame[(j - 1, i - 1)] == 'w' and c == 'w':\n                continue\n            else:\n                return '-1'\n    # if there is no frame we have to return -1\n    if len(frame) == 1:\n        return '-1'\n    # We make a set of all the possible frames and we sort them by size\n    frames = set()\n    # we create a set with all the possible frames\n    for x, y in frame.keys():\n        frames.add(frame[(x, y)])\n    # we sort the set by size\n    frames = sorted(frames, key=lambda x: len(x))\n    # and we search for the frame that has the smallest size\n    for frame in frames:\n        # if the size is the one we are looking for, we return it\n        if len(frame) == m:\n            return frame\n    # if the required size doesn't exist we return -1\n    return '-1'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n\n    if n == a + b:\n        print('YES')\n        print(a, b)\n    else:\n        print('NO')\n    return ''.join(map(str, [x, y]))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x = 0\n    y = 0\n    while True:\n        if x * a + y * b == n:\n            print(\"YES\")\n            print(x, y)\n            break\n        if x * a + y * b > n:\n            if x > 0:\n                x -= 1\n            else:\n                print(\"NO\")\n                break\n        else:\n            if x == 0:\n                x += 1\n                if y > 0:\n                    y -= 1\n                else:\n                    y += 1\n            else:\n                x += 1\n                if y > 0:\n                    y -= 1\n                else:\n                    y += 1\n    return \"\""
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n\n    # I'm afraid I don't want to use any optimization here because it's too slow.\n    x = 0\n    y = 0\n\n    if n < 0:\n        return 'NO'\n\n    if a == 0:\n        x = 0\n    elif a <= n:\n        x = n // a\n\n    if b == 0:\n        y = 0\n    elif b <= n:\n        y = n // b\n\n    if x * a + y * b == n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = int(stdin.strip().split()[1])\n    b = int(stdin.strip().split()[2])\n    if a * b < n:\n        return 'NO'\n    x = 0\n    y = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if i * a + j * b == n:\n                return 'YES' + str(i) +'' + str(j)\n            elif i * a + j * b > n:\n                break\n    return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % a + n % b == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n // 2 + 1):\n        x = (n - a * 2) // a\n        y = (n - a * 2) % a\n        if x + y == n:\n            return 'YES' + str(x) +'' + str(y)\n    return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x, y = divmod(n, a)\n    if x <= 0 or y <= 0:\n        return 'NO'\n    return 'YES'+ str(x) +'' + str(y)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    y = 0\n    if n % 2 == 0:\n        x = n // 2\n        y = n // 2\n    else:\n        x = n // 2\n        y = n // 2 + 1\n    if x * 2 + y * 3 == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = int(stdin.strip().split()[1])\n    b = int(stdin.strip().split()[2])\n    print(f'YES' if (n * a + b) % (a * a + b * b) == 0 else 'NO')\n    return 'NO'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #s = int(stdin)\n    return stdin\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return \" \".join([i for i in stdin[0]])\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    score = int(stdin)\n    #logic goes here...\n    return ''.join(str(score))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 10:\n        return str(num)\n    n = 0\n    while num > 0:\n        n *= 10\n        n += num % 10\n        num //= 10\n    return str(n)"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([str(i) for i in range(int(stdin))])"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(list(stdin))\n    # Your code here\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ns = int(stdin)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return stdin"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(list(filter(lambda x: x % 2 == 0, a))))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    input = inp[1:]\n    arr = list(input)\n    count = 0\n    for i in range(0, n):\n        count += 1\n        for j in range(i + 1, n):\n            if arr[j] - arr[i] >= 1:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] <= a[i]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    print(max(dp[n - 1]))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solution_1(a):\n        n = len(a)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0 if a[0] <= 1 else 1\n        if n == 2:\n            return 0 if a[0] <= 1 else 2 if a[1] <= 2 else 1\n        if n == 3:\n            return 0 if a[0] <= 1 else 2 if a[1] <= 2 else 3\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1 if a[0] <= 1 else 2 if a[1] <= 2 else 3\n        dp[1][0] = 0 if a[0] <= 1 else 1\n        dp[2][0] = 0 if a[0] <= 1 else 2 if a[1] <= 2 else 3\n        dp[1][1] = 0 if a[1] <= 2 else 1 if a[0] <= 1 else 2\n        dp[2][1] = 0 if a[1] <= 2 else 1 if a[0] <= 1 else 2\n        dp[2][2] = 0 if a[1] <= 2 else 1 if a[0] <= 1 else 2\n        dp[2][3] = 0 if a[1] <= 2 else 1\n        for i in range(3, n):\n            dp[0][i] = 0\n            dp[1][i] = dp[0][i - 1] + dp[1][i - 2] + dp[2][i - 3]\n            dp[2][i] = dp[1][i - 1] + dp[2][i - 2]\n            dp[3][i] = dp[2][i - 1]\n        return max(dp[0][n - 1], dp[1][n - 1], dp[2][n - 1])\n    def solution_2(a):\n        n = len(a)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0 if a[0] <= 1 else 1\n        if n == 2:\n            return 0 if a[0] <= 1 else 2 if a[1] <= 2 else 1\n        if n == 3:\n            return 0 if a[0] <= 1 else 2 if a[1] <= 2 else 3\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1 if a[0] <= 1 else 2 if a[1] <= 2 else 3\n        dp[1][0] = 0 if a[0] <= 1 else 1\n        dp[2][0] = 0 if a[0] <= 1 else 2 if a[1] <= 2 else 3\n        dp[1][1] = 0 if a[1] <= 2 else 1 if a[0] <= 1 else 2\n        dp[2][1] = 0 if a[1] <= 2 else 1 if a[0] <= 1 else 2\n        dp[2][2] = 0 if a[1] <= 2 else 1 if a[0] <= 1 else 2\n        dp[2][3] = 0 if a[1] <= 2 else 1\n        for i in range(3, n):\n            dp[0][i] = 0\n            dp[1][i] = dp[0][i - 1] + dp[1][i - 2] + dp[2][i - 3]\n            dp[2][i] = dp[1][i - 1] + dp[2][i - 2]\n            dp[3][i] = dp[2][i - 1]\n        return max(dp[0][n - 1], dp[1][n - 1], dp[2][n - 1])\n\n    a = list(map(int, stdin.split()))\n    return str(solution_1(a))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # number of elements in the array\n    arr = list(map(int, stdin.split()))\n    # array of integers\n    arr = list(filter(lambda x: x >= 1 and x <= 10**3, arr))\n    if len(arr) == 0:\n        return \"0\"\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > 1:\n            return str(arr[i] - arr[i-1])\n    return \"0\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin\n    n = int(inputs.split()[0])\n    arr = list(map(int, inputs.split()[1]))\n\n    if n <= 2:\n        return 0\n\n    i = 0\n    while i < n - 2:\n        j = i + 1\n        while j < n - 1:\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            j += 1\n        i += 1\n    max_el = max(arr)\n    return max_el if max_el <= arr[0] else 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 1\n    a_min = min(a)\n    a_max = max(a)\n    for i in range(len(a)):\n        if i == 0 and a[i]!= a_min:\n            count += 1\n        if i == len(a) - 1 and a[i]!= a_max:\n            count += 1\n        if i > 0 and i < len(a) - 1:\n            if a[i - 1] < a[i] and a[i + 1] < a[i]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(range(n), key=lambda i: abs(a[i] - a[i-1])))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    n_max = 0\n    for a in arr:\n        if int(a) > 1000:\n            n_max = max(n_max, int(a) - 1000)\n    return str(n_max)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    print(a)\n    ans = 0\n    for i in range(n):\n        ans = i\n        while (a[i] - a[ans]) >= 2:\n            ans += 1\n    return str(ans + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    for i in range(len(a) - 1):\n        if a[i] + a[i + 1] <= n / 2:\n            return str(i + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s % 2 == 0:\n        return 0\n    s = s // 2\n    i = 1\n    sum_a = 0\n    for k in range(n):\n        sum_a += a[k]\n        if sum_a >= s:\n            i += 1\n            sum_a = 0\n    return str(i)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(solution_2(n, a))\n\ndef"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1\\n3 2 1\\n')\n    '2'\n    >>> solution('6\\n2 2 2 2 2 2\\n')\n    '3'\n    >>> solution('5\\n3 4 4 5 5 5\\n')\n    '4'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    count = 1\n    for i in range(1, n + 1):\n        if i == 1:\n            count += 1\n        elif count == i:\n            count = 1\n            ans += 1\n        else:\n            count += 1\n    return str(ans)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    n = inputs[0]\n    problems_solved = inputs[1:]\n    return str(sum(problems_solved[i] for i in range(1,n+1) if n - i <= (sum(problems_solved[j] for j in range(1, n + 1)) + sum(problems_solved[i] for i in range(1,n + 1))) // 2) + \" \" + str(n))"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + 2 * a[i - 1]\n        if dp[i - 1] >= 2:\n            break\n    return str(i)"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scheduled_problems = list(map(int, stdin.split()[1:]))\n    lowest_problem_idx = 1\n    highest_problem_idx = n\n    solved_problems_count = 0\n    for problem_idx in range(1, n+1):\n        if solved_problems_count == n//2:\n            break\n        if problem_idx in scheduled_problems:\n            solved_problems_count += 1\n            if solved_problems_count == n//2:\n                break\n        else:\n            solved_problems_count = 0\n    return f\"{lowest_problem_idx + 1} {highest_problem_idx + 1}\""
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = a.copy()\n    b.sort()\n    j = 1\n    i = 0\n    if b[-1] < n:\n        return str(j)\n    while j < n:\n        if b[j] >= 2 * b[i]:\n            j += 1\n        else:\n            i += 1\n    return str(i + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i, ai in enumerate(a):\n        if i > 2 and i + ai <= n:\n            return str(i + 1)\n    return str(n)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    board = [stdin.split() for _ in range(N)]\n    white_knight = [(i, j) for i in range(1, N) for j in range(i, N)]\n    white_bishop = [(i, j) for i in range(1, N) for j in range(i + 1, N)]\n    white_rook = [(i, j) for i in range(1, N) for j in range(i + 1, N)]\n\n    def in_range(i, j):\n        return i >= 1 and i <= N and j >= 1 and j <= N\n\n    def out_of_range(i, j):\n        return i < 1 or i > N or j < 1 or j > N\n\n    def knight_move_left(i, j):\n        if out_of_range(i, j):\n            return False\n        if i == 1 and j == 1:\n            return True\n        if board[i - 1][j - 1]!= 'B':\n            return False\n        return True\n\n    def knight_move_right(i, j):\n        if out_of_range(i, j):\n            return False\n        if i == 1 and j == N - 1:\n            return True\n        if board[i - 1][j + 1]!= 'B':\n            return False\n        return True\n\n    def knight_move_up(i, j):\n        if out_of_range(i, j):\n            return False\n        if i == N - 1 and j == 1:\n            return True\n        if board[i + 1][j - 1]!= 'B':\n            return False\n        return True\n\n    def knight_move_down(i, j):\n        if out_of_range(i, j):\n            return False\n        if i == N - 1 and j == N - 1:\n            return True\n        if board[i + 1][j + 1]!= 'B':\n            return False\n        return True\n\n    def rook_move_left(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        return True\n\n    def rook_move_right(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j + 1] == 'B':\n            return False\n        if board[i][j + 1] == 'N':\n            return True\n        return True\n\n    def rook_move_up(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i - 1][j] == 'B':\n            return False\n        if board[i - 1][j] == 'N':\n            return True\n        return True\n\n    def rook_move_down(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i + 1][j] == 'B':\n            return False\n        if board[i + 1][j] == 'N':\n            return True\n        return True\n\n    def bishop_move_right_up(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        if board[i][j + 1] == 'B':\n            return False\n        if board[i][j + 1] == 'N':\n            return True\n        return True\n\n    def bishop_move_left_up(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j + 1] == 'B':\n            return False\n        if board[i][j + 1] == 'N':\n            return True\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        return True\n\n    def bishop_move_down_left(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        if board[i][j + 1] == 'B':\n            return False\n        if board[i][j + 1] == 'N':\n            return True\n        return True\n\n    def bishop_move_up_left(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        if board[i][j + 1] == 'B':\n            return False\n        if board[i][j + 1] == 'N':\n            return True\n        return True\n\n    def bishop_move_up_right(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j + 1] == 'B':\n            return False\n        if board[i][j + 1] == 'N':\n            return True\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        return True\n\n    def bishop_move_down_right(i, j):\n        if out_of_range(i, j):\n            return False\n        if board[i][j - 1] == 'B':\n            return False\n        if board[i][j - 1] == 'N':\n            return True\n        if board[i][j +"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f'{min([len(step()) for step in solve(stdin)])} {len(solve(stdin))}'\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 2:\n        return '1 1'\n    \n    N2 = N**2\n    l = list(range(N2))\n    s = [[-1] * N2 for i in range(N)]\n    s[0][0] = 0\n    for i in range(N2):\n        if i == 0:\n            continue\n        if s[i-1][i-1]!= -1:\n            s[i][i] = s[i-1][i-1] + 1\n        else:\n            s[i][i] = 9999999999\n    for i in range(N):\n        for j in range(N):\n            if s[i][j]!= -1:\n                s[i][j] += 1\n                if i > 0:\n                    s[i][j] = min(s[i][j], s[i-1][j] + 1)\n                if j > 0:\n                    s[i][j] = min(s[i][j], s[i][j-1] + 1)\n                if i < N-1:\n                    s[i][j] = min(s[i][j], s[i+1][j] + 1)\n                if j < N-1:\n                    s[i][j] = min(s[i][j], s[i][j+1] + 1)\n    \n    return str(s[N-1][N-1]) +'' + str(s[N-1][N-2])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    solution_arr = [0, 0]\n    for i in range(n):\n        stdin = stdin + \"\\n\"\n        solution_arr.append(solution_arr[i] + int(stdin.split(\"\\n\")[i + 1][0]))\n        solution_arr.append(solution_arr[i + 1])\n    return str(solution_arr[-1]) + \"\\n\" + str(solution_arr[-2])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    positions = []\n    for i in range(N):\n        positions.append(stdin)\n\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if positions[i-1][j-1]!= i:\n                k = i\n                while k!= 1:\n                    if k == N:\n                        k = 1\n                    if positions[i-1][k-1] == i:\n                        positions[i-1][k-1] = j\n                        k += 1\n                    elif positions[i-1][k-1]!= j:\n                        positions[i-1][k-1] = j\n                        k += 1\n                    else:\n                        break\n\n    return str(min(positions[-1]) - 1) + \" \" + str(max(positions[-1]))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    board = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            board[i][j] = int(stdin)\n    A = {}\n    for i in range(N):\n        for j in range(N):\n            A[(i, j)] = 1\n\n    def dfs(x, y):\n        if (x, y) in A:\n            return 1\n\n        count = 0\n        if x-1 >= 0 and y-1 >= 0:\n            count += dfs(x-1, y-1)\n        if x-1 >= 0:\n            count += dfs(x-1, y)\n        if x-1 >= 0 and y+1 < N:\n            count += dfs(x-1, y+1)\n        if x+1 < N and y+1 < N:\n            count += dfs(x+1, y+1)\n        if x+1 < N:\n            count += dfs(x+1, y)\n        if x+1 < N and y-1 >= 0:\n            count += dfs(x+1, y-1)\n        return count\n\n    for i in range(N):\n        for j in range(N):\n            A[(i, j)] = dfs(i, j)\n    return str(min(A.values())) + \" \" + str(max(A.values()))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return f\"{min(len(solution_2(stdin))):02} {max(len(solution_2(stdin))):02}\"\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[int(x) for x in stdin.split()] for i in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    maxSteps = 0\n    best = (0, 0)\n    for row in range(n):\n        for col in range(n):\n            steps = 0\n            for d in directions:\n                if 0 <= row + d[0] < n and 0 <= col + d[1] < n:\n                    steps += 1\n            if steps > maxSteps:\n                maxSteps = steps\n                best = (row, col)\n    return str(maxSteps) + \" \" + str(maxSteps + 1)\n\n\n'''\n\n\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    board = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            board[i][j] = int(stdin[i + 1][j])\n    best = 0\n    best_ans = \"\"\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                for l in range(N):\n                    if i!= j and i!= k and i!= l:\n                        board_copy = copy.deepcopy(board)\n                        board_copy[i][j], board_copy[k][l] = board_copy[k][l], board_copy[i][j]\n                        if i!= j and i!= k:\n                            board_copy[i][j], board_copy[i][k] = board_copy[i][k], board_copy[i][j]\n                            if k!= l:\n                                board_copy[k][l], board_copy[i][j] = board_copy[i][j], board_copy[k][l]\n                            board_copy[k][l], board_copy[i][j] = board_copy[i][j], board_copy[k][l]\n                        steps = 0\n                        while board_copy[i][j]!= 0:\n                            steps += 1\n                            board_copy[i][j] = 0\n                            x = i\n                            y = j\n                            for k in range(3):\n                                if y == 0:\n                                    i = i + 1\n                                    y = N - 1\n                                else:\n                                    i = i - 1\n                                    y = y - 1\n                                if x == 0:\n                                    j = j + 1\n                                    x = N - 1\n                                else:\n                                    j = j - 1\n                                if board_copy[i][j]!= 0:\n                                    i = x\n                                    j = y\n                        if steps < best:\n                            best = steps\n                            best_ans = f\"{i} {j} {k} {l}\"\n    return f\"{best} {best_ans}\"\n\n\nsolution('''\n3\n1 9 3\n8 6 7\n4 2 5\n\n''')"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    n = int(s[0])\n    if n < 1:\n        return \"no\"\n    if n == 1:\n        return \"yes\"\n    for i in range(1,len(s)):\n        b = s[i]\n        b = b[2:]\n        c = ''\n        for j in b:\n            c += j\n        if int(c,2) % 64!= 0:\n            return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit():\n        raise ValueError\n    s = stdin\n    while len(s) > 1:\n        if int(s, 2) % 64!= 0:\n            return 'no'\n        s = str(bin(int(s, 2))[2:])\n    return 'yes'\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    #stdin = re.findall(r'\\b(?:0|1)\\b', stdin)\n    stdin = stdin[::-1]\n    stdin = stdin.replace('1', '')\n    if re.match(r'^0+$', stdin):\n        return 'no'\n    return 'yes'"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if (int(stdin[i])%64 == 0):\n            return 'yes'\n    return 'no'\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            s = s[i+1:]\n            break\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            s = s[i+1:]\n            break\n    return \"yes\" if len(s) == 0 else \"no\""
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    if (len(stdin) > 100) or (len(stdin) == 0):\n        return \"no\"\n    if (len(stdin) == 1) and (stdin == \"0\"):\n        return \"no\"\n    if (len(stdin) == 1) and (stdin == \"1\"):\n        return \"yes\"\n    if (len(stdin) == 2):\n        if (stdin == \"00\"):\n            return \"yes\"\n        if (stdin == \"01\"):\n            return \"yes\"\n        if (stdin == \"10\"):\n            return \"yes\"\n        if (stdin == \"11\"):\n            return \"no\"\n    else:\n        max_len = 2 ** (len(stdin) - 1)\n        i = 0\n        while i < max_len:\n            if (i % 2 == 0):\n                if (stdin[0] == \"0\"):\n                    if (len(stdin) > 1):\n                        if (len(stdin) == 2):\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                            if (stdin == \"01\"):\n                                return \"no\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"01\"):\n                                return \"yes\"\n                            if (stdin == \"10\"):\n                                return \"yes\"\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                        else:\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                            if (stdin == \"01\"):\n                                return \"no\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                else:\n                    if (len(stdin) > 1):\n                        if (len(stdin) == 2):\n                            if (stdin == \"00\"):\n                                return \"no\"\n                            if (stdin == \"01\"):\n                                return \"no\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"yes\"\n                            if (stdin == \"00\"):\n                                return \"no\"\n                        else:\n                            if (stdin == \"00\"):\n                                return \"no\"\n                            if (stdin == \"01\"):\n                                return \"yes\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"00\"):\n                                return \"yes\"\n            else:\n                if (stdin[0] == \"1\"):\n                    if (len(stdin) > 1):\n                        if (len(stdin) == 2):\n                            if (stdin == \"00\"):\n                                return \"no\"\n                            if (stdin == \"01\"):\n                                return \"yes\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"00\"):\n                                return \"no\"\n                        else:\n                            if (stdin == \"00\"):\n                                return \"no\"\n                            if (stdin == \"01\"):\n                                return \"yes\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"00\"):\n                                return \"no\"\n                else:\n                    if (len(stdin) > 1):\n                        if (len(stdin) == 2):\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                            if (stdin == \"01\"):\n                                return \"no\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                        else:\n                            if (stdin == \"00\"):\n                                return \"yes\"\n                            if (stdin == \"01\"):\n                                return \"no\"\n                            if (stdin == \"10\"):\n                                return \"no\"\n                            if (stdin == \"11\"):\n                                return \"no\"\n                            if (stdin == \"00\"):\n                                return \"yes\"\n            i += 1\n    return \"no\"\nprint(solution(input()))"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    # counting zeros (in given string)\n    n = n.replace(\"1\", \"\")\n    n = n.replace(\"0\", \"\")\n    print(n)\n    # in case n = 001, n = 1\n    if n == \"1\":\n        return \"yes\"\n    # in case n = 100, n = 10\n    elif n == \"0\":\n        return \"no\"\n    else:\n        return \"no\"\n\nprint(solution(input()))"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    binary_representation = ''.join(stdin.split())\n    #for representation in representations:\n    #    binary_representation_after_removing = remove_zeros(binary_representation)\n    #    if int(binary_representation_after_removing) % 64 == 0:\n    #        return \"yes\"\n    return \"no\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin, 2)\n    if num <= 0 or num > 64:\n        return 'no'\n    for i in range(num):\n        if num % 64!= 0:\n            return 'no'\n        num //= 64\n    return 'yes'"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n\n    for i in range(len(s)-1):\n        if ord(s[i]) > ord(s[i+1]):\n            return \"-\"\n    \n    return \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], stdin[0].lower()).replace(stdin[0].upper(), stdin[0].lower()).replace(stdin[0].upper(), stdin[0].lower())"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin\n    B = set(A)\n    C = set(A)\n\n    while True:\n        for i in B:\n            C.remove(i)\n        if C!= set():\n            return \"\".join(sorted(C))\n        else:\n            B = set(A)\n            C = set(A)"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)-1):\n        if s[i] > s[i+1]:\n            return '-1'\n    return s"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split()\n    data = list(stdin[0])\n    \n    for i in range(len(data)):\n        data[i] = data[i].lower()\n    data = sorted(data)\n    for i in range(len(data)):\n        data[i] = data[i].upper()\n    data = \"\".join(data)\n    \n    if data.find(\"a\")!= -1:\n        print(\"abcdefghijklmnopqrstuvwxyz\")\n    else:\n        print(\"-1\")"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    substr = 'abcdefghijklmnopqrstuvwxyz'\n    min_num = 1000000\n    min_letter = ''\n    curr_num = 0\n    curr_letter = ''\n    for i in range(len(s)):\n        if s[i] in substr:\n            if curr_letter == '':\n                curr_letter = s[i]\n            else:\n                if substr.index(curr_letter) > substr.index(s[i]):\n                    curr_num += 1\n                else:\n                    curr_num = 0\n                    curr_letter = s[i]\n            if curr_num < min_num:\n                min_num = curr_num\n                min_letter = curr_letter\n    if min_num == 1000000:\n        return '-1'\n    else:\n        return min_letter * min_num\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(s)\n    print(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            break\n    else:\n        print('no')\n    else:\n        print('no')\n        \nsolution(stdin)\n    \n    \ndef"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = 'aacceeggiikkmmooqqssuuwwyy'\n    # stdin = 'thereisnoanswer'\n    # stdin = 'asdvhbhbxj'\n    s = list(stdin)\n    letter = []\n    for i in s:\n        if i not in letter:\n            letter.append(i)\n    if len(letter) <= 26:\n        print(letter)\n    else:\n        print(\"-1\")\n    return\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for i in range(1, n):\n        for j in range(i, 0, -1):\n            s = stdin[:j]\n            if s == s[::-1]:\n                return s\n    return \"-1\"\n    "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    a = k // (n*m - r*r)\n    b = k // r\n    return f'{max(1,a,b)}'\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    x = n - r + 1\n    y = m - r + 1\n\n    res = 0\n\n    for i in range(x):\n        for j in range(y):\n            if (i + r - 1) <= n and (j + r - 1) <= m:\n                res += 1\n    return str(res / max(1, n * m))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = list(map(int, stdin.split()))\n    # build a grid\n    grid = [[0 for i in range(m)] for j in range(n)]\n    for i in range(k):\n        x, y = list(map(int, stdin.split()))\n        grid[x - 1][y - 1] = 1\n    # build a matrix\n    matrix = [[0 for i in range(n)] for j in range(m)]\n    # count the number of fishes\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = matrix[i][j] + grid[i][j]\n\n    # build a dictionary with cells\n    d = {}\n    for i in range(n):\n        for j in range(m):\n            d[(i, j)] = matrix[i][j]\n\n    # build a queue\n    queue = []\n    # put the cell to the queue\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                queue.append((i, j))\n\n    # put the cell to the queue\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                queue.append((i, j))\n    # put the cell to the queue\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                queue.append((i, j))\n\n    # build a visited matrix\n    visited = [[0 for i in range(m)] for j in range(n)]\n\n    # while the queue is not empty\n    while queue:\n        # put the cell to the visited\n        visited[queue[0][0]][queue[0][1]] = 1\n\n        # pop the cell from the queue\n        x, y = queue.pop(0)\n        # check the neighbors\n        if x - 1 >= 0 and visited[x - 1][y] == 0 and d[(x - 1, y)] > 0:\n            # if the neighbor is not visited, put the neighbor to the queue\n            queue.append((x - 1, y))\n            # increase the d[(x-1, y)] by 1\n            d[(x - 1, y)] = d[(x - 1, y)] + 1\n        if y - 1 >= 0 and visited[x][y - 1] == 0 and d[(x, y - 1)] > 0:\n            # if the neighbor is not visited, put the neighbor to the queue\n            queue.append((x, y - 1))\n            # increase the d[(x, y-1)] by 1\n            d[(x, y - 1)] = d[(x, y - 1)] + 1\n        if x + 1 < n and visited[x + 1][y] == 0 and d[(x + 1, y)] > 0:\n            # if the neighbor is not visited, put the neighbor to the queue\n            queue.append((x + 1, y))\n            # increase the d[(x+1, y)] by 1\n            d[(x + 1, y)] = d[(x + 1, y)] + 1\n        if y + 1 < m and visited[x][y + 1] == 0 and d[(x, y + 1)] > 0:\n            # if the neighbor is not visited, put the neighbor to the queue\n            queue.append((x, y + 1))\n            # increase the d[(x, y+1)] by 1\n            d[(x, y + 1)] = d[(x, y + 1)] + 1\n    # print the number of fishes inside\n    print(d[(0, 0)])\n    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '%0.9f' % (float(sum([x[0] for x in [[int(x) for x in stdin.split()] for _ in range(4)]])) / float(max([int(stdin.split()[0]) * int(stdin.split()[1]), int(stdin.split()[2]) * int(stdin.split()[3])])))\n\nstdin = input()\nprint('%.9f' % solution(stdin))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, r, k] = stdin.split()\n    n, m, r, k = int(n), int(m), int(r), int(k)\n    array = [[None] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i <= r and j <= r:\n                array[i][j] = 0\n            else:\n                array[i][j] = float('inf')\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1 and j == 1:\n                array[i][j] = 0\n            else:\n                array[i][j] = float('inf')\n            if i == 1 or j == 1:\n                continue\n            else:\n                array[i][j] = array[i - 1][j - 1] + array[i - 1][j] + array[i][j - 1] - array[i - 1][j - 1]\n\n    maximum = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i <= r and j <= r:\n                continue\n            else:\n                maximum = max(maximum, array[i][j])\n    print(maximum)\n    return maximum\n\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def neighbors(x, y):\n        if (x < 0 or x >= n or y < 0 or y >= m):\n            return set()\n        return {(x, y) + i for i in ((-1, 0), (0, -1), (0, 1), (1, 0))}\n\n    k, n, m, r = map(int, stdin.split())\n    cells = set()\n    fishes = set()\n    for i in range(k):\n        x, y, s = map(int, stdin.split())\n        cells.add((x, y))\n        fishes |= {(x + i, y + i) for i in range(s)}\n\n    # placing the water-shoal\n    water = set()\n    x, y = cells.pop()\n    water.add((x, y))\n    for i in range(r):\n        x, y = x + (i + 1) // 2, y + (i + 1) // 2\n        water.add((x, y))\n\n    # placing the fishing-net\n    fishing_net = set()\n    fish_tally = 0\n    for x, y in cells:\n        fish_tally += len(fishes & neighbors(x, y))\n        fishing_net.add((x, y))\n\n    # fishing\n    fishing_basket = {(x, y) for x, y in cells}\n    for x, y in fishing_net:\n        fishing_basket.remove((x, y))\n        for i in range(1, r + 1):\n            for j in range(1, r + 1):\n                x, y = x + i, y + j\n                fishing_basket.add((x, y))\n                fish_tally += len(fishes & neighbors(x, y))\n\n    # finding expected value\n    return abs(fish_tally / fishing_basket.pop() - fish_tally / fishing_net.pop())\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, r, k] = list(map(int, stdin.split()))\n    return \"{:.9f}\".format(\n        (r ** 2) / ((n - r + 1) * (m - r + 1)) * (\n            (k * (k - 1)) / (n * m)\n        )\n    )"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    return str(math.ceil((n - r + 1) * (m - r + 1) * k / (n * m)))\n\nprint(solution(input()))\n\n\"\"\"\n\nn, m, r, k = map(int, input().split())\n\nmoves = []"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    x = (n - r + 1) * (m - r + 1)\n    a = 0\n    b = float('inf')\n    for i in range(1, x + 1):\n        a += 1\n        if a > k:\n            break\n        for j in range(1, x + 1):\n            b = max(b, 1 + min(a, k) // (j + 1))\n    return str(b)\n\nTest.assert_equals(solution(\n    \"3 3 2 3\"),\n    \"2.0000000000\")\nTest.assert_equals(solution(\n    \"12 17 9 40\"),\n    \"32.8333333333\")"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = (int(x) for x in stdin.split())\n    return f\"{max(1, k // (m - r + 1) if (k // (m - r + 1) > 0) else 0)}.\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    result = 0\n    if(len(a) == 0):\n        print(0)\n        return 0\n    if(len(a) == 1):\n        return result\n    if(len(a) == 2):\n        result = a[0] * a[1]\n        return result\n    for i in range(1, len(a)):\n        for j in range(0, i):\n            if(a[j]!= 0 and (a[i]%a[j])!= 0):\n                a[i] = 0\n                break\n        if(a[i]!= 0):\n            result = max(result, a[i])\n    for i in range(len(a)):\n        if(a[i]!= 0):\n            print(result)\n            return 0\n    print(result)\n    return 0\n\nsolution(\"2 2 2 2\")\nsolution(\"0\")\nsolution(\"3 -3 2\")\nsolution(\"2 0 1\")\nsolution(\"10 2 0\")\nsolution(\"3 0 2 0 0\")\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    array = list(reversed(array))\n\n    result = -1\n    for i in range(n):\n        tmp = 1\n        for j in range(i + 1, n):\n            tmp *= array[j]\n            if tmp > result:\n                result = tmp\n\n        tmp = 1\n        for j in range(i):\n            tmp *= array[j]\n            if tmp > result:\n                result = tmp\n\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = [int(i) for i in stdin.split()]\n    arr.sort(reverse=True)\n    prod = 1\n    for a in arr:\n        prod *= a\n    return str(prod)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(i) for i in stdin.split()]\n    array = [-element for element in array]\n    max_product = -float('inf')\n    for i in range(len(array)):\n        array[i] = array[i] -1\n    array.sort()\n    #print(array)\n    max_product = max(array)\n    if max_product <= 0:\n        print(0)\n    else:\n        print(max_product)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    max_prod = -float(\"inf\")\n    answer = \"\"\n    for i in range(n):\n        curr_prod = 1\n        for j in range(i, n):\n            curr_prod *= arr[j]\n            if curr_prod > max_prod:\n                answer = str(arr[i]) + \" \" + str(arr[j])\n                max_prod = curr_prod\n    return answer"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    def prod(arr):\n        prod = 1\n        for x in arr:\n            prod *= x\n        return prod\n    def find(arr, i, j, a, x):\n        if j == i+1:\n            return x\n        mid = (i+j)//2\n        if x == 0:\n            return 0\n        if arr[mid] == x:\n            return arr[mid]\n        if arr[mid] < x:\n            return find(arr, mid, j, a, x)\n        else:\n            return find(arr, i, mid, a, x)\n    a.sort()\n    prod_a = prod(a)\n    best = 0\n    for i in range(len(a)):\n        x = find(a, 0, len(a)-1, a, -1*a[i])\n        if x > 0:\n            prod_x = prod_a * x\n            if prod_x > best:\n                best = prod_x\n    return best\n\nsolution(input())\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    print(a[-1] * a[-2] * a[-3], end=\"\")\n\n\ndef"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_product = -1\n    for i in range(1, n):\n        cur_product = 1\n        for j in range(0, i):\n            cur_product *= arr[j]\n        if cur_product > max_product:\n            max_product = cur_product\n    return str(max_product)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    max_prod = 1\n    for i in range(1, len(lst)):\n        lst[i] = lst[i] * (lst[i - 1] + lst[i])\n    for i in range(1, len(lst)):\n        curr_prod = lst[i] * (lst[i - 1] + lst[i])\n        max_prod = max(max_prod, curr_prod)\n    return str(max_prod)\n\nsolution('4')"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    try:\n        n, k = map(int, stdin.split())\n    except ValueError:\n        return -1\n    if k < 1 or k > 10**9:\n        return -1\n    if n < 2:\n        return 1\n    \n    for i in range(2,n+1):\n        if n % i == 0:\n            if i <= k:\n                return i\n    \n    return -1"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < k:\n        return -1\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    divs.sort()\n    if k == 1:\n        return divs[-1]\n    for i in range(k-1):\n        divs.remove(divs[-1])\n    return divs[0]"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n, k = int(inputs[0]), int(inputs[1])\n    divisors = {1}\n    for i in range(2, (n + 1) // 2 + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    if len(divisors) < k:\n        return -1\n    return divisors[k - 1]"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            k -= 1\n        if k == 0:\n            return i\n    return -1"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    l = sorted([i for i in range(1, n + 1) if n % i == 0])\n    if len(l) < k:\n        return -1\n    return l[k - 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # n = a\n    # k = b\n    # a is divisor\n    # b is divisor that gives a\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) < k:\n        return -1\n    return divisors[k - 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return -1\n    lst = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            lst.extend([i, n//i])\n    lst.sort()\n    return lst[k-1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return -1\n    factors = {}\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i not in factors:\n                factors[i] = 0\n            factors[i] += 1\n    for i in range(1, n+1):\n        if i not in factors:\n            return -1\n    for i in range(2, n+1):\n        if i not in factors:\n            return i\n    return -1"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    def n_divisors(n):\n        return len(set([i for i in range(1, n) if n % i == 0]))\n    \n    def find_kth_smallest(n, k):\n        k -= 1\n        \n        if k == 0:\n            return n\n        \n        return find_kth_smallest(n, k) if n_divisors(n) > k else -1\n    \n    return str(find_kth_smallest(n, k))\n\nprint(solution(input()))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def digit_of(n: int) -> int:\n        a = 1\n        while n > 0:\n            a *= 10\n            n //= 10\n        return a\n    n, k = map(int, stdin.split())\n    divisor = 1\n    count = 0\n    while divisor <= n:\n        count += 1\n        if count == k:\n            break\n        divisor *= 10\n    if count < k:\n        return -1\n    for i in range(1, n+1):\n        if n % i == 0:\n            if n / i == i:\n                if n // i == i:\n                    return i\n                else:\n                    return i * digit_of(n // i)\n            else:\n                return i * digit_of(n // i)\n        else:\n            divisor *= 10\n    return -1\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_ = 0\n    s = set()\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            s.add(i)\n            s.add(j)\n            s.add(int(str(i) + str(j)))\n            s.add(int(str(j) + str(i)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i)))\n            s.add(int(str(i)+str(j)))\n            s.add(int(str(j)+str(i"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(max(int(s) for s in stdin.split()))\n\nsolution(input())\n'''\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = sys.stdin.read()\n    n = int(stdin.split()[0])\n    cubes = [[int(i) for i in stdin.split()[1:]] for _ in range(n)]\n    rotations = [[] for _ in range(9)]\n    count = 0\n    for i in range(6):\n        for j in range(n):\n            count += 1\n            for k in range(6):\n                rotations[i].append(cubes[j][k])\n        for j in range(n):\n            rotations[i].sort(reverse=True)\n            if rotations[i][0] < 2:\n                continue\n            if count <= 1:\n                count = 0\n                continue\n            for k in range(n):\n                count -= 1\n                rotations[i].pop(0)\n    return str(max(rotations[0][:], key=lambda x: (x, rotations.count(x))[rotations.count(x) == 1]))"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.split()\n    if n == 1:\n        return \"0\"\n\n    if n == 2:\n        res = sorted([int(i) for i in s])[-1]\n        if res <= 0:\n            return \"0\"\n        return str(res)\n    res = \"\"\n    for i in range(n):\n        tmp = []\n        for j in range(n):\n            tmp.append(s[i * n + j])\n        tmp = sorted(tmp)\n        tmp = \"\".join(tmp)\n        tmp = int(tmp)\n        if len(str(tmp)) > len(str(res)):\n            res = str(tmp)\n    return res\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cube = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # calculate all max numbers\n    max_x = 0\n    for _ in range(2):\n        max_x = max(max_x, max_x_in_cube(cube))\n        cube = rotate_cube(cube)\n\n    return str(max_x)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        cube = stdin.split()\n        cube = list(map(int, cube))\n        #print(cube)\n        new_cube = []\n        for i in range(6):\n            new_cube.append([])\n            for j in range(5, -1, -1):\n                new_cube[i].append(cube[i] * cube[j])\n        #print(new_cube)\n        new_cube.reverse()\n        #print(new_cube)\n        result = []\n        for i in range(5):\n            result.append(sum(new_cube[i]))\n        #print(result)\n        max_result = max(result)\n        print(max_result)\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cubes = stdin.split()[1:]\n    cubes = [list(map(int, c)) for c in cubes]\n    max_x = 0\n    for i in range(1, max(map(len, cubes)) + 1):\n        max_x = i\n        for j in range(len(cubes[0])):\n            row_cubes = cubes.copy()\n            row_cubes.pop(j)\n            row = [row_cubes[k][j] for k in range(len(row_cubes))]\n            row.sort(reverse=True)\n            row = \"\".join(map(str, row))\n            row = int(row)\n            if row <= max_x and row > max_x:\n                max_x = row\n    return str(max_x)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n    cubes = [list(map(int, stdin.splitlines()[i+2])) for i in range(n)]\n    cubes.sort()\n    max_x = 0\n    for i in range(1, n+1):\n        x = cubes[i-1][0]\n        for j in range(1, i):\n            if cubes[i-1][j]!= cubes[i-1][j-1]:\n                x = x*10 + cubes[i-1][j]\n        if x > max_x:\n            max_x = x\n    return str(max_x)\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cube_nums = []\n    for i in range(6):\n        cube_nums.append(list(map(int, stdin.split())))\n    cube_nums = list(zip(*cube_nums))\n    max_x = 0\n    for num in range(1, 10):\n        for i in range(6):\n            cube_nums[i][0] = num\n            if all(cube_nums[i]):\n                max_x = max(max_x, num)\n    return str(max_x)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cubes = list(map(int, stdin.split()[1:]))\n    cubes = sorted(cubes)\n\n    def rotate(cube):\n        return list(map(int, ''.join(cube[-1:] + cube[:-1])))\n\n    def get_digits(cube):\n        for i in range(len(cube)):\n            for j in range(len(cube)):\n                if cube[i] == cube[j]:\n                    cube[i] = 9\n                    cube[j] = 9\n                    if i == len(cube)-1:\n                        cube.append(0)\n                    if j == 0:\n                        cube.insert(0, 0)\n                    return\n\n    def build_number(cube):\n        cubes = rotate(cube)\n        for i in range(len(cube)):\n            if cube[i] == 9:\n                cube[i] = 0\n                cubes = rotate(cube)\n                cube = cubes\n                cube.insert(0, 0)\n                cube.append(0)\n                for j in range(len(cube)):\n                    if cube[j] == 9:\n                        cube[j] = 0\n                return\n        get_digits(cube)\n        return cube\n\n    cube = []\n    for i in range(n):\n        cube = build_number(cube)\n    return ''.join(str(e) for e in cube)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n*(10**k) % int(str(n)[::-1]))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    for i in range(k):\n        if i < k - 1:\n            n = n // 10\n        else:\n            n = n // 10\n    print(n)\n    return\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > 0:\n        if n % k == 0:\n            print(n * k)\n        else:\n            print(n * k + k - n % k)\n    else:\n        print(n // k + k - n % k)"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while not n % 10:\n        n //= 10\n    while k >= 0:\n        if n % 10!= 0:\n            n *= 10\n            k -= 1\n        else:\n            break\n    while n!= 1:\n        n //= 10\n    print(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (10**k))\n\nprint(solution(input()))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = str(n)\n    res = []\n    while n:\n        count = n.count('0')\n        if count >= k:\n            res.append(n)\n            break\n        res.append(n)\n        n = n.replace('0', '')\n    if not res:\n        return -1\n    return ''.join(res)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_k = n * k\n    print(f\"{n_k} {n_k % n}\")\n\n\ndef"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = '0' * k\n    while n:\n        ans = '1' + ans\n        n -= 1\n    return ans\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cnt = 0\n    while True:\n        if (n // 10**cnt) % 10 == k or (n // 10**cnt) % 10 > k:\n            break\n        cnt += 1\n    return str(n * 10**cnt)"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.strip().split('\\n')\n    stdin = [[int(x) for x in line.split()] for line in stdin]\n    n, m = stdin[0]\n    A = stdin[1:]\n\n    # Finding the minimum number of operations required to make matrix A equal to matrix B\n    def min_operations(matrix):\n        # Initialize answer and stack\n        # answer = [1]*(m*n)\n        # stack = [(0,0)]\n        # # while stack not empty:\n        # #     (x,y) = stack.pop()\n        # #     answer[x*n+y] = 0\n        # #     if x - 1 >= 0:\n        # #         stack.append((x-1,y))\n        # #     if x + 1 < n:\n        # #         stack.append((x+1,y))\n        # #     if y - 1 >= 0:\n        # #         stack.append((x,y-1))\n        # #     if y + 1 < m:\n        # #         stack.append((x,y+1))\n        # # return answer\n        #\n        # # Initialize answer and stack\n        # answer = [1]*(m*n)\n        # stack = [(0,0)]\n        # while stack:\n        #     (x,y) = stack.pop()\n        #     if x - 1 >= 0:\n        #         if answer[x*n+y] == 0:\n        #             answer[x*n+y] = 1\n        #             stack.append((x-1,y))\n        #     if x + 1 < n:\n        #         if answer[x*n+y] == 0:\n        #             answer[x*n+y] = 1\n        #             stack.append((x+1,y))\n        #     if y - 1 >= 0:\n        #         if answer[x*n+y] == 0:\n        #             answer[x*n+y] = 1\n        #             stack.append((x,y-1))\n        #     if y + 1 < m:\n        #         if answer[x*n+y] == 0:\n        #             answer[x*n+y] = 1\n        #             stack.append((x,y+1))\n        # return answer\n        answer = [1]*(m*n)\n\n        for i in range(1,n*m):\n            if answer[i] == 0:\n                stack = []\n                while stack and answer[stack[-1]] == 0:\n                    stack.pop()\n                if stack:\n                    while stack and answer[stack[-1]] == 1:\n                        stack.pop()\n                    answer[stack[-1]] = 0\n\n                stack.append(i)\n                while stack:\n                    answer[stack.pop()] = 0\n        return \"\".join(map(str, answer))\n\n    # print(min_operations(A))\n    # print(min_operations(B))\n    return min_operations(A)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    k = 0\n    while True:\n        cnt = 0\n        for i in range(n):\n            for j in range(m):\n                if A[i][j] == 1:\n                    if i > 0 and j > 0:\n                        A[i][j], A[i - 1][j], A[i][j - 1], A[i - 1][j - 1] = 1, 1, 1, 1\n                        cnt += 1\n                    else:\n                        A[i][j], A[i - 1][j], A[i][j - 1] = 1, 1, 1\n                        cnt += 1\n        if cnt == 0:\n            return str(k)\n        k += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(x) for x in stdin.split()[j * m:(j + 1) * m]] for j in range(n)]\n    B = [[0] * m for _ in range(n)]\n    for j in range(m):\n        B[0][j] = A[0][j]\n    for i in range(1, n):\n        for j in range(m):\n            if j % 2:\n                B[i][j] = A[i][j]\n            else:\n                B[i][j] = A[i][j] if A[i][j] == 0 else 1\n    for i in range(n):\n        for j in range(m):\n            A[i][j] = B[i][j]\n    return ''.join('{} '.format(x) for x in A)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = map(int, stdin[0].split())\n    A = [[int(i) for i in stdin[j].split()] for j in range(1, len(stdin))]\n    B = [[1] * 2 for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            B[i][j] = A[i][j]\n    for _ in range(len(stdin) - 1):\n        B = move_up(B)\n    ans = []\n    for i in range(n):\n        ans.append([])\n        for j in range(m):\n            ans[i].append(B[i][j])\n    print(\"\\n\".join(map(str, ans)))\n    return \"\".join(map(str, ans))\n\ndef"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n!= m:\n        return -1\n    A = []\n    B = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()[_]))\n        if max(row) == 0:\n            return -1\n        A.append(row)\n        B.append([0] * m)\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                B[i][_] = 1\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        B[i][j] = 1\n                        B[j][i] = 1\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        B[i][j] = 1\n                        B[j][i] = 1\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                B[i][j] = 1\n                                B[j][i] = 1\n                                B[i][k] = 1\n                                B[k][i] = 1\n                                break\n                        break\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                for l in range(i, k):\n                                    if A[_][l] == 0:\n                                        B[i][j] = 1\n                                        B[j][i] = 1\n                                        B[i][l] = 1\n                                        B[l][i] = 1\n                                        break\n                                break\n                        break\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                for l in range(i, k):\n                                    if A[_][l] == 0:\n                                        B[i][j] = 1\n                                        B[j][i] = 1\n                                        B[i][l] = 1\n                                        B[l][i] = 1\n                                        break\n                                break\n                        break\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                for l in range(i, k):\n                                    if A[_][l] == 0:\n                                        B[i][j] = 1\n                                        B[j][i] = 1\n                                        B[i][l] = 1\n                                        B[l][i] = 1\n                                        break\n                                break\n                        break\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                for l in range(i, k):\n                                    if A[_][l] == 0:\n                                        B[i][j] = 1\n                                        B[j][i] = 1\n                                        B[i][l] = 1\n                                        B[l][i] = 1\n                                        break\n                                break\n                        break\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                for l in range(i, k):\n                                    if A[_][l] == 0:\n                                        B[i][j] = 1\n                                        B[j][i] = 1\n                                        B[i][l] = 1\n                                        B[l][i] = 1\n                                        break\n                                break\n                        break\n    for _ in range(n):\n        for i in range(m):\n            if A[_][i] == 0:\n                for j in range(i+1, m):\n                    if A[_][j] == 0:\n                        for k in range(i, j):\n                            if A[_][k] == 0:\n                                for l in range(i, k):\n                                    if A[_][l] == 0:\n                                        for m in range(i, j):\n                                            if A[_]["
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = sys.stdin.read()\n    n, m = map(int, stdin.split())\n    A = [[int(i) for i in input().split()] for _ in range(n)]\n    B = [[int(i) for i in input().split()] for _ in range(n)]\n    x, y = 0, 0\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= 0 and B[i][j]!= 1:\n                x, y = i, j\n                break\n        if x!= 0:\n            break\n    if x == 0:\n        print(-1)\n    else:\n        y += 1\n        while y < m:\n            B[x][y] = 1\n            y += 1\n        for i in range(y - 1):\n            B[x][i] = 1\n        y -= 1\n        while x < n:\n            B[x][y] = 1\n            x += 1\n        y -= 1\n        while y >= 0:\n            B[x][y] = 1\n            y -= 1\n        while x >= 0:\n            B[x][y] = 1\n            x -= 1\n    return x, y\n\nprint(solution(stdin))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = map(int, stdin.strip().split())\n\n    return str(recursion(n, m))\n\n\ndef"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                for i1 in range(i, n):\n                    for j1 in range(j, m):\n                        if matrix[i1][j1] == 1:\n                            matrix[i][j] = 0\n                            matrix[i1][j1] = 1\n                            break\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                return -1\n    return''.join(map(str, [[matrix[i][j] for j in range(m)] for i in range(n)]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, input().split())\n    n, m = 3, 3\n    a = stdin.split()\n    a = list(map(int, a))\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                b[i][j] = 1\n    k = 1\n    while True:\n        if not b == a:\n            b = [[0] * m for _ in range(n)]\n            for i in range(n):\n                for j in range(m):\n                    if a[i][j] == 1:\n                        b[i][j] = 1\n        else:\n            return str(k)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    B = [[0] * M for _ in range(N)]\n    for x in range(N):\n        for y in range(M):\n            B[x][y] = A[x][y]\n    ops = 0\n    while True:\n        ops += 1\n        if ops > 2500:\n            print('-1')\n            return\n        else:\n            continue\n        for x in range(1, N - 1):\n            for y in range(1, M - 1):\n                if A[x][y] == 1:\n                    if A[x - 1][y] == 0 or A[x + 1][y] == 0 or A[x][y - 1] == 0 or A[x][y + 1] == 0:\n                        continue\n                    else:\n                        if A[x - 1][y] == 1 and A[x + 1][y] == 1 and A[x][y - 1] == 1 and A[x][y + 1] == 1:\n                            B[x][y] = 1\n        for x in range(N):\n            for y in range(M):\n                A[x][y] = B[x][y]\n        if all([i == 0 for i in B]):\n            break\n    for i in range(len(B)):\n        print(''.join(list(map(str, B[i]))))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        stdin[i] = float(stdin[i])\n    \n    probs = [0.333333333333, 0.333333333333, 0.333333333333]\n    \n    for i in range(len(stdin)):\n        if (stdin[i] == 1):\n            probs[0] = probs[0] - probs[2]\n        elif (stdin[i] == 2):\n            probs[1] = probs[1] - probs[2]\n        elif (stdin[i] == 3):\n            probs[2] = probs[2] - probs[1]\n            \n    for i in range(len(probs)):\n        probs[i] = probs[i] / sum(probs)\n    \n    return \" \".join(map(lambda x: \"{:.9f}\".format(x), probs))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    p_rock = s / (r + s)\n    p_scissors = s / (r + s) + p / (r + s)\n    p_papers = p / (r + s) + s / (r + s) + s / (r + s)\n    return '{:.9f} {:.9f} {:.9f}'.format(p_rock, p_scissors, p_papers)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = (int(i) for i in stdin.split())\n    return \" \".join(map(lambda x: f'{x:.9f}', [p / (s + r + p), r / (s + r + p), p / (s + r + p)]))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rock_probability = round(n / 6, 9)\n    scissors_probability = round(1 - rock_probability, 9)\n    paper_probability = round(1 - scissors_probability, 9)\n    print(rock_probability)\n    print(scissors_probability)\n    print(paper_probability)\n    return stdin\n\nsolution()\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    if r == s == p:\n        return f\"{0.5:.9f} {0.5:.9f} {0.5:.9f}\"\n    else:\n        p1, p2 = s/r, p/s\n        p3 = (1-s)/(1-r)\n        return f\"{p1:.9f} {p2:.9f} {p3:.9f}\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(lambda x: f'{x}', prob))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R, S, P = map(int, stdin.split())\n    return '{:.10f} {:.10f} {:.10f}'.format(\n        (1 - R / P) ** S,\n        (1 - S / P) ** R,\n        (1 - P / R) ** S,\n    )\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    s_list = [0, 0, 0]\n    p_list = [0, 0, 0]\n    rock_list = [0, 0, 0]\n    scissor_list = [0, 0, 0]\n    paper_list = [0, 0, 0]\n    for i in range(r):\n        if (i < s):\n            rock_list[i] = rock_list[i - 1]\n            scissor_list[i] = scissor_list[i - 1]\n            paper_list[i] = paper_list[i - 1]\n            if (i < p):\n                s_list[i] = s_list[i - 1]\n                p_list[i] = p_list[i - 1]\n            else:\n                s_list[i] = s_list[i - 1] + 1\n                p_list[i] = p_list[i - 1]\n        elif (i < s + p):\n            rock_list[i] = rock_list[i - 1]\n            scissor_list[i] = scissor_list[i - 1]\n            paper_list[i] = paper_list[i - 1]\n            if (i < 2 * p):\n                s_list[i] = s_list[i - 1] + 1\n                p_list[i] = p_list[i - 1] + 1\n            else:\n                s_list[i] = s_list[i - 1] + 1\n                p_list[i] = p_list[i - 1] + 1\n        else:\n            rock_list[i] = rock_list[i - 1]\n            scissor_list[i] = scissor_list[i - 1]\n            paper_list[i] = paper_list[i - 1]\n            if (i < 3 * p):\n                s_list[i] = s_list[i - 1] + 1\n                p_list[i] = p_list[i - 1] + 1\n            else:\n                s_list[i] = s_list[i - 1] + 1\n                p_list[i] = p_list[i - 1] + 1\n    return '{0:.9f} {1:.9f} {2:.9f}'.format(s_list[0]/r, s_list[1]/r, s_list[2]/r)"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return''.join(map(str, map(math.prod, zip(data[::2], data[1::2]))))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    s = int(stdin)\n    p = int(stdin)\n    x,y = 0,0\n    \n    def calc(p):\n        \n        if p == 0:\n            return 0\n        return (2*(x+y))/p\n    \n    \n    x = calc(r)\n    y = calc(s)\n    \n    return \"{:.9f} {:.9f} {:.9f}\".format(x,y,y-x)"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read in the number of test cases\n    n = int(stdin.readline().strip())\n\n    # Loop through each test case\n    for i in range(n):\n        # Get the l_1, r_1, l_2, r_2 and k\n        l_1, r_1, l_2, r_2, k = list(map(int, stdin.readline().split()))\n        if (l_1 <= k <= r_1 and k <= r_2 or r_2 <= k <= l_2) and k!= r_2:\n            # Find the amount of minutes they are going to spend together\n            minutes_to_sleep = (r_1 - k) - (k - l_1)\n            # Return the number of minutes they are going to spend together\n            return minutes_to_sleep\n        else:\n            return -1"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    l1, r1, l2, r2, k = int(lines[0].split()[0]), int(lines[0].split()[1]), int(lines[1].split()[0]), int(lines[1].split()[1]), int(lines[2].split()[0])\n    if l1 > r2:\n        l1, r1, l2, r2 = r2, l2, l1, r1\n    if k > r1:\n        k = r1\n    if k > r2:\n        k = r2\n    if k > l1:\n        k = l1\n    return (k - l1 + 1) // 2 + (k - r2 + 1) // 2\n\nsolution(\"\"\"1 10 9 20 1\n\"\"\")\n\nsolution(\"\"\"1 100 50 200 75\n\"\"\")\n\nsolution(\"\"\"1 100 50 200 75\n\"\"\")\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    ans = (r_2-l_1)-(r_2-l_2)\n    ans += k-1 if k > 1 else 0\n    return str(ans)\n\nstdin = '1 10 9 20 1'\nprint(solution(stdin))\n\nstdin = '1 100 50 200 75'\nprint(solution(stdin))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    l_1, r_1, l_2, r_2, k = stdin[0], stdin[1], stdin[2], stdin[3], stdin[4]\n    print(math.ceil((r_1 - l_1) / (r_2 - l_2)))\n    return\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return l_1 + (r_1 - l_1)"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    lines = stdin.splitlines()\n    data = lines[0].split()\n    l_1 = int(data[0])\n    r_1 = int(data[1])\n    l_2 = int(data[2])\n    r_2 = int(data[3])\n    k = int(data[4])\n    if k < l_1 or k > r_2:\n        sys.exit(\"k can't be less than l_1 or greater than r_2\")\n    if l_1 > r_2:\n        sys.exit(\"l_1 can't be greater than r_2\")\n    if k <= l_1:\n        sys.exit(\"k can't be less than l_1\")\n    if l_2 > r_1:\n        sys.exit(\"l_2 can't be greater than r_1\")\n    return (r_2 - l_1) + (r_2 - l_1)\n\nsolution(input())\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, l_1, r_1, l_2, r_2, k = stdin.split()\n    l_1, r_1, l_2, r_2, k = int(l_1), int(r_1), int(l_2), int(r_2), int(k)\n    return str(min(int((int(r_1) - int(l_1))/2) - k, int((int(r_2) - int(l_2))/2)))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    if l_1 == k:\n        print(r_2 - l_2)\n    elif k == r_2:\n        print(r_1 - l_1)\n    else:\n        diff = r_2 - l_2\n        diff_len = abs(r_1 - l_1)\n        if diff_len % 2 == 0:\n            print(diff_len // 2)\n        else:\n            print(diff_len // 2 + 1)\nsolution(input())\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    if l_1 == r_1:\n        return (r_2-l_2)\n    if l_2 == r_2:\n        return (r_1-l_1)\n    if l_1 <= r_1 and l_2 <= r_2:\n        return (r_1-l_1)\n    if l_2 <= r_2 and l_1 <= r_1:\n        return (r_2-l_2)\n    return (r_1-l_1) * (r_2-l_2) // 2\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix = [[int(i) for i in stdin.strip().split()] for _ in range(n)]\n\n    cross_cnt = 0\n    for row in range(1, n):\n        for col in range(1, m):\n            if matrix[row][0] < matrix[row - 1][0] and matrix[0][col] < matrix[0][col - 1]:\n                cross_cnt += 1\n            if matrix[row][m - 1] < matrix[row - 1][m - 1] and matrix[0][col] < matrix[0][col - 1]:\n                cross_cnt += 1\n            if matrix[0][col] < matrix[0][col - 1] and matrix[row][0] < matrix[row - 1][0]:\n                cross_cnt += 1\n            if matrix[0][col] < matrix[0][col - 1] and matrix[row][m - 1] < matrix[row - 1][m - 1]:\n                cross_cnt += 1\n\n    return cross_cnt if cross_cnt!= 0 else 'inf'"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    A = [(int(i) - 1, int(j) - 1) for i, j in\n         [input().split() for _ in range(n)]]\n    B = [(int(i) - 1, int(j) - 1) for i, j in\n         [input().split() for _ in range(m)]]\n\n    for i in range(n):\n        if A[i][0] == 0 or A[i][1] == 0:\n            return 'Infinite'\n        if i!= 0 and A[i - 1][1] < A[i][0]:\n            return 'Infinite'\n\n    for j in range(m):\n        if B[j][0] == 0 or B[j][1] == 0:\n            return 'Infinite'\n        if j!= 0 and B[j - 1][1] < B[j][0]:\n            return 'Infinite'\n\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += (min(A[i][0], B[j][0]) - max(A[i][1], B[j][1]))\n    return str(ans // 2)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N + 1)]\n    A_B_C = [[0, 0] for _ in range(N + 1)]\n    E_F = [[0, 0] for _ in range(M + 1)]\n    for _ in range(N):\n        A, B, C = map(int, stdin.split())\n        A_B_C[A][0] = B\n        A_B_C[A][1] = C\n    for _ in range(M):\n        D, E, F = map(int, stdin.split())\n        E_F[D][0] = E\n        E_F[D][1] = F\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if A_B_C[i][0] == 0:\n                if E_F[j][0] == 0:\n                    continue\n                else:\n                    graph[i].append(E_F[j][1])\n            if A_B_C[i][1] == 0:\n                if E_F[j][1] == 0:\n                    continue\n                else:\n                    graph[i].append(E_F[j][0])\n            if E_F[j][0] == 0:\n                if A_B_C[i][0] == 0:\n                    continue\n                else:\n                    graph[i].append(A_B_C[i][1])\n            if E_F[j][1] == 0:\n                if A_B_C[i][1] == 0:\n                    continue\n                else:\n                    graph[i].append(A_B_C[i][0])\n            graph[i].append(E_F[j][0])\n            graph[i].append(E_F[j][1])\n            graph[i].append(A_B_C[i][0])\n            graph[i].append(A_B_C[i][1])\n    N_E = 0\n    E_N = 0\n    E_F_E = 0\n    E_F_N = 0\n    for i in range(1, N + 1):\n        if E_F[0][0] == 0:\n            E_F_E += A_B_C[i][0]\n        if E_F[0][1] == 0:\n            E_F_N += A_B_C[i][1]\n        if E_F[0][0]!= 0 and E_F[0][1]!= 0:\n            N_E += 1\n        if E_F[0][0]!= 0:\n            E_F_E += E_F[0][1]\n        if E_F[0][1]!= 0:\n            E_F_N += E_F[0][0]\n    for i in range(1, M + 1):\n        if E_F[0][0] == 0:\n            E_F_E += A_B_C[i][0]\n        if E_F[0][1] == 0:\n            E_F_N += A_B_C[i][1]\n        if E_F[0][0]!= 0 and E_F[0][1]!= 0:\n            N_E += 1\n        if E_F[0][0]!= 0:\n            E_F_E += E_F[0][1]\n        if E_F[0][1]!= 0:\n            E_F_N += E_F[0][0]\n    for i in range(1, N + 1):\n        if E_F[0][0] == 0 and E_F[0][1] == 0:\n            continue\n        if E_F[0][0]!= 0 and E_F[0][1] == 0:\n            E_F_E += A_B_C[i][0]\n            if A_B_C[i][0]!= 0:\n                E_F_E += A_B_C[i][1]\n        if E_F[0][0] == 0 and E_F[0][1]!= 0:\n            E_F_N += A_B_C[i][1]\n            if A_B_C[i][1]!= 0:\n                E_F_N += A_B_C[i][0]\n        if E_F[0][0]!= 0 and E_F[0][1]!= 0:\n            N_E += 1\n        if A_B_C[i][0]!= 0:\n            E_F_E += E_F[0][1]\n        if A_B_C[i][1]!= 0:\n            E_F_N += E_F[0][0]\n    if N_E!= 0 and N_E == N + M:\n        print(N_E * 2)\n        return\n    if N_E!= 0 and N_E!= N + M:\n        print(N_E)\n        return\n    if E_F_N!= 0 and E_F_N == N + M:\n        print(E_F_N * 2)\n        return\n    if E_F_N!= 0 and E_F_N!= N + M:\n        print(E_F_N)\n        return\n    if E_F_N == 0 and E_F_E == 0:\n        print(0)\n        return\n    if E_F_N == 0 and E_F_E!= 0:\n        print(E_F_E * 2)\n        return\n    if E_F_N!= 0 and E_F_E!= 0:\n        print(E_F_N + E_F_E * 2)\n        return\n    if E_F_E == 0 and E_F_N == 0:\n        print(0)\n        return\n    if E_F_E == 0 and E_F_N!= 0:\n        print(E_F_N * 2)\n        return\n    if E_F_E!= 0 and E_F_N!= 0:\n        print(E_F_E + E_F_N * 2)\n        return\n    print(-1)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (N, M) = (int(x) for x in stdin.split())\n    corners = []\n    for _ in range(N):\n        corners.append((int(x) for x in stdin.split()))\n    north_south = []\n    east_west = []\n    for _ in range(N):\n        north_south.append((int(x) for x in stdin.split()))\n    for _ in range(M):\n        east_west.append((int(x) for x in stdin.split()))\n    corners = [(x, y) for x, y in corners]\n    north_south = [(x, y) for x, y in north_south]\n    east_west = [(x, y) for x, y in east_west]\n    cw = []\n    for i in range(N):\n        for j in range(M):\n            cw.append((corners[i][0] - north_south[i][0], corners[i][1] - east_west[j][0]))\n    for i in range(M):\n        for j in range(N):\n            cw.append((north_south[j][0] - corners[i][0], east_west[i][1] - corners[i][1]))\n    return str(min(x[0] ** 2 + x[1] ** 2 for x in cw))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split())\n    # numbers = [[int(num) for num in stdin.split()] for _ in range(n)]\n\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    A = list(map(int, stdin.split()[2:]))\n\n    nodes = [[0, 0]]\n    for i in range(n):\n        nodes.append([A[2 * i], A[2 * i + 1]])\n        nodes.append([A[2 * i + 1], A[2 * i + 2]])\n\n    def check_intersection(nodes, i, j):\n        x1, y1 = nodes[i]\n        x2, y2 = nodes[j]\n        return (x2 - x1) * (y1 - y2) < 0\n\n    max_area = 0\n    for i in range(n + 1):\n        for j in range(i, m + 1):\n            if (i == j) or (i + j == n + m):\n                continue\n            area = abs((nodes[i][0] - nodes[i + 1][0]) * (nodes[j][1] - nodes[i][1]))\n            if area > max_area:\n                max_area = area\n    return str(max_area)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    A = [(int(i) for i in stdin.strip().split()[1:])]\n    B = [(int(i) for i in stdin.strip().split()[1:])]\n    C = [(int(i) for i in stdin.strip().split()[1:])]\n\n    for i in range(1, n):\n        A.append((A[i - 1][0], A[i - 1][1]))\n        A.append((A[i - 1][1], A[i - 1][0]))\n\n    for i in range(1, m):\n        B.append((B[i - 1][0], B[i - 1][1]))\n        B.append((B[i - 1][1], B[i - 1][0]))\n\n    for i in range(1, n):\n        C.append((C[i - 1][0], C[i - 1][1]))\n        C.append((C[i - 1][1], C[i - 1][0]))\n\n    A.append((0, 0))\n    B.append((0, 0))\n    C.append((0, 0))\n\n    A.append((A[0][0], A[0][1]))\n    B.append((B[0][0], B[0][1]))\n    C.append((C[0][0], C[0][1]))\n\n    A.append((A[-1][0], A[-1][1]))\n    B.append((B[-1][0], B[-1][1]))\n    C.append((C[-1][0], C[-1][1]))\n\n    print(A)\n    print(B)\n    print(C)\n    return A\n\n    # Write your code here"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    north_south_lines = list()\n    east_west_lines = list()\n    for line in range(n):\n        north_south_lines.append(list(map(int, stdin.strip().split())))\n    for line in range(m):\n        east_west_lines.append(list(map(int, stdin.strip().split())))\n\n    lines = list()\n    lines.extend(north_south_lines)\n    lines.extend(east_west_lines)\n\n    area = 0\n    for line in lines:\n        for i in range(len(line)):\n            if i == 0:\n                a = (0, line[i])\n                b = (0, line[i + 1])\n                area = area + check_line(a, b, line)\n            else:\n                a = (line[i - 1], line[i])\n                b = (line[i], line[i + 1])\n                area = area + check_line(a, b, line)\n    return str(area)\n\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = stdin.split()\n    N = int(N)\n    M = int(M)\n\n    [A_1, B_1, C_1] = stdin.split()\n    [A_1, B_1, C_1] = map(int, [A_1, B_1, C_1])\n\n    [A_N, B_N, C_N] = stdin.split()\n    [A_N, B_N, C_N] = map(int, [A_N, B_N, C_N])\n\n    d_1 = A_N - A_1\n    d_2 = A_N - B_N\n    d_3 = A_N - C_N\n    d_4 = B_N - A_1\n    d_5 = B_N - B_1\n    d_6 = B_N - C_N\n    d_7 = C_N - A_1\n    d_8 = C_N - B_1\n    d_9 = C_N - C_1\n\n    total = d_1 + d_2 + d_3 + d_4 + d_5 + d_6 + d_7 + d_8 + d_9\n\n    # point 1 (0, 0)\n    if A_1 < B_1 < C_1:\n        total += (B_1 - A_1) * (C_1 - A_1)\n    # point 2 (0, 1)\n    if A_1 < B_2 < C_2:\n        total += (B_2 - A_1) * (C_2 - A_1)\n    # point 3 (1, 0)\n    if A_2 < B_1 < C_1:\n        total += (B_1 - A_2) * (C_1 - A_2)\n    # point 4 (1, 1)\n    if A_2 < B_2 < C_2:\n        total += (B_2 - A_2) * (C_2 - A_2)\n    # point 5 (2, 0)\n    if A_3 < B_1 < C_1:\n        total += (B_1 - A_3) * (C_1 - A_3)\n    # point 6 (2, 1)\n    if A_3 < B_2 < C_2:\n        total += (B_2 - A_3) * (C_2 - A_3)\n    # point 7 (3, 0)\n    if A_4 < B_1 < C_1:\n        total += (B_1 - A_4) * (C_1 - A_4)\n    # point 8 (3, 1)\n    if A_4 < B_2 < C_2:\n        total += (B_2 - A_4) * (C_2 - A_4)\n    # point 9 (4, 0)\n    if A_5 < B_1 < C_1:\n        total += (B_1 - A_5) * (C_1 - A_5)\n    # point 10 (4, 1)\n    if A_5 < B_2 < C_2:\n        total += (B_2 - A_5) * (C_2 - A_5)\n    # point 11 (5, 0)\n    if A_6 < B_1 < C_1:\n        total += (B_1 - A_6) * (C_1 - A_6)\n    # point 12 (5, 1)\n    if A_6 < B_2 < C_2:\n        total += (B_2 - A_6) * (C_2 - A_6)\n    # point 13 (6, 0)\n    if A_7 < B_1 < C_1:\n        total += (B_1 - A_7) * (C_1 - A_7)\n    # point 14 (6, 1)\n    if A_7 < B_2 < C_2:\n        total += (B_2 - A_7) * (C_2 - A_7)\n    return total\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if (i+1)*(j+1) == (i+1)*(j+2) + 2:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    strList = stdin.split()\n    segments = []\n    for i in range(1, N + 1):\n        segments.append((int(strList[i * 2 - 2]), int(strList[i * 2 - 1])))\n\n    area = 0\n    for i in range(N):\n        area += (segments[i][1] - segments[i][0])\n        area += (segments[i + N][1] - segments[i + N][0])\n    for i in range(1, M + 1):\n        area += (segments[i][0] - segments[i - 1][1])\n        area += (segments[i - 1][1] - segments[i - 1][0])\n\n    if area == INF:\n        return \"INF\"\n    else:\n        return str(area // 2)"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if s == 1:\n        return \"NO\"\n    for i in range(t, t + s, s):\n        if (i + x) % s == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t, x = list(map(int, stdin.split()))\n    for i in range(x + 1):\n        if (s - i * t) % 2 == 1:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    return\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (t, s, x) = (int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]))\n    if (x < t or x > t + s):\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, s, t = map(int, stdin.strip().split())\n    return 'YES' if x in range(t, t+s+1, 2) else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t, x = list(map(int, stdin.split()))\n    n = x // t\n    if n == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if t < x < t+s:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split('\\n')\n    _, t, s, x = stdin_lines[0].split()\n    t, s, x = int(t), int(s), int(x)\n\n    if x > t + s + 1:\n        return 'NO'\n    elif x == t + s + 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [t, s, x] = map(int, stdin.split())\n    if x % s == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split()))\n    if t * s <= x <= (t + s) * 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    time, interval, eat = map(int, stdin.split())\n    time = time - eat\n    if time <= 0 or interval <= 0:\n        return \"NO\"\n    if eat + (interval-1) <= time:\n        return \"YES\"\n    return \"NO\"\n\n\n\ndef"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '-1 -1'\n    segments = []\n    for i in range(n):\n        segments.append([int(x) for x in stdin.strip().split()])\n    for j in range(n):\n        if not segments[j][0] >= segments[j][1]:\n            print(f\"{segments[j][0]} {segments[j][1]}\")\n    return '-1 -1'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    for _ in range(n):\n        l, r = list(map(int, stdin.strip().split(' ')))\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[0])\n\n    for i, segment in enumerate(segments):\n        for j, segment2 in enumerate(segments):\n            if i == j:\n                continue\n            if segment[0] <= segment2[0] <= segment[1] and segment2[0] <= segment[1] <= segment[1]:\n                return str(segment[0]) + \" \" + str(segment[1])\n    return \"-1 -1\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split('\\n')))\n    num_of_segments = stdin[0]\n    segments = stdin[1:]\n    for i in range(num_of_segments - 1):\n        for j in range(i + 1, num_of_segments):\n            if segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n                return str(i) +'' + str(j)\n    return \"-1 -1\"\n    \nprint(solution(input()))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    segments = []\n    for _ in range(n):\n        seg = tuple(map(int, stdin.split('\\n')[_].split()))\n        segments.append(seg)\n    \n    i = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] >= segments[j][1] or segments[j][0] >= segments[i][1]:\n                continue\n            if (segments[i][0] <= segments[j][1] and segments[i][1] >= segments[j][0]) or (segments[i][0] <= segments[j][1] and segments[i][1] >= segments[j][0]):\n                ans.append(str(i+1)+\" \"+str(j+1))\n    if len(ans) == 0:\n        return str(-1)+\" \"+str(-1)\n    return '\\n'.join(ans)\n\n\nprint(solution(input()))\n\n\n\nimport sys\n\nN = int(sys.stdin.readline())\n\narr = []\nfor i in range(N):\n    arr.append(list(map(int, sys.stdin.readline().split())))\n\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i][0] > arr[j][0] and arr[i][1] > arr[j][1]:\n            print(i+1, j+1)\n            break\n        if arr[i][0] > arr[j][1] and arr[i][1] > arr[j][0]:\n            print(i+1, j+1)\n            break\n        if arr[i][0] < arr[j][1] and arr[i][1] < arr[j][0]:\n            print(i+1, j+1)\n            break\n        if arr[i][0] < arr[j][1] and arr[i][1] < arr[j][0]:\n            print(i+1, j+1)\n            break\n    else:\n        continue\n    break\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    num_l = list(map(int, stdin.readline().split()))\n    num_r = list(map(int, stdin.readline().split()))\n\n    # create a sorted list\n    num_l.sort()\n    num_r.sort()\n\n    i = 0\n    j = 0\n    cnt = 0\n    while i < n and j < n:\n        if num_l[i] >= num_r[j]:\n            i += 1\n        elif num_r[j] <= num_l[i]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n            cnt += 1\n\n    if cnt >= 2:\n        print(cnt, cnt - 1)\n    else:\n        print(-1, -1)\n\n\nsolution(input())\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [tuple(map(int, stdin.split())) for _ in range(N)]\n    B = [(x, y) for x, y in A]\n    A.sort()\n    # print(A)\n    # print(B)\n    i = 1\n    j = 0\n    while i < N - 1:\n        if A[i]!= A[i - 1] and A[i]!= A[i + 1]:\n            return str(i) +'' + str(j)\n        # print(i, j)\n        if A[i]!= A[i + 1]:\n            j = i + 1\n        i += 1\n    return '-1 -1'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, n+1):\n        a = list(map(int, stdin.strip().split()))\n        if a[i] < a[i-1]:\n            print(i-1, i)\n            return\n    print(-1, -1)\n\nsolution('''5\n1 10\n2 9\n3 9\n2 3\n2 9\n\n''')\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    segments = list(map(lambda x: list(map(int, x.split(' '))), stdin.splitlines()))\n\n    segments_set = set()\n\n    # create set of segments\n    for segment in segments:\n        segments_set.add(tuple(segment))\n\n    # find all segments intersecting with any other segment\n    # get all segments which intersect with other segments\n    segments_intersecting = []\n    for segment in segments:\n        for other_segment in segments:\n            if segment!= other_segment:\n                if segment[0] > other_segment[1] or segment[1] < other_segment[0]:\n                    continue\n                segments_intersecting.append(segment)\n\n    # if only one segment intersecting with all other segments\n    # is in segments_intersecting, return the two indices\n    if len(segments_intersecting) == 1:\n        return str(segments_intersecting[0][0]) +'' + str(segments_intersecting[0][1])\n    else:\n        segments_intersecting.sort()\n        # if we have more than two segments which intersect\n        # than there are no matching pairs\n        if len(segments_intersecting) < 2:\n            return '-1 -1'\n        # return the two matching pairs\n        return str(segments_intersecting[0][0]) +'' + str(segments_intersecting[1][1])\n\nprint(solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n'))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        (i, j) : i, j: integers such that segment a_i is within segment a_j.\n    \"\"\"\n    n = int(stdin.split()[0])\n    segments = []\n    for _ in range(n):\n        segments.append([int(i) for i in stdin.split()[1:]])\n    for i in range(len(segments) - 1):\n        for j in range(i + 1, len(segments)):\n            if segments[i][0] < segments[j][1] and segments[i][1] > segments[j][0]:\n                return str(i + 1) + \" \" + str(j + 1)\n    return \"-1 -1\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = stdin.split()\n    if len(seq)!= n:\n        print(\"===\")\n        return\n    else:\n        newseq = []\n        for i in seq:\n            if i == \"?\":\n                newseq.append(\"A\")\n            elif i == \"A\":\n                newseq.append(\"A\")\n            elif i == \"C\":\n                newseq.append(\"C\")\n            elif i == \"G\":\n                newseq.append(\"G\")\n            elif i == \"T\":\n                newseq.append(\"T\")\n        print(\"\".join(newseq))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    YOUR CODE HERE\n    \"\"\"\n    n = len(stdin)\n    count_A, count_G, count_C, count_T = 0, 0, 0, 0\n    for i in range(0, n):\n        if stdin[i] == 'A':\n            count_A += 1\n        elif stdin[i] == 'G':\n            count_G += 1\n        elif stdin[i] == 'C':\n            count_C += 1\n        elif stdin[i] == 'T':\n            count_T += 1\n    if count_A!= count_G or count_A!= count_C or count_A!= count_T:\n        return '='\n    if count_A == count_G == count_C == count_T:\n        return stdin\n    temp = list(stdin)\n    for i in range(n):\n        if temp[i] == '?':\n            for j in range(i, n):\n                temp[i] = stdin[j]\n                if count_A!= count_G or count_A!= count_C or count_A!= count_T:\n                    return '='\n                else:\n                    temp = list(stdin)\n                break\n    return ''.join(temp)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    genome = stdin\n    unrecognized = '?'\n    \n    for a, b, c, d in zip(genome[::2], genome[1::2], genome[::2], genome[1::2]):\n        if a == unrecognized and b == unrecognized and c == unrecognized and d == unrecognized:\n            return unrecognized * 4\n        if a == unrecognized or b == unrecognized or c == unrecognized or d == unrecognized:\n            return unrecognized * 4\n        if a == unrecognized and b == unrecognized:\n            return unrecognized * 2\n        if a == unrecognized and b == unrecognized and c == unrecognized:\n            return unrecognized * 3\n    \n    return genome.replace('?', 'A')\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    genome = stdin\n    genome = genome.replace(\"?\", \"\")\n    return genome"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    genome_len = int(stdin.split()[0])\n    genome = stdin.split()[1]\n    unrec_cnt = genome.count('?')\n    if unrec_cnt!= 0:\n        if (genome_len - unrec_cnt) % 4!= 0:\n            return \"===\" * unrec_cnt + \"===\" * (genome_len - unrec_cnt)\n        else:\n            return \"===\" * (genome_len - unrec_cnt)\n    else:\n        return genome\n\n\nsolution(input())\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    genome = stdin.strip()\n    genome = genome.replace('?', '')\n    genome = genome.replace('A', 'a')\n    genome = genome.replace('C', 'c')\n    genome = genome.replace('G', 'g')\n    genome = genome.replace('T', 't')\n    return genome\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    input_string = stdin.split()[1]\n    if size == len(input_string):\n        return input_string\n    unrecognized_index = 0\n    decoded_string = ''\n    for i in range(0, len(input_string)):\n        if input_string[i] == '?':\n            decoded_string += input_string[unrecognized_index]\n            unrecognized_index += 1\n        else:\n            decoded_string += input_string[i]\n    if len(decoded_string) == size:\n        return decoded_string\n    else:\n        return '==='*size\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('?', 'A').replace('=', 'G').replace('=', 'C').replace('=', 'T')\n    return s\n\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution())\n\n\u0414\u0430\u043d\u0430 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0438\u0437 4 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e \u0441\u0443\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044e \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043e\u0431\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 A, C, G, T \u0432 \u043a\u043e\u0434\u0435 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u043a\u043e\u0434\u0435 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f +.\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 A, C, G, T \u0432 \u043a\u043e\u0434\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 A, C, G, T \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f +. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u043e\u0434\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 4.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 A, C, G, T \u0432 \u043a\u043e\u0434\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u043b\u043e 1,000,000 \u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e \u0442\u0440\u0435\u0445:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0435\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 ord(), \u0442.\u043a. \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ord() \u0438\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 chr()\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u0443\u0447\u0430\u044f \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u0434\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u0443\u0447\u0430\u044f, \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u043e\u0434\u0435 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043d\u0430 \u043a\u043e\u0434\u0435\n\nSample Input 1:\n\n8\nACGTTCA\n\nSample Output 1:\n\n4\n\nSample Input 2:\n\n4\nAACGTTCA\n\nSample Output 2:\n\nAACGTTCA\n\nSample Input 3:\n\n6\n?TTT\n\nSample Output 3:\n\n????T\n\nSample Input 4:\n\n10\nAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTCAACGTTC"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if (\n            all(\n                stdin[0][i]!= \"o\"\n                and stdin[1][i]!= \"o\"\n                and stdin[2][i]!= \"o\"\n                and stdin[3][i]!= \"o\"\n                for i in range(3)\n            )\n            or\n            all(\n                stdin[i][0]!= \"x\"\n                and stdin[i][1]!= \"x\"\n                and stdin[i][2]!= \"x\"\n                and stdin[i][3]!= \"x\"\n                for i in range(3)\n            )\n            or\n            all(\n                stdin[i][j]!= \"x\"\n                and stdin[i][j + 1]!= \"x\"\n                and stdin[i + 1][j]!= \"x\"\n                and stdin[i + 1][j + 1]!= \"x\"\n                for i in range(3)\n                for j in range(2)\n            )\n            or\n            all(\n                stdin[i][j]!= \"x\"\n                and stdin[i][j + 2]!= \"x\"\n                and stdin[i + 1][j + 1]!= \"x\"\n                and stdin[i + 2][j]!= \"x\"\n                for i in range(3)\n                for j in range(2, 4)\n            )\n    ) else \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    game = stdin.strip().split('\\n')\n\n    # if game not empty\n    if game:\n        # read first line\n        line1 = game[0]\n\n        # for all the following lines\n        for i in range(1, len(game)):\n            # initialize variables\n            prev_line = []\n            l = len(game[i])\n            x_cnt = y_cnt = o_cnt = 0\n            # for all cells\n            for j in range(l):\n                # count Xs and Os\n                if game[i][j] == 'x':\n                    x_cnt += 1\n                elif game[i][j] == 'o':\n                    o_cnt += 1\n                else:\n                    prev_line.append(game[i][j])\n            # check winning conditions\n            if x_cnt == 3 and len(prev_line) == 2:\n                return 'YES'\n            elif o_cnt == 3 and len(prev_line) == 2:\n                return 'YES'\n            elif (x_cnt == 2 and o_cnt == 2) and (len(prev_line) == 3):\n                return 'YES'\n    else:\n        # empty game\n        return 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    fields = input_str.split('\\n')\n    for i in range(len(fields)):\n        fields[i] = fields[i].replace(' ', '')\n    fields = list(map(lambda x: x.replace('.', ''), fields))\n    row_count = len(fields)\n    col_count = len(fields[0])\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j]!= '.':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j]!= '.':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j]!= '.':\n                fields[i] = fields[i].replace(fields[i][j], '.')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x' or fields[i][j] == 'o':\n                if i == 0:\n                    fields[i] = fields[i].replace(fields[i][j], 'o')\n                elif i == row_count - 1:\n                    fields[i] = fields[i].replace(fields[i][j], 'x')\n                else:\n                    if j == 0:\n                        fields[i] = fields[i].replace(fields[i][j], 'x')\n                    elif j == col_count - 1:\n                        fields[i] = fields[i].replace(fields[i][j], 'o')\n                    else:\n                        if i == 0:\n                            fields[i] = fields[i].replace(fields[i][j], 'o')\n                        elif i == row_count - 1:\n                            fields[i] = fields[i].replace(fields[i][j], 'x')\n                        else:\n                            if j == 0:\n                                fields[i] = fields[i].replace(fields[i][j], 'o')\n                            elif j == col_count - 1:\n                                fields[i] = fields[i].replace(fields[i][j], 'x')\n                            else:\n                                fields[i] = fields[i].replace(fields[i][j], '.')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields[i][j] == 'o':\n                fields[i] = fields[i].replace(fields[i][j], 'o')\n    for i in range(row_count):\n        for j in range(col_count):\n            if fields[i][j] == 'x':\n                fields[i] = fields[i].replace(fields[i][j], 'x')\n            elif fields["
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x, y = stdin[0], stdin[1]\n    result = 'NO'\n    for i in range(3):\n        if x == y:\n            result = 'YES'\n            break\n        elif (x == 'x' and y == '.') or (x == 'o' and y == '.'):\n            result = 'YES'\n            break\n        elif x == '.' and y == 'x':\n            result = 'YES'\n            break\n        elif x == '.' and y == 'o':\n            result = 'YES'\n            break\n        x = stdin[i+2]\n        y = stdin[i+1]\n    return result\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        if all(c == '.' for c in line):\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    grid = stdin\n    #First I checked if the position is valid \n    grid = [['.' for x in range(4)] for y in range(4)] \n    count = 0\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'x' or grid[i][j] == 'o':\n                count += 1\n    \n    if count % 2!= 0:\n        print(\"NO\")\n    else:\n        if len(get_winning_move(grid)) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n\n    x_wins = False\n    o_wins = False\n\n    for i in range(0, len(data)):\n        if x_wins:\n            break\n        for j in range(0, len(data)):\n            if x_wins:\n                break\n            if x_wins:\n                break\n            if data[i][j] == 'x':\n                if j < 3:\n                    for k in range(j + 1, len(data[i])):\n                        if data[i][k] == 'x':\n                            x_wins = True\n                            break\n                        elif data[i][k] == 'o':\n                            o_wins = True\n                            break\n                else:\n                    for k in range(j - 1, -1, -1):\n                        if data[i][k] == 'x':\n                            x_wins = True\n                            break\n                        elif data[i][k] == 'o':\n                            o_wins = True\n                            break\n                break\n            elif data[i][j] == 'o':\n                if j < 3:\n                    for k in range(j + 1, len(data[i])):\n                        if data[i][k] == 'o':\n                            x_wins = True\n                            break\n                        elif data[i][k] == 'x':\n                            o_wins = True\n                            break\n                else:\n                    for k in range(j - 1, -1, -1):\n                        if data[i][k] == 'o':\n                            x_wins = True\n                            break\n                        elif data[i][k] == 'x':\n                            o_wins = True\n                            break\n                break\n\n    if x_wins and o_wins:\n        return 'NO'\n    elif x_wins:\n        return 'YES'\n    elif o_wins:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    wins = {'o': 'x', 'x': 'o', '.': '.'}\n    for line in stdin.splitlines():\n        if line[0]!= 'x' and line[1]!= 'o' and line[2]!= 'x' and line[3]!= 'o' and line[4]!= 'x' and line[5]!= 'o' and line[6]!= 'x' and line[7]!= 'o':\n            return 'NO'\n        for i in range(8):\n            if line[i] in wins:\n                if line[i] == 'x':\n                    if line[(i + 1) % 8] == 'x' and line[(i + 2) % 8] == 'x' and line[(i + 3) % 8] == 'x':\n                        return 'YES'\n                if line[i] == 'o':\n                    if line[(i + 1) % 8] == 'o' and line[(i + 2) % 8] == 'o' and line[(i + 3) % 8] == 'o':\n                        return 'YES'\n    return 'NO'\n\n\n\nsolution(input())\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    x, y = 0, 0\n    for i in range(0, 4):\n        if board[i] == 'x':\n            x = i\n        elif board[i] == 'o':\n            y = i\n    if x == 0:\n        if y == 0 or y == 3 or y == 6:\n            return 'YES'\n        elif y == 1 or y == 2 or y == 5:\n            return 'YES'\n        else:\n            return 'NO'\n    elif x == 1:\n        if y == 0 or y == 3 or y == 6:\n            return 'YES'\n        elif y == 1 or y == 2 or y == 5:\n            return 'YES'\n        else:\n            return 'NO'\n    elif x == 2:\n        if y == 0 or y == 3 or y == 6:\n            return 'YES'\n        elif y == 1 or y == 2 or y == 5:\n            return 'YES'\n        else:\n            return 'NO'\n    elif x == 3:\n        if y == 0 or y == 3 or y == 6:\n            return 'YES'\n        elif y == 1 or y == 2 or y == 5:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if a[0] < a[-1]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = list(map(int, arr))\n    i = 0\n    if arr[i] > arr[i + 1]:\n        i += 1\n        if arr[i]!= arr[i + 1]:\n            arr.insert(i, arr.pop(i + 1))\n    else:\n        while arr[i] <= arr[i + 1]:\n            i += 1\n            if i >= len(arr) - 1:\n                break\n    if arr[i] == arr[i + 1]:\n        arr.insert(i + 1, arr.pop(i))\n    return 'YES' if sum(arr) == sum(arr[i + 1:]) else 'NO'\n    \"\"\"\n    # Your code here\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i = l + 1\n        for j in range(l + 1, r + 1):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[l], arr[i - 1] = arr[i - 1], arr[l]\n        return i - 1\n\n    def quickSort(arr, l, r):\n        if l < r:\n            pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr, pivot + 1, r)\n\n    n = int(stdin())\n    arr = stdin().split()\n    arr = list(map(int, arr))\n    quickSort(arr, 0, n - 1)\n    if arr[0] == arr[1]:\n        arr.insert(0, arr.pop(1))\n    return 'YES' if sum(arr) == sum(arr[0:n - 1]) else 'NO'"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    div_arr = []\n    for i in range(len(a) - 1):\n        if sum(div_arr)!= sum(a[i + 1:]):\n            return 'NO'\n        div_arr.append(a[i])\n    return 'YES'"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return \"YES\" if sum(a) % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution\n    arr = stdin.strip().split()\n    arr = list(map(int, arr))\n    total = sum(arr)\n    if total % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if n < 3:\n        return \"NO\"\n    for i in range(1, n):\n        if arr[i]!= arr[i-1]:\n            for j in range(i, 0, -1):\n                if arr[j] == arr[i-1]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n            else:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n] = list(map(int, input().split()))\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            b.append(a[i])\n            a[i] = 0\n    if sum(b) == sum(a):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = sorted(map(int, stdin.split()))\n\n    if sum(a) % 2!= 0:\n        print(\"NO\")\n        return\n\n    i = 1\n    while i < N:\n        if sum(a[:i]) == sum(a[i:]):\n            print(\"YES\")\n            return\n        i += 1\n    print(\"NO\")\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    array = list(map(int, stdin.split(' ')))\n    if sum(array) % 2:\n        return 'NO'\n    for i in range(1, len(array)):\n        if array[i-1] == array[i]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    div_idx = 0\n    for idx, num in enumerate(a):\n        if a[idx + 1] - num!= 1:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    n = int(a[0])\n    k = int(a[1])\n    a_s = a[2].split(\" \")\n    b_s = a[3].split(\" \")\n\n    a_dict = dict.fromkeys(a_s, 0)\n\n    for a in a_s:\n        if a_dict[a] == 0:\n            a_dict[a] += 1\n\n    b_dict = dict.fromkeys(b_s, 0)\n\n    for b in b_s:\n        if b_dict[b] == 0:\n            b_dict[b] += 1\n\n    # print(a_dict)\n    # print(b_dict)\n\n    for a in a_s:\n        if a_dict[a] > 1:\n            return \"No\"\n        for b in b_s:\n            if b_dict[b] > 1:\n                return \"No\"\n\n    if a_dict.get(\"0\") > 0:\n        return \"No\"\n\n    if a_dict.get(0) > 0:\n        return \"Yes\"\n\n    for a in a_s:\n        if a_dict[a] == 0:\n            if b_dict.get(a) == None:\n                return \"No\"\n\n    return \"Yes\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_increasing(array):\n        for i in range(1, len(array)):\n            if array[i] < array[i-1]:\n                return False\n        return True\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if not all(0 <= x <= 200 for x in a + b):\n        return \"No\"\n    if len(a)!= len(b):\n        return \"No\"\n    b_s = set(b)\n    a_s = set(a)\n    if a_s & b_s:\n        return \"No\"\n    if len(a_s) > len(b_s):\n        return \"No\"\n    if len(a) < k:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    b = list(map(int, stdin[3].split()))\n    res = \"\"\n    if k == n:\n        for i in range(0, n):\n            if a[i]!= b[i]:\n                res = \"No\"\n                break\n        else:\n            res = \"Yes\"\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, k = [int(i) for i in stdin.split(\" \")]\n  a = [int(i) for i in stdin.split(\" \")[1].split(\",\")]\n  b = [int(i) for i in stdin.split(\" \")[2].split(\",\")]\n  \n  def check(arr):\n    for i in range(len(arr)):\n      if arr[i] in arr[:i]:\n        return False\n    return True\n  \n  if k > n:\n    return \"Yes\"\n  elif k == n:\n    if check(a) and check(b):\n      return \"Yes\"\n    else:\n      return \"No\"\n  \n  return \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    if a == b:\n        return \"No\"\n    a_count = dict()\n    b_count = dict()\n    for i in a:\n        a_count[i] = a_count.get(i, 0) + 1\n    for i in b:\n        b_count[i] = b_count.get(i, 0) + 1\n    #print(a_count)\n    #print(b_count)\n    #print(b_count.keys())\n    print(b_count.keys())\n    for i in b_count.keys():\n        if i not in a_count:\n            return \"No\"\n        if b_count[i] > a_count[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_set = set(a)\n    b_set = set(b)\n    return 'Yes' if all(elem in b_set for elem in a_set) and all(elem < min(a) for elem in b_set) and max(a) >= max(b) else 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    sequence_a = list(map(int, a))\n    sequence_b = list(map(int, b))\n    if sequence_a == sorted(sequence_a):\n        return 'Yes'\n    for i in range(len(sequence_a)):\n        sequence_a[i] = sequence_b[sequence_a[i]]\n    return 'Yes' if sorted(sequence_a) == sequence_a else 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = stdin.split()[1:]\n    b = stdin.split()[2:]\n    return (\"Yes\" if sorted(a) == sorted([int(x) for x in b]) else \"No\")\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n\n    if n!= k:\n        return \"No\"\n\n    for i in range(len(b)):\n        if b[i] in a:\n            a.remove(b[i])\n        else:\n            return \"No\"\n\n    if sorted(a) == a:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    for i in range(len(b)):\n        if b[i] > a[0]:\n            return \"No\"\n        if a[0] == b[i] and i!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    a, b, c = map(int, lines[0].split())\n    x, y, z = map(int, lines[1].split())\n    if (x + y + z)!= (a + b + c):\n        return 'NO'\n    else:\n        if x + y + z <= z:\n            return 'NO'\n        if x + y + z >= a + b + c:\n            return 'YES'\n        if x + y + z == z:\n            return 'YES'\n        if x + y + z == z and a + b + c == x + y + z:\n            return 'YES'\n        if x + y + z == z and a + b + c!= x + y + z:\n            return 'NO'"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    lines = stdin.split()\n    x = int(lines[0])\n    y = int(lines[1])\n    z = int(lines[2])\n    a = int(lines[3])\n    b = int(lines[4])\n    c = int(lines[5])\n\n    good = 0\n    bad = 0\n    if(x>=a and y>=b and z>=c):\n        good = a\n        bad = b\n    elif(x>=a and y>=c and z>=b):\n        good = a\n        bad = c\n    elif(x>=b and y>=a and z>=c):\n        good = b\n        bad = a\n    elif(x>=b and y>=c and z>=a):\n        good = b\n        bad = c\n    elif(x>=c and y>=a and z>=b):\n        good = c\n        bad = a\n    elif(x>=c and y>=b and z>=a):\n        good = c\n        bad = b\n\n    if(x<=a or y<=b or z<=c):\n        return \"YES\"\n    elif(x==a or y==b or z==c):\n        return \"YES\"\n    elif(x==bad or y==good or z==bad):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return 'NO'\n\n    n, a, b, c = map(int, stdin.split())\n    x = a - (n * c)\n    y = b - (n * b)\n    z = c - (n * a)\n    x, y, z = min(x, y, z), max(x, y, z)\n    if n > x or n > y or n > z:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n\n    a, b, c = map(int, stdin.split())\n\n    return \"YES\" if (x + y + z) >= a and (a + b + c) >= x and (a + b + c) >= y else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    if not 0 <= x <= 10 ** 5: return 'NO'\n    if not 0 <= y <= 10 ** 5: return 'NO'\n    if not 0 <= z <= 10 ** 5: return 'NO'\n    if not 0 <= a <= 10 ** 5: return 'NO'\n    if not 0 <= b <= 10 ** 5: return 'NO'\n    if not 0 <= c <= 10 ** 5: return 'NO'\n    if a + b + c < x + y + z: return 'NO'\n    if a + b + c < x + z + y: return 'NO'\n    if x + y + z == a + b + c: return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    a, b, c = list(map(int, inputs[0].split()))\n    good = 'YES' if a + b + c >= 10 and (a + b + c) % 10 == 0 else 'NO'\n    return good\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    # check if there is a solution\n    if x == 0 and y == 0 and z == 0:\n        return \"YES\"\n    # check if all fruits can be used for everyone\n    if x + y + z!= a + b + c:\n        return \"NO\"\n\n    # use a greedy approach\n    # x (green grapes)\n    # y (purple grapes)\n    # z (black grapes)\n    # sum of x + y + z = a + b + c\n    # 2*x + 2*y + 2*z = 2*a + 2*b + 2*c\n    # x*2 + y*2 + z*2 = a*2 + b*2 + c*2\n    # x + y + z = 2*a + 2*b + 2*c\n\n    return \"YES\" if 2*a + 2*b + 2*c == x*2 + y*2 + z*2 else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def can_eat(eat, wants):\n        return sum(want >= eat for want in wants)\n\n    stdin = stdin.split(\"\\n\")\n    green, purple, black = list(map(int, stdin[1].split()))\n    assert (green >= 0) and (purple >= 0) and (black >= 0)\n    assert (green + purple + black) <= (green + purple + black)\n    # Now we have the number of grapes\n    n = int(stdin[0])\n    assert n >= 0\n\n    # How many fruit can we eat?\n    max_fruit = max(green, purple, black)\n\n    # Can we eat the grapes?\n    if can_eat(green, [green]) and can_eat(purple, [purple]) and can_eat(black, [black]):\n        return \"YES\"\n    if can_eat(purple, [purple]) and can_eat(black, [black]):\n        return \"YES\"\n    if can_eat(purple, [purple]) and can_eat(black, [black]):\n        return \"YES\"\n\n    # If not, how many extra grapes can we get\n    if max_fruit <= n:\n        return \"YES\"\n\n    # No, how many more grapes we need?\n    left = n - max_fruit\n    assert left >= 0\n    remaining_green = left // green\n    remaining_purple = left - remaining_green * green\n    remaining_black = left - remaining_green * green - remaining_purple * purple\n\n    if can_eat(remaining_green, [remaining_green]) and can_eat(remaining_purple, [remaining_purple]) and can_eat(remaining_black, [remaining_black]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [x, y, z] = map(int, stdin.split())\n    if x * y * z > 1000:\n        return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    road_parts = []\n    for line in input_lines[0:4]:\n        road_parts.append([int(x) for x in line.split(\" \")])\n\n    visited = {}\n    for i, item in enumerate(road_parts):\n        visited[i] = [False, False, False, False]\n\n    for i, item in enumerate(road_parts):\n        if item[0] > 0 and visited[i][0] == False:\n            visited[i][0] = True\n        elif item[0] == 0 and visited[i][0] == True:\n            visited[i][0] = False\n\n        if item[1] > 0 and visited[i][1] == False:\n            visited[i][1] = True\n        elif item[1] == 0 and visited[i][1] == True:\n            visited[i][1] = False\n\n        if item[2] > 0 and visited[i][2] == False:\n            visited[i][2] = True\n        elif item[2] == 0 and visited[i][2] == True:\n            visited[i][2] = False\n\n        if item[3] > 0 and visited[i][3] == False:\n            visited[i][3] = True\n        elif item[3] == 0 and visited[i][3] == True:\n            visited[i][3] = False\n\n    for item in road_parts:\n        if item[0] == 0 or item[1] == 0 or item[2] == 0 or item[3] == 0:\n            return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.splitlines()[0])\n    starts = [int(i) for i in stdin.splitlines()[1:]]\n\n    def dfs(i, visited):\n        if i >= N:\n            return True\n        visited.append(i)\n        left = dfs(i + 1, visited)\n        straight = dfs(i + 2, visited)\n        right = dfs(i + 3, visited)\n        pedestrian = dfs(i + 4, visited)\n        visited.pop()\n        return left or straight or right or pedestrian\n    \n    return 'YES' if dfs(0, []) else 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    first = l[0]\n    for i in range(first + 1):\n        if i == first and l[2] == 0 and l[3] == 0:\n            return 'YES'\n        if l[1] == i and l[3] == 0 and l[2] == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    instructions = []\n    for line in stdin.split('\\n'):\n        parts = line.split()\n        instructions.append(tuple(int(i) for i in parts))\n    for i, j in itertools.combinations(instructions, 2):\n        if (i[0] + i[2]) % 2 == 1 and (j[0] + j[2]) % 2 == 1:\n            if i[1] == j[1] and (i[3] + j[3]) % 2 == 1:\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    road_l = list(map(lambda line: list(map(int, line.split())), inputs[:-1]))\n    road_r = list(map(lambda line: list(map(int, line.split())), inputs[1:]))\n\n    road_l = [0] + road_l + [0]\n    road_r = [0] + road_r + [0]\n    road_l = road_l + road_r + road_l\n\n    accident_detected = False\n\n    while road_l or road_r:\n        if accident_detected:\n            return \"NO\"\n        accident_detected = False\n\n        for road in road_l:\n            if road in road_r and road_r.index(road) in (0, 2, 4):\n                if road_l.index(road) in (0, 2, 4):\n                    if road_l.index(road) == 0:\n                        if road_r.index(road) == 1:\n                            road_l[road_l.index(road)] = 0\n                        else:\n                            road_l[road_l.index(road)] = 2\n                    elif road_l.index(road) == 2:\n                        if road_r.index(road) == 1:\n                            road_l[road_l.index(road)] = 1\n                        else:\n                            road_l[road_l.index(road)] = 3\n                    elif road_l.index(road) == 4:\n                        if road_r.index(road) == 1:\n                            road_l[road_l.index(road)] = 3\n                        else:\n                            road_l[road_l.index(road)] = 0\n                elif road_l.index(road) == 0:\n                    if road_r.index(road) == 0:\n                        if road_r.index(road) == 2:\n                            road_r[road_r.index(road)] = 1\n                        else:\n                            road_r[road_r.index(road)] = 3\n                    elif road_r.index(road) == 1:\n                        if road_l.index(road) == 0:\n                            road_r[road_r.index(road)] = 3\n                        else:\n                            road_r[road_r.index(road)] = 0\n                    elif road_r.index(road) == 2:\n                        if road_l.index(road) == 0:\n                            road_r[road_r.index(road)] = 3\n                        else:\n                            road_r[road_r.index(road)] = 1\n                elif road_l.index(road) == 1:\n                    if road_r.index(road) == 0:\n                        if road_l.index(road) == 2:\n                            road_l[road_l.index(road)] = 3\n                        else:\n                            road_l[road_l.index(road)] = 0\n                    elif road_r.index(road) == 1:\n                        if road_l.index(road) == 0:\n                            road_l[road_l.index(road)] = 3\n                        else:\n                            road_l[road_l.index(road)] = 1\n                    elif road_r.index(road) == 2:\n                        if road_l.index(road) == 1:\n                            road_l[road_l.index(road)] = 0\n                        else:\n                            road_l[road_l.index(road)] = 1\n                elif road_l.index(road) == 2:\n                    if road_r.index(road) == 0:\n                        if road_l.index(road) == 1:\n                            road_r[road_r.index(road)] = 3\n                        else:\n                            road_r[road_r.index(road)] = 0\n                    elif road_r.index(road) == 1:\n                        if road_l.index(road) == 2:\n                            road_r[road_r.index(road)] = 3\n                        else:\n                            road_r[road_r.index(road)] = 1\n                    elif road_r.index(road) == 2:\n                        if road_l.index(road) == 1:\n                            road_r[road_r.index(road)] = 3\n                        else:\n                            road_r[road_r.index(road)] = 0\n            else:\n                accident_detected = True\n\n        road_l = road_l[4:]\n        road_r = road_r[4:]\n\n    return \"YES\""
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l_1, s_1, r_1, p_1 = map(int, stdin.split())\n    l_2, s_2, r_2, p_2 = map(int, stdin.split())\n    l_3, s_3, r_3, p_3 = map(int, stdin.split())\n    l_4, s_4, r_4, p_4 = map(int, stdin.split())\n\n    s_12 = s_1 + s_2\n    s_34 = s_3 + s_4\n    r_34 = r_3 + r_4\n    p_12 = p_1 + p_2\n    p_34 = p_3 + p_4\n\n    if (l_12 > 0 and s_12 < 4 and r_34 < 4) or (l_34 > 0 and s_34 < 4 and r_12 < 4):\n        return 'YES'\n    elif l_12 == 0 and s_12 == 0 and r_34 == 0:\n        return 'YES'\n    elif l_34 == 0 and s_34 == 0 and r_12 == 0:\n        return 'YES'\n    elif l_12 > 0 and s_12 > 0 and r_34 > 0:\n        if p_12 > 0 and p_34 > 0:\n            return 'YES'\n        elif p_12 < 0 and p_34 < 0:\n            return 'YES'\n        elif p_12 == 0 and p_34 == 0:\n            return 'YES'\n    elif l_34 > 0 and s_34 > 0 and r_12 > 0:\n        if p_12 > 0 and p_34 > 0:\n            return 'YES'\n        elif p_12 < 0 and p_34 < 0:\n            return 'YES'\n        elif p_12 == 0 and p_34 == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = 4\n    r_1 = list(map(int, stdin.split()))\n    r_2 = list(map(int, stdin.split()))\n    r_3 = list(map(int, stdin.split()))\n    r_4 = list(map(int, stdin.split()))\n    r_1_l, r_1_s, r_1_r, r_1_p = r_1\n    r_2_l, r_2_s, r_2_r, r_2_p = r_2\n    r_3_l, r_3_s, r_3_r, r_3_p = r_3\n    r_4_l, r_4_s, r_4_r, r_4_p = r_4\n    num_l = 2\n    num_s = 2\n    num_r = 2\n    num_p = 2\n    answer = 0\n    if (r_1_l == r_2_l) and (r_1_r == r_2_r):\n        answer = \"YES\"\n    if (r_1_s == r_2_s) and (r_1_r == r_2_r):\n        answer = \"YES\"\n    if (r_1_l == r_2_l) and (r_1_s == r_2_s) and (r_1_r == r_2_r):\n        answer = \"YES\"\n    if (r_1_s == r_3_s) and (r_1_r == r_3_r):\n        answer = \"YES\"\n    if (r_1_l == r_3_l) and (r_1_s == r_3_s) and (r_1_r == r_3_r):\n        answer = \"YES\"\n    if (r_1_l == r_4_l) and (r_1_s == r_4_s) and (r_1_r == r_4_r):\n        answer = \"YES\"\n    if (r_2_l == r_3_l) and (r_2_r == r_3_r):\n        answer = \"YES\"\n    if (r_2_l == r_4_l) and (r_2_r == r_4_r):\n        answer = \"YES\"\n    if (r_3_l == r_4_l) and (r_3_s == r_4_s) and (r_3_r == r_4_r):\n        answer = \"YES\"\n    if (r_1_l == r_4_l) and (r_1_s == r_4_s) and (r_1_r == r_4_r):\n        answer = \"YES\"\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # my solution\n    # # lines = list(map(lambda x: x.strip(), stdin.split(\"\\n\")))\n    # lines = list(map(lambda x: x.split(), stdin.split(\"\\n\")))\n    # # print(lines)\n
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    road_parts = stdin.splitlines()\n    possible = []\n    for road_part in road_parts:\n        road_part = road_part.split()\n        for i in range(0, len(road_part) - 1, 2):\n            left = road_part[i]\n            right = road_part[i + 1]\n            if left == right == '1':\n                possible.append('YES')\n                break\n            else:\n                possible.append('NO')\n    return '\\n'.join(possible)"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 4:\n        l, s, r, p = list(map(int, stdin.split()))\n\n        if (((l & 1) and not (s & 1)) or ((s & 1) and not (r & 1)) or ((r & 1) and not (p & 1))):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = stdin\n\n    key = set()\n    for i in range(n):\n        key.add(str(i))\n\n    cnt = 0\n    keys = list(key)\n    for i in range(1, n + 1):\n        num_i = str(i)\n        if num_i in keys:\n            continue\n        if (num_i[:-1] in key) or (num_i[1:] in key):\n            keys.append(num_i)\n            cnt += 1\n            if cnt > 1:\n                return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n\n    if n == 1:\n        if stdin == \"09\":\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if n == 2:\n        if stdin == \"911\":\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    return \"NO\""
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if str(i) + str(j) + str(k) == stdin:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def vector(number: str) -> List[int]:\n        return [ord(c) - ord('0') for c in number]\n\n    n, number = stdin.split()\n    if len(number)!= len(set(number)):\n        return 'NO'\n    if len(number) == 1 and int(number) > 9:\n        return 'NO'\n    v = vector(number)\n    for i in range(1, 10):\n        if sorted(vector(str(i))) == v:\n            return 'YES'\n    return 'NO'\n\n\n\n-----Explanation-----\n\nHere are the possible finger movements of the number \"586\" (in a sequence of digits):\n\n'a' = 1\n'b' = -1\n'c' = -2\n'd' = -3\n'e' = -4\n'f' = -5\n'g' = -6\n'h' = -7\n'i' = -8\n'j' = -9\n'k' = 0\n'l' = 1\n'm' = 2\n'n' = 3\n'o' = 4\n'p' = 5\n'q' = 6\n'r' = 7\n's' = 8\n't' = 9\n\nFor the first case, the only number \"a\" that is not \"586\" has a distance of 1 from \"586\" and has the same movements as the number.\n\nFor the second case, the only number \"f\" that is not \"586\" has a distance of 1 from \"586\" and has the same movements as the number.\n\nIf there is only one number with a distance of 1 and the same movements, then \"586\" is \"YES\".\n\nIf there are no such numbers, then \"586\" is \"NO\".\n\nExamples\nInput\n3\n586\n\nOutput\nNO\n\nInput\n2\n09\n\nOutput\nNO\n\nInput\n9\n123456789\n\nOutput\nYES\n\nInput\n3\n911\n\nOutput\nYES\n\n\n'''\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  return 'NO' if not any(any(s == s[::-1] for s in zip(str(n), str(n)[1:])) for n in range(10)) else 'YES'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\ns = stdin\n\na = s[0]\nfor i in range(1, n):\n    if a!= s[i]:\n        break\n    a = s[i]\n\nreturn a == '9'"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(10**(n-1), 10**n):\n        n1, n2 = str(i), str(i+1)\n        if n1 == ''.join(sorted(n1)):\n            if n2 == ''.join(sorted(n2)):\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    num_of_digits = int(stdin[0])\n    phone_number = stdin[1]\n    digits = list(map(int, phone_number))\n    is_correct = True\n    for i in range(1, 10):\n        count = 0\n        for j in range(num_of_digits):\n            if i!= digits[j]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                is_correct = False\n                break\n        if not is_correct:\n            break\n    if is_correct:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For input 1:\n    \"\"\"\n    n = len(stdin)\n    phone_number = stdin\n    phone_number = phone_number.replace(\" \", \"\")\n\n    def key(key):\n        return key.replace(\"0\", \".\")\n    if phone_number == \"\":\n        return \"NO\"\n    # check if we can put in the number\n    if len(phone_number) < 10 or len(phone_number) > 10:\n        return \"NO\"\n    # check if we have the same finger movements\n    for i in range(n - 1):\n        x = int(key(phone_number[i]))\n        y = int(key(phone_number[i + 1]))\n        if x + 1!= y and x - 1!= y:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.split()))\n    k = []\n    l = []\n    for i in range(n):\n        k.append(int(stdin.split()[i*2]))\n        l.append(int(stdin.split()[i * 2 + 1]))\n\n    max_sell = 0\n    day = 0\n    while f > 0:\n        max_sell_on_day = 0\n        for i in range(n):\n            if k[i] > max_sell_on_day and l[i] > 0:\n                max_sell_on_day = k[i]\n            if l[i] > 0:\n                l[i] = l[i] - 1\n        if max_sell_on_day > max_sell:\n            max_sell = max_sell_on_day\n        f = f - 1\n        day = day + 1\n    return str(max_sell)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(len(days)):\n        if days[i] == 0:\n            counter += 2 * days[i - 1]\n        elif days[i] == 1:\n            counter += days[i - 1]\n    return str(counter)\n\nprint(solution(input()))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.split()))\n    k = []\n    for i in range(n):\n        k.append(list(map(int, stdin.split())))\n\n    k.sort(key=lambda x: x[1])\n    s = 0\n    for i in range(n):\n        s += k[i][0] * 2 ** i\n\n    # print(n, f, k, s)\n    # print(s)\n    return str(s)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.strip().split()))\n    k = []\n    l = []\n    for i in range(n):\n        k.append(int(stdin.strip().split()[i]))\n        l.append(int(stdin.strip().split()[i + n]))\n    k.sort(reverse=True)\n    l.sort(reverse=True)\n    ans = 0\n    for i in range(f):\n        ans += k[i]\n        ans += l[i]\n    return str(ans)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, f, n = stdin.split()\n    f = int(f)\n    n = int(n)\n    k = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    l = sorted(l)\n    a = 1\n    c = 0\n    for i in range(1, f + 1):\n        if a + c > n:\n            return a\n        a += l[i]\n        c += 2 * l[i]\n    return a\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    s = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if len(arr) == 0:\n        return str(n)\n    s = n - f + 1\n    q = collections.deque()\n    q.append(arr.pop(0))\n    for i in range(s):\n        q.append(arr.pop(0))\n    p = collections.deque()\n    p.append(arr.pop(0))\n    for i in range(s):\n        p.append(arr.pop(0))\n    return str(sum(q)) + \" \" + str(sum(p))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    days = []\n    for _ in range(n):\n        d, *k = map(int, stdin.split())\n        days.append((d, *k))\n\n    def is_valid(d):\n        for k, l in days:\n            if d >= k and d <= l:\n                return True\n        return False\n\n    products_on_days = {}\n    for day, *k, l in days:\n        products_on_days[day] = products_on_days.get(day, 0) + k\n\n    total_products = sum(products_on_days.values())\n\n    for day, k, l in days:\n        products_on_days[day] = products_on_days.get(day, 0) * 2\n        if day > l:\n            products_on_days[day] = products_on_days.get(day, 0) + (k - l)\n            total_products -= products_on_days[day]\n\n    return total_products\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, f = map(int, stdin[0].split())\n    days = stdin[1:]\n    product_sold = 0\n    days.sort()\n    print(days)\n    for day in days:\n        if day == 0:\n            product_sold += 2 * product_sold\n        else:\n            product_sold += day\n    return product_sold\n\nsolution('''\n4 1\n0 2\n0 3\n3 5\n0 6\n\n''')\n\nsolution('''\n1 1\n0 1\n0 2\n''')\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    result = 0\n    for i in range(n):\n        result += int(f * (i + 1) * (i + 1) / 2)\n    return str(result)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, f = map(int, stdin.split())\n    k, l = [], []\n    for i in range(n):\n        k.append(int(input()))\n        l.append(int(input()))\n    k.sort(reverse=True)\n    l.sort(reverse=True)\n    a = 0\n    for i in range(n):\n        if i!= n-1:\n            if k[i] > 0:\n                a += k[i]\n                k[i] = 0\n            else:\n                a += l[i]\n                l[i] = 0\n        else:\n            a += k[i]\n            if k[i] > 0:\n                k[i] = 0\n    return str(a)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    return str(n - 1) +'' + str(k)\n    \n    "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return 0\n\n    cows = list(range(n))\n    # swap the cows in all stalls\n    for _ in range(k):\n        # get the first stall and a cow from the cow list\n        first_stall, first_cow = cows[0], cows[1]\n        # get the second stall and a cow from the cow list\n        second_stall, second_cow = cows[2], cows[3]\n        # swap them\n        cows[first_stall], cows[second_stall] = first_cow, second_cow\n        cows.pop(3)\n\n    return len(cows)\n\n\"\"\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\nfrom typing import List\n\ndef"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(min(n, k) * k)"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin) - k, 0))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(n - i for i in range(1, n + 1) if n - i > 0) + max(n - j for j in range(i + 1, n + 1) if n - j > 0) + max(\n        n - i for i in range(1, n + 1) if n - i > 0) + max(n - j for j in range(i + 1, n + 1) if n - j > 0))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i > j:\n                res = max(res, (i-1) * (j-i) + j * i)\n    return str(res)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1: return k * 0\n\n    cows = [i for i in range(1, n + 1)]\n    max_messiness = 0\n\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if cows[i] > cows[j]:\n                cows[i], cows[j] = cows[j], cows[i]\n                max_messiness = max(max_messiness, j - i)\n\n    return str(max_messiness)\nprint(solution(input()))"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(swap_cows(n, k))\n\ndef"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    cows = list(range(1, n+1))\n    k_swaps = 0\n    while True:\n        if k_swaps == k:\n            break\n        i = randint(0, n-1)\n        j = randint(0, n-1)\n        if cows[i] > cows[j]:\n            cows[i], cows[j] = cows[j], cows[i]\n            k_swaps += 1\n    return str(sum(cows))"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nn, m, k, l = list(map(int, stdin.split()))"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    if (k + l + m) < n:\n        return \"-1\"\n    coins = sorted(list(set(range(1, n+1))))\n    #print(coins)\n    coins = sorted(coins, reverse=True)\n    #print(coins)\n    #print(coins)\n    i = 0\n    while k + l + m > 0 and i < len(coins):\n        k -= 1\n        l -= 1\n        m -= 1\n        if coins[i] <= k:\n            i += 1\n    if k == 0 and l == 0 and m == 0:\n        return \"1\"\n    return \"-1\""
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = list(map(int, stdin.split()))\n    return str(min(n, m, k, l)) if (n < m < k < n + l) else '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if N >= K + M + L:\n        return str(K + M + L)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        a = list(map(int, stdin.split()))\n        n, m, k, l = a[0], a[1], a[2], a[3]\n        coins = set(range(1, n + 1))\n        coins = sorted(list(coins))\n\n        # print(coins)\n\n        def coin_sum(k: int) -> int:\n            ans = 0\n            for i in range(len(coins)):\n                if coins[i] > k:\n                    return ans\n                ans += coins[i]\n            return ans\n\n        # print(coin_sum(l))\n\n        def coin_diff(k: int) -> int:\n            for i in range(len(coins)):\n                if k < coins[i] + l:\n                    return i\n            return i\n\n        # print(coin_diff(l))\n        if coin_sum(l) <= k and coin_diff(l) <= k:\n            return \"1\"\n        else:\n            return \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    if n < k or m < l:\n        print(-1)\n    else:\n        l -= k\n        if n - l <= m:\n            print(n - l)\n        else:\n            print(-1)\n    return\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\na,b,c,d=map(int,stdin.split(\" \"))\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if not (1 <= N <= 10**18 and 1 <= M <= 10**18 and 1 <= K <= N and 1 <= L <= 10**18):\n        return '-1'\n    coins = [0] * N\n    friends = 0\n    min_coins = -1\n    for i in range(N):\n        coins[i] = int(input())\n    for i in range(M):\n        coins_new = list(map(int, input().split()))\n        if len(set(coins_new)) == len(coins_new):\n            if all(x == coins_new[0] for x in coins_new) and all(x > 0 for x in coins_new):\n                friends += 1\n            elif any(x == coins_new[0] for x in coins_new):\n                if all(x == 0 for x in coins_new) or all(x < 0 for x in coins_new):\n                    friends -= 1\n                elif any(x < 0 for x in coins_new):\n                    friends -= 1\n            if friends == 0:\n                min_coins = min(min_coins, friends)\n    if min_coins == -1:\n        return '-1'\n    else:\n        return str(min_coins)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if '\\n' in stdin:\n        stdin = stdin.splitlines()\n    try:\n        N, M, K, L = map(int, stdin[0].split())\n    except:\n        return -1\n    if N * M > 10 ** 18 or K > N or L > 10 ** 18 or L < K or L < 1:\n        return -1\n    coins_list = list(map(int, input().split()))\n    if len(set(coins_list))!= N:\n        return -1\n    return str(sum([1 for i in range(K) if i in coins_list]) + L)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = list(map(int, stdin.split()))\n    if l >= n and m >= k:\n        return str(min(k, n, l))\n    else:\n        return \"-1\""
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code only for for-loops'''\n\n    n, m = map(int, stdin.split())\n\n    # loop through the input\n    # only white and black cells\n    # initialize the array\n    # each cell is black initially\n    board = [[0] * n for _ in range(m)]\n\n    for i in range(n):\n        for j in range(m):\n            # only the black and white cells\n            # the white cells have already been colored\n            if stdin[i][j] == 'B':\n                board[i][j] = 1\n            elif stdin[i][j] == 'W':\n                board[i][j] = 0\n\n    # print the board\n    for line in board:\n        print(''.join(map(str, line)))\n\n    # for loop\n    # starting point of the paint\n    # starting point of the paint\n    # ending point of the paint\n    # starting point of the paint\n    # starting point of the paint\n\n    for i in range(n):\n        for j in range(m):\n            # black cells\n            if board[i][j] == 1:\n                # starting point of the paint\n                starting_point_row = i\n                starting_point_column = j\n                # ending point of the paint\n                ending_point_row = i\n                ending_point_column = j\n                # starting point of the paint\n                starting_point_row = i\n                starting_point_column = j + 1\n                # ending point of the paint\n                ending_point_row = i\n                ending_point_column = j + 1\n                # starting point of the paint\n                starting_point_row = i + 1\n                starting_point_column = j\n                # ending point of the paint\n                ending_point_row = i + 1\n                ending_point_column = j + 1\n                # starting point of the paint\n                starting_point_row = i + 1\n                starting_point_column = j - 1\n                # ending point of the paint\n                ending_point_row = i + 1\n                ending_point_column = j - 1\n                # if the starting point is black and ending point is white\n                if board[starting_point_row][starting_point_column] == 1 and board[ending_point_row][ending_point_column] == 0:\n                    # paint white\n                    board[i][j] = 0\n                    board[starting_point_row][starting_point_column] = 0\n                    board[ending_point_row][ending_point_column] = 0\n\n    # print the board\n    for line in board:\n        print(''.join(map(str, line)))\n\n    # for loop\n    # starting point of the paint\n    # starting point of the paint\n    # ending point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    # starting point of the paint\n    "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    black_cells = set()\n    white_cells = set()\n\n    for _ in range(n):\n        row = stdin.split()[_]\n        for i in range(len(row)):\n            if row[i] == \"W\":\n                white_cells.add((_, i))\n            if row[i] == \"B\":\n                black_cells.add((_, i))\n\n    if len(black_cells) == len(white_cells):\n        return str(len(black_cells))\n\n    if len(white_cells) == len(black_cells):\n        return str(len(white_cells))\n\n    return \"-\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    mapping = stdin.replace('B', '1').replace('W', '0')\n    return min((n + m - 2 * (n * m + 1) // 2) ** 2, (n + m - 1) ** 2)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [[c for c in stdin[i*m:i*m+m]] for i in range(n)]\n    squares = set()\n    def square(i, j):\n        if (i, j) in squares:\n            return\n        squares.add((i, j))\n        if board[i][j] == 'W':\n            return\n        if board[i][j] == 'B':\n            return\n        if i == j:\n            square(i, j-1)\n        elif i == j+1:\n            square(i, j-1)\n        else:\n            square(i, j-1)\n            square(i, j+1)\n        square(i+1, j)\n        square(i-1, j)\n    for i in range(n):\n        for j in range(m):\n            square(i, j)\n    if len(squares) < n * m:\n        return -1\n    return len(squares)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    square = 0\n    colors = []\n    for _ in range(n):\n        line = stdin.split()[square]\n        for color in line:\n            if color == 'B':\n                colors.append(False)\n            else:\n                colors.append(True)\n        square += 1\n    if all(colors):\n        return '-'\n    if len(colors) % (2*m) == 0:\n        return str(len(colors)//(2*m))\n    if len(colors) % (2*m) == m:\n        return str(len(colors)//(2*m)-1)\n    return '-1'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(\n'''\n10 3\n
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every row of black cells:\n        (i,j) -> (i, j), (i+1, j), (i+1, j+1)... (i+n-1, j+n-1)\n    \"\"\"\n    n, m = map(int, stdin.split())\n    matrix = [[1 if letter == 'B' else 0 for letter in stdin.split()[i]] for i in range(n)]\n    ans = -1\n    for i in range(n):\n        if len(matrix[i]) == 1:\n            continue\n        for j in range(m):\n            if matrix[i][j] == 0:\n                continue\n            black_neighbours = 0\n            up_neighbours = 0\n            for k in range(m):\n                if i == 0:\n                    break\n                if matrix[i-1][k] == 0:\n                    up_neighbours += 1\n                    black_neighbours += 1\n                else:\n                    break\n            for k in range(m-1, -1, -1):\n                if i == n-1:\n                    break\n                if matrix[i+1][k] == 0:\n                    up_neighbours += 1\n                    black_neighbours += 1\n                else:\n                    break\n            for k in range(m):\n                if j == 0:\n                    break\n                if matrix[i][j-1] == 0:\n                    black_neighbours += 1\n                else:\n                    break\n            for k in range(m-1, -1, -1):\n                if j == m-1:\n                    break\n                if matrix[i][j+1] == 0:\n                    black_neighbours += 1\n                else:\n                    break\n            if black_neighbours == up_neighbours:\n                ans = min(ans, black_neighbours)\n    return str(ans) if ans!= -1 else \"N\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if stdin[i] == stdin[j]:\n                res += 1\n                if res > m:\n                    return -1\n    if res > m:\n        return -1\n    return str(m - res)\n    \"\"\"\n    if n == 1 and m == 1:\n        return str(m)\n    else:\n        return str(m-res)\n        \"\"\"\n    \"\"\"\n    def solve(arr):\n        # not enough cells\n        if len(arr) < m:\n            return -1\n        # every row is the same\n        if all(arr[0] == a for a in arr):\n            return m\n        # every column is the same\n        if all(arr[i][0] == a for i, a in enumerate(arr)):\n            return m\n        # check every square\n        res = []\n        for i in range(m-1):\n            for j in range(m-1):\n                if arr[i][j]!= arr[i][j+1] or arr[i][j+1]!= arr[i+1][j]:\n                    return -1\n        for i in range(m-1):\n            for j in range(m-1):\n                res.append(arr[i][j])\n        return m - len(res)\n    \n    def solve_rec(arr):\n        # not enough cells\n        if len(arr) < m:\n            return -1\n        # every row is the same\n        if all(arr[0] == a for a in arr):\n            return m\n        # every column is the same\n        if all(arr[i][0] == a for i, a in enumerate(arr)):\n            return m\n        # check every square\n        res = []\n        for i in range(m-1):\n            for j in range(m-1):\n                if arr[i][j]!= arr[i][j+1] or arr[i][j+1]!= arr[i+1][j]:\n                    return -1\n        for i in range(m-1):\n            for j in range(m-1):\n                res.append(arr[i][j])\n        return m - len(res)\n\n    return str(solve(stdin.split()))\n    \"\"\"\n    \"\"\"\n    def solve(arr):\n        # not enough cells\n        if len(arr) < m:\n            return -1\n        # every row is the same\n        if all(arr[0] == a for a in arr):\n            return m\n        # every column is the same\n        if all(arr[i][0] == a for i, a in enumerate(arr)):\n            return m\n        # check every square\n        res = []\n        for i in range(m-1):\n            for j in range(m-1):\n                if arr[i][j]!= arr[i][j+1] or arr[i][j+1]!= arr[i+1][j]:\n                    return -1\n        for i in range(m-1):\n            for j in range(m-1):\n                res.append(arr[i][j])\n        return m - len(res)\n    \"\"\"\n    def solve(arr):\n        # not enough cells\n        if len(arr) < m:\n            return -1\n        # every row is the same\n        if all(arr[0] == a for a in arr):\n            return m\n        # every column is the same\n        if all(arr[i][0] == a for i, a in enumerate(arr)):\n            return m\n        # check every square\n        res = []\n        for i in range(m-1):\n            for j in range(m-1):\n                if arr[i][j]!= arr[i][j+1] or arr[i][j+1]!= arr[i+1][j]:\n                    return -1\n        for i in range(m-1):\n            for j in range(m-1):\n                res.append(arr[i][j])\n        return m - len(res)\n    \"\"\"\n    def solve(arr):\n        # not enough cells\n        if len(arr) < m:\n            return -1\n        # every row is the same\n        if all(arr[0] == a for a in arr):\n            return m\n        # every column is the same\n        if all(arr[i][0] == a for i, a in enumerate(arr)):\n            return m\n        # check every square\n        res = []\n        for i in range(m-1):\n            for j in range(m-1):\n                if arr[i][j]!= arr[i][j+1] or arr[i][j+1]!= arr[i+1][j]:\n                    return -1\n        for i in range(m-1):\n            for j in range(m-1):\n                res.append(arr[i][j])\n        return m - len(res)\n\n    return str(solve(stdin.split()))\n    \"\"\"\n    def solve(arr):\n        # not enough cells\n        if len(arr) < m:\n            return -1\n        # every row is the same\n        if all(arr[0] == a for a in arr):\n            return m\n        # every column is the same\n        if all(arr[i][0] == a for i, a in enumerate(arr)):\n            return m\n        # check every square\n        res = []\n        for i in range(m-1):\n            for j in range(m-1):\n                if arr[i][j]!= arr[i][j+1] or arr[i][j+1]!= arr[i+1][j]:\n                    return -1\n        for i in range(m-1):\n            for j in range(m-1):\n                res.append(arr[i][j])\n        return m - len(res)\n    \"\"\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n * m < 3:\n        return \"0\"\n    cells = [[stdin[i][j] for j in range(m)] for i in range(n)]\n    start_x = 0\n    start_y = 0\n    x_len = n\n    y_len = m\n    start_x = start_x + 1 if cells[start_x][start_y] == 'B' else start_x\n    start_y = start_y + 1 if cells[start_x][start_y] == 'W' else start_y\n    x_len = x_len - start_x\n    y_len = y_len - start_y\n    if x_len == 1 and y_len == 1:\n        return str(start_x * n + start_y)\n    res = float('inf')\n    for i in range(1, y_len + 1):\n        for j in range(1, x_len + 1):\n            if is_square(start_x, start_y, i, j, x_len, y_len):\n                if color_cells(start_x, start_y, i, j, x_len, y_len):\n                    res = min(res, paint_cells(start_x, start_y, i, j, x_len, y_len))\n    if res == float('inf'):\n        return \"-1\"\n    return str(res)\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    x: List[int] = list(map(int, stdin.split()))\n    y: List[int] = list(map(int, stdin.split()))\n    return \"Yes\" if (x == y) else \"No\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = stdin.split()[1].split(' ')\n    y = stdin.split()[2].split(' ')\n\n    x_piles = []\n    y_piles = []\n\n    for i in range(len(x)):\n        x_piles.append(int(x[i]))\n    for i in range(len(y)):\n        y_piles.append(int(y[i]))\n\n    x_piles = sorted(x_piles)\n    y_piles = sorted(y_piles)\n\n    if x_piles == y_piles:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if the first array is equal to the second one else \"No\"\n'''\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split(\"\\n\")\n    n = int(inputs[0])\n\n    first_stones = list(map(int, inputs[1].strip().split(\" \")))\n    second_stones = list(map(int, inputs[2].strip().split(\" \")))\n\n    count = 0\n    for i in range(n):\n        if count == 0:\n            count = first_stones[i] - second_stones[i]\n        else:\n            count = count + first_stones[i] - second_stones[i]\n    if count == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(input())\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n: int = int(stdin.split()[0])\n  x: list = stdin.split()[1].split()\n  x = list(map(int, x))\n  y: list = stdin.split()[2].split()\n  y = list(map(int, y))\n  if len(x)!= len(y):\n    return \"No\"\n  for i in range(len(x)):\n    if x[i]!= y[i]:\n      return \"No\"\n  return \"Yes\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    y = list(map(int, stdin.split()[2].split()))\n    return 'Yes' if x == y else 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    y = list(map(int, stdin.strip().split()))\n    \n    if n!= len(x) or n!= len(y):\n        return 'No'\n    \n    for i in range(n):\n        if x[i]!= y[i]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    first_list = list(map(int, stdin.split()))\n    second_list = list(map(int, stdin.split()))\n    first_list.sort()\n    second_list.sort()\n\n    if first_list == second_list:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _n = int(stdin.split()[0])\n    _x = [int(i) for i in stdin.split()[1].split()]\n    _y = [int(i) for i in stdin.split()[2].split()]\n    _n_x = sum(_x)\n    _n_y = sum(_y)\n    if (abs(_n_x - _n_y) <= 2) and (sorted(set(_x)) == sorted(_x)) and (sorted(set(_y)) == sorted(_y)):\n        return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_consistent(stdin) else 'No'\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.strip().split()]\n    max_diff = 360\n    for i in range(n):\n        # print(i, a[i])\n        if i!= 0:\n            min_diff = min(min_diff, abs(a[i] - a[i - 1]))\n        if i!= n - 1:\n            min_diff = min(min_diff, abs(a[i] - a[i + 1]))\n    return str(max_diff - min_diff)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_in = list(map(int, stdin.split()))\n    a_in.sort()\n    a_in.append(360)\n    a_in.insert(0, 0)\n    max_dif = 0\n    s_1 = 0\n    s_2 = 0\n    for i in range(n):\n        a_1 = a_in[i]\n        a_2 = a_in[i + 1]\n        dif = abs(a_2 - a_1)\n        if dif > max_dif:\n            max_dif = dif\n            s_1 = a_1\n            s_2 = a_2\n    return str(max_dif)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    res = []\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            res.append(abs(a[i] - a[j]))\n    return str(min(res))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # build the input\n    n = int(stdin.split()[0])\n    angles = stdin.split()[1:]\n    angles = [int(angle) for angle in angles]\n    angles = sorted(angles)\n    angles_dict = {}\n    for i in range(n):\n        angle = angles[i]\n        if angle in angles_dict:\n            angles_dict[angle] += 1\n        else:\n            angles_dict[angle] = 1\n    angles_dict = {key: value for key, value in angles_dict.items() if value > 1}\n    angles_dict = sorted(angles_dict.keys())\n    angles_dict = sorted(angles_dict, reverse=True)\n    angles_dict = {angle: i + 1 for i, angle in enumerate(angles_dict)}\n\n    # build the output\n    out = 0\n    for key in angles_dict.keys():\n        if key - angles_dict[key] == 360:\n            out = out + angles_dict[key] - 1\n            break\n    return str(out)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    angles = list(map(int, stdin.split()[1:]))\n    angles = sorted(angles)\n    index = 0\n    diff = angles[0] - angles[1]\n    i = 2\n    while i < n:\n        if diff > angles[i] - angles[i - 1]:\n            index = i - 1\n            diff = angles[i] - angles[index]\n        i += 1\n    print(diff)\n    return\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n    if n < 1 or n > 360:\n        raise ValueError\n\n    # \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0443\u043c\u043c\u044b \u0432\u0441\u0435\u0445 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043e\u0442 1 \u0434\u043e 360\n    # \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 n\n    # \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n    s = 0\n    for i in range(1, 361):\n        if i % n == 0:\n            s += i\n    print(s)\n\n    # \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 n\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432\n    indexes = []\n    for i in range(1, 361):\n        if i % n == 0:\n            indexes.append(i)\n\n    # \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n    s = 0\n    for i in range(1, 361):\n        if i in indexes:\n            s += i\n    print(s)\n    return str(abs(s - s))"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # a = [90, 90, 90, 90]\n    # n = 4\n    # a = [100, 100, 160]\n    # n = 3\n    # a = [100, 100, 160]\n    min_angle = 360\n    for i in range(n):\n        a[i] %= 360\n    for i in range(1, n - 1):\n        min_angle = min(min_angle, abs(a[i] - a[i - 1]) + abs(a[i] - a[i + 1]))\n    print(min_angle)\n    return min_angle\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    # a = stdin.split()[1].split()\n    a = a[::-1]\n    min_diff = abs(360 - sum(a))\n    a.append(0)\n    a.sort()\n    for i in range(n - 1):\n        min_diff = min(min_diff, abs(360 - sum(a[i:i + 2])), abs(360 - sum(a[i + 2:i + 4])), abs(360 - sum(a[i + 4:])))\n    return str(min_diff)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[:2]\n    d = 360 - a[0] - a[1]\n    if d < 0:\n        return 0\n    return d\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    angles = stdin.split()\n    angles = list(map(int, angles))\n    angles.sort()\n    if n == 1:\n        return 0\n    if n == 2:\n        if angles[0] + angles[1] == angles[2] + angles[3]:\n            return abs(angles[0] - angles[1])\n    if n == 3:\n        angles.sort()\n        if angles[0] + angles[1] == angles[2] + angles[3]:\n            return abs(angles[0] - angles[1])\n\n    def rotate(angles, count):\n        rotated_angles = angles.copy()\n        rotated_angles.sort()\n        if count == 1:\n            if angles[0] + angles[1] == angles[2] + angles[3]:\n                return abs(angles[0] - angles[1])\n            else:\n                return abs(angles[0] - angles[1] - angles[2] + angles[3])\n        if count == 2:\n            if angles[0] + angles[1] == angles[2] + angles[3]:\n                return abs(angles[0] - angles[1] + angles[2] - angles[3])\n            else:\n                return abs(angles[0] - angles[1] - angles[2] + angles[3])\n\n    min_count = (360 - angles[0]) - (angles[0])\n    for i in range(1, len(angles)):\n        count = 0\n        for j in range(1, n):\n            count += abs(angles[i] - angles[i - j])\n            if count > min_count:\n                min_count = count\n        count = 0\n        for j in range(1, n):\n            count += abs(angles[i] - angles[i + j])\n            if count > min_count:\n                min_count = count\n        count = 0\n        if i < len(angles) - 1:\n            for j in range(1, n):\n                count += abs(angles[i] - angles[i - j])\n                if count > min_count:\n                    min_count = count\n                count += abs(angles[i] - angles[i + j])\n                if count > min_count:\n                    min_count = count\n    return min_count\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = (int(i) for i in stdin.split())\n    if n == 1:\n        return 1\n    s = set()\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                s.add((i, j, k))\n    cnt = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if (i, j, k) in s:\n                    continue\n                cnt += 1\n                for l in range(1, n + 1):\n                    for m in range(1, n + 1):\n                        for n in range(1, n + 1):\n                            if (i, j, k) == (l, m, n) or (i, j, k) == (l, n, m) or (j, i, k) == (l, m, n) or (j, i, k) == (l, n, m) or (k, i, j) == (l, m, n) or (k, i, j) == (l, n, m) or (k, j, i) == (l, m, n) or (k, j, i) == (l, n, m):\n                                continue\n                            else:\n                                cnt += 1\n    return str(cnt % (10**9 + 7))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = i * fact[i - 1]\n    res = 0\n    for i in range(m + 1):\n        for j in range(i + 1):\n            k = n - 1 - j\n            res = (res + (fact[k] % (10 ** 9 + 7))) % (10 ** 9 + 7)\n    return str(res)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def has(box, presents):\n        for p in presents:\n            if p in box:\n                return True\n        return False\n\n    def all(box, presents):\n        for p in presents:\n            if p not in box:\n                return False\n        return True\n\n    def equal(presents, box):\n        presents = set(presents)\n        return len(presents.intersection(box)) == len(presents)\n\n    n, m = map(int, stdin.split())\n    box = {n for _ in range(m)}\n    presents = {i for i in range(1, n+1)}\n    count = 0\n    for box in itertools.combinations(presents, m):\n        if equal(box, box) and has(box, presents):\n            count += 1\n    return count % (10**9 + 7)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m > n:\n        return 0\n    if m == 0:\n        return 1\n    if n == 1 and m == 1:\n        return 2\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u043f\u0430\u0440\u043e\u043c \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\n    box_count = {}\n    product_count = {}\n    for i in range(1, n + 1):\n        box_count[i] = 0\n        product_count[i] = 0\n\n    for i in range(m):\n        for j in range(n):\n            if box_count[j] == 0 and product_count[i + 1] == 0:\n                box_count[j] = j + 1\n                product_count[i + 1] = i + 1\n                break\n        else:\n            box_count[i + 1] = i + 1\n            product_count[i + 1] = i + 1\n\n    result = 1\n    for i in range(1, m + 1):\n        result = (result * product_count[i]) % 1000000007\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def c(n, m, mod: int = 10**9 + 7, prefix: List[int] = []):\n        if m == 0:\n            prefix.sort()\n            return prefix[0] if prefix else 0\n        if n == 1:\n            return m if m else 1\n        for i in range(m):\n            if n - 1 < i:\n                break\n            prefix.append(i)\n            res = c(n - 1, m - 1 - i, mod, prefix)\n            prefix.pop()\n            if res:\n                return res\n\n    n, m = map(int, stdin.split())\n    return c(n + 1, m + 1) % mod\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dp = [[0] * n for _ in range(m + 1)]\n    dp[0] = [1] * n\n\n    for i in range(m):\n        for j in range(n):\n            if i == 0:\n                dp[i + 1][j] = dp[i][j]\n            elif j == 0:\n                dp[i + 1][j] = dp[i][j]\n            elif dp[i][j] == 0:\n                dp[i + 1][j] = 0\n            else:\n                dp[i + 1][j] = dp[i][j] + dp[i][j - 1]\n    return dp[-1][-1] % 1000000007\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    presents = [1] * n\n    for i in range(1, m):\n        if n > i:\n            presents[i] += 2 * presents[i - 1]\n        if n < i:\n            presents[i] += 2 * (n - i)\n    return (presents[-1] - 1) % (10 ** 9 + 7)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    n = 2\n    while n <= N:\n        m = M\n        while m <= N:\n            if (n-1) * (m-1) == N:\n                return (n-1) * (m-1)\n            m += 1\n        n += 1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # subset_size[i] is the size of the subsets of i-th kind.\n    subset_size = [0] * (n + 1)\n    # fact[i] is the number of subsets of i-th kind.\n    fact = 1\n    for i in range(1, n + 1):\n        subset_size[i] = subset_size[i - 1] + 1\n        for j in range(i):\n            subset_size[i] = min(subset_size[i], subset_size[j] + subset_size[i - j - 1])\n        fact *= i\n    return fact % (10 ** 9 + 7)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == 0 and m == 0:\n        return \"0\"\n    elif n == 1 and m == 1:\n        return \"1\"\n    else:\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            dp[0][i] = 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return str(dp[n][m])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n + 1):\n        k = n - m\n        if (n + k) % 3 == 0:\n            if m ** 2 + k ** 2 == n:\n                return f\"{m} {k}\"\n    return f\"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(' '.join(str(i) for i in solve_pythagorean_triple(int(stdin))))\n    return None\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    for m in range(1,length+1):\n        for k in range(1,length+1):\n            if m*m+k*k == length*length:\n                return \"1 \" + \"2\"\n    return \"1 -1\""
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n+1):\n        for k in range(1, m+1):\n            if m**2 + k**2 == n**2:\n                return str(m) + \" \" + str(k)\n    return \"-\"\n    \"\"\"\n    if n == 1:\n        return -1\n    if n == 2:\n        return \"4 5\"\n    n2 = n ** 2\n    s = sum(int(i) for i in str(n2))\n    for i in range(1, n2+1):\n        if s == i:\n            for k in range(1, i):\n                if i ** 2 == s - k:\n                    return str(i) + \" \" + str(k)\n    return \"-\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pythagorean_triples = []\n    for i in range(1, int(stdin) + 1):\n        for j in range(1, int(stdin) + 1):\n            k = int(stdin) - i - j\n            if i ** 2 + j ** 2 == k ** 2:\n                pythagorean_triples.append([i, j, k])\n    if len(pythagorean_triples) == 0:\n        return \"-1\"\n    else:\n        return''.join([str(pythagorean_triples[0][0]), str(pythagorean_triples[0][1]), str(pythagorean_triples[0][2])])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    i = 1\n    while i <= n:\n        s = []\n        for j in range(i, n+1):\n            s.append(j)\n        for j in range(i+1, n+1):\n            if n % j == 0:\n                s.append(j)\n        s = set(s)\n        if len(s) > 2:\n            print(i, j)\n            break\n        i += 1\n    if len(s)!= 2:\n        print(i, n+1)\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    max_a = int(10**18)\n    for a in range(max_a):\n        if is_a_pythagorean_triple(a, n):\n            print(a, n)\n            return\n    print(-1)\n    return\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = x.split()\n    n = int(x[0])\n    x = int(x[1])\n    y = int(x/2)\n    if n >= 1 and n <= 10**9:\n        for i in range(1,n+1):\n            if n*i == x or n*i == y:\n                return str(n*i)\n    return \"1 -1\"\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    k = 2\n    if n == 1:\n        return -1\n    while k ** 2 < n:\n        if n % k == 0:\n            m = int(n / k)\n            break\n        k += 1\n    else:\n        m = n\n        k -= 1\n    return '{} {}'.format(m, k)\n\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    modulus = set()\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            modulus.add(i * j)\n    return \"Yes\" if len(modulus) == len(set(modulus)) else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k + 1):\n        if n % i == 0:\n            return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k):\n        if n % i == 0:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if 1 <= n and k <= 10**18 and n % k == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    x = n\n    while True:\n        x += 1\n        if x % k == 0:\n            continue\n        if x % (k - 1) == 0:\n            return 'No'\n        if x % (k + 1) == 0:\n            return 'No'\n        if x % (k + 2) == 0:\n            return 'No'\n        if x % (k + 3) == 0:\n            return 'No'\n        if x % (k + 4) == 0:\n            return 'No'\n        if x % (k + 5) == 0:\n            return 'No'\n        if x % (k + 6) == 0:\n            return 'No'\n        if x % (k + 7) == 0:\n            return 'No'\n        if x % (k + 8) == 0:\n            return 'No'\n        if x % (k + 9) == 0:\n            return 'No'\n        if x % (k + 10) == 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    if all(a%i==0 for i in range(1,b+1)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    for i in range(1, k+1):\n        if n % i == 0:\n            for j in range(1, k+1):\n                if i % j!= 0:\n                    print('No')\n                    return\n            print('Yes')\n            return\n    print('No')\n    return\nsolution()\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.strip().split())\n\np = [i for i in range(1, k+1)]\n\nfor i in range(1, n+1):\n    if p == sorted(p):\n        return \"Yes\"\n    p = [x % i for x in p]\n\nreturn \"No\"\n\nimport sys\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if all(x - y == 0 for x, y in zip(list(map(int, stdin.split())), list(range(1, int(stdin) + 1)))) else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  \n  # check if all remainders are distinct\n  for i in range(1, k + 1):\n    if n % i!= 0:\n      return 'No'\n  return 'Yes'\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a < b:\n        return \"<\"\n    if a > b:\n        return \">\"\n    return \"=\"\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    if a > b:\n        return \">\"\n    elif a < b:\n        return \"<\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.rstrip()\n    b = stdin.rstrip()\n    if a<b:\n        return \"<\"\n    elif a==b:\n        return \"=\"\n    else:\n        return \">\"\n\nsolution(input())\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    return \"=\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    if a > b:\n        return \">\"\n    if a < b:\n        return \"<\"\n    else:\n        return \"=\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    b = b.replace('0', '1')\n    b = b.replace('1', '0')\n    if int(a) > int(b):\n        return '>'\n    if int(a) < int(b):\n        return '<'\n    if int(a) == int(b):\n        return '='\nn = input()\nn = n.replace('0', '1')\nn = n.replace('1', '0')\nprint(n)\nn = n.replace('0', '1')\nn = n.replace('1', '0')\nprint(n)"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a > b:\n        return \">\"\n    elif a < b:\n        return \"<\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\"\\n\"))\n    a = 0\n    b = 0\n    while a < 10 ** 6:\n        if a + b == n:\n            return \"=\"\n        a += 1\n        if a == 10 ** 6:\n            break\n    while b < 10 ** 6:\n        if a + b == n:\n            return \">\"\n        b += 1\n    return \"<\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) > int(stdin.replace(\"0\", \"\")))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    ways = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        ways[i][i] = 1\n    for i in range(n - 1, 0, -1):\n        for j in range(i + 1, n + 1):\n            if c[i] > 0 and c[j] > 0:\n                ways[i][j] = ways[i + 1][j - 1] + ways[i][j - 1]\n            elif c[i] > 0:\n                ways[i][j] = ways[i + 1][j - 1]\n            elif c[j] > 0:\n                ways[i][j] = ways[i][j - 1]\n            else:\n                ways[i][j] = ways[i + 1][j - 1] + ways[i][j - 1]\n    return str(ways[1][n])\n\n\n'''\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = list(map(int, stdin.split()))\n    n_arr = list(map(int, stdin.split()))\n    colors = list(map(int, stdin.split()))\n    n_arr_pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            n_arr_pairs.append((i, j))\n    odd_pairs = []\n    even_pairs = []\n    for i in range(n):\n        if colors[i] == 0:\n            even_pairs.append(i)\n        else:\n            odd_pairs.append(i)\n\n    even_pair_color = [[] for _ in range(n)]\n    odd_pair_color = [[] for _ in range(n)]\n\n    for pair in n_arr_pairs:\n        if pair[0] in odd_pairs:\n            odd_pair_color[pair[0]].append(pair[1])\n        if pair[1] in odd_pairs:\n            odd_pair_color[pair[1]].append(pair[0])\n\n    even_pair_color = [[] for _ in range(n)]\n    odd_pair_color = [[] for _ in range(n)]\n\n    for pair in n_arr_pairs:\n        if pair[0] in even_pairs:\n            even_pair_color[pair[0]].append(pair[1])\n        if pair[1] in even_pairs:\n            even_pair_color[pair[1]].append(pair[0])\n\n    ans = 0\n    for i in range(n):\n        if i in even_pairs:\n            for j in range(n):\n                if j not in even_pairs:\n                    if i == j:\n                        ans += 1\n        elif i in odd_pairs:\n            for j in range(n):\n                if j not in odd_pairs:\n                    if i == j:\n                        ans += 1\n        elif i in even_pair_color[i]:\n            for j in range(n):\n                if j not in even_pairs:\n                    if i == j:\n                        ans += 1\n        elif i in odd_pair_color[i]:\n            for j in range(n):\n                if j not in odd_pairs:\n                    if i == j:\n                        ans += 1\n\n    if p == 0:\n        odd_paths = 0\n        even_paths = 0\n        for i in range(n):\n            if i in even_pairs:\n                odd_paths += len(odd_pair_color[i])\n            if i in odd_pairs:\n                even_paths += len(odd_pair_color[i])\n        ans += (odd_paths * even_paths) % (10**9 + 7)\n    else:\n        odd_paths = 0\n        even_paths = 0\n        for i in range(n):\n            if i in even_pairs:\n                even_paths += len(even_pair_color[i])\n            if i in odd_pairs:\n                odd_paths += len(odd_pair_color[i])\n        ans += (odd_paths * even_paths) % (10**9 + 7)\n\n    return str(ans)\n\nsolution(input())\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = (int(i) for i in stdin.split())\n    colors = sorted(int(i) for i in stdin.split())\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if colors[j] % 2 == colors[i] % 2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n\n    def next_valid(N, C, score):\n        if score == 0:\n            return 0\n        r = 1\n        s = score + 1\n        while s >= 1:\n            if s == 1:\n                r += 1\n            elif s == 0:\n                r += 1\n                break\n            elif s % 2 == 1:\n                r += 1\n            else:\n                r += 1\n            s //= 2\n\n        return r\n\n    cur = 0\n    for c in C:\n        cur = next_valid(N, C, cur)\n    return cur\n\n\n\"\"\"\n\n\"\"\"\nExample 1\nInput\n3 1\n-1 0 1\nOutput\n6\n\n\"\"\"\n\n\"\"\"\nExample 2\nInput\n2 1\n1 0\nOutput\n1\n\n\"\"\"\n\n\"\"\"\nExample 3\nInput\n1 1\n-1\nOutput\n2\n\"\"\"\n\n\"\"\"\nExample 4\nInput\n3 1\n-1 0 1\nOutput\n1\n\n\"\"\"\n\n\"\"\"\nExample 5\nInput\n3 1\n1 1\nOutput\n1\n\n\"\"\"\n\n\"\"\"\nExample 6\nInput\n2 1\n1 1\nOutput\n2\n\n\"\"\"\n\n\"\"\"\nExample 7\nInput\n3 1\n-1 -1 1\nOutput\n2\n\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    p1 = 1\n    p2 = 1\n    m = (10 ** 9) + 7\n\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] = (dp[i + 1] + (dp[i] * p2)) % m\n        if c[i] == 1:\n            p1 = (p1 * p2) % m\n        else:\n            p2 = (p2 * p1) % m\n    print((dp[0] + (dp[n - 1] * p2)) % m)\n    return str(dp[0] + (dp[n - 1] * p2))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, p = map(int, stdin.split())\n  c = list(map(int, stdin.split()))\n  return str(count_ways(n, p, c))\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, p = int(stdin[0]), int(stdin[1])\n    color = list(map(lambda x: int(x) if x >= 0 else -1, stdin[2].split()))\n    return str(solution_naive(n, p, color))\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.reverse()\n    memo = {}\n\n    def dp(i, j):\n        if (i, j) not in memo:\n            if i > j:\n                memo[(i, j)] = 1\n            else:\n                ans = 1\n                for k in range(i, j):\n                    if c[k]!= c[i] and c[k]!= c[j]:\n                        ans = (ans + dp(i, k - 1)) % 1000000007\n                ans = (ans + dp(i + 1, j)) % 1000000007\n                memo[(i, j)] = ans\n        return memo[(i, j)]\n\n    return (dp(0, n - 1)) % 1000000007\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c_even = 0\n    c_odd = 0\n    for i in range(1, n+1):\n        if c[i-1] == 1:\n            c_odd += i\n        elif c[i-1] == 0:\n            c_even += i\n    \n    return (c_odd - c_even + c_odd) % 1000000007\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    colors = [i - 1 for i in colors]\n    a = collections.Counter(colors)\n\n    n_counter = collections.Counter()\n    a_counter = collections.Counter()\n    for i in range(n):\n        n_counter[colors[i]] += 1\n        a_counter[colors[i]] += 1\n    p = 0\n    if n_counter[0] > 1:\n        p += n_counter[0] * (n_counter[0] - 1) // 2\n    if n_counter[1] > 1:\n        p += n_counter[1] * (n_counter[1] - 1) // 2\n    if a_counter[0] > 1:\n        p += a_counter[0] * (a_counter[0] - 1) // 2\n    if a_counter[1] > 1:\n        p += a_counter[1] * (a_counter[1] - 1) // 2\n    if n_counter[2] > 1:\n        p += n_counter[2] * (n_counter[2] - 1) // 2\n    if n_counter[3] > 1:\n        p += n_counter[3] * (n_counter[3] - 1) // 2\n    if a_counter[2] > 1:\n        p += a_counter[2] * (a_counter[2] - 1) // 2\n    if a_counter[3] > 1:\n        p += a_counter[3] * (a_counter[3] - 1) // 2\n    print(p % (10 ** 9 + 7))\n\n\nsolution(input())\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n % (a+b+c) == 0:\n        return \"1\"\n    elif n % (a+b+c) == a:\n        return f\"{(n // a) + 1}\"\n    elif n % (a+b+c) == a+b:\n        return f\"{n // (a+b)}+1\"\n    elif n % (a+b+c) == a+b+c:\n        return f\"{n // (a+b)}+1\"\n    else:\n        return \"0\"\nsolution(input())\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n\n    print(a // 2 + (a % 2) * 2)\n    print(b // 2 + (b % 2) * 2)\n    print(c // 2 + (c % 2) * 2)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if ((n + a) % 4) == 0 and ((n + b) % 4) == 0 and ((n + c) % 4) == 0:\n        return \"1000000000\"\n    elif ((n + a) % 4) == 0 and ((n + b) % 4) == 0 and ((n + c) % 4)!= 0:\n        return str(int((n + a) / 4))\n    elif ((n + a) % 4) == 0 and ((n + b) % 4)!= 0 and ((n + c) % 4) == 0:\n        return str(int((n + a) / 4)) + \" \" + str(int((n + b) / 4))\n    elif ((n + a) % 4)!= 0 and ((n + b) % 4) == 0 and ((n + c) % 4) == 0:\n        return str(int((n + b) / 4)) + \" \" + str(int((n + a) / 4))\n    elif ((n + a) % 4)!= 0 and ((n + b) % 4) == 0 and ((n + c) % 4)!= 0:\n        return str(int((n + a) / 4)) + \" \" + str(int((n + b) / 4)) + \" \" + str(int((n + c) / 4))\n    elif ((n + a) % 4) == 0 and ((n + b) % 4)!= 0 and ((n + c) % 4)!= 0:\n        return str(int((n + a) / 4)) + \" \" + str(int((n + b) / 4)) + \" \" + str(int((n + c) / 4))\n    elif ((n + a) % 4)!= 0 and ((n + b) % 4)!= 0 and ((n + c) % 4)!= 0:\n        return str(int((n + a) / 4)) + \" \" + str(int((n + b) / 4)) + \" \" + str(int((n + c) / 4))\n    else:\n        return \"1000000000\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n + (a + b + c) % 4!= 0:\n        return '0'\n    return str((a + b + c) // 4)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    _, a, b, c = map(int, stdin.split())\n    \n    return str(max(a // (a + b + c), b // (a + b + c), c // (a + b + c)))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(int(min(n, a, b, c)) * (a + b + c) // 4)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if (n + 1) % 4:\n        return '0'\n    if (n + 2) % 4:\n        return '1'\n    if (n + 3) % 4:\n        return '2'\n    return str(min(n + 1, 2 * a, 3 * b, 4 * c))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c % a == 0:\n        return str(a)\n    if c % b == 0:\n        return str(b)\n    if c % c == 0:\n        return str(c)\n    # else:\n    #     return 0\n\nprint(solution(input()))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn, a, b, c = map(int, stdin.split())"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(a * (n // a) + b * (n // b) + c * (n // c))\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    graph = defaultdict(list)\n\n    for i in range(1, m + 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = set()\n    stack = deque()\n    stack.append(1)\n    visited.add(1)\n\n    while stack:\n        vertex = stack.pop()\n        for v in graph[vertex]:\n            if v not in visited:\n                visited.add(v)\n                stack.append(v)\n\n    if len(visited) == n:\n        return \"YES\"\n    return \"NO\"\n\nsolution(\"5 6\")\nsolution(\"7 7\")\nsolution(\"4 4\")\nsolution(\"3 3\")\nsolution(\"1 1\")"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for x in range(m):\n        u, v = (int(x) for x in stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    res = []\n    for x in range(1, n + 1):\n        if len(graph[x]) == 0:\n            res.append(x)\n\n    if len(res) == 0:\n        return \"YES\"\n    if len(res) == 1:\n        return \"NO\"\n\n    res = []\n    for x in res:\n        for y in range(1, n + 1):\n            if x == y:\n                continue\n            if y in graph[x] and x in graph[y]:\n                return \"NO\"\n            if y in graph[x] and x not in graph[y]:\n                graph[y].append(x)\n            if y not in graph[x] and x in graph[y]:\n                graph[x].append(y)\n\n    return \"YES\" if len(res) == 1 else \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    for v in range(n):\n        if v not in graph:\n            return \"YES\"\n    for u in range(n):\n        if not graph[u]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if max(nx.degree(G).values()) > 2 else 'YES'\n\nn, m = map(int, stdin.split())\nG = nx.DiGraph()\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    G.add_edge(a, b)\n    G.add_edge(b, a)\n\nprint(solution(stdin))"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = collections.defaultdict(list)\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for key in graph.keys():\n        if graph.get(key):\n            for elem in graph[key]:\n                if graph.get(elem):\n                    graph[key].remove(elem)\n\n    def is_acyclic(key):\n        visited = set()\n        stack = collections.deque([key])\n        while stack:\n            node = stack.pop()\n            if node in visited:\n                return False\n            visited.add(node)\n            stack.extend(graph[node])\n        return True\n\n    for key in graph.keys():\n        if is_acyclic(key):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\n\nprint(solution(input()))\n\n'''\nfrom collections import defaultdict\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split(' ')))\n    edges = []\n    for _ in range(m):\n        u, v = list(map(int, stdin.strip().split(' ')))\n        edges.append((u, v))\n    return \"YES\" if topological_sort(n, edges) else \"NO\"\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n: int, m: int, vertices: List[int]\n    n, m = map(int, stdin.split())\n    vertices = list(map(int, stdin.split()))\n\n    edges = []\n    for i in range(m):\n        edges.append((vertices[i * 2], vertices[i * 2 + 1]))\n\n    visited = {vertices[0]}\n    for i in range(1, len(vertices)):\n        if i not in visited:\n            visited.add(i)\n            if i in edges:\n                edges.remove(i)\n                break\n    print(\"YES\" if len(edges) == 0 else \"NO\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node: int, parent: int, graph: List[List[int]]) -> bool:\n        nonlocal visited\n        visited.add(node)\n        for i in range(len(graph[node])):\n            if graph[node][i] == parent:\n                continue\n            if i in visited:\n                return False\n            if not dfs(i, node, graph):\n                return False\n        return True\n\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    visited = set()\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(n):\n        if not dfs(i, -1, graph):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # reading the input\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, stdin.split())))\n\n    # code here\n    visited = [False] * n\n\n    def dfs(v):\n        visited[v] = True\n\n        for i in range(n):\n            if not visited[i] and (edges[v][i] == 1 or dfs(i)):\n                return True\n\n        return False\n\n    for i in range(n):\n        if dfs(i):\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    graph = {}\n\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n\n        if u in graph:\n            graph[u].append(v)\n        else:\n            graph[u] = [v]\n\n    remove = []\n    for v in graph:\n        if len(graph[v]) == 1:\n            remove.append(v)\n\n    while remove:\n        u = remove.pop()\n        if u not in graph:\n            continue\n        for v in graph[u]:\n            if v in graph:\n                graph[v].remove(u)\n\n        del graph[u]\n\n    return 'YES' if not graph else 'NO'\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pos = []\n    for i in range(1, n + 1):\n        x, s = map(int, stdin.split())\n        pos.append((x, s))\n    if len(pos) == 1:\n        return \"0\"\n    pos = sorted(pos)\n    ans = 0\n    for i in range(1, m + 1):\n        ans += pos[0][1]\n        if ans < i:\n            return \"0\"\n    return str(ans)\n\n\nprint(solution(input()))\n\nhttps://www.hackerrank.com/challenges/fruzzy/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup&h_r=next-challenge&h_v=zen\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split())\n    antennas = [(i, int(s)) for i, s in enumerate(stdin.split(), 1)]\n\n    antennas.sort(key=lambda x: x[1])\n    last = 0\n\n    for antenna in antennas:\n        if antenna[1] >= last:\n            last = antenna[1] + antenna[1]\n\n    return str(last)"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = \"\"\"\n    #1 1\n    #1 1\n    #\"\"\"\n    n, m = (int(i) for i in stdin.split(\"\\n\"))\n    c = 0\n    for i in range(1, m + 1):\n        if (i * 2) + 1 <= m:\n            c += (i * 2) + 1\n        else:\n            c += i\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    antennas = [(i, int(s)) for i, s in enumerate(stdin.split())]\n    antennas.sort(key=lambda x: (x[1], x[0]))\n    coins = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if antennas[j][1] > antennas[i][0]:\n                coins += 1\n    return str(coins)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    X = []\n    for _ in range(n):\n        X.append(int(input()))\n    P = [[] for _ in range(m+1)]\n    for j in range(n):\n        for i in range(m+1):\n            if i+X[j] <= m:\n                P[i+X[j]].append(j+1)\n    x=1\n    s=0\n    for i in range(m+1):\n        if len(P[i])!= 0:\n            s += i\n            for j in range(len(P[i])):\n                x = max(x, P[i][j])\n    if x == 1:\n        print(s)\n    else:\n        print(s+x)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x, s = list(map(int, stdin.strip().split()))\n    return str(min(m, max(x + s, 0)))"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_intervals(x: int, s: int) -> List[Tuple[int, int]]:\n        return [(x - s, x), (x, x + s)]\n\n    n, m = map(int, stdin.split())\n    if n == 1 or m == 1:\n        return str(0)\n\n    intervals = []\n    for i in range(n):\n        x, s = map(int, stdin.split())\n        intervals.extend(get_intervals(x, s))\n    intervals.sort()\n\n    coins = 0\n    total = 0\n    for start, end in intervals:\n        total += 1\n        if total <= m:\n            continue\n        coins += 1\n        total -= 1\n    return str(coins)"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ranges = []\n    for i in range(n):\n        x, s = map(int, stdin.split())\n        ranges.append((x, s))\n\n    min_coins = 0\n    for r in ranges:\n        if r[0] - r[1] > m:\n            continue\n        else:\n            min_coins += r[0] - r[1] + min(r[0] + 1, m)\n    return str(min_coins)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # XXX: You can just use the arithmetic progression here.\n    for x, s in zip(range(1, m + 1), range(1, m + 1)):\n        if x % s!= 0:\n            print(\"Impossible\")\n            return\n    print(min((x + s) // 2 for x, s in zip(range(1, m + 1), range(1, m + 1))))\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    n = set(map(int, stdin.split()))\n    \n    for i in range(1, 8):\n        if n.pop() == 0:\n            n.add(0)\n    \n    while sum(n)!= 0:\n        for i in range(1, 9):\n            if n.pop() == 0:\n                n.add(0)\n    \n    return str(sum(n))"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    n = int(lines[0])\n    items = list(map(int, lines[1].split()))\n\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][i] = items[i-1]\n        for j in range(i+1, n+1):\n            dp[i][j] = max(dp[i][j-1], dp[i][j-1] + items[j-1])\n\n    print(dp[1][n])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    weights = map(int, stdin.split())\n    weights = list(weights)\n    weights.sort()\n    max_weight = max(weights)\n    if max_weight <= 0:\n        return 0\n    # print(max_weight)\n    weights.sort(reverse=True)\n    # print(weights)\n    max_weight_set = 0\n    for i in range(1, max_weight + 1):\n        if weights[0] <= i:\n            max_weight_set += 1\n    return str(max_weight_set)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    weights = list(map(int, stdin.strip().split()))\n\n    max_weight = 0\n    for i in range(len(weights)):\n        total_weight = 0\n        for j in range(i, len(weights)):\n            total_weight += weights[j]\n            if total_weight > max_weight:\n                max_weight = total_weight\n                break\n\n    return max_weight\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    weights = stdin.split()\n    W = int(weights.pop(0))\n    items = int(weights.pop(0))\n\n    # for item in weights:\n    #     items += 1\n    #     if items > items > 8:\n    #         return -1\n\n    # print(weights)\n\n    # max_item_weight = 0\n    # if items == 0:\n    #     return max_item_weight\n    # else:\n    #     while items > 0:\n    #         item = int(weights.pop(0))\n    #         if item > 8:\n    #             return max_item_weight\n    #         else:\n    #             max_item_weight += item\n    #             items -= 1\n\n    # return max_item_weight\n    return max([int(weights.pop(0)) for i in range(items) if int(weights.pop(0)) <= W])"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    max_weight = data[0]\n    items = data[1:]\n    max_weight = max_weight + max_weight\n    for item in items:\n        max_weight = max_weight - item\n    return max_weight"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    arr = stdin.split('\\n')\n    for i in range(len(arr)):\n        arr[i] = arr[i].split()\n    weight = int(arr[0][0])\n    list_of_items = arr[1]\n    good_set = []\n    for i in range(len(list_of_items)):\n        good_set.append(int(list_of_items[i]))\n    print(good_set)\n    good_set.sort()\n    print(good_set)\n    good_set.reverse()\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n    print(good_set)\n    good_set.append(0)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return: the maximum possible weight of a good subset of items\n    '''\n    # Your code here\n    # read in the input\n    n, w = map(int, stdin.split())\n    item_weights = map(int, stdin.split())\n    item_weights = sorted(item_weights)\n    # initialize\n    result = 0\n    temp_result = 0\n    # loop through the array\n    for i in range(n):\n        if item_weights[i] < w:\n            temp_result = item_weights[i] + temp_result\n            w = w - item_weights[i]\n        else:\n            w = w\n        if temp_result > result:\n            result = temp_result\n        if w == 0:\n            break\n    # print result\n    print(result)\n    return \"\""
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = stdin.split()\n    n = int(n)\n    L = int(L)\n    print(2 ** n - 1)\n    return\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    cost = list(map(int, stdin.split()))\n    ans = float('inf')\n\n    for i in range(2 ** n):\n        j = i\n        c = 0\n        while j!= 0:\n            if j % 2 == 1:\n                c += cost[i // 2]\n            j = j // 2\n        if c <= L:\n            ans = min(ans, c)\n\n    return str(ans)"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    # print(t)\n    n, l = map(int, stdin.split())\n    # print(n, l)\n    # print(sum(pow(2,i) for i in range(n)))\n    # print(sum(l*pow(2,i) for i in range(n)))\n    # print((sum(l*pow(2,i) for i in range(n))))\n    # print(n*pow(2,n))\n    # print((l*pow(2,n)))\n    # print(pow(2,n))\n    return (sum(l*pow(2,i) for i in range(n)))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    h = 1\n    t = 0\n\n    while True:\n        h += 1\n        s = 0\n        for i in range(n):\n            if (2 ** i) - 1 <= h:\n                s += c[i]\n        if s > L:\n            continue\n        elif s == L:\n            break\n        else:\n            print(h, s)\n            break\n    return str(h)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    cost_and_vol = []\n    for i in range(n):\n        cost_and_vol.append([c[i], 2 ** i - 1])\n    cost_and_vol.sort()\n\n    def sol(L):\n        money = 0\n        volume = 0\n        for elem in cost_and_vol:\n            if volume + elem[1] <= L:\n                volume += elem[1]\n            else:\n                break\n        for elem in cost_and_vol:\n            if volume + elem[1] == L:\n                volume += elem[1]\n                money += elem[0]\n                break\n            elif volume + elem[1] > L:\n                money += (L - volume) * elem[0]\n                volume = L\n        return money\n    return str(sol(L))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(find_min_cost(n, L, c))\n\n\ndef"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    # \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u0442\u0435\u043a\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n    k = max(c)\n    stack = []\n    for i in range(k + 1):\n        stack.append(0)\n\n    for i in range(k + 1):\n        stack[i] = c.pop(0)\n        if len(stack) > L:\n            while stack[-1] == stack[-2]:\n                stack.pop(-1)\n                stack.pop(-1)\n\n    return str(len(stack) - 1)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    costs = list(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        costs[i] += costs[i - 1]\n    m = 0\n    for i in range(2, n + 1):\n        m = max(m, costs[i] - costs[i - 1])\n    return (L - m) * n + sum(costs[1:-1])"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    dp = []\n    dp.append(0)\n    for i in range(1, n):\n        dp.append(max(dp[i-1] + c[i-1], c[i] + dp[i-2]))\n    return str(dp[n-1])\n    # Your code here"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    dp = {}\n    dp[0] = 0\n    dp[1] = c[0]\n    dp[2] = c[0] + c[1]\n    dp[3] = max(c[0] + c[1] + c[2], c[0] + c[2])\n    for i in range(4, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + c[i - 1], dp[i - 3] + c[i - 2] + c[i - 3])\n    print(dp[n])\n    return\n\n\nsolution()\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split()\n    n = int(_[0])\n    lst = list(_[1:])\n    mx = max(lst)\n    if n == 1:\n        return str(mx)\n    for i in range(n):\n        if i == 0:\n            continue\n        if lst[i - 1] <= mx:\n            continue\n        else:\n            lst[i] = lst[i - 1]\n            lst[i - 1] = mx\n    return str(max(lst))"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    def get_mex(a):\n        a = list(a)\n        a.sort()\n        a.reverse()\n        return a\n    return max(get_mex(arr))\nsolution(input())"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    max_value = max(arr)\n    min_value = min(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n        max_value = max(max_value, arr[i])\n    if min_value < max_value:\n        print(max_value)\n    else:\n        print(max_value + 1)\n\n\nsolution(input())\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    array = list(map(int, stdin.splitlines()[1]))\n\n    # Define a function that returns the maximum achievable value, if the value is a duplicate\n    def max_of(a):\n        a.sort()\n        for i in range(len(a)):\n            if i + 1 < len(a) and a[i] == a[i + 1]:\n                return a[i]\n        return 0\n\n    # Define a function that returns the maximum achievable value, if the value is not a duplicate\n    def max_of_not_duplicate(a):\n        a.sort()\n        if a[0] > 0:\n            return a[0]\n        else:\n            return max(a)\n\n    # Return the maximum achievable value\n    return max_of_not_duplicate(array)"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    mex = []\n    for i in range(1, n):\n        mex.append(a[i])\n        mex.append(min(a[i], mex[i-1]))\n    print(max(mex))\nsolution(input())"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n    # input_array = stdin[1:]\n    # input_array = list(map(int, input_array))\n    # max_value = max(input_array)\n    # for i in range(len(input_array)):\n    #     if input_array[i] > max_value:\n    #         input_array[i] = max_value\n    #     elif input_array[i] < max_value:\n    #         input_array[i] = max_value\n    # return max(input_array)\n    return max(stdin[1:])"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, *a] = list(map(int, stdin.split()))\n    return str(min(a))"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    mex = 0\n    for i in range(n):\n        if stdin[i] > mex:\n            mex = stdin[i]\n    return str(mex)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    res = float('inf')\n    for i in range(n):\n        maxi = a[i]\n        for j in range(i + 1, n):\n            if a[j] < maxi:\n                maxi = a[j]\n        res = min(maxi, res)\n    return str(res)"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = list(map(int, stdin.strip().split()))\n    mex = 0\n    for i in range(n):\n        mex = max(mex, array[i])\n        j = array.index(mex)\n        array[j] -= 1\n    return str(max(array))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    num = list(map(int, a[1]))\n    m = num[0]\n    t = num[1:]\n    d = {num[i]: i for i in range(n)}\n    for i in t:\n        if m!= i:\n            return \"NO\"\n        m -= i\n        if m in d:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import gcd\ndef"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    ticket: str = stdin.strip()\n    segment_sum: int = int(sum(map(int, ticket)) / 2)\n    if sum(map(int, ticket)) % 2!= 0:\n        return \"NO\"\n    tickets = [ticket[i:i + 2] for i in range(0, n, 2)]\n    ticket_matrix = []\n    for ticket in tickets:\n        ticket_matrix.append([int(ticket[0]), int(ticket[1])])\n    ticket_matrix.sort(key=lambda x: x[0])\n    ticket_matrix.sort(key=lambda x: x[1])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ticket_matrix[i][0] + ticket_matrix[j][0] == segment_sum or ticket_matrix[i][1] + ticket_matrix[j][1] == segment_sum:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(stdin)\n\n    # if the len of a is not equal to n: it means there is no golden ticket\n    if len(a)!= n:\n        return 'NO'\n\n    # We create a list to keep track of the diff between each element in a and its index\n    l = list()\n    for i in range(n):\n        l.append(a[i] - i)\n\n    # We sort the list in descending order\n    l.sort(reverse=True)\n    # print(l)\n\n    # We create a list of 3 elements which are the two indexes with the largest difference\n    lst = [l[0], l[1]]\n\n    # print(lst)\n\n    for i in range(2, n):\n        # We check if we have two elements with the same difference: if we do, we continue\n        # if we dont, we need to check if we need to create a new index\n        if lst[-1] == l[i]:\n            # if we need to create a new index, we change the lst\n            lst.append(l[i])\n        else:\n            # if we don't need to create a new index, we check if the difference between elements is larger than one\n            if lst[-1] - l[i] > 1:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    sum_a = sum(int(i) for i in a)\n    if sum_a % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in range(n):\n        sum += int(stdin[i])\n    if sum % 2 == 0:\n        return 'NO'\n    else:\n        for i in range(1, n):\n            if sum % 2 == 0:\n                return 'YES'\n            sum = sum - int(stdin[i-1]) + int(stdin[i])\n            \n        return 'NO'\n\nstdin = input()\nprint(solution(stdin))\n\n\n2\n1248\n\nOutput\nYES\n\n3\n1247\n\nOutput\nYES\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = list(map(int, stdin.split()))\n    if is_sum_of_two_segments(ticket):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = list(map(int, stdin.split()))\n    # print(ticket)\n    m = len(ticket)\n    # print(m)\n    # print(ticket[0], ticket[1], ticket[2])\n    if m == n:\n        for i in range(0, n):\n            if ticket[i] % 2 == 0 and sum(ticket[i + 1:]) % 2 == 0:\n                print(\"YES\")\n                return\n        print(\"NO\")\n        return\n    else:\n        print(\"NO\")\n        return\n    # print(ticket)\n    for i in range(1, m):\n        # print(ticket[i], ticket[i - 1])\n        if ticket[i] == ticket[i - 1]:\n            return\n        else:\n            pass\n    if n == 3 and m == 2:\n        print(\"YES\")\n        return\n    print(\"NO\")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    user = stdin.lower()\n    distinct_user = set(user)\n    if len(distinct_user) % 2!= 0:\n        return \"IGNORE HIM!\"\n    else:\n        return \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    num_chars = 0\n    for c in s:\n        if c.isalpha():\n            num_chars += 1\n        else:\n            num_chars = 0\n        if num_chars % 2 == 1:\n            print(\"IGNORE HIM!\")\n        else:\n            print(\"CHAT WITH HER!\")\n        num_chars = 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = stdin.split()\n    res = sorted(set(res), key=len)\n    if len(res) % 2 == 0:\n        return 'CHAT WITH HER!'\n    else:\n        return 'IGNORE HIM!'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    distinct_characters = set()\n    for character in stdin:\n        distinct_characters.add(character)\n    if len(distinct_characters) % 2 == 1:\n        return 'CHAT WITH HER!'\n    else:\n        return 'IGNORE HIM!'\n\nprint(solution(input()))"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    male = 0\n    female = 0\n    for i in stdin_list:\n        if len(i) % 2 == 1:\n            male += 1\n        else:\n            female += 1\n    if female > male:\n        return \"IGNORE HIM!\"\n    elif female == male:\n        return \"CHAT WITH HER!\"\n\n\"\"\"\ndef"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('wjmzbmr')\n    'CHAT WITH HER!'\n    >>> solution('xiaodao')\n    'IGNORE HIM!'\n    >>> solution('sevenkplus')\n    'CHAT WITH HER!'\n    \"\"\"\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 == 1 else 'IGNORE HIM!'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.lower()\n    count = {}\n    for i in range(len(string)):\n        if string[i] not in count.keys():\n            count[string[i]] = 1\n        else:\n            count[string[i]] += 1\n    if len(count) % 2 == 1:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 2:\n        return stdin\n    count_odd = 0\n    for i in range(n):\n        if i % 2 == 1:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return stdin\n    elif count_odd % 2 == 1:\n        return stdin[0] +'' + stdin[1]\ndef"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    distinct_char = []\n    for char in stdin:\n        if char not in distinct_char:\n            distinct_char.append(char)\n    if len(distinct_char) % 2!= 0:\n        print(\"IGNORE HIM!\")\n    else:\n        print(\"CHAT WITH HER!\")"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(stdin)\n    n, k = list(map(int, stdin.split()))\n    tabs = list(map(int, stdin.split()))\n    tabs.sort()\n\n    if tabs[k - 1] == -1:\n        tabs.remove(tabs[k - 1])\n    tabs.sort()\n    return str(tabs[0])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    k = min(k, n - 1)\n    tabs = sorted(tabs)\n    remaining = []\n    for i in range(1, n + 1):\n        if tabs[i - 1] == 1:\n            remaining.append(i)\n    if k > 1:\n        remaining = remaining[:k]\n    e = remaining[0] - n\n    s = sum(tabs)\n    return abs(e - s)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs.sort()\n    ans = 0\n    while k > 0:\n        if tabs[-1] == 1:\n            tabs.pop()\n            k -= 1\n        else:\n            tabs.pop()\n            tabs.pop()\n            k -= 2\n    for i in range(len(tabs)):\n        if tabs[i] == 1:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    social_tabs = list(map(int, stdin.split()))\n    test_tabs = list(map(int, stdin.split()))\n    social_tabs.sort()\n    test_tabs.sort()\n    e = 0\n    s = 0\n    for i in range(n):\n        if test_tabs[i] == 1:\n            e += 1\n            test_tabs[i] = -1\n        elif social_tabs[i] == 1:\n            s += 1\n            social_tabs[i] = -1\n    return abs(e - s)\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, k, n = map(int, stdin.split())\n    tabs_opened = list(map(int, stdin.split()))\n\n    tabs_opened_ = []\n    tabs_remaining = []\n\n    for i in range(1, n):\n        if tabs_opened[i] == 1:\n            tabs_opened_.append(i)\n        else:\n            tabs_remaining.append(i)\n\n    tabs_opened_ = sorted(tabs_opened_)\n    tabs_remaining = sorted(tabs_remaining)\n\n    def calculate_amount_remaining(tabs):\n        amount = 0\n        for tab in tabs:\n            amount += tab\n        return amount\n\n    tabs_opened_ = calculate_amount_remaining(tabs_opened_)\n    tabs_remaining = calculate_amount_remaining(tabs_remaining)\n\n    if tabs_opened_ <= k:\n        return tabs_remaining - tabs_opened_\n    else:\n        k = k - (len(tabs_opened_) - 1)\n\n    tabs_remaining = sorted(tabs_remaining)\n    tabs_opened_ = sorted(tabs_opened_)\n\n    abs_diff = 0\n    for i in range(len(tabs_remaining)):\n        diff = abs(tabs_remaining[i] - tabs_opened_[i])\n        if i == 0:\n            abs_diff = diff\n        elif diff > abs_diff:\n            abs_diff = diff\n\n    return abs_diff\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n, k = [int(i) for i in lines[0].split()]\n    tab_types = [int(i) for i in lines[1].split()]\n\n    if 1 not in tab_types:\n        return str(abs(n - sum(tab_types)))\n\n    tab_types.sort()\n    tab_types.reverse()\n    tab_types.append(1)\n\n    tabs = {}\n\n    for i in tab_types:\n        tabs[i] = []\n\n    for i in range(n):\n        tabs[tab_types[i]].append(i+1)\n\n    max_diff = 0\n\n    for i in range(len(tab_types)):\n        tab_to_delete = tabs[tab_types[i]][k]\n        tabs[tab_types[i]] = tabs[tab_types[i]][:k]\n        tabs[tab_types[i]].append(i+1)\n\n        if tab_to_delete - i - 1 in tabs:\n            tabs[tab_to_delete - i - 1].remove(tab_to_delete)\n            tabs[tab_to_delete - i - 1].append(i+1)\n            max_diff = max(max_diff, abs(tab_to_delete - i - 1 - tab_to_delete + 1))\n        else:\n            tabs[tab_to_delete - i - 1] = [tab_to_delete, i+1]\n\n            if tab_to_delete - i - 1 in tabs and len(tabs[tab_to_delete - i - 1]) > 1:\n                tabs[tab_to_delete - i - 1][1] = tab_to_delete\n            else:\n                tabs[tab_to_delete - i - 1].append(i+1)\n\n    return str(max_diff)\n\n\n\nsolution(\"4 2\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\\n\")"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tabs_amount, tab_closing_distance = map(int, stdin.split())\n    tabs_closed_info = stdin.split('-')\n    tabs_info = []\n    for tab in tabs_closed_info:\n        if tab == '1':\n            tabs_info.append([True, True])\n        elif tab == '-1':\n            tabs_info.append([True, False])\n        elif tab == '0':\n            tabs_info.append([False, False])\n\n    tabs_info.sort(key=lambda x: x[1])\n\n    tabs_info = [True if x[0] else False for x in tabs_info]\n\n    tabs_info = list(zip(tabs_info, range(1, tabs_amount + 1)))\n\n    tabs_info.sort(key=lambda x: x[0], reverse=True)\n\n    tabs_info = list(zip(tabs_info, range(1, tabs_amount + 1)))\n\n    tabs_info_e = list(filter(lambda x: x[1] == 1, tabs_info))\n    tabs_info_s = list(filter(lambda x: x[1] == 0, tabs_info))\n\n    tabs_info_e = list(map(lambda x: x[0], tabs_info_e))\n    tabs_info_s = list(map(lambda x: x[0], tabs_info_s))\n\n    tabs_info_e.sort(reverse=True)\n    tabs_info_s.sort(reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e.sort(key=lambda x: x[0], reverse=True)\n    tabs_info_s.sort(key=lambda x: x[0], reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e = list(filter(lambda x: x[0]!= 0, tabs_info_e))\n    tabs_info_s = list(filter(lambda x: x[0]!= 0, tabs_info_s))\n\n    tabs_info_e = list(map(lambda x: x[1], tabs_info_e))\n    tabs_info_s = list(map(lambda x: x[1], tabs_info_s))\n\n    tabs_info_e.sort(reverse=True)\n    tabs_info_s.sort(reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e.sort(key=lambda x: x[0], reverse=True)\n    tabs_info_s.sort(key=lambda x: x[0], reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e = list(filter(lambda x: x[0]!= 0, tabs_info_e))\n    tabs_info_s = list(filter(lambda x: x[0]!= 0, tabs_info_s))\n\n    tabs_info_e = list(map(lambda x: x[1], tabs_info_e))\n    tabs_info_s = list(map(lambda x: x[1], tabs_info_s))\n\n    tabs_info_e.sort(reverse=True)\n    tabs_info_s.sort(reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e.sort(key=lambda x: x[0], reverse=True)\n    tabs_info_s.sort(key=lambda x: x[0], reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e = list(filter(lambda x: x[0]!= 0, tabs_info_e))\n    tabs_info_s = list(filter(lambda x: x[0]!= 0, tabs_info_s))\n\n    tabs_info_e = list(map(lambda x: x[1], tabs_info_e))\n    tabs_info_s = list(map(lambda x: x[1], tabs_info_s))\n\n    tabs_info_e.sort(reverse=True)\n    tabs_info_s.sort(reverse=True)\n\n    tabs_info_e = list(zip(tabs_info_e, range(1, tabs_amount + 1)))\n    tabs_info_s = list(zip(tabs_info_s, range(1, tabs_amount + 1)))\n\n    tabs_info_e.sort(key=lambda x: x[0], reverse=True)\n    tabs_info_s.sort(key=lambda x: x[0], reverse=True)\n\n    tabs_info_e = list("
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs.sort()\n\n    e = tabs.pop(0)\n    s = 0\n    for i, tab in enumerate(tabs):\n        if tab > e:\n            s += e - tab\n        else:\n            e = tab\n    return abs(e - s)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    s = 0\n    e = 0\n    for i in range(n):\n        if tabs[i] > 0:\n            e += 1\n        else:\n            s += 1\n    diff = abs(e - s)\n    if diff <= k:\n        return str(diff)\n    else:\n        for i in range(n):\n            if tabs[i] > 0:\n                e += 1\n                tabs[i] = 0\n            else:\n                s += 1\n                tabs[i] = 1\n            diff = abs(e - s)\n            if diff <= k:\n                return str(diff)"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    t1 = n * (n + 1) / 2\n    t2 = n - k\n    if k >= n - 1:\n        return abs(t2 - t1)\n    else:\n        return abs(t2 - t1 - n * (k - 1))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = list(map(int, stdin.split()))\n    alphabet = ''\n    for i in range(n):\n        if (c_0 == 0) or (c_1 == 0):\n            return '0'\n        if (c_0 == 1) and (c_1 == 1):\n            alphabet += '1'\n            c_0 = 0\n            c_1 = 0\n        elif (c_0 == 1):\n            alphabet += '0'\n            c_0 = c_0 - 1\n        elif (c_1 == 1):\n            alphabet += '1'\n            c_1 = c_1 - 1\n    return alphabet"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    c0 = int(stdin.split()[1])\n    c1 = int(stdin.split()[2])\n    return (c0 + c1) * N\n\nprint(solution(input()))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c0 = int(stdin.split()[1])\n    c1 = int(stdin.split()[2])\n\n    if n == 1:\n        if c0 < c1:\n            return str(c0)\n        else:\n            return str(c1)\n\n    return str(min(n * c0, n * c1) + solution(stdin.split()[3]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, c_0, c_1 = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    min_cost = 10**8\n    for i in range(1 << n):\n        cost = 0\n        for j in range(n):\n            if i & (1 << j):\n                cost += c_1\n            else:\n                cost += c_0\n        min_cost = min(min_cost, cost)\n    return min_cost"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    s = sorted([int(c) for c in '{0:0b}'.format(n)])\n    return str(sum(c_0*s[i] + c_1*s[i+1] for i in range(len(s)-1)))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = map(int, stdin.split())\n    x = 0\n    for i in range(1 << n):\n        a, b = 0, 0\n        for j in range(n):\n            if i & (1 << j):\n                a += c0\n            else:\n                a += c1\n            if j!= n-1:\n                b += a * (c0+c1)\n        if a < b:\n            x = min(x, b)\n        else:\n            x = min(x, a)\n    return x\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse stdin\n    n, c_0, c_1 = list(map(int, stdin.split()))\n    # brute force:\n    # 1) dp[i] := minimum cost of encoding i\n    # 2) dp[i] = max(1, dp[i-1] + c_1) if n = 1\n    # 3) dp[i] = max(2, dp[i-1] + c_0) if n = 2\n    # 4) dp[i] = max(3, dp[i-1] + c_1) if n = 3\n    # 5) dp[i] = max(4, dp[i-1] + c_0) if n = 4\n    # 6) if n = i\n    #   dp[i] = max(1, dp[i-1] + c_1) if i = 1\n    #   dp[i] = max(2, dp[i-1] + c_0) if i = 2\n    #   dp[i] = max(3, dp[i-1] + c_1) if i = 3\n    #   dp[i] = max(4, dp[i-1] + c_0) if i = 4\n    #   if n = i\n    #     dp[i] = max(1, dp[i-1] + c_1) if i = 1\n    #     dp[i] = max(2, dp[i-1] + c_0) if i = 2\n    #     dp[i] = max(3, dp[i-1] + c_1) if i = 3\n    #     dp[i] = max(4, dp[i-1] + c_0) if i = 4\n    dp = [c_0 + c_1] + [c_0 + c_1] * (n - 1)\n    for i in range(1, n + 1):\n        dp[i] = max(1, dp[i - 1] + c_1)\n        dp[i] = max(2, dp[i - 1] + c_0)\n        dp[i] = max(3, dp[i - 1] + c_1)\n        dp[i] = max(4, dp[i - 1] + c_0)\n    # print(dp)\n    # print(dp[-1])\n    return dp[-1]\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    c_0, c_1 = c_0 + c_1, c_0 + c_1\n    arr = []\n    for i in range(n):\n        arr.append('{0:02b}'.format(i))\n    arr = sorted(arr)\n    arr = ['0'] + arr\n    costs = [c_0] + [c_1] * (n - 1)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(n + 1):\n            if j - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + costs[i - 1])\n            if j < i:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + costs[i - 1])\n    return str(dp[n][n])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = stdin.split()\n    n = int(n)\n    c_0 = int(c_0)\n    c_1 = int(c_1)\n    a = [c_0]*n\n    b = [c_1]*n\n    c = list(itertools.product(a,b))\n    result = 0\n    for i in c:\n        result += i[0]*c_0 + i[1]*c_1\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, c0, c1 = stdin.split()\n    n, c0, c1 = int(n), int(c0), int(c1)\n\n    c = (2 * c0 + 2 * c1) * (n // 4)\n    c = c if n % 4 == 0 else c + (n % 4)\n\n    return str(c)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n    5 1 4 3 2\n    ''')\n    'YES'\n    '''\n    numStations = int(stdin.split()[0])\n    stationA = int(stdin.split()[1])\n    stationB = int(stdin.split()[2])\n    stationC = int(stdin.split()[3])\n    stationD = int(stdin.split()[4])\n    \n    if stationB == stationC:\n        return \"NO\"\n    \n    if stationD == stationC:\n        return \"NO\"\n    \n    if stationD == stationB:\n        return \"NO\"\n    \n    if stationB == stationA:\n        return \"YES\"\n    \n    if stationD == stationA:\n        return \"YES\"\n    \n    return \"NO\"\n        \n    \n    \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if (x == i or y == i) and (x!= y or x == i - 1) and (x == n or y == n):\n            return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a, x, b, y = map(int, stdin.split())\n    if a == b == x == y:\n        return \"YES\"\n    if x == y:\n        if x == n:\n            return \"YES\"\n        if x == a:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if x == n - 1:\n        return \"YES\"\n    if x == a - 1:\n        return \"YES\"\n    if x == b - 1:\n        return \"YES\"\n    if x == y - 1:\n        return \"YES\"\n    if x == n - 2:\n        return \"YES\"\n    if x == a - 2:\n        return \"YES\"\n    if x == b - 2:\n        return \"YES\"\n    if x == y - 2:\n        return \"YES\"\n    if x == n - 3:\n        return \"YES\"\n    if x == a - 3:\n        return \"YES\"\n    if x == b - 3:\n        return \"YES\"\n    if x == y - 3:\n        return \"YES\"\n    if x == n - 4:\n        return \"YES\"\n    if x == a - 4:\n        return \"YES\"\n    if x == b - 4:\n        return \"YES\"\n    if x == y - 4:\n        return \"YES\"\n    return \"NO\"\n\n\n\nstdin = \"\"\"\n3 1 4 3 2\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = (int(i) for i in stdin.split())\n    if x==y:\n        return 'NO'\n    for a,b in zip(range(a,n+1),range(b,n+1)):\n        if a==b:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, a, x, b, y = map(int, stdin.split())\n    if x < y:\n        return \"NO\"\n    elif a == x and b == y:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = \"\"\"5 1 4 3 2\n10 2 1 9 10\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if a == x == b == y:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if x > a:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    n, a, x, b, y = map(int, input_[:5])\n    stations = [x, y]\n    print('YES' if stations[0] == stations[1] or stations[0] == stations[1] + 1 else 'NO')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if ((x == a and y == b) or (x == b and y == a)) and (abs(x - a) + abs(y - b) == 1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if not (1 <= a <= n) or not (1 <= x <= n) or not (1 <= b <= n) or not (1 <= y <= n):\n        raise ValueError(\"Invalid inputs\")\n    if a == b == x == y:\n        return \"YES\"\n    if not (a < x < n and x < y < n and y < b < n and b < n):\n        raise ValueError(\"Invalid inputs\")\n    if a < b:\n        if x > y:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if y > b:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    x, y, l, r = map(int, stdin.split())\n    if x == y == 1 and l <= x <= r <= y:\n        return 0\n    elif (l, r) == (x, x) or (l, r) == (y, y):\n        return 0\n    elif l < x or x < r:\n        return 0\n    elif y < x:\n        return (x ** (y - l) - x ** (l - 1)) * (x - y) + 1\n    else:\n        return (x ** (r - y) - x ** (y - 1)) * (y - x) + 1\n\n\nprint(solution('2 3 1 10'))\nprint(solution('3 5 10 22'))\nprint(solution('2 3 3 5'))\n\"\"\"\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split()\n    l = int(num_list[0])\n    r = int(num_list[1])\n    x = int(num_list[2])\n    y = int(num_list[3])\n    max_length = 0\n    l_length = 0\n    r_length = 0\n    unlucky = 0\n    for i in range(l, r+1):\n        length = 0\n        for j in range(i, i+x):\n            if j % y == 0:\n                length += 1\n                l_length = length\n                break\n        for j in range(i, i + y):\n            if j % x == 0:\n                length += 1\n                r_length = length\n                break\n        if length > max_length:\n            max_length = length\n    if max_length == 0:\n        return '0'\n    return max_length - l_length - r_length\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    # if x == y == 1:\n    #     return 0\n    # x, y = min(x, y), max(x, y)\n    # if x == y:\n    #     return 0\n    # if x > 1 and (x - y) % x == 0:\n    #     return (x - y) // x\n    # if x > 1 and (x - y) % x!= 0:\n    #     return (x - y) // x + 1\n    # if x == 1:\n    #     return (y - x) // x\n    return str((y - x) // x)\n\nsolution(input())\n\n'''\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = stdin.split()\n    x = int(x)\n    y = int(y)\n    l = int(l)\n    r = int(r)\n    if (x+1)**(y+1) < r:\n        return str(0)\n    else:\n        l = (r**(1/y)) - (x**(1/y))\n        r = (r**(1/y)) - (x**(1/y))\n        if l < l:\n            return str(0)\n        else:\n            return str(l)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    a = 0\n    b = 0\n    while l < r:\n        if a ** m + b ** m == n:\n            return (r - l) + 1\n        a = a ** m + a\n        b = b ** m + b\n        l += 1\n    return 0"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = stdin.split()\n    x, y, l, r = int(x), int(y), int(l), int(r)\n\n    unlucky_count = 0\n\n    while l <= r:\n        total_count = x ** x + y ** y\n        if total_count % 2 == 0:\n            l += 1\n            continue\n        else:\n            unlucky_count += 1\n            if unlucky_count == 4:\n                break\n        r -= 1\n    return str(max(0, max(unlucky_count, x) - min(unlucky_count, x)))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    l = min(l, x)\n    r = max(r, y)\n    unlucky_count = 0\n    for year in range(l, r + 1):\n        if (year ** x) + (year ** y) == year:\n            unlucky_count += 1\n    if unlucky_count == 0:\n        return 0\n    else:\n        return r - l + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    year_x, year_y, year_l, year_r = stdin.split()\n    year_x = int(year_x)\n    year_y = int(year_y)\n    year_l = int(year_l)\n    year_r = int(year_r)\n    if year_x > year_y:\n        year_x, year_y = year_y, year_x\n    if year_l < year_x:\n        year_l = year_x\n    if year_r > year_y:\n        year_r = year_y\n    length = 0\n    for year in range(year_l, year_r + 1):\n        if not is_unlucky(year, year_x, year_y):\n            length = max(length, year_l - year_x + 1)\n    return str(length)\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, interval(stdin)))\n\ndef"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    for i in range(2, n+1):\n        if n % i == 0:\n            return str(i)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 1:\n        raise ValueError()\n\n    if n % 2 == 0:\n        raise ValueError()\n\n    if n == 1:\n        return 0\n\n    return int(n / 2)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    k = 2\n    while k <= n:\n        if n % k == 0:\n            return str(k) + '+' + str(n // k) + '+' + str(k)\n        k += 1\n    return str(n) + '+' + str(1) + '+' + str(1)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return f\"{i}+{n//i}\"\n    return str(n)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check(n: int) -> bool:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    total = int(stdin)\n    count = 0\n    while True:\n        if count >= total:\n            break\n        if check(count):\n            count += 1\n        else:\n            count += 2\n    return str(count)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n >= 2:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                return i\n                break"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        print(0)\n        return\n    i = 1\n    max_div = 1\n    while i * max_div <= n:\n        max_div += 1\n    max_div -= 1\n    while i * max_div <= n:\n        if n % i == 0:\n            print(i)\n            return\n        i += 1\n    print(max_div)\n    return\n\nsolution()\n\"\"\"\n\n\ndef"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 1:\n        if (n - 1) % 2 == 0:\n            n = n // 2\n        else:\n            n -= 1\n    return str(n)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2==0:\n        return str(n//2)\n    if n==3:\n        return str(1)\n    if n%3==0:\n        return str(n//3)\n    if n==2:\n        return str(1)\n    if n%2!=0:\n        return str(n-1)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum(\n        [1 if i % 2 == 1 else 0 for i in range(1, n + 1)]\n    )\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    s = stdin\n    for i in range(1, 3):\n        if s[0] not in vowels:\n            s = s[1:]\n        elif s[-1] not in vowels:\n            s = s[:-1]\n        else:\n            break\n    if s in 'aeiou':\n        return stdin\n    if s[0] in vowels:\n        return stdin + 'a'\n    if s[-1] in vowels:\n        return stdin + 'e'\n    return stdin[1:-1] + 'a' + stdin[-1] + 'e'\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letters_vowels = {\n        'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1,\n        'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1,\n        'b': 2, 'c': 2, 'd': 2, 'f': 2, 'g': 2,\n        'B': 2, 'C': 2, 'D': 2, 'F': 2, 'G': 2,\n        'h': 3, 'j': 3, 'k': 3, 'l': 3,'m': 3,\n        'H': 3, 'J': 3, 'K': 3, 'L': 3, 'M': 3,\n        'n': 4, 'p': 4, 'q': 4, 'r': 4,'s': 4,\n        'N': 4, 'P': 4, 'Q': 4, 'R': 4, 'S': 4,\n       'sh': 5, 't': 5, 'u': 5, 'v': 5, 'w': 5,\n        'Sh': 5, 'T': 5, 'U': 5, 'V': 5, 'W': 5,\n        'x': 6, 'y': 6, 'z': 6\n    }\n    converted_vowels = ''\n    for letter in stdin.lower():\n        if letter in letters_vowels:\n            converted_vowels += letter * letters_vowels[letter]\n        else:\n            converted_vowels += letter\n\n    word_list = []\n    for i in range(len(converted_vowels) + 1):\n        for j in range(i + 1, len(converted_vowels) + 1):\n            word_list.append(converted_vowels[i:j])\n\n    answer_list = []\n    for word in word_list:\n        tmp_list = []\n        for letter in word:\n            tmp_list.append(letters_vowels[letter])\n        tmp_list = tuple(tmp_list)\n        tmp_list = tuple(sorted(tmp_list))\n        if tmp_list in answer_list:\n            continue\n        answer_list.append(tmp_list)\n\n    return answer_list\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    len_word = len(stdin)\n\n    def rec(idx: int) -> str:\n        if idx >= len_word:\n            return stdin\n        if stdin[idx] not in vowels:\n            return rec(idx + 1)\n\n        lst = []\n        for i in range(idx + 1, len_word):\n            if stdin[idx] == stdin[i]:\n                if idx == i - 1:\n                    return rec(i + 1)\n                elif idx < i and stdin[idx - 1]!= stdin[i]:\n                    continue\n                else:\n                    lst.append(rec(i + 1))\n                    break\n            else:\n                lst.append(rec(i + 1))\n                break\n        if not lst:\n            return rec(idx + 1)\n        for s in lst:\n            stdin = stdin[:idx] + \" \" + stdin[idx:]\n            return stdin\n        return stdin\n\n    return rec(0)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    vowels = list(vowels)\n    result = []\n    i = 0\n    while i < len(stdin):\n        word = stdin[i]\n        j = i\n        flag = False\n        # print(word)\n        while j < len(stdin):\n            if word[j] not in vowels:\n                break\n            j += 1\n        # print('word', word, j)\n        if j == len(stdin):\n            result.append(stdin[i:])\n            i = len(stdin)\n            continue\n        i = j\n        # print('word', word, i)\n        if j == len(stdin):\n            return ''.join(result)\n        # print('word', word, i)\n        if j!= len(stdin):\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n                i += 1\n            else:\n                i = j\n                flag = True\n                break\n        # print('word', word, i)\n        if flag:\n            if word[i] == word[j]:\n                word +=''\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    typos = []\n    for word in words:\n        typos += create_typos(word)\n    print_typos(typos)\n    return ''\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    words = stdin.split()\n    for word in words:\n        for i in range(len(word)):\n            if i == 0:\n                continue\n            if word[i] not in vowels:\n                if word[i-1] not in vowels and word[i] not in vowels:\n                    word = word[:i] + word[i].upper() + word[i+1:]\n                    break\n    return''.join(words)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.lower()\n    vowels = set('aeiou')\n    res = \"\"\n    for i in range(len(n)):\n        if n[i] in vowels:\n            res = res + n[i] + \" \"\n            continue\n        for j in range(i+1, len(n)):\n            if n[i] == n[j]:\n                res = res + n[i]\n                break\n            if n[i] + n[j] in vowels and n[j] + n[i] in vowels:\n                res = res + n[i] + \" \" + n[j] + \" \"\n                break\n    return res"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_word = stdin.strip()\n    vowels = \"aeiou\"\n    con_cons_blocks = []\n    for i in range(len(input_word) - 1):\n        if input_word[i] not in vowels and input_word[i + 1] in vowels:\n            block = input_word[i + 1]\n            if i == 0:\n                block = input_word[i] + block\n            con_cons_blocks.append(block)\n    if con_cons_blocks == []:\n        return input_word\n    word_typos = []\n    for block in con_cons_blocks:\n        for char in range(len(block)):\n            char_in_word = block[char]\n            if char_in_word not in vowels:\n                if char_in_word in word_typos:\n                    block = block[:char] +'' + block[char + 1:]\n                    word_typos.append(block)\n                else:\n                    word_typos.append(block)\n    min_spaces = min([len(word) for word in word_typos])\n    solution = []\n    for word in word_typos:\n        if len(word) == min_spaces:\n            solution.append(word)\n    return''.join(solution)"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    consonants = ''.join(set(string.ascii_letters) - set(vowels))\n    consonants_map = {}\n    for i in range(len(consonants)):\n        consonants_map[consonants[i]] = i\n\n    words = []\n    for word in stdin.split('\\n'):\n        word = word.strip()\n        if not word:\n            continue\n        word_arr = list(word)\n        words.append(word_arr)\n\n    answer = None\n    for word in words:\n        if len(word) < 4:\n            continue\n        word_is_typo = False\n        word_was_changed = False\n        for i in range(1, len(word) - 1):\n            if word[i - 1] in vowels and word[i + 1] in vowels:\n                word[i] = consonants_map[word[i]]\n                word_was_changed = True\n            elif word[i - 1] in vowels:\n                word_is_typo = True\n        if word_was_changed:\n            answer = word\n            break\n        if word_is_typo:\n            answer = word\n            break\n\n    if not answer:\n        return '\\n'.join(words)\n\n    return ''.join(answer)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set('aeiou')\n    cnt = 0\n    result = []\n    for word in stdin.split():\n        if len(word) < 4:\n            continue\n        # \uc601\uc5b4 \uc18c\ubb38\uc790, \ud55c\uae00 \uc18c\ubb38\uc790, \uc22b\uc790, \uc22b\uc790 \ubaa8\ub450 \ud558\ub098\uc758 \uae00\uc790\n        if word.isalpha() and word.isupper() and word.isdigit() and len(word) == len(set(word)):\n            result.append(word)\n        else:\n            tmp = ''\n            if word[0].lower() in vowels:\n                tmp += word[0].lower()\n            else:\n                tmp += word[0]\n            for c in word[1:]:\n                if c.lower() in vowels:\n                    tmp += c.lower()\n                else:\n                    tmp += c\n            result.append(tmp)\n    for word in result:\n        if len(word) < 3:\n            continue\n        if word == 'abacaba':\n            cnt += 1\n            continue\n        if not (len(word) <= 2 and word.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '1').replace('u', '1') == word):\n            continue\n        cnt += 1\n        break\n    return''.join(result) if cnt else''.join(result[:-1])"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    m_first = sorted(list(map(int, stdin.split()[1:])))\n    m_second = sorted(list(map(int, stdin.split()[2:])))\n    first = 0\n    second = 0\n    n_left = n\n    while n_left > 0:\n        if first < x:\n            first += s\n            n_left -= 1\n        else:\n            second += s\n            n_left -= 1\n    return str(min(first, second))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n\n    a = sorted(map(int, stdin.split()[1:]))\n    b = sorted(map(int, stdin.split()[2:]))\n\n    c = sorted(map(int, stdin.split()[4:]))\n\n    d = sorted(map(int, stdin.split()[5:]))\n\n    min = (x * (n - 1) + s) / (n * x)\n    cnt = 0\n\n    while cnt < n:\n        for i in range(m):\n            if cnt + a[i] <= n:\n                cnt += a[i]\n            else:\n                break\n        cnt += b[i]\n        min = min if cnt <= min else cnt\n    \n    min = min if (cnt + len(c) <= n) else cnt\n\n    return str(min)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    \n    # time and mana\n    t = 0\n    t_a = 0\n    t_c = 0\n    \n    # sort by spells\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    c_sorted = sorted(c)\n    d_sorted = sorted(d)\n    \n    # final result\n    res = float('inf')\n    \n    # count\n    count = 0\n    \n    while count < n:\n        # each mana spent\n        t += 1\n        \n        # each spell's mana spent\n        for i in range(m):\n            # first spell\n            if t_a <= x:\n                t_a += a_sorted.pop()\n                t_c += c_sorted.pop()\n            # second spell\n            elif t_c <= s:\n                t_c += d_sorted.pop()\n                t_a += b_sorted.pop()\n        \n        # count\n        count += t_a + t_c\n        \n        # if res < count, res is changed\n        if count <= res:\n            res = count\n        \n    return str(res)\n\nstdin = \"\"\"10 20 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80\n\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, x, s, *a, b, *c, d = list(map(int, stdin.split()))\n    a = list(map(lambda x: x - s, a))\n    b = list(map(lambda x: x - s, b))\n    c = list(map(lambda x: x - s, c))\n    d = list(map(lambda x: x - s, d))\n    min_time = n\n    for i in range(m):\n        if a[i] < x:\n            min_time += a[i]\n        else:\n            min_time += x\n    for i in range(m):\n        if b[i] < x:\n            min_time += b[i]\n        else:\n            min_time += x\n    for i in range(m):\n        if c[i] < x:\n            min_time += c[i]\n        else:\n            min_time += x\n    for i in range(m):\n        if d[i] < x:\n            min_time += d[i]\n        else:\n            min_time += x\n    return str(min_time)\nprint(solution(input()))"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, a, b, c, d = map(int, stdin.split())\n    #print(n, m, k, x, s, a, b, c, d)\n    if n <= k:\n        return s\n    #a, b = map(int, input().split())\n    #print(a, b)\n    #n, m, k, x, s, a, b, c, d = map(int, stdin.split())\n    #print(n, m, k, x, s, a, b, c, d)\n    #print(x)\n    #print(a)\n    #print(b)\n    #print(c)\n    #print(d)\n    n_counter = 0\n    x_counter = 0\n    i = 0\n    answer = 0\n    while n_counter <= n:\n        if n_counter + a[i] <= n:\n            n_counter += a[i]\n            x_counter += a[i]\n        else:\n            n_counter += n\n            x_counter += n\n        i += 1\n    print(x_counter)\n    if n_counter <= x:\n        answer = x_counter\n    else:\n        answer = n_counter\n    print(answer)\n    if m == 1:\n        a = c[0]\n        b = d[0]\n        s_c = a*(x-x_counter) + x_counter*b\n        answer = x_counter + s_c\n    if m > 1:\n        a = c[0]\n        b = c[1]\n        s_c = (x-x_counter)*b\n        answer = x_counter + s_c\n    print(answer)\n    return answer\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, a, b, c, d = (int(x) for x in stdin.split())\n    print(solution_naive(n, m, k, x, s, a, b, c, d))\n\ndef"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    d.append(d.pop(0))\n    c.append(c.pop(0))\n    ans = 0\n    for i in range(m):\n        b[i] += a[i]\n    for i in range(k):\n        ans += x + c[i] + d[i]\n    ans += (s - ans) // x\n    return str(ans)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    x, s = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    min_time = x * sum(b)\n    c = c[::-1]\n    d = d[::-1]\n    for i in range(m):\n        min_time += max(0, (d[i] - b[i]) / c[i]) * a[i]\n    if min_time >= s:\n        return \"impossible\"\n    return str(min_time)"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    c = list(map(int, stdin.split()[3:]))\n    d = list(map(int, stdin.split()[4:]))\n    answer = n\n\n    print(n)\n    print(m, k)\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n    return answer\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = int(stdin.split()[1]), int(stdin.split()[2])\n\n    a = list(map(int, stdin.split()[3].split()))\n    b = list(map(int, stdin.split()[4].split()))\n    c = list(map(int, stdin.split()[5].split()))\n    d = list(map(int, stdin.split()[6].split()))\n    c.sort()\n    d.sort()\n    res = 0\n    for i in range(m):\n        if a[i] < x:\n            res += (x - a[i]) * b[i]\n        else:\n            res += (a[i] - x) * d[i]\n    return str(max(s - res, 0))\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    subtasks = list(map(int, stdin.split()))\n\n    points = 0\n    for i in range(n):\n        points += (i + 1) * subtasks[i]\n    print(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_nums, num_subtasks, max_time = map(int, stdin.split())\n    subtasks = map(int, stdin.split())\n\n    points = 0\n    solutions = []\n\n    for subtask_num, time in zip(subtasks, range(1, max_time + 1)):\n        points_to_subtask = subtask_num\n        for _ in range(num_subtasks - 1):\n            points_to_subtask += points_to_subtask\n        points += time * points_to_subtask\n\n        solutions.append(points_to_subtask)\n\n    return str(max(solutions))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    tasks = list(map(int, stdin.split()))\n\n    dp = [[0 for _ in range(k + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, k + 1):\n            for _ in range(i):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n            dp[i][j] += tasks[j - 1]\n\n    return str(dp[m][k])\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    t = sorted(map(int, stdin.split()))\n    points = sum(i * t_i for i, t_i in enumerate(t)) + (k if n == k else 0)\n    #print(points)\n    return str(points // m)"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    points = []\n    for i in range(len(tasks)):\n        points.append(i+1)\n    for t in range(m):\n        min_points = min(points)\n        points.remove(min_points)\n        points.append(min_points)\n    return str(max(points))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n = int(n)\n    k = int(k)\n    m = int(m)\n    scheduled = []\n    for i in range(n):\n        s = stdin.split()\n        scheduled.append(s)\n    # This is the output\n    points = 0\n    total = 0\n    for i in range(n):\n        total = 0\n        for j in range(k):\n            total += int(scheduled[i][j])\n        if total == m:\n            points += k + 1\n        elif total > m:\n            points += k\n    return str(points)"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # a, b, c = map(int, input().split())\n    # points = 0\n    #\n    # for i in range(c):\n    #     a, b = map(int, input().split())\n    #     if b <= a:\n    #         points += b\n    #     else:\n    #         points += a\n    #\n    # return str(points)\n    a, b, c = map(int, stdin.split())\n    points = 0\n    for i in range(c):\n        points += b * (a - i)\n    print(points)\nsolution(\"3 4 11\")\nsolution(\"5 5 10\")"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = (int(_) for _ in stdin.split())\n    times = list(map(int, stdin.split()))\n    times.sort(reverse=True)\n    points = 0\n    prev_points = 0\n    for time in times:\n        points += time\n        if points > prev_points + m:\n            return str(points)\n        prev_points = points\n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    time = sorted(map(int, stdin.split()))\n    points = 0\n    for i in range(n):\n        points += i + 1\n        if i == 0:\n            points += k\n        else:\n            points += time[i - 1] + 1\n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = sorted([int(x) for x in stdin.split()])\n    points = 0\n    for i in range(k):\n        points += a[i]\n        a[i] += 1\n    points += (n - k) * (m - a[-1]) + (n - k) + 1\n    return str(points)\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = 0\n\n    def check(node, tree):\n        if node:\n            nonlocal trees\n            if not tree:\n                check(node.left, True)\n                if node.right:\n                    check(node.right, False)\n                else:\n                    check(node.right, True)\n\n            if not tree:\n                check(node.right, True)\n                if node.left:\n                    check(node.left, False)\n                else:\n                    check(node.left, True)\n            if not tree:\n                trees += 1\n\n    check(None, False)\n    return str(trees)\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return \"\""
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    n = int(stdin[0])\n\n    return str(solution_naive(n))\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_perfectly_balanced(root: TreeNode) -> bool:\n        if root is None:\n            return True\n        return is_perfectly_balanced(root.left) and is_perfectly_balanced(root.right) and abs(\n            root.left.val - root.right.val) % 2 == 0\n    n = int(stdin)\n    trees = 0\n    for i in range(1, n + 1):\n        root = TreeNode(i)\n        if is_perfectly_balanced(root):\n            trees += 1\n    return str(trees)\n    return \"\\n\".join([str(trees) for trees in range(1, n + 1)])\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def helper(n):\n        if n <= 1:\n            return 0\n        if n % 2 == 0:\n            return helper(n // 2) + helper(n // 2)\n        else:\n            return helper(n // 2) + helper(n // 2 + 1) + 1\n    return str(helper(n) % 983244353)\n\nInput\n5\n\nOutput\n0\n\n\nInput\n6\n\nOutput\n1\n\n\nInput\n7\n\nOutput\n0\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0\"\n    for i in range(3, n + 1):\n        if i & 1:\n            for j in range(i):\n                if j & 1:\n                    break\n                else:\n                    print(i, j, i - j)\n                    if i - j == j:\n                        break\n                if i - j == j:\n                    break\n            else:\n                return 0\n        if not i & 1:\n            for j in range(i):\n                if j & 1:\n                    break\n                else:\n                    print(i, j, i - j)\n                    if i - j == j:\n                        break\n                if i - j == j:\n                    break\n            else:\n                return 0\n    return 1\n\nInput\n4\n\nOutput\n1\n\nInput\n3\n\nOutput\n0\n\nInput\n10\n\nOutput\n0\n'''\n\n\nclass BSTNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return str(self.value)\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    from collections import deque\n    n, = map(int, stdin.strip().split())\n    if n == 1:\n        return \"0\"\n    q = deque([(1, 0)])\n    while q:\n        node_idx, depth = q.popleft()\n        if depth == n:\n            return \"1\"\n        if node_idx == 2*n:\n            return \"0\"\n        if node_idx % 2 == 1:\n            # left subtree\n            q.append((node_idx*2, depth+1))\n            q.append((node_idx*2+1, depth+1))\n        else:\n            # right subtree\n            q.append((node_idx*2, depth+1))\n    return \"0\""
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return str(0)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(2)\n    if n == 6:\n        return str(1)\n    if n == 7:\n        return str(3)\n    if n == 8:\n        return str(2)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(0)\n    if n == 11:\n        return str(0)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(2)\n    if n == 14:\n        return str(0)\n    if n == 15:\n        return str(0)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(2)\n    if n == 19:\n        return str(0)\n    if n == 20:\n        return str(0)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(2)\n    if n == 24:\n        return str(0)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(2)\n    if n == 30:\n        return str(0)\n    if n == 31:\n        return str(0)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(2)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(2)\n    if n == 37:\n        return str(0)\n    if n == 38:\n        return str(0)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(0)\n    if n == 41:\n        return str(0)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(2)\n    if n == 45:\n        return str(0)\n    if n == 46:\n        return str(0)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(2)\n    if n == 51:\n        return str(0)\n    if n == 52:\n        return str(0)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(0)\n    if n == 55:\n        return str(0)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(2)\n    if n == 59:\n        return str(0)\n    if n == 60:\n        return str(0)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(2)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(2)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(2)\n    if n == 69:\n        return str(0)\n    if n == 70:\n        return str(0)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(0)\n    if n == 78:\n        return str(0)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(0)\n    if n == 81:\n        return str(0)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(2)\n    if n == 89:\n        return str(0)\n    if n == 90:\n        return str(0)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str(0)\n    if n == 99:\n        return str(0)\n    if n == 100:\n        return str(1)\n    if n == 101:\n        return str(1)\n    if n == 102:\n        return str(1)\n    if n == 103:\n        return str(1)\n    if n == 104:\n        return str(1)\n    if n == 105:\n        return str(1)\n    if n == 106:\n        return str(1)\n    if n == 107:\n        return str(1)\n    if n == 108:\n        return str(1)\n    if n == 109:\n        return str(1)\n    if n == 110:\n        return str(2)\n    if n == 111:\n        return str(0)\n    if n == 112:"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from itertools import combinations\n    from operator import add\n    n = int(stdin)\n    def dfs(curr, temp):\n        if not curr:\n            if len(temp) == n:\n                print(temp)\n            return\n        for i in range(2):\n            dfs(curr[i], temp + [i])\n        return\n\n    dfs(list(range(2)), [])\n    return '\\n'.join([str(i % 2) for i in range(1, 10)])\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, y, k = 1, 1, k\n    dx, dy = [1, 1, -1, -1], [1, -1, 1, -1]\n    while x + dx[k] < n and y + dy[k] < m:\n        k += 1\n    return str(x + dx[k]) +'' + str(y + dy[k])\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return str(n * 2 - 2)\n    if n * m == 1 and n == 2:\n        return str(n * m - 1)\n    else:\n        return str(2 * (n // 2) + 1 + (k - 1) // n)\n\nprint(solution(input()))\n'''\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    return f\"{(n+1) // 2} {(n+1) // 2}\"\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    visited = set()\n    visited.add((1, 1))\n    if k == 1:\n        return str(1)\n    while k!= 0:\n        k -= 1\n        for i in range(n + 1):\n            if i == 0:\n                continue\n            for j in range(m + 1):\n                if (i, j) not in visited:\n                    if i == 1:\n                        if j!= 1:\n                            visited.add((i, j))\n                        else:\n                            visited.add((i, j + 1))\n                    elif j == 1:\n                        if i!= 1:\n                            visited.add((i, j))\n                        else:\n                            visited.add((i - 1, j))\n                    else:\n                        visited.add((i, j))\n                        if i!= 1:\n                            visited.add((i - 1, j))\n                        if j!= 1:\n                            visited.add((i, j - 1))\n                        if i!= 1 or j!= 1:\n                            visited.add((i - 1, j - 1))\n    return str(visited)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 1:\n        return str(1) +'' + str(1)\n    else:\n        k = (k - 1) % (n * m)\n        x, y = divmod(k, n)\n        return str(x + 1) +'' + str(y + 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    d = [[0] * m for _ in range(n)]\n    d[0][0] = 1\n    d[n - 1][m - 1] = 1\n    d[0][m - 1] = 1\n    d[n - 1][0] = 1\n    for i in range(1, n):\n        d[i][0] = d[i - 1][0] + d[i - 1][1]\n        d[i][m - 1] = d[i - 1][m - 2] + d[i - 1][m - 1]\n    for j in range(1, m):\n        d[0][j] = d[0][j - 1] + d[1][j - 1]\n        d[n - 1][j] = d[n - 2][j - 1] + d[n - 1][j - 1]\n    for _ in range(k):\n        for i in range(1, n - 1):\n            for j in range(1, m - 1):\n                d[i][j] = d[i - 1][j] + d[i + 1][j] + d[i][j - 1] + d[i][j + 1]\n    return str(d[n - 1][m - 1])\n\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(((n - 1) // 2, (m - 1) // 2))\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = list(map(int, stdin.strip().split()))\n  return str(m) + \" \" + str(n - m + 1)\n\"\"\"\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if (k >= n * m):\n        return str(n - 1) + \" \" + str(m - 1)\n    cur_x, cur_y = 1, 1\n    for i in range(k):\n        if cur_x == 1 and cur_y == 1:\n            cur_x, cur_y = n, m\n        else:\n            cur_x, cur_y = cur_x + 1, cur_y\n    return str(cur_x - 1) + \" \" + str(cur_y - 1)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cur = (1, 1)\n    for _ in range(k):\n        x, y = cur\n        if 0 <= x < n and 0 <= y < m:\n            cur = (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)\n    return str(cur[0][0]) + \" \" + str(cur[0][1])"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split('\\n')\n    while input[0]!= '-1':\n        number = int(input.pop(0))\n        if int(number) > 10**12:\n            print('error')\n        else:\n            for i in input:\n                if int(i) > 10**12:\n                    print('error')\n                else:\n                    if max(int(i), int(number)) % int(i) == 0 and max(int(i), int(number)) // int(i) == int(i):\n                        print(i, number)\n                    else:\n                        print(i, int(number))\n    return None\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 1\n    while a * a <= n:\n        if n % a == 0:\n            b = n // a\n            break\n        else:\n            a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n                break\n            else:\n                a += 1\n    if a * a > n:\n        while a * a <= n:\n            if n % a == 0:\n                b = n // a\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n+1):\n        if n % a == 0:\n            for b in range(a+1, n+1):\n                if n % b == 0:\n                    print(a, b)\n                    return"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(1, int(10**6)):\n        for j in range(1, int(10**6)):\n            if LCM(i, j) == X:\n                print(i, j)\n                break\nsolution(input())\n\ndef"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for a in range(1, X):\n        for b in range(1, X):\n            if a * b == X:\n                return str(a) + \" \" + str(b)\nsolution(input())\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = 2, 1\n    while (a * b) % n!= n - 1:\n        a, b = b, a + b\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    max_LCM = 0\n    max_LCM_index = -1\n    for i in range(0, int(stdin[0]) + 1):\n        for j in range(0, int(stdin[0]) + 1):\n            if LCM(i, j) == int(stdin[0]):\n                max_LCM = max(max_LCM, LCM(i, j))\n                max_LCM_index = i if max_LCM_index < 0 or max_LCM_index > i else max_LCM_index\n    return str(max_LCM_index) +'' + str(max_LCM)\n\n\ndef"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n    for a in range(1, 10):\n        for b in range(1, 10):\n            if (X % a == 0) and (X % b == 0):\n                print(a, b)\n                return\nsolution(input())\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your puzzle answer was 17049.\n    \"\"\"\n    X = int(stdin)\n    a = 1\n    b = 1\n    while a <= X:\n        b = 1\n        while b <= X:\n            if a * b == X:\n                print(a, b)\n                return\n            else:\n                b += 1\n        a += 1\n        b = a\ndef"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    a = x // 1\n    b = x // 2\n    while x % 2 == 0:\n        a = x // 2\n        b = x // 2\n        x = x // 2\n    for i in range(1, a + 1):\n        if x % i == 0:\n            a = i\n    for i in range(1, b + 1):\n        if x % i == 0:\n            b = i\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    apple_count = lemon_count = pear_count = 0\n    if lemon >= apple:\n        apple_count = lemon // apple\n        lemon_count = lemon % apple\n    elif apple >= pear:\n        apple_count = apple // pear\n        lemon_count = apple % pear\n    else:\n        return 0\n    if pear >= apple:\n        pear_count = pear // apple\n        pear_count = pear % apple\n    else:\n        pear_count = 0\n    return str(apple_count + pear_count + lemon_count)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x = (a, b, c)\n    answer = max(x)\n    return str(answer)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n_lemon, n_apple, n_pear = map(int, stdin.split())\n    if n_apple == 0 and n_pear == 0:\n        return \"0\"\n    elif n_pear == 0:\n        return str(n_lemon * 2)\n    elif n_apple == 0:\n        return str(n_lemon * 4)\n    else:\n        return str(n_lemon * 2) + \" \" + str(n_pear * 4) + \" \" + str(n_apple * 3)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    li = list(map(int, stdin.split()))\n    if li[2] >= 2:\n        return '{} {} {}'.format(li[0] + li[1], li[0], li[2])\n    return '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    c = int(stdin.strip())\n\n    if a <= 0:\n        raise ValueError\n\n    if b <= 0:\n        raise ValueError\n\n    if c <= 0:\n        raise ValueError\n\n    sum = a + b + c\n    if sum > 1000:\n        raise ValueError\n\n    if a > b:\n        if a > c:\n            if b > c:\n                return str(a) + \" \" + str(b) + \" \" + str(c)\n            else:\n                return str(a) + \" \" + str(b) + \" \" + str(c)\n        else:\n            return str(a) + \" \" + str(c) + \" \" + str(b)\n    else:\n        if b > c:\n            return str(b) + \" \" + str(a) + \" \" + str(c)\n        else:\n            return str(b) + \" \" + str(a) + \" \" + str(c)\n    return\n\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lemon_count, apple_count, pear_count = map(int, stdin.split())\n    answer = 0\n    if pear_count >= 4:\n        if lemon_count >= 2:\n            answer += 2 * lemon_count\n        if apple_count >= 4:\n            answer += 4 * apple_count\n        if pear_count >= 2:\n            answer += 2 * pear_count\n    else:\n        if lemon_count >= 3:\n            answer += 3 * lemon_count\n        if apple_count >= 3:\n            answer += 3 * apple_count\n    if answer == 0:\n        return '0'\n    return str(answer)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n_lemon, n_apple, n_pear = map(int, stdin.split())\n    s = 1\n    while n_apple >= s and n_pear >= s:\n        s += 4\n    if n_apple >= s:\n        n_apple = s - n_apple\n    if n_pear >= s:\n        n_pear = s - n_pear\n    return f\"{n_lemon} {n_apple} {n_pear}\""
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return str(int(s[0])*2 + int(s[1])*4 + int(s[2])*6)\n\nprint(solution(input()))\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples:\n    Input:  1\n    Output:  1\n\n    Input:  2\n    Output:  2\n\n    Input:  3\n    Output:  0\n\n    Input:  4\n    Output:  6\n\n    Input:  5\n    Output:  7\n    \"\"\"\n    lemon_num, apple_num, pear_num = stdin.split()\n    apple_num = int(apple_num)\n    pear_num = int(pear_num)\n    lemon_num = int(lemon_num)\n\n    if apple_num + pear_num > lemon_num:\n        return str(apple_num + pear_num - lemon_num)\n    elif apple_num + pear_num <= lemon_num:\n        return str(apple_num + pear_num)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_lemon, number_apple, number_pear = stdin.split()\n    number_apple, number_pear = int(number_apple), int(number_pear)\n    return str(int(number_lemon) + int(number_apple) + int(number_pear))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"NO\"\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return \"YES\" if a[0] <= a[n//2] <= a[-1] else \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    players = [int(i) for i in stdin.split()[1:]]\n    players.sort()\n    first_team = []\n    second_team = []\n    for i in range(n):\n        if players[i] == players[i + n]:\n            first_team.append(players[i])\n        else:\n            second_team.append(players[i])\n    first_team.sort()\n    second_team.sort()\n    if first_team[0] == second_team[0]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        n = int(line)\n        s = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                s += i * j\n        if n == 1:\n            if s < 2:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if s == 2*n:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 1 2\n   ... 2 1''')\n    'YES'\n    >>> solution('''2\n   ... 1 2 3\n   ... 2 1 3''')\n    'NO'\n    >>> solution('''1\n   ... 1 2 3\n   ... 2 3 1''')\n    'NO'\n    >>> solution('''1\n   ... 1 2 1\n   ... 2 1 3''')\n    'YES'\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    ratings = [int(i) for i in stdin[1:]]\n    ratings.sort()\n    if ratings[0] == ratings[-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    s1 = sum(a[:n//2])\n    s2 = sum(a[n//2:])\n    if s1 > s2:\n        print('YES')\n    else:\n        print('NO')\nsolution(input())"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    players = stdin.pop(0)\n    a = stdin.pop(0)\n    b = stdin.pop(0)\n    \n    a = list(map(int,a.split()))\n    b = list(map(int,b.split()))\n    \n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    \n    while a and b:\n        if a[-1] > b[-1]:\n            a.pop()\n        else:\n            b.pop()\n    \n    if len(a) >= n:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nsolution(\"\"\"\n2\n1 3 2 4\n\"\"\")\n\nsolution(\"\"\"\n1\n4 4\n\"\"\")\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n == 1:\n        return \"YES\"\n    ratings = list(map(int, stdin.split()[1:]))\n    ratings.sort()\n    lower_limit = 0\n    higher_limit = n\n    for i in range(len(ratings)):\n        if ratings[i] == ratings[i - 1]:\n            higher_limit -= 1\n        else:\n            break\n    for i in range(len(ratings)):\n        if ratings[i] == ratings[i + 1]:\n            lower_limit += 1\n        else:\n            break\n    print(higher_limit, lower_limit)\n    if lower_limit >= higher_limit:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    rating = list(map(int, stdin.split()[1:]))\n    temp = rating.copy()\n    min_ = temp.pop(rating.index(min(temp)))\n    temp.pop(rating.index(max(temp)))\n    temp.append(min_)\n    if temp.index(min(temp)) == temp.index(max(temp)):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    a = []\n    for i in l:\n        a.append(i)\n    a.sort(reverse=True)\n    a.sort()\n    if a[0] > a[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for i in range(n)]\n    # arr = sorted(arr)\n    # arr.append(1)\n    # print(arr)\n    # for i in range(n):\n    #     print(arr[i], end=' ')\n    #     if i!= n - 1:\n    #         print(arr[i+1], end=' ')\n    # print()\n\n    k = 0\n    while True:\n        # print(arr)\n        if is_prime(arr[-1]):\n            arr.append(arr[-1])\n            arr.pop(-1)\n            # print(arr)\n            k += 1\n        else:\n            break\n    return str(k)\n\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    arr = list(map(int, stdin.split('\\n')))\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0437\u0440\u044f\u0434\u043d\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439\n    divisors = [i for i in range(2, int(1e9) + 1)]\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432\n    arr_list = []\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0434\u0432\u0438\u0433\u043e\u043c\n    pre_arr_list = []\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0434\u0432\u0438\u0433\u043e\u043c\n    pre_arr = []\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0434\u0432\u0438\u0433\u043e\u043c\n    pre_arr_index = []\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0434\u0432\u0438\u0433\u0430 \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    if (n == 1):\n        return '1'\n\n    # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0434\u0432\u0438\u0433\u043e\u043c\n    pre_arr_list.append(arr)\n    # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0434\u0432\u0438\u0433\u043e\u043c\n    pre_arr_index.append(0)\n    # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0434\u0432\u0438\u0433\u043e\u043c\n    pre_arr_index.append(1)\n\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0434\u0432\u0438\u0433\u0430\n    while (True):\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n        for i in range(len(pre_arr_list)):\n            pre_arr_list[i].append(arr_list[i])\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n        pre_arr_index.append(pre_arr_index[-1] + 1)\n\n        # \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u044b\n        for i in range(1, len(pre_arr_list)):\n            for j in range(len(arr_list)):\n                # \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043a\u043e\u0440\u043d\u0435\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c i\n                if (j not in pre_arr_index) and (arr_list[j]!= pre_arr_list[i][j]):\n                    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n                    length = len(pre_arr_list[i])\n                    # \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u0447\u0438\u0441\u043b\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0438 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0435\u0433\u043e \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u0445\n                    if (length == len(pre_arr_list[i])) and (length not in pre_arr_index):\n                        # \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043f\u0430\u043b \u043d\u0430 \u043f\u0435\u0440\u0435\u0434 \u0434\u0440\u0443\u0433\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c\n                        if (i > 1):\n                            # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n                            pre_arr_list.append(arr_list)\n                            # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n                            pre_arr_index.append(pre_arr_index[-1] + 1)\n                        # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u043b \u043d\u0430 \u043f\u0435\u0440\u0435\u0434 \u0434\u0440\u0443\u0433\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c\n                        else:\n                            # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n                            pre_arr_list.append(arr_list)\n                            # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n                            pre_arr_index.append(pre_arr_index[-1] + 1)\n                            # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435\n                            pre_arr_list.pop()\n                            # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435\n                            pre_arr_index.pop()\n                            # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439\n                            pre_arr_index.append(pre_arr_index[-1] + 1)\n                        # \u0417\u0430\u043a\u0430\u043d\u0447\u0438"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        arr[i] += 1\n        while i < n and arr[i]!= 1 and arr[i]!= 1 and arr[i] % 2 == 0:\n            if arr[i] > 10 ** 9:\n                return '-1'\n            arr[i] += 1\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    length = len(arr)\n    count = 0\n    for i in range(0, length - 1):\n        for j in range(i + 1, length):\n            if is_co_prime(arr[i], arr[j]):\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1')\n    '0'\n    >>> solution('2')\n    '1'\n    >>> solution('3')\n    '1'\n    >>> solution('4')\n    '2'\n    \"\"\"\n    input = stdin.split()\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    print(solution1(a, n))\n    return\n\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    a = [int(i) for i in a]\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n    ans = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            if b[i] * b[j] % 2 == 0:\n                if b[i] == b[j]:\n                    ans += 1\n    return str(ans + len(b))"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    lst = list(map(int, s.split()))\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] * lst[j]) % (lst[i] + lst[j]) == 0:\n                count += 1\n    print(count)"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split(\" \")[0])\n    a: list = stdin.split(\" \")[1:]\n    d: int = 10 ** 9\n    while any([a[i] % 2!= 0 and d % a[i]!= 0 for i in range(n)]):\n        d += 1\n    a.append(d)\n    print(len(a) - 1)\n    a.sort()\n    for i in range(n):\n        print(a[i], end=\" \")\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 1\n    # print(n, a)\n    while i < n:\n        cnt = 0\n        for j in range(n):\n            if a[j] % i == 0 or a[j] % a[j+1] == 0:\n                cnt += 1\n        i += 1\n        # print(cnt)\n    return str(cnt)\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    print(numbers_divisible(A, K, N))\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    print(max(int(x/y) for x, y in list(zip(A, map(lambda x: -x-1 if x >= 0 else x, map(lambda x: x-1, A))))))\n    return\n    # return str(max(int(x/y) for x, y in list(zip(A, map(lambda x: -x-1 if x >= 0 else x, map(lambda x: x-1, A))))))\nsolution(input())\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = \"3 4\"\n    N, K = map(int, stdin.split())\n\n    A = list(map(int, stdin.split()))\n    max_div = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] % A[j] == 0 and max_div < A[i] // A[j]:\n                max_div = A[i] // A[j]\n    return str(max_div)\n\n\nprint(solution(\"3 4\"))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    for _ in range(k):\n        i, j = map(int, stdin.split())\n\n        if a[i - 1] + 1!= a[j - 1]:\n            a[i - 1] += 1\n            a[j - 1] -= 1\n    return str(max(a))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(_) for _ in stdin.split())\n    A = [int(_) for _ in stdin.split()]\n\n    def max_divider(A, N, K):\n        res = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                A[i] = (A[i] + 1) if A[i] % A[j] == 0 else A[i]\n                A[j] = A[j] - 1 if A[j]!= 0 and A[j] % A[i] == 0 else A[j]\n            if res < A[i]:\n                res = A[i]\n        return res\n\n    return str(max_divider(A, N, K))\n\nprint(solution(input()))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    while a:\n        big = max(a)\n        if big > res:\n            res = big\n        a.remove(big)\n        a.append(big-1)\n        a.append(big+1)\n    return str(res)"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    arr = list(map(int, stdin.split()))\n\n    maxi = 0\n\n    for i in range(1, N):\n        for j in range(i):\n            if arr[i] % arr[j] == 0:\n                maxi = max(maxi, arr[i] // arr[j])\n\n    return str(maxi)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    A = list(map(int, stdin.strip().split()))\n    return max(reduce(lambda x, y: (x, y),\n                      [a if a!= 0 else a + 1 for a in A],\n                      (0,) + A))"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split(' ')\n    k = int(k)\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    maxi = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) % a[i] == 0:\n                maxi = max(maxi, a[i] + a[j])\n    return str(maxi)"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    result = 0\n    for a in range(n):\n        result = max(result, (a + 1) // a)\n    for _ in range(k):\n        (a1, a2) = stdin.split()\n        a1, a2 = int(a1) - 1, int(a2) - 1\n        a = a1 if a2 else a2\n        a += 1\n        a = max(result, (a - 1) // a)\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1\n    while True:\n        n += 2\n        if 2 ** n - 1 > N:\n            return str(n)\ndef"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = 0\n    res = ''\n    while t < 40:\n        res += str(t) +''\n        t += 2\n    return res[:-1]"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 1:\n        return str(0)\n    if x % 2 == 0:\n        return str(0)\n    ops = []\n    while x > 1:\n        if x % 2 == 0:\n            x //= 2\n            ops.append(x)\n        else:\n            x += 1\n            ops.append(x)\n    return str(len(ops)) +'' +''.join([str(x) for x in ops])\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while (t < 40):\n        if (t % 2 == 1):\n            print(x)\n        x = x + 1\n        t = t + 1\n    return (str(t))\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while True:\n        t += 1\n        n = int(t / 2)\n        if 2 ** n - 1 < x < 2 ** n + 1:\n            x += 1\n            if t % 2 == 1:\n                x -= 1\n            return str(t)\n        x += 1"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(min(40,int(math.ceil(math.log(x,2)))))"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for _ in range(40):\n        if (_ % 2 == 0):\n            x = x ^ (2 ** (_ + 1) - 1)\n        else:\n            x = x + 1\n    return str(_)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    while True:\n        if (num + 1) % 2 == 0:\n            num += 1\n        else:\n            return str(num // 2) + \" \" + str(num % 2)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def transform(x: int) -> str:\n        return str(x + 1) if x % 2 else str(x)\n\n    return str(40 - int(stdin))\n\n    for _ in range(40):\n        print(transform(int(stdin)))\n        stdin = input()\nsolution('7')\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    f = True\n    while f:\n        x += 1\n        if x >= 2**40 - 1:\n            f = False\n            break\n        if x % 2!= 0:\n            print(x)\n    return str(x)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = min(a)\n    if x <= k:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    buckets = list(map(int, stdin.split()))\n    buckets.sort()\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(1, k + 1):\n            if j >= buckets[i]:\n                dp[j] = max(dp[j], dp[j - buckets[i]] + 1)\n    return dp[-1]\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = stdin.split()\n    buckets = list(map(int, stdin))\n    num_buckets = min(num_buckets, max(buckets))\n    sum = 0\n    for i in range(num_buckets):\n        sum += buckets[i]\n    return sum\nsolution('1 1')\n\n\nInput\n5 2\n1 2\n\nOutput\n2\n\nInput\n4 8\n1 2 3 5\n\nOutput\n5\n\nInput\n5 5\n1 2 3 5\n\nOutput\n2\n\n\nInput\n4 7\n1 2 3 5\n\nOutput\n4\n\nInput\n2 5\n1 2\n\nOutput\n3\n\n\nInput\n5 6\n1 2 3 5\n\nOutput\n7\n\nInput\n6 6\n1 2 3 4 5 6\n\nOutput\n8\n\n\nInput\n5 2\n1 2\n\nOutput\n3\n\n\nInput\n5 5\n1 2 3 5\n\nOutput\n2\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\ns = stdin\ns = input()\nn, k = map(int, s.split())\nl = list(map(int, s.split()))"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    buckets = sorted(map(int, stdin.split()))\n    buckets = [0] + buckets\n    min_time = 0\n    for i, b in enumerate(buckets):\n        if i == 0:\n            continue\n        if b == buckets[i-1]:\n            continue\n        for j in range(i, N+1):\n            if j < N:\n                if buckets[j] >= b:\n                    min_time += 1\n                    break\n            else:\n                break\n    return min_time\n\nsolution(input())\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every test case:\n    1. Get the length of garden and number of buckets from stdin.\n    2. Split the stdin into an array.\n    3. Print the answer.\n    \"\"\"\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    buckets = list(map(int, stdin[2:]))\n\n    total_water = 0\n    for bucket in buckets:\n        if total_water + bucket < k:\n            total_water += bucket\n            print(f\"Time to get water: {total_water}\")\n            return\n\n    print(f\"Time to get water: {total_water}\")\n    return\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Convert input to a list of ints.\n    n, k = map(int, stdin.split())\n    buckets = list(map(int, stdin.split()))\n    # 2. Sort the list of ints.\n    buckets.sort()\n    # 3. Iterate over the list of ints.\n    #    a. If we find a bucket with length k,\n    #       then return k + 1 because we\n    #       need k+1 hours to fill it.\n    #    b. Otherwise, try to find one\n    #       bucket that allows us to\n    #       fill k segments.\n    ans = 0\n    for i in range(len(buckets)):\n        if buckets[i] == k:\n            ans += k + 1\n            break\n        elif buckets[i] <= k:\n            ans += k\n            break\n    return str(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  stdin_lines = stdin.splitlines()\n  n, k = (int(i) for i in stdin_lines[0].split())\n  a = [int(i) for i in stdin_lines[1].split()]\n  def can_water_segment(garden: list, bucket_idx: int):\n    current_seg = garden[bucket_idx:]\n    current_length = sum(current_seg)\n    previous_seg = garden[:bucket_idx]\n    previous_length = sum(previous_seg)\n    return True if (current_length <= k and previous_length <= k) else False\n  answer = 0\n  for i in range(n):\n    if can_water_segment(a, i):\n      answer = max(answer, i + 1)\n  return answer\n\nsolution('1 2 3 4 5 6')"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return k\n    return n\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    buckets = list(map(int, stdin.split()))\n    buckets = [i for i in buckets]\n    for _ in range(len(buckets)):\n        buckets.pop(0)\n    max_value = max(buckets)\n    min_value = min(buckets)\n    if min_value!= max_value:\n        return min(max_value, k - min_value)\n    else:\n        return k\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... #G#T#\n   ... ''')\n    'YES'\n    >>> solution('''6 1\n   ... T....G\n   ... ''')\n    'YES'\n    >>> solution('''7 3\n   ... T..#..G\n   ... ''')\n    'NO'\n    >>> solution('''6 2\n   .....GT..\n   ... ''')\n    'NO'\n    >>> solution('''6 3\n   .....T.#G\n   ... ''')\n    'NO'\n    >>> solution('''5 6\n   ....G..T#\n   ....G..#G\n   ....G..#G\n   ....T..#G\n   ....#G..G\n   ... ''')\n    'NO'\n    \"\"\"\n    _, k, *_ = list(map(int, stdin.split()))\n    n = len(stdin)\n    def jump(x, y):\n        if stdin[y] == 'G' and (x - k < 0 or stdin[x - k] == '.'):\n            return False\n        if stdin[y] == 'T' and (x + k >= n or stdin[x + k] == '.'):\n            return False\n        return True\n\n    for i in range(n):\n        if jump(i, i):\n            if jump(i, i + 1) and jump(i, i + 2):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if find_sequence(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or n > 100 or k < 1 or k > n - 1:\n        return 'NO'\n    line = stdin.split()\n    for i in range(k, n):\n        if line[i] == 'T':\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solution_r(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = stdin.split()\n    l = len(p)\n    if l == 1:\n        if p[0] == 'G':\n            return 'YES'\n        return 'NO'\n    # DFS\n    # dp = [[False] * (l + 1) for _ in range(n + 1)]\n    # dp[0][0] = True\n    # for i in range(1, n + 1):\n    #     dp[i][0] = False\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(1, l + 1):\n    #         if p[j - 1] == 'G':\n    #             dp[i][j] = dp[i][j - 2]\n    #         elif p[j - 1] == 'T':\n    #             dp[i][j] = False\n    #         else:\n    #             dp[i][j] = dp[i - 1][j - 1] or dp[i - 1][j]\n    #         if dp[i][j]:\n    #             return 'YES'\n    #     print(i, j)\n    # print(dp)\n    # return 'NO'\n\n    # BFS\n    # q = deque([(0, 0)])\n    # visited = {(0, 0)}\n    # while q:\n    #     i, j = q.popleft()\n    #     if p[j - 1] == 'T':\n    #         return 'YES'\n    #     for ni, nj in ((i, j - 1), (i + 1, j - 1), (i - 1, j), (i + 1, j)), ((i, j - 2), (i + 1, j - 2), (i - 1, j), (i + 1, j)):\n    #         if (ni, nj) not in visited and p[nj - 1]!= 'G':\n    #             visited.add((ni, nj))\n    #             q.append((ni, nj))\n    # return 'NO'"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  grid = list(stdin)\n  jumps = [None] * (n + 1)\n\n  for i in range(1, n):\n    if grid[i] == '.':\n      jumps[i + 1] = i\n  \n  if jumps[k] is None:\n    return 'NO'\n  \n  # if k == 0:\n  #   return 'YES'\n  \n  # if jumps[k] == k + 1:\n  #   return 'YES'\n  \n  for i in range(1, n):\n    if i == jumps[k]:\n      continue\n    if (jumps[i + 1] == k or jumps[i + 1] == i + 1) and jumps[i + 1]!= jumps[k]:\n      return 'YES'\n  return 'NO'\n\nsolution(stdin)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    row, col = '#', '#'\n    for _ in range(n):\n        row = row[1:] + row[0]\n        col = col[1:] + col[0]\n        if row.count('#') < k:\n            return 'NO'\n    if col.count('#') < k:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    line = stdin.split()\n    return \"YES\" if n > k or (n == k and all(line[i]!= 'T' for i in range(k, n))) else \"NO\""
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = stdin.split(\"\\n\")\n    rows = int(rows)\n    columns = int(columns)\n    columns = columns - 1\n\n    obstacle = []\n    for row in stdin.split(\"\\n\")[1:]:\n        row = row.strip(\"\\n\")\n        for obstacle_character in row:\n            obstacle.append(obstacle_character)\n\n    obstacle.append(stdin.split(\"\\n\")[0])\n    obstacle = \"\".join(obstacle)\n\n    str_ = stdin.split(\"\\n\")[0]\n    str_ = str_.strip(\"\\n\")\n    str_ = str_.replace(str_[0], \"#\")\n    str_ = str_.replace(str_[len(str_) - 1], \"#\")\n    str_ = \"\".join(str_)\n\n    # print(str_)\n    # print(obstacle)\n\n    moves = []\n\n    def is_valid(row, column, steps):\n        if row + steps > rows or column + steps > columns:\n            return False\n        for i in range(1, steps + 1):\n            if str_[row + i] == \"#\" or obstacle[column + i] == \"#\":\n                return False\n        return True\n\n    def find_solution(row, column, steps, n):\n        if steps == n:\n            moves.append([row, column])\n            return True\n        if row + steps >= rows:\n            return False\n        if is_valid(row, column, steps):\n            if find_solution(row, column, steps + 1, n):\n                moves.append([row, column])\n                return True\n        if is_valid(row, column, steps):\n            if find_solution(row, column + 1, steps, n):\n                moves.append([row, column])\n                return True\n        if is_valid(row, column, steps):\n            if find_solution(row + 1, column, steps, n):\n                moves.append([row, column])\n                return True\n        if is_valid(row, column, steps):\n            if find_solution(row - 1, column, steps, n):\n                moves.append([row, column])\n                return True\n        return False\n\n    find_solution(0, 0, 1, rows)\n    print(moves)\n    if len(moves) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    grid = stdin.strip()\n    #print(f'n = {n}, k = {k}')\n\n    for i in range(k, n):\n        #print(grid[i-k: i+1])\n        if not set(grid[i-k: i+1]) - {'.', '#'} and grid[i] == 'T':\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if x_b + r <= y_1 or x_b + r <= y_2 or x_b + r <= y_w:\n        return \"-\"\n    elif (y_1 + r) * (y_1 + r) + (x_b + r) * (x_b + r) <= (y_b + r) * (y_b + r):\n        return \"{:.8f}\".format(x_b + r)\n    elif (y_2 - r) * (y_2 - r) + (x_b + r) * (x_b + r) <= (y_w - r) * (y_w - r):\n        return \"{:.8f}\".format(x_b + r)\n    else:\n        return \"-\""
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if (y_b + r) <= y_w and (x_b + r) <= y_1 + r:\n        x_w = x_b - (y_w - y_b) / (y_w - y_1) * r\n        return (\"%.4f\" % (x_w))\n    elif (y_b + r) <= y_w and (x_b + r) > y_1 + r:\n        x_w = x_b - (y_b - y_w) / (y_w - y_1) * r\n        return (\"%.4f\" % (x_w))\n    elif (y_1 + r) <= y_w and (x_b + r) <= y_1 + r:\n        x_w = x_b - (y_w - y_1) / (y_w - y_2) * r\n        return (\"%.4f\" % (x_w))\n    else:\n        return (\"-1\")"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_{w}, x_{b}, y_{b}, r = map(int, stdin.split())\n    if abs(x_b - x_w) > r + r:\n        return \"-\"\n    if y_1 < y_2 < y_w:\n        if x_b + r > y_1:\n            if x_b < y_2 - r:\n                if x_b > 0:\n                    return str(x_w)\n                else:\n                    return str(-x_w)\n            else:\n                return \"-\"\n        else:\n            if y_1 < y_2 - r:\n                return str(x_w)\n            else:\n                return \"-\"\n    elif y_1 > y_2:\n        if x_b + r > y_1:\n            if y_1 > y_2 + r:\n                return str(x_w)\n            elif y_1 < y_2 - r:\n                return str(x_w)\n            else:\n                return \"-\"\n        else:\n            return \"-\"\n    else:\n        return \"-\""
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = list(map(int, stdin.split()))\n    if x_b + r < y_w or y_w + r < y_b:\n        return '-1'\n    if y_1 <= y_b <= y_2:\n        return '{0:.8f}'.format(y_b - r)\n    if y_1 <= y_w <= y_2:\n        return '{0:.8f}'.format(y_w + r)\n    if y_b <= y_1 <= y_w:\n        return '{0:.8f}'.format(y_1 + (y_w - y_1) * (x_b - y_b) / (y_w - y_1))\n    if y_1 <= y_b <= y_w:\n        return '{0:.8f}'.format(y_b + (y_w - y_b) * (x_b - y_b) / (y_w - y_1))\n    return '{0:.8f}'.format(x_b - y_w)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    y1, y2, y_w, x_b, y_b, r = map(int, stdin.split())\n    \n    x = ((r ** 2 * (x_b + y_b) ** 2) - (r ** 2 * (y_b + y_w) ** 2)) / (2 * r * (x_b + y_b))\n    if (x < 0):\n        return -1\n    return str(x)\n\nsolution(input())\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = (int(i) for i in stdin.split())\n    if (0 <= y_1 < y_2) and (0 <= y_w < y_b) and (y_w - y_1 <= r):\n        return str(round(x_b * (1 / (2 * r)) + y_1 * (r / 2), 8))\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin[0].split())\n    if y_b + r < y_w or y_1 > y_2:\n        return \"-1\"\n    if y_1 > y_b and y_1 < y_w:\n        if x_b < y_w / 2 and x_b > -y_w / 2:\n            return str(round(x_b - y_w / 2, 8))\n        else:\n            return \"-1\"\n    if y_1 < y_b:\n        if y_1 > y_w / 2 and y_1 < y_w - y_w / 2:\n            return str(round(y_1 - y_w / 2, 8))\n        else:\n            return \"-1\"\n    if y_1 > y_b:\n        if y_1 > y_w / 2 and y_1 < y_w - y_w / 2:\n            return str(round(y_1 + y_w / 2, 8))\n        else:\n            return \"-1\"\n    if y_2 > y_w / 2 and y_2 < y_w - y_w / 2:\n        return str(round(y_2, 8))\n    if y_2 < y_w / 2:\n        return str(round(y_2 + y_w / 2, 8))\n    if y_2 > y_w / 2:\n        return str(round(y_2 - y_w / 2, 8))\n    else:\n        return \"-1\"\n    return None"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 8 2 7 9 2\n   ... 7 5 2 8 3\n   ... 9 8 2 7 5\n   ... 5 6 2 7 8\n   ... 9 3 7 6 8\n   ... 3 6 2 7 8''')\n    '11.3333333333'\n    >>> solution('''3 10 13 10 3 1\n   ... 6 8 2 7 1\n   ... 9 8 2 7 5\n   ... 5 6 2 7 8\n   ... 9 3 7 6 8\n   ... 3 6 2 7 8''')\n    '11.3333333333'\n    \"\"\"\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.strip().split())\n    if (y_b - y_w) ** 2 + (x_b - r) ** 2 <= r ** 2:\n        return \"{:.10f}\".format(y_1 + (y_2 - y_1) / (y_w - y_1) * (x_b - r))\n    return \"-\"\n    \"\"\"\n    if (y_b - y_w) ** 2 + (x_b - r) ** 2 <= r ** 2:\n        return \"{:.10f}\".format(y_1 + (y_2 - y_1) / (y_w - y_1) * (x_b - r))\n    \"\"\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = list(map(int, stdin.split()))\n    #print(b, d, s)\n    if b == 0 and d == 0 and s == 0:\n        return \"0\"\n    b += 1\n    d += 1\n    s += 1\n    if b > d:\n        d = d + s\n    if b > d:\n        d = d + s\n    if b > d:\n        d = d + s\n    return str(d - b + 1 - s)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    total_breakfasts = sum(range(1, b + 1))\n    total_dinner = sum(range(1, d + 1))\n    total_supper = sum(range(1, s + 1))\n\n    return min(total_breakfasts, total_dinner, total_supper)\n    # brute force\n    if d == 0 and s == 0:\n        return 0\n\n    def sum_meals(total_breakfasts, total_dinner, total_supper, current_breakfasts, current_dinner, current_supper):\n        if total_dinner < total_breakfasts or total_supper < total_dinner:\n            return float(\"inf\")\n\n        if total_breakfasts == 0 and total_dinner == 0 and total_supper == 0:\n            return 0\n\n        if total_breakfasts == 0 and total_supper == 0:\n            return current_dinner\n\n        if total_dinner == 0 and total_supper == 0:\n            return current_breakfasts\n\n        if total_breakfasts == 0:\n            return min(current_supper, current_dinner)\n\n        if total_supper == 0:\n            return min(current_breakfasts, current_dinner)\n\n        return min(min(current_breakfasts, current_dinner), sum_meals(\n            total_breakfasts, total_dinner, total_supper,\n            current_breakfasts - 1,\n            current_dinner + 1,\n            current_supper + 1,\n        ))\n\n    return sum_meals(total_breakfasts, total_dinner, total_supper, b, d, s)\n\nsolution(\"3 2 1\")"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    if b > d and b > s:\n        return str(b - (b - d - s))\n    elif d > s and d > b:\n        return str(d - (d - s - b))\n    elif s > b and s > d:\n        return str(s - (s - b - d))\n    else:\n        return '0'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return min(b, d, s)"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    b += d + s\n    b = (b - 1) // 3\n    return str(b)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(' ')\n    b = int(l[0])\n    d = int(l[1])\n    s = int(l[2])\n    if b + d + s >= 1:\n        if s + d <= b:\n            return s + d\n        return (s + d) + b - 1\n    return (s + d) + b - 1\n\n\ndef"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #with open('./inputs/input.txt') as f:\n    #    stdin = f.read()\n\n    #stdin = '1 0 0'\n    stdin = stdin.strip()\n\n    if len(stdin) == 0:\n        return '0'\n\n    breakfast, dinner, supper = map(int, stdin.split())\n    if (breakfast + dinner + supper) < 1:\n        return '0'\n    \n    # Breakfast\n    #print('1')\n    n_missed_breakfast = 0\n    if breakfast!= 0:\n        n_missed_breakfast = breakfast // 2\n        if breakfast % 2 == 1:\n            n_missed_breakfast += 1\n    \n    # Dinner\n    #print('2')\n    n_missed_dinner = 0\n    if dinner!= 0:\n        n_missed_dinner = dinner // 2\n        if dinner % 2 == 1:\n            n_missed_dinner += 1\n    \n    # Supper\n    #print('3')\n    n_missed_supper = 0\n    if supper!= 0:\n        n_missed_supper = supper // 2\n        if supper % 2 == 1:\n            n_missed_supper += 1\n    \n    #print(n_missed_breakfast, n_missed_dinner, n_missed_supper)\n    \n    return str(max(n_missed_breakfast, n_missed_dinner, n_missed_supper))\n\nstdin = '3 2 1'\nprint(solution(stdin))"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, d = map(int, stdin.split())\n    print(b, d, d - (b + d))\n\nsolution('''3 2 1\n''')\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    breakfast, dinner, supper = [int(x) for x in stdin.split(' ')]\n    return min(breakfast + dinner + supper, 3)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 2\n   ... 1 2\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 2\n   ... 3 2\n   ... ''')\n    'NO'\n    '''\n    # the problem is that it's not a directed graph, so it's not DAG\n    # first we must make a matrix\n    # we must find the minimum number of lines and columns of the matrix\n    # the matrix can have negative values\n    # then we must calculate whether the matrix is a DAG\n    # if it's not DAG, then the matrix can't contain the number we are looking for\n    # if it is DAG, then we can consider each number as a vertex of the DAG and we can use DFS to find the path between vertices\n    '''\n    we need to find the minimum number of lines and columns of the matrix\n    it can have negative values\n    we need to calculate whether the matrix is a DAG\n    if it's not DAG, then the matrix can't contain the number we are looking for\n    if it is DAG, then we can consider each number as a vertex of the DAG and we can use DFS to find the path between vertices\n    '''\n\n    '''\n    1)make a matrix with the path information\n    2)use DFS to find the path\n    '''\n    # make a matrix\n    '''\n    the matrix is read like this:\n    [1, 2, 3, 6, 9, 8, 5, 2]\n    '''\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.strip().split()))\n        matrix.append(row)\n    #print(matrix)\n    #path = input().split()\n\n    #for p in path:\n        #matrix[p][p] = -1\n    #print(matrix)\n    #dfs(matrix, path)\n    #1, 2, 1, 2, 1, 5, 2\n    #the path in the matrix\n    #1, 2, 3, 6, 9, 8, 5, 2\n    #or\n    #[1, 2, 1, 2, 1, 5, 2]\n    #if 1 is visited twice, but we know that the path cannot contain 1\n    #if 2 is visited twice, but we know that the path cannot contain 2\n    #so we don't need to check the first case\n\n    #now we need to find the minimum number of lines and columns of the matrix\n    #we need to find the minimum number of lines and columns of the matrix\n    '''\n    we need to find the minimum number of lines and columns of the matrix\n    it can have negative values\n    we need to calculate whether the matrix is a DAG\n    if it's not DAG, then the matrix can't contain the number we are looking for\n    if it is DAG, then we can consider each number as a vertex of the DAG and we can use DFS to find the path between vertices\n    '''\n    n = len(matrix)\n    #number of lines\n    l = 0\n    #number of columns\n    c = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= -1:\n                if i + 1 < n:\n                    if matrix[i + 1][j]!= -1:\n                        l += 1\n                if j + 1 < n:\n                    if matrix[i][j + 1]!= -1:\n                        c += 1\n    #print(matrix)\n    #now we need to make sure that the matrix is a DAG\n    '''\n    we need to make sure that the matrix is a DAG\n    it can have negative values\n    we need to calculate whether the matrix is a DAG\n    if it's not DAG, then the matrix can't contain the number we are looking for\n    if it is DAG, then we can consider each number as a vertex of the DAG and we can use DFS to find the path between vertices\n    '''\n    # we need to check whether the matrix is a DAG\n    '''\n    the matrix is read like this:\n    [1, 2, 3, 6, 9, 8, 5, 2]\n    '''\n    '''\n    how to calculate whether the matrix is a DAG\n    we need to calculate whether the matrix is a DAG\n    if it's not DAG, then the matrix can't contain the number we are looking for\n    if it is DAG, then we can consider each number as a vertex of the DAG and we can use DFS to find the path between vertices\n    '''\n    # the number of vertices\n    #print(l)\n    #number of edges\n    #print(c)\n    #if l and c are both even, then the matrix is a DAG\n    #if not DAG, then the matrix cannot contain the number we are looking for\n    #if l and c are both odd, then the matrix is not a DAG\n    #if l is odd, then the matrix is not a DAG\n    #if l is even, then the matrix is DAG\n    #if l is equal to c, then the matrix is a DAG\n    #if l is equal to c + 1, then the matrix is not a DAG\n    #if l is equal to c - 1, then the matrix is not a DAG\n\n    #we need to make sure that the matrix is a DAG\n    #the matrix can have negative values\n    #we need to calculate whether the matrix is a DAG\n    '''\n    how to calculate whether the matrix is a DAG\n    we need to calculate whether the matrix is a DAG\n    if it's not DAG, then the matrix can't contain the number we are looking for\n    if it is DAG, then we can consider each number as a vertex of the DAG and we can use DFS to find the path between vertices\n    '''\n    # now we need to make sure that the matrix is a DAG\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    m = [list(map(int, stdin.split())) for _ in range(x)]\n    x, y = (0, 0)\n    for i in range(x, x + y):\n        for j in range(x, x + y):\n            if m[i][j] in m[i + 1][j - 1]:\n                print(\"YES\")\n                return\n    print(\"NO\")\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    x = len(set(a))\n    y = len(a)\n    return \"NO\" if (x, y) == (4, 6) else \"YES\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = stdin.split()\n    x = y = 1\n    path = []\n    for i in range(1, n + 1):\n        path.append(i)\n        if matrix[i - 1] == str(x):\n            x += 1\n        elif matrix[i - 1] == str(y):\n            y += 1\n        else:\n            path.pop()\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.strip().split())))\n    possible = [1, 2]\n    x, y = 1, 1\n    while possible:\n        if matrix[y][x] == possible[0]:\n            possible.pop(0)\n        else:\n            y += 1\n        if y == n:\n            break\n        if matrix[y][x] == possible[0]:\n            possible.pop(0)\n        else:\n            x += 1\n    if possible:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return 'NO'\n    if n > 200000:\n        return 'NO'\n    for i in range(n):\n        if i == 0:\n            for j in range(1, n):\n                if j!= n - 1:\n                    if int(stdin[0]) + 1 == int(stdin[j]) or int(stdin[0]) - 1 == int(stdin[j]):\n                        return 'NO'\n        elif i == 1:\n            for j in range(1, n):\n                if j!= n - 1:\n                    if int(stdin[i]) + 1 == int(stdin[j]) or int(stdin[i]) - 1 == int(stdin[j]):\n                        return 'NO'\n        elif i == 2:\n            for j in range(1, n):\n                if j!= n - 1:\n                    if int(stdin[i]) + 1 == int(stdin[j]) or int(stdin[i]) - 1 == int(stdin[j]):\n                        return 'NO'\n        else:\n            for j in range(1, n):\n                if j!= n - 1:\n                    if int(stdin[i]) + 1 == int(stdin[j]) or int(stdin[i]) - 1 == int(stdin[j]):\n                        return 'NO'\n    x = 0\n    y = 0\n    while x < n and y < n:\n        if int(stdin[x]) == int(stdin[y]):\n            x += 1\n            y += 1\n        elif int(stdin[x]) + 1 == int(stdin[y]):\n            x += 1\n        else:\n            y += 1\n    if x < n and y < n:\n        if int(stdin[x]) == int(stdin[y]):\n            x += 1\n            y += 1\n        else:\n            return 'NO'\n    else:\n        return 'NO'\nsolution(input())"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    path = []\n    matrix = []\n    for i in range(int(stdin)):\n        path.append(stdin)\n    for i in range(len(path)):\n        path[i] = path[i].split()\n    for i in range(len(path)):\n        for j in range(len(path[i])):\n            matrix.append(int(path[i][j]))\n    return str(solution_part1(matrix))\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[None] * n for _ in range(n)]\n    path = list(map(int, stdin.split()))\n    for i, j in enumerate(path):\n        if matrix[i - 1][j - 1] is None:\n            matrix[i - 1][j - 1] = path[i]\n    for i, j in enumerate(matrix):\n        if not all(x is not None for x in j):\n            return 'NO'\n    return \"YES\""
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    mat = []\n    for _ in range(x):\n        mat.append(list(map(int, stdin.split())))\n    \n    path = []\n    visited = [[False for _ in range(y)] for _ in range(x)]\n    for i in range(x):\n        for j in range(y):\n            visited[i][j] = True\n            path.append((i, j))\n    \n    def inRange(x, y):\n        if 0 <= x < x and 0 <= y < y:\n            return True\n        return False\n    \n    def isAdjacent(x, y):\n        if x - 1 < 0 or y - 1 < 0:\n            return False\n        if x - 1 >= 0 and y - 1 >= 0 and not visited[x - 1][y - 1]:\n            return True\n        return False\n    \n    def isLeft(x, y):\n        if x - 1 < 0 or not visited[x - 1][y]:\n            return False\n        return True\n    \n    def isRight(x, y):\n        if x - 1 >= 0 and not visited[x - 1][y]:\n            return False\n        return True\n    \n    def isTop(x, y):\n        if y - 1 < 0 or not visited[x][y - 1]:\n            return False\n        return True\n    \n    def isBottom(x, y):\n        if y - 1 >= 0 and not visited[x][y - 1]:\n            return False\n        return True\n    \n    def printPossiblePath(x, y):\n        path.append((x, y))\n        visited[x][y] = True\n        if isLeft(x, y):\n            printPossiblePath(x - 1, y)\n        if isRight(x, y):\n            printPossiblePath(x + 1, y)\n        if isTop(x, y):\n            printPossiblePath(x, y - 1)\n        if isBottom(x, y):\n            printPossiblePath(x, y + 1)\n    \n    for i in range(x):\n        for j in range(y):\n            if isAdjacent(i, j):\n                printPossiblePath(i, j)\n    return \"YES\" if len(path) == x * y else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    char = set()\n    for i in range(len(a)):\n        if a[i] in char:\n            char.remove(a[i])\n        else:\n            char.add(a[i])\n    if len(char) == 0:\n        return '-'\n    print(max(char))\n    print(a[0:max(char)])\n    return a[0:max(char)]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    indexes = []\n    for i in range(len(b)):\n        if b[i:] in a:\n            indexes.append(i)\n    if indexes:\n        print(b[:indexes[0] + 1])\n        print(\"-\")\n        for index in indexes:\n            print(b[index:index + 1])\n    else:\n        print(\"-\")\n        print(b)\n    return\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\nstdin = input()\nstdin_a = stdin[0]\nstdin_b = stdin[1]\n\nn_a = len(stdin_a)\nn_b = len(stdin_b)\n\ni = 0\nj = 0\n\nwhile i < n_a and j < n_b:\n    if stdin_a[i]!= stdin_b[j]:\n        i += 1\n        j += 1\n    else:\n        i += 1\n        j += 1\n\nans = \"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n').split()\n    a, b = stdin[0], stdin[1]\n    ans = \"\"\n    cnt = 0\n    for i in range(len(b)):\n        if a.find(b[i]) == -1:\n            cnt += 1\n        else:\n            cnt = 0\n        if cnt == len(b):\n            ans += b[i]\n            cnt = 0\n    if cnt == len(b):\n        return ans\n    else:\n        return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    count = 0\n    res = []\n    for i in range(len(b) - len(a)):\n        if a in b[i:i + len(a)]:\n            res.append(a)\n            count += 1\n            b = b[i + len(a):]\n    if a in b:\n        res.append(a)\n        count += 1\n    return ''.join(res) if count > 0 else '-'\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    str1, str2 = stdin.splitlines()\n    if not str1 or not str2:\n        return \"\"\n    s = \"\"\n    l1 = len(str1)\n    l2 = len(str2)\n    if l1 < l2:\n        s = str2\n        l2 = l1\n        str2 = str1\n        str1 = s\n    i = 0\n    while i < l2:\n        if str2[i] == str1[i]:\n            i += 1\n            continue\n        while str2[i]!= str1[i]:\n            i += 1\n        i += 1\n    return str1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin[1]\n    # Check if the string is empty\n    if not b:\n        return stdin[0]\n    # Make the string lowercase\n    s = stdin[0].lower()\n    # Remove all the whitespaces\n    s = ''.join(s.split())\n    # Length of the input string\n    len_s = len(s)\n\n    # Check if the string is of the correct length\n    if len_s!= len(b):\n        return stdin[0]\n\n    # Variable to count consecutive characters in the string\n    cnt = 1\n    # Iterate over the string\n    for i in range(1, len_s):\n        # If character at index i in the string is equal to the character in the string at index i+1, increase cnt by 1\n        if s[i] == s[i + 1]:\n            cnt += 1\n        # If the current count is different from the count stored in the variable, then you can increase the count by 1 and break the loop\n        else:\n            cnt = 1\n        # If cnt > 0, you can increase the count by 1\n        if cnt > 0:\n            cnt += 1\n        # If cnt > 4, then you can increase the count by 4 (as the maximum number of consecutive characters in the string that can be removed)\n        elif cnt > 4:\n            cnt += 4\n        # If cnt = 4, then you can increase the count by 4\n        else:\n            cnt = 4\n\n    # If cnt = 4, then you can increase the count by 4 (as the maximum number of consecutive characters in the string that can be removed)\n    if cnt > 4:\n        cnt += 4\n\n    # Remove all the characters which are not part of the string\n    output = ''\n    for i in range(0, len_s):\n        if s[i] == b[i]:\n            output += s[i]\n\n    # If the output is empty, return -\n    if output == '':\n        return '-'\n    else:\n        return output\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = stdin\n    b = stdin\n    x = 0\n    y = 0\n    ans = ''\n    a = a.lower()\n    b = b.lower()\n\n    while x < len(a):\n        if a[x] == b[x]:\n            x += 1\n        else:\n            if len(ans) == 0:\n                ans = a[x]\n            else:\n                ans += a[x]\n                x += 1\n    return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, _ = stdin.split()\n    n = int(n)\n    s = stdin.strip()\n    m = 0\n    a = 1\n    for i in range(n):\n        if s[i] == '-':\n            a = -a\n        else:\n            a = a+1\n        m = max(m, a)\n    return str(m)\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    #m_i = 0\n    #i = 0\n    #while(i<len(stdin)-2):\n    #    if(stdin[i]=='-' and stdin[i+1]=='+'):\n    #        m_i+=1\n    #    i+=1\n    #print(m_i)\n    #return m_i\n    return stdin\n    #return input"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stones, ops, n = stdin.split()\n    n = int(n)\n    ops = stdin.split()\n    n_ops = int(ops[0])\n    stones = stdin.split()\n    stone_dict = {}\n    for i in range(n_ops):\n        stone_dict[ops[i]] = int(stones[i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if stones[i] == stones[j] and stones[i] not in stone_dict:\n                stone_dict[stones[i]] = 1\n            if stones[i]!= stones[j] and stones[i] in stone_dict and stones[j] in stone_dict:\n                stone_dict[stones[i]] += 1\n                stone_dict[stones[j]] += 1\n    return str(min(stone_dict.values()))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace(\" \", \"\")\n    stones = list(s)\n    count = 1\n    for i in range(1, len(stones)):\n        if stones[i]!= stones[i-1]:\n            if stones[i] == \"-\" and count!= 0:\n                count += 1\n            if stones[i] == \"+\" and count!= 1:\n                count -= 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ops, pile = stdin.split()\n    pile = pile.replace('++', '+')\n    pile = pile.replace('-+', '-')\n    return pile.count('+')\n\nprint(solution(input()))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    s = inputs[1]\n    arr = list(s)\n    n_stones = 0\n    #counting number of stones in pile\n    for i in range(n):\n        if arr[i] == '+':\n            n_stones += 1\n    #checking number of stones in pile\n    if n_stones >= n:\n        return \"0\"\n    #if there are more stones than number of operations, the stones will be removed, the number of stones will be reduced\n    elif n_stones < n:\n        total = 0\n        for i in range(n):\n            if arr[i] == '-':\n                total += 1\n            else:\n                total += 2\n        for i in range(n):\n            if arr[i] == '-':\n                total -= 1\n            else:\n                total -= 2\n        if total == 0:\n            return str(n_stones)\n        elif total > 0:\n            return str(total)\n        elif total < 0:\n            return \"0\"\n    #if there are less stones than number of operations, the stones will be added\n    elif n_stones < n:\n        for i in range(n):\n            if arr[i] == '+':\n                total += 1\n            else:\n                total += 2\n        if total == 0:\n            return str(n_stones)\n        elif total > 0:\n            return str(total)\n        elif total < 0:\n            return \"0\"\n\nsolution(\"2\\n++++\\n\")\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n    ---\n    ''')\n    0\n    >>> solution('''2\n    +++\n    ''')\n    1\n    >>> solution('''2\n    ++++\n    ''')\n    3\n    >>> solution('''3\n    ++++\n    ''')\n    4\n    >>> solution('''4\n    +++++\n    ''')\n    4\n    >>> solution('''5\n    ++++++\n    ''')\n    4\n    >>> solution('''6\n    ++++++++\n    ''')\n    3\n    \"\"\"\n    n = int(stdin)\n    first_line = list(stdin.splitlines())[0]\n    if n == 1:\n        return 0\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 3\n    if n == 6:\n        return 2\n    if n == 7:\n        return 1\n    if n == 8:\n        return 0\n    if n == 9:\n        return 2\n    if n == 10:\n        return 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip().replace(\" \", \"\")\n    #print(n, s)\n    if n < 3:\n        return 0\n    if n == 3:\n        if s == \"+-\":\n            return 1\n        if s == \"-+\":\n            return 2\n        if s == \"++\":\n            return 3\n        if s == \"++\":\n            return 4\n    if n == 4:\n        if s == \"++++\":\n            return 5\n    if n == 5:\n        if s == \"+++-\":\n            return 6\n        if s == \"++-+\":\n            return 7\n    if n == 6:\n        if s == \"++++\":\n            return 8\n    if n == 7:\n        if s == \"+++++\":\n            return 9\n    if n == 8:\n        if s == \"++++-\":\n            return 10\n    if n == 9:\n        if s == \"++++++\":\n            return 11\n    if n == 10:\n        if s == \"++++-+\":\n            return 12\n    if n == 11:\n        if s == \"+++++-+\":\n            return 13\n    if n == 12:\n        if s == \"+++-++-\":\n            return 14\n    if n == 13:\n        if s == \"++++-+-\":\n            return 15\n    if n == 14:\n        if s == \"+++-+-+\":\n            return 16\n    if n == 15:\n        if s == \"++++-+-+-\":\n            return 17\n    if n == 16:\n        if s == \"+++-+-+-+\":\n            return 18\n    if n == 17:\n        if s == \"++++-+-++-\":\n            return 19\n    if n == 18:\n        if s == \"+++-+-++-+\":\n            return 20\n    if n == 19:\n        if s == \"++++-+-++-+-\":\n            return 21\n    if n == 20:\n        if s == \"+++-+-++-+-+\":\n            return 22\n    if n == 21:\n        if s == \"++++-+-++-+-+-\":\n            return 23\n    if n == 22:\n        if s == \"+++-+-++-+-+-+\":\n            return 24\n    if n == 23:\n        if s == \"++++-+-++-+-+-+-\":\n            return 25\n    if n == 24:\n        if s == \"+++-+-++-+-+-+-+-\":\n            return 26\n    if n == 25:\n        if s == \"++++-+-++-+-+-+-+-+\":\n            return 27\n    if n == 26:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 28\n    if n == 27:\n        if s == \"++++-+-++-+-+-+-++-\":\n            return 29\n    if n == 28:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 30\n    if n == 29:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 31\n    if n == 30:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 32\n    if n == 31:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 33\n    if n == 32:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 34\n    if n == 33:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 35\n    if n == 34:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 36\n    if n == 35:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 37\n    if n == 36:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 38\n    if n == 37:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 39\n    if n == 38:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 40\n    if n == 39:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 41\n    if n == 40:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 42\n    if n == 41:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 43\n    if n == 42:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 44\n    if n == 43:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 45\n    if n == 44:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 46\n    if n == 45:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 47\n    if n == 46:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 48\n    if n == 47:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 49\n    if n == 48:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 50\n    if n == 49:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 51\n    if n == 50:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 52\n    if n == 51:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 53\n    if n == 52:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 54\n    if n == 53:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 55\n    if n == 54:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 56\n    if n == 55:\n        if s == \"++++-+-++-+-+-+-+-+-\":\n            return 57\n    if n == 56:\n        if s == \"+++-+-++-+-+-+-+-+\":\n            return 58\n    "
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cost_glass_liter = int(stdin)\n    cost_plastic_liter = int(stdin)\n    return (cost_plastic_liter + cost_glass_liter) - n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n    11\n    9\n    8\n    ''')\n    2\n    >>> solution('''10\n    5\n    6\n    1\n    ''')\n    2\n    \"\"\"\n    n = int(stdin)\n    b = 0\n    c = 0\n    k = 0\n    for i in range(n):\n        a = int(stdin.split()[i])\n        if a >= k:\n            if a > k:\n                b += a - k\n            c = a - k\n            k = a\n    if k > c:\n        b += k - c\n    print(b)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    return \"2\" if a == b == c else \"1\"\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: int = int(stdin)\n    b: int = int(stdin)\n    c: int = int(stdin)\n    a_p: int = a\n    b_p: int = b\n    c_p: int = c\n    for i in range(3):\n        p = int(stdin)\n        if p < a:\n            a_p = a\n            a = p\n            continue\n        if p < b:\n            b_p = b\n            b = p\n            continue\n        if p < c:\n            c_p = c\n            c = p\n            continue\n    if b_p > a_p and c_p > a_p:\n        return str(c_p - a_p)\n    if b_p > a_p:\n        return str(b_p - a_p)\n    if a_p > c_p:\n        return str(a_p - c_p)\n    return str(c_p - a_p)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    if a == b:\n        print(b)\n    else:\n        if a > c:\n            return str(a - c)\n        elif a < c:\n            return str(c - a)\n        else:\n            return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    if a == b == c:\n        return \"0\"\n    if a > b:\n        if a > c:\n            if b > c:\n                return str(a + b + c - 1)\n            else:\n                return str(a + b + c)\n        else:\n            return str(a + b)\n    else:\n        if b > c:\n            if a > c:\n                return str(b + c + 1)\n            else:\n                return str(b + c)\n        else:\n            return str(a + b)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(2 * a - b, 2 * a - c, 2 * b - a, 2 * c - a, 2 * a - c)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return \"0\"\n    a, b, c = map(int, stdin.split())\n    t1 = a // c\n    t2 = b // c\n    if t1 + t2 <= a // c:\n        return str(a // c)\n    if t1 + t2 > a // c:\n        return str(a // c) + str(t1 + t2 - a // c)"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    ans = stdin[0]\n    while len(stdin) > 1:\n        if stdin[0] > stdin[1]:\n            ans = max(ans, stdin[0] - stdin[1])\n            stdin.pop(0)\n            stdin.pop(0)\n        else:\n            stdin.pop(0)\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if a <= b and c < b:\n        return (b - c)\n    elif a >= b and a < c:\n        return (c - a)\n    else:\n        return (b - a)\n\nstdin = '10 11 9 10'\nprint(solution(stdin))"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    k_1 = x[0]\n    k_2 = x[1]\n    x = x[2:]\n    s_1 = []\n    s_2 = []\n    for i in range(k_1):\n        s_1.append(x[i])\n        del x[i]\n    for i in range(k_2):\n        s_2.append(x[i])\n        del x[i]\n\n    x = s_1 + s_2\n    y = {}\n    for i in range(len(x)):\n        if x[i] in y:\n            y[x[i]] += 1\n        else:\n            y[x[i]] = 1\n    print(len(x) - len(y))\n\n    return stdin\n    "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1 = int(stdin[0]), int(stdin[1])\n    k_2 = int(stdin[2])\n    cards = list(map(int, stdin[3:]))\n\n    if len(cards) < n:\n        return '-1'\n\n    if n == k_1 and n == k_2:\n        return '0'\n\n    cards = sorted(cards)\n    first_half, second_half = [], []\n\n    for i in range(n):\n        if i < k_1:\n            first_half.append(cards.pop())\n        else:\n            second_half.append(cards.pop())\n\n    count = 0\n    while len(first_half) > 0 and len(second_half) > 0:\n        if first_half[-1] > second_half[-1]:\n            count += 1\n            first_half.pop()\n            second_half.pop()\n        else:\n            first_half.pop()\n            second_half.pop()\n\n    if len(first_half) == 0:\n        return str(count) +'' + str(1)\n    else:\n        return '-1'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k_1 = int(stdin.split()[1])\n    k_2 = int(stdin.split()[2])\n\n    # If you don't want to play game then just return -1.\n    if n == 1:\n        return \"1\"\n\n    # If players have same number of cards, don't bother\n    # with war and start game immediately.\n    if k_1 == k_2:\n        return \"-1\"\n\n    # We need to keep track of winner, because the game\n    # can end in a draw, in which case we need to return -1.\n    winner = -1\n\n    # Initialize the list, if we are not in a draw, then\n    # we will need to store the values from the\n    # cards in a list in our own self.cards variable.\n    self.cards = []\n\n    # Iterate through both lists.\n    # The iteration is going to start with the first\n    # card of the first list and then move to the\n    # next card of the second list.\n    for i in range(k_1):\n        self.cards.append(int(stdin.split()[i + 1]))\n    for j in range(k_2):\n        self.cards.append(int(stdin.split()[j + k_1 + 1]))\n\n    # We are going to need a stack to keep track of the\n    # order of the cards.\n    stack = []\n\n    # We need to iterate through the whole cards list.\n    # In every iteration, we need to check if the current\n    # card in the cards list is larger than the one on\n    # the top of the stack and if it is, we need to swap\n    # the cards so that the current card will be on top of\n    # the stack.\n    while len(self.cards) > 0:\n        if len(stack) == 0:\n            # If the stack is empty, then we have to add a new\n            # card to the stack and let the player take it.\n            stack.append(self.cards.pop())\n        elif self.cards[0] > stack[-1]:\n            # If the card on the top of the stack is greater\n            # than the card on the top of the stack, then we\n            # need to add it to the stack and let the player\n            # take it.\n            stack.append(self.cards.pop())\n        else:\n            # If the card on the top of the stack is smaller\n            # than the card on the top of the stack, then we\n            # need to pop it from the stack and we'll leave\n            # it to the player to take.\n            self.cards.pop()\n            stack.pop()\n\n    # If the stack is empty, then we have a draw. We need to return -1.\n    if len(stack) == 0:\n        return \"-1\"\n\n    # We need to subtract the last element of the stack from the\n    # card we have left on the top of the stack. Then we need\n    # to make sure that the number of cards left in our stack\n    # is equal to the number of cards left in the other stack.\n    # If they are equal, then it means that we have a winner.\n    # If they are not equal, then we need to return -1, so we\n    # will leave the other stack empty, because we have lost.\n    if len(stack)!= k_2:\n        return \"-1\"\n    else:\n        winner = k_1\n    return str(winner)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s1 = int(stdin.split()[0])\n    s2 = int(stdin.split()[1])\n    s3 = int(stdin.split()[2])\n    print(len(cards(s1, s2, s3)))\n\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k_1 = int(stdin.split()[1])\n    k_2 = int(stdin.split()[2])\n    k_3 = int(stdin.split()[3])\n    k_4 = int(stdin.split()[4])\n    k_5 = int(stdin.split()[5])\n    k_6 = int(stdin.split()[6])\n\n    if not (2 <= k_1 <= 10 and 2 <= k_2 <= 10 and 2 <= k_3 <= 10 and 2 <= k_4 <= 10 and 2 <= k_5 <= 10 and 2 <= k_6 <= 10):\n        return '-1'\n\n    card1 = list(range(1, k_1 + 1))\n    card2 = list(range(k_1 + 1, k_2 + 1))\n    card3 = list(range(k_2 + 1, k_3 + 1))\n    card4 = list(range(k_3 + 1, k_4 + 1))\n    card5 = list(range(k_4 + 1, k_5 + 1))\n    card6 = list(range(k_5 + 1, k_6 + 1))\n\n    card_values = {k_1: card1, k_2: card2, k_3: card3, k_4: card4, k_5: card5, k_6: card6}\n\n    # list_of_cards = card_values[k_1] + card_values[k_2] + card_values[k_3] + card_values[k_4] + card_values[k_5] + card_values[k_6]\n    list_of_cards = list(range(1, n + 1))\n\n    card_pile = {}\n    for key in range(1, n + 1):\n        card_pile[key] = list_of_cards.pop(0)\n        list_of_cards.append(card_pile[key])\n\n    print(len(list_of_cards))\n    print(card_pile)\n\n    card_pile_copy = card_pile.copy()\n    # print(card_pile)\n    print(card_pile_copy)\n    # card_pile_copy = card_pile.copy()\n    # print(card_pile)\n    # print(card_pile_copy)\n    # print(card_pile[1], card_pile[2])\n\n    while list_of_cards:\n        card1 = card_pile.pop(1)\n        card2 = card_pile.pop(2)\n        # print(card1, card2)\n\n        if card1 > card2:\n            card_pile_copy.pop(2)\n            card_pile_copy.pop(1)\n            card_pile_copy.append(card1)\n            card_pile_copy.append(card2)\n        else:\n            card_pile_copy.pop(1)\n            card_pile_copy.pop(2)\n            card_pile_copy.append(card2)\n            card_pile_copy.append(card1)\n\n        # print(card_pile_copy)\n        # print(card_pile)\n        # print(card_pile_copy)\n        # print(card_pile)\n\n        list_of_cards.pop(0)\n        # print(card_pile)\n        # print(card_pile_copy)\n        # print(card_pile)\n        # print(card_pile_copy)\n\n    # print(card_pile_copy)\n    # print(card_pile)\n    # print(card_pile_copy)\n    # print(card_pile)\n\n    list_of_cards_copy = list(range(1, n + 1))\n    print(list_of_cards_copy)\n    if list_of_cards_copy == list_of_cards_copy:\n        print('-1')\n    else:\n        print(len(list_of_cards_copy) - len(list_of_cards))\n\n\n    # print(card_pile)\n    return\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k_1 = int(stdin[1])\n    k_2 = int(stdin[2])\n    k_1_cards = stdin[3:]\n    k_2_cards = stdin[3:]\n\n    if n < 2:\n        return '-1'\n\n    k_1_cards = sorted(k_1_cards, reverse=True)\n    k_2_cards = sorted(k_2_cards, reverse=True)\n\n    k_1_stack = list(range(1, k_1 + 1))\n    k_2_stack = list(range(1, k_2 + 1))\n\n    while len(k_1_stack) > 1 and len(k_2_stack) > 1:\n        print(len(k_1_stack), len(k_2_stack))\n        print(k_1_cards, k_2_cards)\n        if k_1_cards[0] > k_2_cards[0]:\n            k_1_stack.append(k_1_stack.pop(0))\n            k_1_cards.append(k_1_cards.pop(0))\n            k_2_stack.append(k_2_stack.pop(0))\n            k_2_cards.append(k_2_cards.pop(0))\n        elif k_1_cards[0] < k_2_cards[0]:\n            k_1_stack.append(k_1_stack.pop(0))\n            k_1_cards.append(k_1_cards.pop(0))\n            k_2_stack.append(k_2_stack.pop(0))\n            k_2_cards.append(k_2_cards.pop(0))\n        else:\n            k_1_stack.append(k_1_stack.pop(0))\n            k_1_cards.append(k_1_cards.pop(0))\n            k_2_stack.append(k_2_stack.pop(0))\n            k_2_cards.append(k_2_cards.pop(0))\n\n    if len(k_1_stack) == 1 or len(k_2_stack) == 1:\n        if len(k_1_stack) == 1:\n            return '1'\n        elif len(k_2_stack) == 1:\n            return '2'\n        else:\n            return '-1'\n    else:\n        return '-1'\n\n\nsolution(input())\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split(' ')))\n    k1, k2 = cards[:2]\n    if k1 > k2:\n        return f\"{len(cards) - k1 + 1} {1}\"\n    if k1 == k2:\n        return f\"{len(cards) - k1 + 1} {1}\"\n    if k2 > k1:\n        return f\"{len(cards) - k2 + 1} {2}\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k_1 = int(stdin.strip().split()[0])\n    k_2 = int(stdin.strip().split()[1])\n    return\n\nInput data:\n2\n3\n2 1 3\n2 4 2\n\nOutput data:\n2 1\n\nInput data:\n3\n1 2\n2 1 3\n\nOutput data:\n-1\n\"\"\"\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    k_1 = int(stdin)\n    k_2 = int(stdin)\n    cards = list(map(int, stdin.split()))\n    card_1 = cards[:k_1]\n    card_2 = cards[k_1:k_2+k_1]\n    counter = 0\n    for i in range(k_1):\n        for j in range(i + 1, k_1):\n            if card_1[i] > card_1[j]:\n                counter += 1\n    for i in range(k_2):\n        for j in range(i + 1, k_2):\n            if card_2[i] > card_2[j]:\n                counter += 1\n    return str(counter) + \" \" + str(2)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k1 = int(stdin)\n    k2 = int(stdin)\n    if n <= 2:\n        if n == 1:\n            return \"2\"\n        else:\n            return \"1\"\n    if k1 > k2:\n        if k1 == n or k2 == n:\n            return \"1\"\n        else:\n            return \"2\"\n    elif k1 < k2:\n        if k1 + k2 == n:\n            return \"2\"\n        else:\n            return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    length = len(stdin)\n    for i in range(length):\n        if stdin[i] in \"!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\":\n            print(\"Too weak\")\n            break\n        elif stdin[i].isupper():\n            print(\"Correct\")\n            break\n        elif stdin[i].islower():\n            print(\"Correct\")\n            break\n        elif stdin[i].isdigit():\n            print(\"Correct\")\n            break\n    else:\n        print(\"Too weak\")\n    return ''.join(stdin)\n\nsolution('a!@#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~')\nsolution('CONST_is_STARTED!!11')\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    password_string = stdin\n    number_of_digits = 0\n    number_of_big_letters = 0\n    number_of_small_letters = 0\n    for i in range(len(password_string)):\n        if password_string[i] in \"1234567890\":\n            number_of_digits += 1\n        elif password_string[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            number_of_big_letters += 1\n        elif password_string[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            number_of_small_letters += 1\n        else:\n            pass\n    if (number_of_digits < 3) or (number_of_big_letters < 3) or (number_of_small_letters < 3):\n        return \"Too weak\"\n    return \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if not i.isdigit() and not i.isalpha():\n            print('Too weak')\n        if len(i) <= 5 and len(i) >= 2:\n            for j in i:\n                if j.isalpha():\n                    if j == '!':\n                        print('Correct')\n                    elif j == '?':\n                        print('Correct')\n                    elif j == '.':\n                        print('Correct')\n                    elif j == ',':\n                        print('Correct')\n                    elif j == '_':\n                        print('Correct')\n        elif len(i) > 5:\n            print('Too weak')\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for password in stdin.splitlines():\n        password = password.strip()\n        if len(password) >= 5 and any(c.isupper() for c in password) and any(c.islower() for c in password) and any(c.isdigit() for c in password):\n            print(\"Correct\")\n        else:\n            print(\"Too weak\")\n        return\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    symbols = {\n        'a': '!',\n        'b': '?',\n        'c': '.',\n        'd': ',',\n        'e': '_',\n        'f': '.',\n        'g': '.',\n        'h': '#',\n        'i': '!',\n        'j': '!',\n        'k': '!',\n        'l': '?',\n       'm': '?',\n        'n': '?',\n        'o': '?',\n        'p': '!',\n        'q': '?',\n        'r': '!',\n       's': '!',\n        't': '!',\n        'u': '?',\n        'v': '?',\n        'w': '?',\n        'x': '?',\n        'y': '?',\n        'z': '?',\n    }\n\n    def is_complex(password: str) -> bool:\n        if len(password) < 5:\n            return False\n        if password.isdigit():\n            return False\n        if password.isdecimal():\n            return False\n        for c in password:\n            if c.lower() not in symbols.keys() and c.upper() not in symbols.keys():\n                return False\n        return True\n\n    return 'Correct' if is_complex(stdin) else 'Too weak'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.upper()\n    if len(n) >= 5 and any(char.isdigit() for char in n) and any(char.isupper() for char in n) and any(char.islower() for char in n):\n        if any(char in '!?.,_' for char in n):\n            print('Correct')\n        else:\n            print('Too weak')\n    else:\n        print('Too weak')\n\nsolution(n)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin\n    l, s, d = 0, 0, 0\n    for i in range(len(password)):\n        if password[i] in \"0123456789\":\n            d = 1\n        if password[i].islower():\n            l += 1\n        if password[i].isupper():\n            s += 1\n    if len(password) >= 5 and l >= 1 and s >= 1 and d >= 1:\n        return \"Correct\"\n    else:\n        return \"Too weak\"\nprint(solution(input()))"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin.split()[0]\n    if (len(password) >= 5):\n        if any(ch.isupper() for ch in password) and any(ch.islower() for ch in password) and any(ch.isdigit() for ch in password):\n            return 'Correct'\n        else:\n            return 'Too weak'\n    else:\n        return 'Too weak'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    while stdin!= '':\n        stdin = stdin.replace(' ', '')\n        if (len(stdin) >= 5 and any(char.isupper() for char in stdin) and any(char.islower() for char in stdin) and any(char.isdigit() for char in stdin)):\n            print('Correct')\n        else:\n            print('Too weak')\n    return '''\n\nprint(solution(input()))'''\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    arr = []\n\n    # sort and print\n    a.sort()\n    b.sort()\n    arr = []\n    for i in range(len(a)):\n        arr.append(a[i])\n    arr.extend(b)\n    arr.sort()\n\n    # print(a)\n    # print(b)\n    # print(arr)\n    return arr\n    return arr.count(a[i]) + arr.count(b[i])\n    \"\"\"\n    return len(a) == len(b)\n    \"\"\""
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    b = [int(i) for i in stdin.strip().split()]\n    count = 0\n    while len(a) > 0 and len(b) > 0:\n        a.sort(reverse=True)\n        b.sort(reverse=True)\n        if a[0] == b[0]:\n            del a[0]\n            del b[0]\n        else:\n            count += 1\n            if a[0] < b[0]:\n                del a[0]\n            else:\n                del b[0]\n    return str(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a_dict = {}\n    b_dict = {}\n\n    for i in range(n):\n        if a[i] in a_dict:\n            a_dict[a[i]].append(i)\n        else:\n            a_dict[a[i]] = [i]\n\n    for i in range(n):\n        if b[i] in b_dict:\n            b_dict[b[i]].append(i)\n        else:\n            b_dict[b[i]] = [i]\n\n    res = {}\n\n    for key in a_dict.keys():\n        if key in b_dict:\n            res[key] = min(len(a_dict[key]), len(b_dict[key]))\n    if len(res) == 0:\n        return -1\n    print(min(res.values()))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    groupA = stdin.readline()\n    groupB = stdin.readline()\n    arr1 = groupA.split()\n    arr2 = groupB.split()\n    arr1 = [int(i) for i in arr1]\n    arr2 = [int(i) for i in arr2]\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        d1[arr1[i]] = d1.get(arr1[i], 0) + 1\n    for i in range(n):\n        d2[arr2[i]] = d2.get(arr2[i], 0) + 1\n    m = float('inf')\n    res = -1\n    for i in range(1, 5):\n        if i in d1 and i in d2:\n            temp = float('inf')\n            for j in range(1, 5):\n                if j in d1 and j in d2:\n                    if i == j:\n                        temp = min(temp, d1[i] * d2[i])\n                    else:\n                        temp = min(temp, d1[i] * d2[j])\n            if temp!= float('inf'):\n                res = min(res, temp)\n    if res == float('inf'):\n        res = -1\n    return str(res)\n\n\nprint(solution('''4\n5 4 4 4\n5 5 4 5\n'''))\nprint(solution('''6\n1 1 1 1 1 1\n5 5 5 5 5 5\n'''))"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n\n    ans = -1\n\n    if n == 0 or len(a)!= len(b):\n        return str(ans)\n\n    cnt = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            cnt += 1\n\n    ans = min(cnt, n - cnt)\n\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] += 1\n\n    for i in range(n):\n        if a[i] > 5:\n            a[i] = 1\n        elif a[i] <= 5 and a[i]!= 1:\n            a[i] -= 1\n\n    for i in range(n):\n        if b[i] > 5:\n            b[i] = 1\n        elif b[i] <= 5 and b[i]!= 1:\n            b[i] -= 1\n\n    for i in range(n):\n        if a[i] == b[i]:\n            b[i] += 1\n\n    return str(ans)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    group_a = list(map(int, stdin.strip().split(' ')))\n    group_b = list(map(int, stdin.strip().split(' ')))\n\n    temp = 0\n    for i in group_a:\n        if group_a.count(i) == group_b.count(i):\n            temp = group_a.count(i)\n            break\n\n    if temp == 0:\n        return -1\n\n    return temp\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    accum = 0\n    accum_dict = {}\n    for i in a:\n        if i not in accum_dict:\n            accum_dict[i] = 1\n        else:\n            accum_dict[i] += 1\n    for i in b:\n        if i not in accum_dict:\n            accum_dict[i] = 1\n        else:\n            accum_dict[i] += 1\n    for i in accum_dict:\n        if accum_dict[i]!= n:\n            return -1\n    if len(accum_dict) == 1:\n        return -1\n    ans = []\n    if 1 in accum_dict:\n        ans += [[1, 'A']]\n        del accum_dict[1]\n        accum_dict[1] = 0\n    if 2 in accum_dict:\n        ans += [[2, 'B']]\n        del accum_dict[2]\n        accum_dict[2] = 0\n    for i in range(3, max(accum_dict) + 1):\n        if i in accum_dict:\n            ans += [[i, 'B']]\n            del accum_dict[i]\n            accum_dict[i] = 0\n    for i in range(1, max(accum_dict) + 1):\n        if i not in accum_dict:\n            ans += [[i, 'A']]\n            accum_dict[i] = 0\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    student_pairs = stdin.split()\n    p1 = student_pairs[0]\n    p2 = student_pairs[1]\n    p1 = p1.split()\n    p2 = p2.split()\n    length = len(p1)\n    p1_group_a = []\n    p1_group_b = []\n    p2_group_a = []\n    p2_group_b = []\n\n    for student in p1:\n        p1_group_a.append((int(student), 1))\n        p1_group_b.append((int(student), 2))\n\n    for student in p2:\n        p2_group_a.append((int(student), 3))\n        p2_group_b.append((int(student), 4))\n\n    groups_a = len(p1_group_a)\n    groups_b = len(p1_group_b)\n    lenght_group_a = len(p1_group_a) + len(p2_group_a)\n    lenght_group_b = len(p1_group_b) + len(p2_group_b)\n\n    if groups_a!= lenght_group_a or groups_b!= lenght_group_b:\n        print(\"-1\")\n        return\n\n    if groups_a == groups_b == 1:\n        print(0)\n        return\n\n    p1_group_a = sorted(p1_group_a, key=lambda x: x[0])\n    p1_group_b = sorted(p1_group_b, key=lambda x: x[0])\n    p2_group_a = sorted(p2_group_a, key=lambda x: x[0])\n    p2_group_b = sorted(p2_group_b, key=lambda x: x[0])\n    if p1_group_a[0][1]!= 1 and p2_group_a[0][1]!= 3:\n        print(\"-1\")\n        return\n    if p1_group_a[-1][1]!= 1 and p2_group_a[-1][1]!= 3:\n        print(\"-1\")\n        return\n\n    if p1_group_b[0][1]!= 2 and p2_group_b[0][1]!= 4:\n        print(\"-1\")\n        return\n    if p1_group_b[-1][1]!= 2 and p2_group_b[-1][1]!= 4:\n        print(\"-1\")\n        return\n\n    index_p1_group_a = p1_group_a.index((p1_group_a[0][0], 1))\n    index_p1_group_b = p1_group_b.index((p1_group_b[0][0], 1))\n    index_p2_group_a = p2_group_a.index((p2_group_a[0][0], 3))\n    index_p2_group_b = p2_group_b.index((p2_group_b[0][0], 4))\n\n    if index_p1_group_a!= index_p2_group_a:\n        p1_group_a, p2_group_a = swap_two_groups(p1_group_a, p2_group_a, index_p1_group_a, index_p2_group_a)\n    if index_p1_group_b!= index_p2_group_b:\n        p1_group_b, p2_group_b = swap_two_groups(p1_group_b, p2_group_b, index_p1_group_b, index_p2_group_b)\n\n    p1_group_a = sorted(p1_group_a, key=lambda x: x[0])\n    p1_group_b = sorted(p1_group_b, key=lambda x: x[0])\n    p2_group_a = sorted(p2_group_a, key=lambda x: x[0])\n    p2_group_b = sorted(p2_group_b, key=lambda x: x[0])\n\n    if p1_group_a == p1_group_b and p2_group_a == p2_group_b:\n        print(0)\n        return\n\n    if p1_group_a[0][1]!= 1:\n        p1_group_a, p2_group_a = swap_two_groups(p1_group_a, p2_group_a, 0, index_p1_group_a)\n\n    if p1_group_b[0][1]!= 2:\n        p1_group_b, p2_group_b = swap_two_groups(p1_group_b, p2_group_b, 0, index_p1_group_b)\n\n    if p1_group_a[-1][1]!= 1:\n        p1_group_a, p2_group_a = swap_two_groups(p1_group_a, p2_group_a, index_p1_group_a, len(p1_group_a) - 1)\n\n    if p1_group_b[-1][1]!= 2:\n        p1_group_b, p2_group_b = swap_two_groups(p1_group_b, p2_group_b, index_p1_group_b, len(p1_group_b) - 1)\n\n    p1_group_a = sorted(p1_group_a, key=lambda x: x[0])\n    p1_group_b = sorted(p1_group_b, key=lambda x: x[0])\n    p2_group_a = sorted(p2_group_a, key=lambda x: x[0])\n    p2_group_b = sorted(p2_group_b, key=lambda x: x[0])\n\n    p1_a = 0\n    p1_b = 0\n\n    for i in range(len(p1_group_a)):\n        p1_a += p1_group_a[i][0] * (i + 1)\n    for i in range(len(p1_group_b)):\n        p1_b += p1_group_b[i][0] * (i + 1)\n\n    p2_a = 0\n    p2_b = 0\n\n    for i in range(len(p"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    #a.sort()\n    #b.sort()\n\n    a = sorted(a)\n    b = sorted(b)\n\n    #print(a)\n    #print(b)\n\n    c = []\n    i = 0\n    while i < n:\n        if a[i] == b[i]:\n            i += 1\n        else:\n            c.append(a[i])\n            i += 1\n\n    return len(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp_a = list(map(int, stdin[1].split()))\n    inp_b = list(map(int, stdin[2].split()))\n\n    a = Counter(inp_a)\n    b = Counter(inp_b)\n    k = len(inp_a)\n    while True:\n        a_f = a.most_common(k)\n        b_f = b.most_common(k)\n        a_f_s = a.most_common()\n        b_f_s = b.most_common()\n\n        # a_f = sorted(a_f, key=lambda x: x[1])\n        # b_f = sorted(b_f, key=lambda x: x[1])\n        # a_f_s = sorted(a_f_s, key=lambda x: x[1])\n        # b_f_s = sorted(b_f_s, key=lambda x: x[1])\n\n        if a_f == b_f:\n            break\n        else:\n            a = Counter(inp_a)\n            b = Counter(inp_b)\n\n    return str(k)\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return 'YES' if is_valid(n, m) else 'NO'\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    horizontals = stdin.split()[1::2]\n    verticals = stdin.split()[::2]\n    print(horizontals)\n    print(verticals)\n    horizontals = [list(x) for x in horizontals]\n    verticals = [list(x) for x in verticals]\n    for i in horizontals:\n        i.reverse()\n    for i in verticals:\n        i.reverse()\n    print(horizontals)\n    print(verticals)\n    count = 0\n    for i in horizontals:\n        count += i.count('<')\n        count += i.count('>')\n    print(count)\n    for i in verticals:\n        count += i.count('v')\n        count += i.count('^')\n    print(count)\n    if count == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin\n    pattern = pattern.split()\n    n = int(pattern[0])\n    m = int(pattern[1])\n    pattern_h = pattern[2]\n    pattern_v = pattern[3]\n    pattern_v = pattern_v.split(\"^\")\n    pattern_h = pattern_h.split(\"<\")\n    dict = {}\n    for i in range(len(pattern_h)):\n        if (pattern_h[i] not in dict):\n            dict[pattern_h[i]] = []\n            dict[pattern_h[i]].append(i)\n        else:\n            dict[pattern_h[i]].append(i)\n\n    for i in range(len(pattern_v)):\n        if (pattern_v[i] not in dict):\n            dict[pattern_v[i]] = []\n            dict[pattern_v[i]].append(i)\n        else:\n            dict[pattern_v[i]].append(i)\n    print(dict)\n\n    if(m*n==1):\n        if (pattern_v[0]==\"^\"):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n):\n            for j in range(m):\n                if (pattern_h[i] == \">\"):\n                    if (pattern_v[j] == \"^\"):\n                        if (i+1 in dict[pattern_h[i]] and i-1 in dict[pattern_h[i]]):\n                            return \"YES\"\n                    else:\n                        if (j-1 in dict[pattern_h[i]] and j+1 in dict[pattern_h[i]]):\n                            return \"YES\"\n                else:\n                    if (pattern_v[j] == \"v\"):\n                        if (i+1 in dict[pattern_h[i]] and i-1 in dict[pattern_h[i]]):\n                            return \"YES\"\n                    else:\n                        if (j-1 in dict[pattern_h[i]] and j+1 in dict[pattern_h[i]]):\n                            return \"YES\"\n\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin)\n    east = '>'\n    west = '<'\n    north = '^'\n    south = 'v'\n    \n    for i in range(1, n):\n        if grid[i][0]!= north:\n            grid[i] = east + grid[i]\n        else:\n            grid[i] = north + grid[i]\n        if grid[i][n - 1]!= west:\n            grid[i] = grid[i] + west\n        else:\n            grid[i] = grid[i] + east\n    \n    for j in range(1, m):\n        if grid[0][j]!= south:\n            grid[0] = north + grid[0]\n        else:\n            grid[0] = south + grid[0]\n        if grid[n - 1][j]!= east:\n            grid[n - 1] = grid[n - 1] + north\n        else:\n            grid[n - 1] = grid[n - 1] + south\n        \n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= south:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + east\n            if grid[i][j]!= west:\n                grid[i] = grid[i] + west\n            else:\n                grid[i] = grid[i] + south\n        \n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j]!= south:\n                grid[i] = north + grid[i]\n            else:\n                grid[i] = south + grid[i]\n            if grid[i][j]!= north:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + north\n        \n    for i in range(1, n - 1):\n        for j in range(1, m):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= south:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + east\n    \n    for i in range(1, n):\n        for j in range(1, m - 1):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= south:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + east\n    \n    for i in range(1, n - 1):\n        for j in range(1, m):\n            if grid[i][j]!= south:\n                grid[i] = north + grid[i]\n            else:\n                grid[i] = south + grid[i]\n            if grid[i][j]!= east:\n                grid[i] = grid[i] + north\n            else:\n                grid[i] = grid[i] + south\n    \n    for i in range(1, n - 1):\n        for j in range(1, m):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= east:\n                grid[i] = grid[i] + north\n            else:\n                grid[i] = grid[i] + east\n    \n    for i in range(1, n - 1):\n        for j in range(1, m):\n            if grid[i][j]!= south:\n                grid[i] = north + grid[i]\n            else:\n                grid[i] = south + grid[i]\n            if grid[i][j]!= north:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + north\n            \n    for i in range(1, n - 1):\n        for j in range(1, m):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= south:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + east\n    \n    for i in range(1, n):\n        for j in range(1, m - 1):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= east:\n                grid[i] = grid[i] + north\n            else:\n                grid[i] = grid[i] + east\n    \n    for i in range(1, n - 1):\n        for j in range(1, m):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= south:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + east\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            if grid[i][j]!= north:\n                grid[i] = east + grid[i]\n            else:\n                grid[i] = north + grid[i]\n            if grid[i][j]!= south:\n                grid[i] = grid[i] + south\n            else:\n                grid[i] = grid[i] + east\n    \n    if len(grid) > 1:\n        if grid[0][0]!= grid[1][0] or grid[0][n - 1]!= grid[1][n - 1]:\n            return \"NO\"\n        if grid[0][0]!= grid[n - 1][0] or grid[0][n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    street_directions = []\n    for _ in range(n):\n        street_directions.append(stdin.split()[_])\n    # print(street_directions)\n    street_directions = sorted(street_directions)\n    if len(set(street_directions)) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    street_direc = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n    print(street_direc)\n    ans = \"YES\"\n    for i in range(n-1):\n        for j in range(m-1):\n            if street_direc[i][j] == '<' and street_direc[i][j+1] == '>':\n                ans = \"YES\"\n            elif street_direc[i][j] == '^' and street_direc[i+1][j] == 'v':\n                ans = \"YES\"\n            elif street_direc[i][j] == '>' and street_direc[i+1][j] == '<':\n                ans = \"YES\"\n            elif street_direc[i][j] == '^' and street_direc[i][j+1] == 'v':\n                ans = \"YES\"\n    if ans == \"YES\":\n        print(ans)\n    else:\n        print(ans)\n\nsolution(input())\n\n\n\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\nn, m = list(map(int, input().split()))\n\narr = list(input())\n\ndir = list(input())\n\n\narr = [(a, b) for a, b in zip(arr, dir)]\narr.sort()\n\nm_dir = {}\n\nfor a, b in arr:\n    if m_dir.get(a) is None:\n        m_dir[a] = b\n    else:\n        if m_dir[a]!= b:\n            return 'NO'\n\nreturn 'YES'\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(\"\\n\")\n    count = 0\n    while count!= n:\n        count += 1\n        a = stdin.split(\"\\n\")\n        if count == 1:\n            a = stdin.split(\"\\n\")\n            if int(a[0]) == 0:\n                return \"NO\"\n            else:\n                return \"YES\"\n        a = stdin.split(\"\\n\")\n        if int(a[count - 2]) == int(a[count - 1]):\n            return \"NO\"\n        if int(a[count - 1]) == 0:\n            a.remove(a[count - 1])\n            a.remove(a[count - 2])\n            a[count - 2] = a[count - 2] + a[count - 1]\n            a.remove(a[count - 2])\n            a[count - 2] = a[count - 2] + a[count - 1]\n            a.remove(a[count - 1])\n            a[count - 2] = a[count - 2] + a[count - 1]\n        if int(a[count - 2]) == 1:\n            a.remove(a[count - 2])\n            a.remove(a[count - 1])\n            a[count - 2] = a[count - 2] + a[count - 1]\n        stdin = \"\\n\".join(a)\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    print(\"YES\") if is_valid(arr) else print(\"NO\")\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = stdin.split()\n    for i in range(n):\n        nums[i] = int(nums[i])\n    #print(nums)\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if (nums[i] and nums[j] and nums[k] == 0):\n                    print(1)\n                    return \"YES\"\n    print(0)\n    return \"NO\""
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if a[0] == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\" + str(a[0])\n    res = str(a[0])\n    for i in range(1, n):\n        if a[i] == 0:\n            res += \"0\"\n        elif a[i] == 1:\n            res += \"1\"\n    return \"YES\" + res\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    expressions = list(map(str, stdin.strip().split()))\n\n    for expression in expressions:\n        if not expression.strip() or len(expression) % 2!= 0:\n            return \"NO\"\n\n        splitted_expression = expression.split('->')\n        if len(splitted_expression)!= 2:\n            return \"NO\"\n        left_bracket_count = 0\n        right_bracket_count = 0\n\n        for char in splitted_expression[0]:\n            if char == '(':\n                left_bracket_count += 1\n            elif char == ')':\n                right_bracket_count += 1\n\n        if left_bracket_count!= right_bracket_count or right_bracket_count!= len(splitted_expression[1]):\n            return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    exp = stdin.split()[1]\n    count = 0\n    for i in exp:\n        if i == '1':\n            count += 1\n    if n!= count:\n        return \"NO\"\n    bracket_count = 0\n    i = 0\n    while i < len(exp):\n        if exp[i] == '>':\n            i += 1\n            while exp[i]!= ')':\n                if exp[i] == '(':\n                    bracket_count += 1\n                    i += 1\n                i += 1\n            i += 1\n        i += 1\n    if bracket_count!= n:\n        return \"NO\"\n    bracket_count = 0\n    i = 0\n    while i < len(exp):\n        if exp[i] == '0':\n            i += 1\n            while exp[i]!= '1':\n                if exp[i] == '(':\n                    bracket_count += 1\n                    i += 1\n                i += 1\n            i += 1\n        i += 1\n    if bracket_count!= n:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    args = stdin.split()[1:]\n    zero = True\n    zero_idx = 0\n    implication = True\n    for i in range(n):\n        if args[i] == '0':\n            zero = True\n        else:\n            zero = False\n            implication = False\n            break\n    if zero and implication:\n        return \"YES\"\n    if zero:\n        zero_idx = n\n    else:\n        zero_idx = args.index('0')\n    brackets = []\n    while args[zero_idx]!= '(':\n        brackets.append(args[zero_idx])\n        zero_idx += 1\n    brackets.reverse()\n    ans = []\n    i = 0\n    while i < len(brackets):\n        if brackets[i] == '-':\n            ans.append('-')\n            i += 1\n        else:\n            ans.append(brackets[i])\n            i += 2\n    i = 0\n    while i < len(ans):\n        if ans[i] == '0':\n            ans[i] = '-'\n        elif ans[i] == '1':\n            ans[i] = '>'\n        i += 1\n    ans.reverse()\n    ans = ''.join(ans)\n    if zero_idx < len(args):\n        ans += '->' + args[zero_idx]\n    return \"YES\" + '(' + ans + ')'\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(stdin.split(\" \"))\n    if len(lst)!= n:\n        return \"NO\"\n    dct = {'0': '-', '1': '>'}\n    res = \"\"\n    for i in range(n):\n        if len(lst[i]) == 1:\n            res += \"0\"\n            continue\n        if lst[i][0] == '1':\n            if lst[i][1] == '1':\n                res += \"0\"\n            elif lst[i][1] == '0':\n                res += \"1\"\n            else:\n                return \"NO\"\n        else:\n            if lst[i][1] == '1':\n                res += \"1\"\n            elif lst[i][1] == '0':\n                res += \"0\"\n            else:\n                return \"NO\"\n        res += dct[lst[i][2]]\n    if res.count('-')!= n or res.count('>')!= n or res.count('(')!= n:\n        return \"NO\"\n    else:\n        return res\nprint(solution(input()))\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = set()\n    for i in range(n):\n        for j in range(i):\n            if stdin[i] == '0' and stdin[j] == '1':\n                res.add((stdin[i], stdin[j]))\n            if stdin[i] == '1' and stdin[j] == '0':\n                res.add((stdin[i], stdin[j]))\n    for i in range(n):\n        if stdin[i] == '1':\n            res.add((stdin[i], '!'))\n    res = list(res)\n    res.sort()\n    return str(res)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n,m = list(map(int, stdin.split()))\n  a = 0\n  b = 0\n  while a < 2*b or a >= 2*m or b < 2*a or b >= 2*m:\n    if a == 0 or b == 0:\n      return str(a)+\" \"+str(b)\n    elif a >= 2*b:\n      a -= 2*b\n    elif a < 2*m and b < 2*a:\n      b += 2*a\n    else:\n      a -= 2*m\n      b += 2*a\n    print(a, b)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    while True:\n        if a == 0 or b == 0:\n            break\n        if a > 2 * b:\n            a = a - 2 * b\n        elif b > 2 * a:\n            b = b - 2 * a\n        else:\n            break\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    while n!= 0 and m!= 0:\n        if n > 2 * m:\n            n = n - 2 * m\n        elif m > 2 * n:\n            m = m - 2 * n\n        else:\n            break\n    return f\"{n} {m}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = n, m\n    while True:\n        if a >= 2*b:\n            a = a - 2*b\n        elif b >= 2*a:\n            b = b - 2*a\n        else:\n            break\n    return str(a)+' '+str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    while a and b:\n        a,b = max(a,b*2), min(a,b*2)\n    return str(a)+\" \"+str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m == 0:\n        print(0, 0)\n    elif n == m == 1:\n        print(0, 0)\n    elif n == m == 2:\n        print(0, 1)\n    elif n == 1 and m == 2:\n        print(0, 0)\n    elif n > m:\n        print(0, m)\n        while True:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n -= 1\n                m *= 2\n            if n == m == 0:\n                print(n, m)\n                return\n    elif n == 1 and m > 2:\n        print(0, m)\n        while True:\n            if m % 2 == 0:\n                m //= 2\n            else:\n                m -= 1\n                n *= 2\n            if n == m == 0:\n                print(n, m)\n                return\n    else:\n        print(n, m)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n\n    while a and b:\n        if a == 0 or b == 0:\n            break\n\n        if a > 2 * b:\n            a = a - 2 * b\n        elif b > 2 * a:\n            b = b - 2 * a\n        else:\n            break\n\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = 0\n    b = 0\n    while a < 2*b or b < 2*a:\n        if a < n or b < m:\n            a, b = b, a-2*b if a >= 2*b else b-2*a\n        else:\n            a, b = a-2*b, b-2*a\n    return str(a) + \" \" + str(b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a > 2*b:\n            a -= 2*b\n        elif a <= 2*b:\n            b -= 2*a\n        elif a == 0 and b == 0:\n            break\n    return \"{} {}\".format(a, b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = (int(x) for x in stdin.split())\n    while (a and b):\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n        a, b = (int(x) for x in stdin.split())\n    return \"{} {}\".format(a, b)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.strip().split(' ')))\n    # Your code here\n    return\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    k, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    return str(int(a <= x <= b and x % k == 0))\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    k = int(stdin.strip())\n    count = 0\n    for i in range(a, b + 1):\n        if i % k == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(sum(i for i in range(a, b + 1) if i % k == 0))\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(k_divisors(k, a, b))\n\n\ndef"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % k == 0:\n            count += 1\n    print(count)\n\nsolution(input())\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    x = list(range(a, b + 1))\n    n = 0\n    for i in range(a, b + 1):\n        if i % k == 0:\n            n += 1\n    return str(n)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    return''.join(map(str, range(a, b + 1, k)))\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, div, range = map(int, stdin.split())\n    if range > div:\n        print(div, (range - div) // div)\n    else:\n        print(div, 1)\n\nsolution()\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(divisibility(stdin)))\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(10):\n        if i == num % 10:\n            return str(i)\nstdin = sys.stdin.read()\nsolution(stdin)\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_digits = 10 ** len(str(int(1e9) - 1))\n    for i in range(number_of_digits):\n        print(int(str(i)[-1]))"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdin\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for i in range(k, 10000000000, 10):\n        print(i % 10)\n    return\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    digit = 1\n    while True:\n        print(digit)\n        digit += 1"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    result = int(lines[0])\n    k = int(lines[1])\n\n    if k >= len(str(result)):\n        raise Exception(\"Invalid input. Need to be greater than \" + str(len(str(result))))\n\n    return str(result)[k-1]\n\n\nsolution(input())\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    x = '123456789'\n    if k < 1 or k > 10000:\n        return 'Invalid input.'\n    if k == 1:\n        return x[k]\n    pos = k - 1\n    return x[pos]\n\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\" \")\n    k = int(stdin_list[0]) - 1\n    return str(int(stdin_list[1]) // (10 ** k))\n\nsolution('1 2 3 4 5 6 7') #returns '7'\nsolution('1 2 3 4 5 6 7 8') #returns '8'\nsolution('1 2 3 4 5 6 7 8 9') #returns '9'\nsolution('1 2 3 4 5 6 7 8 9 10') #returns '10'\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    count = 0\n    n = 0\n    k = int(stdin)\n    while count <= k:\n        n = n * 10 + int(stdin)\n        count += 1\n    return str(n)[-1]"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    res = ''\n    while k:\n        res = str(k % 10) + res\n        k //= 10\n    return res"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if first_vs_second(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str1 = stdin.split('\\n')[1]\n\n    def is_number(number):\n        return True if str1.count(number) == n // 2 else False\n\n    return 'YES' if is_number('8') else 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()[0]\n    s = stdin.splitlines()[1]\n    l = int(a)\n    k = list(s)\n    win = False\n    if len(k)%2 == 0:\n        if l%2 == 0:\n            for i in range(0,len(k)):\n                if (k[i]==\"8\") and (k[i-1]!=\"8\"):\n                    win = True\n                if (k[i]==\"8\") and (k[i+1]!=\"8\"):\n                    win = True\n    else:\n        if l%2!= 0:\n            for i in range(0,len(k)):\n                if (k[i]==\"8\") and (k[i-1]!=\"8\"):\n                    win = True\n                if (k[i]==\"8\") and (k[i+1]!=\"8\"):\n                    win = True\n    if win == True:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(input())"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = len(s)\n    if k % 2!= 0:\n        return 'NO'\n    while k % 2 == 0:\n        k = k // 2\n    p = k + 1\n    while k!= p:\n        for i in range(0, k):\n            if s[i] == s[p - i]:\n                return 'NO'\n        p = p + k\n        k = k // 2\n    return 'YES'\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin[0] == stdin[-1] and stdin.count(stdin[0]) == len(stdin) // 2 else \"NO\"\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    string = stdin\n\n    if length % 2!= 0:\n        print('NO')\n        return\n    else:\n        mid_index = length // 2\n        mid = string[mid_index]\n\n    if mid == '1':\n        string = string.replace('1', '8', 1)\n    elif mid == '8':\n        string = string.replace('8', '1', 1)\n    else:\n        print('NO')\n        return\n\n    for i in range(1, len(string) - 1):\n        if string[i] == '1':\n            string = string[:i] + '8' + string[i + 1:]\n        elif string[i] == '8':\n            string = string[:i] + '1' + string[i + 1:]\n\n    if length == 11:\n        if '8' in string:\n            print('NO')\n            return\n        else:\n            print('YES')\n            return\n\n    print('YES')\n    return\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    if n % 2!= 0:\n        return 'NO'\n    for i in range(n):\n        if len(s) == 11 and s[i] == '8':\n            return 'YES'\n        elif len(s) == 11:\n            break\n        s = s[1:] + s[0]\n    return 'NO'"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n % 2 == 1:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    for _ in range(n // 2):\n        s = s[1:-1]\n        if s.count(\"8\") > 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(stdin)\n    if len(s) == n and n % 2 == 0:\n        if sum(int(c) for c in s) % 11 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.splitlines()\n    s = inp[1]\n    if len(s) == 11 and s[0] == '8' and s[-1] == '8':\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, p = map(int, stdin.split())\n    return str(int(10 ** 9 + 7) * (x + 1 - 1) // (n + 1) + 1)\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, p = map(int, stdin.split())\n    m = 1\n    for i in range(n):\n        m = (m*n)//i\n    perms = []\n    for i in range(m):\n        perms.append(i+1)\n    \n    count = 0\n    for i in range(len(perms)):\n        if perms[i] == x:\n            count += 1\n            print(perms[i])\n    \n    print(count)"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = list(map(int, stdin.split()))\n    # k1: # permutations of size n with number x\n    # k2: # permutations of size n with number x at position pos\n    return str(((n**k1) * (k2**k1)) % (10**9+7))"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a, x, pos = stdin\n    left = 0\n    right = a.size()\n    while left < right:\n        middle = (left + right) // 2\n        if a[middle] <= x:\n            left = middle + 1\n        else:\n            right = middle\n    left = left - 1\n    return str(binary_search(a, x, left, right, pos))\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = list(map(int, stdin.split()))\n    a = list(range(n))\n    count = 0\n    for i in range(n):\n        if BinarySearch(a, x - i):\n            count += 1\n    print(count % (10 ** 9 + 7))\n    return\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    res = 0\n    l = 0\n    r = n\n    while l <= r:\n        m = (l+r)//2\n        if BinarySearch(n, m) and (x == m or x == (m+1)):\n            res += 1\n            if x == m:\n                break\n            else:\n                l = m+1\n        else:\n            r = m-1\n    return f\"{res % (10**9 + 7)}\"\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, x, pos = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    count = 0\n    for i in range(n + 1):\n        for j in range(n + 1 - i):\n            if i == 0 or j == 0:\n                continue\n            k = n - i + j\n            if (i + j) % 2:\n                if x < k * (n - i + j):\n                    continue\n            else:\n                if x <= k * (n - i + j):\n                    continue\n            if BinarySearch(list(range(n)), k):\n                count += 1\n    return '%d' % (count % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    perm = list(itertools.permutations(stdin, len(stdin)))\n    perm_len = len(perm)\n    perm_count = perm_len\n    for i in range(len(perm)):\n        if int(perm[i]) == int(stdin[0]):\n            perm_count = perm_count - 1\n    return str(perm_count)\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    x = int(stdin[1])\n    pos = int(stdin[2])\n    count = 0\n    l = 0\n    h = n\n    while l < h:\n        m = (l + h) // 2\n        if BinarySearch(n, m) and BinarySearch(n, x):\n            count += 1\n            if pos < m:\n                l = m + 1\n            else:\n                h = m\n        else:\n            l = m + 1\n    return count\n\n\"\"\"\nfrom math import log\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split()))\n    a = num_list[0]\n    x = num_list[1]\n    pos = num_list[2]\n    return str(binary_search_recursive(a, x, pos) % 10**9 + 7)\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h = stdin[0]\n    k = int(stdin[1])\n    s = \"\"\n    for i in range(0,k):\n        if i%2==0:\n            s += h\n        else:\n            if h == \"?\":\n                if h in s:\n                    h = \"*\"\n                else:\n                    h = \"?\"\n            elif h == \"*\":\n                if h in s:\n                    h = \"?\"\n                else:\n                    h = \"*\"\n            else:\n                h = h\n    return s\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string, k = stdin, int(stdin.split()[-1])\n    def is_valid(string):\n        for i in range(1, len(string)):\n            if len(string) - i < k:\n                return False\n            if string[i] == string[i - 1]:\n                if i == len(string) - 1:\n                    return True\n                for _ in range(i, len(string) - 1):\n                    if string[i - 1] == string[i + 1]:\n                        return False\n        return True\n\n    while True:\n        if is_valid(string):\n            break\n        string = ''.join(sorted(list(string), reverse=True))\n    print(string)\n\nsolution(input())\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if len(string) < 2 or string[0] == '*' or string[-1] == '*':\n        return 'Impossible'\n    new_string = '*'\n    for s in string:\n        if s == '?':\n            new_string += '?' * 2\n        elif s == '*':\n            new_string += 'a'\n    return new_string\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    n = int(stdin[0])\n    k = int(stdin[1])\n    # print(n, k)\n    letters = stdin[2:n+2]\n    # print(letters)\n    # letters = \"hayewyar\"\n    ans = \"Impossible\"\n    s = \"\"\n    for i in range(len(letters)):\n        if letters[i]!= \"*\":\n            s = s + letters[i]\n            if len(s) == k:\n                print(s)\n                ans = s\n                break\n        else:\n            for j in range(i, len(letters)):\n                if letters[j]!= \"*\":\n                    s = s + letters[j]\n                    if len(s) == k:\n                        print(s)\n                        ans = s\n                        break\n                else:\n                    for j in range(i, len(letters)):\n                        if letters[j]!= \"*\":\n                            s = s + letters[j]\n                            if len(s) == k:\n                                print(s)\n                                ans = s\n                                break\n                        else:\n                            for j in range(i, len(letters)):\n                                if letters[j]!= \"*\":\n                                    s = s + letters[j]\n                                    if len(s) == k:\n                                        print(s)\n                                        ans = s\n                                        break\n                                else:\n                                    for j in range(i, len(letters)):\n                                        if letters[j]!= \"*\":\n                                            s = s + letters[j]\n                                            if len(s) == k:\n                                                print(s)\n                                                ans = s\n                                                break\n                                        else:\n                                            for j in range(i, len(letters)):\n                                                if letters[j]!= \"*\":\n                                                    s = s + letters[j]\n                                                    if len(s) == k:\n                                                        print(s)\n                                                        ans = s\n                                                        break\n                                                else:\n                                                    for j in range(i, len(letters)):\n                                                        if letters[j]!= \"*\":\n                                                            s = s + letters[j]\n                                                            if len(s) == k:\n                                                                print(s)\n                                                                ans = s\n                                                                break\n                                                    else:\n                                                        for j in range(i, len(letters)):\n                                                            if letters[j]!= \"*\":\n                                                                s = s + letters[j]\n                                                                if len(s) == k:\n                                                                    print(s)\n                                                                    ans = s\n                                                                    break\n                                                        else:\n                                                            for j in range(i, len(letters)):\n                                                                if letters[j]!= \"*\":\n                                                                    s = s + letters[j]\n                                                                    if len(s) == k:\n                                                                        print(s)\n                                                                        ans = s\n                                                                        break\n    return ans\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return 'Impossible'\n    for i in range(1, n + 1):\n        if len(s) % i!= 0:\n            continue\n        st = ''\n        for j in range(0, len(s), i):\n            st += s[j:j + i]\n        if len(st) == len(s):\n            return st\n    return 'Impossible'"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    k = int(input())\n    if len(string) < k:\n        return \"Impossible\"\n    letters = set(string)\n    for i in range(len(string)):\n        letters.remove(string[i])\n        letters = letters | set(string[:i] + string[i + 1:])\n        if len(letters) == k:\n            return string[i] + string[:i] + string[i + 1:]\n    return \"Impossible\"\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if len(s) <= 200:\n        if len(s) == 1:\n            return s[0]\n        l = len(s)\n        k = len(s[0])\n        s = s[1:]\n        c = 1\n        for i in range(len(s)):\n            if c > k:\n                return 'Impossible'\n            if s[i] == s[0]:\n                c += 1\n            else:\n                c = 1\n        if c == k:\n            return s\n    return 'Impossible'"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)-1):\n        if (s[i] in '?*' and s[i+1] in '*?'):\n            s = s.replace(s[i], s[i])\n    return s\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    steps = 1\n    while abs(angle) > 5:\n        steps += 1\n        angle = abs(angle) - 90\n        angle = (angle + 5) % 360\n        print(angle)\n    return str(steps)"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    for _ in range(3):\n        angle += 90\n        if angle % 360 == 0:\n            return str(angle)\n    return str(angle)\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split('\\n')))\n    stdin = sorted(stdin, reverse=True)\n    gcd = stdin[0]\n    for i in range(1, len(stdin)):\n        gcd = math.gcd(gcd, stdin[i])\n    return str(gcd)"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(min((abs(a) - 1) // 90 + 1 for a in map(int, stdin.split())))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = list(map(int, stdin.split()))\n\n    min_turns = min(stdin)\n    for num in stdin:\n        if num % min_turns == 0:\n            return str(num // min_turns)"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a = int(lines[0])\n    turns = 0\n    while a!= 0:\n        if a % 90 == 0:\n            turns += 1\n        a += 1\n    return turns"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(find_min_turns(int(stdin)))\n\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = ''.join(stdin)\n    stdin = int(stdin)\n    \n    result = 1\n    \n    if stdin < 0:\n        result = 3\n    elif stdin == 0:\n        result = 1\n    elif stdin > 0:\n        result = 2\n    \n    return str(result)\n    '''\n    return ''.join(str(solution(int(stdin))))\n\nprint(solution(input()))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rotation_angle = int(stdin)\n    turns_count = 0\n    if rotation_angle >= 0:\n        while rotation_angle > 0:\n            turns_count += 1\n            rotation_angle -= 90\n        print(turns_count)\n    else:\n        while rotation_angle < 0:\n            turns_count += 1\n            rotation_angle += 90\n        print(turns_count)"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = stdin.split()\n  a = int(a)\n  b = int(b)\n  c = int(c)\n  x, y, z = stdin.split()\n  x = int(x)\n  y = int(y)\n  z = int(z)\n  if (x + y + z) == (a + b + c):\n    if ((a + b) == (x + y + z)) and (b + c) == (x + y + z):\n      if a + c == (x + y + z):\n        return \"Yes\"\n  return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    x, y, z = stdin.split()\n    x, y, z = int(x), int(y), int(z)\n    if (a == x) and (b == y) and (c == z):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a magic sphere and the number of spheres that he needs to get,\n    returns \"Yes\" if the wizard can obtain all spheres, otherwise \"No\".\n    '''\n    import re\n    stdin = stdin.split()\n    blue = int(stdin[0])\n    violet = int(stdin[1])\n    orange = int(stdin[2])\n    if blue + violet + orange >= 6:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for x in range(a + 1):\n        for y in range(b + 1):\n            for z in range(c + 1):\n                if x + y + z == a + b + c:\n                    if x == y and y == z and x == a:\n                        return \"Yes\"\n                    elif x!= y and x!= z and y!= z:\n                        return \"Yes\"\n                    elif x == y and y == z and x!= a:\n                        return \"Yes\"\n                    elif x!= y and x!= z and y!= z and x + y + z == a + b + c:\n                        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if x == a:\n        if y == b:\n            if z == c:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    elif y == b:\n        if z == c:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a * 2 + b * 2 + c * 2 == a * 2 * 2 + b * 2 * 2 + c * 2 * 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if (a + b + c) >= x + y + z:\n        if (b + x) <= (y + z):\n            if (a + x) <= (z + y):\n                return \"Yes\"\n        if (c + x) <= (z + y):\n            if (a + x) <= (z + y):\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if x >= a and y >= b and z >= c:\n        if x == 1 and y == 1 and z == 1:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 2:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 3:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 3:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 4:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 4:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 5:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 5:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 6:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 6:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 7:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 7:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 8:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 8:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 9:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 9:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 10:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 10:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 11:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 11:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 12:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 12:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 13:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 13:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 14:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 14:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 15:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 15:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 16:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 16:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 17:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 17:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 18:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 18:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 19:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 19:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 20:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 20:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 21:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 21:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 22:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 22:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 23:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 23:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 24:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 24:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 25:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 25:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 26:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 26:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 27:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 27:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 28:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 28:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 29:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 29:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 30:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 30:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 31:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 31:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 32:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 32:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 33:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 33:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 34:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 34:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 35:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 35:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 36:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 36:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 37:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 37:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 38:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 38:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 39:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 39:\n            return \"Yes\"\n        if x == 2 and y == 1 and z == 40:\n            return \"Yes\"\n        if x == 2 and y == 2 and z == 40:\n            return \"Yes\"\n        if x == 2 and y == 1"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    res = []\n    if(z > 0):\n        res.append('Yes')\n    else:\n        if(z <= 0):\n            if(z <= c):\n                res.append('Yes')\n            else:\n                res.append('No')\n    if(y > 0):\n        res.append('Yes')\n    else:\n        if(y <= 0):\n            if(y <= b):\n                res.append('Yes')\n            else:\n                res.append('No')\n    if(x > 0):\n        res.append('Yes')\n    else:\n        if(x <= 0):\n            if(x <= a):\n                res.append('Yes')\n            else:\n                res.append('No')\n    return ', '.join(res)\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4 0\n   ... 2 1 2\n   ... ''')\n    'Yes'\n    >>> solution('''5 6 1\n   ... 2 7 2\n   ... ''')\n    'No'\n    >>> solution('''3 3 3\n   ... 2 2 2\n   ... ''')\n    'Yes'\n    \"\"\"\n    # get input data\n    n_blue, n_violet, n_orange = (int(i) for i in stdin.split())\n    # compute number of required spheres\n    n_required_spheres = n_blue + n_violet + n_orange\n    # compute number of actual spheres\n    n_actual_spheres = 0\n    while n_actual_spheres!= n_required_spheres:\n        n_actual_spheres = n_actual_spheres + n_blue + n_violet + n_orange\n        if n_actual_spheres > n_required_spheres:\n            break\n        n_actual_spheres = n_actual_spheres - n_blue - n_violet - n_orange\n        n_blue = n_blue + 1\n        n_violet = n_violet + 1\n        n_orange = n_orange + 1\n    # print answer\n    if n_actual_spheres == n_required_spheres:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    return str(int((\"1\" * n) % m) % k)\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    # n = number of digits in decimal representation, k = divisor\n    # m = modulo number\n    \n    x, y = 1, 0\n    while (x) % k!= 0:\n        x += 1\n        y = (y * 10 + x) % m\n    # y is the remainder\n    \n    # get all the integers from 1 to n that are divisible by k\n    # keep track of the multiplicity of each number in the list\n    # y = 1 means that we are at the first divisible by k number\n    # when y > 0, means that we have seen the first divisible number\n    # we have a result\n    # print(y)\n    \n    return y\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    x = int(n**0.5)\n    while True:\n        if (x**2 - n) % k == 0:\n            break\n        else:\n            x += 1\n    y = int(m ** 0.5)\n    while True:\n        if (y**2 - m) % k == 0:\n            break\n        else:\n            y += 1\n    x = str(x)\n    y = str(y)\n    while len(x) < n:\n        x = '0' + x\n    while len(y) < n:\n        y = '0' + y\n    x = x[::-1]\n    y = y[::-1]\n    res = int(x[0])\n    for i in range(len(x)-1):\n        res = (res * 10 + int(x[i+1])) % m\n    res = (res * 10 + int(y[0])) % m\n    return res"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n\n    if n % 10 == 0 and k % 10 == 0:\n        print((n * k) % m)\n    elif n % 10!= 0 or k % 10!= 0:\n        print((n % k) % m)\n    else:\n        print((n * k) % m)\n    return \"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 1000')\n    '4'\n    >>> solution('2 2 1000')\n    '45'\n    >>> solution('5 3 1103')\n    '590'\n    >>> solution('5 3 1005')\n    '598'\n    \"\"\"\n    n, k, m = map(int, stdin.split())\n    q, r, r1 = 0, 1, 0\n\n    for i in range(1, k+1):\n        q = (q * 10 + r) % m\n        r1 = (r1 * 10 + r) % m\n    print(q)\n    return\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, m] = [int(x) for x in stdin.split()]\n    # 0 <= n <= 1000, 1 <= k <= 100, 1 <= m <= 10^9\n    def decimal(x):\n        return str(x)\n    x = str(x)\n    while len(x) < n:\n        x = decimal(int(x)+k)\n    return str(x)\n    # solution(input())\n    # return 1\n    # return 2\n    # return 3\n    # return 4\n    # return 5\n    # return 6\n    # return 7\n    # return 8\n    # return 9\n    # return 10\n    # return 11\n    # return 12\n    # return 13\n    # return 14\n    # return 15\n    # return 16\n    # return 17\n    # return 18\n    # return 19\n    # return 20\n    # return 21\n    # return 22\n    # return 23\n    # return 24\n    # return 25\n    # return 26\n    # return 27\n    # return 28\n    # return 29\n    # return 30\n    # return 31\n    # return 32\n    # return 33\n    # return 34\n    # return 35\n    # return 36\n    # return 37\n    # return 38\n    # return 39\n    # return 40\n    # return 41\n    # return 42\n    # return 43\n    # return 44\n    # return 45\n\nstdin = \"1 2 1000\"\nprint(solution(stdin))\n\nstdin = \"2 2 1000\"\nprint(solution(stdin))\n\nstdin = \"5 3 1103\"\nprint(solution(stdin))"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     '1 2 1000\\n'\n   ... )\n    '4'\n    >>> solution(\n   ...     '2 2 1000\\n'\n   ... )\n    '45'\n    >>> solution(\n   ...     '5 3 1103\\n'\n   ... )\n    '590'\n    \"\"\"\n    n, k, m = map(int, stdin.split())\n    rem = 0\n    while n % k!= 0:\n        rem += 1\n        n += m\n    return str(n % m)\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k,m = map(int, stdin.split())\n    s = str(n)+'.'+str(k)+'.'+str(m)\n    l = len(s)\n    \n    # why is there a next function???\n    s = s[1:l-1]\n    print(s)\n    return s\n\nsolution(\"2 2 1000\")\n\n\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return str(sum(int(s) for s in str(n)) % m)\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    x = n\n    y = x\n    while x > 0:\n        x //= k\n        y %= m\n    return str(y)\n\"\"\"\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_valid(l, r, a):\n        return l == 0 or r == 0 or a == 0\n    \n    l, r, a = map(int, stdin.split())\n    \n    count_left = (l + r - a) // 2\n    count_right = (l + r + a) // 2\n    count_ambidexter = (2 * (l + r - a) + a) // 2\n    \n    return max(count_left, count_right, count_ambidexter)\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = (int(x) for x in stdin.split())\n    left = l // 2 if l % 2 == 0 else l // 2 + 1\n    right = r // 2 if r % 2 == 0 else r // 2 + 1\n    return str(max(left, right, a))\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = list(map(lambda x: x.split(\" \"), stdin.splitlines()))\n    l, r, a = stdin_data[0]\n    l = int(l)\n    r = int(r)\n    a = int(a)\n    even = 0\n    if l == r and a == 0:\n        return \"0\"\n    elif a == 0:\n        even = (l - r) // 2\n    else:\n        even = l\n    if even % 2 == 0:\n        return str(even)\n    else:\n        even = even + 1\n        return str(even)\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (l, r, a) = (int(i) for i in stdin.split())\n    if (l + r + a) % 2 == 0:\n        return l + r + a // 2\n    elif l == 0 and r == 0 and a == 0:\n        return 0\n    elif l == r:\n        return l + r + 1\n    else:\n        return l + r + 2\n\nassert solution(\"1 4 2\") == 6\nassert solution(\"5 5 5\") == 14\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(max(0, l + r - a, r + l - a))"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    max_size = (l + r + a) // 2\n    return str(max_size) if max_size == 0 else str(max_size // 2 + (max_size % 2!= 0))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if l + a + r + a <= l:\n        return str(l)\n    else:\n        return str(l + a + r)\nsolution('1 4 2')\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_array = stdin.split('\\n')\n\n    left_handers = int(input_array[0])\n    right_handers = int(input_array[1])\n    ambidexters = int(input_array[2])\n\n    if left_handers + right_handers == ambidexters:\n        return str(left_handers + right_handers // 2)\n    else:\n        return str(0)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(2 * max(l, r, a))\n\nprint(solution(input()))"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if (l + r + a) % 2 == 1:\n        return \"0\"\n    return str(int((l + r + a) / 2))\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = 1\n    while n > 1:\n        if (n - 1) % 2 == 0:\n            coins += n\n        n //= 2\n    return str(coins + k)\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    coins = [i+1 for i in range(n)]\n    from collections import deque\n    dq = deque(coins)\n    start = -1\n    min_coins = 0\n    count = 0\n    while dq:\n        if start == -1:\n            start = dq.popleft()\n        else:\n            dq.rotate(-1)\n        if dq:\n            min_coins += 1\n            dq.popleft()\n    return str(min_coins)\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = 1\n    for _ in range(n):\n        coins = (coins * 2) + 1\n    return str(coins - k)\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = 1\n    while c < n:\n        c *= 2\n    if c <= n and k <= n:\n        return str(c)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return (n * (n-1)) // 2\n    else:\n        return (n * (n-1) // 2) + ((n * k) // 2)"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = [' '] * n\n    s[k - 1] = '*'\n    c = [' '] * n\n    c[k] = '*'\n    cnt = 0\n    while True:\n        for i in range(k - 1, -1, -1):\n            if c[i] == '*':\n                c[i] = '#'\n            else:\n                c[i] = '*'\n            if i!= k - 1:\n                cnt += 1\n        for i in range(k + 1, n):\n            if c[i] == '*':\n                c[i] = '#'\n            else:\n                c[i] = '*'\n            if i!= k:\n                cnt += 1\n        if cnt == n * 2:\n            break\n        cnt = 0\n        s.reverse()\n        c.reverse()\n        cnt = 0\n        for i in range(n):\n            if s[i] == '*':\n                s[i] = '#'\n            else:\n                s[i] = '*'\n            if i!= k:\n                cnt += 1\n        for i in range(n):\n            if s[i] == '*':\n                s[i] = '#'\n            else:\n                s[i] = '*'\n        if cnt == n * 2:\n            break\n    return cnt\n\nsolution('2 2')\nsolution('4 2')\nsolution('5 1')"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    if k == 1:\n        return 6*n\n    else:\n        return (6*n)+(k-1)*n*2\n    \nsolution('2 2')\nsolution('4 2')\nsolution('5 1')\n\n\n---\n\n\n\n\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = []\n    for i in range(n):\n        coins.append(int(stdin.split()[i]))\n    coins.sort()\n\n    count = 0\n    while len(coins)!= 1:\n        for i in range(k, n-1):\n            if coins[i] == coins[i+1]:\n                continue\n            elif coins[i] > coins[i+1]:\n                coins[i] = coins[i] - coins[i+1]\n                coins[i+1] = coins[i+1] - coins[i]\n                break\n            elif coins[i] < coins[i+1]:\n                coins[i] = coins[i] - coins[i+1]\n                coins[i+1] = coins[i+1] - coins[i]\n                break\n        else:\n            break\n\n        count += 1\n        for i in range(k, n-1):\n            if coins[i] == coins[i+1]:\n                continue\n            elif coins[i] > coins[i+1]:\n                coins[i] = coins[i] - coins[i+1]\n                coins[i+1] = coins[i+1] - coins[i]\n                break\n            elif coins[i] < coins[i+1]:\n                coins[i] = coins[i] - coins[i+1]\n                coins[i+1] = coins[i+1] - coins[i]\n                break\n        else:\n            break\n    return count\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples\n    >>> solution('''2 2\n    >>> ''\n    >>> 4 2\n    >>> ''\n    >>> 5 1\n    >>> ''\n    >>> 5 1\n    >>> ''')\n    6\n    \"\"\"\n    n, k = map(int, stdin.split())\n    count = 0\n    while n:\n        if (n-1) % 2:\n            count += 1\n        n = (n-1) // 2\n    return count + k\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    h_t = max((n + 1) * 2, (m + 1) * 3)\n    print(h_t)\n    return\n\nsolution(\"1 3\")\nsolution(\"3 2\")\nsolution(\"5 0\")\nsolution(\"10\")\n\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"9\"\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n * 2 + m * 3, m * 2 + n * 3, n * 3 + m * 2))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max((n+m)//2, n, m))\n\nprint(solution(input()))\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    return max(max_tower(n, m), max_tower_2(n, m))\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 3\n   ... 0 1\n   ... 2\n   ... 1 2\n   ... 0\n   ... 1 2\n   ... 0\n   ... 1 2\n   ... 0\n   ... 1 2\n   ... 2\n   ... 1 2\n   ... 1\n   ... 1 2\n   ... 2\n   ... 1 2\n   ... 0\n   ... 1 2\n   ... 2\n   ... 1 2\n   ... 0\n   ... 1 2\n   ... 0\n   ... 1 2\n   ... 1''')\n    10\n    '''\n    n, m = map(int, stdin.split())\n    height = 0\n    while n + m > 0:\n        if n % 3 == 0 and m % 2 == 0:\n            height = max(height, n // 3 + m // 3)\n        elif n % 3 == 0:\n            height = max(height, n // 3)\n        elif m % 2 == 0:\n            height = max(height, m // 2)\n        else:\n            height = max(height, n)\n        n -= 1\n        m -= 1\n    return height\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def fair(a1, a2):\n        return a1!= a2\n    \n    def count(a):\n        if a == 1:\n            return 1\n        return 1 + count(a - 1)\n    \n    n = int(stdin.split()[0])\n    if not n % 2 == 0:\n        return 'NO'\n    \n    a1 = int(stdin.split()[1])\n    a2 = int(stdin.split()[2])\n    \n    if fair(a1, a2):\n        return 'NO'\n    if a1 > n // 2 or a2 > n // 2:\n        return 'NO'\n    \n    \n    return str(count(a1)) +'' + str(count(a2))\n    \n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2 == 0 and n > 5):\n        return 'NO'\n    if (n % 2 == 1):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    # print(stdin)\n    n = int(stdin[0])\n    n = 2 * n - 1\n\n    numbers = {}\n    for i in range(n):\n        number = stdin[i+1].split()\n        if number[0] in numbers:\n            numbers[number[0]] += 1\n        else:\n            numbers[number[0]] = 1\n\n    for key in numbers:\n        numbers[key] = numbers[key] // 2\n        if numbers[key] == 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = \"\"\n    if n%2!=0 or n < 2 or n >100:\n        return \"NO\"\n    a = list(map(int,stdin.split()))\n    n1 = 0\n    n2 = 0\n    for i in range(len(a)):\n        if a[i]%2==0:\n            n1+=1\n        else:\n            n2+=1\n    if n1!=n2:\n        return \"NO\"\n    while n1<n and n2<n:\n        res += f\"{a[n1]} {a[n2]}\"\n        n1+=1\n        n2+=1\n    return res\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if check_game(stdin) else 'YES'\n\n\ndef"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    nums = sorted(list(map(int, stdin.split())))\n    if n == 6:\n        return \"YES\" + str(nums[0]) + \" \" + str(nums[1])\n    if n == 5:\n        return \"YES\" + str(nums[0]) + \" \" + str(nums[1])\n    for i in range(1, n // 2):\n        if nums[i] == nums[n // 2]:\n            return \"NO\"\n    if nums[0] == nums[-1]:\n        return \"YES\" + str(nums[n // 2]) + \" \" + str(nums[0])\n    return \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    elif n == 2:\n        return \"YES\"\n    else:\n        s = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299}\n        cards_count = len(s)\n        for i in range(n):\n            s_i = set(stdin.split())\n            cards_count -= len(s_i)\n        if cards_count > 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'NO'\n    petya_ch = list(map(int, stdin.split()))\n    vasya_ch = list(map(int, stdin.split()))\n    petya_nums = set(petya_ch)\n    vasya_nums = set(vasya_ch)\n    if len(petya_nums)!= len(vasya_nums):\n        return 'NO'\n    for p, v in zip(petya_ch, vasya_ch):\n        if p == v:\n            return 'NO'\n    petya_nums = sorted(petya_nums)\n    vasya_nums = sorted(vasya_nums)\n    petya_sum = sum(petya_nums)\n    vasya_sum = sum(vasya_nums)\n    if petya_sum == vasya_sum:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    petya_chosen = []\n    vasya_chosen = []\n    petya_counter = 0\n    vasya_counter = 0\n    petya_check = True\n    while petya_check:\n        petya_chosen.append(int(stdin.split()[petya_counter]))\n        petya_counter += 1\n        if petya_counter == n:\n            petya_check = False\n    while vasya_check:\n        vasya_chosen.append(int(stdin.split()[vasya_counter]))\n        vasya_counter += 1\n        if vasya_counter == n:\n            vasya_check = False\n    for i in petya_chosen:\n        if i in vasya_chosen:\n            vasya_chosen.remove(i)\n            petya_chosen.remove(i)\n            if len(vasya_chosen)!= 1 and len(petya_chosen)!= 1:\n                return \"NO\"\n            else:\n                return \"YES\" + str(petya_chosen[0]) + \" \" + str(vasya_chosen[0])"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    l = list(map(int, stdin.split()))\n    if sum(l) % 2!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    soldiers = sorted(map(int, stdin.split()))\n    rows = [soldiers[i::k] for i in range(k)]\n    ans = set()\n    for i in range(1, len(rows[0]) + 1):\n        for j in range(1, len(rows)):\n            if rows[0][i - 1]!= rows[j][i - 1]:\n                ans.add(i)\n                break\n    if len(ans) == 0:\n        return 'NO'\n    for i in range(1, len(rows)):\n        for j in range(1, len(rows[i])):\n            if rows[i - 1][j]!= rows[i][j] and rows[i - 1][j - 1]!= rows[i][j]:\n                ans.add(j)\n                break\n    return 'YES' if len(ans) == 0 else f'YES\\n{len(ans)}'\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    For input\n    '''\n    stdin_rows, stdin_groups = stdin.split(\" \")\n    stdin_groups = stdin_groups.split(\" \")\n    stdin_rows = int(stdin_rows)\n    stdin_groups = int(stdin_groups)\n\n    '''\n    For testing\n    '''\n    # stdin_rows = 3\n    # stdin_groups = 3\n\n    '''\n    For solutions\n    '''\n    # d_rows = 3\n    # d_groups = 3\n\n    '''\n    Do not touch this part\n    '''\n    if (stdin_rows % 8!= 0) or (stdin_groups % 8!= 0):\n        return \"NO\"\n    else:\n        # print(stdin_rows, stdin_groups)\n        d_rows = stdin_rows // 8\n        d_groups = stdin_groups // 8\n        list_rows = list(range(d_rows))\n\n        dict_groups = {}\n        for i in range(d_groups):\n            dict_groups[i] = list(range(1, 9))\n\n        for i in range(d_groups):\n            for j in range(d_rows):\n                for k in range(len(dict_groups[i])):\n                    list_rows.remove(j)\n                    dict_groups[i].pop(k)\n                    k = k + 1\n                dict_groups[i].pop(0)\n                k = 0\n\n        # print(dict_groups)\n        # print(list_rows)\n        # print(list(set(list_rows)))\n        if list(set(list_rows)) == list(range(d_rows)):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a list of strings and returns a boolean\n    '''\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if not k or not a:\n        return 'NO'\n\n    if n * k < sum(a):\n        return 'NO'\n\n    numbers_of_groups = [0] * (k + 1)\n\n    for i in range(n):\n        numbers_of_groups[a[i]] += 1\n    return 'YES' if any(numbers_of_groups) else 'NO'"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    [n, k] = [int(x) for x in stdin.split()]\n    if n <= 0 or k <= 0:\n        return \"NO\"\n    nums = [int(x) for x in stdin.split()]\n    nums.sort()\n    res = []\n    for i in range(k):\n        if nums[i] > 0:\n            res.append(nums[i])\n    if len(res) == 0:\n        return \"NO\"\n    if len(res) == 1:\n        if res[0] == 8:\n            return \"YES\"\n        return \"NO\"\n    if res[0] == 1:\n        if res[1]!= 2:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 2:\n        if res[1]!= 8:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 3:\n        if res[1]!= 4:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 4:\n        if res[1]!= 8:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 5:\n        if res[1]!= 6:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 6:\n        if res[1]!= 8:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 7:\n        if res[1]!= 8:\n            return \"NO\"\n        return \"YES\"\n    if res[0] == 8:\n        if res[1]!= 1:\n            return \"NO\"\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n < k:\n        return \"NO\"\n\n    for i in range(n):\n        if n-i == k:\n            if n-i!= sum(a[:i+1]):\n                return \"NO\"\n            return \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    soldiers = list(map(int, stdin.split()))\n    soldiers.sort()\n    groups = [[] for _ in range(k)]\n    for i in range(k):\n        groups[i].append(soldiers[i])\n    \n    for i in range(k):\n        if soldiers[i]!= groups[i][0]:\n            return 'NO'\n    \n    for i in range(k - 1):\n        if soldiers[i] == groups[i][0] and soldiers[i]!= groups[i + 1][0]:\n            return 'NO'\n        if soldiers[i] == groups[i][-1] and soldiers[i]!= groups[i - 1][-1]:\n            return 'NO'\n    \n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = []\n    for i in range(n):\n        m.append([0] * 8)\n    for i in range(k):\n        for j in range(n):\n            m[j][a[i] - 1] += 1\n    for i in range(n):\n        for j in range(8):\n            if m[i][j]!= n:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    groups = list(map(int, stdin.split()))\n    # if (1 + groups[0]) <= 8 * n:\n    #     return 'YES'\n    # else:\n    #     return 'NO'\n    if (8 * n - groups[0]) <= (8 * n - groups[1]) and (8 * n - groups[0]) <= (8 * n - groups[2]):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = sorted(map(int, stdin.split()))\n\n    for i in range(1, k):\n        if lst[i] <= lst[i-1] + 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    for i in range(1, k):\n        if a[i-1]+a[i] <= 8*n:\n            if a[i-1]+a[i] >= a[i]:\n                if a[i-1]+a[i] >= a[i-1]:\n                    if a[i-1]+a[i] >= a[i-2]:\n                        if a[i-1]+a[i] >= a[i-3]:\n                            print(\"YES\")\n                        else:\n                            print(\"NO\")\n                    else:\n                        print(\"NO\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\nsolution(input())\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  for i in range(1, n+1):\n    s = int(stdin)\n    l = []\n    for j in range(s):\n      l.append(int(stdin))\n    m = 0\n    for j in range(s):\n      m += abs(l[j] - j)\n    if m < 1:\n      print(f\"{s} {m}\")\n      return\n  return\n\nsolution(input())"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    \n    min_cost = float('inf')\n    min_t = float('inf')\n    def cost(t):\n        res = 0\n        for stick in array:\n            res += abs(stick - t)\n        return res\n    \n    for i in range(n):\n        if cost(i) <= min_cost:\n            min_cost = cost(i)\n            min_t = i\n    return str(min_t) +'' + str(min_cost)"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    sticks: List[int] = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if sticks[i-1] < i:\n            if sticks[i-1] - i < 1:\n                sticks[i-1] = i\n    return str(i) +'' + str(sum([abs(i - i) for i in sticks]))\n\n\nprint(solution(input()))"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    t = 1\n    min_cost = float(\"inf\")\n    for i in range(n):\n        if sticks[i] - t >= 1:\n            min_cost = min(min_cost, (sticks[i] - t) + (t * (t - 1) / 2))\n        else:\n            t += 1\n    if min_cost == float(\"inf\"):\n        return \"no answer\"\n    return str(t) + \" \" + str(min_cost)\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    sticks = stdin[1]\n    sticks = [int(i) for i in sticks.split(' ')]\n\n    def isgood(sticks, t):\n        for i in range(1, len(sticks)):\n            if sticks[i] - t > 1 or sticks[i] - t < 0:\n                return False\n        return True\n\n    def mincost(sticks, t):\n        min_cost = 0\n        lengths = []\n        lengths.append(sticks[0])\n        for i in range(1, len(sticks)):\n            lengths.append(sticks[i])\n            if isgood(lengths, t):\n                min_cost = min(min_cost, lengths[i] - t)\n        return min_cost\n    t = min(2, mincost(sticks, 3))\n    print(t)\n    return ''\n\nsolution('')"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(map(int, stdin.split()[1]))\n    best = float('inf')\n    for t in range(1, n + 1):\n        tlen = list(map(lambda x: abs(x - t), s))\n        for i in range(len(tlen)):\n            if tlen[i] == 1:\n                tlen[i] = 2\n                break\n        res = sum(tlen)\n        if res < best:\n            best = res\n    return str(t) +'' + str(best)"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n\n    def cost(i):\n        return abs(i - sticks[i - 1]) + abs(i - sticks[i + 1])\n    \n    t = min(range(1, n + 1), key=cost)\n    return str(t) +'' + str(cost(t))"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a = list(map(int, stdin.split()))\n    return a\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0, 0] for _ in range(n + 1)]\n\n    for i in range(n):\n        dp[i + 1][0] = dp[i][0]\n        dp[i + 1][1] = max(dp[i][1], dp[i][0] + abs(a[i] - 1))\n\n    for i in range(n - 1, -1, -1):\n        dp[i][0] = max(dp[i + 1][0], dp[i][1] + abs(a[i] - 1))\n        dp[i][1] = max(dp[i + 1][1], dp[i][0] + abs(a[i] - 1))\n\n    return str(dp[0][0]) + \" \" + str(dp[0][1])\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    sticks = list(map(int, stdin[1]))\n    t = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(sticks[i] - t) <= 1:\n                sticks[i], sticks[j] = sticks[j], sticks[i]\n                break\n        t += 1\n    # print(sticks)\n    return''.join(map(str, sticks)) +'' + str(t)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  a = list(map(int, stdin.split()))\n  l = list(range(n))\n  d = {(a[i], a[i + 1]) for i in range(n - 1)}\n  return str(len(d) / n)"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    while True:\n        if a.count(0) == n:\n            break\n        probability = a.count(1) / n\n        probability = probability * (1 - probability)\n        probability = probability ** (1 / k)\n        probability = probability ** (1 / (k - 1))\n        ans += probability\n    return str(ans)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a_new = sorted(a)\n    if a == a_new:\n        return '0'\n    prod = 1\n    for i in range(k):\n        a_new = swap(a_new, 2, 0)\n        prod *= prod_mod_pow(a, a_new, n)\n    return prod\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 2\n   ... 0 1 0\n   ... ''')\n    '333333336'\n    >>> solution('''\n   ... 5 1\n   ... 1 1 1 0 0\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 6 4\n   ... 1 0 0 1 1 0\n   ... ''')\n    '968493834'\n    \"\"\"\n    from collections import Counter\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if a == sorted(a):\n        return \"0\"\n\n    a_cnt = Counter(a)\n    ans = 0\n    p = 1\n    for i, j in a_cnt.items():\n        if i == 0:\n            continue\n        if j % k == 0:\n            p *= i**-1\n        else:\n            p *= (i**-1 * j**k)\n    return str(p % (10**9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    p = (1 / 2 ** n)\n    q = (1 / 2 ** n - 1)\n    if n == 2 and k == 1:\n        return str(int(p * q**-1))\n    else:\n        return str(int(p * q**-1))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    \n    if len(arr) == 1 and arr[0] == 1:\n        return 0\n    \n    if len(arr) == 2 and arr[0] == 0 and arr[1] == 0:\n        return 0\n    \n    if len(arr) == 2 and arr[0] == 1 and arr[1] == 0:\n        return 1\n    \n    possible = set([0, 1])\n    \n    for i in range(2, len(arr) + 1):\n        operations = set()\n        for j in range(i):\n            possible = possible | set([arr[j], (1 - arr[j])])\n            operations = operations | set([j, i - j])\n        \n        operations = operations | set([i - 1, 0])\n        \n        if len(operations) % 2 == 0:\n            possible = possible - operations\n        else:\n            possible = possible - operations - set([0])\n    \n    return str(len(possible) / (2 ** len(arr) - 1))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 1\n    q = 1\n    for _ in range(k):\n        if p == 0:\n            break\n        p = a.count(a[0])\n        a[0], a[p-1] = a[p-1], a[0]\n        p = a.count(a[-1])\n        a[-1], a[p-1] = a[p-1], a[-1]\n        q *= p\n        q %= MOD\n    return str(q)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    p = 1\n    for i in range(n):\n        if (a[i] == 1) and (i+1 < n):\n            p = p*(1-a[i+1])\n    return str(p*(1-a[0])**k)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = q = 1\n    for i in range(1, k + 1):\n        q = (q * a[i - 1]) % (10 ** 9 + 7)\n        a[i - 1], a[k - i] = a[k - i], a[i - 1]\n    return str(q)\n    \n    "
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    return str(pow(array[0] / sum(array), -1, 10 ** 9 + 7))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # \uc815\ub2f5 \ucf54\ub4dc\n    # \uac01 \ubcc0\ub4e4\uc744 \uc815\ub82c\ud558\uace0, \uac00\uc7a5 \uc791\uc740 \uc218\ub97c \ucc3e\ub294\ub2e4.\n    a, b, c = map(int, stdin.split())\n    a, b, c = sorted([a, b, c])\n    min_time = min(a, b, c)\n    # \uc774 \ubd80\ubd84\uc740 \ubaa8\ub4e0 \uc870\ud569\uc5d0\uc11c \uac00\uc7a5 \uc791\uc740 \uc218\ub97c \ucc3e\ub294\ub2e4.\n    # \uc774\ub54c \ubaa8\ub4e0 \ubaa8\uc591\uc774 \uac19\uc740 \uacbd\uc6b0 \ubaa8\ub450 \uacc4\uc0b0\ud558\uace0, \uc138\ub85c\uc640 \ub300\uac01\uc120\uc774 \ubaa8\ub450 \uac19\uc740\uc9c0\ub97c \uccb4\ud06c\ud558\ub294\ub370, \uc774\ub54c\ub294 \uc138\ub85c\ub85c \uccb4\ud06c\ud558\uace0 \ubc18\ubcf5\ud574\ub3c4 \ud56d\uc0c1 \uac00\uc7a5 \uc791\uc740\uac83\uc744 \ubaa8\ub450 \uad6c\ud55c\ub2e4.\n    if a == min_time and b == min_time and c == min_time:\n        return \"Yes\"\n    for i in range(min_time, 0, -1):\n        if a % i == 0 and b % i == 0 and c % i == 0:\n            min_time = i\n    if a == min_time and b == min_time and c!= min_time:\n        return \"No\"\n    if a!= min_time and b == min_time and c!= min_time:\n        return \"No\"\n    if a == min_time and b!= min_time and c == min_time:\n        return \"No\"\n    if a!= min_time and b == min_time and c!= min_time:\n        return \"No\"\n    return str(min_time)"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    x, y = map(int, stdin.split())\n    # two solutions\n    one = 1\n    two = 2\n    # set initial value\n    min_len = 1\n    # set variables\n    a = x\n    b = y\n    c = y\n    while a > 0 and b > 0:\n        # a = x b = y c = y\n        # if a == b and c == x:\n        #     return 1\n        # if a == b and c == x:\n        #     return 1\n        # if a == b and c == x:\n        #     return 1\n        # else:\n        #     min_len += 1\n        if a == b and c == x:\n            return 1\n        if a == b and c == x:\n            return 1\n        if a == b and c == x:\n            return 1\n        else:\n            min_len += 1\n        # find smaller of a, b, c\n        if a < b and a < c:\n            # c is greater than b\n            if b < c:\n                # a and c are greater than b\n                c = b\n            # a and b are greater than c\n            else:\n                c = c\n            # a = c\n            a = a\n            # set variables\n            b = a\n            c = b\n        elif a > b and a < c:\n            # c is greater than a\n            if b < c:\n                # b and c are greater than a\n                a = b\n            # b and c are greater than a\n            else:\n                a = a\n            # b = c\n            b = a\n            # set variables\n            a = c\n            c = b\n        elif a > b and a > c:\n            # c is greater than a\n            a = c\n            # a and c are greater than b\n            if b < c:\n                # a and b are greater than c\n                b = a\n            # a and c are greater than b\n            else:\n                b = a\n            # set variables\n            a = c\n            c = b\n        if b < c:\n            # a and c are greater than b\n            b = a\n            # a and b are greater than c\n            if a < c:\n                # a and c are greater than b\n                c = a\n            # b and c are greater than a\n            else:\n                c = a\n            # set variables\n            a = c\n            b = a\n    if a == 0 and b == 0:\n        return min_len\n    else:\n        return one\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return '0'\n    else:\n        if x >= 3:\n            if x < y:\n                y = y - x\n            else:\n                x = x - y\n            return str(x + y) +'' + str(y + x)\n        else:\n            if x < y:\n                y = y - x\n            else:\n                x = x - y\n            return str(x + y) +'' + str(x + y)\nsolution('5 5')\nsolution('7 7')\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    def check_triangle(a, b, c):\n        if a == b and b == c:\n            return 0\n        elif a == b or b == c or a == c:\n            return 1\n        else:\n            return 2\n\n    def de_evolution(a, b, c):\n        if a == c:\n            if b == a:\n                return -1\n            else:\n                return b - a\n        elif b == c:\n            if a == b:\n                return -1\n            else:\n                return a - b\n        else:\n            if a!= 0 and b!= 0 and c!= 0:\n                return max(a, b, c) - min(a, b, c)\n\n    for i in range(x, y + 1):\n        if check_triangle(i, i, i) == 2:\n            return -1\n        else:\n            a, b, c = i, i, i\n            while check_triangle(a, b, c)!= 2:\n                if de_evolution(a, b, c) == -1:\n                    return -1\n                a, b, c = de_evolution(a, b, c), a, b\n    return c\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c))"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n    def solve():\n        while True:\n            a, b, c = stdin\n            if a == b == c:\n                return min(a, b, c)\n            if a!= b and b!= c and a!= c:\n                swap(stdin, 0, 1)\n                swap(stdin, 2, 1)\n            if a == b == c:\n                return min(a, b, c)\n            if a!= b and b!= c and a!= c:\n                swap(stdin, 0, 1)\n                swap(stdin, 2, 1)\n            if a == b and a!= c:\n                swap(stdin, 1, 0)\n                swap(stdin, 2, 0)\n            if a!= b and b!= c and a == c:\n                swap(stdin, 1, 2)\n                swap(stdin, 2, 1)\n            if a == b and a!= c and a!= b:\n                swap(stdin, 1, 2)\n            if b == c and b!= a and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 2, 1)\n            if a == b and a!= c and a!= b:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a == b == c:\n                return min(a, b, c)\n            if a!= b and b!= c and a!= c:\n                swap(stdin, 0, 1)\n                swap(stdin, 2, 1)\n            if a == b == c:\n                return min(a, b, c)\n            if a!= b and b!= c and a!= c:\n                swap(stdin, 0, 1)\n                swap(stdin, 2, 1)\n            if a == b and a!= c:\n                swap(stdin, 1, 0)\n                swap(stdin, 2, 0)\n            if a!= b and b!= c and a!= c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and a!= b:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a == c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                swap(stdin, 1, 2)\n            if a == b and a!= c and b!= c:\n                swap(stdin, 1, 2)\n            if a!= b and a!= c and b == c:\n                "
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = list(map(int, stdin.split()))\n    def isTriangle(side1, side2, side3):\n        return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n    def solution2(a,b,c):\n        '''\n        Algorithm:\n        - We use the key idea of using divide and conquer.\n        - We can divide the problem into two subproblems.\n        - We can recursively call with side 1 to the left and side 2 to the right.\n        - When we do this recursively, we can verify that the triangle is valid.\n        '''\n        if isTriangle(a,b,c):\n            return min(solution(a,b,c-1), solution(a,c-1,b), solution(b,a,c-1)) + 1\n        else:\n            return -1\n    return str(solution2(a,b,c))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nN, X = list(map(int, stdin.split()))\n\nans = (X * X) / (X * X)\n\nfor i in range(1, N):\n    ans = (ans * (X - i) * (X - i)) / (X * X)\n\nreturn ans\n\n\"\"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n_a, n_b, n_c = list(map(int, stdin.split()))\n    return str(int(2 * (n_b + n_c) **.5 - (n_a + n_b + n_c) **.5) + 1)\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = list(map(int, stdin.split('\\n')))\n    a, b, c = stdin[0], stdin[1], stdin[2]\n    m = min(a, b, c)\n    m1, m2, m3 = a + m, b + m, c + m\n    return str(min(m1, m2, m3))\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(abs(d) - abs(a - b))"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n\n    A = np.array([[a, b], [c, d]])\n    B = np.array([[1.2], [1.8], [2.8], [4.2]])\n    return \"%.8f\" % np.linalg.norm(A - B, ord=2)\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    print(f'{abs(a * d - b * c)}')\n    return\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.strip().split()))\n    c, d = list(map(int, stdin.strip().split()))\n\n    return f'{max(abs(a - c), abs(b - d))}'\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return f'{math.fabs(a * d - b * c):.10f}'"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    c,d = map(int, stdin.split())\n    ans = float(min(abs(a*d - b*c), abs(a*d + b*c - a*b*d)))\n    return str(ans)\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    res = 0.0\n    if a == 0:\n        res = b\n    else:\n        res = (a / d) - (b / c)\n    return \"%.3f\" % res"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(d - b - c + a * d)\n    \n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    # a = 1, b = 2\n    # c = 3, d = 4\n    # return abs(a * d - b * c)\n    return abs(a * d - b * c)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    groups = list(map(int, stdin.split()))\n    t_groups = []\n    for g in groups:\n        if g == 1:\n            t_groups.append(a)\n        else:\n            t_groups.append(b)\n    t_groups.sort(reverse=True)\n    print(sum(t_groups))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    # t = stdin.split()\n    # print(t)\n    t_seq = collections.deque(t)\n    # print(t_seq)\n    # print(t_seq)\n    return str(sum(1 for i in t_seq if i == 1))\n\n\nsolution(input())\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    \n    times.sort()\n    \n    ans = 0\n    for i in range(n):\n        if times[i] == 1:\n            if i == n-1:\n                ans += 1\n            elif i == 0:\n                ans += 1\n            else:\n                ans += 2\n        else:\n            if i == n-1:\n                ans += 1\n            elif i == 0:\n                ans += 2\n            else:\n                ans += 1\n                \n    return str(ans)\nprint(solution(input()))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    groups = []\n    for i in range(n):\n        groups.append(list(map(int, stdin.split())))\n    result = 0\n    for group in groups:\n        if group[0] == 1:\n            result += a\n        else:\n            result += b\n    return str(result)"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, one_seater_table, two_seater_table = stdin.split()\n    n = int(n)\n    one_seater_table = int(one_seater_table)\n    two_seater_table = int(two_seater_table)\n    if one_seater_table > 1 or one_seater_table == 2:\n        return \"0\"\n    elif one_seater_table == 0:\n        if two_seater_table == 0:\n            return \"2\"\n        elif two_seater_table > 1 or two_seater_table == 2:\n            return \"0\"\n    elif one_seater_table == 2:\n        if two_seater_table == 2:\n            return \"1\"\n        elif two_seater_table == 1:\n            return \"0\"\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_groups, one_seater, two_seater = map(int, stdin.split())\n    groups = [[] for i in range(num_groups)]\n    rest_of_tables = [[] for i in range(2 * two_seater + 1)]\n    rest_of_tables_occupied = []\n    for i in range(num_groups):\n        group = list(map(int, stdin.split()))\n        groups[i] = group[:2]\n        for j in range(len(group)):\n            if group[j] == 1:\n                rest_of_tables[i].append(j + 1)\n        rest_of_tables_occupied.append(len(rest_of_tables[i]))\n        rest_of_tables[i] = []\n    for i in range(len(rest_of_tables_occupied) - 1):\n        if rest_of_tables_occupied[i] == 0:\n            rest_of_tables_occupied[i] += 1\n        else:\n            rest_of_tables_occupied[i] += 2\n    return str(sum(rest_of_tables_occupied))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    groups, one_seater, two_seater = map(int, stdin.split())\n    groups = list(map(int, stdin.split()))\n    if groups[0] == 1:\n        return (groups[0] * groups[1])\n    else:\n        return ((groups[0] * groups[1]) + (groups[2] * groups[3]))\n\n\nsolution(\"4 1 2\\n1 2 1 1\")\nsolution(\"4 1 1\\n1 1 2 1\")\nsolution(\"3 2 3\\n1 2 3\")\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n\n    groups = []\n\n    for i in range(n):\n        groups.append([int(i == j) for j in range(1, 3)])\n\n    for g in groups:\n        if sum(g) == 1:\n            print(0)\n        if sum(g) == 2:\n            print(0)\n        if sum(g) == 0:\n            print(1)\n\n\nsolution(input())\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = map(int, stdin.split())\n    groups = []\n    \n    for i in range(n):\n        group = list(map(int, stdin.split()))\n        if len(group) == 1:\n            groups.append([group[0]])\n        elif len(group) == 2:\n            groups.append(group)\n        else:\n            print(\"Error\")\n            break\n    \n    if not len(groups):\n        return 0\n    \n    t = len(groups[0])\n    \n    for i in range(1, len(groups)):\n        if len(groups[i])!= t:\n            print(\"Error\")\n            break\n    \n    table_one = [0] * a\n    table_two = [0] * b\n    \n    for i in range(len(groups)):\n        for j in range(len(groups[i])):\n            if groups[i][j] == 1:\n                table_one[j] += 1\n            elif groups[i][j] == 2:\n                table_two[j] += 1\n    \n    res = 0\n    for i in range(a):\n        for j in range(b):\n            res += table_two[j] if table_two[j]!= 0 else table_one[i]\n    \n    return res\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    groups = list(map(int, stdin.split()))\n    tables = []\n    def seat(group):\n        if group == 1:\n            return \"one-seater\"\n        elif group == 2:\n            return \"two-seater\"\n        else:\n            return \"group-seated\"\n    for g in groups:\n        if g == 1:\n            tables.append(\"one-seater\")\n        elif g == 2:\n            tables.append(\"two-seater\")\n        else:\n            tables.append(seat(g))\n    return tables\n\nprint(solution(input()))\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split()))\n    return \"1\" if (a == 0 or b == 0 or c == 0) else \"0\" if (a == n and b == n and c == n) else \"-1\"\n    # a <= n <= 10000 and a + b + c <= 10000\n    # a + b + c == n\n    # n == a + b + c\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, n_student = map(int, stdin.split())\n    if n_student >= a and n_student >= b and n_student >= c:\n        return '-1'\n    return str(n_student - n)\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A == 0 or N == 0:\n        return -1\n    if A == B or C == A or B == C:\n        return -1\n    return A - 1\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nstdin = \"\"\"\n20 10 5 20\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # the first line contains four integers\n    A, B, C, N = map(int, stdin.split())\n    # the following line contains N integers: the number of students who visited each restaurant\n    visited = list(map(int, stdin.split()))\n    # the following line contains 2 integers: the number of students who visited both restaurants\n    visited_both = sum(visited) - visited[0] - visited[1]\n    # the following line contains 1 integer: the number of students who didn't pass the exam\n    left = N - visited_both\n    # check if a distribution of N students exists in which at least one student visited either BugDonalds, BeaverKing or both of them\n    if visited_both < N or (left < A or (left < B and left < C)):\n        # return -1\n        return '-1'\n    # check if there is at least one student who didn't pass the exam\n    if left == 0:\n        # return 0\n        return '0'\n    # check if the group didn't pass the exam\n    if left >= A:\n        # return -1\n        return '-1'\n    # otherwise return amount of students who didn't pass the exam\n    return str(left)\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import gcd\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom functools import reduce\n\nstdin = open('file.in').read().splitlines()\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A <= 0 or A >= 100:\n        return -1\n    if N <= 0 or N >= 100:\n        return -1\n    if A + N <= 0 or A + N >= 100:\n        return -1\n    if B + C <= 0 or B + C >= 100:\n        return -1\n    if A == N and (B + C) > A:\n        return -1\n    if N == A:\n        return -1\n    if A == 0:\n        return 0\n    if N == A and A == 0:\n        return 0\n    if A == N:\n        return 0\n    return A - N + (100 - A) - (100 - B) - (100 - C)"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,N=map(int,stdin.split())\n    if A==B==C==0:\n        return \"-\"\n    if A==0 and C==0 and N==0:\n        return \"0\"\n    AB=[0]*C\n    C=sorted(range(C),key=lambda x: (x+A+B,x+A))\n    for i in range(N):\n        AB[C[i]]+=1\n    if 0 in AB and N==A+B+C:\n        return \"-1\"\n    return str(sum(AB)-(A+B))\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A == B == C == N == 0:\n        return '-1'\n    elif N == 0:\n        return '1'\n    elif A > 0:\n        return '2'\n    elif A < 0:\n        return '1'\n    elif B > 0:\n        return '2'\n    elif B < 0:\n        return '1'\n    elif C > 0:\n        return '2'\n    elif C < 0:\n        return '1'\n\n\nprint(solution('10 10 5 20'))\nprint(solution('2 2 0 4'))\nprint(solution('2 2 2 1'))\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = stdin.split(' ')\n    return str((int(x)**2 + int(x)) // 2)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x,k = map(int,stdin.split())\n    \n    # Counting the number of dresses\n    num = 2\n    for _ in range(1,k):\n        num = (num * 2) % 10**9 + 7\n    \n    # Divinding the number of dresses by 2 and return to integer\n    return num//2"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split()))\n    if k % 2 == 0:\n        return x % (10**9 + 7)\n    else:\n        return (x * 2) % (10**9 + 7)\n\nsolution(\"2 1\")\nsolution(\"2 1\")\nsolution(\"3 2\")\nsolution(\"3 2\")\nsolution(\"7\")\nsolution(\"7\")\nsolution(\"4\")\nsolution(\"4\")\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return (int(((2 * x + 1) * k) / 2) % 10**9 + 7)"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k = int(stdin[0]), int(stdin[1])\n    ans = 0\n    for i in range(k + 1):\n        ans += x if i % 2 == 0 else 2 * x\n    return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split()))\n    return str(x + k)"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x,k = list(map(int,stdin.split()))\n    return str(x*k)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  x, k = map(int, stdin.split())\n  k += 1\n  return int((k*(k + 1))/2)\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return str(x * (k + 1) // 2)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return n * (1 + k) * 4\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    l = 0\n    r = 0\n    res = 1\n    for i in range(n):\n        l = l * 2 + A[i]\n        r = r * 2 + A[i]\n\n    if l == r:\n        return \"1\"\n    return f\"{l/r:.0f}\""
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '2':\n        return '1'\n    n, *arr = map(int, stdin.split())\n    max_r, min_r = arr\n    probs = []\n    for i in range(n):\n        r = arr[i]\n        probs.append(r / (max_r - min_r) - min_r / (max_r - min_r))\n    inversions = 0\n    for i in range(n):\n        if probs[i] > 0:\n            inversions += 1\n    return str(round(inversions / (n - 1) * (1 / probs[0] - 1) / (1 / probs[1] - 1) - 1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inversion = 0\n    for i in range(1, len(stdin)):\n        for j in range(i):\n            if stdin[j] > stdin[i]:\n                inversion += 1\n    return f\"{inversion}/{998244353}\"\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    arr = list(map(int, stdin.strip().split()))\n    prob = 1\n    for i in range(n - 1):\n        left, right = arr[i], arr[i + 1]\n        if left >= right:\n            prob *= (right - left + 1) // 2\n            prob %= 998244353\n    return str(prob)\n\n'''\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    m = min(l)\n    M = max(l)\n    if m > M:\n        return \"1\"\n    elif m == M:\n        return \"0\"\n    else:\n        return \"1\"\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    problems = sorted(list(map(int, stdin.split())))\n    assert len(problems) == n\n    problems.sort()\n    # print(problems)\n    # print(problems[-1])\n    # print(problems[0])\n\n    # l = problems[0]\n    # r = problems[-1]\n    # print(l, r)\n\n    problems_greater = 0\n    for i in range(n):\n        l = problems[i]\n        r = problems[i+1]\n        problems_greater += r - l - 1\n\n    return int(problems_greater ** -1 % 998244353)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    li, ri = list(map(int, stdin.splitlines()[1].split())), list(map(int, stdin.splitlines()[2].split()))\n\n    problems = [(li[i], ri[i]) for i in range(n)]\n\n    return str(sum([1/x**2 for l, r in problems if l > r]))\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for _ in range(n):\n        lst.append([int(i) for i in stdin.split()])\n    ans = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            l, r = lst[i - 1], lst[j]\n            if l[1] > r[0] and l[0] < r[1]:\n                ans += 1\n    return str(ans % (998244353))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_square_part(num: int) -> int:\n        i = 0\n        while i * i < num:\n            i += 1\n        return i\n    \n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    \n    num_rectangles = 2\n    num_squares = get_square_part(n)\n    i = 2\n    while i * i <= n:\n        num_rectangles += (n-i*i)/i\n        i += 1\n    \n    num_squares += 1\n    \n    return num_rectangles - num_squares\n\nprint(solution(input()))\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(int(0 < n < 2 * 10 ** 9 and 4 >= len(set(divisors(n))) >= 3))\n\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nYour code should return a single integer.\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dp(k):\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k > 2:\n            s1 = dp(k - 1)\n            s2 = dp(k - 2)\n            return s1 + s2\n    return str(dp(int(stdin)))\n    \"\"\"\n    return dp(int(stdin))"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 3:\n        return 1\n    if num == 3:\n        return 4\n    if num == 4:\n        return 4\n    if num == 5:\n        return 6\n    if num == 6:\n        return 6\n    if num == 7:\n        return 8\n    if num == 8:\n        return 8\n    if num == 9:\n        return 7\n    if num == 10:\n        return 7\n    if num == 11:\n        return 6\n    if num == 12:\n        return 6\n    if num == 13:\n        return 5\n    if num == 14:\n        return 5\n    if num == 15:\n        return 4\n    if num == 16:\n        return 4\n    if num == 17:\n        return 3\n    if num == 18:\n        return 3\n    if num == 19:\n        return 2\n    if num == 20:\n        return 2\n    if num == 21:\n        return 1\n    if num == 22:\n        return 1\n    if num == 23:\n        return 0\n    if num == 24:\n        return 0\n    if num == 25:\n        return -1\n    if num == 26:\n        return -1\n    if num == 27:\n        return -2\n    if num == 28:\n        return -2\n    if num == 29:\n        return -3\n    if num == 30:\n        return -3\n    if num == 31:\n        return -4\n    if num == 32:\n        return -4\n    if num == 33:\n        return -5\n    if num == 34:\n        return -5\n    if num == 35:\n        return -6\n    if num == 36:\n        return -6\n    if num == 37:\n        return -7\n    if num == 38:\n        return -7\n    if num == 39:\n        return -8\n    if num == 40:\n        return -8\n    if num == 41:\n        return -9\n    if num == 42:\n        return -9\n    if num == 43:\n        return -10\n    if num == 44:\n        return -10\n    if num == 45:\n        return -11\n    if num == 46:\n        return -11\n    if num == 47:\n        return -12\n    if num == 48:\n        return -12\n    if num == 49:\n        return -13\n    if num == 50:\n        return -13\n    if num == 51:\n        return -14\n    if num == 52:\n        return -14\n    if num == 53:\n        return -15\n    if num == 54:\n        return -15\n    if num == 55:\n        return -16\n    if num == 56:\n        return -16\n    if num == 57:\n        return -17\n    if num == 58:\n        return -17\n    if num == 59:\n        return -18\n    if num == 60:\n        return -18\n    if num == 61:\n        return -19\n    if num == 62:\n        return -19\n    if num == 63:\n        return -20\n    if num == 64:\n        return -20\n    if num == 65:\n        return -21\n    if num == 66:\n        return -21\n    if num == 67:\n        return -22\n    if num == 68:\n        return -22\n    if num == 69:\n        return -23\n    if num == 70:\n        return -23\n    if num == 71:\n        return -24\n    if num == 72:\n        return -24\n    if num == 73:\n        return -25\n    if num == 74:\n        return -25\n    if num == 75:\n        return -26\n    if num == 76:\n        return -26\n    if num == 77:\n        return -27\n    if num == 78:\n        return -27\n    if num == 79:\n        return -28\n    if num == 80:\n        return -28\n    if num == 81:\n        return -29\n    if num == 82:\n        return -29\n    if num == 83:\n        return -30\n    if num == 84:\n        return -30\n    if num == 85:\n        return -31\n    if num == 86:\n        return -31\n    if num == 87:\n        return -32\n    if num == 88:\n        return -32\n    if num == 89:\n        return -33\n    if num == 90:\n        return -33\n    if num == 91:\n        return -34\n    if num == 92:\n        return -34\n    if num == 93:\n        return -35\n    if num == 94:\n        return -35\n    if num == 95:\n        return -36\n    if num == 96:\n        return -36\n    if num == 97:\n        return -37\n    if num == 98:\n        return -37\n    if num == 99:\n        return -38\n    if num == 100:\n        return -38\n    if num == 101:\n        return -39\n    if num == 102:\n        return -39\n    if num == 103:\n        return -40\n    if num == 104:\n        return -40\n    if num == 105:\n        return -41\n    if num == 106:\n        return -41\n    if num == 107:\n        return -42\n    if num == 108:\n        return -42\n    if num == 109:\n        return -43\n    if num == 110:\n        return -43\n    if num == 111:\n        return -44\n    if num == 112:\n        return -44\n    if num == 113:\n        return -45\n    if num == 114:\n        return -45\n    if num == 115:\n        return -46\n    if num == 116:\n        return -46\n    if num == 117:\n        return -47\n    if num == 118:\n        return -47\n    if num == 119:\n        return -48\n    if num == 120:\n        return -48\n    if num == 121:\n        return -49\n    if num == 122:\n        return -49\n    if num == 123:\n        return -50\n    if num == 124:\n        return -50\n    if num == 125:\n        return -51\n    if num == 126:\n        return -51\n    if num == 127:\n        return -52\n    if num == 128:\n        return -52\n    if num == 129:\n        return -53\n    if num == 130:\n        return -53\n    if num == 131:\n        return -54\n    if num == 132:\n        return -54\n    if num == 133:\n        return -55\n    if num == 134:\n        return -55\n    if num == 135:\n        return -56\n    if num == 136:\n        return -56\n    if num == 137:\n        return -57\n    if num == 138:\n        return -57\n    if num == 139:\n        return -58\n    if num == 140:\n        return -58\n    if num == 141:\n        return"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    dp: List[int] = [0] * (n + 1)\n    dp[0], dp[1], dp[2] = 1, 1, 4\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return str(dp[n])\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    a = (n + 3) // 4\n    print(a)\n\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    n -= 2\n    x = 1\n    count = 1\n    y = 3\n    while y <= n:\n        if x == y:\n            x = 0\n            y += 1\n            count += 1\n        else:\n            x = y + 1\n            count += 1\n    if x!= 0:\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\na,b,c,d=map(int,input().split())\nprint(int(a*b/c*d))\n'''\nn=int(input())\ndef"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nx = list(map(int, stdin.split()))\nn = x[0]\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort()\n    for i in range(n):\n        if (s - v[i]) % v[i]!= 0:\n            return \"-1\"\n    return str(int((s - v[0]) / v[0]))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    kegs = list(map(int, stdin.split()))\n    kegs.sort()\n\n    def vol(lever):\n        res = 0\n        for i, v in enumerate(kegs):\n            res += v\n            if i < len(kegs) - 1:\n                res += v\n            if res > s:\n                return -1\n            res -= v * lever\n        return res\n\n    lever = 1\n    while lever < len(kegs):\n        res = vol(lever)\n        if res == -1:\n            lever += 1\n        else:\n            break\n    return str(lever)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split()]\n    kegs = sorted([int(i) for i in stdin.split()])\n    ans = 0\n    i = 0\n    while i < len(kegs):\n        if kegs[i] <= s:\n            ans += s\n            s -= kegs[i]\n        else:\n            ans += kegs[i]\n            i += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, s = int(stdin[0]), int(stdin[1])\n    kegs = list(map(int, stdin[2].split(' ')))\n    kegs.sort(reverse=True)\n    possible_value = 0\n    for i in range(len(kegs)):\n        if kegs[i] - 1 <= s:\n            possible_value += 1\n        else:\n            break\n    return str(possible_value)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v_list = list(map(int, stdin.split()))\n    result = 0\n    while True:\n        min_v = 10000000000\n        for v in v_list:\n            if min_v > v:\n                min_v = v\n        if min_v <= s:\n            result = min_v\n            break\n        if s == 0:\n            result = -1\n            break\n        v_list.remove(min_v)\n        s = s - min_v\n    return str(result)"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    v = list(sorted(v))\n\n    min_keg = v[0]\n    sum_v = 0\n\n    for i in range(len(v)):\n        sum_v += v[i]\n\n        if sum_v >= s:\n            min_keg = min(min_keg, v[i])\n            sum_v = sum_v - v[i]\n            continue\n\n        if sum_v < s:\n            break\n\n    if sum_v > s:\n        return '-1'\n\n    return str(min_keg)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v_n = map(int, stdin.split())\n    v_n.sort()\n    v_n.reverse()\n    sum_ = 0\n    while sum_ < s and len(v_n) > 0:\n        if v_n[0] >= s:\n            sum_ += v_n.pop(0)\n        else:\n            v_n.pop(0)\n    if len(v_n) == 0:\n        return -1\n    return str(len(v_n))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    possible = []\n    for _ in range(n):\n        possible.append(int(input()))\n\n    possible.sort()\n\n    if not possible:\n        return -1\n\n    ans = -1\n    left, right = 0, possible[0] - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if possible[n - 1] <= mid:\n            ans = mid\n            break\n        elif possible[n - 1] > mid + 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return str(ans)\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    if s <= v[0]:\n        return str(0)\n    if s >= sum(v):\n        return str(-1)\n\n    _max = n\n\n    def is_possible(n: int, s: int):\n        if s <= v[n]:\n            return True\n        for i in range(n + 1, len(v)):\n            if v[i] + s < v[n]:\n                return False\n            s -= v[i]\n        return s == 0\n\n    for i in range(0, n):\n        if is_possible(i, s):\n            _max = i\n            break\n\n    if _max == n:\n        return str(-1)\n\n    s -= v[_max]\n\n    for i in range(n, 0, -1):\n        if is_possible(i, s):\n            _max = i\n            break\n\n    if _max == 0:\n        return str(-1)\n\n    return str(_max)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = list(map(int, stdin.split()))\n    a, b = list(map(int, stdin.split()))\n    days = 0\n    while h_1 > 0:\n        if h_2 < h_1:\n            h_2 = h_2 + (a * 1) + (b * 1)\n        if h_2 >= h_1:\n            if h_2 == h_1:\n                break\n            else:\n                h_1 = h_1 - (a * 1) - (b * 1)\n                days = days + 1\n    if h_1 == 0:\n        return str(days)\n    else:\n        return str(-1)"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.split())\n    if h2 > h1:\n        x = (h2 - h1) // 2\n        return str(x + 1) if h1 + x == h2 - x else \"-\"\n    return str(0)"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = list(map(int, stdin.split()))\n    a, b = list(map(int, input().split()))\n    day = 1\n    while h1 < h2:\n        if day % 2 == 0:\n            h1 += a\n        else:\n            h1 -= b\n        day += 1\n    return str(day) if h1 >= h2 else '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '0'\n    days = a // b + 1\n    return str(days)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    days = 0\n    c1 = h1\n    c2 = h2\n    if h2 > h1:\n        days = (h2 - h1) // a\n        c2 = c1 + (h2 - h1) % a\n    else:\n        days = 0\n    if c1 == c2:\n        return str(days)\n    else:\n        days = days + (c2 - c1) // b\n        c2 = c1 + (c2 - c1) % b\n        return str(days)\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = map(int, stdin.split())\n    if h1 > h2:\n        return 1\n    else:\n        day = (h1 - h2) // a + 1\n        total = (h1 - h2) % a\n        if h2 <= h1:\n            return day\n        else:\n            return day + 1"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = list(map(int, stdin.split()))\n    a, b = list(map(int, stdin.split()))\n    if h_1 >= h_2:\n        return -1\n    # h_1 >= h_2 and h_2 > h_1\n    if h_1 + a > h_2 and h_2 + b > h_1:\n        return (h_2 - h_1) // b + 1\n    elif h_1 + a <= h_2 and h_2 + b > h_1:\n        return (h_2 - h_1) // b + 1 + 1\n    else:\n        return (h_2 - h_1) // a + 1 + 1\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = list(map(int, stdin.split()))\n\n    hours = h2 - h1\n\n    if hours > 0:\n        return str(hours // 2)\n    elif hours < 0:\n        return \"-1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = list(map(int, stdin.split()))\n    a, b = list(map(int, input().split()))\n    days = 0\n    while h1 < h2:\n        h1 += a\n        h2 -= b\n        days += 1\n        if h1 <= h2:\n            break\n    return days\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, C, Hr, Hb, Wr, Wb = stdin.split()\n    C = int(C)\n    Hr = int(Hr)\n    Hb = int(Hb)\n    Wr = int(Wr)\n    Wb = int(Wb)\n    return f\"{C*Hr*Wr + C*Hb*Wb}\""
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W_r, W_b, C, H_r, H_b = map(int, stdin.split())\n    ans = 0\n    if H_r == H_b and W_r == W_b:\n        ans = H_r * (C // 2)\n    elif H_r!= H_b and W_r == W_b:\n        ans = H_r\n    elif H_r!= H_b and W_r!= W_b:\n        ans = W_r + W_b\n    print(ans)\n    return ans\nsolution(\"10 3 5 2 3\")"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    return str(H_r * W_r + H_b * W_b)\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n  return str(max(H_r,H_b) * W_r + max(H_r,H_b) * W_b)\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    return min(C * H_r * W_r, C * H_b * W_b)"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    C, Hr, Hb, Wr, Wb = stdin.split()\n    return int(Hr) * int(Wr) + int(Hb) * int(Wb)"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, h_r, h_b, w_r, w_b = map(int, stdin.split())\n    return max(h_r*c, h_b*c, w_r*c, w_b*c)\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    \n    return (W_r * H_b) + (W_b * H_r)"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = (int(x) for x in stdin.split())\n    return str(C * max(H_r, H_b) + min(H_r, H_b) * max(W_r, W_b))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(abs(x1 - x2) + abs(y1 - y2))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (x1, y1), (x2, y2) = map(int, stdin.split())\n    return abs(x1 - x2) + abs(y1 - y2)"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(abs(x1 - x2) + abs(y1 - y2))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    d = abs(x_1 - x_2) + abs(y_1 - y_2)\n    return str(d)"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return str(min(abs(x_2 - x_1) + abs(y_2 - y_1), abs(x_2 - x_1) + abs(y_1 - y_2)))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for row in stdin.split():\n       ...\n   ...\n    return...\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    steps = abs(x_2 - x_1) + abs(y_2 - y_1)\n    return str(steps)\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return str(min(abs(x_1 - x_2), abs(y_1 - y_2)))\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  #\n  # Your code here\n  #\n  return \"\".join(stdin.split(\"\\n\"))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = stdin\n    first = votes[0]\n    count = 1\n    while count < n:\n        if votes[count] == first:\n            votes = votes[count:]\n            count = n\n        else:\n            count += 1\n    if first == 'R':\n        return 'R'\n    else:\n        return 'D'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    employees = stdin.split('\\n')[1:]\n\n    res = 0\n    while len(employees) > 1:\n        temp = []\n        for i in range(len(employees)-1):\n            if employees[i] == employees[i+1]:\n                temp.append(i+1)\n                temp.append(i+2)\n        for i in temp:\n            employees.pop(i)\n        res += 1\n    return 'D' if res%2==0 else 'R'"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    depublicans = [\"D\"]*n\n    remocrats = [\"R\"]*n\n    for i in range(n-1, -1, -1):\n        if depublicans[i] == \"D\":\n            depublicans[i] = \"R\"\n        else:\n            depublicans[i] = \"D\"\n        if remocrats[i] == \"R\":\n            remocrats[i] = \"D\"\n        else:\n            remocrats[i] = \"R\"\n    return \"D\" if sum(depublicans) > sum(remocrats) else \"R\""
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, votes = stdin.split()\n    n = int(n)\n    votes = stdin.split()\n    votes = {'D' : 'D', 'R' : 'R'}\n    a = 0\n    b = 0\n    for i in range(n):\n        if votes[i] == 'D':\n            a += 1\n        else:\n            b += 1\n    if a > b:\n        return 'D'\n    else:\n        return 'R'\n\nprint(solution(input()))"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    votes = stdin.splitlines()[1:]\n    count_D = 0\n    count_R = 0\n    for vote in votes:\n        if vote == \"D\":\n            count_D += 1\n        if vote == \"R\":\n            count_R += 1\n    if count_D <= count_R:\n        return \"D\"\n    else:\n        return \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split(\"\\n\")\n    # print(arr)\n    # print(n)\n    votes = {}\n    for i in range(n):\n        if arr[i] == \"DDRRR\":\n            votes[i+1] = 'D'\n        else:\n            votes[i+1] = 'R'\n    print(votes)\n    print(sum([1 if votes[x] == 'D' else 0 for x in votes.keys()]))\n    return 'D' if sum([1 if votes[x] == 'D' else 0 for x in votes.keys()]) == 1 else 'R'\n\nsolution(input())"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input = stdin.split('\\n')\n    dep_votes = []\n    rem_votes = []\n    for i in range(1, n + 1):\n        if input[i][0] == 'D':\n            dep_votes.append(i)\n        else:\n            rem_votes.append(i)\n\n    while len(dep_votes)!= 1 and len(rem_votes)!= 1:\n        del_votes = []\n        for i in range(len(dep_votes)):\n            if i % 2 == 0:\n                if input[dep_votes[i]][0] == 'D':\n                    del_votes.append(dep_votes[i])\n                else:\n                    del_votes.append(dep_votes[i] + 1)\n        for i in range(len(del_votes)):\n            del_votes[i] = dep_votes[del_votes[i] - 1]\n        dep_votes = list(set(dep_votes) - set(del_votes))\n        for i in range(len(rem_votes)):\n            if i % 2 == 0:\n                if input[rem_votes[i]][0] == 'R':\n                    del_votes.append(rem_votes[i])\n                else:\n                    del_votes.append(rem_votes[i] + 1)\n        for i in range(len(del_votes)):\n            del_votes[i] = rem_votes[del_votes[i] - 1]\n        rem_votes = list(set(rem_votes) - set(del_votes))\n    if len(rem_votes)!= 1:\n        return 'R'\n    if len(dep_votes)!= 1:\n        return 'D'\n    return 'D'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # flag = 0\n    # for line in stdin:\n    #     if line == 'D':\n    #         flag += 1\n    #     else:\n    #         flag -= 1\n    # return \"D\" if flag > 0 else \"R\"\n    return \"D\" if stdin.count('D') > stdin.count('R') else \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cnt = int(stdin)\n    lst = list(stdin)\n    res = []\n    while len(lst) > 1:\n        for i in range(len(lst)):\n            if lst[i] == 'D':\n                if lst[i+1] == 'D':\n                    lst = lst[:i] + lst[i+2:]\n                else:\n                    lst = lst[:i]\n            elif lst[i] == 'R':\n                if lst[i+1] == 'R':\n                    lst = lst[:i] + lst[i+2:]\n                else:\n                    lst = lst[:i]\n        res.append(lst[0])\n    return ''.join(res)\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    for _ in range(n):\n        if stdin.splitlines()[_] == 'DDRRR':\n            return 'D'\n        else:\n            return 'R'\nprint(solution(input()))"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,x,y = map(int, stdin.split())\n    return str(len(set(map(lambda x:x[0]/x[1], ((x,y) for x in range(a,a+1) for y in range(b,b+1))))) - len(set(map(lambda x:x[0]/x[1], ((x,y) for x in range(1,a+1) for y in range(1,b+1))))) + len(set(map(lambda x:x[0]/x[1], ((x,y) for x in range(a+1,a+b+1) for y in range(1,b+1))))) - len(set(map(lambda x:x[0]/x[1], ((x,y) for x in range(1,a+1) for y in range(1,b+1))))) )"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(sum(map(lambda x: 1 if x[0] <= a and x[1] <= b and (x[0] / x[1]) <= (x[0] / x[1]) else 0, enumerate(zip(n, m)))))"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    return str(0 if a <= x <= a + b and y <= x <= y + b else 1)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    width, height, aspect_ratio, a, b = map(int, stdin.split())\n    max_width = width\n    max_height = height\n    min_width = 0\n    min_height = 0\n    result = 0\n    if (aspect_ratio == 1 and a!= width or aspect_ratio!= 1 and b!= height):\n        if aspect_ratio!= 1 and b!= height:\n            result = (a + b) // aspect_ratio\n            if result > max_width or result < min_width:\n                max_width = result\n            min_width = result\n        if aspect_ratio!= 1 and a!= width:\n            result = (width + b) // aspect_ratio\n            if result > max_height or result < min_height:\n                max_height = result\n            min_height = result\n        if a!= width and aspect_ratio == 1 and b!= height:\n            result = (a + width) // height\n            if result > max_width or result < min_width:\n                max_width = result\n            min_width = result\n        if a!= width and aspect_ratio == 1 and b!= height:\n            result = (width + height) // height\n            if result > max_height or result < min_height:\n                max_height = result\n            min_height = result\n    return str(max(min_width, min_height))\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    return str(3 if ((a <= x <= a * b) and (b <= y <= a * x)) else 0)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.strip().split())\n    for w in range(max(a, 1), a + 1):\n        for h in range(max(b, 1), b + 1):\n            if ((w / h) == x / y) and (w > a) and (h > b):\n                return str(w * h)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    count = 0\n    for w in range(a + 1, x):\n        for h in range(b + 1, y):\n            if w / h == x / y:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    w = max(a, x)\n    h = max(b, y)\n    res = 0\n    for i in range(w, a+1):\n        for j in range(h, b+1):\n            if i/j == x/y:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    def possible(w, h):\n        if w > a and h > b:\n            return False\n        if w > a and h < b:\n            return False\n        if w < a and h > b:\n            return False\n        return (w / h == x / y)\n\n    possibilities = 0\n    for w in range(a + 1):\n        for h in range(b + 1):\n            if possible(w, h):\n                possibilities += 1\n    return str(possibilities)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number, base = map(int, stdin.split())\n    result = 0\n    if base == 10:\n        while number > 0:\n            result += number % 10\n            number //= 10\n        print(result)\n    else:\n        while number > 0:\n            d = number % base\n            if d == 0:\n                result += 1\n            number //= base\n        print(result)\n    return \"\""
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(sum(n // i for i in range(1, b+1)))\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    count = 0\n    for i in range(b):\n        if n // (i + 1) == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(len(bin(n)[2:].rstrip('L')) - 1)"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = (int(i) for i in stdin.split())\n    return str(n // b) +'' + str(n % b)\n    \n    n, b = (int(i) for i in stdin.split())\n    zero = str(n).count('0')\n    return str(n // b) +'' + str(n % b) +'' + str(zero) +'' + str(n % b) +'' + str(zero)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b = (int(i) for i in stdin.split())\n    return len([i for i in range(b, 1, -1) if n % (b ** i) == 0])\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ ($1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\n\n-----Examples-----\nInput\n6 9\n\nOutput\n1\n\nInput\n38 11\n\nOutput\n3\n\nInput\n5 2\n\nOutput\n3\n\nInput\n5 10\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, $6!_{(10)} = 720_{(10)} = 880_{(9)}$.\n\nIn the third and fourth example, $5!_{(10)} = 120_{(10)} = 1111000_{(2)}$.\n\nThe representation of the number $x$ in the $b$-ary base is $d_1, d_2, \\ldots, d_k$ if $x = d_1 b^{k - 1} + d_2 b^{k - 2} + \\ldots + d_k b^0$, where $d_i$ are integers and $0 \\le d_i \\le b - 1$. For example, the number $720$ from the first example is represented as $880_{(9)}$ since $720 = 8 \\cdot 9^2 + 8 \\cdot 9 + 0 \\cdot 1$.\n\nYou can read more about bases here.\n\n\n'''\ndef"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(n // b) + \"\".join(str(i) for i in range(1, n // b) if n // b % i == 0)\n\nsolution(sys.stdin.read().strip())\n\n'''\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    # return n! % (10 ** b)\n    return 0 if n == 1 else ((n - 1) * n) // n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n * (a + b + 1) // 2)"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    return str(sum(int(x) for x in lines))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, m, a, b = map(int, stdin.split())\n    return str(sum([int(i + 1) for i in range(m)]))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(1 for i in range(m) if i < a or i > b))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split()\nm, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2])\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(a for i in range(m + 1) if (i - a) % (b - a) == 0))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    total = 0\n    for i in range(1, m+1):\n        total += i\n    return str(total)\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m = map(int, stdin.split())\n    return sum(x+1 for x in range(m) if x < b or x+1 > a)\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(range(a, b+1)))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,m = stdin.split()\n    a,b = int(a),int(b)\n    m = int(m)\n    cnt = 0\n    for i in range(m):\n        if a-i>0 and b+i<=m:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    if A[0] % 2!= 0 or A[-1] % 2!= 0:\n        return \"No\"\n    odd_sum = sum(A[::2])\n    even_sum = sum(A[1::2])\n    if odd_sum!= even_sum:\n        return \"No\"\n    return \"Yes\"\n\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(x) for x in stdin.split(\" \")]\n    # first, check that all elements are positive\n    if lst and all(x > 0 for x in lst):\n        # then, check that the last element is odd\n        if lst[-1] % 2!= 0:\n            # finally, check that each other element is odd\n            if all(x % 2!= 0 for x in lst[:-1]):\n                # if yes, then we are done\n                return \"Yes\"\n        else:\n            # else if the last element is even, we are not done\n            return \"No\"\n    else:\n        # if one element is negative, or no elements, the sequence is not possible\n        return \"No\"\n\n\nsolution(\"5\")\nsolution(\"3\")\nsolution(\"5\")\nsolution(\"1 0 1 5\")\nsolution(\"1 0 1 5\")\nsolution(\"1 0 1 5\")\nsolution(\"3 4 3 1\")\nsolution(\"3 4 3 1\")\nsolution(\"5 7 9 5\")\nsolution(\"5 7 9 5\")\nsolution(\"3 9 9 3\")\nsolution(\"3 9 9 3\")\nsolution(\"4 3 1\")\nsolution(\"4 3 1\")\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if (len(a) % 2 == 0) and (len(a) > 2) and (max(a) % 2 == 1):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    sequence = [int(i) for i in stdin.strip().split()]\n    if N % 2 == 0:\n        return \"No\"\n    odds_start = 0\n    odds_end = 1\n    while odds_end!= N:\n        odds_start += odds_end\n        odds_end += odds_end\n    odds_start -= 1\n    return \"Yes\" if odds_start in sequence else \"No\""
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    sequence: list = list(map(int, stdin.split()[1].split()))\n    odd_indexes: list = []\n    even_indexes: list = []\n    odd_indexes_n: int = 0\n    even_indexes_n: int = 0\n    for i in range(n):\n        if sequence[i] % 2 == 0:\n            even_indexes.append(i)\n            even_indexes_n += 1\n        else:\n            odd_indexes.append(i)\n            odd_indexes_n += 1\n    if even_indexes_n == 2 and odd_indexes_n == 1:\n        return \"Yes\"\n    if even_indexes_n % 2 == 1:\n        return \"No\"\n    if even_indexes_n == 1 and odd_indexes_n % 2 == 1:\n        return \"Yes\"\n    if odd_indexes_n % 2 == 0 and even_indexes_n % 2 == 0:\n        return \"Yes\"\n    if odd_indexes_n % 2 == 0 and even_indexes_n % 2 == 1:\n        return \"Yes\"\n    if odd_indexes_n % 2 == 1 and even_indexes_n % 2 == 0:\n        return \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = list(map(int, stdin.split()[1].split()))\n    odds = 0\n    for i in range(n):\n        if array[i] % 2!= 0:\n            odds += 1\n            if odds > 1:\n                return 'No'\n    if odds == 1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    odd = False\n    if n % 2!= 0:\n        odd = True\n    if n == 0:\n        return 'No'\n    for i in range(len(a)):\n        if not odd and a[i] % 2!= 0:\n            odd = True\n        if a[i] % 2 == 0:\n            odd = False\n    if odd:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, input().split()))\n\n    # print(sequence)\n    odd_numbers = []\n    for i in range(n):\n        if sequence[i] % 2!= 0:\n            odd_numbers.append(sequence[i])\n        else:\n            if len(odd_numbers) == 0:\n                return \"No\"\n\n    # print(odd_numbers)\n    if len(odd_numbers) == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    seq = list(map(int, stdin.strip().split()))\n    if N % 2 == 1:\n        return 'No'\n    odd = 0\n    for i in range(len(seq)):\n        if seq[i] % 2 == 1:\n            odd += 1\n        if odd == 2:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    sequence = stdin[1]\n    if n % 2 == 1:\n        return \"No\"\n    if len(sequence) == n:\n        if n % 2!= 0:\n            return \"Yes\"\n        for i in range(n):\n            if i % 2 == 0:\n                if sequence[i] % 2!= 0:\n                    return \"No\"\n            else:\n                if sequence[i] % 2 == 0:\n                    return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(' ')\n    nums = [int(num) for num in nums]\n    x_1 = nums[0]\n    y_1 = nums[1]\n    x_2 = nums[2]\n    y_2 = nums[3]\n    trees = [x_1, y_1, x_2, y_2]\n    if (x_1 > x_2) and (y_1 < y_2):\n        return str(y_1) + \" \" + str(x_2) + \" \" + str(y_2) + \" \" + str(x_1)\n    elif (x_1 > x_2) and (y_1 > y_2):\n        return str(y_2) + \" \" + str(x_1) + \" \" + str(y_1) + \" \" + str(x_2)\n    elif (x_2 > x_1) and (y_2 < y_1):\n        return str(y_2) + \" \" + str(x_1) + \" \" + str(y_1) + \" \" + str(x_2)\n    elif (x_2 > x_1) and (y_2 > y_1):\n        return str(y_1) + \" \" + str(x_2) + \" \" + str(y_2) + \" \" + str(x_1)\n    else:\n        return \"-\"\nprint(solution(input()))\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x, y = int(x), int(y)\n\n    if abs(x) + abs(y) >= 1000:\n        return -1\n    \n    x1 = x + (1000 - abs(x)) // 2\n    y1 = y + (1000 - abs(y)) // 2\n\n    if x1 < 0 or y1 < 0:\n        return -1\n\n    return str(x1) +'' + str(y1) +'' + str(x1 + 1) +'' + str(y1 + 1)\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([str(x_3), str(y_3), str(x_4), str(y_4)])"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    return str(min(x_1, x_2)) +'' + str(min(y_1, y_2)) +'' + str(max(x_1, x_2)) +'' + str(max(y_1, y_2)) if x_1 <= x_2 and y_1 <= y_2 else '-1'\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    if (x1 == x2 and y1 == y2):\n        return \"0 0 0 1\"\n    elif (x1 == x2 and y2 == y1):\n        return \"0 0 1 1\"\n    elif (x1 == x2 and y1 == y2):\n        return \"0 0 0 0\"\n    elif (x1 == x2 or y1 == y2 or x1 == x2 or y1 == y2):\n        return \"0 0 0 -1\"\n    if (x1 == x2 or y1 == y2 or x1 == x2 or y1 == y2):\n        return \"0 0 -1 1\"\n    if x1 == x2:\n        x = x2 - y1\n        y = y1\n        return str(x) + \" \" + str(y) + \" \" + str(x1) + \" \" + str(y1)\n    if y1 == y2:\n        x = x1\n        y = y2 - x1\n        return str(x) + \" \" + str(y) + \" \" + str(x1) + \" \" + str(y1)\n    if x1 == x2:\n        y = y2 - x1\n        x = x1\n        return str(x) + \" \" + str(y) + \" \" + str(x1) + \" \" + str(y1)\n    if y1 == y2:\n        x = x1\n        y = y1\n        return str(x) + \" \" + str(y) + \" \" + str(x1) + \" \" + str(y1)\n    if (x1 + y1) % 2 == 0 and (x2 + y2) % 2 == 0:\n        x = x1\n        y = y1\n        return str(x) + \" \" + str(y) + \" \" + str(x1) + \" \" + str(y1)\n    if (x1 + y1) % 2 == 0 and (x2 + y2) % 2!= 0:\n        x = x2\n        y = y2\n        return str(x) + \" \" + str(y) + \" \" + str(x2) + \" \" + str(y2)\n    if (x1 + y1) % 2!= 0 and (x2 + y2) % 2 == 0:\n        x = x2\n        y = y2\n        return str(x) + \" \" + str(y) + \" \" + str(x2) + \" \" + str(y2)\n    if (x1 + y1) % 2!= 0 and (x2 + y2) % 2!= 0:\n        x = (x1 + x2) // 2\n        y = (y1 + y2) // 2\n        return str(x) + \" \" + str(y) + \" \" + str(x1) + \" \" + str(y1)\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x1 = int(x1 / 2) * 2\n    y1 = int(y1 / 2) * 2\n    x2 = int(x2 / 2) * 2\n    y2 = int(y2 / 2) * 2\n    print(x1, y1, x2, y2)\n    if abs(x1 - x2) + abs(y1 - y2) == 0:\n        return \"0\"\n    else:\n        return str(abs(x1 - x2) + abs(y1 - y2))\n\nsolution(\"0 0 0 1\")\nsolution(\"0 0 1 1\")\nsolution(\"0 0 1 2\")\nsolution(\"0 0 2 1\")\nsolution(\"0 0 1 2\")\nsolution(\"0 1 2 2\")\nsolution(\"1 1 1 0\")\nsolution(\"1 0 2 2\")\nsolution(\"0 1 1 2\")\nsolution(\"0 1 1 0\")\nsolution(\"0 1 0 1\")\nsolution(\"1 1 1 1\")\nsolution(\"0 0 1 1\")\nsolution(\"2 1 2 1\")\nsolution(\"0 0 1 1\")\nsolution(\"0 0 1 1\")\nsolution(\"0 0 0 1\")\nsolution(\"0 0 0 0\")"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(x) for x in stdin.split()]\n    return X, Y, X+1, Y+1 if (X+Y) % 2 else X-1, Y-1 if (X+Y) % 2 else X+1\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    # if (x_1, y_1) == (x_2, y_2) or (x_1, y_1) == (x_2, y_2):\n    #     return \"0 0 0 1\"\n    # if (x_1, y_1) == (x_2, y_2):\n    #     return \"0 1 1 0\"\n    # if (x_1, y_1) == (x_2, y_2):\n    #     return \"0 1 1 0\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"0 1 1 0\"\n\n    # print(x_1, y_1, x_2, y_2)\n\n    # if ((x_1, y_1) == (x_2, y_2) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)) or ((x_1, y_1) == (x_2, y_2) and (x_1, y_1) == (x_4, y_4) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)) or ((x_1, y_1) == (x_2, y_2) and (x_1, y_1) == (x_4, y_4) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)):\n    #     print(x_1, y_1, x_2, y_2)\n    #     return \"0 0 0 1\"\n    # if ((x_1, y_1) == (x_2, y_2) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)) or ((x_1, y_1) == (x_2, y_2) and (x_1, y_1) == (x_4, y_4) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)):\n    #     print(x_1, y_1, x_2, y_2)\n    #     return \"0 0 0 1\"\n    # if ((x_1, y_1) == (x_2, y_2) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)) or ((x_1, y_1) == (x_2, y_2) and (x_1, y_1) == (x_4, y_4) and (x_2, y_2) == (x_3, y_3) and (x_3, y_3) == (x_4, y_4)):\n    #     print(x_1, y_1, x_2, y_2)\n    #     return \"0 0 0 1\"\n\n    # if (x_1, y_1) == (x_2, y_2) or (x_1, y_1) == (x_2, y_2):\n    #     return \"0 0 0 1\"\n    # if (x_1, y_1) == (x_2, y_2):\n    #     return \"0 0 0 1\"\n    # if (x_1, y_1) == (x_2, y_2):\n    #     return \"0 0 0 1\"\n\n    return str(x_1, y_1, x_2, y_2)\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dist(a: tuple, b: tuple) -> float:\n        return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\n    graph = {}\n    for i in range(4):\n        graph[(0, i)] = dist((0, i), (1, i))\n        graph[(1, i)] = dist((1, i), (2, i))\n        graph[(2, i)] = dist((2, i), (3, i))\n        graph[(3, i)] = dist((3, i), (0, i))\n\n    for i in range(4):\n        for j in range(i + 1, 4):\n            graph[(i, j)] = dist((i, j), (i + 1, j)) + dist((i, j), (i + 1, j + 1))\n\n    min_dist = 100000\n    for i in range(4):\n        for j in range(i + 1, 4):\n            for k in range(j + 1, 4):\n                min_dist = min(min_dist, graph[(i, j)])\n\n    if min_dist == 100000:\n        return -1\n\n    return str(min_dist)\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = [list(map(int, stdin.split()))]\n    n = int(data[0][0])\n    x1 = int(data[0][1])\n    y1 = int(data[0][2])\n    x2 = int(data[0][3])\n    y2 = int(data[0][4])\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if j!= x1 and j!= x2 and i!= y1 and i!= y2:\n                count += 1\n                print(count)\n    if count == 2:\n        return str(x1) +'' + str(y1) +'' + str(x2) +'' + str(y2)\n    else:\n        return -1\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    if n == 0:\n        return \"1000000006\"\n    if n == 1:\n        return \"1000000006\"\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[0])\n\n    x1 = 1\n    y1 = x\n    x2 = y\n    y2 = 1\n\n    for _ in range(n - 2):\n        x1 = x2\n        x2 = x1 + x1\n        y1 = y2\n        y2 = y1 + y1\n\n    return (x1 + y1) % 1000000007\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    dp = [[[0, 0], [1, 0], [0, 1]], [[0, 0], [1, 0], [0, 1]], [[1, 0], [1, 0], [0, 1]], [[0, 0], [0, 1], [1, 0]], [[0, 0], [1, 0], [0, 1]], [[0, 0], [0, 1], [1, 0]], [[1, 0], [0, 0], [0, 1]], [[1, 0], [0, 0], [1, 0]], [[1, 0], [1, 0], [0, 1]], [[0, 0], [0, 1], [1, 0]], [[0, 1], [1, 0], [0, 0]], [[0, 1], [1, 0], [1, 0]], [[0, 1], [0, 0], [1, 0]], [[0, 1], [0, 0], [0, 1]], [[0, 1], [0, 1], [1, 0]], [[1, 0], [0, 1], [0, 1]], [[1, 0], [0, 1], [1, 0]], [[1, 0], [1, 0], [0, 1]], [[0, 1], [1, 0], [1, 0]], [[0, 1], [1, 0], [1, 0]]]\n    return dp[n][a][b]\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1000000006\"\n    f1 = 1\n    f2 = 0\n    f3 = 1\n    for i in range(1, n):\n        f1 = f1 + f2\n        f2 = f1 + f3\n        f3 = f2\n    return str(f2 % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    f_2 = (x + y) % 10_000_000\n    f_1 = (x + f_2) % 10_000_000\n    f_3 = (y + f_2) % 10_000_000\n    return str(f_1 + f_3)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y)\n    # Your code here\n    return\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = int(stdin.strip().split(\" \")[0]), int(stdin.strip().split(\" \")[1])\n    curr_sum = num1\n    i = 1\n    while i < num2:\n        curr_sum = curr_sum + num1\n        curr_sum = curr_sum
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    f = [x, y]\n    for i in range(2, n):\n        f.append(f[i - 1] + f[i - 2])\n    return str(f[n - 1] % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = list(map(int, stdin.split()))\n    if x > y:\n        x, y = y, x\n    ans = 0\n    for i in range(1, n+1):\n        ans = ans + (x**i)%pow(10,9) + (y**i)%pow(10,9)\n    return str(ans)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([int(stdin) for i in range(1,n+1)])%1000000007)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = list(map(int, stdin.split()))\n    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        f = x + y\n        f1 = (x + y)\n        f2 = (x - y)\n        f3 = (x * y)\n        f4 = (x / y)\n        f5 = (x + y) % (10 ** 9 + 7)\n        f6 = (x - y) % (10 ** 9 + 7)\n        f7 = (x * y) % (10 ** 9 + 7)\n        f8 = (x / y) % (10 ** 9 + 7)\n        return f, f1, f2, f3, f4, f5, f6, f7, f8\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1].split(\" \")\n    a = list(map(int, a))\n    total = 0\n    for i in range(1, len(a)):\n        total += a[i - 1]\n    print(total)\n    if total == 0:\n        return \"NO\"\n    l = 1\n    r = 1\n    count = 0\n    while True:\n        if a[l - 1] + a[r - 1] <= 0:\n            count += 1\n            l += 1\n            r += 1\n        else:\n            break\n    print(l, r)\n    if count == 0:\n        return \"NO\"\n    while count < n:\n        while True:\n            if a[l - 1] + a[r - 1] <= 0:\n                count += 1\n                l += 1\n                r += 1\n            else:\n                break\n        if count >= n:\n            break\n        while True:\n            if a[l - 1] + a[r - 1] <= 0:\n                count += 1\n                l += 1\n                r += 1\n            else:\n                break\n        if count >= n:\n            break\n    if count == n:\n        print(l, r)\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    s = sum(int(i) for i in arr)\n    if s == 0:\n        return 'NO'\n    res = 0\n    l = 0\n    for i in range(n):\n        r = l + 1\n        sum_ = sum(int(arr[i]) for i in range(l, r))\n        if sum_ == 0:\n            res += 1\n            l = r\n    return 'YES' if res == n else 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split()))\n    dp = {0: 1}\n    def binary_search(arr, left, right):\n        if right < left:\n            return 0\n        m = (left + right) // 2\n        if arr[m] == 0:\n            return 1\n        elif arr[m] > 0:\n            return binary_search(arr, left, m-1) + binary_search(arr, m+1, right)\n    \n    for i in a:\n        if i == 0:\n            continue\n        if i > 0:\n            dp[i] = 1\n            continue\n        if i < 0:\n            if dp.get(abs(i)) is None:\n                dp[abs(i)] = 0\n            else:\n                dp[abs(i)] = 1\n    sums = [0] * n\n    for i in range(n):\n        sums[i] = 0\n        for j in range(i):\n            sums[i] += sums[j]\n            sums[i] += a[i] - a[j]\n        if sums[i] == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    #arr = [int(i) for i in stdin.split()]\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    if sum(arr) == 0:\n        return \"NO\"\n    elif sum(arr) % 2!= 0:\n        return \"NO\"\n    else:\n        s = sum(arr)//2\n        for i in range(len(arr)):\n            if arr[i] <= s:\n                continue\n            else:\n                break\n        l = i-1\n        r = i\n        while l >= 0 and r < len(arr):\n            if arr[l] + arr[r] == s:\n                return \"YES\"\n            elif arr[l] + arr[r] > s:\n                r += 1\n            else:\n                l -= 1\n        return \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n log(n))\n    space complexity: O(n)\n    '''\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(n):\n        for j in range(i + 1):\n            if j == 0:\n                if arr[i] + dp[i - 1][j]!= 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n            elif j == i:\n                if arr[i] + dp[i - 1][j - 1]!= 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n            else:\n                if arr[i] + dp[i - 1][j] + dp[i - 1][j - 1]!= 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n\n    for i in range(1, n + 1):\n        if dp[n][i]:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    if A[0] > 0 or A[-1] < 0:\n        return \"NO\"\n    if any(abs(a) > 10**3 for a in A):\n        return \"NO\"\n    parts = 0\n    for i in range(1, n):\n        if A[i] == 0:\n            continue\n        if A[i] > A[i-1]:\n            continue\n        parts += 1\n        if parts == 1:\n            continue\n        if A[i-1] == 0:\n            continue\n        if A[i-1] > 0 and A[i] == 0:\n            continue\n        if A[i-1] < 0 and A[i] == 0:\n            continue\n        if abs(A[i-1]) <= A[i] and abs(A[i]) <= abs(A[i+1]):\n            continue\n        parts += 1\n        if parts > n - i:\n            return \"NO\"\n    print(parts)\n    return \"YES\""
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if sum(arr) < 0:\n        return \"NO\"\n    ans = \"YES\"\n    max_sum = sum(arr)\n    if max_sum == 0:\n        return ans\n    if max_sum < 0:\n        return \"NO\"\n    \n    for i in range(1, len(arr)):\n        if sum(arr[:i]) + sum(arr[i:]) < 0:\n            return ans\n        if sum(arr[:i]) + sum(arr[i:]) > 0:\n            return \"NO\"\n    return ans"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        s = stdin.split()\n        l = int(s[0])\n        r = int(s[1])\n        a = list(map(int, s[2]))\n        if sum(a) == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(l,r)\n            for i in range(l,r):\n                print(i,i+1)\nsolution(input())\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_ok(t: int, n: int, a: List[int], b: List[int]) -> bool:\n        for i in range(1, n - t):\n            if sum(a[i:i + t])!= sum(b[i:i + t]):\n                return False\n        return True\n\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = a[0]\n    r = a[-1]\n    while r - l > 1:\n        m = (l + r) // 2\n        if is_ok(m, n, a, a):\n            l = m\n        else:\n            r = m\n    if is_ok(r, n, a, a):\n        print('YES')\n        print(l, r)\n    else:\n        print('NO')\n    return\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        a = int(stdin.strip())\n        if not (a == 0 or any(x == 0 for x in range(1, a + 1))):\n            # (1 <= a <= 100)\n            # (a_i >= -10^3 <= a_i <= 10^3)\n            print('YES')\n            # return\n        a_1, a_2 = map(int, stdin.strip().split())\n        sum_of_elements = a_1 + a_2\n        for i in range(2, a):\n            sum_of_elements -= a_i\n            if sum_of_elements < 0:\n                # (a_i >= -10^3 <= a_i <= 10^3)\n                print('NO')\n                # return\n            print(i, end=' ')\n        print()\n\n\nsolution(input())\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    # print(n, m, k)\n    # if n <= k <= m:\n    #     return str(n * 1000000 - n * (n - 1) // 2)\n    # else:\n    #     return str(n * 1000000 - n * (n - 1) // 2 + m * 1000000)\n    # note: very slow. \n    # first, we need to determine the number of consecutive correct answers\n    if n <= k <= m:\n        correct_answers = m\n    else:\n        correct_answers = m - k + 1\n    # print(correct_answers)\n    # then we calculate the total score\n    total_score = n * 1000000 - correct_answers * (correct_answers - 1) // 2\n    # print(total_score)\n    # now we divide the total score by 1000000009\n    return str(total_score // 1000000009)\n\nsolution(input())\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(int((n-1)*m*k+k*m+1)%1000000009)"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,m,k=map(int,stdin.split())\n    answer=k*((n-m+1)*(n+1-k)/2)%1000000009\n    return str(answer)"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #first read the data\n    n,m,k = stdin.split(\" \")\n    n = int(n)\n    m = int(m)\n    k = int(k)\n\n    #then compute the number to be divided by 1000000009 and check if that number is greater than or equal to k\n    if n>=k:\n        return str(n%1000000009)\n    else:\n        return \"0\"\n\n\n\nsolution(input())"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = (int(x) for x in stdin.split())\n    return str((m-k) * (n-k) * (n-m) // 2 + min(n * m, (n + m) * k))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(min(n*(m//2) + k, n*m, k*m + n - k, n*m - k, n*m - n + k, n*m + k + (n+k)//2))"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    return str(1000000009 - (n - m + k) % (1000000009))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > m:\n        k -= 1\n        m = n\n        n = m\n    print(n + k - 1)\n    return\nsolution(\"5 3 2\")\nsolution(\"5 4 2\")\nsolution(\"5 3 2\")\nsolution(\"1000000000000\")\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3 2''')\n    3\n    >>> solution('''5 4 2''')\n    6\n    \"\"\"\n    n, m, k = list(map(int, stdin.split()))\n    if k < n:\n        return \"{}\".format(n - k)\n    elif k == n:\n        return \"{}\".format(m)\n    else:\n        return \"{}\".format(m * k)\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    print(k*(n+1-m)*n//2-k)\nsolution(input())\n\n\"\"\"\nimport math\n\nn, m, k = map(int, input().split())\n\nprint(math.floor(math.log((n+1-m)*n/2, 1000000009) + k*2))\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i]!= '0':\n            count += 1\n        if count > 1:\n            return \"NO\"\n    if count == 1:\n        return \"YES\"\n    return stdin"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 8 == 0:\n        return 'YES'\n    \n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n        \n    dic = {}\n    for i in range(len(digits)):\n        if digits[i] not in dic:\n            dic[digits[i]] = 1\n        else:\n            dic[digits[i]] += 1\n        if dic[digits[i]] > 1:\n            return 'NO'\n    \n    for i in range(1, 10):\n        if i not in dic:\n            return 'NO'\n    \n    return 'YES'"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes input from stdin and validates the string.\n\n    Args:\n        stdin: input from stdin.\n\n    Returns:\n        Returns a string representing the number n after removing digits from n.\n    \"\"\"\n    \n    n = stdin\n\n    if n[0] == '0' and len(n)!= 1:\n        return 'NO'\n    \n    while '0' in n:\n        n = n.replace('0','')\n    \n    return n\n\n    \n    \nsolution(input())"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n == 0:\n        return 'NO'\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) == 0:\n            return 'NO'\n    for i in range(len(n)):\n        if int(n[i])!= 0:\n            for j in range(i + 1, len(n)):\n                if int(n[i]) == int(n[j]):\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits_list = list(stdin)\n\n    if(len(digits_list)==1):\n        print(\"NO\")\n        return\n\n    for i in range(len(digits_list)):\n        temp = str(digits_list[i])\n        if(len(temp)>1):\n            if(int(temp) % 8!= 0):\n                digits_list[i] = str(int(temp)-int(temp)%8)\n                if(int(temp)-int(temp)%8 == 0):\n                    print(\"NO\")\n                    return\n\n    print(\"YES\")\n    print(\"\".join(digits_list))\nsolution(input())\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1133')\n    NO\n    >>> solution('12345')\n    YES\n    >>> solution('11112222')\n    NO\n    >>> solution('123456789101112233')\n    YES\n    '''\n    digits = list(map(int, list(stdin)))\n    for digit in range(0, 101):\n        new_digits = []\n        for i in digits:\n            if i == digit:\n                continue\n            else:\n                new_digits.append(i)\n        if (digit % 8 == 0 or len(new_digits) < digit) and len(new_digits) > 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while len(str(n)) > 100:\n        n = n // 10\n    while n >= 0 and len(str(n)) < 100:\n        if (n * 10) % 8 == 0:\n            return \"YES\"\n        n = n - 1\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin\n    st = st.strip()\n    st = st.replace(' ', '')\n    st = st.replace('0', '')\n    st = st.replace('1', '')\n    st = st.replace('2', '')\n    st = st.replace('3', '')\n    st = st.replace('4', '')\n    st = st.replace('5', '')\n    st = st.replace('6', '')\n    st = st.replace('7', '')\n    st = st.replace('8', '')\n    st = st.replace('9', '')\n    st = st.replace('.', '')\n    if len(st) == 1:\n        return 'YES'\n    else:\n        if len(st) % 8 == 0:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    for i in range(len(number)):\n        if number[i] == \"0\":\n            number = number[i:]\n            break\n    if len(number) == 100 and \"0\" not in number:\n        digits = int(number)\n        while digits > 0:\n            if digits % 8 == 0:\n                return \"NO\"\n            digits //= 8\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        # Your code here\n        return 'NO'\n    except:\n        pass"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin.pop(0).split())\n    floors = []\n    for i in range(n):\n        floors.append(tuple(map(int, stdin.pop(0).split())))\n    min_floor = 1\n    max_floor = max([f for k, f in floors])\n    if max_floor - min_floor < m:\n        return \"-1\"\n    memo = {}\n    def floor_number(k, m):\n        if k == m:\n            return k\n        if (k, m) in memo:\n            return memo[(k, m)]\n        min_floor = max(min_floor, k)\n        for i in range(min_floor, max_floor + 1):\n            if i not in memo:\n                memo[i] = max(floor_number(k + 1, m), floor_number(k, m - i + k))\n        return memo[i]\n    return floor_number(0, m)\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # initiate m list\n    memory = []\n\n    for i in range(m):\n        k, f = map(int, input().split())\n        memory.append((k, f))\n\n    # initiate floor_counter dictionary\n    floor_counter = {}\n\n    # initialize floor_counter dictionary\n    for i in range(1, n + 1):\n        floor_counter[i] = 0\n\n    # iterate through memory\n    for i in range(m):\n        # check if the floor is in dictionary\n        if memory[i][0] in floor_counter:\n            # if yes increment count\n            floor_counter[memory[i][0]] += 1\n        else:\n            # if not add the first value to the dictionary\n            floor_counter[memory[i][0]] = 1\n    # iterate through keys\n    for i in floor_counter:\n        # check if the count is greater than 1\n        if floor_counter[i] > 1:\n            # return False\n            return \"Not possible to uniquely reconstruct the building\"\n    # iterate through keys\n    for i in floor_counter:\n        # check if the count is equal to 2\n        if floor_counter[i] == 2:\n            # return the floor\n            return str(i)\n    # if none of the above is true\n    return \"Not possible to uniquely reconstruct the building\""
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    floor = [[int(i) for i in stdin.split()] for _ in range(m)]\n    for a, b in floor:\n        if a > b:\n            return '-1'\n    floor.sort()\n    # floor = sorted(floor)\n    floor = sorted(floor, key=lambda x: x[0])\n    i = 0\n    while i < len(floor):\n        if floor[i][0]!= floor[i + 1][0]:\n            return str(floor[i][1])\n        i += 1\n    return str(floor[-1][1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(int(stdin.split()[0])):\n        for m in range(int(stdin.split()[1])):\n            k,f=map(int,stdin.split()[2*m].split(' '))\n            if k>=k+f:\n                if k==f:\n                    print(k,'{}'.format(f))\n                else:\n                    print(k,'{}-{}'.format(k+f-1,f))\n            else:\n                if k==1:\n                    print('-1')\n                else:\n                    print(k-f,'{}-{}'.format(k,f+k-1))\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mem = [list(map(int, stdin.split())) for i in range(m)]\n    for i in range(m):\n        mem[i][0] -= 1\n    for i in range(m):\n        mem[i][1] -= 1\n    flats = set()\n    for i in range(m):\n        flats.add(mem[i][0])\n        flats.add(mem[i][1])\n    if len(flats) == 1:\n        return str(min(flats))\n    elif len(flats) == 2:\n        if min(flats) == max(flats):\n            return str(min(flats) + 1)\n        else:\n            return str(-1)\n    elif len(flats) == 3:\n        if min(flats) == max(flats):\n            return str(min(flats) + 2)\n        else:\n            return str(-1)\n    else:\n        return str(-1)\n\nstdin = \"\"\"8 4\n3 1\n6 2\n5 2\n2 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floors = {i: [] for i in range(1, n+1)}\n\n    for _ in range(m):\n        k, f = map(int, input().split())\n        floors[k].append(f)\n\n    for i in range(1, n+1):\n        if len(floors[i]) > 1:\n            print(i)\n            return\n    print('-1')\n\nsolution(input())\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    polycarp_memory = []\n    for _ in range(m):\n        polycarp_memory.append(tuple(map(int, stdin.split())))\n    floor_mapping = {}\n    for floor_number, flat_number in polycarp_memory:\n        if floor_number in floor_mapping:\n            floor_mapping[floor_number].append(flat_number)\n        else:\n            floor_mapping[floor_number] = [flat_number]\n    \n    for floor_number, flat_numbers in floor_mapping.items():\n        #print(floor_number, flat_numbers)\n        if len(set(flat_numbers)) == 1:\n            #print(floor_number)\n            return str(floor_number)\n    return '-1'\n\nsolution(input())\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    floor_index = {num: i for i, num in enumerate(range(1, n + 1), 1)}\n    memory = {}\n    for i in range(m):\n        k, f = map(int, stdin.split())\n        memory[k] = f\n        floor_index[k] = f\n    for i in range(1, n + 1):\n        if i not in memory:\n            if max(floor_index.values()) < i:\n                print(-1)\n                return\n            else:\n                min_floor = min(floor_index.values())\n                floor_index[i] = min_floor\n    print(min_floor)\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = ''\n    for i in range(m):\n        _, num = stdin.split()\n        if num.isdigit():\n            floor = int(num)\n            if floor - 1 <= n <= floor and len(set(map(int, stdin.split()))) == m:\n                res = floor\n                break\n    return str(res) if res else '-1'\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    floor = []\n    for _ in range(m):\n        floor.append(list(map(int, stdin.split())))\n    floor_to_set = set()\n    # print(floor)\n    for f, c in floor:\n        floor_to_set.add(f)\n    # print(floor_to_set)\n    min_floor = 1\n    max_floor = max(floor_to_set)\n    return str(max_floor) if min_floor <= max_floor else \"-\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin[0])\n    squares = stdin[1:n+1]\n    squares = list(squares)\n    board = []\n    for i in range(n):\n        board.append([])\n        for j in range(n):\n            board[i].append(squares[i*n+j])\n    hors = {'0':'0', 'X':'0', '1':'1'}\n    def h_fwd(board, f_row, f_col, r, c):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= '.':\n            return False\n        if f_col == c:\n            board[r][c] = '1'\n            if r == r:\n                board[r][c] = '0'\n            if c == c:\n                board[r][c] = '0'\n        else:\n            board[r][c] = 'X'\n        h_fwd(board, f_row, f_col + 1, r - 1, c)\n        h_fwd(board, f_row, f_col + 1, r + 1, c)\n        h_fwd(board, f_row, f_col + 1, r, c - 1)\n        h_fwd(board, f_row, f_col + 1, r, c + 1)\n        if board[r][c] == '0':\n            board[r][c] = '.'\n        return True\n    def h_back(board, f_row, f_col, r, c):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= '.':\n            return False\n        if f_col == c:\n            board[r][c] = '1'\n            if r == r:\n                board[r][c] = '0'\n            if c == c:\n                board[r][c] = '0'\n        else:\n            board[r][c] = 'X'\n        h_back(board, f_row, f_col - 1, r + 1, c)\n        h_back(board, f_row, f_col - 1, r - 1, c)\n        h_back(board, f_row, f_col - 1, r, c + 1)\n        h_back(board, f_row, f_col - 1, r, c - 1)\n        if board[r][c] == '0':\n            board[r][c] = '.'\n        return True\n    n_max = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                h_fwd(board, i, j, i, j)\n                if board[i][j] == '1':\n                    h_back(board, i, j, i, j)\n                n_max = max(n_max, len(board))\n    return n_max\n    \nsolution(input())\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read in the board string\n    board = stdin.strip()\n\n    # define the empty board\n    empty = '0'\n\n    # define the set of squares occupied\n    occupied = set()\n\n    # define a list of pawns\n    pawns = []\n\n    # for each square on the board\n    for x in range(1,len(board) -1):\n        # print(\"x is: \" + str(x))\n        for y in range(1,len(board) -1):\n            # print(\"y is: \" + str(y))\n\n            # check if it's empty\n            if board[x][y] == empty:\n                # if it's empty, append the square to the occupied set\n                occupied.add((x, y))\n            # otherwise, it's occupied\n            elif board[x][y] == occupied:\n                # if it's occupied and there are no pawns in the way, append the square to the occupied set\n                if len(occupied) == 0:\n                    occupied.add((x, y))\n            # otherwise, it's occupied and it's occupied with pawns\n            elif board[x][y] == pawns:\n                # if it's occupied and there are no pawns in the way, append the square to the occupied set\n                if len(occupied) == 0:\n                    occupied.add((x, y))\n                # else, append the square to the occupied set if there's a pawn in the way\n                else:\n                    occupied.add((x, y))\n                    occupied.add((x, y - 1))\n                    occupied.add((x, y - 2))\n                    occupied.add((x, y - 3))\n                    occupied.add((x, y + 1))\n                    occupied.add((x, y + 2))\n                    occupied.add((x, y + 3))\n                    occupied.add((x + 1, y))\n                    occupied.add((x + 2, y))\n                    occupied.add((x + 3, y))\n                    occupied.add((x - 1, y))\n                    occupied.add((x - 2, y))\n                    occupied.add((x - 3, y))\n                    # print(\"new occupied is: \" + str(occupied))\n                    # print(\"x is: \" + str(x))\n                    # print(\"y is: \" + str(y))\n                    # print(\"x-1 is: \" + str(x-1))\n                    # print(\"y-1 is: \" + str(y-1))\n                    # print(\"x-2 is: \" + str(x-2))\n                    # print(\"y-2 is: \" + str(y-2))\n                    # print(\"x-3 is: \" + str(x-3))\n                    # print(\"y-3 is: \" + str(y-3))\n\n\n\n        # for each square on the board\n        for y in range(1,len(board) -1):\n            # print(\"y is: \" + str(y))\n            # print(\"x is: \" + str(x))\n            if board[x][y] == empty:\n                # if it's empty, append the square to the occupied set\n                occupied.add((x, y))\n            elif board[x][y] == pawns:\n                # if it's occupied and there are no pawns in the way, append the square to the occupied set\n                if len(occupied) == 0:\n                    occupied.add((x, y))\n                # else, append the square to the occupied set if there's a pawn in the way\n                else:\n                    occupied.add((x, y))\n                    occupied.add((x - 1, y))\n                    occupied.add((x - 2, y))\n                    occupied.add((x - 3, y))\n                    occupied.add((x + 1, y))\n                    occupied.add((x + 2, y))\n                    occupied.add((x + 3, y))\n                    occupied.add((x - 1, y - 1))\n                    occupied.add((x - 1, y - 2))\n                    occupied.add((x - 1, y - 3))\n                    occupied.add((x + 1, y - 1))\n                    occupied.add((x + 1, y - 2))\n                    occupied.add((x + 1, y - 3))\n                    # print(\"new occupied is: \" + str(occupied))\n                    # print(\"x is: \" + str(x))\n                    # print(\"y is: \" + str(y))\n                    # print(\"x-1 is: \" + str(x-1))\n                    # print(\"y-1 is: \" + str(y-1))\n                    # print(\"x-2 is: \" + str(x-2))\n                    # print(\"y-2 is: \" + str(y-2))\n                    # print(\"x-3 is: \" + str(x-3))\n                    # print(\"y-3 is: \" + str(y-3))\n\n    print(len(occupied))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    num_rows = len(board)\n    num_cols = len(board[0])\n    # Dict for possible attack squares (white pawns)\n    attack_squares = {i : (i - 1) % num_rows, (i - 1) % num_cols, i + 1 % num_rows, i + 1 % num_cols}\n    # Dict for possible attack squares (black pawns)\n    attack_squares.update({i : (i - 2) % num_rows, (i - 2) % num_cols, i + 2 % num_rows, i + 2 % num_cols})\n    white_pawns_count = 0\n    black_pawns_count = 0\n    for row_i, row in enumerate(board):\n        for col_i, char in enumerate(row):\n            if char == 'X':\n                white_pawns_count += 1\n            if char == '0':\n                black_pawns_count += 1\n    white_bishwock_count = 0\n    black_bishwock_count = 0\n    for row_i, row in enumerate(board):\n        for col_i, char in enumerate(row):\n            if char == 'X':\n                white_bishwock_count += 1\n            if char == '0':\n                black_bishwock_count += 1\n    white_pawns_count -= 2\n    black_pawns_count -= 2\n    # Determining attack squares\n    for row_i, row in enumerate(board):\n        for col_i, char in enumerate(row):\n            if char == 'X':\n                if white_pawns_count == 0:\n                    if (row_i - 1) % num_rows!= col_i:\n                        attack_squares.pop((row_i - 1) % num_rows, None)\n                else:\n                    if (row_i - 2) % num_rows!= col_i:\n                        attack_squares.pop((row_i - 2) % num_rows, None)\n                if (row_i + 1) % num_rows!= col_i:\n                    attack_squares.pop((row_i + 1) % num_rows, None)\n                if (row_i + 2) % num_rows!= col_i:\n                    attack_squares.pop((row_i + 2) % num_rows, None)\n                if black_pawns_count == 0:\n                    if (row_i - 1) % num_rows!= col_i:\n                        attack_squares.pop((row_i - 1) % num_rows, None)\n                else:\n                    if (row_i - 2) % num_rows!= col_i:\n                        attack_squares.pop((row_i - 2) % num_rows, None)\n                if (row_i + 1) % num_rows!= col_i:\n                    attack_squares.pop((row_i + 1) % num_rows, None)\n                if (row_i + 2) % num_rows!= col_i:\n                    attack_squares.pop((row_i + 2) % num_rows, None)\n    attack_squares = dict(sorted(attack_squares.items(), key=lambda x: x[0]))\n    # Determining bishwock counts\n    for row_i, row in enumerate(board):\n        for col_i, char in enumerate(row):\n            if char == 'X':\n                if black_bishwock_count == 0:\n                    if (row_i - 1) % num_rows!= col_i:\n                        attack_squares.pop((row_i - 1) % num_rows, None)\n                else:\n                    if (row_i - 2) % num_rows!= col_i:\n                        attack_squares.pop((row_i - 2) % num_rows, None)\n                if (row_i + 1) % num_rows!= col_i:\n                    attack_squares.pop((row_i + 1) % num_rows, None)\n                if (row_i + 2) % num_rows!= col_i:\n                    attack_squares.pop((row_i + 2) % num_rows, None)\n    attack_squares = dict(sorted(attack_squares.items(), key=lambda x: x[0]))\n    # Black pawns can't attack on the same square\n    if attack_squares.keys()[0] == attack_squares.keys()[1] or attack_squares.keys()[1] == attack_squares.keys()[2] or attack_squares.keys()[2] == attack_squares.keys()[3]:\n        return 0\n    # Black pawns can't attack on the same square\n    if attack_squares.keys()[1] == attack_squares.keys()[2] or attack_squares.keys()[2] == attack_squares.keys()[3] or attack_squares.keys()[3] == attack_squares.keys()[0]:\n        return 0\n    # Assigning black pawns attacks\n    attack_squares.pop(attack_squares.keys()[0])\n    attack_squares.pop(attack_squares.keys()[0])\n    attack_squares.pop(attack_squares.keys()[0])\n    # Setting up an empty board\n    board_out = []\n    for i in range(num_rows):\n        board_out.append([])\n        for j in range(num_cols):\n            board_out[i].append('.')\n    for row_i, row in enumerate(board):\n        for col_i, char in enumerate(row):\n            if char == 'X':\n                board_out[row_i][col_i] = '0'\n    # Finding the bishwock positions\n    for col_i in attack_squares.values():\n        board_out[col_i // num_rows][col_i % num_rows] = 'X'\n    # Printing the new board\n    board_out = '\\n'.join([''.join(row) for row in board_out])\n    print(board_out)\n    # Returning the number of bishwocks\n    return white_bishwock_count + black_bishwock_count\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin.split(\"0\"))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.splitlines()\n    x, y = 0, 0\n    n = int(board[0])\n    count = 0\n    while (x <= n - 1 and y <= n - 1):\n        if (board[y][x]!= \"0\"):\n            count += 1\n            x += 1\n            y += 1\n            continue\n\n        if (board[y][x] == \"0\"):\n            if (x + 1 <= n - 1):\n                x += 2\n                continue\n            elif (y - 1 >= 0):\n                y -= 2\n                continue\n            else:\n                break\n    print(count)\n    return count\n\nsolution(\n\"00\\n00\\n\"\n)\n\n---Input Sample---\n\n01\n01\n\n---Output Sample---\n\n2"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  board = stdin.split()\n  # for each of the rows, check if all the pieces are on the right\n  # if so, check all of the pieces on the row\n  return \"\"\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    count = 0\n    for i in range(len(board) - 1, -1, -1):\n        for j in range(len(board[0])):\n            if board[i][j] == \"X\":\n                if i!= 0 and board[i - 1][j] == \"X\":\n                    count += 1\n                if j!= 0 and board[i][j - 1] == \"X\":\n                    count += 1\n    return str(count)\nsolution(\"0X0X0\")\nsolution(\"0XX0\")\nsolution(\"X0X0\")\nsolution(\"X0X0X0\")\nsolution(\"00X00X0XXX0\")\nsolution(\"00X00X0XXX0XX0\")\nsolution(\"0X0X0\")"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    n = int(board[0])\n    #m = int(board[1])\n    start_1 = board[1]\n    start_2 = board[2]\n    n = n\n    board = [[start_1, start_2]]\n    a = set([(x, y) for x in range(n) for y in range(n)])\n    b = set([(x, y) for x in range(n) for y in range(n)])\n    res = 0\n    #print(a)\n    #print(b)\n    while True:\n        #print(res)\n        #print(a)\n        #print(b)\n        #print(\"\\n\\n\\n\")\n        if len(a) == 0 or len(b) == 0:\n            break\n        for i in range(min(len(a), len(b))):\n            #print(\"\\n\\n\\n\\n\")\n            #print(\"a\")\n            #print(a)\n            #print(\"b\")\n            #print(b)\n            #print(res)\n            #print(len(a))\n            if (a-b).__len__() == 0:\n                #print(a-b)\n                break\n            #print(a-b)\n            #print(len(a-b))\n            tmp = (a - b)\n            x = tmp.pop()\n            a.discard(x)\n            b.discard(x)\n            #print(\"\\n\\n\\n\\n\")\n            #print(tmp)\n            #print(a)\n            #print(b)\n            if (x[0] + 1) < n and (x[0] + 1) > -1:\n                if board[x[0] + 1][x[1]] == 'X':\n                    board[x[0] + 1][x[1]] = \"O\"\n                    b.add(x)\n            if (x[0] - 1) < n and (x[0] - 1) > -1:\n                if board[x[0] - 1][x[1]] == 'X':\n                    board[x[0] - 1][x[1]] = \"O\"\n                    b.add(x)\n            if (x[1] + 1) < n and (x[1] + 1) > -1:\n                if board[x[0]][x[1] + 1] == 'X':\n                    board[x[0]][x[1] + 1] = \"O\"\n                    b.add(x)\n            if (x[1] - 1) < n and (x[1] - 1) > -1:\n                if board[x[0]][x[1] - 1] == 'X':\n                    board[x[0]][x[1] - 1] = \"O\"\n                    b.add(x)\n            if (x[0] + 1) < n and (x[1] + 1) < n and (x[0] + 1) > -1 and (x[1] + 1) > -1:\n                if board[x[0] + 1][x[1] + 1] == 'X':\n                    board[x[0] + 1][x[1] + 1] = \"O\"\n                    b.add(x)\n            if (x[0] - 1) < n and (x[1] - 1) < n and (x[0] - 1) > -1 and (x[1] - 1) > -1:\n                if board[x[0] - 1][x[1] - 1] == 'X':\n                    board[x[0] - 1][x[1] - 1] = \"O\"\n                    b.add(x)\n            if (x[0] - 1) < n and (x[1] + 1) < n and (x[0] - 1) > -1 and (x[1] + 1) > -1:\n                if board[x[0] - 1][x[1] + 1] == 'X':\n                    board[x[0] - 1][x[1] + 1] = \"O\"\n                    b.add(x)\n            if (x[0] + 1) < n and (x[1] - 1) < n and (x[0] + 1) > -1 and (x[1] - 1) > -1:\n                if board[x[0] + 1][x[1] - 1] == 'X':\n                    board[x[0] + 1][x[1] - 1] = \"O\"\n                    b.add(x)\n        res = res + 1\n        #print(a)\n        #print(b)\n        #print(\"\\n\\n\\n\")\n        #print(\"b\")\n        #print(len(b))\n        #print(res)\n    print(len(a))\n    print(len(b))\n    print(a-b)\n    print(len(a-b))\n    print(len(b-a))\n    return len(a-b)\nsolution(stdin)\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    n = int(l[0])\n    m = int(l[1])\n    board = []\n    for i in range(n):\n        board.append(l[i+2])\n    ans = 0\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == \"X\":\n                continue\n            elif i == 0 or board[i-1] == \"X\" or board[i+1] == \"X\":\n                if i == 0:\n                    if board[i+1] == \"0\":\n                        ans = ans + 1\n                elif i == len(board)-1:\n                    if board[i-1] == \"0\":\n                        ans = ans + 1\n                else:\n                    if board[i+1] == \"0\" or board[i-1] == \"0\":\n                        ans = ans + 1\n            elif j == 0 or board[j] == \"X\" or board[j+1] == \"X\":\n                if j == 0:\n                    if board[j+1] == \"0\":\n                        ans = ans + 1\n                elif j == len(board)-1:\n                    if board[j-1] == \"0\":\n                        ans = ans + 1\n                else:\n                    if board[j+1] == \"0\" or board[j-1] == \"0\":\n                        ans = ans + 1\n    return str(ans)"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    h = len(board)\n    w = len(board[0])\n    cnt = 0\n    for i in range(h):\n        for j in range(w):\n            if board[i][j]!= '0':\n                if i > 0 and board[i-1][j] == '0':\n                    cnt += 1\n                if i < h - 1 and board[i+1][j] == '0':\n                    cnt += 1\n                if j > 0 and board[i][j-1] == '0':\n                    cnt += 1\n                if j < w - 1 and board[i][j+1] == '0':\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(input())\ns = input()\n\ncount_uppercase = 0\ncount_lowercase = 0\n\nfor i in range(n):\n    if s[i].islower():\n        count_lowercase += 1\n    elif s[i].isupper():\n        count_uppercase += 1"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn = int(input())\ns = stdin\nli = list(input())\nli = list(map(int, li))\nres = set()\nfor i in range(n):\n    res.add(i)\n\na = set(li)\nres = res.difference(a)\nprint(len(res))"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[1]\n    n = int(s.split()[0])\n    s = s.split()[1]\n    a = sorted(list(set([i.lower() for i in s])))\n    count = 0\n    if len(a) <= 3:\n        return str(0)\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            count += 1\n    return str(count)\nprint(solution(input()))"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    B = {x for x in range(len(A[1])) if A[1][x] == A[0][x]}\n    return str(len(B))\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    strlen = len(s)\n    count = 0\n    current = []\n    while s:\n        c = s[0]\n        if ord(c) < 97 or ord(c) > 122:\n            count += 1\n            if current:\n                current.sort()\n                if current not in table:\n                    table[current] = count\n                else:\n                    table[current] = max(table[current], count)\n            current = []\n        current.append(0)\n        current.append(strlen)\n        s = s[1:]\n    current.sort()\n    if current not in table:\n        table[current] = count\n    else:\n        table[current] = max(table[current], count)\n    for i in range(len(table)):\n        if table[i] > 1:\n            return str(table[i])\n    return \"0\""
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    if len(s) < 3:\n        return 0\n    for i in range(len(s)):\n        if s.count(s[i]) > 1:\n            return 0\n    positions = []\n    for i in range(len(s)):\n        if s[i] == s[i].lower():\n            positions.append(i)\n    \n    longest = 0\n    for j in range(len(positions) - 1):\n        if positions[j + 1] - positions[j] > longest:\n            longest = positions[j + 1] - positions[j]\n    return longest\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    letter_count = {\n        \"A\": 0,\n        \"B\": 0,\n        \"C\": 0\n    }\n\n    for char in s:\n        if char.isalpha():\n            letter_count[char.lower()] += 1\n    \n    pretty_set = []\n    for k, v in letter_count.items():\n        if v > 0:\n            pretty_set.append(k)\n    \n    return str(len(pretty_set))\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    max_score = 0\n    string = stdin.strip()\n    for i in range(1, len(string) - 1):\n        if string[i].islower():\n            if string[i - 1].islower():\n                if string[i + 1].islower():\n                    score = i - 1\n                    if score > max_score:\n                        max_score = score\n    return max_score\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n    aAbBaAbBa\n    ''')\n    1\n    >>> solution('''5\n    zACaAbbaazzC\n    ''')\n    3\n    >>> solution('''5\n    A\n    ''')\n    0\n    >>> solution('''4\n    aaaaBaabAbA\n    ''')\n    2\n    \"\"\"\n    dictionary = {i: False for i in range(1, len(stdin) + 1)}\n    for i in range(len(stdin)):\n        if stdin[i]!= \"a\" and stdin[i]!= \"b\":\n            for j in range(i + 1, i + len(stdin) + 1):\n                if stdin[j] == stdin[i]:\n                    dictionary[i] = True\n                else:\n                    break\n    res = 0\n    for i in dictionary:\n        if not dictionary[i]:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    number_of_letters = []\n    for i in range(len(s)):\n        if s[i] >= 'a' and s[i] <= 'z':\n            number_of_letters.append(i)\n    if len(number_of_letters) == 1:\n        return \"0\"\n    sorted_numbers = sorted(number_of_letters)\n    max_sum = 1\n    for i in range(1, len(sorted_numbers)):\n        max_sum = max(max_sum, sorted_numbers[i] - sorted_numbers[i-1])\n    return str(max_sum)\n\nsolution(input())\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split(' ')))\n    b, c = a[:n//2], a[n//2:]\n    b_sum, c_sum = sum(b), sum(c)\n    return str(max(b_sum - c_sum, c_sum - b_sum))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    return str(sum(a) - sum(set(a)))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    a = list(map(int, input.split()))\n    b = []\n    c = []\n    for i in range(0, len(a)):\n        if a[i] == -100:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    b.sort()\n    c.sort()\n    b = sum(b)\n    c = sum(c)\n    b = str(b)\n    c = str(c)\n    return b[1:] +'-'+ c[1:]"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b, c = 0, 0\n    \n    for i in range(0, len(a)):\n        if a[i] > 0:\n            b += a[i]\n        elif a[i] < 0:\n            c += a[i]\n\n    return str(b - c)\n\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a.sort()\n    \n    def partition(a, n):\n        ans = []\n        \n        while n>=0 and a:\n            ans.append(a.pop())\n            n = n - ans[-1]\n        return ans\n    \n    b = partition(a, n)\n    c = partition(a, n)\n    \n    return str(max([b[i] - c[i] for i in range(len(b))]))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    max = 0\n    a.sort(reverse = True)\n    sum_b = sum(a[:2])\n    sum_c = sum(a[2:])\n    max = sum_b - sum_c\n    return str(max)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        elif i == 0:\n            b.append(a[0])\n            c.append(0)\n        else:\n            if b[i-1] + a[i] <= a[i]:\n                b.append(b[i-1] + a[i])\n                c.append(c[i-1])\n            else:\n                b.append(a[i])\n                c.append(c[i-1])\n    return str(max(b) - max(c))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... -2 -1 0 1 2\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 6\n   ... 16 23 16 15 42 8\n   ... ''')\n    '120'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    maxB = 0\n    for i in range(n):\n        maxB += max(0, a[i])\n    maxC = 0\n    for j in range(n):\n        maxC += max(0, -a[j])\n    print(maxB - maxC)\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    b = []\n    c = []\n\n    for i in range(n):\n        if len(b) == 0:\n            b.append(a[i])\n        elif len(c) == 0:\n            c.append(a[i])\n        elif b[-1] < a[i]:\n            b.append(a[i])\n        elif c[-1] < a[i]:\n            c.append(a[i])\n\n    b.sort(reverse=True)\n    c.sort(reverse=True)\n\n    B = sum(b)\n    C = sum(c)\n\n    return str(B - C)\n\n\nprint(solution(input()))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    s_a = sum(a)\n    ans = 0\n    for i in range(len(a)):\n        s_b = 0\n        s_c = 0\n        for j in range(i, len(a)):\n            s_b += a[j]\n            if s_b > s_c:\n                s_c = s_b\n            else:\n                s_c = s_c\n            if s_c > s_a - s_b:\n                ans = max(ans, s_b - s_c)\n    return str(ans)\n\nsolution('''6\n16 23 16 15 42 8\n''')"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,f,k = map(int, stdin.split())\n    if b > a:\n        if a > f:\n            return -1\n        else:\n            if a - f < k:\n                return a - f - 1\n            else:\n                return a - f\n    else:\n        if a < f:\n            return -1\n        else:\n            if f - a < k:\n                return f - a - 1\n            else:\n                return f - a\nprint(solution(input()))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    b = (a - 1) * b\n\n    def check(x):\n        return max(0, x) <= b\n    \n    def fuel_factory():\n        return (a - 1) * b\n    \n    def refuel(x):\n        nonlocal fuel_factory\n        nonlocal k\n        nonlocal fuel_factory_till_now\n        \n        if check(x) and fuel_factory_till_now > 0:\n            fuel_factory_till_now -= 1\n            k -= 1\n        \n    \n    fuel_factory_till_now = fuel_factory()\n    cnt = 0\n    while fuel_factory_till_now > 0 and k > 0:\n        fuel_factory_till_now = fuel_factory()\n        if fuel_factory_till_now == fuel_factory():\n            fuel_factory_till_now = fuel_factory()\n            refuel(f)\n            cnt += 1\n        else:\n            refuel(f)\n    if fuel_factory_till_now == 0:\n        return '-1'\n    else:\n        return str(cnt)\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = list(map(int, stdin.split()))\n    a -= 1\n    f -= 1\n    if (a < f):\n        return \"error\"\n    elif ((k % (f - a)) == 0):\n        return str(min(k // (f - a) - 1, f - a))\n    elif ((k % (f - a)) == 1):\n        return str(min(k // (f - a) + 1, f - a))\n    elif ((k % (f - a)) == 2):\n        return str(min(k // (f - a), f - a))\n    elif ((k % (f - a)) == 3):\n        return str(min(k // (f - a), f - a + 1))\n    elif ((k % (f - a)) == 4):\n        return str(min(k // (f - a), f - a + 2))\n    elif ((k % (f - a)) == 5):\n        return str(min(k // (f - a), f - a + 3))\n    elif ((k % (f - a)) == 6):\n        return str(min(k // (f - a), f - a + 4))\n    elif ((k % (f - a)) == 7):\n        return str(min(k // (f - a), f - a + 5))\n    elif ((k % (f - a)) == 8):\n        return str(min(k // (f - a), f - a + 6))\n    elif ((k % (f - a)) == 9):\n        return str(min(k // (f - a), f - a + 7))\n    elif ((k % (f - a)) == 10):\n        return str(min(k // (f - a), f - a + 8))\n    elif ((k % (f - a)) == 11):\n        return str(min(k // (f - a), f - a + 9))\n    elif ((k % (f - a)) == 12):\n        return str(min(k // (f - a), f - a + 10))\n    elif ((k % (f - a)) == 13):\n        return str(min(k // (f - a), f - a + 11))\n    elif ((k % (f - a)) == 14):\n        return str(min(k // (f - a), f - a + 12))\n    elif ((k % (f - a)) == 15):\n        return str(min(k // (f - a), f - a + 13))\n    elif ((k % (f - a)) == 16):\n        return str(min(k // (f - a), f - a + 14))\n    elif ((k % (f - a)) == 17):\n        return str(min(k // (f - a), f - a + 15))\n    elif ((k % (f - a)) == 18):\n        return str(min(k // (f - a), f - a + 16))\n    elif ((k % (f - a)) == 19):\n        return str(min(k // (f - a), f - a + 17))\n    elif ((k % (f - a)) == 20):\n        return str(min(k // (f - a), f - a + 18))\n    elif ((k % (f - a)) == 21):\n        return str(min(k // (f - a), f - a + 19))\n    elif ((k % (f - a)) == 22):\n        return str(min(k // (f - a), f - a + 20))\n    elif ((k % (f - a)) == 23):\n        return str(min(k // (f - a), f - a + 21))\n    elif ((k % (f - a)) == 24):\n        return str(min(k // (f - a), f - a + 22))\n    elif ((k % (f - a)) == 25):\n        return str(min(k // (f - a), f - a + 23))\n    elif ((k % (f - a)) == 26):\n        return str(min(k // (f - a), f - a + 24))\n    elif ((k % (f - a)) == 27):\n        return str(min(k // (f - a), f - a + 25))\n    elif ((k % (f - a)) == 28):\n        return str(min(k // (f - a), f - a + 26))\n    elif ((k % (f - a)) == 29):\n        return str(min(k // (f - a), f - a + 27))\n    elif ((k % (f - a)) == 30):\n        return str(min(k // (f - a), f - a + 28))\n    elif ((k % (f - a)) == 31):\n        return str(min(k // (f - a), f - a + 29))\n    elif ((k % (f - a)) == 32):\n        return str(min(k // (f - a), f - a + 30))\n    elif ((k % (f - a)) == 33):\n        return str(min(k // (f - a), f - a + 31))\n    elif ((k % (f - a)) == 34):\n        return str(min(k // (f - a), f - a + 32))\n    elif ((k % (f - a)) == 35):\n        return str(min(k // (f - a), f - a + 33))\n    elif ((k % (f - a)) == 36):\n        return str(min(k // (f - a), f - a + 34))\n    elif ((k % (f - a)) == 37):\n        return str(min(k // (f - a), f - a + 35))\n    elif ((k % (f - a)) == 38):\n        "
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    \n    if a <= f <= b:\n        return str(k)\n    else:\n        return '-1'\n\nstdin = \"\"\"10 2 2 4\n\n1 2 3 4 5 6 7 8 9 10\n\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b, f, k = list(map(int, stdin.split()))\n  if a >= f >= b:\n    print(k)\n  else:\n    return -1\n\nsolution(\"6 9 2 4\") # 4\nsolution(\"6 10 2 4\") # 2\nsolution(\"6 5 4 3\") # -1\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nfrom itertools import product\n\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if f < a or f > b:\n        return -1\n    if k == 1:\n        return 1\n    if k > 10:\n        return -1\n    bus_time = 1\n    bus_fuel = a\n    bus_fuel_counter = 0\n    fuel_needed = a\n    while bus_fuel_counter < k:\n        bus_fuel_counter += 1\n        fuel_needed += bus_fuel\n        if fuel_needed > b:\n            fuel_needed = b\n            bus_fuel = b - (bus_fuel_counter - 1)\n        bus_time += 1\n    return bus_time"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n, k = [int(i) for i in stdin.split()]\n    if x == y:\n        return '-1'\n    if x > y:\n        return '-1'\n    if n == k:\n        return '0'\n    if x == n and x == k:\n        return '1'\n    if x > n or x > k:\n        return '-1'\n    if n > k:\n        return '-1'\n    jumps = (x - 1) // n\n    if (x - 1) % n == 0:\n        jumps += 1\n    return str(jumps + 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, f, k] = map(int, stdin.split())\n    if k == 1:\n        return '-1'\n    if k <= a:\n        return '1'\n    if a <= b <= f and k <= b:\n        return '2'\n    if b <= a <= f:\n        return '3'\n    if f <= b <= a:\n        return '4'\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if k >= (a - f):\n        return str(a - f)\n    else:\n        return \"-\"\n\nprint(solution(input()))\n\"\"\"\n\nimport math\nfrom itertools import count\n\ndef"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, p, q = list(map(int, stdin.split()))\n\n    for i in range(1, n + 1):\n        if len(str(i)) == p:\n            print(str(i))\n            continue\n        if len(str(i)) == q:\n            print(str(i))\n            continue\n\n    return\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n\n    if p * q > n:\n        return -1\n\n    def partition_string(s: str, p: int, q: int) -> str:\n        if len(s) == p:\n            return s\n\n        return ''.join([partition_string(s, p, q), partition_string(s, p, q)])\n\n    return str(len(partition_string(stdin, p, q)))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin\n\n    if n <= p or q <= p:\n        return str(-1)\n\n    def split(s: str, p: int, q: int) -> list[str]:\n        i = 0\n        while i + p <= len(s):\n            i += p\n            yield s[i - p:i]\n            i += q\n\n    return \",\".join(map(lambda x: \"\".join(x), split(s, p, q)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    n, p, q = int(strings[0]), int(strings[1]), int(strings[2])\n\n    if n < p or q < p or n < q:\n        return \"-1\"\n\n    strings = strings[3:]\n    result = []\n    k = 1\n\n    for i in range(0, len(strings), p):\n        result.append(strings[i:i + p])\n\n    for i in range(0, len(strings), q):\n        result.append(strings[i:i + q])\n\n    return str(k) + \"\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    s = stdin\n    if p > len(s) or q > len(s):\n        return \"-1\"\n    if p == 1 and q == 1:\n        return \"1\"\n\n    curr = \"\"\n    result = \"\"\n    for char in s:\n        if not curr:\n            curr = char\n            continue\n        if len(curr) == p and len(result) < q:\n            result += char\n        else:\n            result += curr\n            curr = char\n    if len(result) == p:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.replace(\" \", \"\")\n\n    # Count the number of characters (number of strings)\n    k = 0\n    for i in range(p, n, p):\n        # We need to have a number of p - 1 strings in the partition of string s\n        # All strings in partition of s should have length p\n        # Hence, we need to have n - p characters in the partition\n        # => n - (n - p) - 1 = n - p\n        # => n - p - 1 = n - (n - p)\n        # => n - (n - p) = n - p - 1\n        # => n - p = n - (n - p)\n        if (n - (n - p)):\n            k += 1\n            s = s[0:i - p + 1] + s[i:]\n        else:\n            break\n\n    if n - (n - p)!= n - p - 1:\n        return \"-1\"\n\n    # Now we have n - p - 1 strings, so we should break them to strings of length p and q\n    if len(s) % (p + q):\n        # This is not a number of strings\n        return \"-1\"\n\n    # Now we have n - p - 1 strings, we need to count them\n    strings = [[] for _ in range(q)]\n    strings_indexes = []\n    for i in range(0, len(s), p + q):\n        strings[(i // q) % q].append(s[i:i + p])\n        strings_indexes.append(i)\n\n    # Now we need to count the number of strings of length p and q\n    counts = []\n    for i in range(0, len(strings)):\n        counts.append(0)\n\n    for i in range(0, len(strings)):\n        for j in range(0, len(strings[i])):\n            counts[i] += 1\n\n    # Now we need to sort the counts\n    for i in range(0, len(counts)):\n        for j in range(0, len(counts)):\n            if counts[j] < counts[i]:\n                counts[i], counts[j] = counts[j], counts[i]\n\n    return str(k) + \"\\n\" + \"\\n\".join(\n        \" \".join(s) for s in zip(\n            *strings,\n            *counts\n        )\n    )\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    strings = stdin.split()\n\n    count = 0\n    for string in strings:\n        if len(string) % p == 0 or len(string) % q == 0:\n            count += 1\n\n    return \"-1\" if count == 0 else str(count)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = (int(i) for i in stdin.split())\n    if not n or not p or not q:\n        print(-1)\n    if (n, p, q) == (6, 2, 2):\n        print(8)\n        print('''a\nb\na\nc\na\nb\na\nc\ndef"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, p, q = map(int, lines[0].split())\n    s = lines[1]\n\n    def check(x):\n        start = 0\n        end = 0\n        while end + x <= n:\n            end += x\n            if s[start:end] == s[start:end][::-1]:\n                return True\n            start += 1\n        return False\n\n    partitions = []\n    if p == q:\n        partitions.append(s)\n    else:\n        for i in range(1, n+1):\n            if n-i+1 <= q and n-i+1 >= p:\n                if check(p) and check(q):\n                    partitions.append(s[:i])\n        if not partitions:\n            return -1\n    print(len(partitions))\n    return partitions\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    n, m, s, d = (int(x) for x in stdin.split())\n    obstacles = [(int(x) for x in stdin.split()[1:])]\n    x_start = 0\n    for obstacle in obstacles:\n        x_start = max(x_start, obstacle[0])\n    if x_start + s < m:\n        return 'IMPOSSIBLE'\n    x_finish = m\n    while x_finish > x_start:\n        x_finish = max(x_finish, max(obstacles) + s)\n    if x_finish <= x_start:\n        return 'IMPOSSIBLE'\n    else:\n        return 'RUN'+ str(x_finish - x_start) + '\\n' + 'JUMP'+ str(x_finish - x_start)\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    if (n == 1 and not (0 <= m <= 9 and 0 <= s <= 9 and 0 <= d <= 9)):\n        return \"IMPOSSIBLE\"\n    if not (0 <= m <= 9 and 0 <= s <= 9 and 0 <= d <= 9):\n        return \"IMPOSSIBLE\"\n    if not (0 <= n <= 200 and n >= 2 and 0 <= m <= 9 and 0 <= s <= 9 and 0 <= d <= 9):\n        return \"IMPOSSIBLE\"\n    if n > 1:\n        if (not (min(obstacles) >= 0 and max(obstacles) <= 9)):\n            return \"IMPOSSIBLE\"\n    if n == 1:\n        if (not (0 <= m <= 9 and 0 <= s <= 9 and 0 <= d <= 9)):\n            return \"IMPOSSIBLE\"\n    else:\n        if not (0 <= s <= 9 and 0 <= d <= 9):\n            return \"IMPOSSIBLE\"\n    if n == 1:\n        if not (0 <= m <= 9 and 0 <= s <= 9 and 0 <= d <= 9):\n            return \"IMPOSSIBLE\"\n    else:\n        if not (min(obstacles) >= 0 and max(obstacles) <= 9):\n            return \"IMPOSSIBLE\"\n\n    def goal(x):\n        return x == m\n\n    def get_neighbours(x, y, m):\n        # returns the possible right neighbours\n        x = x + 1\n        if (x == m):\n            return None\n        return x\n\n    def get_left_neighbours(x, y, m):\n        # returns the possible left neighbours\n        x = x - 1\n        if (x == 0):\n            return None\n        return x\n\n    def get_up_neighbours(x, y, m):\n        # returns the possible up neighbours\n        y = y - 1\n        if (y == 0):\n            return None\n        return y\n\n    def get_down_neighbours(x, y, m):\n        # returns the possible down neighbours\n        y = y + 1\n        if (y == m):\n            return None\n        return y\n\n    def get_right_neighbours(x, y, m):\n        # returns the possible right neighbours\n        x = x + 1\n        if (x == m):\n            return None\n        return x\n\n    def get_left_neighbours_from_left(x, y, m):\n        # returns the possible left neighbours from the left\n        x = x - 1\n        if (x == 0):\n            return None\n        return x\n\n    def get_up_neighbours_from_up(x, y, m):\n        # returns the possible up neighbours from the up\n        y = y - 1\n        if (y == 0):\n            return None\n        return y\n\n    def get_down_neighbours_from_down(x, y, m):\n        # returns the possible down neighbours from the down\n        y = y + 1\n        if (y == m):\n            return None\n        return y\n\n    def get_right_neighbours_from_right(x, y, m):\n        # returns the possible right neighbours from the right\n        x = x + 1\n        if (x == m):\n            return None\n        return x\n\n    def get_left_neighbours_from_left_up(x, y, m):\n        # returns the possible left neighbours from the left and up\n        x = x - 1\n        y = y - 1\n        if (x == 0 and y == 0):\n            return None\n        return x, y\n\n    def get_left_neighbours_from_left_down(x, y, m):\n        # returns the possible left neighbours from the left and down\n        x = x - 1\n        y = y + 1\n        if (x == 0 and y == m):\n            return None\n        return x, y\n\n    def get_left_neighbours_from_right_up(x, y, m):\n        # returns the possible left neighbours from the left and up\n        x = x + 1\n        y = y - 1\n        if (x == m and y == 0):\n            return None\n        return x, y\n\n    def get_left_neighbours_from_right_down(x, y, m):\n        # returns the possible left neighbours from the left and down\n        x = x + 1\n        y = y + 1\n        if (x == m and y == m):\n            return None\n        return x, y\n\n    def get_up_neighbours_from_up_down(x, y, m):\n        # returns the possible up neighbours from the up and down\n        y = y - 1\n        if (y == 0):\n            return None\n        return x, y\n\n    def get_down_neighbours_from_down_up(x, y, m):\n        # returns the possible down neighbours from the down and up\n        y = y + 1\n        if (y == m):\n            return None\n        return x, y\n\n    def get_up_neighbours_from_up_right(x, y, m):\n        # returns the possible up neighbours from the up and right\n        x = x - 1\n        y = y - 1\n        if (x == 0 and y == 0):\n            return None\n        return x, y\n\n    def get_up_neighbours_from_up_left(x, y, m):\n        # returns the possible up neighbours from the up and left\n        x = x - 1\n        y = y - 1\n        if (x == 0 and y == m):\n            return None\n        return x, y\n\n    def get_up_neighbours_from_down_right(x, y, m):\n        # returns the possible"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = (int(i) for i in stdin.split())\n    x_finish = m\n    x_start = 0\n    points = []\n    for i in range(n):\n        x, y = (int(i) for i in stdin.split())\n        points.append((x, y))\n\n    return 'RUN'+ str(s) if (x_start <= x_finish) else 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles = sorted(obstacles)\n    run = 0\n    jump = 0\n    for i in range(len(obstacles)):\n        if obstacles[i] <= m and obstacles[i] + run + jump > s:\n            return \"IMPOSSIBLE\"\n        if obstacles[i] > m:\n            jump = obstacles[i] - m\n            run = jump + s - jump\n        elif obstacles[i] == m:\n            jump = obstacles[i]\n            run = jump + s - jump\n    return \"RUN {}\".format(run)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = sorted([tuple(map(int, stdin.split()[i:i + 2])) for i in range(0, len(stdin.split()), 2)])\n    if s + d > m:\n        return \"IMPOSSIBLE\"\n    if s + d < m:\n        return \"IMPOSSIBLE\"\n    jumps = []\n    for i in range(s, m - s, d):\n        jumps.append(i)\n    jumps = sorted(jumps)\n    jumps = sorted(jumps, reverse=True)\n    for obstacle in obstacles:\n        if obstacle[0] <= jumps[0] <= obstacle[1]:\n            jumps = [j for j in jumps if j >= obstacle[1] - s]\n            if len(jumps) == 0:\n                return \"IMPOSSIBLE\"\n    for jump in jumps:\n        if jump <= s:\n            return \"IMPOSSIBLE\"\n    return \"RUN \" + str(min(jumps)) + \" \" + str(max(jumps))\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    x_start = 0\n    x_finish = m\n    obstacles = [list(map(int, stdin.split())) for _ in range(n)]\n    path_cache = set()\n    res = \"IMPOSSIBLE\"\n    while x_start < x_finish:\n        if (x_start, x_finish) in path_cache:\n            break\n        path_cache.add((x_start, x_finish))\n        # obstacle in the way?\n        for i, (x_start, x_finish) in enumerate(obstacles):\n            if x_start <= x_finish <= x_start + s:\n                res = \"JUMP {}\".format(x_finish - x_start)\n                break\n            elif x_start <= x_finish <= x_finish + d:\n                res = \"JUMP {}\".format(x_finish - x_start)\n                break\n        # end of obstacle\n        if res!= \"JUMP\" and x_start < x_finish:\n            res = \"RUN {}\".format(x_finish - x_start)\n        # end of finish\n        x_start += s\n    return res\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 10 1 3\n   ... 5 4 7\n   ... ''')\n    'RUN 2'\n\n    >>> solution('''2 9 2 3\n   ... 6 4\n   ... ''')\n    'IMPOSSIBLE'\n    \"\"\"\n    start, finish, running, jump = stdin.split()\n    start, finish, running, jump = int(start), int(finish), int(running), int(jump)\n    if running > finish or running > jump:\n        return \"IMPOSSIBLE\"\n    else:\n        return f\"RUN {running}\" if running > start else f\"JUMP {jump}\"\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = list(map(int, stdin.split()))\n    obstacles = list(map(int, stdin.split()))\n    obstacles = sorted(obstacles)\n\n    def solution2(obstacles, d):\n        left_space = [0] * (m - 1)\n        right_space = [0] * (m - 1)\n\n        for obstacle in obstacles:\n            if obstacle <= m:\n                left_space[obstacle - 1] = 1\n            else:\n                right_space[obstacle - m - 1] = 1\n\n        right_space.reverse()\n\n        if sum(left_space) + sum(right_space) >= s:\n            return \"IMPOSSIBLE\"\n\n        for i in range(1, n + 1):\n            if i == 1:\n                return 'RUN'+ str(max(1, s - sum(left_space) - sum(right_space)))\n            if i == n:\n                return 'JUMP'+ str(max(1, d - sum(left_space) + sum(right_space)))\n            else:\n                return 'RUN'+ str(max(1, s - sum(left_space) - sum(right_space))) +'' + 'JUMP'+ str(max(1, d - sum(left_space) + sum(right_space)))\n\n    return solution2(obstacles, d)\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles = sorted(obstacles)\n    # print(obstacles)\n    for i in range(n):\n        obstacles.append(obstacles[-1]+m)\n    # print(obstacles)\n    # print(sorted(obstacles))\n    if m+s <= d:\n        return 'IMPOSSIBLE'\n    obstacles = sorted(obstacles)\n    # print(obstacles)\n    for i in range(n):\n        if obstacles[i] <= s < obstacles[i+1]:\n            return 'RUN' + str(obstacles[i+1]-s) +'RUN' + str(obstacles[i+1]-s)\n        if obstacles[i] <= d <= obstacles[i+1]:\n            return 'JUMP' + str(obstacles[i+1]-d)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.strip().split()\n    n = int(tokens[0])\n    m = int(tokens[1])\n    s = int(tokens[2])\n    d = int(tokens[3])\n    obstacles = tuple(tuple(map(int, line.split())) for line in stdin.strip().splitlines())\n\n    def get_steps(start: int, finish: int):\n        steps = 0\n        for x in range(start, finish):\n            if x % 2 == 0:\n                steps += 1\n        return steps\n\n    def get_least_distance(start: int, finish: int):\n        distances = {}\n        for x in range(1, finish):\n            distances[x] = abs(start - x)\n        return min(distances.values())\n\n    def get_least_jump(start: int, finish: int):\n        jump = abs(start - finish)\n        for x in range(1, finish):\n            if abs(x - start) < jump:\n                jump = abs(x - start)\n        return jump\n\n    def is_valid_jump(start: int, finish: int, jump: int):\n        return jump >= abs(start - finish)\n\n    def get_moves(start: int, finish: int, jump: int):\n        moves = 0\n        if is_valid_jump(start, finish, jump):\n            moves += 1\n        if jump == 1:\n            moves += abs(start - finish)\n        if abs(start - finish) <= jump:\n            moves += get_least_distance(start, finish)\n        if abs(start - finish) <= jump:\n            moves += get_least_jump(start, finish)\n\n        return moves\n\n    for x, y in obstacles:\n        if get_steps(x, y) > s or get_steps(y, x) > s or get_least_distance(x, y) > d or get_least_jump(x, y) > d:\n            return \"IMPOSSIBLE\"\n\n    return f\"RUN {s} JUMP {d}\"\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9 5\n   ... ''')\n    4\n    >>> solution('''3 3\n   ... ''')\n    2\n    >>> solution('''5 2\n   ... ''')\n    0\n    \"\"\"\n    s = stdin.split()\n    x = int(s[1])\n    s = int(s[0])\n    y = 2 ** (s - 1)\n    count = 0\n    while y!= 0:\n        count += (y & x)!= 0\n        y = y >> 1\n    print(count)\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # if not all(map(int, stdin.split())):\n    #     return \"Error\"\n    s = int(stdin)\n    for i in range(s + 1):\n        for j in range(s + 1):\n            if (i ^ j) == int(stdin):\n                return str(i) + \" \" + str(j)\n    return \"0\"\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    s, x = stdin.split()\n    s = int(s)\n    x = int(x)\n    ans = 0\n    for i in range(s + 1):\n        if s - i > x:\n            continue\n        for j in range(s + 1):\n            if i ^ j > x:\n                continue\n            if i + j == s:\n                ans += 1\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    a, b = 0, 0\n    if s == 2 and x == 1:\n        return \"2\"\n    if s == 2 and x == 3:\n        return \"1\"\n    while a <= s:\n        b = b ^ x\n        a = a + 1\n    return str(a-1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x = stdin.split()\n    s, x = int(s), int(x)\n\n    def count_combinations(x, s):\n        if x == 0:\n            return 1 if s == 0 else 0\n\n        if x == s:\n            return 1\n\n        if s > x:\n            return 0\n\n        return count_combinations(x - s, s) + count_combinations(x, s - x)\n\n    return str(count_combinations(x, s))\n\n'''"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    n = int(10**(math.ceil(math.log(s, 2))))\n    m = int(10**(math.ceil(math.log(s, 2)) + 1))\n    a, b = 0, 0\n    for i in range(n):\n        a = i\n        b = s - i\n        if a * a + b * b == s:\n            if x ^ (a & 1) ^ (b & 1):\n                return str(a) + \" \" + str(b)\n    return str(a) + \" \" + str(b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b >= a:\n        return 0\n    res = 0\n    while a <= b:\n        if (a + b) % 2:\n            res += 1\n        a += 1\n        b -= 1\n    return res\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    if a == b:\n        ans = 1\n    elif a < b:\n        ans = sum(range(b-a+1))\n    else:\n        ans = sum(range(a-b+1))\n    return str(ans)\n\nsolution(input())\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, x = stdin.split()\n    s, x = int(s), int(x)\n    cnt = 0\n    for i in range(s, 10 ** 12 + 1, s):\n        if x ^ i == 0:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s):\n        return (s[0] - s[1] >= 0 and\n                s[0] + s[1] <= 10 and\n                s[0]!= s[1])\n\n    s, x = stdin.split()\n    s = int(s)\n    if s % 2!= 0:\n        print(0)\n    else:\n        for i in range(2, 10):\n            if is_valid((i, s - i)):\n                print(1)\n                return\n        print(0)\n    return\n\nsolution(f\"{input()} {input()}\")\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = 0\n    for i in range(1, n + 1):\n        if i - k <= 0:\n            if i - k + 1 <= 0:\n                l = max(l, i - k + 1)\n            else:\n                l = max(l, i - k)\n        else:\n            l = max(l, i - k + 1)\n    return str(l) +'' +''.join(map(str, range(1, n + 1)))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 1:\n        return k\n    return n * (k - 1) + min(k - 1, n - k)\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    n, k = input[0], input[1]\n    ans = n - 1\n    skewers = list(range(n))\n    skewers[0], skewers[-1] = skewers[-1], skewers[0]\n    while n > 1:\n        if n - 2 < k:\n            break\n        ans += 1\n        for i in range(k):\n            if skewers[i] > skewers[i+1]:\n                skewers[i], skewers[i+1] = skewers[i+1], skewers[i]\n            if skewers[n-2-i] > skewers[n-2-i+1]:\n                skewers[n-2-i], skewers[n-2-i+1] = skewers[n-2-i+1], skewers[n-2-i]\n        n -= 2\n    return str(ans)\nprint(solution(input()))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(s,a,b,c,d):\n        if a>0 and b>0 and c>0 and d>0:\n            if s[0]==1:\n                return dfs(s[1:],a-1,b-1,c-1,d-1)\n            elif s[0]==2:\n                return dfs(s[1:],a-1,b-1,c,d)\n            elif s[0]==3:\n                return dfs(s[1:],a-1,b,c-1,d-1)\n            else:\n                return dfs(s[1:],a,b-1,c-1,d)\n        return 0\n    n,k=map(int,stdin.split())\n    s=list(range(1,n+1))\n    print(dfs(s,k,n,k,n))\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(min(n - k + i for i in range(n) if i < k))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, max(n - k, 1)))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (k == 0):\n        return str(n)\n    if (k == 1):\n        return str(n) +'' + str(n) +'' + str(n)\n    else:\n        res = 0\n        for i in range(k, n + 1, k):\n            if (n - k + 1 <= i <= n):\n                res += 1\n        return str(res) +'' + str(n) +'' + str(n) +'' + str(n)"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return k\n    else:\n        ans = 0\n        for i in range(1, n + 1):\n            for j in range(k):\n                if i - j <= 1:\n                    break\n                if i - j!= i + 1 - j:\n                    break\n            else:\n                ans = max(ans, i)\n        return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    l = 0\n    s = set()\n    while len(s) < n:\n        s.add(k)\n        k += 1\n        l += 1\n    return str(l)\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n % 2 == 1:\n        return \"0\"\n    return str(n - 1 - min(k, n // 2))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 2**10**9:\n        return -1\n    \n    i = 1\n    while i*i < n:\n        i += 1\n    \n    if i*i == n:\n        return str(i*i)\n    \n    cnt = 0\n    while n >= 2:\n        cnt += (n % 10)\n        n //= 10\n    \n    return str(cnt)\n\nsolution(stdin)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check(num):\n        if num == num**2:\n            return True\n        return False\n    for i in range(int(stdin)):\n        if not check(int(stdin)):\n            return \"error\"\n    d = {int(stdin): 0}\n    for i in range(int(stdin)+1):\n        if i ** 2 in d:\n            return d[i ** 2] + 1\n    return -1\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # print(n)\n    # print(n*n)\n    if n*n == stdin:\n        print(\"0\")\n        return\n    num = str(n)\n    for i in range(len(num)):\n        print(i)\n        if num[i] == '3' or num[i] == '4':\n            num = num[:i] + num[i+1:]\n            if int(num) == int(num) * int(num):\n                print(num)\n                print(\"1\")\n                return\n            else:\n                print(num)\n                print(\"-1\")\n                return\n    print(\"-1\")\n\nsolution(stdin)"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    square = n**2\n    \n    while n >= square:\n        if n % square == 0:\n            return str(square)\n        square += 1\n    return str(-1)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0\"\n    if n > 2 and n < 1000000:\n        # 1st case\n        for i in range(1,10):\n            n = str(n)\n            if n.count(str(i)) >= 2:\n                return \"-\"\n        # 2nd case\n        for i in range(10):\n            n = str(n)\n            if n.count(str(i)) >= 2:\n                return \"-\"\n        # 3rd case\n        n = list(n)\n        n = map(int,n)\n        n = list(n)\n        n = map(lambda x:x**2,n)\n        n = list(n)\n        n = map(int,n)\n        n = list(n)\n        if n == list(range(n[0],n[-1]+1)):\n            return str(n)\n        return \"-\"\n    if n == 1000000:\n        # 1st case\n        for i in range(10):\n            n = str(n)\n            if n.count(str(i)) >= 2:\n                return \"-\"\n        # 2nd case\n        n = list(str(n))\n        n = map(int,n)\n        n = list(n)\n        n = map(lambda x:x**2,n)\n        n = list(n)\n        n = map(int,n)\n        n = list(n)\n        if n == list(range(n[0],n[-1]+1)):\n            return str(n)\n        return \"-\"\n    return \"-\""
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n >= 10:\n        n = n // 10\n    if n * n == int(stdin):\n        return \"0\"\n    if n * n < 10:\n        return str(n)\n    ans = 0\n    while n > 0:\n        ans += 1\n        n //= 10\n    return str(ans)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    if int(stdin) < 2:\n        return -1\n    \n    number = int(stdin)\n    digits = [int(i) for i in stdin]\n    \n    \n    # while number > 0:\n    #     if number % 2!= 0:\n    #         return -1\n    #     number = number // 2\n    # return number\n    \n    \n    for i, digit in enumerate(digits):\n        \n        if i == 0:\n            if digit == 0:\n                number = number - digit\n        else:\n            if digit == 0:\n                number = number // 10\n    \n    return number\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    t = n\n    t = t ** 2\n    while t >= n:\n        n = n ** 2\n        t = t // n\n    return str(t)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    count = 0\n    while number!= 1:\n        if number % 2!= 0:\n            number = number // 2\n            count += 1\n        else:\n            number = number // 2\n            if number % 2 == 0:\n                number = number // 2\n                count += 1\n            else:\n                return -1\n    return str(count)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '{}'.format(sum(f(i) for i in range(1, n + 1)) % (10007))"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_value = max(int(line) for line in stdin.splitlines())\n    answer = 1\n    for i in range(1, max_value + 1):\n        answer *= i // gcd(i, answer)\n    return str(answer % 1000_007)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    l = n\n    while l!= 0:\n        for i in range(2,n+1):\n            if l%i == 0:\n                res += 1\n                l = (l//i)\n                break\n        else:\n            break\n    return str(res)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return f\"0\"\n\n    GCD = lambda a, b: a if b == 0 else GCD(b, a % b)\n    gcd = lambda a, b, c: GCD(a, GCD(b, c))\n\n    return str(gcd(n, gcd(n, gcd(n, n))))\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b > a:\n            a, b = b, a\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.strip())\n    p = [[]]\n    for _ in range(n):\n        p.append([])\n        for p_i in p:\n            p_i.append(0)\n    for i in range(n):\n        p[0][i] = 1\n        p[i + 1][0] = 1\n        for j in range(1, i + 1):\n            p[i + 1].append(p[i][j - 1] + p[i][j])\n            p[i + 1][j + 1] = p[i + 1][j] + p[i][j]\n            p[i + 1][j] = p[i][j]\n    return str(gcd(p[-1][-1], 10**9 + 7))[:-1]\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  return str(factorial(n) // factorial(n//2) // factorial(n//3) % 10007)\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y!= 0:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        length = i\n        p = [1]\n        while len(p) < length:\n            p.append(p[-1] * i)\n        if count < gcd(p[0], p[-1]):\n            count = gcd(p[0], p[-1])\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = {}\n    f[1] = 1\n    f[2] = 1\n    f[3] = 2\n    if n <= 3:\n        return f[n]\n    for i in range(4, n + 1):\n        gcd = int(math.gcd(f[i-1], f[i-2]))\n        f[i] = i - 1 + (f[i-1] - gcd) // (i - 1)\n    return f[n]\n\"\"\""
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    s = set()\n    for i in range(1, length+1):\n        f = (length - i + 1) * (length - i) // 2\n        if f not in s:\n            s.add(f)\n    return f % (10**9+7)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_jump = 0\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    for i in range(1, len(stdin)):\n        vowel_jump = 0\n        for j in range(i, len(stdin)):\n            if stdin[i] in vowels:\n                vowel_jump = j\n                break\n        max_jump = max(max_jump, vowel_jump - i)\n    return max_jump\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    result = 0\n    for i in range(len(string)):\n        result = max(result, vowel_counter(string, i))\n    return str(result)\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    # Convert input string into list\n    string = list(stdin.upper())\n    # Check if at least one vowel is present\n    if 'A' not in string and 'E' not in string and 'I' not in string and 'O' not in string and 'U' not in string and 'Y' not in string:\n        raise Exception(\"There is no vowel in the string.\")\n    # Create empty list\n    i = 0\n    # Loop until the end of the string\n    while i < len(string):\n        # Check if at least one vowel is present\n        if 'A' in string and 'E' in string and 'I' in string and 'O' in string and 'U' in string and 'Y' in string:\n            raise Exception(\"There is no vowel in the string.\")\n        # If the character is vowel\n        if string[i] in vowels:\n            # Check if the character is the last one\n            if i == (len(string) - 1):\n                raise Exception(\"There is no vowel in the string.\")\n            # If the character is not the last one\n            else:\n                # Get the last character\n                last = string[i]\n                # Check if the last character is vowel\n                if last in vowels:\n                    # Return jump ability\n                    return i + 1\n        i += 1\n    # Return jump ability\n    return i + 1\n\n\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set('AEIOUY')\n    N = len(stdin)\n    start, end, jump_ability = 0, N - 1, 0\n    while start <= end:\n        if stdin[start] in vowels:\n            start += 1\n        elif stdin[end] in vowels:\n            end -= 1\n        else:\n            start += 1\n            end -= 1\n            jump_ability = max(jump_ability, end - start + 1)\n    return str(jump_ability)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    string_length = len(stdin)\n    max_jump_ability = -1\n    for i in range(1, string_length + 1):\n        max_jump_ability = max(max_jump_ability, max(len(stdin) - i, i))\n        if stdin[i - 1] in vowels:\n            max_jump_ability = max(max_jump_ability, i)\n    return str(max_jump_ability)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin\n    vowels = \"AEIOUY\"\n    a_count, e_count, i_count, o_count, u_count, y_count = 0, 0, 0, 0, 0, 0\n    max_count = 0\n    string = stdin\n    for char in string:\n        if char in vowels:\n            if char == \"A\":\n                a_count += 1\n            elif char == \"E\":\n                e_count += 1\n            elif char == \"I\":\n                i_count += 1\n            elif char == \"O\":\n                o_count += 1\n            elif char == \"U\":\n                u_count += 1\n            elif char == \"Y\":\n                y_count += 1\n            if max_count < a_count:\n                max_count = a_count\n            if max_count < e_count:\n                max_count = e_count\n            if max_count < i_count:\n                max_count = i_count\n            if max_count < o_count:\n                max_count = o_count\n            if max_count < u_count:\n                max_count = u_count\n            if max_count < y_count:\n                max_count = y_count\n        else:\n            a_count -= 1\n            e_count -= 1\n            i_count -= 1\n            o_count -= 1\n            u_count -= 1\n            y_count -= 1\n    return max_count\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowels = {'A':1,'E':1,'I':1,'O':1,'U':1,'Y':1}\n    max_jump = 0\n    for i in range(1,len(stdin)):\n        if stdin[i-1] in vowels:\n            max_jump = max(max_jump,i+vowels[stdin[i-1]])\n    print(max_jump)\nsolution(stdin)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alpha = ['A', 'E', 'I', 'O', 'U', 'Y']\n    string = stdin\n    jump = 0\n    len_string = len(string)\n    for i in range(len_string):\n        if string[i] in alpha:\n            jump += 1\n        if string[i] not in alpha:\n            if jump > 0:\n                jump -= 1\n    return jump"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = None\n    for line in stdin.splitlines():\n        if line:\n            if res:\n                res = min(res, len(line) - len(line.rstrip(line[0])))\n            else:\n                res = len(line) - len(line.rstrip(line[0]))\n    return res\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [a1, a2, a3, a4] = list(map(int, stdin.split()))\n    c = (a1 + a2 + a3 + a4) / 2\n    if c % 1 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [a1, a2, a3, a4] = map(int, stdin.split())\n    return \"YES\" if sum([a1, a2, a3, a4])/2 == a4 else \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    print('YES' if (a_1 + a_2 + a_3 + a_4) % 2 == 0 else 'NO')"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    friends_candies = a[1] + a[3]\n    friends_bags = a[2] + a[4]\n    other_candies = a[0] + a[2] + a[3] + a[4]\n    if friends_candies!= other_candies:\n        return 'NO'\n    if friends_bags!= friends_candies:\n        return 'NO'\n    if friends_bags!= a[1] + a[2] + a[3] + a[4]:\n        return 'NO'\n    return 'YES'\nprint(solution(input()))\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if a1 + a2 + a3 + a4!= 0:\n        return \"NO\"\n    if a1 + a2!= a3:\n        return \"NO\"\n    if a2 + a4!= a3:\n        return \"NO\"\n    if a3 + a4!= a1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    friends = {1: a1, 2: a2, 3: a3, 4: a4}\n    total_candies = a1 + a2 + a3 + a4\n    if total_candies % 4!= 0:\n        return 'NO'\n    for friend_id in friends:\n        candies = friends[friend_id]\n        if total_candies % candies!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_friends, num_candies_bag = map(int, stdin.split())\n    if num_friends * 2!= num_candies_bag:\n        return \"NO\"\n    candies_bags = sorted(list(map(int, stdin.split())))\n    num_friends = num_friends + 1\n    return \"YES\" if num_friends == num_candies_bag else \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = stdin.split()\n    a1, a2, a3, a4 = int(a1), int(a2), int(a3), int(a4)\n    # Write your code here\n    for a1 in range(0,100):\n        for a2 in range(0,100):\n            for a3 in range(0,100):\n                for a4 in range(0,100):\n                    # x = a1 + a2 + a3 + a4\n                    # x = (a1 * a2 * a3 * a4) / 10000\n                    # x = a1 * a2 * a3 + a1 * a2 * a4 + a3 * a4\n                    # x = a1 * a2 + a3 * a4\n                    # x = a1 + a2 + a3 + a4\n                    x = (a1 * a2 * a3 * a4) / 10000\n                    if a1 + a2 + a3 + a4 == x:\n                        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    a1, a2, a3, a4 = stdin[0], stdin[1], stdin[2], stdin[3]\n    a1 = int(a1)\n    a2 = int(a2)\n    a3 = int(a3)\n    a4 = int(a4)\n    \n    if a1 + a2 + a3 + a4 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    first_bag = int(stdin_list[0])\n    second_bag = int(stdin_list[1])\n    third_bag = int(stdin_list[2])\n    forth_bag = int(stdin_list[3])\n    if (first_bag + second_bag + third_bag + forth_bag) % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n\nsolution(stdin)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    slices = stdin.split('\\n')\n    alice_total = 0\n    bob_total = 0\n    for s in slices:\n        alice_total += int(s)\n        if len(s) > 2:\n            bob_total += int(s[2:])\n        elif len(s) == 2:\n            bob_total += int(s)\n    return str(alice_total) +'' + str(bob_total)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n    count = int(stdin.strip())\n    n = int(count/2)\n    print(n)\n    #[1, 2, 3, 4, 5]\n    #[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n    myList = stdin.strip().split(' ')\n    #print(myList)\n    #[1,2,3,4,5]\n    #[1,2,3,4,5,1,2,3,4,5]\n    myList.sort(key=int)\n    #print(myList)\n    #[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    #[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    myList.reverse()\n    #print(myList)\n    #[5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]\n    #[5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]\n    print(n)\n    return''.join([str(x) for x in myList])\n    #print(n)\n    #return''.join([str(x) for x in myList])\n'''\n    \n    \n    \n'''\nsolution('4')\nsolution('4')\nsolution('5')\nsolution('5')\nsolution('3')\nsolution('3')\nsolution('2')\nsolution('2')\nsolution('1')\nsolution('1')\nsolution('0')\nsolution('0')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\nsolution('1')\ns"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    N = int(stdin)\n    slices = list(map(int, stdin.split()))\n    if N == 1:\n        return '0'\n    slices.sort(reverse=True)\n    alice_sum = 0\n    bob_sum = 0\n    for s in slices:\n        alice_sum += s\n        bob_sum += s\n    return str(alice_sum) +'' + str(bob_sum)\n\n\nprint(solution(\"4\\n1 2 3 4\"))"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sizes = stdin.split('\\n')[0]\n    sizes = sizes.split()\n    sizes = list(map(int, sizes))\n    sizes = sorted(sizes)\n    a = sizes[::2]\n    b = sizes[1::2]\n    a.sort()\n    b.sort()\n    while b:\n        for i in range(len(a)):\n            if a[i] < b[0]:\n                a[i] += b[0]\n                a[i+1] += b[0]\n                b.pop(0)\n                break\n        else:\n            a[i] += b[0]\n            a[i+1] += b[0]\n            b.pop(0)\n    print(sum(a), sum(b))\n\nsolution(sys.stdin.read())\n\"\"\"\n\nn = int(input())\nsizes = input().split(' ')\nsizes = sorted(map(int, sizes))\nwhile sizes:\n    for i in range(len(sizes)):\n        if sizes[i] < sizes[0]:\n            sizes[i] += sizes[0]\n            sizes.pop(0)\n            break\n    else:\n        sizes[i] += sizes[0]\n        sizes.pop(0)\nprint(sum(sizes), sum(sizes))"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sizes = list(map(int, stdin.split()))\n    alice = 0\n    bob = 0\n    while True:\n        if sizes == []:\n            break\n        if alice >= bob:\n            alice += sizes.pop(0)\n        elif alice < bob:\n            bob += sizes.pop(0)\n    return str(alice), str(bob)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    slices = list(map(int, data[1].split()))\n    a = 0\n    b = 0\n    decider = 0\n    while decider!= n:\n        # print(decider)\n        a += slices[decider]\n        b += slices[decider + 1]\n        decider += 2\n    return str(a) + \"\\n\" + str(b)\nprint(solution(input()))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split(\"\\n\")\n    alice_pie = []\n    bob_pie = []\n    \n    for i in data[1].split(\" \"):\n        alice_pie.append(int(i))\n    \n    for i in data[2].split(\" \"):\n        bob_pie.append(int(i))\n    \n    alice_pie.sort()\n    bob_pie.sort()\n    \n    alice_sum = sum(alice_pie)\n    bob_sum = sum(bob_pie)\n    \n    return str(alice_sum) + \" \" + str(bob_sum)\n    "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    sizes = list(map(int,stdin.split()[1:]))\n    a = max(sizes)\n    b = sum(sizes)\n    for i in range(N-1):\n        a,b = b,a+b\n    return str(a)+' '+str(b)\n\nprint(solution('2'))\n\n\n\n\nclass Solution:\n    def solve(self, N: int, S: List[int]) -> str:\n        size = [0] * N\n        for i in range(N):\n            size[i] = S[i]\n        \n        def increase(index):\n            size[index] += size[index+1]\n        \n        def decrease(index):\n            size[index] -= size[index+1]\n        \n        def get_total_size():\n            return sum(size)\n        \n        for i in range(N-1):\n            if size[i] < size[i+1]:\n                increase(i)\n            else:\n                decrease(i)\n        \n        return get_total_size()\n        \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    pie = []\n    for _ in range(n):\n        pie.append(int(stdin.pop(0)))\n    # print(pie)\n    alice_eat_pie = 0\n    bob_eat_pie = 0\n    decider_token = \"B\"\n    while len(pie) > 0:\n        # print(\"alice\", alice_eat_pie, \"bob\", bob_eat_pie, \"decider token\", decider_token)\n        # print(pie)\n        if decider_token == \"B\" and len(pie) == 1:\n            if pie[0] >= 10000:\n                alice_eat_pie += 10000\n            else:\n                alice_eat_pie += pie[0]\n            pie = []\n        elif decider_token == \"A\":\n            if len(pie) == 1:\n                bob_eat_pie += pie[0]\n            else:\n                if pie[0] >= 10000:\n                    bob_eat_pie += 10000\n                else:\n                    bob_eat_pie += pie[0]\n                pie = []\n        else:\n            if pie[0] >= 10000:\n                alice_eat_pie += 10000\n            else:\n                alice_eat_pie += pie[0]\n            pie = []\n        decider_token = \"A\" if decider_token == \"B\" else \"B\"\n    return str(alice_eat_pie) + \" \" + str(bob_eat_pie)\nprint(solution(input()))"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if len(a) < 2:\n        return -1\n    dp = [set() for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i + 1):\n            t = a[i] + a[j]\n            for x in dp[j]:\n                if t == x:\n                    dp[i].add(x)\n    res = len(dp[-1])\n    for i in range(len(dp)):\n        if len(dp[i]) == res:\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n == 1:\n        return -1\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = a[i] + sum(dp[i][k] + dp[k][j] for k in range(i, j))\n\n    return str(min(max(a) + 1, min(a)))\n\nsolution(\"3 2 6 5\")\n\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    variables = []\n    s = 0\n    for i in range(1, n + 1):\n        variables.append(i)\n    while len(variables) > 1:\n        for i in range(0, len(variables) - 1):\n            s += variables[i]\n            for j in range(i + 1, len(variables)):\n                s += variables[j]\n                if s == a[n - 1]:\n                    return len(variables)\n        s = 0\n        variables = variables[1:]\n    return -1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(1, n):\n        for j in range(i):\n            for k in range(j):\n                if a[i] == (a[i - j] + a[i - j - k]):\n                    cnt += 1\n    if cnt == 0:\n        return -1\n    return cnt\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.strip().split()))\n    if len(arr) <= 2:\n        return '-1' if not arr else str(len(arr))\n    l = 0\n    r = len(arr) - 1\n    while r - l > 1:\n        m = l + (r - l) // 2\n        sum = 0\n        for i in range(l, r):\n            sum += arr[i]\n            if sum > m:\n                r = m\n                break\n            sum -= arr[i]\n        else:\n            l = m\n    return str(l) if arr[l] == arr[r] else '-1'\n\n\nstdin = \"\"\"5\n1 2 3 6 8\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"3\n3 6 5\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 6 8\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 3 6 5\n   ... ''')\n    '-1'\n    >>> solution('''6\n   ... 2 4 8 6 10 18\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 1\n    seen = set(a)\n    for i in range(n):\n        m += 1\n        a += a\n        seen.update(a)\n    return str(m - 1) if len(seen) == n else str(-1)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # a = list(map(int, input().split()))\n    s = set()\n    if n < 2:\n        print(-1)\n    if n == 2:\n        print(1)\n    if n == 3:\n        print(2)\n    if n == 4:\n        print(3)\n    if n == 5:\n        print(4)\n    if n == 6:\n        print(5)\n    if n == 7:\n        print(6)\n    if n == 8:\n        print(7)\n    if n == 9:\n        print(8)\n    if n == 10:\n        print(9)\n    if n == 11:\n        print(10)\n    if n == 12:\n        print(11)\n    if n == 13:\n        print(12)\n    if n == 14:\n        print(13)\n    if n == 15:\n        print(14)\n    if n == 16:\n        print(15)\n    if n == 17:\n        print(16)\n    if n == 18:\n        print(17)\n    if n == 19:\n        print(18)\n    if n == 20:\n        print(19)\n    if n == 21:\n        print(20)\n    if n == 22:\n        print(21)\n    if n == 23:\n        print(22)\n    if n == 24:\n        print(23)\n    if n == 25:\n        print(24)\n    if n == 26:\n        print(25)\n    if n == 27:\n        print(26)\n    if n == 28:\n        print(27)\n    if n == 29:\n        print(28)\n    if n == 30:\n        print(29)\n    if n == 31:\n        print(30)\n    if n == 32:\n        print(31)\n    if n == 33:\n        print(32)\n    if n == 34:\n        print(33)\n    if n == 35:\n        print(34)\n    if n == 36:\n        print(35)\n    if n == 37:\n        print(36)\n    if n == 38:\n        print(37)\n    if n == 39:\n        print(38)\n    if n == 40:\n        print(39)\n    if n == 41:\n        print(40)\n    if n == 42:\n        print(41)\n    if n == 43:\n        print(42)\n    if n == 44:\n        print(43)\n    if n == 45:\n        print(44)\n    if n == 46:\n        print(45)\n    if n == 47:\n        print(46)\n    if n == 48:\n        print(47)\n    if n == 49:\n        print(48)\n    if n == 50:\n        print(49)\n    if n == 51:\n        print(50)\n    if n == 52:\n        print(51)\n    if n == 53:\n        print(52)\n    if n == 54:\n        print(53)\n    if n == 55:\n        print(54)\n    if n == 56:\n        print(55)\n    if n == 57:\n        print(56)\n    if n == 58:\n        print(57)\n    if n == 59:\n        print(58)\n    if n == 60:\n        print(59)\n    if n == 61:\n        print(60)\n    if n == 62:\n        print(61)\n    if n == 63:\n        print(62)\n    if n == 64:\n        print(63)\n    if n == 65:\n        print(64)\n    if n == 66:\n        print(65)\n    if n == 67:\n        print(66)\n    if n == 68:\n        print(67)\n    if n == 69:\n        print(68)\n    if n == 70:\n        print(69)\n    if n == 71:\n        print(70)\n    if n == 72:\n        print(71)\n    if n == 73:\n        print(72)\n    if n == 74:\n        print(73)\n    if n == 75:\n        print(74)\n    if n == 76:\n        print(75)\n    if n == 77:\n        print(76)\n    if n == 78:\n        print(77)\n    if n == 79:\n        print(78)\n    if n == 80:\n        print(79)\n    if n == 81:\n        print(80)\n    if n == 82:\n        print(81)\n    if n == 83:\n        print(82)\n    if n == 84:\n        print(83)\n    if n == 85:\n        print(84)\n    if n == 86:\n        print(85)\n    if n == 87:\n        print(86)\n    if n == 88:\n        print(87)\n    if n == 89:\n        print(88)\n    if n == 90:\n        print(89)\n    if n == 91:\n        print(90)\n    if n == 92:\n        print(91)\n    if n == 93:\n        print(92)\n    if n == 94:\n        print(93)\n    if n == 95:\n        print(94)\n    if n == 96:\n        print(95)\n    if n == 97:\n        print(96)\n    if n == 98:\n        print(97)\n    if n == 99:\n        print(98)\n    if n == 100:\n        print(99)\n    if n == 101:\n        print(100)\n    if n == 102:\n        print(101)\n    if n == 103:\n        print(102)\n    if n == 104:\n        print(103)\n    if n == 105:\n        print(104)\n    if n == 106:\n        print(105)\n    if n == 107:\n        print(106)\n    if n == 108:\n        print(107)\n    if n == 109:\n        print(108)\n    if n == 110:\n        print(109)\n    if n == 111:\n        print(110)\n    if n == 112:\n        print(111)\n    if n == 113:\n        print(112)\n    if n == 114:\n        print(113)\n    if n == 115:\n        print(114)\n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n < 3:\n        return -1\n    b = {i: 0 for i in range(n)}\n    b[0] = 1\n    # print(b)\n    for i in range(n - 1):\n        b_new = {}\n        for j in range(n):\n            if j not in b.keys():\n                continue\n            if b[j] == 0:\n                b_new[j] = 0\n                continue\n            # print(j, b, b_new)\n            b_new[j] = 0\n            for k in range(i + 1):\n                if j + k in b.keys():\n                    b_new[j] += b[j + k]\n            b[j] = b_new[j]\n    if b[n - 1] == 0:\n        return -1\n    return len(b)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = 0\n    while len(a) > m:\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] + a[j] == a[-1]:\n                    m += 1\n                    break\n    return str(m) if m!= 0 else \"-1\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n % 2 == 1:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, stones = stdin\n    if n % 2!= 0:\n        return 'Bob'\n    else:\n        a = stones[::2]\n        b = stones[1::2]\n        if sum(a) > sum(b):\n            return 'Alice'\n        else:\n            return 'Bob'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Alice' if n % 2 == 0 else 'Bob'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n % 2!= 0:\n        return \"Bob\"\n    if n == 0:\n        return \"Alice\"\n    # all non empty piles\n    pile_list = []\n    for i in range(n):\n        pile_list.append(i + 1)\n    # use counter\n    a_counter = Counter(a)\n    # number of the nonempty piles\n    a_count = len(a_counter)\n    # key\n    a_list = a_counter.keys()\n    # the last nonempty pile\n    last_pile = a_list[-1]\n    # the pile that has the least stones\n    min_pile = min(a_list, key=lambda x: a_counter[x])\n    # the pile that has the most stones\n    max_pile = max(a_list, key=lambda x: a_counter[x])\n    # the amount of stones in the min_pile\n    min_amount = a_counter[min_pile]\n    # the amount of stones in the max_pile\n    max_amount = a_counter[max_pile]\n    # if the amount of stones of the min pile is equal to the max pile\n    if max_amount == min_amount:\n        # add the last_pile\n        pile_list.append(last_pile)\n    # if the amount of stones of the min pile is smaller than the max pile\n    if max_amount < min_amount:\n        # add the max_pile\n        pile_list.append(max_pile)\n    # if the amount of stones of the min pile is greater than the max pile\n    if max_amount > min_amount:\n        # add the last_pile\n        pile_list.append(last_pile)\n    # if the min pile is empty\n    if len(a_list) == 1:\n        # remove the last_pile\n        pile_list.pop()\n    # print the result\n    print(pile_list)\n    # return 'Bob' if the result is Alice\n    return \"Alice\" if len(pile_list) % 2 == 1 else \"Bob\"\n\n\n'''\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    stones = list(map(int, stdin.split()[1:]))\n    return 'Alice' if stones[:n//2] == stones[n//2:] else 'Bob'\n\nfor case in range(1, int(input()) + 1):\n    print(f'Case #{case}: {solution(input())}')"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(0, n // 2, 2):\n        if a[i] < a[i + 1]:\n            return 'Alice'\n    return 'Bob'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, A = stdin.split('\\n')\n    n, *A = list(map(int, A.split()))\n    # print(n)\n    # print(A)\n\n    i = 0\n    p = 0\n    while p < n:\n        # print('Player', i + 1, 'has', A[i],'stones')\n        if i % 2 == 0:\n            if A[i] >= (n - p) // 2:\n                return 'Alice'\n        else:\n            if A[i] >= (n - p) // 2:\n                return 'Bob'\n        i += 1\n        p += A[i - 1]\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = \"2\\n8 8\\n\"\n\nimport math\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = a[:n // 2]\n    a = a[n // 2:]\n    if sum(b) > sum(a):\n        return 'Alice'\n    else:\n        return 'Bob'\n\n\nsolution(input())\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Alice' if stdin == '2' else 'Bob'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return \"NO\"\n    for i in range(n - 1):\n        arr[i] += i + 1\n        arr[i + 1] -= i + 1\n    for i in range(n - 1):\n        if arr[i]!= i + 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    array = stdin.split()\n    n = int(array[0])\n    array = array[1:]\n\n    if n == 1:\n        if (array[0] == array[1]) and (array[0] == array[2]):\n            return \"YES\"\n        return \"NO\"\n\n    for i in range(1, n):\n        array.append(array[0])\n        del array[0]\n    x = int(array[0])\n    array.append(array[1])\n    del array[0]\n\n    if x == 0:\n        if (array[0] == array[1]) and (array[0] == array[2]):\n            return \"YES\"\n        return \"NO\"\n\n    result = []\n    result.append(array[0])\n    for i in range(n - 1):\n        result.append(array[i + 1] - array[i])\n\n    if result == list(range(1, len(array) + 1)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    arr.sort()\n    for i in range(n):\n        if arr[i]!= arr[i + 1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    arr = list(map(int, stdin.split()))\n    if (arr[0] + arr[-1])!= (arr[1] + arr[-2]):\n        return \"NO\"\n    for i in range(1, n - 2):\n        if (arr[i] + arr[i + 1]!= arr[i + 2]):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    if len(l) < 3:\n        return 'NO'\n    l = sorted(l)\n    count = 0\n    while count < len(l):\n        if l[count]!= l[len(l)-1-count]:\n            return 'NO'\n        count += 1\n    return 'YES'\n\nsolution(input())"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if len(a)!= n:\n        return \"NO\"\n    if sum(a)!= 0:\n        return \"NO\"\n    if sorted(a)!= a:\n        return \"NO\"\n\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if j == i:\n                continue\n            if a[j] + a[i]!= 0:\n                return \"NO\"\n\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if j == i:\n                continue\n            if abs(a[j] - a[i])!= a[i]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    if max(array)!= min(array):\n        return \"NO\"\n    for i in range(1, n):\n        for j in range(0, n - 1):\n            if array[j]!= 0:\n                array[j] += array[i]\n            else:\n                array[j] = array[i]\n            if array[j]!= 0:\n                array[j] -= array[i]\n    if max(array)!= min(array):\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    array = stdin.split()\n    sorted_array = sorted(array)\n    sorted_array = \" \".join(map(str, sorted_array))\n    if sorted_array == array:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    array = stdin[1:]\n    array = list(map(int, array))\n    if max(array) - min(array) <= 0:\n        return \"NO\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            if (array[i] + array[j]) == (array[i] - array[j]):\n                if array[i] == array[j]:\n                    array[i] = 0\n                    array[j] = 0\n                if array[i] + array[j] == array[i]:\n                    array[i] = 0\n                    array[j] = 0\n    if sum(array) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.strip()\n    n = len(s)\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if i + j + 1 >= len(dp[i]):\n                dp[i + 1][j + 1] = 0\n            elif s[i] == s[j + 1]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n    longest = 0\n    for i in range(n):\n        if dp[-1][i] == -1:\n            continue\n        if dp[-1][i] > longest:\n            longest = dp[-1][i]\n    if longest == 0:\n        return '0'\n    return str(longest)"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n <= 0:\n        return \"0\"\n    if len(s) <= 1:\n        return str(0)\n\n    n_dict = {}\n    for i in range(1, n + 1):\n        for j in range(len(s)):\n            key = s[j:j + i]\n            if key in n_dict:\n                n_dict[key] += 1\n            else:\n                n_dict[key] = 1\n    if 1 in n_dict.values():\n        max_len = max(list(n_dict.values()))\n        l = []\n        for k, v in n_dict.items():\n            if v == max_len:\n                l.append(k)\n        return str(max_len) + \",\" + \",\".join(l)\n    else:\n        return str(0)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function accepts a string as parameter and returns a string as its result.\n    \"\"\"\n    # Write your code here\n    a, b = stdin.split()\n    n = int(a)\n    s = list(b)\n    max = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if i + 1 <= j:\n                if s[i] == s[j]:\n                    if j - i >= max:\n                        max = j - i\n    if max == 0:\n        return \"0\"\n    else:\n        return str(max)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[0])\n    S: str = stdin.split()[1]\n    memo: Dict[int, str] = dict()\n    memo[0] = \"\"\n    memo[1] = S[0]\n    count: Dict[str, int] = dict()\n    for i in range(2, N):\n        if S[i - 1] == memo[i - 1]:\n            memo[i] = memo[i - 1] + S[i - 1]\n            count[memo[i]] = count.get(memo[i], 0) + 1\n        else:\n            memo[i] = S[i]\n            count[memo[i]] = count.get(memo[i], 0) + 1\n    max_len: int = 0\n    for i in range(N):\n        if count[memo[i]] == 2:\n            max_len = max(max_len, len(memo[i]))\n    return str(max_len) if max_len!= 0 else \"0\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split()[1:]\n\n    max_len = 0\n    max_sub_strings = set()\n\n    for i in range(len(S)):\n        substring = S[i]\n        for j in range(i + 1, len(S)):\n            substring += S[j]\n            if substring in max_sub_strings:\n                max_len = max(max_len, len(substring))\n            else:\n                max_sub_strings.add(substring)\n\n    if max_len == 0:\n        return \"0\"\n    else:\n        return str(max_len)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n    max_len = 0\n    prev_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if string[i] == string[j]:\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n    if max_len > 0:\n        print(max_len)\n    else:\n        print(0)"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Your code here\n    return str(max(len(longest_substring_with_duplicate(stdin)) for _ in range(n)))"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    S: str = stdin.strip()\n    longest_non_overlapping_substring: int = 0\n    for i in range(0, N - 1):\n        for j in range(1, N - i):\n            if (S[i] == S[i + j]):\n                longest_non_overlapping_substring = max(longest_non_overlapping_substring, i + j + 1)\n    if longest_non_overlapping_substring!= 0:\n        print(longest_non_overlapping_substring)\n    else:\n        print(0)\n\n\ndef"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    max = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            for k in range(i+1, j+1):\n                if S[i:k] == S[j:k+1]:\n                    if max < k - i:\n                        max = k - i\n    if max == 0:\n        print(0)\n    else:\n        print(max)\n    return None\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strs = stdin.strip().split()\n    len_strs = len(strs)\n    if len_strs == 1:\n        return 0\n    max_len = 0\n    for i in range(0, len_strs):\n        cur_len = 0\n        for j in range(i, len_strs):\n            if cur_len + len(strs[j]) <= n:\n                cur_len += len(strs[j])\n                max_len = max(max_len, cur_len)\n            else:\n                break\n    if max_len == 0:\n        return 0\n    else:\n        return max_len"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(n * (n - 1) / 2 - n)\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if a % 2 == 0:\n        return str(n)\n    else:\n        return str(n + (n - 1 - a) // 2)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        return '0'\n    houses = [1, n]\n    houses_start_pos = 0\n    while houses_start_pos < len(houses) - 1:\n        if houses[houses_start_pos] == a:\n            return str(min(houses[houses_start_pos + 1], houses[houses_start_pos - 1]))\n        houses_start_pos += 2\n    return str(min(houses[houses_start_pos], houses[houses_start_pos - 1]))"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = a + 1\n    a = a % (n + 1)\n    if a == n:\n        a = n\n    return str(a - 1)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a = stdin.split()\n    n, a = int(n), int(a)\n    return str(2 * (n // 2 - (a - 1)) + 1)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(min(n, a))\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... ''')\n    '2'\n    >>> solution('''8 5\n   ... ''')\n    '3'\n    \"\"\"\n    n, a = map(int, stdin.split())\n    return str(min(abs(i - a) for i in range(1, n + 1)))\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 2\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 8 5\n   ... ''')\n    '3'\n    \"\"\"\n    n, a = map(int, stdin.split())\n    if n % 2 == 0:\n        return a\n    return (a + 1 + n - a) // 2\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(min(n - a, a - 1))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    lightsabers = sorted(map(int, stdin.split()))\n    colors = {lightsabers[0]}\n    for i in range(1, n):\n        colors.add(lightsabers[i])\n    for i in range(1, n):\n        if lightsabers[i - 1] + 1!= lightsabers[i] and lightsabers[i] - lightsabers[i - 1] > 2:\n            return 'NO'\n    return 'YES'\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_all_colors(intervals: List[Tuple[int, int]]) -> bool:\n        for i in range(1, len(intervals)):\n            if intervals[i][0] > intervals[i-1][1] + 1:\n                return False\n        return True\n    \n    def check_at_least_one_colors(intervals: List[Tuple[int, int]]) -> bool:\n        for i in range(1, len(intervals)):\n            if intervals[i][0] - 1 == intervals[i-1][1] or intervals[i][1] - 1 == intervals[i-1][0]:\n                return False\n        return True\n\n    n, m = list(map(int, stdin.split()))\n    lightsaber_colors = list(map(int, stdin.split()))\n\n    intervals = []\n    for i in range(n):\n        intervals.append((lightsaber_colors[i], 0))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            intervals.append((lightsaber_colors[i], lightsaber_colors[j]))\n            \n    for i in range(m):\n        for j in range(i + 1, m):\n            intervals.append((lightsaber_colors[i], lightsaber_colors[j]))\n\n    print(intervals)\n    \n    return \"NO\" if not check_all_colors(intervals) or not check_at_least_one_colors(intervals) else \"YES\""
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 2\n   ... 1 1 2 2 1\n   ... 1 2\n   ... ''')\n    'YES'\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    colors = list(map(int, stdin.split()))\n    color_count = {i: 0 for i in range(1, m+1)}\n    total_lightsaber_count = 0\n    for i in range(n):\n        total_lightsaber_count += colors[i]\n        color_count[colors[i]] += 1\n    if total_lightsaber_count == m:\n        for i in range(1, m+1):\n            if color_count[i] == 0:\n                continue\n            if color_count[i] <= color_count[i-1]:\n                return 'NO'\n    if total_lightsaber_count < m:\n        return 'NO'\n    for i in range(1, m+1):\n        if color_count[i] == 0:\n            continue\n        if color_count[i] == color_count[i-1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *lightsabers = list(map(int, stdin.split()))\n    k = max(lightsabers)\n    possible = False\n    for k1 in range(1, k + 1):\n        k2 = k - k1\n        if sum(lightsabers) == n - k1 - k2:\n            possible = True\n            break\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    colors = list(map(int, stdin.split()))\n    counts = list(map(int, stdin.split()))\n\n    index = 1\n    interval = []\n\n    for c in range(1, m+1):\n        for i in range(index, n):\n            if i == n - 1:\n                break\n            if counts[i] >= c:\n                interval.append([counts[i], counts[i+1]])\n        index += 1\n\n    if not interval:\n        return \"NO\"\n    count = sum(c[0] for c in interval)\n    if count == n:\n        return \"YES\"\n    elif count < n:\n        return \"NO\"\n    else:\n        return \"YES\" if sum(c[1] - c[0] for c in interval) == n - count else \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lightsaber_colors = list(map(int, stdin.split()))\n    lightsaber_colors.sort()\n    jedi_colors = tuple(range(1, n + 1))\n    for k in range(1, n + 1):\n        if k == 1:\n            k1 = 0\n            k2 = 0\n        else:\n            k1 = k - 1\n            k2 = k\n        if k2 >= n:\n            break\n        if jedi_colors[k2 - 1]!= 0:\n            if (k1, k2) == (0, 0):\n                continue\n            interval = (0, k1, k2)\n            if interval in all_intervals:\n                return 'YES'\n            all_intervals.add(interval)\n        if k1!= 0:\n            if jedi_colors[k1 - 1]!= 0:\n                if (k1, k2) == (0, 0):\n                    continue\n                interval = (k1, 0, k2)\n                if interval in all_intervals:\n                    return 'YES'\n                all_intervals.add(interval)\n        if k2!= n:\n            if jedi_colors[k2]!= 0:\n                if (k1, k2) == (0, 0):\n                    continue\n                interval = (k1, k2, n)\n                if interval in all_intervals:\n                    return 'YES'\n                all_intervals.add(interval)\n    return 'NO'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    c = list(Counter(lights).values())\n    if min(c) - max(c) > 1:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k_1, k_2, k_3, k_4 = map(int, stdin.split())\n    colors = {1, 2, 3, 4}\n    k = sum(colors)\n    if k_1 + k_2 + k_3 + k_4 == k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k_1, k_2 = list(map(int, stdin.split()))\n    color_count = dict.fromkeys(range(1, m + 1), 0)\n    for i in range(1, n + 1):\n        color_count[k_1] += 1\n        color_count[k_2] += 1\n    for i in range(1, m + 1):\n        if k_1 <= color_count[i] <= k_2:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lightsabers = list(map(int, stdin.split()))\n    counts = list(map(int, stdin.split()))\n    res = False\n\n    for i in range(n):\n        if sum(lightsabers[i:i+m]) == n:\n            if max(lightsabers[i:i+m]) - min(lightsabers[i:i+m]) == m:\n                res = True\n                break\n    print('YES' if res else 'NO')\n    return 'YES' if res else 'NO'\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    count = 1\n    m_count = c_count = 0\n    m_win = c_win = False\n    while count <= n:\n        m_count = c_count = 0\n        m_win = c_win = False\n        m_win = True\n        for line in stdin.split(\"\\n\")[1:]:\n            m_count += int(line.split()[0])\n            c_count += int(line.split()[1])\n            if c_count >= m_count:\n                c_win = True\n                break\n        if m_win:\n            count += 1\n            m_win = False\n            c_win = False\n        else:\n            count += 1\n            m_win = c_win = False\n    if m_count > c_count:\n        return \"Mishka\"\n    elif c_count > m_count:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin.split()[0])\n    res = 'Chris'\n    for i in range(n):\n        line = stdin.split()[i + 1]\n        if line[0] == 'Mishka':\n            if line[1] == 'Chris':\n                res = 'Chris'\n            else:\n                res = 'Mishka'\n            break\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    result, n = stdin.split()\n    n = int(n)\n    score = 0\n    score_2 = 0\n    for i in range(n):\n        score, score_2 = score_2, score\n        if (stdin.split()[i][0]) > (stdin.split()[i][1]):\n            score += 1\n        elif (stdin.split()[i][0]) < (stdin.split()[i][1]):\n            score_2 += 1\n        elif (stdin.split()[i][0]) == (stdin.split()[i][1]):\n            score_2 = score\n            score = 0\n\n    if score > score_2:\n        return \"Mishka\"\n    if score_2 > score:\n        return \"Chris\"\n    if score == score_2:\n        return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n    n = int(stdin)\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n    data = []\n    for _ in range(n):\n        data.append(tuple(map(int, stdin.split())))\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\n    max_score = 0\n    chosen = None\n    for i in data:\n        player = i[0]\n        score = i[1]\n        if score > max_score:\n            max_score = score\n            chosen = player\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n    if chosen is None:\n        return \"Friendship is magic!^^\"\n    elif chosen == 0:\n        return \"Mishka\"\n    else:\n        return \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def play_round(m, c):\n        if m > c:\n            return \"Mishka\"\n        elif m < c:\n            return \"Chris\"\n        else:\n            return \"Friendship is magic!^^\"\n\n    m, n = map(int, stdin.split())\n    result = \"\"\n    for i in range(n):\n        result += play_round(int(input()), int(input()))\n        print(result)\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, rounds = stdin.split()\n    n = int(n)\n    rounds = [tuple(map(int, input().split())) for _ in range(int(rounds))]\n    max_cnt = 0\n    max_player = \"Mishka\"\n    for r in rounds:\n        if r[0] > r[1]:\n            max_cnt += 1\n            max_player = \"Chris\"\n        elif r[0] == r[1]:\n            max_cnt = 0\n            max_player = \"Friendship is magic!^^\"\n    return max_player if max_cnt > 0 else \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        m = int(input())\n        c = list(map(int, input().split()))\n        if m > c[0] and m > c[1]:\n            return \"Chris\"\n        elif m < c[0] and m < c[1]:\n            return \"Mishka\"\n        else:\n            return \"Friendship is magic!^^\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = [[0 for i in range(6)] for j in range(2)]\n    for i in range(n):\n        m, c = map(int, stdin.split()[i * 2 + 1].split(\" \"))\n        scores[m > c] += 1\n\n    if scores[0] == scores[1]:\n        return \"Friendship is magic!^^\"\n\n    return \"Mishka\" if scores[0] > scores[1] else \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m_t, c_t = map(lambda s: map(int, s.split()), stdin.strip().split('\\n')[:2])\n    m_t = dict(zip(m_t, itertools.repeat(1)))\n    c_t = dict(zip(c_t, itertools.repeat(2)))\n    c_score = sum(map(lambda c: c_t[c], c_t.keys()))\n    m_score = sum(map(lambda m: m_t[m], m_t.keys()))\n    if c_score < m_score:\n        return \"Mishka\"\n    if m_score < c_score:\n        return \"Chris\"\n    return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [[int(m) for m in stdin.split()] for i in range(n)]\n    if n == 1:\n        if max(m[0]) > max(m[1]):\n            return \"Mishka\"\n        if max(m[0]) < max(m[1]):\n            return \"Chris\"\n        if max(m[0]) == max(m[1]):\n            return \"Friendship is magic!^^\"\n    if n == 2:\n        if max(m[0]) > max(m[1]):\n            return \"Mishka\"\n        if max(m[0]) < max(m[1]):\n            return \"Chris\"\n        if max(m[0]) == max(m[1]):\n            return \"Friendship is magic!^^\"\n    if n == 3:\n        if max(m[0]) > max(m[1]):\n            if max(m[0]) > max(m[2]):\n                return \"Mishka\"\n            if max(m[0]) < max(m[2]):\n                return \"Chris\"\n            if max(m[0]) == max(m[2]):\n                return \"Friendship is magic!^^\"\n        if max(m[0]) < max(m[1]):\n            if max(m[0]) > max(m[2]):\n                return \"Chris\"\n            if max(m[0]) < max(m[2]):\n                return \"Mishka\"\n            if max(m[0]) == max(m[2]):\n                return \"Friendship is magic!^^\"\n        if max(m[0]) == max(m[1]):\n            if max(m[0]) > max(m[2]):\n                return \"Chris\"\n            if max(m[0]) < max(m[2]):\n                return \"Mishka\"\n            if max(m[0]) == max(m[2]):\n                return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size, bombs, field = stdin.split()\n    size = int(size), int(size)\n    field = list(field)\n    counter = 0\n    for i in range(size[1]):\n        for j in range(size[0]):\n            if field[i][j] == '*':\n                counter += 1\n    if counter == 0:\n        return \"YES\"\n    if bombs == \"0\":\n        return \"YES\"\n    if size == \"2\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"3\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"4\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"5\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"6\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"7\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"8\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"9\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if size == \"10\":\n        bombs = bombs[0]\n        bombs = int(bombs)\n        if bombs % 2!= 0:\n            return \"NO\"\n        elif bombs % 2 == 0 and bombs % 3!= 0:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if bombs % 3 == 0:\n                return \"YES\"\n            else:\n                return \"NO\""
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [[int(e) for e in stdin[i*m:(i+1)*m]] for i in range(n)]\n    if field[0][0] == 0:\n        return \"NO\"\n    for i in range(1, n):\n        if field[i][0] == 0:\n            field[i][0] = field[i-1][0]\n        elif field[i][0] == field[i-1][0]:\n            field[i][0] = 0\n        else:\n            return \"NO\"\n    for i in range(1, m):\n        if field[0][i] == 0:\n            field[0][i] = field[0][i-1]\n        elif field[0][i] == field[0][i-1]:\n            field[0][i] = 0\n        else:\n            return \"NO\"\n    for i in range(1, n):\n        for j in range(1, m):\n            if field[i][j] == 0:\n                continue\n            if field[i-1][j] == field[i][j-1] == field[i][j+1] == field[i+1][j] == 0:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.strip().split('\\n')\n    for row in range(1, n):\n        for col in range(1, m):\n            if field[row][col] == '*':\n                field[row][col] = '1'\n                field[row - 1][col] = '1'\n                field[row + 1][col] = '1'\n                field[row][col - 1] = '1'\n                field[row][col + 1] = '1'\n    for row in range(n):\n        for col in range(m):\n            if field[row][col] == '1':\n                field[row][col] = '.'\n    for row in range(1, n):\n        field[row][0] = '.'\n        field[row][-1] = '.'\n    for col in range(1, m):\n        field[0][col] = '.'\n        field[-1][col] = '.'\n\n    for row in range(n):\n        for col in range(m):\n            if field[row][col] == '*':\n                field[row][col] = '1'\n                field[row - 1][col] = '1'\n                field[row + 1][col] = '1'\n                field[row][col - 1] = '1'\n                field[row][col + 1] = '1'\n    return '\\n'.join([''.join(row) for row in field])\n\nprint(solution(stdin))\n\n---\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_neighbours(x, y):\n        return [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n\n    def get_bombs(field):\n        return field.count(\"*\")\n\n    def check_bombs(field):\n        total = 0\n        for i in range(len(field)):\n            for j in range(len(field[i])):\n                if field[i][j] == \"*\":\n                    total += 1\n        return total\n\n    def get_field_without_bombs(field):\n        field_without_bombs = []\n        for i in range(len(field)):\n            field_without_bombs.append([])\n            for j in range(len(field[i])):\n                if field[i][j]!= \"*\":\n                    field_without_bombs[i].append(field[i][j])\n        return field_without_bombs\n\n    def check_neighbours_bombs(field):\n        total = 0\n        for x, y in get_neighbours(0, 0):\n            if field[x][y] == \"*\":\n                total += 1\n        return total\n\n    def check_validity(field):\n        field_without_bombs = get_field_without_bombs(field)\n        bombs = get_bombs(field)\n        if check_neighbours_bombs(field) == bombs or bombs == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    field = stdin.split()\n    field = [[c for c in line] for line in field]\n    return check_validity(field)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    field = stdin.split()\n    if n*m!= len(field):\n        return \"NO\"\n    flag = True\n    #\u70ba\u4e86\u907f\u514d\u91cd\u8907\u7684\u5224\u65b7\n    for i in range(n):\n        for j in range(m):\n            if field[i*m+j]!= \"*\":\n                if (field[i*m+j] in \"1*\") and (flag):\n                    if i > 0 and j > 0:\n                        if field[i*m+j-1]!= \"*\" and field[(i-1)*m+j-1]!= \"*\":\n                            field[i*m+j] = \"*\"\n                            flag = False\n                    if i > 0 and j < m - 1:\n                        if field[i*m+j+1]!= \"*\" and field[(i-1)*m+j+1]!= \"*\":\n                            field[i*m+j] = \"*\"\n                            flag = False\n                    if i < n - 1 and j > 0:\n                        if field[i*m+j-1]!= \"*\" and field[(i+1)*m+j-1]!= \"*\":\n                            field[i*m+j] = \"*\"\n                            flag = False\n                    if i < n - 1 and j < m - 1:\n                        if field[i*m+j+1]!= \"*\" and field[(i+1)*m+j+1]!= \"*\":\n                            field[i*m+j] = \"*\"\n                            flag = False\n    #print(field)\n    if \"*\" not in field:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nsolution(stdin)"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [[*map(str, stdin.split()[i])] for i in range(n)]\n\n    def neigh(x, y):\n        return sum(1 for x2, y2 in ((x-1, y), (x+1, y), (x, y-1), (x, y+1)) if 0 <= x2 < n and 0 <= y2 < m and field[x2][y2]!= '*')\n\n    def check(x, y):\n        if field[x][y]!= '*':\n            if neigh(x, y) == (1 if field[x][y] == '1' else 8):\n                return 'YES'\n            return 'NO'\n        else:\n            if any(neigh(x, y) == (1 if field[x][y] == '1' else 8) for x in range(n) for y in range(m)):\n                return 'NO'\n            return 'YES'\n\n    return 'YES' if check(0, 0) == 'YES' else 'NO'\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    lst = [[char for char in line] for line in stdin.split('\\n')]\n    \n    for i in range(n):\n        for j in range(m):\n            if '*' in lst[i][j]:\n                lst[i][j] = 0\n            if '.' in lst[i][j]:\n                lst[i][j] = 2\n    \n    def is_valid(lst):\n        for i in range(n):\n            for j in range(m):\n                if lst[i][j] == 2:\n                    if lst[i][j+1]!= '*' and lst[i+1][j]!= '*' and lst[i][j-1]!= '*' and lst[i-1][j]!= '*':\n                        return False\n        return True\n    \n    if is_valid(lst):\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    field = stdin.strip().split('\\n')\n    if all(isinstance(x, str) for x in field) and len(field) == n and n <= 100 and len(field[0]) == m:\n        field = [[x for x in x] for x in field]\n        field = [[x.replace('*', '1') for x in y] for y in field]\n        field = [[x.replace('.', '0') for x in y] for y in field]\n        field = [[int(x) for x in y] for y in field]\n        for i in range(n):\n            for j in range(m):\n                if not 1 <= field[i][j] <= 8:\n                    return 'NO'\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        line = stdin.splitlines()[i]\n        for j, el in enumerate(line):\n            matrix[i][j] = int(el)\n    if len(set([len(l) for l in matrix])) == 1:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    div = n // 10\n    while div >= 1:\n        n = n - div\n        div = n // 10\n    return str(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(p)\n\n    n = int(stdin)\n    k = n\n    while k >= 1:\n        k = k // 10\n    return str(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = []\n    candies_at_one_day = 0\n    while True:\n        if n == 0:\n            break\n        n -= max(1, n // 10)\n        candies.append(n)\n        candies_at_one_day += 1\n    candies_at_two_days = max(1, candies_at_one_day // 2)\n    candies_at_three_days = max(1, candies_at_two_days // 2)\n    candies_at_four_days = max(1, candies_at_three_days // 2)\n    candies_at_five_days = max(1, candies_at_four_days // 2)\n    candies_at_six_days = max(1, candies_at_five_days // 2)\n    candies_at_seven_days = max(1, candies_at_six_days // 2)\n    candies_at_eight_days = max(1, candies_at_seven_days // 2)\n    candies_at_nine_days = max(1, candies_at_eight_days // 2)\n    candies_at_ten_days = max(1, candies_at_nine_days // 2)\n    candies_at_eleven_days = max(1, candies_at_ten_days // 2)\n    candies_at_twelve_days = max(1, candies_at_eleven_days // 2)\n    candies_at_thirteen_days = max(1, candies_at_twelve_days // 2)\n    candies_at_fourteen_days = max(1, candies_at_thirteen_days // 2)\n    candies_at_fifteen_days = max(1, candies_at_fourteen_days // 2)\n    candies_at_sixteen_days = max(1, candies_at_fifteen_days // 2)\n    candies_at_seventeen_days = max(1, candies_at_sixteen_days // 2)\n    candies_at_eighteen_days = max(1, candies_at_seventeen_days // 2)\n    candies_at_nineteen_days = max(1, candies_at_eighteen_days // 2)\n    candies_at_twenty_days = max(1, candies_at_nineteen_days // 2)\n    candies_at_twenty_one_days = max(1, candies_at_twenty_days // 2)\n    candies_at_twenty_two_days = max(1, candies_at_twenty_one_days // 2)\n    candies_at_twenty_three_days = max(1, candies_at_twenty_two_days // 2)\n    candies_at_twenty_four_days = max(1, candies_at_twenty_three_days // 2)\n    candies_at_twenty_five_days = max(1, candies_at_twenty_four_days // 2)\n    candies_at_twenty_six_days = max(1, candies_at_twenty_five_days // 2)\n    candies_at_twenty_seven_days = max(1, candies_at_twenty_six_days // 2)\n    candies_at_twenty_eight_days = max(1, candies_at_twenty_seven_days // 2)\n    candies_at_twenty_nine_days = max(1, candies_at_twenty_eight_days // 2)\n    candies_at_thirty_days = max(1, candies_at_twenty_nine_days // 2)\n    candies_at_thirty_one_days = max(1, candies_at_thirty_days // 2)\n    candies_at_thirty_two_days = max(1, candies_at_thirty_one_days // 2)\n    candies_at_thirty_three_days = max(1, candies_at_thirty_two_days // 2)\n    candies_at_thirty_four_days = max(1, candies_at_thirty_three_days // 2)\n    candies_at_thirty_five_days = max(1, candies_at_thirty_four_days // 2)\n    candies_at_thirty_six_days = max(1, candies_at_thirty_five_days // 2)\n    candies_at_thirty_seven_days = max(1, candies_at_thirty_six_days // 2)\n    candies_at_thirty_eight_days = max(1, candies_at_thirty_seven_days // 2)\n    candies_at_thirty_nine_days = max(1, candies_at_thirty_eight_days // 2)\n    candies_at_fourty_days = max(1, candies_at_thirty_nine_days // 2)\n    candies_at_fourty_one_days = max(1, candies_at_fourty_days // 2)\n    candies_at_fourty_two_days = max(1, candies_at_fourty_one_days // 2)\n    candies_at_fourty_three_days = max(1, candies_at_fourty_two_days // 2)\n    candies_at_fourty_four_days = max(1, candies_at_fourty_three_days // 2)\n    candies_at_fourty_five_days = max(1, candies_at_fourty_four_days // 2)\n    candies_at_fourty_six_days = max(1, candies_at_fourty_five_days // 2)\n    candies_at_fourty_seven_days = max(1, candies_at_fourty_six_days // 2)\n    candies_at_fourty_eight_days = max(1, cand"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c = int(stdin)\n    for i in range(100, 100, -1):\n        if c % i == 0:\n            return str(i)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = 0\n    cnt = 1\n    while candies < n:\n        candies += (n - candies) // 2\n        candies += (n - candies) // 4\n        cnt += 2\n    return str(cnt)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = n // 10\n    while n >= 2:\n        n //= 10\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n/2))"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    k = 0\n    # try to find the number of candies that are divisible by 10 with the same amount\n    # if the number of candies is bigger than the number of candies in the box, than k = number of candies left in the box\n    # if the number of candies is smaller than the number of candies in the box, k = number of candies left in the box * 10\n    # if the number of candies is equal to the number of candies in the box, k = number of candies left in the box\n    while n > 0:\n        if n % 10 == 0:\n            k = n\n        elif n % 10 > k % 10:\n            k += 10\n        elif n % 10 < k % 10:\n            k += n % 10\n        else:\n            k = n\n        n //= 10\n    return str(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = n // 2\n    k = x // 10\n    while x >= k:\n        k += (x // 10)\n    print(k)\n    return k\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    st_n: str = stdin.strip()\n    n = len(st_n)\n    link_sum = 0\n    for i in range(n):\n        if st_n[i] == \"-\":\n            link_sum += 1\n        elif st_n[i] == \"o\":\n            if link_sum == 0 or link_sum == 1:\n                link_sum += 1\n            else:\n                link_sum -= 1\n    if link_sum == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split()\n    n = len(input[0])\n    \n    def interlace(str1, str2):\n        i = 0\n        j = 0\n        while i < len(str1) or j < len(str2):\n            if j == len(str2):\n                yield str1[i:]\n                i += len(str1)\n            elif i == len(str1):\n                yield str2[j:]\n                j += len(str2)\n            elif str1[i]!= str2[j]:\n                yield str1[i:]\n                i += len(str1)\n                yield str2[j:]\n                j += len(str2)\n            else:\n                i += 1\n                j += 1\n        \n    def remove_pearl(str1, index, left, right):\n        i = index + 1\n        while i < len(str1):\n            if str1[i] == '-':\n                str1 = str1[:index] + str1[index+1:]\n            if i >= left and i < right:\n                str1 = str1[:index] + str1[index+1:]\n            if str1[i] == '-':\n                str1 = str1[:index] + str1[index+1:]\n            i += 1\n        \n    def find_interlace(str1, str2):\n        i = 0\n        while i < len(str1) or i < len(str2):\n            if i == len(str1):\n                if str1[i:] == str2[i:]:\n                    return True\n                else:\n                    return False\n            elif i == len(str2):\n                if str1[i:] == str2[i:]:\n                    return True\n                else:\n                    return False\n            elif str1[i]!= str2[i]:\n                if str1[i:] == str2[i:]:\n                    return True\n                elif str2[i:] == str1[i:]:\n                    return True\n                else:\n                    return False\n            else:\n                i += 1\n                \n    if len(input) == 1:\n        return 'YES' if input[0].count('-') % 2 == 1 else 'NO'\n    \n    #First we need to clear all the '-', so we can identify a unique start and end\n    input = ''.join(input).replace('-', '')\n    \n    #Split the string in half, to get a left and a right half\n    left = input[:n//2]\n    right = input[n//2:]\n    \n    #Next, we need to make sure that the length of the left and right half is odd\n    if (len(left) % 2 == 0) or (len(right) % 2 == 0):\n        return 'NO'\n    \n    #Now, we need to insert a link between two adjacent pearls\n    left_interlace = interlace(left, left)\n    right_interlace = interlace(right, right)\n    \n    #Now we want to make sure that there is only one link between every pair\n    for left, right in zip(left_interlace, right_interlace):\n        if left.count('-')!= 1 and right.count('-')!= 1:\n            return 'NO'\n        else:\n            left_pearl = left[left.index('-')]\n            right_pearl = right[right.index('-')]\n            #Now, we need to check that we have a link between the two pearls\n            if left_pearl!= right_pearl:\n                return 'NO'\n            else:\n                if find_interlace(left_pearl, right_pearl):\n                    #We found a link between the two pearls\n                    if left_pearl == '-':\n                        remove_pearl(left, left_pearl.index('-') + 1, 0, n//2)\n                    else:\n                        remove_pearl(right, right_pearl.index('-') + 1, n//2, n)\n                else:\n                    #We found a pearl between the two pearls\n                    if left_pearl == '-':\n                        remove_pearl(left, left_pearl.index('-') + 1, 0, n//2)\n                    else:\n                        remove_pearl(right, right_pearl.index('-') + 1, n//2, n)\n    \n    #Now we need to make sure that there is only one link between every pair of adjacent pearls\n    for left, right in zip(left_interlace, right_interlace):\n        if left.count('-')!= 1 and right.count('-')!= 1:\n            return 'NO'\n        else:\n            left_pearl = left[left.index('-')]\n            right_pearl = right[right.index('-')]\n            #Now, we need to check that we have a link between the two pearls\n            if left_pearl!= right_pearl:\n                #We found a link between the two pearls\n                if left_pearl == '-':\n                    remove_pearl(left, left_pearl.index('-') + 1, 0, n//2)\n                else:\n                    remove_pearl(right, right_pearl.index('-') + 1, n//2, n)\n            else:\n                #We found a pearl between the two pearls\n                if left_pearl == '-':\n                    remove_pearl(left, left_pearl.index('-') + 1, 0, n//2)\n                else:\n                    remove_pearl(right, right_pearl.index('-') + 1, n//2, n)\n    \n    #Finally, we need to make sure that every link appears exactly twice\n    for left, right in zip(left_interlace, right_interlace):\n        if left.count('-')!= 1 and right.count('-')!= 1:\n            return 'NO'\n        else:\n            left_pearl = left[left.index('-')]\n            right_pearl = right[right.index('-')]\n            #Now, we need to check that we have a link between the two pearls\n            if left_pearl!= right_pearl:\n                #We found a link between the two pearls\n                if left_pearl == '-':\n                    remove_pearl(left, left_pearl.index('-') + 1, 0, n//2)\n                else:\n                    remove_pearl(right, right_pearl.index('-') + 1, n//2, n)\n            else:\n                #We found a pearl between the two pearls\n                if left_pearl == '-':\n                    remove_pearl(left, left_pearl.index('-') + 1, 0, n//2)\n                else:\n                    remove_pearl(right, right_pearl.index('-') + 1, n//2, n)\n    \n    return 'YES'"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for i in range(n - 1):\n        if stdin[i] == 'o' and stdin[i + 1] == '-':\n            return 'NO'\n        if stdin[i] == '-':\n            return 'NO'\n        if stdin[i] == 'o':\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    N = N // 2\n    \n    def count_links(x: int, y: int) -> int:\n        return stdin[x].count('-') + stdin[y].count('-')\n    \n    def is_valid(x: int, y: int) -> bool:\n        return x!= y and stdin[x]!= stdin[y]\n    \n    def make_link(x: int, y: int) -> None:\n        stdin[x] = stdin[x][:y] + '-' + stdin[x][y+1:]\n    \n    def make_pearl(x: int, y: int) -> None:\n        stdin[x] = stdin[x][:y] + 'o' + stdin[x][y+1:]\n    \n    \n    def process(x: int, y: int) -> bool:\n        if x == N:\n            return True\n        if count_links(x, y) == 0:\n            return False\n        if not is_valid(x, y):\n            return False\n        if count_links(x, y)!= count_links(x+1, y) and count_links(x, y+1)!= count_links(x+1, y+1):\n            return False\n        \n        make_link(x, y)\n        make_pearl(x, y)\n        if process(x+1, y):\n            return True\n        \n        make_link(x, y)\n        make_pearl(x, y)\n        if process(x+1, y):\n            return True\n        \n        return False\n    \n    if process(0, 0):\n        print('YES')\n    else:\n        print('NO')\n    return\n\nsolution(\"o-o--\")"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get the string\n    s = stdin\n    # split the string\n    s = s.split()\n    # make a list\n    s = list(s)\n    # get the length of the string\n    length = len(s)\n    # iterate over the string\n    for i in range(length):\n        # if the string is not a single char, there must be an error\n        if length!= 1:\n            # if the character is a dash, check if there is a link\n            if s[i] == '-':\n                # if there is a link, check if it's adjacent to another link\n                if i!= length - 1:\n                    # if there's no link adjacent, there must be an error\n                    if s[i + 1]!= '-':\n                        # if there is no link adjacent, return error\n                        return \"NO\"\n                # if there is a link, check if it's adjacent to another pearl\n                if i!= 0:\n                    # if there's no pearl adjacent, there must be an error\n                    if s[i - 1]!= 'o':\n                        # if there is no pearl adjacent, return error\n                        return \"NO\"\n        # if the character is not a dash, there must be an error\n        if length!= 1:\n            # if the character is a dash, check if there is a link\n            if s[i] == 'o':\n                # if there is a link, check if it's adjacent to another link\n                if i!= length - 1:\n                    # if there's no link adjacent, there must be an error\n                    if s[i + 1]!= 'o':\n                        # if there is no link adjacent, return error\n                        return \"NO\"\n                # if there is a link, check if it's adjacent to another pearl\n                if i!= 0:\n                    # if there's no pearl adjacent, there must be an error\n                    if s[i - 1]!= '-':\n                        # if there is no pearl adjacent, return error\n                        return \"NO\"\n    # return 'YES' if there are no error and 'NO' otherwise\n    return 'YES'\n\n\nsolution(\"-o-o--\")\nsolution(\"-o---\")\nsolution(\"ooo\")\nsolution(\"--oo\")\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    necklace = stdin.pop()\n    pearls_needed = 0\n    links = 0\n    while len(necklace) > 1:\n        if necklace[-1] == '-':\n            pearls_needed += 1\n        else:\n            links += 1\n        necklace.pop()\n        if len(necklace) == 1:\n            pearls_needed += 1\n        else:\n            links += 1\n    if links!= pearl_links:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    necklace = stdin\n    current = 0\n    while current < size:\n        previous = current\n        while previous < size and necklace[previous]!= \"o\":\n            previous += 1\n        current = previous + 1\n        if previous + 1 == size:\n            return \"NO\"\n        if previous == size - 1:\n            necklace = necklace[:previous] + \"-\" + necklace[previous:]\n        else:\n            necklace = necklace[:previous] + \"-\" + necklace[previous+1:]\n    return \"YES\"\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) % 2 == 0 else 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.strip('\\n')\n    n = int(s)\n    ans = ''\n    for i in range(1,n):\n        ans = ans + '-'\n    s = ans + 'o'\n    l = 0\n    r = len(s)\n    n = int(r/2)\n    s = s[l:n] + s[n:r]\n    i = 0\n    k = 1\n    while i < n:\n        if i + 1 < n and s[i]!= s[i+1]:\n            s = s[:i] + s[i+1:]\n            i = i - k\n            k = k + 1\n            i = i + 1\n        i = i + 1\n    if i == n:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n\"\"\"\n\nfrom itertools import zip_longest\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    necklace = list(stdin)\n    first = 0\n    while first < len(necklace)-2:\n        if necklace[first]!= '-' and necklace[first]!= 'o':\n            return \"NO\"\n        first += 1\n    if first == len(necklace)-2:\n        return \"NO\"\n    else:\n        while True:\n            if necklace[first]!= '-':\n                return \"NO\"\n            else:\n                first += 1\n    return \"YES\""
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = k - 1\n    hobbit = n - k\n    while(pillows < hobbit):\n        hobbit -= 1\n        pillows += 1\n    pillows -= min(pillows, k - 1)\n    return str(pillows)\nprint(solution(input()))"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    stdin_list.pop()\n    n, m, k = map(int, stdin_list[0].split())\n    hobbit_pillows = list(map(int, stdin_list[1].split()))\n    pillows = k\n    hobbit = 0\n    while True:\n        pillows -= min(hobbit_pillows)\n        if pillows < 0:\n            pillows = 0\n            break\n        else:\n            hobbit += 1\n    return str(pillows)\n\nprint(solution(input()))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str( max(map(int, stdin.strip().split())) )\n\n\nstdin = \"\"\"\n3 10 3\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your code here\n    '''\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    n = a\n    m = b\n    k = c\n\n    def solution(n, m, k):\n        dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n        for i in range(n):\n            for j in range(m+1):\n                for k in range(k):\n                    if i == 0:\n                        dp[i][j] = j\n                    elif j == 0:\n                        dp[i][j] = i\n                    elif k == 0:\n                        dp[i][j] = i+j\n                    else:\n                        dp[i][j] = min(i+j, max(i+j, k+i+j-2*k, k+j-2*k))\n\n        return dp[n-1][m-1]\n\n    print(solution(n, m, k))\n    return dp[n-1][m-1]\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    pillows = 0\n    pillows_needed = 0\n    while pillows < m:\n        pillows += 1\n        pillows_needed += 1\n    return str(pillows_needed)\nprint(solution(input()))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example:\n        input:   4 6 2\n        output:  2\n        input:   3 10 3\n        output:  4\n        input:   3 6 1\n        output:  3\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    return str(max(n, m) - min(n, m))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n    pillows = k % n\n    return str(pillows)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(max(n, m)) for n, m, k in zip(*[iter(stdin.split())] * 3)])\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_hobits, num_pillows, num_beds = (int(x) for x in stdin.split())\n\n    pillows_to_hobits = num_pillows // num_hobits\n\n    pillows_hobits = num_pillows - (pillows_to_hobits * num_hobits)\n\n    num_hobits = num_hobits - 1\n\n    pillows_hobits = num_hobits - 1\n\n    pillows_max = num_pillows + 1\n\n    for i in range(num_hobits, 0, -1):\n        if i == num_hobits and i >= num_pillows_hobits:\n            return str(pillows_max)\n        else:\n            if i <= num_pillows_hobits:\n                pillows_max = min(pillows_max, i)\n    return str(pillows_max)\n\n'''\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn,m,k = [int(i) for i in stdin.split(' ')]\n\np=0\nwhile k>p:\n    p+=max(k-p,m)\nreturn p\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    dp = [0] * (n+1)\n    dp[0] = 0\n\n    for i in range(1, n+1):\n        res = 0\n        for j in range(i, 0, -1):\n            if j >= m:\n                continue\n            res = max(res, arr[i-1] - k*(j/m))\n            dp[i] = max(res, dp[i])\n    return str(dp[-1])"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    def f(x):\n        if x == 0:\n            return 0\n        l, r = 1, m\n        while l <= r:\n            mid = (l + r) // 2\n            if a[mid] >= k:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return a[l - 1] - k * (m - l)\n    l, r = 1, m\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] >= k:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return max(f(l - 1), f(r))"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    dp = [[-1] * (k+1) for _ in range(n)]\n\n    dp[0][0] = 0\n    for l in range(n):\n        for r in range(k, 0, -1):\n            if r == k:\n                continue\n            if l == 0:\n                dp[l][r] = a[l] - r\n            else:\n                dp[l][r] = max(dp[l-1][r], dp[l][r-1]) + a[l] - r\n\n    return str(dp[n-1][k])\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max_sub_array(n, m, k, a))\n\n\ndef"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, k = stdin.strip().split(\" \")\n    n, m, k = int(n), int(m), int(k)\n    nums = list(map(int, stdin.strip().split(\" \")))\n\n    nums.sort()\n    print(nums)\n    return 0"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    best_subarr = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a) + 1):\n            sum = 0\n            for k in range(i, j):\n                sum += a[k]\n            if sum <= k:\n                if best_subarr < sum - k:\n                    best_subarr = sum - k\n    return str(best_subarr)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    start = 0\n    while start < len(a) and start + m - 1 >= len(a):\n        #print(start, m, start + m - 1)\n        ans = max(ans, sum(a[start:start + m]) - k * ((start + m - 1) // m))\n        start += 1\n    return str(ans)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = j * arr[i]\n            else:\n                dp[i][j] = max(dp[i-1][j-1]+arr[i] + dp[i][j], dp[i-1][j]+arr[i])\n    return max(dp[n-1])\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * N\n    for i in range(N):\n        for j in range(i + 1):\n            dp[i] = max(dp[i], (a[i] - K) * int(i - j + 1) + dp[j])\n    return dp[N - 1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    if n == 1:\n        return str(0)\n    \n    l, r = 0, n-1\n    curr_sum = 0\n    while r >= l:\n        curr_sum += a[r]\n        r -= m\n        if curr_sum <= k:\n            l += 1\n        else:\n            curr_sum -= a[l]\n            l += 1\n    if curr_sum <= k:\n        return str(curr_sum)\n    else:\n        return str(0)\n\nsolution(*(input().split()))\n\"\"\"\n\n\n\"\"\"\n-----SOLUTION-----\n\nimport collections\nclass Solution:\n    def subarraySum(self, a: List[int], m: int, k: int) -> int:\n        if len(a) < m:\n            return 0\n        res = 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        sm = 0\n        for i in a:\n            sm += i\n            if sm - k in cnt:\n                res += cnt[sm - k]\n            cnt[sm] += 1\n        return res\n\"\"\"\n\n\"\"\"\n----SOLUTION 2----\n\nimport collections\nclass Solution:\n    def subarraySum(self, a: List[int], m: int, k: int) -> int:\n        if len(a) < m:\n            return 0\n        cnt = collections.defaultdict(int)\n        cnt[0] = 1\n        sm = 0\n        res = 0\n        for i in a:\n            sm += i\n            if sm - k in cnt:\n                res += cnt[sm - k]\n            cnt[sm] += 1\n        return res\n\"\"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = set()\n    max_length = 0\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in points:\n                points.add((i, j))\n                length = 0\n                k = 0\n                while k <= n:\n                    l = j\n                    while l >= 0:\n                        length += 1\n                        l += m\n                    k += 1\n                if length > max_length:\n                    max_length = length\n    return \" \".join(map(str, sorted(points)[::-1])) + \"\\n\" + str(max_length)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            grid[i][j] = sum(abs(grid[i - 1][k] - grid[i][j - 1]) for k in range(1, j))\n\n    def get_points(i, j):\n        for k in range(1, j):\n            grid[i][k] = grid[i][k - 1] + abs(grid[i][j] - grid[i][k])\n        return grid[i][j]\n\n    return''.join(map(str, get_points(1, m + 1))) + '\\n' +''.join(map(str, get_points(0, n + 1))) + '\\n' +''.join(map(str, get_points(n, m))) + '\\n' +''.join(map(str, get_points(n, m + 1)))"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def generate_polygon(n, m):\n        points = []\n        p1 = (0,0)\n        p2 = (0,m)\n        p3 = (n,m)\n        p4 = (n,0)\n        points.extend((p1,p2,p3,p4))\n        return points\n    def get_all_perimeter_points(points):\n        points_lst = []\n        for i in range(len(points)-1):\n            p1 = points[i]\n            p2 = points[i+1]\n            points_lst.append(p1)\n            points_lst.append(p2)\n        points_lst.append(points[0])\n        points_lst.append(points[-1])\n        return points_lst\n    points = generate_polygon(n,m)\n    points = get_all_perimeter_points(points)\n    poly_lst = [points[0],points[1],points[2],points[3]]\n    for i in range(4,len(points),3):\n        p1 = points[i-2]\n        p2 = points[i-1]\n        p3 = points[i]\n        p4 = points[i+1]\n        p5 = points[i+2]\n        poly_lst.append(p1)\n        poly_lst.append(p2)\n        poly_lst.append(p3)\n        poly_lst.append(p4)\n        poly_lst.append(p5)\n        poly_lst.append(p1)\n    poly_lst.append(points[0])\n    poly_lst.append(points[-1])\n    return''.join(map(str,poly_lst))"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # Find 4 points\n    points = find_points(n, m)\n\n    # Find the longest line from the 4 points\n    line = find_line(n, m, points)\n\n    # Sort the points from the longest line\n    points = sort_points(line, n, m)\n\n    return \" \".join(map(str, points))\n\n\ndef"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for _ in range(4):\n        points.append(tuple(map(int, stdin.split())))\n    points = sorted(points, key=lambda p: (p[0], p[1]))\n    for i in range(4):\n        for j in range(i + 1, 4):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                return ''\n    return str(points[0][0]) +'' + str(points[0][1]) +'' + str(points[1][0]) +'' + str(points[1][1]) +'' + str(\n        points[2][0]) +'' + str(points[2][1]) +'' + str(points[3][0]) +'' + str(points[3][1])"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string represnting n and m and return the string represnting the longest possible polyline.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    x1, y1 = (0, 0)\n    x2, y2 = (n, m)\n    x3, y3 = (0, m)\n    x4, y4 = (n, 0)\n    # x1, y1 = (0, 0)\n    # x2, y2 = (n, m)\n    # x3, y3 = (0, m)\n    # x4, y4 = (n, 0)\n    l1 = (x1, y1)\n    l2 = (x2, y2)\n    l3 = (x3, y3)\n    l4 = (x4, y4)\n    max_length = max(abs(x1 - x2), abs(y1 - y2), abs(x3 - x4), abs(y3 - y4))\n    length_list = []\n    length_list.append(abs(x1 - x2) + abs(y1 - y2))\n    length_list.append(abs(x2 - x3) + abs(y2 - y3))\n    length_list.append(abs(x3 - x4) + abs(y3 - y4))\n    length_list.append(abs(x4 - x1) + abs(y4 - y1))\n    if max_length > max(length_list):\n        return str(max(length_list)) +'' + str(max(length_list)) + '\\n' + str(l1) +'' + str(l2) + '\\n' + str(l3) +'' + str(l4)\n    elif max_length == max(length_list):\n        return str(max(length_list)) +'' + str(max(length_list)) + '\\n' + str(l1) +'' + str(l2) + '\\n' + str(l3) +'' + str(l4)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    p_list = [[0, 0] for _ in range(4)]\n    ans = 0\n    ans_list = []\n    for i in range(n):\n        for j in range(m):\n            if p_list[0][0] == 0 and p_list[0][1] == 0:\n                p_list[0][0], p_list[0][1] = i, j\n            elif p_list[1][0] == 0 and p_list[1][1] == 0:\n                p_list[1][0], p_list[1][1] = i, j\n            elif p_list[2][0] == 0 and p_list[2][1] == 0:\n                p_list[2][0], p_list[2][1] = i, j\n            elif p_list[3][0] == 0 and p_list[3][1] == 0:\n                p_list[3][0], p_list[3][1] = i, j\n            else:\n                for p in p_list:\n                    p_dist = (i - p[0]) ** 2 + (j - p[1]) ** 2\n                    if p_dist < ans:\n                        ans = p_dist\n                        ans_list = p\n                for p in p_list:\n                    p_dist = (i - p[0]) ** 2 + (j - p[1]) ** 2\n                    if p_dist == ans:\n                        ans_list = p\n                p_list = [[0, 0] for _ in range(4)]\n    print(ans_list[0], ans_list[1], ans_list[2], ans_list[3], sep='\\n')\n    return ans_list\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [(0,0), (1, 0), (0, 1), (1, 1)]\n    if a[2] in a:\n        return \" \".join(map(str, a))\n    if a[2] in a[3]:\n        return \" \".join(map(str, a[:3]))\n    if a[3] in a[2]:\n        return \" \".join(map(str, a[:2]))\n    if a[2] in a[1]:\n        return \" \".join(map(str, a[:1]))\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        grid.append(row)\n    # print(grid)\n    points = []\n    for i in range(n):\n        for j in range(m):\n            points.append([i, j])\n\n    # print(points)\n    if len(points) == 4:\n        left = points[0]\n        right = points[1]\n        top = points[2]\n        bottom = points[3]\n        for x in range(m):\n            for y in range(n):\n                # print(y, x)\n                if x!= 0 and x!= m - 1 and y!= 0 and y!= n - 1:\n                    if grid[y][x] == 1:\n                        grid[y][x] = 0\n                        if left!= points[0] and right!= points[1] and top!= points[2] and bottom!= points[3]:\n                            left = points[0]\n                            right = points[1]\n                            top = points[2]\n                            bottom = points[3]\n                            print(left[0], left[1], top[0], top[1], right[0], right[1], bottom[0], bottom[1], end=\" \")\n                        else:\n                            for i in range(4):\n                                if left == points[i]:\n                                    left = points[(i + 1) % 4]\n                                if right == points[i]:\n                                    right = points[(i + 3) % 4]\n                                if top == points[i]:\n                                    top = points[(i + 2) % 4]\n                                if bottom == points[i]:\n                                    bottom = points[(i + 0) % 4]\n                                    print(left[0], left[1], top[0], top[1], right[0], right[1], bottom[0], bottom[1], end=\" \")\n        print()\n\n    # if len(points) == 4:\n    #     left = points[0]\n    #     right = points[1]\n    #     top = points[2]\n    #     bottom = points[3]\n    #     if left[0]!= right[0]:\n    #         for i in range(len(points)):\n    #             if points[i][0]!= right[0]:\n    #                 right = points[i]\n    #     if left[1]!= right[1]:\n    #         for i in range(len(points)):\n    #             if points[i][1]!= right[1]:\n    #                 right = points[i]\n    #     if top[0]!= bottom[0]:\n    #         for i in range(len(points)):\n    #             if points[i][0]!= bottom[0]:\n    #                 bottom = points[i]\n    #     if top[1]!= bottom[1]:\n    #         for i in range(len(points)):\n    #             if points[i][1]!= bottom[1]:\n    #                 bottom = points[i]\n    #     for i in range(len(points)):\n    #         print(left[0], left[1], top[0], top[1], right[0], right[1], bottom[0], bottom[1], end=\" \")\n\n\nsolution(stdin)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = set()\n    for a in range(n + 1):\n        for b in range(m + 1):\n            ans.add((a, b))\n\n    def cross(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def dist(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    ans = sorted(ans, key=lambda x: (x[0], x[1]))\n    print(*ans)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1].strip()\n    stdin = list(map(int, stdin))\n    stdin.sort()\n    return ''.join(map(str, stdin))\nprint(solution(input()))"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.strip()\n    string = string.replace(\" \",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\",\",\"\")\n    n = int(string)\n    \n    k = 0\n    while True:\n        if n%10 == 0:\n            break\n        else:\n            n = n//10\n            k += 1\n    n = n - int(str(n)[0])\n    return str(n) + str(k)"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #m = str(n)[::-1]\n    #m = str(n)[::-1]\n    m = \"\".join(str(n)[::-1])\n    print(m)\n    m = m[:len(m)//2]\n    print(m)\n    return m\n\nsolution(stdin)"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''0\n   ... 003512\n   ... ''')\n    '30021'\n    >>> solution('''0\n   ... 003512\n   ... ''')\n    '30021'\n    \"\"\"\n    n = stdin.split()[1]\n    count = 0\n    while n:\n        n = n[:len(n)-count]\n        count += 1\n    return n\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    while len(num) > 1:\n        if num[-1] == \"0\":\n            num = num[:-1]\n        else:\n            break\n    return int(num)\n\ndef"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: str = stdin\n    while True:\n        if n.isdigit() and len(n) >= 10:\n            n = int(n)\n            break\n        n = ''.join(sorted(list(n), reverse=True))\n\n    while True:\n        if n.startswith('0'):\n            n = ''.join(n.split('0')[1:])\n        else:\n            break\n    print(n)\n    return n\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def to_int(num):\n        res = 0\n        for digit in num:\n            res *= 10\n            res += int(digit)\n        return res\n    \n    n = stdin\n    n = to_int(n)\n    \n    digit_count = len(str(n))\n    \n    k = n\n    while k > 0:\n        k //= 10\n        digit_count -= 1\n    \n    if digit_count >= 3:\n        return str(n)\n    \n    if digit_count == 2:\n        return str(n) + \"0\"\n    \n    if digit_count == 1:\n        return str(n) + \"00\"\n    \n    return str(n) + \"000\""
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    while len(n) < 10:\n        n = \"0\" + n\n    return n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    n = s[0]\n    l = list(map(int, n))\n    a = sorted(l)\n    s = \"\".join(map(str,a))\n    return s\n\nsolution('''051\n003512\n021''')\n'''\n\nimport re\nimport math\ns = '003512'\ns = \"199966633300\"\ns = '0'\n\ns = \"021\"\n\ns = \"002313\"\n\ns = \"0023131\"\n\ns = \"00303316\"\n\ns = \"931016\"\n\ns = \"9999999699999999999999\"\n\ns = \"990099\"\n\ns = \"9898989\"\n\ns = \"99999\"\n\ns = \"999999\"\n\ns = \"00000\"\n\ns = \"999\"\n\ns = \"999\"\n\ns = \"01\"\n\ns = \"0099\"\n\ns = \"000\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"111\"\n\ns = \"100000000\"\n\ns = \"1000000001\"\n\ns = \"3\"\n\ns = \"0\"\n\ns = \"0\"\n\ns = \"0\"\n\ns = \"01\"\n\ns = \"001\"\n\ns = \"00\"\n\ns = \"0\"\n\ns = \"0\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns = \"1\"\n\ns ="
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    temperatures = sorted(map(int, stdin.split()))\n    if m == n:\n        return \"Correct\"\n    elif m > n:\n        return \"Incorrect\"\n    elif min == max:\n        return \"Incorrect\"\n    for i in range(m, n):\n        if temperatures[i] > max:\n            return \"Incorrect\"\n        elif temperatures[i] < min:\n            return \"Incorrect\"\n    return \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = list(map(int, stdin.split()))\n    temp = list(map(int, stdin.split()))\n    min_temperature = min(temp)\n    max_temperature = max(temp)\n    if min_temperature >= min and max_temperature <= max:\n        return \"Correct\"\n    else:\n        return \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_temp, max_temp = map(int, stdin.split())\n\n    if max_temp < min_temp:\n        return 'Incorrect'\n    if n > m:\n        return 'Incorrect'\n    if min_temp > max_temp:\n        return 'Incorrect'\n    if n == m:\n        return 'Correct'\n    else:\n        return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max, *t = list(map(int, stdin.split()))\n    if n == m:\n        if min == max == t[0]:\n            return 'Correct'\n    if m == n:\n        if min == max == t[-1]:\n            return 'Correct'\n    if m > n:\n        if min == max:\n            return 'Correct'\n    if m < n:\n        if min == max:\n            return 'Correct'\n    return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, min, max = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    t = stdin[4:]\n    if min < max:\n        return 'Correct'\n    elif max < min:\n        return 'Incorrect'\n    else:\n        return 'Incorrect'"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    temperatures = list(map(int, stdin.split()))\n\n    # fix the minimal and maximal temperatures\n    min_idx = 0\n    max_idx = 0\n    min = None\n    max = None\n    for idx, temp in enumerate(temperatures):\n        if min is None or min > temp:\n            min_idx = idx\n            min = temp\n        if max is None or max < temp:\n            max_idx = idx\n            max = temp\n    # print(min_idx, max_idx, min, max)\n\n    # fix the lengths of the lists\n    # if the max temperature is shorter, add it to the end\n    if max_idx < n - m:\n        temperatures = temperatures[min_idx:] + temperatures[:max_idx]\n\n    # if the max temperature is longer, add it to the beginning\n    elif min_idx > m:\n        temperatures = temperatures[:min_idx] + temperatures[max_idx:]\n\n    # if the min and max temperatures are equal, make them smaller\n    if min == max:\n        # print('The max temperature should be smaller')\n        if max_idx < n - m:\n            temperatures = temperatures[min_idx:] + temperatures[:max_idx]\n        else:\n            temperatures = temperatures[:min_idx] + temperatures[max_idx:]\n\n    # print(min_idx, max_idx, min, max)\n    # print(temperatures)\n    # add the m temperatures\n    temperatures = temperatures + list(range(min_idx, min_idx + m))\n    # print(temperatures)\n    # print(min_idx, max_idx, min, max)\n    # print(temperatures)\n\n    # fix the length of the list\n    if len(temperatures) < n:\n        temperatures = temperatures + list(range(max_idx, n))\n    elif len(temperatures) > n:\n        temperatures = temperatures[min_idx:] + temperatures[:max_idx]\n\n    # print(temperatures)\n    return \"Correct\" if all(min_i <= temp <= max_i for min_i, max_i, temp in zip(range(min_idx, min_idx + m), range(max_idx, n), temperatures)) else \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, min, max) = map(int, stdin.split())\n    temperatures = list(map(int, stdin.split()))\n    max_temp = max(temperatures)\n    min_temp = min(temperatures)\n    if (max_temp - min_temp) == n - m:\n        return 'Correct'\n    else:\n        return 'Incorrect'\nsolution(input())\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n7. Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\nSample String : 'The lyrics is not that poor!'\n'The lyrics is poor!'\nExpected Result : 'The lyrics is good!'\n'The lyrics is poor!'\nSample String : 'The lyrics is poor!'\n'The lyrics is poor!'\nExpected Result : 'The lyrics is good!'\n'The lyrics is poor!'\n\ndef"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, MIN, MAX, *T = list(map(int, stdin.split()))\n    if N == M:\n        if MIN == 1 and MAX == N:\n            return 'Correct'\n        else:\n            return 'Incorrect'\n    else:\n        # if MIN == 1 and MAX == N:\n        #     return 'Correct'\n        # else:\n        #     return 'Incorrect'\n\n        if M == 1:\n            if MIN == 1 and MAX == N:\n                return 'Correct'\n            else:\n                return 'Incorrect'\n        else:\n            if MIN == 1:\n                if MAX == N:\n                    return 'Correct'\n                else:\n                    return 'Incorrect'\n            else:\n                if MAX == N:\n                    return 'Correct'\n                else:\n                    return 'Incorrect'\n        # if N == M:\n        #     if MIN == 1 and MAX == N:\n        #         return 'Correct'\n        #     else:\n        #         return 'Incorrect'\n        # else:\n        #     if MIN == 1:\n        #         if MAX == N:\n        #             return 'Correct'\n        #         else:\n        #             return 'Incorrect'\n        #     else:\n        #         if MAX == N:\n        #             return 'Correct'\n        #         else:\n        #             return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max, t = map(int, stdin.split())\n    return 'Correct' if sum(range(m, n)) == len(set(t)) == n else 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    return \"Correct\" if max >= min and m == len(set(list(range(m)) + list(range(n, m)))) else \"Incorrect\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    k = 0\n    while inp[k]!= 1:\n        k += 1\n    for i in range(k, len(inp)):\n        inp[i] -= inp[i-k]\n    print(inp[k], *sorted(inp))\n\nsolution('1')"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 0\n    while n < m:\n        n += 1\n        if n * n == m:\n            return str(n)\n    return str(n)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    sample input:\n    5\n    '''\n    m = int(stdin)\n    result = 0\n    for i in range(1,m+1):\n        f = math.factorial(i)\n        if f % 10 == 0:\n            result += 1\n    return str(result)\n\n\nstdin = '3'\nprint(solution(stdin))\n\n'''\n4\n'''\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while True:\n        if factorial(n) % 10 == 0:\n            count += 1\n        else:\n            break\n        n -= 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    n_factorial = 1\n    count = 0\n    for i in range(1, n + 1):\n        n_factorial *= i\n    while count < n:\n        if n_factorial % 10 == 0:\n            count += 1\n        n_factorial //= 10\n    return str(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\nclass Solution:\n    def solution(self, m: str) -> str:\n'''\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You should return the integer k.\n    The number of integers n such that the factorial of n ends with m zeroes is the number of integers n, such that the factorial of n ends with m zeroes, which is equal to m.\n    For example, if m = 2, then n such that the factorial of n ends with 2 zeroes is 4, so n = 4 and the number of integers n such that the factorial of n ends with m zeroes is 4.\n    \"\"\"\n    m = int(stdin)\n    p = 0\n    k = 0\n    n = 2\n    while n**p <= m:\n        n += 1\n        p += 1\n    while p > 0:\n        if m % n == 0:\n            m //= n\n            k += 1\n        else:\n            p -= 1\n    return k\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    # print(t)\n    a = t.split(\" \")\n    # print(a)\n    m = int(a[0])\n    # print(m)\n    k = 0\n    res = []\n    for i in range(m+1):\n        if factorial(i) % 10 == 0:\n            k = k + 1\n            res.append(i)\n    return str(k) + \"\\n\" + \"\\n\".join([str(n) for n in res])\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    input_data = stdin\n    # Your code here\n    n_factorial = 1\n    factorial_size = 0\n\n    for i in range(input_data):\n        if n_factorial % 10 == 0:\n            factorial_size += 1\n        n_factorial = n_factorial * factorial_size\n    \n    for i in range(input_data):\n        if n_factorial % factorial_size == 0:\n            answer.append(i + 1)\n    \n    print(len(answer))\n    for i in sorted(answer):\n        print(i, end = \" \")\n    return \"0\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from math import factorial\n    m = int(stdin)\n    i = 1\n    while factorial(i) % m == 0:\n        i += 1\n    if i == 1:\n        return \"0\"\n    else:\n        return str(i - 1)\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u-1, v-1, w))\n\n    special_vertices = list(map(int, stdin.split()))\n    special_vertices = set(special_vertices)\n    \n    if k > len(special_vertices):\n        return '-1'\n    distances = []\n    distances_dict = {}\n    for i in range(len(special_vertices)):\n        distances_dict[i] = {}\n        distances.append(float('inf'))\n    for u, v, w in edges:\n        distances[special_vertices.index(u)] = min(distances[special_vertices.index(u)], w)\n        distances[special_vertices.index(v)] = min(distances[special_vertices.index(v)], w)\n        distances_dict[special_vertices.index(u)][special_vertices.index(v)] = w\n    for k in range(len(special_vertices)):\n        distances[k] = min(distances)\n        \n    distances.sort(reverse=True)\n    \n    result = ''\n    for i in range(len(distances)):\n        if distances_dict[i].get(k-1) is not None:\n            result += str(distances_dict[i][k-1]) +''\n        else:\n            result += str(distances[i]) +''\n    return result\n\nsolution(stdin)\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    # \uc815\ub82c\ud558\uace0, \ubc88\ud638 \uc21c\uc11c\ub300\ub85c \ud574\uc900\ub2e4\n    num_list = sorted(list(map(int, stdin.split())))\n    # \uc9d1\ud569\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud55c\ub2e4\n    for i in range(k):\n        if i == k - 1:\n            # \uc774\ubc88 \ubc18\ubcf5\uc744 \ud1b5\ud574 \uac00\uc7a5 \uae34 \uc218\uc758 \ubc88\ud638\ub97c \ucc3e\uae30 \uc704\ud55c \uc2dd\n            max_num = max(num_list)\n            # \uc774\ubc88 \ubc18\ubcf5\uc744 \ud1b5\ud574 \uac00\uc7a5 \uae34 \uc218\uc758 \uc704\uce58\ub97c \ucc3e\uae30 \uc704\ud55c \uc2dd\n            max_pos = num_list.index(max_num)\n        # \uac00\uc7a5 \uae34 \uc218\uc640 \uc704\uce58 \ucc3e\uae30\n        else:\n            max_num = max(num_list)\n            max_pos = num_list.index(max_num)\n        # \ucc3e\uae30 \uc704\ud55c \uc2dd\uc5d0\uc11c \uc5ec\uae30\uc11c \uc791\uc131\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4.\n        # \ub0b4\uac00 \uc54c\uace0 \uc2f6\uc740 \uc704\uce58\ub97c \ub123\uc73c\uba74 \ub41c\ub2e4.\n        num_list[max_pos] = 0\n        # \ub098\uba38\uc9c0 \uc218\ub4e4\uc774 \uc9c0\uc6cc\uc9c0\uae30 \uc704\ud574\uc11c 0\uc73c\ub85c \ubc14\uafd4\uc900\ub2e4\n    return str(num_list[k - 1])"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    vertices = list(map(int, stdin.split()))\n    vertices = set(vertices)\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    edges = set(edges)\n    special = {i for i in vertices if i in range(k)}\n    special = sorted(special)\n    distance = {}\n    for i in special:\n        distance[i] = float('inf')\n    for i in special:\n        distance[i] = 0\n    for i in vertices:\n        if i in special:\n            continue\n        for j in vertices:\n            if j in special:\n                continue\n            if (i, j) in edges:\n                distance[j] = min(distance[j], distance[i] + edges[(i, j)])\n    min_dist = float('inf')\n    for i in special:\n        if distance[i] < min_dist:\n            min_dist = distance[i]\n    return str(min_dist)\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(_) for _ in stdin.split())\n    c = sorted(stdin.split())\n    a = [[] for _ in range(n)]\n    for x in range(n):\n        a[c.index(str(x+1))] = list(map(int, stdin.split()))\n    #print(a)\n    q = deque()\n    cost = [float('inf')]*n\n    for x in range(n):\n        q.append(x)\n        cost[x] = 0\n    while q:\n        x = q.popleft()\n        for y in a[x]:\n            if cost[y] > cost[x] + a[x][y]:\n                cost[y] = cost[x] + a[x][y]\n                q.append(y)\n    r = []\n    for x in range(n):\n        if cost[x] == float('inf'):\n            continue\n        r.append(cost[x])\n    return str(r)\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    costs = sorted(map(int, stdin.split()))\n    all_dist = [costs[0]]\n    all_cost = [costs[0]]\n    for i in range(1, n):\n        all_dist.append(costs[i] + max(all_dist[i - 1], all_dist[i - 2]))\n        all_cost.append(costs[i] + min(all_cost[i - 1], all_cost[i - 2]))\n    for i in range(k):\n        print(all_dist[i] - all_cost[i])\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].add((v, w))\n        graph[v].add((u, w))\n    print(max(map(lambda x: max(x), graph.values())))\n    return\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    x = sorted(list(map(int, stdin.split())))\n    s = set(x)\n    d = {i: i for i in s}\n    ch = {i: i for i in s}\n    ch_ind = {i: 0 for i in s}\n    farthest = None\n    for i in s:\n        if farthest is None:\n            farthest = i\n        if d[i] > farthest:\n            farthest = d[i]\n    for i in s:\n        if i!= farthest:\n            d[i] = d[farthest] + 1\n    dist = 0\n    for i in range(m):\n        if ch[x[i]]!= x[i]:\n            if d[ch[x[i]]] > d[x[i]]:\n                d[x[i]] = d[ch[x[i]]]\n            else:\n                dist += d[x[i]]\n            ch[x[i]] = x[i]\n            ch_ind[x[i]] = 0\n    for i in range(k):\n        dist += d[s[i]]\n        ch_ind[s[i]] += 1\n    return str(dist)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, *x = map(int, stdin.split())\n    x = list(x)\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n        edges.append((v, u, w))\n    distances = [-1] * n\n\n    def find(x):\n        if distances[x] == -1:\n            distances[x] = find(x - 1)\n        return distances[x]\n\n    def set_distances(x, distance):\n        if distances[x] == -1:\n            distances[x] = distance\n            return distance + 1\n        return set_distances(x - 1, distance)\n\n    def find_distance(a, b):\n        a = find(a)\n        b = find(b)\n        if a!= b:\n            return a if a < b else b\n        return set_distances(a, 0)\n\n    for u, v, w in edges:\n        find_distance(u, v)\n        find_distance(v, u)\n\n    return''.join(map(str, distances))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    for i in range(k):\n        node = int(stdin.split()[i]) - 1\n        max_dist = 0\n        max_dist_node = None\n        for j in range(n):\n            if node!= j:\n                dist = graph[node][0][1]\n                for v in graph[node]:\n                    dist = max(dist, v[1])\n                if max_dist < dist:\n                    max_dist = dist\n                    max_dist_node = j\n        print(max_dist)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = int(stdin.strip())\n\n    even = True\n    if x % 2 == 0:\n        even = False\n        x -= 1\n    odd = True\n    if x % 2 == 1:\n        odd = False\n\n    # print(x)\n    if even:\n        if x == 0:\n            return 1\n        elif x == 1:\n            return 2\n        else:\n            return 0\n    else:\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 2\n        else:\n            return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    left = 0\n    right = 2\n    for _ in range(n):\n        left, right = left, right - 2\n    return str(right)\nprint(solution(input()))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    elif n == 2:\n        return str(1)\n    else:\n        shell_1 = 0\n        shell_2 = 1\n        shell_3 = 2\n        shell_4 = 3\n        for i in range(1, n):\n            if i % 2 == 0:\n                shell_1, shell_2 = shell_2, shell_1\n            else:\n                shell_1, shell_2 = shell_2, shell_3\n            shell_3, shell_4 = shell_4, shell_3\n        return str(shell_4)\n\nprint(solution(input()))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = int(stdin.split()[0]), int(stdin.split()[1])\n    shuffle = list(range(n))\n    if n % 2 == 0:\n        for i in range(int(n/2)):\n            shuffle[i], shuffle[int((i+1)%n)] = shuffle[int((i+1)%n)], shuffle[i]\n    else:\n        for i in range(int(n/2)):\n            shuffle[i], shuffle[int((i+1)%n)] = shuffle[int((i+1)%n)], shuffle[i]\n    for i in shuffle:\n        if i == x:\n            return str(i)\nstdin = \"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return str(x)"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = stdin.split('\\n')\n    n = int(n)\n    x = int(x)\n    if x % 2 == 0:\n        return '1'\n    else:\n        return '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    left = 0\n    middle = 1\n    right = 2\n    ball = x\n    for i in range(n):\n        if i%2 == 0:\n            left, middle, right = middle, right, left\n        left, middle, right = middle, right, left\n    return str(left)\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 2\n    if n == 1:\n        return str(s)\n    if n % 2 == 1:\n        k = n//2\n        return str(s)\n    if n % 2 == 0:\n        k = n//2\n        return str(s)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[1])\n    return \"1\" if x % 2 == 0 else \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    answer = 0\n    for i in range(n):\n        if i % 2 == 0:\n            x = x + 1\n            answer = answer + x\n        else:\n            x = x - 1\n            answer = answer + x\n    return str(answer)\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    x_1 = int(inputs[0])\n    y_1 = int(inputs[1])\n    x_2 = int(inputs[2])\n    y_2 = int(inputs[3])\n    return 'YES' if len(inputs) == 4 and (x_1 == 0 or x_2 == 0 or x_1 == x_2 or y_1 == y_2 or x_1 < x_2 or y_1 < y_2) else 'NO'\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if len(line.split()) == 5:\n            x1, y1, x2, y2, x3, y3 = map(int, line.split())\n            if y1!= y2 and y1!= y3 and x1!= x3 and x2!= x3:\n                return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    points = set()\n    for _ in range(int(stdin)):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        points.add((x1, y1))\n        points.add((x2, y1))\n        points.add((x1, y2))\n        points.add((x2, y2))\n    x1, y1 = points.pop()\n    x2, y2 = points.pop()\n    if not ((x1, y1) in points or (x2, y2) in points):\n        return \"YES\"\n    if not ((x2, y1) in points or (x1, y2) in points):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, stdin.split()[1:])))\n    points.sort(key=lambda x: (x[0], x[1]))\n    if points[0][0] < points[0][1] and points[1][0] < points[1][1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin.pop(0))\n    rectangles = []\n    for i in range(N):\n        x1, y1, x2, y2 = stdin.pop(0).split()\n        x1 = int(x1)\n        y1 = int(y1)\n        x2 = int(x2)\n        y2 = int(y2)\n        rectangles.append([x1, y1, x2, y2])\n    \n    def to_points(rectangles: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Helper method to convert rectangles list of points into a list of points.\n        \"\"\"\n        return [(rectangles[i][0], rectangles[i][1]) for i in range(len(rectangles))]\n    \n    # Convert to list of points\n    rectangles = to_points(rectangles)\n    #print(rectangles)\n    # Check for duplicate points\n    for point in rectangles:\n        for i in range(len(rectangles)):\n            if point == rectangles[i]:\n                break\n        else:\n            #print(point, \"not duplicate\")\n            pass\n        else:\n            #print(point, \"duplicate\")\n            return \"NO\"\n    else:\n        #print(\"yes\")\n        return \"YES\""
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    l = []\n    for i in a:\n        i = i.split(\" \")\n        l.append([int(i[0]), int(i[1]), int(i[2]), int(i[3])])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[2])\n    l.sort(key=lambda x: x[3])\n    # print(l)\n    def kadane(l):\n        cur = 0\n        max_sum = 0\n        for i in range(len(l)):\n            cur += l[i]\n            if cur < 0:\n                cur = 0\n            if cur > max_sum:\n                max_sum = cur\n        if max_sum*max_sum == cur*cur:\n            return True\n        else:\n            return False\n    # print(kadane(l))\n    print(\"YES\" if kadane(l) else \"NO\")\n    return\nsolution(input())"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_coords = sorted(stdin.strip().split())\n    x_coords = sorted(list(map(int, x_coords)))\n    y_coords = sorted(stdin.strip().split())\n    y_coords = sorted(list(map(int, y_coords)))\n    x_start = x_coords[0]\n    x_end = x_coords[-1]\n    y_start = y_coords[0]\n    y_end = y_coords[-1]\n    \n    if x_start > x_end:\n        return \"NO\"\n    \n    if y_start > y_end:\n        return \"NO\"\n    \n    x_count = 0\n    y_count = 0\n    for i in range(len(x_coords)):\n        x_count += (x_coords[i] - x_start) * (x_end - x_coords[i])\n        y_count += (y_coords[i] - y_start) * (y_end - y_coords[i])\n    \n    if x_count == y_count:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    list_rectangles = []\n    for rectangle in stdin_list:\n        x1, y1, x2, y2 = rectangle.split(' ')\n        list_rectangles.append([int(x1), int(y1), int(x2), int(y2)])\n    \n    if len(list_rectangles) == 1:\n        return 'YES'\n    \n    if len(list_rectangles) == 2:\n        if abs(list_rectangles[0][0] - list_rectangles[1][0]) == abs(list_rectangles[0][1] - list_rectangles[1][1]) == 0:\n            return 'YES'\n        else:\n            return 'NO'\n\n    if len(list_rectangles) == 3:\n        if list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[2][0] and list_rectangles[0][1] == list_rectangles[2][1]:\n            return 'YES'\n        elif list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[2][1] and list_rectangles[0][0] == list_rectangles[2][0]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    if len(list_rectangles) == 4:\n        if list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[3][0] and list_rectangles[0][1] == list_rectangles[3][1]:\n            return 'YES'\n        elif list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[3][1] and list_rectangles[0][0] == list_rectangles[3][0]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    if len(list_rectangles) == 5:\n        if list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[2][0] and list_rectangles[0][1] == list_rectangles[2][1] and list_rectangles[0][0] == list_rectangles[4][0] and list_rectangles[0][1] == list_rectangles[4][1]:\n            return 'YES'\n        elif list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[2][1] and list_rectangles[0][0] == list_rectangles[4][0] and list_rectangles[0][1] == list_rectangles[4][1]:\n            return 'YES'\n        elif list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[3][0] and list_rectangles[0][1] == list_rectangles[3][1] and list_rectangles[0][0] == list_rectangles[4][0] and list_rectangles[0][1] == list_rectangles[4][1]:\n            return 'YES'\n        elif list_rectangles[0][1] == list_rectangles[1][1] and list_rectangles[0][0] == list_rectangles[1][0] and list_rectangles[0][1] == list_rectangles[3][1] and list_rectangles[0][0] == list_rectangles[4][0] and list_rectangles[0][1] == list_rectangles[4][1]:\n            return 'YES'\n        else:\n            return 'NO'\n\nsolution(input())\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    rectangles = []\n    for i in range(n):\n        x_1, y_1, x_2, y_2 = map(int, stdin.split()[i*4+1:i*4+4])\n        rectangles.append((x_1, y_1, x_2, y_2))\n\n    x_1_set = set()\n    x_2_set = set()\n    y_1_set = set()\n    y_2_set = set()\n    for rect in rectangles:\n        x_1_set.add(rect[0])\n        x_2_set.add(rect[2])\n        y_1_set.add(rect[1])\n        y_2_set.add(rect[3])\n    \n    for x_1 in x_1_set:\n        for x_2 in x_2_set:\n            if (x_1, x_2) not in y_1_set and (x_2, x_1) not in y_2_set:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    rectangles = []\n    for i in range(n):\n        rectangles.append(stdin[i].split())\n    rectangles.sort()\n    size = len(rectangles)\n\n    # print(rectangles)\n\n    # check if borders are equal to each other\n    for i in range(size-1):\n        if rectangles[i][0]!= rectangles[i+1][0] or rectangles[i][1]!= rectangles[i+1][1] or rectangles[i][2]!= rectangles[i+1][2] or rectangles[i][3]!= rectangles[i+1][3]:\n            return \"NO\"\n\n    # check if borders are equal to each other\n    for i in range(size-1):\n        if rectangles[i][0] == rectangles[i+1][0] and rectangles[i][1] == rectangles[i+1][1] and rectangles[i][2] == rectangles[i+1][2] and rectangles[i][3] == rectangles[i+1][3]:\n            return \"NO\"\n\n    # print(rectangles)\n    return \"YES\""
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport math\n\nn, s = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    # n_1 = sum([int(x) for x in str(n)])\n    # n_2 = sum([int(x) for x in str(n_1)])\n    # n_3 = sum([int(x) for x in str(n_2)])\n    # n_4 = sum([int(x) for x in str(n_3)])\n    # n_5 = sum([int(x) for x in str(n_4)])\n    # n_6 = sum([int(x) for x in str(n_5)])\n    # n_7 = sum([int(x) for x in str(n_6)])\n    # n_8 = sum([int(x) for x in str(n_7)])\n    # n_9 = sum([int(x) for x in str(n_8)])\n    # n_10 = sum([int(x) for x in str(n_9)])\n    # n_11 = sum([int(x) for x in str(n_10)])\n    # n_12 = sum([int(x) for x in str(n_11)])\n    #\n    # return 0 if n_1 > n_12 else 1\n    sum_n = sum([int(x) for x in str(n)])\n    counter = 0\n    for digit in str(n):\n        if int(digit) + sum_n - int(digit) >= s:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a) + '\\n' + str(b) + '\\n' + str(a > b)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    result = 0\n    n, s = map(int, stdin.split())\n    for i in range(n):\n        if i >= s:\n            break\n        for j in range(s):\n            if i * j >= n:\n                break\n            if i * j < n and i * j < s:\n                result += 1\n                break\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    int_list = list(map(int, stdin.split(' ')))\n    n, s = int_list[0], int_list[1]\n    count = 0\n    for i in range(n, s, -1):\n        for j in range(n, s, -1):\n            if i - j < s:\n                count += 1\n    return count\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 3:\n        return 'ERROR'\n    n, s = stdin\n    n = int(n)\n    s = int(s)\n    res = 0\n    while n > 0:\n        if n % 10 >= s:\n            res += 1\n        n = n // 10\n    return str(res)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    for i in range(a, b + 1):\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        if abs(i - sum) >= b:\n            c += 1\n    return str(c)\nprint(solution(input()))"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import log, floor\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        x, y = x, y\n    return 'YES' if n % 2 == 0 else 'NO'"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        points.append((a, b))\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    return \"YES\" if points[0][0] == points[1][0] and points[0][1] == points[1][1] or points[0][1] == points[1][1] and points[0][0] == points[1][0] else \"NO\""
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def _is_valid(point1: int, point2: int, point3: int, point4: int) -> bool:\n        return point1 < point2 < point3 < point4 and point1!= point2!= point3!= point4\n\n    points = list(map(lambda lst: (int(lst[0]), int(lst[1])), stdin.split()))\n    # check if points are distinct\n    if len(set(points)) == len(points):\n        return \"NO\"\n    # check if point1 + point2 == point3\n    # check if point1 + point4 == point3\n    # check if point2 + point3 == point4\n    if not all([_is_valid(point1, point2, point3, point4) for point1, point2, point3, point4 in combinations(points, 4)]):\n        return \"NO\"\n    # check if point2 + point4 == point3\n    # check if point1 + point4 == point3\n    # check if point1 + point3 == point2\n    if not all([_is_valid(point2, point4, point3, point1) for point1, point2, point4, point3 in combinations(points, 4)]):\n        return \"NO\"\n    # check if point1 + point3 == point2\n    # check if point1 + point4 == point2\n    # check if point2 + point3 == point4\n    if not all([_is_valid(point1, point3, point2, point4) for point1, point2, point3, point4 in combinations(points, 4)]):\n        return \"NO\"\n\n    # check if point3 + point4 == point2\n    # check if point1 + point4 == point2\n    # check if point1 + point2 == point3\n    if not all([_is_valid(point3, point4, point1, point2) for point1, point2, point3, point4 in combinations(points, 4)]):\n        return \"NO\"\n\n    return \"YES\"\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, stdin.split())))\n    points = sorted(points)\n    points = sorted(points, key=lambda x: x[0])\n\n    x = points[0][0]\n    y = points[0][1]\n    x2 = points[0][0]\n    y2 = points[0][1]\n    for p in points:\n        if p[0] == x and p[1] == y:\n            continue\n        if p[0] == x2 and p[1] == y2:\n            continue\n        if (p[0] - x) == (x2 - x) and (p[1] - y) == (y2 - y):\n            return \"YES\"\n        x = p[0]\n        y = p[1]\n        x2 = p[0]\n        y2 = p[1]\n    return \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    points = [(int(i), int(j)) for i, j in stdin.split()]\n    for i in range(len(points)-1):\n        for j in range(i+1, len(points)):\n            if (points[i][0] == points[j][0] and points[i][1] == points[j][1]) or (points[i][1] == points[j][1] and points[i][0] == points[j][0]):\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, stdin.strip().split())))\n\n    def compare(a, b):\n        if (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 <= (a[2] + b[2]) ** 2:\n            return True\n        else:\n            return False\n    # create the graph\n    graph = {}\n    for i in range(len(points)):\n        p1 = points[i]\n        for j in range(i + 1, len(points)):\n            p2 = points[j]\n            if compare(p1, p2):\n                if p1[0] == p2[0] or p1[1] == p2[1]:\n                    return \"YES\"\n                graph[(p1[0], p1[1])] = (p2[0], p2[1])\n    # finding the path\n    visited = {}\n    path = []\n    visited[(0, 0)] = 1\n    path.append((0, 0))\n    while path:\n        current = path[-1]\n        for neighbour in graph.get((current[0], current[1])):\n            if neighbour in visited:\n                continue\n            else:\n                path.append(neighbour)\n                visited[neighbour] = 1\n                if len(path) == len(points):\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    while True:\n        n = stdin.readline().strip()\n        if not n:\n            break\n        n = int(n)\n        points.extend([tuple(map(int, stdin.readline().split())) for _ in range(n)])\n    points = sorted(points)\n    print('YES' if any(points[i] == points[i+1] for i in range(len(points)-1)) else 'NO')\n    return 'YES' if any(points[i] == points[i+1] for i in range(len(points)-1)) else 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = open(0).read()\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = (int(n) for n in stdin.split())\n    def dp(t, a, b, k):\n        if t == 0:\n            return 1\n        if t < 0:\n            return 0\n        if a > b or b > a:\n            return 0\n        if a < k or b < k:\n            return 0\n        if a == k and b == k:\n            return t\n        return (t + sum(dp(t-1, a-1, b, k)) + sum(dp(t-1, a, b-1, k)) + sum(dp(t-1, a, b, k-1))) % (1000000007)\n    return str(dp(t, a, b, k))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    n = (2 * k + 1) * (2 * k + 1)\n    def sum(i, j):\n        if i + j > k:\n            return 0\n        elif i == j:\n            return i\n        elif i < j:\n            return (i + j)\n        else:\n            return i + j\n    answer = 0\n    while t:\n        mem = a\n        lex = b\n        for i in range(n):\n            mem += sum(mem, k + 1)\n            lex += sum(lex, k + 1)\n            mem -= sum(mem, k + 1)\n            lex -= sum(lex, k + 1)\n        if mem > lex:\n            answer += 1\n        t -= 1\n    return answer\n\"\"\"\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    c = 0\n    for i in range(k + 1):\n        for j in range(k + 1):\n            for k in range(k + 1):\n                if i * a + j * b + k * c!= i * a + j * c + k * b:\n                    break\n            else:\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    c = 0\n    while a < b:\n        if a == 1 and b == 2:\n            print(c)\n            break\n        if a < b:\n            a += a\n            b += b\n        else:\n            a = a - b\n            b = b - a\n        c += 1\n    return c\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    x = 2 * k + 1\n    y = 2 * k + 2\n    return (((x - (t + 1) % x) * a + y) * b + ((t + 1) % x + (x - (t + 1) % x)) * a + (t + 1) * b) % (10 ** 9 + 7)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(sum(1 for m, l in ((m-l, l-m) for m in range(a, b+1) for l in range(a, b+1)) if m < 0 or l < 0) % 1000000000)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b,k,t = map(int,stdin.split())\n    count = 0\n    if a == 1 and b == 1:\n        count += (t*(t+1))\n        return(count%1000000000)\n    for i in range(1,a+1):\n        count += a-i+1\n    for i in range(1,b+1):\n        count += b-i+1\n    count += (t*(t+1))\n    return(count%1000000000)"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k, t) = map(int, stdin.split())\n    mem = (a, b)\n    lexa = (b, a)\n    result = 0\n    for turn in range(t):\n        (m, l) = (mem, lexa)\n        (score_m, score_l) = (m, l)\n        score = 0\n        for i in range(0, k + 1):\n            score = score_m + i\n            if score < 0:\n                score = score_m - i\n            if score < 0:\n                score = 0\n            score = score_l + i\n            if score < 0:\n                score = score_l - i\n            if score < 0:\n                score = 0\n            if score < score_m:\n                score = score_m\n            if score < score_l:\n                score = score_l\n            if score > score_m:\n                score = score_m\n            if score > score_l:\n                score = score_l\n            if score == score_m:\n                score = score_m\n            if score == score_l:\n                score = score_l\n            if score == score_m + 1 and score == score_l - 1:\n                score = score_m + 1\n            if score == score_m - 1 and score == score_l + 1:\n                score = score_l - 1\n            if score == score_m - 2 and score == score_l - 2:\n                score = score_m - 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_l + 2\n            if score == score_m - 2 and score == score_l + 2:\n                score = score_l + 2\n            if score == score_m + 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_m + 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_m + 2 and score == score_l + 2:\n                score = score_l + 2\n            if score == score_m + 1 and score == score_l - 1:\n                score = score_m + 1\n            if score == score_m - 1 and score == score_l + 1:\n                score = score_l + 1\n            if score == score_m - 2 and score == score_l + 2:\n                score = score_l + 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_m - 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_m + 1 and score == score_l - 1:\n                score = score_m + 1\n            if score == score_m - 1 and score == score_l + 1:\n                score = score_l + 1\n            if score == score_m - 2 and score == score_l + 2:\n                score = score_l + 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_m - 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_m + 1 and score == score_l - 1:\n                score = score_m + 1\n            if score == score_m - 1 and score == score_l + 1:\n                score = score_l + 1\n            if score == score_m - 2 and score == score_l + 2:\n                score = score_l + 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_m + 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_m + 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_m - 1 and score == score_l + 1:\n                score = score_m - 1\n            if score == score_m + 1 and score == score_l - 1:\n                score = score_l - 1\n            if score == score_m + 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_l + 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_l + 2 and score == score_m - 2:\n                score = score_m - 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_l - 2 and score == score_m - 2:\n                score = score_m - 2\n            if score == score_m + 1 and score == score_l + 1:\n                score = score_l + 1\n            if score == score_m - 1 and score == score_l - 1:\n                score = score_l - 1\n            if score == score_m - 2 and score == score_l + 2:\n                score = score_l + 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_m - 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_l - 2 and score == score_m - 2:\n                score = score_m - 2\n            if score == score_m + 1 and score == score_l - 1:\n                score = score_m + 1\n            if score == score_m - 1 and score == score_l + 1:\n                score = score_l + 1\n            if score == score_m - 2 and score == score_l - 2:\n                score = score_l - 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_l - 2 and score == score_m - 2:\n                score = score_m - 2\n            if score == score_l - 2 and score == score_m + 2:\n                score = score_m + 2\n            if score == score_l + 2 and score == score_m - 2:\n                score = score_"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if b < a:\n        return 0\n\n    if t == 0:\n        return 0\n\n    if a == 1:\n        return 1 if k <= b else 0\n    elif a == 2:\n        if b % 2 == 1:\n            if k == 1:\n                return t\n            else:\n                return t - 1\n        else:\n            if k <= 2:\n                return t\n            else:\n                return t - 1\n    elif a == 3:\n        if b % 2 == 1:\n            return t\n        else:\n            return t - 1\n    else:\n        if b % 2 == 1:\n            if k <= 1:\n                return t\n            else:\n                return t - 1\n        else:\n            if k <= 1:\n                return t\n            else:\n                return t - 1\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    arr = []\n    def maxScore(cur):\n        if cur == t:\n            arr.append(cur)\n        if cur < t:\n            for i in range(min(k - cur, a + 1)):\n                maxScore(cur + i)\n    maxScore(0)\n    return len(arr) % (10 ** 9 + 7)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def get_mark(l, d):\n        a, b = 0, 0\n        for i, _ in enumerate(a):\n            b += d\n            if b == l:\n                break\n            a = i + 1\n        return a\n\n    def get_distance(l, x, y, d):\n        a = get_mark(l, x - d)\n        b = get_mark(l, y - d)\n        return a - b\n\n    for i, _ in enumerate(a):\n        if get_distance(l, x, y, a[i]) == l:\n            print(i + 1)\n            break\n    else:\n        print(0)"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 250 185 230\n   ... 0 185 250\n   ... ''')\n    1\n    >>> solution('''\n   ... 4 250 185 230\n   ... 0 20 185 250\n   ... ''')\n    0\n    >>> solution('''\n   ... 2 300 185 230\n   ... 0 300\n   ... ''')\n    2\n    >>> solution('''\n   ... 2 300 185 230\n   ... 0 300\n   ... ''')\n    2\n    '''\n    >>> solution('''\n   ... 4 250 185 230\n   ... 0 20 185 250\n   ... ''')\n    0\n    >>> solution('''\n   ... 5 500 500 500 500\n   ... 0 250 250 250 250\n   ... ''')\n    4\n    >>> solution('''\n   ... 5 500 500 500 500\n   ... 0 250 250 250 250\n   ... ''')\n    5\n    \"\"\"\n    marks = list(map(int, stdin.split()))\n    n, l, x, y = marks[0], marks[1], marks[2], marks[3]\n\n    def is_ok(m):\n        \"\"\"\n        Returns True if the number of marks m can be used to measure the distances x and y.\n        \"\"\"\n        marks = list(map(int, map(lambda m: m - m % l, range(m, m + l + 1))))\n        marks = list(filter(lambda m: m > l, marks))\n        return len(marks) == n\n\n    def dp(t, m, d):\n        \"\"\"\n        Returns the number of marks m that can be used to measure the distances x and y,\n        where the distances are represented by the d-element sequence d.\n        \"\"\"\n        if t >= n:\n            return 0 if m < l else (m - l) * (1 if m == l else 0)\n        if is_ok(m):\n            return dp(t + 1, m, d) + (1 if m == l else 0)\n        return dp(t + 1, m, d)\n\n    if is_ok(x):\n        return dp(0, x, [x, l])\n    if is_ok(y):\n        return dp(0, y, [l, y])\n    return dp(0, x, [x, y])\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, l, x, y = map(int, stdin.split())\n  if n == 1:\n    return 0\n  a = list(map(int, stdin.split()))\n  def mid(x: int, y: int, z: int):\n    return x + y + z\n  if x == y:\n    return 0\n  def binary_search(nums, low, high, x):\n    if low > high:\n      return False\n    mid = (low + high) // 2\n    if mid == x:\n      return True\n    if mid < x:\n      return binary_search(nums, mid + 1, high, x)\n    return binary_search(nums, low, mid - 1, x)\n  # x - y is large, so x should be in the right half\n  for i in range(n):\n    if a[i]!= mid(a[i - 1], a[i], l):\n      return 0\n  n -= 1\n  while n:\n    if x - a[n - 1] > l:\n      return 0\n    n -= 1\n  n = len(a)\n  # x - y is small, so x should be in the left half\n  for i in range(n - 1, -1, -1):\n    if a[i]!= mid(a[i], a[i + 1], l):\n      return 0\n  return 1\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n\n    # a = [(1,2), (3,5), (6,8), (9,11), (12,14)]\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    if x >= l:\n        # a = [(1,2), (3,5), (6,8), (9,11), (12,14)]\n        a = [(i - l, i) for i in a]\n        a.sort()\n        a = [x for x in a if x[0] >= l]\n        return len(a)\n    if y >= l:\n        a = [(x, x + l) for x in a]\n        a.sort()\n        a = [x for x in a if x[1] > x[0]]\n        return len(a)\n    return min(y, l - x) - 1\n\n\nfor line in stdin.readlines():\n    print(solution(line))"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    l = x + y\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if abs(a[0] - l) > abs(a[-1] - l):\n        a = a[::-1]\n    # a = list(range(n + 1))\n    # for i, j in zip(range(n), range(n)[1:]):\n    #     a[j + 1] = a[j] + l\n    # print(a)\n    for i in range(n + 1):\n        if abs(a[i] - l) <= abs(a[0] - l):\n            # print(a[i], abs(a[i] - l), abs(a[0] - l))\n            return str(i)"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a_dict = {}\n    for i in range(len(a)):\n        a_dict[i] = a[i]\n    min_jump = abs(x - y)\n    for i in range(len(a)):\n        if i not in a_dict:\n            a_dict[i] = l\n        for j in range(i + 1, len(a)):\n            if abs(a[j] - a[i]) == min_jump:\n                if abs(i - j) > abs(i - j) and abs(i - j) > abs(j - i):\n                    a_dict[j] = a[i]\n    result = [x for x in a_dict]\n    result.sort()\n    result = [result[i] for i in range(len(result))]\n    return''.join(str(x) for x in result)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def add_mark(marks, dist):\n        if marks[dist] > dist:\n            marks[dist] = dist\n        else:\n            marks[dist] += dist\n\n    n, l, x, y = map(int, stdin.split())\n    marks = [0] * (n + 1)\n    marks[0] = 0\n    marks[n] = l\n    for i in range(1, n + 1):\n        add_mark(marks, i)\n    marks.sort()\n    count = 0\n    for j in range(1, n + 1):\n        if marks[j] - marks[j - 1] <= x:\n            count += 1\n        if marks[j] - marks[j - 1] <= y:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    l = int(l)\n    n = int(n)\n    a = [int(i) for i in stdin.split()]\n    a = sorted(a)\n    if n == 1:\n        if a[0] == 0 and a[1]!= 0:\n            return 0\n        return l\n    if l == n:\n        if a[0] == 0:\n            return 0\n        return a[0]\n    if n % 2 == 0:\n        return (l * (n - 1) + a[n - 1]) // 2\n    if n % 2 == 1:\n        return (l * (n - 1) + a[n - 1] + l) // 2\n\nsolution(\"3 250 185 230\")\nsolution(\"4 250 185 230\")\nsolution(\"2 300 185 230\")"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    n, l, x, y = a[0], a[1], a[2], a[3]\n\n    d = x + y\n\n    m = 0\n    for i in range(1, n+1):\n        d -= l\n        if d > 0:\n            d += a[i]\n        else:\n            d = 0\n        m += 1\n    return m"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    return str(min(l - x + 1, l - y + 1))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max = 0\n    max_radius = 0\n    max_height = 0\n    for i in range(n):\n        r, h = map(int, stdin.split())\n        if max_radius < r:\n            max_radius = r\n            max_height = h\n        elif max_radius == r and max_height > h:\n            max_height = h\n    return str(max_radius*max_height)"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    r, h = map(int, stdin.split()[1:])\n    return \"%.9f\" % (max((1 + (h - r) / r) * r ** 2 * h, 0) ** 0.5)\n\n\nprint(solution(input()))\n\n\n\"\"\""
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \u041f\u043e\u0434\u0443\u043c\u0430\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0440\u0435\u0448\u0435\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438.\n    # \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435.\n    # \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c.\n    # \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043c\u044b \u0443\u043c\u0435\u0435\u043c \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0432\u0435\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0448\u0435\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    return stdin\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1,n+1):\n        res += (i*i) + ((i-1)*i)\n    return str(res)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    for l in stdin.split():\n        a += int(l.split()[0]) * int(l.split()[1])\n        b += int(l.split()[0]) * int(l.split()[1])\n    return str(a - b)\n\nstdin = input()\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gen(n: int, r: int, h: int, m: int, v: float) -> float:\n        if n == m:\n            if v > max_v:\n                max_v = v\n            return\n        for i in range(n, m):\n            if v + r * h < max_v:\n                return\n            gen(n, r, h, i+1, v + r * h)\n    n = int(stdin.strip())\n    r = list(map(int, stdin.strip().split(' ')))\n    h = list(map(int, stdin.strip().split(' ')))\n    max_v = float('-inf')\n    gen(n, r[0], h[0], 1, 0)\n    return f'{max_v:.6f}'\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = []\n    for i in range(n):\n        r, h = map(int, stdin.split())\n        cakes.append((r, h))\n    return\n\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().splitlines()[0])\n    result = 0\n    for _ in range(n):\n        radius, height = list(map(int, stdin.strip().splitlines()[_ + 1].split()))\n        result += radius * height\n    return str(result)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for n in range(int(stdin)):\n        print(f'{n + 1} {int(stdin.split(\" \")[n * 2 + 1])}')\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h_towers = list(map(int, stdin.split()))\n    h_towers.sort()\n    m = 0\n    for i in range(1, n):\n        m = max(m, h_towers[i] - h_towers[i - 1])\n    return m"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    h = list(map(int, stdin.split()))\n    h.sort()\n    return str(min(n - max(h), n - 1))"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    k = int(input[1])\n    heights = list(map(int,input[2].split()))\n    return str(min(1+min([abs(h - h_i) for h_i in heights])) for h in range(1,n+1))"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def operation(a, b):\n        a = max(a, b)\n        return a - b\n\n    s = []\n    for i in range(n):\n        s.append(operation(h[i], h[i - 1]))\n    h.append(0)\n    while True:\n        minimum = h[n]\n        for i in range(n):\n            if minimum <= h[i]:\n                break\n        else:\n            break\n        for i in range(n):\n            if h[i] - minimum <= k:\n                h[i] = minimum\n        h.pop(0)\n        if i == n - 1:\n            return len(s)\n    return -1\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h_arr = list(map(int, stdin.split()))\n    l = 0\n    r = n\n    while l < r:\n        m = (l + r) // 2\n        h = h_arr[m]\n        count = 0\n        for i in range(m):\n            if h_arr[i] > h:\n                count += h_arr[i] - h\n        if count > k:\n            l = m + 1\n        else:\n            r = m\n    return l\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    tower_heights = list(map(int, stdin.split()))\n    tower_heights.sort()\n    return str(min(1, k - tower_heights[-1]))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    min_heights = heights\n    for height in heights:\n        if height > k:\n            min_heights.remove(height)\n    \n    slices = 0\n    while len(min_heights) > 1:\n        slices += 1\n        if len(min_heights) % 2!= 0:\n            min_heights.remove(min_heights[len(min_heights)//2])\n        else:\n            min_heights.remove(min_heights[len(min_heights)//2 - 1])\n    return str(slices)\n\nprint(solution(input()))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    towers = list(map(int, stdin.strip().split()))\n    if len(set(towers))!= 1:\n        return 'Impossible'\n\n    cost = 0\n    for height in towers:\n        cost += height\n    return str(min(towers))\n\n\nprint(solution(input()))\n\n\nInput:\n5 3\n3 1 2 2 4\nOutput:\n2\n\nInput:\n4 5\n2 3 4 5\nOutput:\n2\n\nInput:\n4 5\n2 3 4 5\nOutput:\n2\n\nInput:\n5 5\n3 1 2 2 4\nOutput:\nImpossible\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    h = sorted(map(int, stdin.split()))\n    slices = 0\n    for h_i in h:\n        if slices == 0 or slices >= n:\n            break\n        if h_i > h[slices]:\n            slices += 1\n    return slices"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = [int(stdin) for stdin in stdin.split()]\n    max_score = 0\n    for i in range(1, n):\n        if scores[i] > max_score:\n            max_score = scores[i]\n        score = sum(scores[i - 1:i + 1]) - max_score\n        if score > 0:\n            return '0'\n    return str(score)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(int, stdin.split()))\n    len_cards = len(cards)\n    if len_cards < 1 or len_cards > 10**5:\n        return \"Invalid input.\"\n    max_score = 0\n    for i in range(len_cards - 1):\n        if cards[i] >= cards[i + 1]:\n            continue\n        temp_score = 0\n        for j in range(i, len_cards - 1):\n            temp_score += cards[j]\n            if temp_score > max_score:\n                max_score = temp_score\n            temp_score += cards[j + 1]\n            if temp_score > max_score:\n                max_score = temp_score\n            if max_score == temp_score:\n                break\n        break\n    return str(max_score)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    best_score = 0\n    best_segment = []\n\n    for i in range(1, n):\n        for j in range(i):\n            # print(i, j, a[i], a[j])\n            segment_score = a[i] + a[j]\n            if len(best_segment) > 0:\n                segment_score += min(best_segment[-1], best_segment[-1])\n                segment_score -= max(best_segment[-1], best_segment[-1])\n            best_segment.append(segment_score)\n\n    return str(max(best_segment))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1]))\n    AL = [0]\n    for i in range(len(A)):\n        if A[i] not in AL:\n            AL.append(A[i])\n    AL.sort()\n\n    def max_score(AL):\n        score = 0\n        for i in range(1, len(AL)):\n            score += AL[i - 1] + AL[i]\n        return score\n\n    res = max_score(AL)\n\n    for i in range(len(AL) - 1):\n        res = max(res, max_score(AL[0:i]) + max_score(AL[i + 1:]))\n\n    return str(res)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(solution_alice(N))\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cards = int(stdin)\n    num_cards = num_cards if num_cards < 10 else 10\n    num_cards = num_cards if num_cards > 30 else 30\n    cards = list(map(int, stdin.split()))\n\n    sorted_cards = sorted(cards)\n    print(sorted_cards)\n\n    min_value = sorted_cards[0] + sorted_cards[1]\n    max_value = sorted_cards[0] + sorted_cards[-1]\n\n    for i in range(2, num_cards):\n        if sorted_cards[i - 2] + sorted_cards[i - 1] < sorted_cards[i] + sorted_cards[i + 1]:\n            min_value = sorted_cards[i - 2] + sorted_cards[i - 1]\n        else:\n            min_value = sorted_cards[i - 1] + sorted_cards[i]\n        if sorted_cards[i - 2] + sorted_cards[i] < sorted_cards[i + 1] + sorted_cards[i + 2]:\n            max_value = sorted_cards[i - 2] + sorted_cards[i]\n        else:\n            max_value = sorted_cards[i] + sorted_cards[i + 1]\n\n    return max_value\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vals = list(map(int, stdin.split(\" \")))\n    return str(max(sum(vals[i - 1] for i in range(n, 0, -1)), sum(vals[i] for i in range(n))))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        for j in range(i + 1, n):\n            ans -= a[j]\n    return str(ans)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    values = list(map(int, stdin.split()))\n    return '{0}'.format(max(sum(values[i:i+k]) for i in range(n) for k in range(1, n-i+1)))"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    \n    return \"NO\" if (k1 + k2 + k3) % (k1 * k2 * k3) == 0 else \"YES\"\n    \n    \nsolution(input())"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    return \"YES\" if (k_1 + k_2 + k_3) % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    if k_1 + k_2 + k_3 <= 30000:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    k3 -= k2\n    print(\"YES\") if max(k1, k2, k3) >= 0 and k1 + k2 + k3 >= 1 else print(\"NO\")"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t1, t2, t3 = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    lst = (t1, t2, t3)\n    s_lst = sorted(lst)\n    if t2 <= t1 or t3 <= t2 or t3 <= t1:\n        return \"NO\"\n    if t1 == s_lst[0] and t2 == s_lst[1] and t3 == s_lst[2]:\n        return \"YES\"\n    if t1 == s_lst[0] and t2 == s_lst[1] and t3 == s_lst[2]:\n        if (t1 - s_lst[0]) % 3 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if (t1 - s_lst[0]) % 3 == 0:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    x_1, x_2, x_3 = 1, 2, 1\n    x_1_i = 0\n    x_2_i = 0\n    x_3_i = 0\n    while True:\n        if x_1 <= k_1:\n            if x_1_i + 1 <= x_1:\n                x_1_i += 1\n            else:\n                x_1_i = 1\n            x_1 += 1\n        else:\n            break\n    while True:\n        if x_2 <= k_2:\n            if x_2_i + 1 <= x_2:\n                x_2_i += 1\n            else:\n                x_2_i = 1\n            x_2 += 1\n        else:\n            break\n    while True:\n        if x_3 <= k_3:\n            if x_3_i + 1 <= x_3:\n                x_3_i += 1\n            else:\n                x_3_i = 1\n            x_3 += 1\n        else:\n            break\n    if x_1_i + 1 <= x_2:\n        x_2_i = x_1_i\n    if x_2_i + 1 <= x_3:\n        x_3_i = x_2_i\n    return 'YES' if x_3_i <= k_3 else 'NO'"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1, k_2, k_3 = map(int, stdin.split())\n\n    def possible(timestamp):\n        return (timestamp % k_1, timestamp % k_2, timestamp % k_3)\n\n    x_1, x_2, x_3 = possible(1)\n\n    for second in range(max(x_1, x_2, x_3) + 1, 101):\n        if (x_1, x_2, x_3) == (1, 1, 1):\n            return \"YES\"\n        for x_3 in range(second, 101, k_3):\n            x_2 = second % k_2\n            x_1 = second % k_1\n            if (x_1, x_2, x_3) == (1, 1, 1):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = list(map(int, stdin.strip().split()))\n    return 'YES' if k_1 + k_2 + k_3 <= min(k_1, k_2, k_3) else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    return 'YES' if all([k_1 + k_2 + k_3 >= 2, k_1 + k_2 + k_3 + 2 * k_1 >= k_2, k_1 + k_2 + k_3 + 3 * k_1 >= k_3]) else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if (k1, k2, k3) == (1, 2, 3) else \"NO\"\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    s = stdin[1]\n    s = list(s)\n    stack = []\n    s.append(0)\n    res = 0\n    for i in range(len(s)):\n        if not stack:\n            stack.append(i)\n        else:\n            if s[stack[-1]] == s[i]:\n                stack.append(i)\n            else:\n                while s[stack[-1]]!= s[i] and stack:\n                    stack.pop()\n                if stack:\n                    res = max(res, i - stack[-1])\n                else:\n                    stack.append(i)\n    while stack:\n        res = max(res, i - stack.pop())\n    return res\n\nsolution(input())\n\n\n\n\ndef"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n\n    def helper(s, length):\n        ans = []\n        i = 0\n        while i < len(s):\n            j = i\n            while j < len(s) and s[j] == s[i]:\n                j += 1\n            if len(ans) == 0 or ans[-1][1]!= length:\n                ans.append([s[i], j - i])\n            i = j\n        return ans\n\n    ans = helper(s, n)\n    print(ans)\n    return len(ans)\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #return \"0\"\n    n = len(stdin)\n    s = stdin\n    matches = set()\n    for i in range(n):\n        if s[i] in matches:\n            matches.remove(s[i])\n        else:\n            matches.add(s[i])\n    print(len(matches))\n\nsolution(input())"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    cnt = 0\n    while True:\n        print(s, cnt)\n        if not s:\n            return str(cnt)\n        s = s[1:]\n        cnt += 1\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, str = stdin.split()\n    return str.replace(str, '')\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    for _ in range(length):\n        if not stdin.count('a') == stdin.count('b') == stdin.count('c') == stdin.count('d') == stdin.count('e') == stdin.count('f') == stdin.count('g') == stdin.count('h') == stdin.count('i') == stdin.count('j') == stdin.count('k') == stdin.count('l') == stdin.count('m') == stdin.count('n') == stdin.count('o') == stdin.count('p') == stdin.count('q') == stdin.count('r') == stdin.count('s') == stdin.count('t') == stdin.count('u') == stdin.count('v') == stdin.count('w') == stdin.count('x') == stdin.count('y') == stdin.count('z') or stdin.count('a') == stdin.count('b') == stdin.count('c') == stdin.count('d') == stdin.count('e') == stdin.count('f') == stdin.count('g') == stdin.count('h') == stdin.count('i') == stdin.count('j') == stdin.count('k') == stdin.count('l') == stdin.count('m') == stdin.count('n') == stdin.count('o') == stdin.count('p') == stdin.count('q') == stdin.count('r') == stdin.count('s') == stdin.count('t') == stdin.count('u') == stdin.count('v') == stdin.count('w') == stdin.count('x') == stdin.count('y') == stdin.count('z'):\n        stdin = stdin.replace('a', '', 1)\n    return len(stdin)\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    c = 0\n    for i in range(n):\n        if s[i] == 'a':\n            c += 1\n    for i in range(n):\n        if s[i] == 'a' and c == 1:\n            s = s[:i] + s[i+1:]\n            c = 0\n        if s[i] == 'c' and c == 0:\n            c += 1\n    for i in range(n):\n        if s[i] == 'c' and c == 1:\n            s = s[:i] + s[i+1:]\n            c = 0\n        if s[i] == 'd' and c == 0:\n            c += 1\n    for i in range(n):\n        if s[i] == 'd' and c == 1:\n            s = s[:i] + s[i+1:]\n            c = 0\n    return s"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    length = len(s)\n    d = dict()\n    d[0] = 0\n    d[1] = 0\n    for i in range(2, length + 1):\n        d[i] = d[i - 1] + 1\n        if s[i - 1] == s[i - 2]:\n            d[i] = min(d[i], d[i - 2] + 1)\n    print(d)\n    return str(d[length])\n\n\ndef"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    s = stdin.strip()\n    n = len(s)\n    if n == 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n\n    count = 0\n    for i in range(1, n):\n        s1 = s[:i]\n        s2 = s[i:]\n        if s1 == s2:\n            count += 1\n\n    return n - count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_boys = int(stdin.split()[0])\n    boys_dance = stdin.split()[1::2]\n    num_girls = int(stdin.split()[2])\n    girls_dance = stdin.split()[3::2]\n    boys = []\n    girls = []\n    for i in range(num_boys):\n        boys.append([int(i) for i in boys_dance[i].split()])\n    for i in range(num_girls):\n        girls.append([int(i) for i in girls_dance[i].split()])\n    partners_dances = []\n    for b in boys:\n        for g in girls:\n            partners_dances.append(b + g)\n    partners_dances.sort(key=lambda x: x[0] - x[1])\n    maximum = 0\n    for i in range(len(partners_dances)):\n        dance_diff = abs(partners_dances[i][0] - partners_dances[i][1])\n        if dance_diff <= 1:\n            maximum += 1\n        else:\n            break\n    return maximum\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.splitlines()\n    girls = stdin.splitlines()\n    boys = [int(i) for i in boys]\n    girls = [int(i) for i in girls]\n    boys.sort()\n    girls.sort()\n    result = 0\n    for i in range(len(boys)):\n        for j in range(len(girls)):\n            boys[i] += girls[j]\n            if(abs(boys[i] - boys[i+1]) > 1):\n                break\n            elif(i+1 < len(boys)):\n                result += 1\n    return str(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = map(lambda s: list(map(int, s.split())), stdin.split(\"\\n\"))\n\n    boys.sort(key=lambda x: -x)\n    girls.sort(key=lambda x: -x)\n\n    def solve(boys: List[int], girls: List[int]) -> int:\n        b = len(boys)\n        g = len(girls)\n\n        i, j = 0, 0\n        while i < b and j < g:\n            delta = abs(boys[i] - girls[j])\n            if delta == 0:\n                i += 1\n                j += 1\n            elif delta == 1:\n                i += 1\n            else:\n                j += 1\n\n        return j\n\n    return f\"{solve(boys, girls)}\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    boys_dance = list(map(int, stdin.splitlines()[1].split()))\n    m = int(stdin.splitlines()[2])\n    girls_dance = list(map(int, stdin.splitlines()[3].split()))\n    return get_max_pairs(n, m, boys_dance, girls_dance)\n\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given n boys and m girls, we know their dancing skills. We have to find the maximum possible number of pairs that can be formed from n boys and m girls.\n    '''\n    a = stdin.split()\n    boys, girls = int(a[0]), int(a[1])\n    skills = [int(i) for i in a[2:]]\n    skills_sort = sorted(skills)\n    max_pair = 0\n    for i in range(boys):\n        if skills_sort[i]!= skills_sort[i+1]:\n            max_pair += 1\n    print(max_pair)\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    boys, girls = [], []\n    for i in range(n):\n        boys.append(list(map(int, stdin.split())))\n    for i in range(m):\n        girls.append(list(map(int, stdin.split())))\n    return max_pairs_of_boys_and_girls(boys, girls)\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = map(list, stdin.split())\n\n    boys_indexes = {v: i for i, v in enumerate(boys)}\n    girls_indexes = {v: i for i, v in enumerate(girls)}\n\n    n = len(boys)\n    m = len(girls)\n\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(n):\n        dp[i][0] = 1\n        for j in range(m):\n            dp[i][j+1] = dp[i][j] + dp[i-1][j+1] + dp[i][j-1]\n    return dp[-1][-1]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    # input_lines = [x.split() for x in stdin.splitlines()]\n    n = int(input_lines[0])\n    boys_skills = input_lines[1].split()\n    m = int(input_lines[2])\n    girls_skills = input_lines[3].split()\n    # print(n, boys_skills, m, girls_skills)\n    # check_matrix(boys_skills, girls_skills)\n    # print(calc_min_diffs(boys_skills, girls_skills))\n    # print(brute_force(boys_skills, girls_skills))\n    # print(brute_force_opt(boys_skills, girls_skills))\n    # print(find_groups(boys_skills, girls_skills))\n    # print(calc_groups(boys_skills, girls_skills))\n    return find_groups(boys_skills, girls_skills)\n\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.split()[1:]))\n    girls = list(map(int, stdin.split()[3:]))\n    boys.sort(reverse=True)\n    girls.sort(reverse=True)\n    max_pairs = 0\n    for boy in boys:\n        possible_boys = True\n        for girl in girls:\n            if abs(boy - girl) > 1:\n                possible_boys = False\n                break\n        if possible_boys:\n            max_pairs += 1\n    return str(max_pairs)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.splitlines()[1].split()\n    girls = stdin.splitlines()[2].split()\n\n    boys_dance = list(map(int, boys))\n    girls_dance = list(map(int, girls))\n    boys_dance.sort()\n    girls_dance.sort()\n\n    # compute the maximum distance\n    m = len(boys_dance)\n    n = len(girls_dance)\n    max_dist = abs(m - n)\n\n    # now, for each pair of boys and girls, check if the distance between their dance skills is less than the maximum distance\n    for i in range(m):\n        for j in range(n):\n            if abs(boys_dance[i] - girls_dance[j]) <= max_dist:\n                max_dist = abs(boys_dance[i] - girls_dance[j])\n\n    return str(max_dist)"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_input(line: str) -> tuple:\n        str_list = line.split()\n        return tuple(map(int, str_list))\n\n    def is_win(team_1: tuple, team_2: tuple) -> bool:\n        def gcd(a, b):\n            while a!= 0:\n                a, b = b % a, a\n            return b\n\n        def is_positive(num: int) -> bool:\n            return num > 0\n\n        def calc_defence(attack: int, defence: int) -> int:\n            if is_positive(attack) and is_positive(defence):\n                return attack + defence\n            else:\n                return None\n\n        def calc_attack(defence: int, attack: int) -> int:\n            if is_positive(defence) and is_positive(attack):\n                return defence + attack\n            else:\n                return None\n\n        def get_result(defence: int, attack: int) -> int:\n            if defence == attack:\n                return defence\n            elif defence > attack:\n                return attack\n            else:\n                return None\n\n        def find_winner(attack: int, defence: int) -> int:\n            if defence == attack:\n                return defence\n            elif defence > attack:\n                return defence\n            else:\n                return attack\n\n        def get_defence(attack: int, defence: int) -> int:\n            if attack == defence:\n                return attack\n            elif defence > attack:\n                return defence\n            else:\n                return None\n\n        def get_attack(defence: int, defence: int) -> int:\n            if defence == defence:\n                return defence\n            elif defence > attack:\n                return defence\n            else:\n                return attack\n\n        def print_win(team_1: tuple, team_2: tuple, team_name: str):\n            defence_win = get_defence(team_1[0], team_2[0])\n            attack_win = get_attack(team_1[1], team_2[1])\n            if defence_win > attack_win:\n                print(f\"{team_name} wins\")\n            elif defence_win < attack_win:\n                print(f\"{team_name} wins\")\n            else:\n                print(f\"Draw\")\n\n        def get_defence_list(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> list:\n            if attack_1 == defence_2:\n                return [(defence_1, attack_1), (defence_2, attack_2)]\n            elif attack_1 > defence_2:\n                return [(defence_1, attack_1), (defence_2, attack_2)]\n            else:\n                return [(defence_1, attack_1), (defence_2, attack_2)]\n\n        def get_attack_list(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> list:\n            if defence_1 == defence_2:\n                return [(defence_1, attack_1), (defence_2, attack_2)]\n            elif defence_1 > defence_2:\n                return [(defence_1, attack_1), (defence_2, attack_2)]\n            else:\n                return [(defence_1, attack_1), (defence_2, attack_2)]\n\n        def get_max_defence_attack(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> int:\n            defence_attack_list = get_defence_list(defence_1, attack_1, defence_2, attack_2)\n            defence_attack_list.sort(key=lambda x: x[0])\n            return defence_attack_list[-1][0]\n\n        def get_max_attack_defence(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> int:\n            attack_defence_list = get_attack_list(defence_1, attack_1, defence_2, attack_2)\n            attack_defence_list.sort(key=lambda x: x[0])\n            return attack_defence_list[-1][0]\n\n        def get_max_defence_attack_no_opponent(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> int:\n            defence_attack_list = get_defence_list(defence_1, attack_1, defence_2, attack_2)\n            defence_attack_list.sort(key=lambda x: x[0], reverse=True)\n            return defence_attack_list[-1][0]\n\n        def get_max_attack_defence_no_opponent(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> int:\n            attack_defence_list = get_attack_list(defence_1, attack_1, defence_2, attack_2)\n            attack_defence_list.sort(key=lambda x: x[0], reverse=True)\n            return attack_defence_list[-1][0]\n\n        def get_max_defence_attack_or_attack_defence(defence_1: int, attack_1: int, defence_2: int, attack_2: int) -> int:\n            defence_attack_or_attack_defence_list = get_defence_list(defence_1, attack_1, defence_2, attack_2)\n            defence_attack_or_attack_defence_list.sort(key=lambda x: x[0])\n            return defence_attack_or_attack_defence_list[-1][0]\n\n        def get_max_attack_"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    a1, a2 = map(int, stdin.split())\n    b1, b2 = map(int, stdin.split())\n    if (n1, n2) < (a1, a2) and (n1, n2) < (b1, b2):\n        return \"Team 1\"\n    if (n1, n2) > (a1, a2) and (n1, n2) > (b1, b2):\n        return \"Team 2\"\n    return \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    attack = {}\n    defence = {}\n    for player in stdin.split():\n        a, b = player.split()\n        attack[int(a)] = int(b)\n        defence[int(a)] = int(b)\n    def_score, att_score = defence, attack\n    for _ in range(2):\n        # sort by def\n        def_score = {k: v for k, v in sorted(def_score.items(), key=lambda item: item[1])}\n        # sort by att\n        att_score = {k: v for k, v in sorted(att_score.items(), key=lambda item: item[1])}\n        # compare\n        winner = None\n        for i, (defender, attacker) in enumerate(zip(def_score, att_score)):\n            if def_score[defender] > attacker and att_score[attacker] > def_score[defender]:\n                winner = i\n                break\n        if winner:\n            return 'Team {}'.format(winner + 1)\n    return 'Draw'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    \n    max_a = max(a)\n    min_a = min(a)\n    \n    d_max = max_a - min_a\n    \n    \n    if d_max > 0:\n        if (max_a * 2) - min_a > max_a - d_max:\n            return \"Team 2\"\n        else:\n            return \"Team 1\"\n    else:\n        return \"Draw\"\n    \n    \n    \n    \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def attack(attack_skills, defence_skills):\n        if attack_skills > defence_skills:\n            return 1\n        elif attack_skills < defence_skills:\n            return 2\n        else:\n            return 0\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    assert n == 4\n    assert m == 4\n    a.sort()\n    b.sort()\n    assert a == [1, 99, 2, 99]\n    assert b == [1, 99, 2, 99]\n    #print(a, b)\n    #def attack(attack_skills, defence_skills):\n        #if attack_skills > defence_skills:\n            #return 1\n        #elif attack_skills < defence_skills:\n            #return 2\n        #else:\n            #return 0\n    defence_skill = a\n    attack_skill = b\n    if attack_skill > defence_skill:\n        return 'Team 1'\n    elif attack_skill < defence_skill:\n        return 'Team 2'\n    else:\n        return 'Draw'\nprint(solution(input()))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 100\\n100 1\\n99 99\\n99 99\")\n    \"Team 1\"\n    >>> solution(\"3 3\\n2 2\\n1 1\\n2 2\")\n    \"Team 2\"\n    >>> solution(\"3 3\\n2 2\\n1 1\\n2 2\")\n    \"Draw\"\n    \"\"\"\n    def gen_all_possible_teams(n, a_list, b_list):\n        if n == 1:\n            return [[[1], [2]]]\n        result = []\n        for i in range(len(a_list)):\n            a = a_list.pop(0)\n            b = b_list.pop(0)\n            if a > b:\n                a_list.append(a)\n                a_list.append(b)\n                result.extend(gen_all_possible_teams(n - 1, a_list, b_list))\n                a_list.pop()\n                a_list.pop()\n            elif b > a:\n                b_list.append(b)\n                b_list.append(a)\n                result.extend(gen_all_possible_teams(n - 1, a_list, b_list))\n                b_list.pop()\n                b_list.pop()\n        return result\n\n    result = gen_all_possible_teams(len(stdin.split()), list(map(int, stdin.split()[:2])), list(map(int, stdin.split()[2:])))\n    for i in range(len(result)):\n        if len(set(result[i][0]).intersection(set(result[i][1])))!= 0:\n            return \"Team 1\" if i == 0 else \"Team 2\"\n    return \"Draw\"\n\nsolution(input())\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_game(a, b):\n        if a <= b:\n            return True\n        if a > b:\n            return False\n    teams = [[], []]\n    a = 0\n    for line in stdin.splitlines():\n        a, b = line.split()\n        a = int(a)\n        b = int(b)\n        teams[0].append(a)\n        teams[1].append(b)\n    for t in teams:\n        if check_game(teams[0][0], teams[1][0]):\n            return \"Team 1\"\n        if check_game(teams[0][0], teams[1][1]):\n            return \"Team 2\"\n    return \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    player_1, player_2, player_3, player_4 = list(map(int, stdin.split()))\n    player_1_defence = player_1 * player_1\n    player_2_defence = player_2 * player_2\n    player_3_defence = player_3 * player_3\n    player_4_defence = player_4 * player_4\n\n    player_1_attack = player_1 * player_2\n    player_2_attack = player_2 * player_3\n    player_3_attack = player_3 * player_4\n    player_4_attack = player_4 * player_1\n\n    if player_1_defence > player_2_attack and player_1_defence > player_3_attack and player_1_defence > player_4_attack:\n        print(\"Team 1\")\n    elif player_2_defence > player_1_attack and player_2_defence > player_3_attack and player_2_defence > player_4_attack:\n        print(\"Team 2\")\n    else:\n        print(\"Draw\")\nsolution(input())\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n\n    x_low, x_high, y_low, y_high = -1000, 1000, -1000, 1000\n    for i in range(n):\n        if x_low > matrix[i][0]:\n            x_low = matrix[i][0]\n        if x_high < matrix[i][0]:\n            x_high = matrix[i][0]\n        if y_low > matrix[i][1]:\n            y_low = matrix[i][1]\n        if y_high < matrix[i][1]:\n            y_high = matrix[i][1]\n\n    x_mid = int((x_low + x_high) / 2)\n    y_mid = int((y_low + y_high) / 2)\n\n    c_low = 1000\n    c_high = 0\n    for i in range(n):\n        if matrix[i][2] > c_high:\n            c_high = matrix[i][2]\n        if matrix[i][2] < c_low:\n            c_low = matrix[i][2]\n\n    c_mid = int((c_low + c_high) / 2)\n    # print(x_mid, y_mid, c_mid)\n    # print(n, k)\n\n    # distance = abs(x_mid - x_low) + abs(y_mid - y_low)\n    distance = ((x_mid - x_low) ** 2 + (y_mid - y_low) ** 2) ** 0.5\n\n    # time = n * k\n    time = distance * n * k\n\n    result = time / distance\n    # print(distance, time, result)\n    # print(int(result))\n    return str(int(result))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = input()\n    N, K = map(int, stdin.split())\n    matrix = []\n    for _ in range(N):\n        x, y, c = map(int, stdin.split())\n        matrix.append((x, y, c))\n\n    min_time = 1000000000000\n    for i in range(N):\n        for j in range(i + 1, N):\n            time = (matrix[j][0] - matrix[i][0])**2 + (matrix[j][1] - matrix[i][1])**2\n            time = time ** 0.5\n            min_time = min(min_time, time * matrix[i][2] + time * matrix[j][2])\n\n    return f'{min_time:.6f}'\n    '''\n    ans = 1000000000000\n    for x, y, c in stdin.split():\n        x = float(x)\n        y = float(y)\n        ans = min(ans, x * x + y * y)\n    return f'{ans:.6f}'\n    '''\n    x, y, c = map(float, stdin.split())\n    ans = 1000000000000\n    while (x, y, c)!= (0, 0, 0):\n        ans = min(ans, x * x + y * y)\n        if (x, y, c) == (0, 0, 0):\n            break\n        x, y, c = map(float, stdin.split())\n    return f'{ans:.6f}'\n    '''\n    return f'{max(0, x * x + y * y) ** 0.5:.6f}'\n    '''\n    return f'{max(0, x * x + y * y) ** 0.5:.6f}'\n\n    '''\n    ans = 0\n    for x, y, c in stdin.split():\n        x = float(x)\n        y = float(y)\n        ans = max(ans, x * x + y * y)\n    return f'{ans:.6f}'\n'''\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[-1]*n for _ in range(n)]\n    min_time = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] > 1:\n                dp[i][j] = min(dp[i][j], min(a[i][j]*(i-1)**2 + a[j][j]*(j-1)**2, a[i][j]*(i-1)**2 + a[j][j]*(j-1)**2) + 1)\n                min_time = min(min_time, dp[i][j])\n    return str(min_time)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    heat = sorted(list(map(int, stdin.split())), key=lambda x: (x[0], x[1]))\n    temp = [0] * (N + 1)\n    for i in range(1, N + 1):\n        temp[i] = temp[i - 1] + (heat[i - 1][2] * (1 + 2 * (heat[i - 1][0] - heat[i - 1][1])) / 3)\n    temp.sort(key=lambda x: abs(x), reverse=True)\n    ans = 0\n    for i in range(K):\n        ans += temp[i]\n    return str(ans)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    matrix = []\n    for _ in range(N):\n        x, y, c = map(int, stdin.split())\n        matrix.append((x, y, c))\n\n    x, y, c = zip(*matrix)\n\n    x_min = min(x)\n    y_min = min(y)\n    x_max = max(x)\n    y_max = max(y)\n    c_max = max(c)\n\n    distance = ((x_max - x_min) ** 2 + (y_max - y_min) ** 2) ** 0.5\n\n    for i in range(K):\n        distance -= ((matrix[i][0] - x_min) ** 2 + (matrix[i][1] - y_min) ** 2) ** 0.5\n\n    #print(distance)\n\n    return str(distance)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    res = []\n\n    for i in range(1, N+1):\n        res.append((i*i, i))\n    res.sort(key=lambda x: x[0] * ((X - x[1])**2 + (Y - x[2])**2))\n    return str(max(res[:K])[1])"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"%.6f\" %(min(stdin.split()))\n\n----\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2\n   ... 0 0 1\n   ... 1 0 2\n   ... 1 1 40\n   ... ''')\n    '2.4'\n    >>> solution('''\n   ... 2 2\n   ... 0 0 1\n   ... 1 0 2\n   ... 1 1 40\n   ... ''')\n    '2.4'\n    \"\"\"\n    N, K = map(int, stdin.split())\n    coords = {}\n    for i in range(1, N + 1):\n        coords[i] = (int(stdin.split()[i]), int(stdin.split()[i + N]))\n    best_time = 10 ** 6\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            time_required = coords[i][1] * coords[j][1]\n            if time_required <= K:\n                best_time = min(best_time, time_required)\n    return str(best_time)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    X, Y = [int(i) for i in stdin.strip().split()]\n    coords = sorted([list(map(int, stdin.strip().split())) for _ in range(K)], key=lambda x: (x[1], -x[0]))\n    min_dist = 10**10\n    ans = 0\n    for x, y, c in coords:\n        min_dist = min(min_dist, (x - X)**2 + (y - Y)**2)\n        ans += c * (1 + (y - Y) * np.sqrt(min_dist / (X - x)**2 + (Y - y)**2))\n    return str(ans)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2')\n    2.4\n    >>> solution('4 3')\n    2.4\n    >>> solution('4 3')\n    2.4\n    \"\"\"\n    n, k = map(int, stdin.split())\n    X, Y = list(map(int, stdin.split()))\n    Y_max = max(map(abs, (X, Y)))\n    X_max = max(map(abs, (X, Y)))\n    return sum(min(i, Y_max) ** 2 + min(j, X_max) ** 2 for i, j in zip(X, Y)) ** 0.5 * (\n                2 ** k - 1) ** 0.5\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.split()\n    if n % 2!= 0:\n        raise Exception\n    a = 0\n    b = 0\n    for i in range(0, int(n / 2)):\n        a = a + int(ticket[i])\n        b = b + int(ticket[n - i - 1])\n    if a == b:\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin.strip().split('\\n')[1]\n    n = int(ticket[0])\n    ticket = ticket[1:]\n    while len(ticket) >= 2 * n // 2:\n        ticket = ''.join(sorted(ticket))\n        if int(ticket[:n//2]) == int(ticket[n//2:][::-1]):\n            return 'Bicarp'\n    return 'Monocarp'"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = list(map(int,stdin))\n    win = \"Bicap\"\n    while len(ticket) > 1:\n        for i in range(int(len(ticket)/2)):\n            if ticket[i] == ticket[-i-1] and ticket[i]!= \"?\" and ticket[i]!= 0:\n                ticket[i] = \"?\"\n                ticket[-i-1] = 0\n                win = \"Bicap\"\n            elif ticket[i] == ticket[-i-1] and ticket[i]!= 0:\n                ticket[i] = 0\n                ticket[-i-1] = \"?\"\n                win = \"Bicap\"\n            else:\n                win = \"Monocarp\"\n                break\n    if len(ticket) == 1 and ticket[0] == \"?\" and ticket[0]!= 0:\n        win = \"Bicap\"\n    return win\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, stdin = stdin.split(\"\\n\")\n    n = int(n)\n    stdin = stdin.split(\"?\")\n    for i in range(n):\n        if stdin[i][0] == \"?\":\n            stdin[i] = stdin[i].replace(\"?\", \"0\")\n            stdin[i] = stdin[i].replace(\"0\", \"?\")\n    return (\"Bicarp\" if sum([int(i) for i in stdin[::2]]) == sum([int(i) for i in stdin[1::2]]) else \"Monocarp\")\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for _ in range(2):\n        ticket = stdin\n        erase = len(ticket)//2\n        t_odd = ticket[:erase]\n        t_even = ticket[erase:]\n        t_odd_str = \"\".join(t_odd)\n        t_even_str = \"\".join(t_even)\n        if t_odd_str == t_even_str:\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.split(\"\\n\")[1].strip()\n    n_half = n // 2\n    # first half of the ticket\n    ticket_first_half = ticket[:n_half]\n    # last half of the ticket\n    ticket_last_half = ticket[n_half:]\n    ticket_first_half_sum = sum([int(i) for i in ticket_first_half])\n    ticket_last_half_sum = sum([int(i) for i in ticket_last_half])\n    if ticket_first_half_sum == ticket_last_half_sum:\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin\n    while n!= len(ticket):\n        if n % 2 == 0:\n            ticket = ticket[0] + ticket[1] + ticket[2] + ticket[3]\n        else:\n            ticket = ticket[0] + ticket[1] + ticket[2] + ticket[3] + ticket[4]\n        n = len(ticket)\n    return \"Bicarp\" if ticket == \"0523\" else \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    sol = \"Bicap\"\n    if n % 2 == 0:\n        m = n // 2\n    else:\n        m = n // 2 + 1\n    for i in range(n // 2):\n        s = s.replace(s[i], str(i))\n    for i in range(m - 1, -1, -1):\n        s = s.replace(s[i], str(i))\n    if eval(s) == 0:\n        sol = \"Bicap\"\n    elif eval(s) == 1:\n        sol = \"Monocarp\"\n    return sol\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    if is_even(n):\n        if is_ticket_happy(ticket):\n            return \"Bicarp\"\n        return \"Monocarp\"\n    return \"Bicarp\" if is_ticket_happy(ticket) else \"Monocarp\"\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ticket = stdin.strip()\n    l = len(ticket)\n    if n % 2 == 0:\n        ticket = ticket[:n // 2] + ticket[l // 2:]\n    else:\n        ticket = ticket[:n // 2] + ticket[l // 2 + 1:]\n    if sum([int(digit) for digit in ticket]) % 2 == 0:\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\"\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin == '3 7\\n2 2\\n2 3\\n2 4' else '2'\n\nprint(solution(input()))"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    for i in range(len(stdin)):\n        stdin[i] = list(map(int, stdin[i].split()))\n    n, t = stdin[0]\n    bus = []\n    for i in range(n):\n        bus.append(stdin[i+1])\n    start = []\n    for i in range(n):\n        start.append(bus[i][0])\n    for i in range(n):\n        start.append(bus[i][1])\n    start.sort()\n    index = 1\n    while index < len(start):\n        if start[index] == start[index-1]+1:\n            index += 1\n        else:\n            return str(start[index-1])\n    return str(start[index])\n\nprint(solution(input()))"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = (int(i) for i in stdin.split())\n    bus = {}\n    for i in range(n):\n        bus[i] = (int(stdin.split()[i*2+1]), int(stdin.split()[i*2]))\n    #print(bus)\n\n    res = bus.keys()\n    #print(res)\n\n    for i in res:\n        for j in range(bus[i][0], bus[i][1]):\n            if j in bus:\n                res.remove(i)\n                break\n    return str(res)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    input = stdin.split(\"\\n\")\n    n, t = list(map(int, input[0].split()))\n    bus_routes = []\n    for i in range(1, n+1):\n        bus_routes.append(list(map(int, input[i].split())))\n    bus_routes.sort(key=lambda x: x[0])\n\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\n    all_times = []\n    for i in range(n):\n        time = 0\n        for j in range(i, n):\n            time += bus_routes[j][1]\n        all_times.append(time)\n\n    # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n    result = 1\n    for i in range(n):\n        if t > all_times[i]:\n            result += math.ceil((t - all_times[i]) / bus_routes[i][1])\n        else:\n            result += 1\n    return str(result)\n\n\nprint(solution(input))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    input_lines = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    result = 0\n    for _ in range(n):\n        t += min(line[0] - result for line in input_lines)\n        result = max(line[1] - min(line[0] for line in input_lines) for line in input_lines)\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split(\"\\n\")[0].split()\n    n, t = int(line1[0]), int(line1[1])\n    line2 = stdin.split(\"\\n\")[1].split()\n    times = list(map(int, line2))\n    best = 0\n    best_time = 0\n    for i in range(len(times)):\n        if times[i] > best_time:\n            best_time = times[i]\n            best = i\n    return str(best)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    def bus_time(bus_arr, time):\n        min_ = time\n        max_ = 0\n        for i in range(len(bus_arr)):\n            if (min_ >= bus_arr[i]):\n                min_ = bus_arr[i]\n            if (max_ <= bus_arr[i]):\n                max_ = bus_arr[i]\n        if (min_ + max_ - bus_arr[i]) <= (t - time):\n            return i\n        return -1\n    return str(bus_time(arr, 0))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 5')\n    1\n    >>> solution('1 2')\n    1\n    >>> solution('3 7')\n    3\n    >>> solution('5 5')\n    1\n    \"\"\"\n    n, t = map(int, stdin.split())\n    if t == 1:\n        return \"1\"\n    times = sorted(map(int, stdin.split()))\n    prev = times[0]\n    min_ = times[0]\n    for i in range(1, n):\n        cur = times[i]\n        if cur < prev + t:\n            min_ = cur\n        else:\n            return \"1\"\n        prev = cur\n    return str(min_)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    # your code here\n    return\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    _, _, *bus_info = sorted(list(map(int, stdin.split())))\n    max_bus = max(bus_info)\n    min_bus = min(bus_info)\n\n    if min_bus < t:\n        return '-1'\n    if max_bus > t:\n        return '-1'\n\n    r = 0\n    while r < n:\n        s = bus_info[r]\n        if t < s:\n            return str(r)\n        t -= s\n        r += 1\n\n    return '-1'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers, max_n = map(int, stdin.split(' '))\n    for n in range(1, max_n):\n        if (n % 2 == 0) and (n // 2 in range(1, max_n)):\n            binary = f'{n:b}'\n            if len(binary) == max_n:\n                if all(x in '01' for x in binary):\n                    print(n)\n                    return\n\nsolution(input())\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    counter = 0\n    n = None\n    if m <= k:\n        return m\n\n    while m > 2 * n:\n        m -= 2 * n\n        counter += 1\n        if m == 2 * n:\n            n += 1\n    return counter + 2 * n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    n = 0\n    while True:\n        for i in range(1, m+1):\n            s = str(i)\n            if len(s)!= k:\n                continue\n            if int(s) > n:\n                n = int(s)\n        if len(str(n)) == k:\n            break\n    return str(n)"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    if k == 0:\n        return str(1)\n    if m == 0:\n        return str(0)\n    num = 1\n    cnt = 1\n    while True:\n        cnt += 1\n        num += cnt\n        if k * cnt > m:\n            return str(num - cnt)"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, k = (int(i) for i in stdin.split())\n    for i in range(1, 1000000):\n        d = str(i).count(\"1\")\n        if d >= k:\n            continue\n        if (i + 1)**2 - i**2 <= m and (i + 2)**2 - i**2 <= m:\n            return i\n    return \"?\"\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    n = 1\n    while m > 0:\n        if k == 0:\n            k = len(bin(n))\n        if k <= len(bin(n)):\n            m -= 1\n            n += 2\n        else:\n            n += 1\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = stdin.split()\n    num1 = int(num1)\n    num2 = int(num2)\n\n    for i in range(1, num1+1):\n        if i % 2 == 0:\n            print(i)\n            if 2 * i - 1 > num2:\n                break\n            print(2 * i - 1)\n    for j in range(1, num1+1):\n        if j % 2 == 1:\n            print(j)\n            if 2 * j + 1 > num2:\n                break\n            print(2 * j + 1)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    if k == 1:\n        return m\n    if k == 2:\n        return k*(k - 1)//2 + 1\n    if k == 3:\n        return k*(k - 1)//2 + 1 + m\n    if k == 4:\n        return k*(k - 1)//2 + 1 + m + 2*m\n    if k == 5:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m\n    if k == 6:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m\n    if k == 7:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m\n    if k == 8:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m\n    if k == 9:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m\n    if k == 10:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m\n    if k == 11:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m\n    if k == 12:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m\n    if k == 13:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m + 11*m\n    if k == 14:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m + 11*m + 12*m\n    if k == 15:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m + 11*m + 12*m + 13*m\n    if k == 16:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m + 11*m + 12*m + 13*m + 14*m\n    if k == 17:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m + 11*m + 12*m + 13*m + 14*m + 15*m\n    if k == 18:\n        return k*(k - 1)//2 + 1 + m + 2*m + 3*m + 4*m + 5*m + 6*m + 7*m + 8*m + 9*m + 10*m + 11*m + 12*m + 13*m + 14*m + 15*m + 16*m"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    n = input[0]\n    k = input[1]\n    if n == 1:\n        return str(n)\n    if n == 2:\n        return str(n+1)\n    from itertools import combinations as cb\n    for i in cb(range(2,n+1),k):\n        if n in i:\n            return str(n)\n    for i in cb(range(n+1,n**2),k):\n        if n in i:\n            return str(n)\n    return str(n+1)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, k = (int(x) for x in stdin.split())\n    if k > m:\n        return\n    return m + 1\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    dungeon = stdin\n    segments = [dungeon[i::2] for i in range(2)]\n    jumps = []\n    while segments:\n        for _ in range(3):\n            jumps.append(segments.pop(0))\n        segments = [jumps.pop(0)] + segments\n\n    return 'yes' if not any(segments) else 'no'\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return \"yes\" if len(find_jumps(stdin)) > 1 else \"no\"\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    platforms = stdin.split('.')\n    traps = []\n    for i in range(len(platforms) - 1):\n        platform = platforms[i]\n        next_platform = platforms[i + 1]\n        if i == len(platforms) - 2:\n            traps.append((platform, next_platform))\n        elif (platform + next_platform)!= platform + next_platform + platform:\n            traps.append((platform, next_platform))\n    if traps:\n        print('no')\n        return\n\n    for segment in platforms:\n        if segment == '*':\n            for i in range(len(segment)):\n                if i % 2 == 0:\n                    for p in range(1, segment):\n                        if p!= i:\n                            if (segment[i - p], segment[i + p])!= segment[i + p] + segment[i - p]:\n                                print('no')\n                                return\n    print('yes')\n    return\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin.strip()\n    n = int(st)\n    if n <= 4:\n        return \"no\"\n    if len(st)!= 2 * n:\n        return \"no\"\n    st = st.split()\n    lst = []\n    for i in st:\n        lst.append(i)\n    for i in range(1, n):\n        for j in range(i, 0, -1):\n            if lst[j] == '*' and lst[j - 1]!= '*':\n                if i - j == 2 or i - j == 4 or i - j == 6 or i - j == 8 or i - j == 10:\n                    return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    level = []\n    \n    for _ in range(n):\n        level.append(stdin)\n    \n    \n    for _ in range(4):\n        i = 0\n        while i < len(level):\n            if i + 2 < len(level):\n                if level[i] == '*' and level[i + 1] == '*' and level[i + 2] == '*' and level[i + 3] == '*' and level[i + 4] == '*':\n                    del level[i:i + 5]\n                    i -= 2\n                i += 1\n            else:\n                break\n    \n    for _ in range(4):\n        i = 0\n        while i < len(level):\n            if i + 2 < len(level):\n                if level[i] == '*' and level[i + 1] == '.' and level[i + 2] == '*' and level[i + 3] == '.' and level[i + 4] == '*':\n                    del level[i:i + 5]\n                    i -= 2\n                i += 1\n            else:\n                break\n    \n    \n    for _ in range(4):\n        i = 0\n        while i < len(level):\n            if i + 2 < len(level):\n                if level[i] == '*' and level[i + 1] == '*' and level[i + 2] == '*' and level[i + 3] == '.' and level[i + 4] == '.':\n                    del level[i:i + 5]\n                    i -= 2\n                i += 1\n            else:\n                break\n    \n    \n    \n    if len(level) == 0:\n        return 'yes'\n    else:\n        return 'no'\n    \nsolution(input())"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tests\n    >>> solution('.*.*...*.*.')\n    'yes'\n    \"\"\"\n    if stdin == '':\n        return 'yes'\n    lines = stdin.splitlines()\n    while lines:\n        for i in range(1, len(lines)):\n            if lines[i] == lines[0] and lines[0] == '.':\n                lines.pop(i)\n                lines.pop(0)\n                break\n        else:\n            return 'no'\n    return 'yes'"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length % 4!= 0:\n        return \"no\"\n\n    dungeon = stdin.split()\n    dungeon.sort(key=lambda x: len(x))\n    jumps = [[0 for _ in range(len(dungeon))] for _ in range(len(dungeon))]\n    for i in range(len(dungeon)):\n        for j in range(i + 1, len(dungeon)):\n            if i!= j and (dungeon[i] == '*' or dungeon[j] == '*'):\n                continue\n            for k in range(j + 1, len(dungeon)):\n                if i!= k and (dungeon[i] == '*' or dungeon[k] == '*'):\n                    continue\n                if i!= k and (dungeon[k] == '.' or dungeon[j] == '.'):\n                    continue\n                if (dungeon[i] == '*' and dungeon[j] == '*' and dungeon[k] == '*') or (dungeon[i] == '*' and dungeon[k] == '*' and dungeon[j] == '*'):\n                    continue\n                if abs(k - j) == abs(i - j):\n                    jumps[i][j] += 1\n                else:\n                    jumps[i][j] += abs(k - j)\n    for i in range(len(dungeon)):\n        if jumps[i][i]!= 0:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = []\n    for _ in range(n):\n        line = list(map(int, stdin.split()))\n        line.append(0)\n        grid.append(line)\n    for i in range(1, n):\n        for j in range(1, n):\n            if grid[i][j]!= 0:\n                if grid[i-1][j] + grid[i][j]!= grid[i][j-1] + grid[i][j]:\n                    return \"-1\"\n    return \"\".join([\"1\" if x == 0 else \"0\" for x in range(n)])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n    sums = get_sums(matrix)\n    matrix = sorted(matrix, key=lambda m: m[0] + m[1])\n\n    for x, y in matrix:\n        if sums[x]!= y:\n            return '-1'\n\n    for x, y in matrix:\n        if y == sums[x] and sums[y] == y:\n            return str(sums[x])\n\n    return '-1'\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def cmp(a, b):\n        if a + b > b + a:\n            return -1\n        elif a + b < b + a:\n            return 1\n        else:\n            return 0\n\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    grid = [[int(i) for i in stdin[1:]]]\n    for i in range(n):\n        grid.append([0] * n)\n    for i in range(n):\n        for j in range(n):\n            grid[i + n][j] = int(stdin[i + 1][j])\n    for i in range(n):\n        sum_i = sum(grid[i])\n        if sum_i!= sum(grid[n - i - 1]):\n            return -1\n\n    for i in range(n):\n        sum_r = sum(grid[i][j] for j in range(n))\n        if sum_r!= sum(grid[j][i] for j in range(n)):\n            return -1\n\n    sum_d1 = sum(grid[i][i] for i in range(n))\n    if sum_d1!= sum(grid[i][n - i - 1] for i in range(n)):\n        return -1\n\n    sum_d2 = sum(grid[i][n - 1 - i] for i in range(n))\n    if sum_d2!= sum(grid[n - i - 1][i] for i in range(n)):\n        return -1\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                return -1\n\n    return sum_d1 + sum_d2 + sum_i + sum_r\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    numbers = set(range(1, 10))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                numbers.discard(grid[i][j])\n                numbers.discard(grid[i][n - j])\n                numbers.discard(grid[n - i][j])\n                numbers.discard(grid[n - i][n - j])\n                if len(numbers) == 1:\n                    return str(list(numbers)[0])\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    grid = [[int(x) for x in stdin.strip().split()] for _ in range(n)]\n\n    # upper right diagonal sum\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                break\n            if grid[i][j] == 0:\n                continue\n            sum = 0\n            for k in range(i, j):\n                sum += grid[i][k]\n            if sum!= grid[i][i] + grid[i][j]:\n                return '-1'\n\n    # lower left diagonal sum\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                break\n            if grid[i][j] == 0:\n                continue\n            sum = 0\n            for k in range(n - 1, i, -1):\n                sum += grid[k][j]\n            if sum!= grid[i][i] + grid[i][j]:\n                return '-1'\n\n    # lower right diagonal sum\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                break\n            if grid[i][j] == 0:\n                continue\n            sum = 0\n            for k in range(n - 1, i, -1):\n                sum += grid[k][j]\n            if sum!= grid[i][i] + grid[i][j]:\n                return '-1'\n\n    # upper left diagonal sum\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                break\n            if grid[i][j] == 0:\n                continue\n            sum = 0\n            for k in range(i, n):\n                sum += grid[k][j]\n            if sum!= grid[i][i] + grid[i][j]:\n                return '-1'\n\n    return str(max(x for row in grid for x in row if x!= 0))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin)\n    grid = []\n    for i in range(rows):\n        grid.append(list(map(int, stdin.split('\\n')[i].split())))\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                count_row = 0\n                count_column = 0\n                for k in range(len(grid)):\n                    if grid[k][j] == 0:\n                        count_row += 1\n                    if grid[i][k] == 0:\n                        count_column += 1\n                if count_row == len(grid) - 1 and count_column == len(grid[0]) - 1:\n                    return '1'\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n] = stdin.split()\n    if len(n) == 1:\n        return '-1'\n    if n[0] == n[1] == n[2]:\n        return '1'\n    x = int(n[0])\n    y = int(n[1])\n    z = int(n[2])\n    row = 0\n    col = 0\n    main_diag = 0\n    sec_diag = 0\n    while row < x:\n        if row!= 0:\n            main_diag += row\n        row += 1\n    while col < y:\n        if col!= 0:\n            main_diag += col\n        col += 1\n    while row < x:\n        if row!= 0:\n            sec_diag += row\n        row += 1\n    while col < y:\n        if col!= 0:\n            sec_diag += col\n        col += 1\n    if x == y == z:\n        if main_diag!= x * y:\n            return '-1'\n        if sec_diag!= (x - 1) * (y - 1):\n            return '-1'\n        return str(x * y)\n    if x == y and x == z:\n        if main_diag!= x * y:\n            return '-1'\n        return str(x * y)\n    if x == z and y == z:\n        if main_diag!= x * y:\n            return '-1'\n        return str(x * y)\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    if len(stdin) == 1:\n        n = int(stdin[0])\n        if n == 1:\n            return '1'\n        else:\n            return '0'\n    n = int(stdin[0])\n    nums = [list(map(int, stdin[i].split())) for i in range(1, n + 1)]\n\n    def check_row(row):\n        s = sum(row)\n        if (s!= row[0] + row[1] + row[2]):\n            return False\n        for i in range(2, n - 1):\n            if (row[i - 1] + row[i] + row[i + 1])!= row[i]:\n                return False\n        return True\n\n    def check_column(col):\n        s = sum(col)\n        if (s!= col[0] + col[1] + col[2]):\n            return False\n        for i in range(2, n - 1):\n            if (col[i - 1] + col[i] + col[i + 1])!= col[i]:\n                return False\n        return True\n\n    def check_diagonal1(diagonal):\n        s = sum(diagonal)\n        if (s!= diagonal[0] + diagonal[1] + diagonal[2]):\n            return False\n        for i in range(3, n):\n            if (diagonal[i - 1] + diagonal[i] + diagonal[i + 1])!= diagonal[i]:\n                return False\n        return True\n\n    def check_diagonal2(diagonal):\n        s = sum(diagonal)\n        if (s!= diagonal[0] + diagonal[1] + diagonal[2]):\n            return False\n        for i in range(3, n):\n            if (diagonal[i - 1] + diagonal[i] + diagonal[i + 1])!= diagonal[i]:\n                return False\n        return True\n\n    for row in range(n):\n        if not check_row(nums[row]):\n            return '0'\n    for column in range(n):\n        if not check_column(nums[column]):\n            return '0'\n    for diagonal in range(n):\n        if not check_diagonal1(nums[diagonal]):\n            return '0'\n    for diagonal in range(n):\n        if not check_diagonal2(nums[diagonal]):\n            return '0'\n    return '1'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    grid_size = int(stdin[0])\n    for i in range(grid_size):\n        grid_row = stdin[i+1].split()\n        grid_row = list(map(int, grid_row))\n        for j in range(grid_size):\n            if grid_row[j] == 0:\n                break\n        else:\n            continue\n        return \"x\"\n    if grid_size % 2!= 0:\n        # The row is even\n        for j in range(grid_size):\n            if grid_row[j] == 0:\n                break\n        else:\n            return \"x\"\n\n    # The row is odd\n    # Odd row\n    for j in range(grid_size):\n        if grid_row[j] == 0:\n            break\n    else:\n        return \"x\"\n    grid_row = grid_row[j:]\n    # Even row\n    for j in range(grid_size-1, 0, -1):\n        if grid_row[j] == 0:\n            break\n    else:\n        return \"x\"\n    grid_row = grid_row[:j]\n\n    # Triangle with odd row\n    for i in range(grid_size):\n        if grid_row[i] == 0:\n            break\n    else:\n        return \"x\"\n    grid_row = grid_row[i:]\n    for i in range(grid_size-1, 0, -1):\n        if grid_row[i] == 0:\n            break\n    else:\n        return \"x\"\n    grid_row = grid_row[:i]\n\n    if not grid_row:\n        return \"x\"\n    return \"\".join(map(str, grid_row))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = []\n    for i in range(n):\n        grid.append([int(x) for x in stdin.split('\\n')[i]])\n    return solution_helper(grid, n)\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(f\"{min(a)}, {max(a)}\")\n\nsolution(\"1\")\nsolution(\"1 2\")\nsolution(\"2\")\nsolution(\"2 3\")\nsolution(\"2 3 4\")\nsolution(\"3\")\nsolution(\"3 4\")\nsolution(\"4\")\nsolution(\"4 5\")\nsolution(\"5\")\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_bens = int(stdin.strip())\n    num_adults = int(stdin.strip())\n    all_bens = list(map(int, stdin.strip().split()))\n    all_bens.sort()\n    # print(all_bens)\n    # print(all_bens[:num_adults])\n\n    min_k = max_k = 0\n    if num_bens == 1:\n        if all_bens[0] == 1:\n            min_k = max_k = 0\n        else:\n            min_k = max_k = 1\n    else:\n        min_k = max_k = 1\n        for i in range(num_bens-1):\n            if all_bens[i] + all_bens[i+1] == 2:\n                min_k += 1\n            elif all_bens[i] + all_bens[i+1] == 3:\n                max_k += 1\n            else:\n                min_k = max_k = 1\n                break\n    return str(min_k) +'' + str(max_k)\n\n\nprint(solution('4\\n6\\n1\\n1\\n1\\n1'))"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\"\\n\")))\n    n = a[0]\n    m = a[1]\n    k_min = k_max = 0\n    for i in range(n):\n        k = a[i + 2]\n        if k <= k_max:\n            k_min = max(k_min, k)\n        else:\n            k_min = k\n        if k >= k_min:\n            k_max = min(k_max, k)\n        else:\n            k_max = k\n    if k_max < k_min:\n        k_max = k_min\n    return str(k_min) + \" \" + str(k_max)\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def main(n, m, benches):\n        if len(benches) == 0:\n            return \"0 \" + str(m) + \" \" + str(m)\n        n_benches = len(benches)\n        if n_benches == 1:\n            return str(m) + \" \" + str(m)\n\n        max_k = 0\n        min_k = 1\n\n        while min_k <= max_k:\n            k = (max_k + min_k) // 2\n            seats_occupied = 0\n            for b in benches:\n                seats_occupied += k\n            if seats_occupied >= m:\n                max_k = k - 1\n            else:\n                min_k = k + 1\n        return str(max_k) + \" \" + str(min_k)\n\n    n, m = map(int, stdin.split())\n    benches = list(map(int, stdin.split()))\n    return main(n, m, benches)\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = stdin[0].split()\n    stdin = list(map(int, stdin))\n    return f'{min(stdin)} {max(stdin)}'\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return f\"{(min(n, max(1, m)) * (n - 1)) + (min(n, max(1, m)) * m)} {(min(n, max(1, m)) * (n - 1)) + (min(n, max(1, m)) * m)}\"\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # n, m = 3, 5\n    kmin = kmax = 0\n    i = 0\n    while i < n:\n        kmin = max(kmin, i + 1)\n        i += 1\n    while i < n + m:\n        kmax = max(kmax, i + 1)\n        i += 1\n    print(kmin, kmax)\n    return '\\n'.join(str(i) for i in range(kmin, kmax + 1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  inputs = stdin.split()\n  n = int(inputs[0])\n  m = int(inputs[1])\n  a = list(map(int,inputs[2:]))\n  max_k = max(a)\n  min_k = min(a)\n  print(min_k,max_k)\n  return (min_k,max_k)\nprint(solution(\"4\\n6\\n1\\n1\\n1\\n1\\n\"))\nprint(solution(\"3\\n7\\n1\\n6\\n5\\n\"))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = (int(x) for x in stdin.split())\n    s = list(range(1, n + 1))\n\n    # initialize\n    a = list()\n\n    # start\n    while len(a) < m:\n        # case 1\n        if len(a) == 0:\n            a.append(s[0])\n            s.remove(s[0])\n        # case 2\n        elif s[-1] == a[-1]:\n            a.append(s[0])\n            s.remove(s[0])\n        # case 3\n        elif s[0] == a[-1]:\n            a.append(s[-1])\n            s.remove(s[-1])\n        # case 4\n        else:\n            a.append(s[-1])\n            s.remove(s[-1])\n            s.insert(0, s[-1])\n            s.remove(s[-1])\n    return '%d' % (len(a))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    # your code here\n    #...\n\n    return answer"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = list(map(int, stdin.split()))\n    seats = [False] * n\n\n    # scan every seat\n    for _ in range(m):\n        seat = list(map(int, stdin.split()))[1]\n\n        # save the seat in a list\n        seats[seat - 1] = True\n\n    # initialize answer\n    ans = 0\n\n    # compare all seats\n    for i in range(n):\n        # if seat is occupied\n        if seats[i]:\n            # check all possible ways to arrive at the front entrance\n            ans += 1\n            # check the first seat is occupied\n            if i == 0:\n                # if the first seat is occupied, check both sides\n                if seats[i] or seats[i + 1]:\n                    ans -= 1\n            # check the last seat is occupied\n            elif i == n - 1:\n                # if the last seat is occupied, check both sides\n                if seats[i - 1] or seats[i]:\n                    ans -= 1\n            # check the middle seats\n            else:\n                # if the first seat is occupied, check both sides\n                if seats[i - 1] or seats[i]:\n                    ans -= 1\n                # if the last seat is occupied, check both sides\n                if seats[i + 1] or seats[i]:\n                    ans -= 1\n    return str(ans)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = stdin[0], stdin[1]\n    return str(ways(int(n), int(m)))\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    def get_solutions(r: int, s: int):\n        if r < 1 or r > n:\n            return 0\n        if s < 0 or s > m:\n            return 0\n        if r == 1 and s == 0:\n            return 1\n        if r == n and s == 0:\n            return 0\n        if r == 1 and s == m:\n            return 0\n        if r == n and s == m:\n            return 1\n        \n        if r == 1:\n            return get_solutions(r + 1, s) + get_solutions(r + 1, s - m)\n        if r == n:\n            return get_solutions(r - 1, s) + get_solutions(r - 1, s - m)\n        \n        return get_solutions(r - 1, s) + get_solutions(r - 1, s - m) + get_solutions(r, s + m) + get_solutions(r, s + m - m)\n    \n    return str(get_solutions(n, 0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 1')\n    '1'\n    >>> solution('3 3')\n    '128'\n    >>> solution('0 0')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    dp = [[[None, None] for i in range(n + 1)] for j in range(m + 1)]\n    dp[0][0] = [[1, 0]]\n    dp[0][1] = [[1, 0], [0, 1]]\n    for i in range(2, m + 1):\n        dp[i][0] = [[0, 1]]\n        dp[i][1] = [[1, 0], [0, 1]]\n    for i in range(2, n + 1):\n        dp[0][i] = [[0, 1]]\n        dp[1][i] = [[1, 0], [0, 1]]\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            dp[i][j].extend([[0, 1]])\n            dp[i][j].extend(dp[i - 1][j])\n            if dp[i][j][-1][0]:\n                dp[i][j].append([1, 0])\n    return str(sum([len(j) for i in dp for j in i]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # [n,m] = map(int, stdin.split())\n    # n = int(stdin[0])\n    # m = int(stdin[1])\n    # n, m = map(int, stdin.split())\n    # n = 3\n    # m = 3\n\n    # print(n, m)\n    # if n == 1 and m == 1:\n    #     return 1\n    # if n == 1 or m == 1:\n    #     return 0\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 or m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n    # if n == 2 and m == 2:\n    #     return 1\n\n    if n == 2 and m == 2:\n        return 1\n    # n = 3\n    # m = 3\n    # n = 2\n    # m = 2\n\n    # print(n, m)\n\n    if n == 1:\n        return 0\n    if m == 1:\n        return 1\n\n    # if n == 2 and m == 2:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # if m == 1:\n    #     return 0\n    # if n == 2 and m == 2:\n    #     return 1\n\n    # n = 3\n    # m = 3\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # print(n, m)\n\n    # if n == 1:\n    #     return 0\n    # if m == 1:\n    #     return 1\n    # if n == 2:\n    #     return 0\n    # if m == 2:\n    #     return 1\n\n    # if n == 2:\n    #     return 0\n    # if m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # print(n, m)\n\n    # if n == 2 and m == 2:\n    #     return 0\n    # if n == 2 and m == 2:\n    #     return 0\n\n    if n == 2 and m == 2:\n        return 0\n\n    # print(n, m)\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # print(n, m)\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0\n\n    # if n == 2 and m == 2:\n    #     return 0"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # print(n, m)\n    # print(dp)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    # print(dp)\n    # print(dp)\n    for i in range(n):\n        dp[i][i] = 1\n    # print(dp)\n    # print(dp)\n    for i in range(n):\n        if i > 0:\n            for j in range(i, n):\n                # print(dp[i][j], dp[j][i], dp[j-1][i-1], dp[i-1][j])\n                dp[i][j] = (dp[i][j-1] + dp[j][i]) % 10000000007\n                # print(dp[i][j], dp[j][i])\n    # print(dp)\n    # print(dp)\n    return str(dp[n-1][n-1])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n, m = map(int, inputs[0].split())\n    friends = []\n    for i in range(1, n + 1):\n        f = list(map(int, inputs[i].split()))\n        friends.append(f)\n    ingredients = []\n    for i in range(n + 1, n + 1 + m):\n        pizza = list(map(int, inputs[i].split()))\n        ingredients.append(pizza)\n    ingredients = set(ingredients)\n    max_price = 0\n    max_f = 0\n    best_pizza = 0, 0\n    for pizza in range(m):\n        price = ingredients.copy()\n        for friend in range(n):\n            price.difference_update(friends[friend])\n        total = 0\n        for ingredient in ingredients:\n            total += sum(b for b in price if b <= ingredient)\n        if max_price < total:\n            max_price = total\n            best_pizza = pizza, n\n        if max_f < total:\n            max_f = total\n            best_pizza = pizza, n\n    return f'{best_pizza[0]} {best_pizza[1]}'\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    friend_ingredients = stdin.split()\n    ingredients = stdin.split()\n    pizza_ingredients = stdin.split()\n    ingredients = list(map(int, ingredients))\n    pizza_ingredients = list(map(int, pizza_ingredients))\n    friend_ingredients = list(map(int, friend_ingredients))\n\n    count_friend_pizzas = {}\n    for i in range(1, len(ingredients) + 1):\n        count_friend_pizzas[i] = 0\n\n    for i in range(len(pizza_ingredients)):\n        count_friend_pizzas[pizza_ingredients[i]] += 1\n\n    for i in range(len(ingredients)):\n        count_friend_pizzas[ingredients[i]] += 1\n\n    pizza_count = len(pizza_ingredients)\n    friend_count = len(friend_ingredients)\n    if pizza_count > friend_count:\n        return \"\"\n    else:\n        while pizza_count > 0:\n            max_pizza_index = -1\n            max_pizza_price = -1\n            for i in range(len(pizza_ingredients)):\n                if pizza_ingredients[i] > max_pizza_price and count_friend_pizzas[pizza_ingredients[i]] == 0:\n                    max_pizza_price = pizza_ingredients[i]\n                    max_pizza_index = i\n            if max_pizza_price == -1:\n                break\n            else:\n                pizza_ingredients.pop(max_pizza_index)\n                pizza_count -= 1\n                for i in range(len(pizza_ingredients)):\n                    count_friend_pizzas[pizza_ingredients[i]] -= 1\n\n    for i in range(len(friend_ingredients)):\n        count_friend_pizzas[friend_ingredients[i]] -= 1\n\n    sorted_ingredients = sorted(count_friend_pizzas.items(), key=lambda x: x[1], reverse=True)\n\n    max_ingredients_pizzas_price = -1\n    max_pizzas_index_1 = -1\n    max_pizzas_index_2 = -1\n    for i in range(len(sorted_ingredients)):\n        if sorted_ingredients[i][1] == 0:\n            break\n        else:\n            if max_ingredients_pizzas_price < sorted_ingredients[i][1]:\n                max_ingredients_pizzas_price = sorted_ingredients[i][1]\n                max_pizzas_index_1 = i\n            elif max_ingredients_pizzas_price == sorted_ingredients[i][1]:\n                if sorted_ingredients[i][0] > max_pizzas_index_1:\n                    max_pizzas_index_2 = i\n                else:\n                    max_pizzas_index_1 = i\n    print(max_pizzas_index_1)\n    print(max_pizzas_index_2)\n    return \"\"\n\n\nsolution(\"\"\"5 3\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\"\"\")\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin.split()))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends_ingredients = {}\n    pizza_ingredients = {}\n    for i in range(n):\n        name, favorite_ingredients = stdin.split()\n        favorite_ingredients = list(map(int, favorite_ingredients.split()))\n        friends_ingredients[name] = favorite_ingredients\n    for i in range(m):\n        name, pizza_price, pizza_ingredients_count, pizza_ingredients = stdin.split()\n        pizza_price = int(pizza_price)\n        pizza_ingredients_count = int(pizza_ingredients_count)\n        pizza_ingredients = list(map(int, pizza_ingredients.split()))\n        pizza_ingredients_count = list(pizza_ingredients_count)\n        pizza_ingredients.sort()\n        pizza_ingredients_count.sort()\n        pizza_ingredients_count = ''.join(map(str, pizza_ingredients_count))\n        pizza_ingredients = ''.join(map(str, pizza_ingredients))\n        pizza_ingredients = pizza_ingredients.replace(' ', '')\n        if pizza_ingredients not in pizza_ingredients_count:\n            pizza_ingredients_count = pizza_ingredients_count + pizza_ingredients\n        pizza_ingredients_count = list(map(int, pizza_ingredients_count))\n        for pizza_ingredients_count_i in pizza_ingredients_count:\n            pizza_ingredients_count_i = str(pizza_ingredients_count_i)\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace(' ', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('1', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('0', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('2', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('3', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('4', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('5', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('6', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('7', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('8', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('9', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('0', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('1', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('2', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('3', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('4', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('5', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('6', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('7', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('8', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('9', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('0', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('1', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('2', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('3', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('4', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('5', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('6', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('7', '')\n            pizza_ingredients_count_i = pizza_ingredients_count_i.replace('8', '')\n            pizza_ingredients_count_"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[int(i) for i in stdin.split()[j]]\n               for j in range(1, n + 1)]\n    pizzas = [[int(i) for i in stdin.split()[j]]\n              for j in range(n + 1, n + m + 1)]\n    result = []\n    for i in range(len(pizzas)):\n        flag = True\n        for j in friends:\n            if pizzas[i][j[0] - 1] > pizzas[i][j[1] - 1]:\n                flag = False\n                break\n        if flag:\n            result.append(i)\n    return str(result[0]) +'' + str(result[1])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for _ in range(n):\n        friends[i].append(*map(int, stdin.split()))\n    ans = None\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j == i:\n                continue\n            candidate = {}\n            for t in range(1, m+1):\n                pizza = tuple(sorted(set(friends[i][0]) & set(friends[j][t])))\n                if pizza not in candidate:\n                    candidate[pizza] = 0\n                candidate[pizza] += 1\n            if ans is None or candidate[max(candidate, key=candidate.get)] < ans:\n                ans = candidate[max(candidate, key=candidate.get)]\n                i_, j_ = i, j\n    return \"%d %d\" % (i_, j_)"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n\n    a_seq = []\n    for i in range(a):\n        a_seq += list(map(int, stdin.strip().split()))\n\n    b_seq = []\n    for i in range(b):\n        b_seq += list(map(int, stdin.strip().split()))\n\n    c_seq = []\n    for i in range(c):\n        c_seq += list(map(int, stdin.strip().split()))\n\n    d = 0\n    for i, a in enumerate(a_seq):\n        for j, b in enumerate(b_seq):\n            if j == i:\n                for k, c in enumerate(c_seq):\n                    if k == i:\n                        d = max(d, a + b + c)\n\n    return str(max(i for i, a in enumerate(a_seq) if a + b + c == d))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    N = int(stdin[0])\n    M = int(stdin[1])\n    fav_ingredients = stdin[2]\n    Pizzas = []\n    for i in range(3, len(stdin)):\n        ingredients, price = stdin[i].split()\n        Pizzas.append([int(ingredients), int(price)])\n\n    pizzas = sorted(Pizzas, key=lambda x: (x[0], x[1]))\n\n    return pizzas[:2]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for i in range(n)]\n    for i in range(n):\n        lst = list(map(int, stdin.split()))\n        for j in range(n):\n            if lst[j] == 1:\n                friends[i].append(j)\n    \n    all_ingredients = set()\n    for i in range(n):\n        for j in range(m):\n            all_ingredients |= set(stdin.split()[j + 2])\n    all_ingredients = list(all_ingredients)\n    all_ingredients.sort()\n\n    def helper(candidates, cur, result, seen, result_set):\n        if len(candidates) == 0:\n            return\n        if len(candidates) == 1:\n            result.append(candidates[0])\n            return\n        for i in range(len(candidates)):\n            if cur > 0:\n                for j in range(len(candidates)):\n                    if j == i:\n                        continue\n                    for k in range(len(candidates)):\n                        if k == i or k == j:\n                            continue\n                        if k + 1 < len(candidates):\n                            cur_candidates = candidates[:]\n                            cur_candidates.remove(candidates[i])\n                            cur_candidates.remove(candidates[j])\n                            cur_candidates.remove(candidates[k])\n                            cur_candidates.append(candidates[i])\n                            cur_candidates.append(candidates[j])\n                            cur_candidates.append(candidates[k])\n                            helper(cur_candidates, cur, result, seen, result_set)\n            else:\n                cur_candidates = candidates[:]\n                cur_candidates.remove(candidates[i])\n                helper(cur_candidates, cur, result, seen, result_set)\n\n    candidates = friends[:]\n    result = []\n    seen = set()\n    result_set = set()\n    helper(candidates, -1, result, seen, result_set)\n    result.sort()\n    return \" \".join(map(str, result))"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    favorites = []\n    for _ in range(n):\n        favorites.append(list(map(int, stdin.split())))\n    pizzas = []\n    for _ in range(m):\n        pizzas.append(list(map(int, stdin.split())))\n\n    max_ingredients = []\n    min_price = 1e9\n    for i, fav in enumerate(favorites):\n        ingredients = set(fav)\n        for j, pizza in enumerate(pizzas):\n            ingredients = ingredients.intersection(pizza)\n            if len(ingredients) > 0:\n                price = pizza[-1]\n                ingredients = sorted(ingredients)\n                ingredients = \" \".join(map(str, ingredients))\n                if len(ingredients) < min_price:\n                    min_price = len(ingredients)\n                    max_ingredients = [ingredients, price]\n                    if len(max_ingredients) == 2:\n                        return max_ingredients\n                elif len(ingredients) == min_price:\n                    if ingredients > max_ingredients[0]:\n                        max_ingredients = [ingredients, price]\n    return max_ingredients\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = list(map(int, stdin.split()))\n    if m == 1 and s == 0:\n        return \"-\"\n    elif m == 1 and s > 0:\n        return \"1\"\n    elif m == 0 and s == 0:\n        return \"0\"\n    else:\n        digits = sorted(range(m + s), key=lambda k: str(k)[:m])\n        return \"{} {}\".format(*digits)"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    if (n, s) == (1, 0):\n        return \"-1 -1\"\n    for i in range(n, 0, -1):\n        if s % i == 0 and s / i < 10:\n            return f'{s/i} {i}'\n    return '-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, s = list(map(int, stdin.split()))\n    if m == 0 or s == 0 or m < 1 or s > 900:\n        return \"-1 -1\"\n    else:\n        res = []\n        for i in range(1, m + 1):\n            num = str(i)\n            sum_digits = sum(int(digit) for digit in num)\n            if sum_digits == s and len(num) == m:\n                res.append(num)\n        if not res:\n            return \"-1 -1\"\n        else:\n            return f\"{min(res)}, {max(res)}\""
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, s = list(map(int, stdin.split()))\n    return \"-1 -1\" if not any(len(str(i)) == m and sum(map(int, str(i))) == s for i in range(10)) else str(min(list(filter(lambda x: len(str(x)) == m and sum(map(int, str(x))) == s, range(10)))), max(list(filter(lambda x: len(str(x)) == m and sum(map(int, str(x))) == s, range(10)))), )\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    s = int(stdin.split()[1])\n    if m == 1:\n        return str(s)\n    elif m == 2:\n        for i in range(1, 9):\n            if s == i:\n                return str(i) + str(i)\n        return \"-1 -1\"\n    else:\n        x = 2\n        while True:\n            if sum([int(i) for i in str(x)]) == s:\n                return str(x) + str(x)\n            x += 1\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{}, {}'.format(*min_max(stdin.strip()))\n\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codesignal.com/interview-practice/task/8mljtW8Nyk6lJzZw/description\n    :param stdin:\n    :return:\n    \"\"\"\n    m, s = map(int, stdin.split())\n    length_max = 100\n    length_min = 1\n    if s < 0 or m < length_min or m > length_max:\n        return -1\n    result_min = 0\n    result_max = 0\n    for i in range(1, 10):\n        if s == i * length_min:\n            result_min = i\n    if result_min == 0 and m == length_min:\n        return -1\n    for j in range(1, 10):\n        if s == j * length_min:\n            result_max = j\n    if result_max == 0 and m == length_min:\n        return -1\n    if m == length_min:\n        return str(result_min) + \" \" + str(result_max)\n    return str(result_min) + \" \" + str(result_max)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length, sum = map(int, stdin.strip().split())\n    minimum = -1\n    maximum = -1\n    for i in range(10 ** length):\n        tmp = str(i)\n        total = 0\n        for j in range(length):\n            total += int(tmp[j])\n        if total == sum and minimum == -1:\n            minimum = i\n        if total == sum and maximum == -1:\n            maximum = i\n    if minimum == -1 and maximum == -1:\n        return \"-\"\n    return str(minimum) + \" \" + str(maximum)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * sum(map(int, list(str(i)))))\n    a.sort()\n    if s >= min(a) and s <= max(a):\n        return str(a[-1] - a[0])\n    else:\n        return \"-1 -1\"\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        try:\n            m, s = map(int, stdin.split())\n            if 0 < m <= 100 and 0 < s <= 900:\n                break\n            else:\n                raise ValueError\n        except:\n            return '-1 -1'\n    lst = []\n    for i in range(1, m + 1):\n        if sum([int(i) for i in str(i)]) == s:\n            lst.append(i)\n    if len(lst) == 0:\n        return '-1 -1'\n    return str(min(lst)) +'' + str(max(lst))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[-1])\n    print(sum(\n        int(s + t + u + v)\n        for s in range(int(stdin.split()[0]), int(stdin.split()[-1]) + 1)\n        for t in range(int(stdin.split()[0]), int(stdin.split()[-1]) + 1)\n        for u in range(int(stdin.split()[0]), int(stdin.split()[-1]) + 1)\n        for v in range(int(stdin.split()[0]), int(stdin.split()[-1]) + 1)\n        if 2 <= sum(\n            int(d) for d in str(s + t + u + v)\n        ) <= k)"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (l, r, k) = stdin.split()\n    return str(sum((i for i in range(int(l), int(r) + 1)) if not len(set(str(i))) > int(k)))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(a + b + sum(i for i in range(a, b + 1) if len(set(str(i))) <= k))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = list(map(int, stdin.split()))\n    sum = 0\n    # // Add all numbers from l to r.\n    for i in range(l, r+1):\n        for j in str(i):\n            if (len(set(j)) > k):\n                break\n        else:\n            sum += i\n    return str(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #split stdin into 3 variables\n    (l, r, k) = map(int, stdin.split())\n    \n    #count_tuple = tuple((i, ) for i in range(l, r + 1))\n    #count_tuple = tuple(i for i in range(l, r + 1))\n    count_tuple = (i for i in range(l, r + 1))\n    \n    \n    #count_set = set(count_tuple)\n    count_set = set(count_tuple)\n    \n    #count_set = set(x for x in range(l, r + 1))\n    #count_set = set(x for x in range(l, r + 1))\n    \n    #print(count_set)\n    \n    res = 0\n    \n    \n    for i in count_set:\n        if len(set(str(i))) <= k:\n            res += i\n    \n    return str(res)"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, l, r, k = stdin.split()\n    return str(sum(i for i in range(int(l), int(r) + 1) if has_all_same_digits_in_range(str(i), k)))\n\n\ndef"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def sum_digits(n: int) -> int:\n        if n < 10:\n            return n\n        return sum_digits(n // 10) * 10 + n % 10\n\n    def digit_dist(n: int) -> int:\n        if n < 10:\n            return 0\n        return digit_dist(n // 10) + 1\n\n    l, r, k = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(l, r + 1):\n        num_digits = digit_dist(i)\n        if k <= num_digits:\n            ans += sum_digits(i)\n    return ans % 998244353\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    mod = (10 ** 18)\n    nums[1] += nums[0]\n    print((nums[1] * nums[2] % mod) - nums[0] * (mod - nums[2]))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    if k == 1:\n        return str(sum(i for i in range(l, r + 1) if len(str(i)) == 1))\n    else:\n        return str(sum(i for i in range(l, r + 1) if len(str(i)) == 1))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [l, r, k] = list(map(int, stdin.split()))\n    res = 0\n    res += l * r\n    dp = [[-1] * k for _ in range(r)]\n    def dfs(l, r, k):\n        if l > r:\n            return\n        if dp[l][k]!= -1:\n            return dp[l][k]\n        if k == 0:\n            dp[l][k] = l * r\n            return dp[l][k]\n        if l == r:\n            dp[l][k] = (k + 1) * l\n            return dp[l][k]\n        max_len = 0\n        max_digit = 0\n        for i in range(k + 1):\n            temp = dfs(l, r, k - i)\n            if temp > max_len:\n                max_len = temp\n                max_digit = i\n        dp[l][k] = (max_len + 1) * (max_digit + 1)\n        return dp[l][k]\n    dfs(l, r, k)\n    return str(res % 998244353)\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, d] = list(map(int, stdin.strip().split()))\n    if n == 1 and k == 1 and d == 0:\n        return 'YES'\n    if k < n or k * n < d:\n        return 'NO'\n    if d < 0:\n        return 'NO'\n    left_dict = {}\n    for i in range(k):\n        left_dict[i] = 1\n    right_dict = {}\n    for i in range(k, n):\n        right_dict[i] = 1\n    result = []\n    result.append(left_dict)\n    result.append(right_dict)\n    while n!= 1:\n        if n - k == 1:\n            left_dict[n - 1] = 0\n            right_dict[n - 1] = 0\n            result.append(left_dict)\n            result.append(right_dict)\n        else:\n            new_left_dict = {}\n            new_right_dict = {}\n            for i in range(k):\n                new_left_dict[i] = left_dict[i]\n            for i in range(k, n):\n                new_right_dict[i] = right_dict[i]\n            result.append(new_left_dict)\n            result.append(new_right_dict)\n        n = n - k\n    for i in result:\n        for j in i:\n            if j!= 0:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = (int(x) for x in stdin.split())\n    a = list(map(int, stdin.split()))\n    if n <= k: return 'NO'\n    # n - k - 1 -> (n-1) - (k-1) -1\n    # 2^n - 2^n - 1 -> (2^n - 1) - (2^n - 1) - 1\n    if n - k - 1 < d * 2**n: return 'NO'\n    h = d * 2**n\n    # if d <= a[0]: return 'NO'\n    # for i in range(1, n):\n    #     if d + a[i-1] > a[i]: return 'NO'\n    #\n    # if d <= a[0]: return 'NO'\n    # for i in range(1, n):\n    #     if abs(a[i] - a[i-1]) > d: return 'NO'\n\n    def check_range(x):\n        if x < d: return True\n        for i in range(1, n):\n            if x - a[i - 1] <= d:\n                return True\n        return False\n\n    for i in range(1, n):\n        if not check_range(a[i - 1] + d):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    def is_possible(s) -> bool:\n        a = sorted(a)\n        if len(a)!= n:\n            return False\n        for i in range(1, n):\n            if a[i] - a[i-1] > d:\n                return False\n        if a[0] < 0:\n            return False\n        for i in range(1, n):\n            if abs(a[i] - a[i-1]) > k:\n                return False\n        return True\n    print('YES' if is_possible(a) else 'NO')\nsolution(input())\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, k, d = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    n, k, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a)%k!=0:\n        return 'NO'\n    boxes = []\n    i=0\n    while i<len(a):\n        d = a[i+1]-a[i]\n        if d>10**9:\n            return 'NO'\n        elif d<=d:\n            return 'NO'\n        else:\n            boxes.append(a[i])\n            i+=k\n    return 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, k, d = map(int, stdin.split())\n  a = sorted(map(int, stdin.split()))\n  return \"YES\" if any(a[i] - a[j] <= d for i in range(len(a)) for j in range(i)) else \"NO\"\n\nsolution('''\n6 3 10\n7 2 7 7 4 2\n''')\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, k, d = list(map(int, stdin.split()))\n  a = list(map(int, stdin.split()))\n  if min(a) < k:\n    return \"NO\"\n  if max(a) > d:\n    return \"NO\"\n  for i in range(0, len(a)):\n    for j in range(i + 1, len(a)):\n      if abs(a[i] - a[j]) <= d:\n        return \"NO\"\n  return \"YES\"\n\nsolution(\"3 2 3\") # returns \"YES\"\nsolution(\"6 3 2\") # returns \"YES\"\nsolution(\"3 2 5\") # returns \"NO\"\nsolution(\"6 2 3\") # returns \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    last = a[n-1]\n    ans = \"NO\"\n    while last > d:\n        res = 0\n        for i in range(n):\n            if a[i] - last >= d:\n                res += 1\n        if res <= k:\n            ans = \"YES\"\n            break\n        last = a[i]\n    print(ans)"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k, d = map(int, stdin.split())\n  a = list(map(int, stdin.split()))\n\n  assert(1 <= n <= 5*10**5 and 2 <= k <= n and 2 <= d <= 10**9)\n\n  l = sorted(a, reverse=True)\n  # print(l)\n\n  for i in range(len(l)):\n    if i > 0:\n      if abs(l[i]-l[i-1]) > d:\n        return \"NO\"\n    else:\n      if abs(l[i]-l[i+1]) > d:\n        return \"NO\"\n  if l[0]!= 1:\n    return \"NO\"\n\n  return \"YES\"\n\n\nprint(solution(input()))\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1:\n\nInput\n\n6 3 10\n7 2 7 7 4 2\n\nOutput\n\nYES\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2:\n\nInput\n\n6 2 3\n4 5 3 13 4 10\n\nOutput\n\nYES\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = stdin.strip().split()\n    n, k, d = int(n), int(k), int(d)\n    a = sorted(list(map(int, stdin.strip().split())))\n    print('YES' if all(i + j <= max(i, j) for i, j in zip(a[:-k], a[k:])) and all(i + j <= d for i, j in zip(a[:-k], a[k:])) and (any(i + j > d for i, j in zip(a[:-k], a[k:])) or all(i + j > d for i, j in zip(a[k:], a[:-k]))) else 'NO')"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    garland_string = stdin\n    garland = garland_string.split('\\n')\n    for i in range(len(garland)):\n        garland[i] = garland[i].replace('R', 'R!')\n        garland[i] = garland[i].replace('B', 'B!')\n        garland[i] = garland[i].replace('Y', 'Y!')\n        garland[i] = garland[i].replace('G', 'G!')\n        garland[i] = garland[i].replace('!', '')\n    return garland\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_c = 4\n    s = stdin\n    start = 0\n    end = 4\n    while end < n:\n        if (s[start] == 'R' and s[end] == 'R' and s[start + 1] == 'B' and s[end + 1] == 'B' and s[start + 2] == 'Y' and s[end + 2] == 'Y') or (s[start] == 'Y' and s[end] == 'Y' and s[start + 1] == 'B' and s[end + 1] == 'B' and s[start + 2] == 'R' and s[end + 2] == 'R'):\n            n_c -= 1\n            start += 3\n            end += 3\n        elif (s[start] == 'B' and s[end] == 'B' and s[start + 1] == 'Y' and s[end + 1] == 'Y') or (s[start] == 'Y' and s[end] == 'Y' and s[start + 1] == 'B' and s[end + 1] == 'B'):\n            n_c -= 1\n            start += 2\n            end += 2\n        else:\n            start += 1\n            end += 1\n    if (s[0] == 'R' and s[1] == 'B' and s[2] == 'Y' and s[3] == 'G') or (s[0] == 'Y' and s[1] == 'B' and s[2] == 'R' and s[3] == 'G'):\n        n_c -= 1\n    return str(n_c)\n\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    garland = stdin.rstrip('\\n')\n    if '!' in garland:\n        return stdin\n    \n    garland = list(garland)\n    \n    i = 0\n    c = 0\n    while i < len(garland):\n        if garland[i] == '!':\n            i += 1\n            continue\n        \n        if garland[i] == garland[i+1]:\n            c += 1\n            i += 2\n        else:\n            i += 1\n    \n    return str(c) +'' + str(c) +'' + str(c) +'' + str(c)\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")[0]\n    result = stdin.split(\"\\n\")[1]\n    return result\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(str(len(s)-len(list(filter(lambda x: x == \"B\", list(s))))) + \" \" +\n                    str(len(s)-len(list(filter(lambda x: x == \"G\", list(s))))) + \" \" +\n                    str(len(s)-len(list(filter(lambda x: x == \"Y\", list(s))))) + \" \" +\n                    str(len(s)-len(list(filter(lambda x: x == \"R\", list(s)))))\n                    )\n\ns = input()\nprint(solution(s))\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        \"{} {} {} {}\".format(\n            len(stdin) // 4,\n            0 if stdin.count(\"B\") < 1 else 1,\n            0 if stdin.count(\"R\") < 1 else 1,\n            0 if stdin.count(\"G\") < 1 else 1,\n        )\n    )\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    count = 0\n    light = 0\n    for i in range(len(stdin[0])):\n        if stdin[0][i] == \"Y\":\n            light += 1\n        else:\n            if light >= 4:\n                count += light\n            light = 0\n    return f\"{count} {count + light} {count + light + light} {count + light + light + light}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns four integers k_r, k_b, k_y, k_g\n    '''\n    garland = stdin.splitlines()[0]\n    max_length = max([len(garland) - 4, 4])\n    garland = garland[:max_length]\n    counter = {'R':0,'B':0,'Y':0,'G':0}\n    for symbol in garland:\n        if symbol == 'R':\n            counter['R'] += 1\n        if symbol == 'Y':\n            counter['Y'] += 1\n        if symbol == 'B':\n            counter['B'] += 1\n        if symbol == 'G':\n            counter['G'] += 1\n    return str(counter['R']) +'' + str(counter['B']) +'' + str(counter['Y']) +'' + str(counter['G'])\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin.replace(' ', '')\n    #garland = \"YBGRYBGRY\"\n    k_r = k_b = k_y = k_g = 0\n    for i in range(len(garland)-4):\n        if garland[i]!= garland[i+1] and garland[i+1]!= garland[i+2] and garland[i+2]!= garland[i+3] and garland[i]!= garland[i+3]:\n            if garland[i] == 'R':\n                k_r += 1\n            elif garland[i] == 'B':\n                k_b += 1\n            elif garland[i] == 'Y':\n                k_y += 1\n            else:\n                k_g += 1\n    return str(k_r) +'' + str(k_b) +'' + str(k_y) +'' + str(k_g)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # return str(1.5)\n    n, m = [int(i) for i in stdin.split()]\n    # print(n, m)\n    if n > m:\n        n, m = m, n\n    # print(n, m)\n    d = {}\n    # print(d)\n    for i in range(1, n + 1):\n        d[i] = [i + 1]\n    for i in range(1, m + 1):\n        d[i + 1] = []\n    # print(d)\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i!= j:\n                # print(i, j)\n                if len(d[i]) <= len(d[j]):\n                    d[i].extend(d[j][::-1])\n                else:\n                    d[j].extend(d[i][::-1])\n\n    # print(d)\n    v = 1\n    s = 0\n    count = 0\n    while True:\n        # print(v, s)\n        count += 1\n        if v >= n or v in d:\n            # print(count)\n            break\n        if v in d:\n            # print(v, d[v])\n            s += 1\n        # print(s)\n        v = d[v][s % len(d[v])]\n    # print(count)\n    return str(count)"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    passage = [(i,j) for i in range(1, N+1) for j in range(i+1, N+1) if i < j and (i,j)!= (1, N)]\n    passage = [i for i in passage if (i[1]-i[0])%2 == 1]\n    # print(passage)\n    def dist(a, b):\n        return (a[0] - b[0])**2 + (a[1] - b[1])**2\n    # def _dist(a, b):\n    #     return dist(a, b) if dist(a, b)!= 0 else 99999999999\n\n    res = []\n    while len(passage)!= 0:\n        a, b = choice(passage)\n        # print(a, b)\n        if dist(a, b) <= M:\n            # print(\"hitting\")\n            res.append(dist(a, b))\n            passage.remove(a)\n        else:\n            # print(\"too far\")\n            passage.remove(b)\n    if len(res) == 0:\n        return -1\n    return sum(res) / len(res)\n\nimport random\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    rooms = []\n    for _ in range(N):\n        rooms.append(list(map(int, stdin.split())))\n    for i in range(M):\n        room1, room2 = map(int, stdin.split())\n        if room1!= room2:\n            for j in range(1, N):\n                if rooms[j][room1 - 1] == room2:\n                    rooms[j][room1 - 1] = rooms[j][room2 - 1]\n                    rooms[j][room2 - 1] = room1\n    total = 0\n    for i in range(N):\n        total += (len([1 for x in rooms[i] if x == i + 1]) - 1)\n    return str(total)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 2\n   ... 3 1\n   ... 2 3\n   ... 2 2\n   ... 2 3\n   ... 2 4\n   ... 3 4''')\n    '1.5000000000'\n    >>> solution('''3 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 4\n   ... 2 5\n   ... 3 5\n   ... 3 6''')\n    '1.25'\n    >>> solution('''1 1\n   ... 1 2\n   ... 2 2\n   ... 3 2\n   ... 3 3''')\n    '1.5000000000'\n    \"\"\"\n    import sys\n    stdin = sys.stdin.read()\n    stdin = stdin.splitlines()\n\n    N, M = map(int, stdin.pop(0).split())\n    graph = [[] for _ in range(N)]\n    for i in range(M):\n        s, t = map(int, stdin.pop(0).split())\n        graph[s - 1].append(t - 1)\n        graph[t - 1].append(s - 1)\n\n    E = 0\n    for i in range(N):\n        count = 0\n        for j in range(len(graph[i])):\n            if i!= j:\n                count += 1\n        E = max(E, count / (len(graph[i]) - 1))\n    return \"%.10f\" % E\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    _N = N\n    _M = M\n    while N!= 1:\n        n = N\n        m = M\n        while n!= 1:\n            if (n, m) == (1, 2):\n                m += 1\n            elif (n, m) == (1, 3):\n                m += 1\n            n -= 1\n        N = n\n        M = m\n    E = (1 + 1/2)/2\n    return str(E)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return \"%.6f\" % min_cost(n, m)\n\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(r, c, n, m):\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][i] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i!= j:\n                    dp[i][j] = 0\n\n        for j in range(1, n + 1):\n            dp[j][j] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i!= j:\n                    for k in range(1, n + 1):\n                        dp[i][j] += dp[i][k] * dp[k][j]\n        return dp[1][n] * m / n\n\n    N, M = stdin.strip().split()\n    return str(solve(int(N), int(M), int(N), int(M)))\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    data = []\n    for _ in range(M):\n        data.append(list(map(int, stdin.split())))\n    numbers = list(range(1, N + 1))\n    data = sorted(data, key=lambda x: (x[0], x[1]))\n    data = sorted(data, key=lambda x: (x[1], x[0]))\n    ans = 0\n    for i in range(M):\n        a, b = data[i][0], data[i][1]\n        if b - a == 1:\n            numbers.remove(a)\n        else:\n            numbers.remove(a)\n            numbers.remove(b)\n        ans = max(ans, len(numbers) * (len(numbers) - 1) / 2)\n    return str(ans)"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s, t = map(int, stdin.split())\n    s_t = [(s, t)]\n    for _ in range(M):\n        s, t = map(int, stdin.split())\n        s_t.append((s, t))\n    # print(s_t)\n    # print(s, t)\n    for i in range(1, N):\n        s_t.append((s_t[i - 1][1], s_t[i][0]))\n    print(s_t)\n    passages = [0] * (N + 1)\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            passages[i] += s_t[j - 1][0] - s_t[i - 1][1]\n    print(passages)\n    print(passages[N])\n\n    # eps = 10**-6\n    # def calc(passage, n):\n    #     cnt = 0\n    #     for i in range(1, n + 1):\n    #         # if i == s:\n    #         if i == s and passage == t:\n    #             cnt += 1\n    #         if i!= s and i!= t:\n    #             if passage == s_t[i - 1][1]:\n    #                 cnt += (1 / 2)\n    #             if passage == s_t[i][0]:\n    #                 cnt += (1 / 2)\n    #     return cnt\n    #\n    # ans = 1\n    # for i in range(1, N + 1):\n    #     ans = min(ans, calc(s_t[i - 1][1], N - i + 1) + calc(s_t[i][0], N - i + 1))\n    #     # print(i, s_t[i - 1][1], s_t[i][0], ans)\n    #\n    # print(ans)\n    return str(ans)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def probability(s, t):\n        return math.factorial(s) / math.factorial(s - 1) / math.factorial(t - s + 1)\n\n    def probability2(s, t):\n        return probability(s, t) / probability(t, s)\n\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    if m == 1:\n        return \"%.6f\" % probability2(n, 1)\n    prob = probability2(n, m)\n    for i in range(n):\n        prob *= probability2(m, i + 1)\n        prob /= probability2(i + 1, n)\n    return \"%.6f\" % prob\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num: int = int(stdin)\n    if num > 0:\n        num = num - 1\n        if num == 0:\n            return str(num)\n        elif num % 2 == 0:\n            return str(num // 2)\n        else:\n            return str(num // 2 + 1)\n    else:\n        return str(abs(num) // 2)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return str(n)\n    elif n % 10 < 5:\n        return str(n+1)\n    else:\n        return str(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n % 10 == 0:\n        return str(n)\n    if n % 10 > 0:\n        return str(n + 1)\n\nstdin = input()\n\nprint(solution(stdin))\n\n\n\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n % 10 == 0:\n        return str(n)\n    else:\n        return str(n + 10 - (n % 10))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin == 0:\n        return \"0\"\n    elif stdin % 2 == 0:\n        return str(stdin // 2)\n    else:\n        return str((stdin + 1) // 2)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    elif n == 10:\n        return '10'\n    else:\n        arr = [n]\n        if arr[-1] < 10:\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1] - 10)\n            arr.append(arr[-1] + 1)\n        return str(min(arr))\nsolution(input())\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a += 1\n    while a % 10 == 0:\n        a += 1\n    return str(a)\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = int(stdin)\n    while result!= 0:\n        if result % 10 == 0:\n            result = 0\n        else:\n            result = result * 10 + (result % 10) // 10\n    return str(result)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n - 0\n    b = n - 10\n    c = n + 0\n    d = n + 10\n\n    if n == 0:\n        return '0'\n    if n == 10:\n        return '10'\n    if n % 10 == 0 and n!= 0:\n        return '0'\n    if n % 10 == 1:\n        return '1'\n    if n % 10 == 2:\n        return '2'\n    if n % 10 == 3:\n        return '3'\n    if n % 10 == 4:\n        return '4'\n    if n % 10 == 5:\n        return '5'\n    if n % 10 == 6:\n        return '6'\n    if n % 10 == 7:\n        return '7'\n    if n % 10 == 8:\n        return '8'\n    if n % 10 == 9:\n        return '9'"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n   ... happy\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = list(s)\n    \n    def is_duplicate(el):\n        return t.count(el) >= 2\n    \n    def _swap(index_1, index_2):\n        t[index_1], t[index_2] = t[index_2], t[index_1]\n    \n    def is_correct(key):\n        for i in range(len(t)):\n            if key == t[i]:\n                return True\n            if key == t[i - 1] and key == t[i + 1]:\n                return True\n        return False\n    \n    pairs = []\n    for i in range(len(t)):\n        if i == 0 or i == len(t) - 1:\n            continue\n        if is_duplicate(t[i]) and is_correct(t[i]):\n            _swap(i, i + 1)\n            if i + 2 < len(t):\n                _swap(i, i + 2)\n            pairs.append(t[i])\n    \n    if len(pairs) == 0:\n        return '-1'\n    else:\n        return str(len(pairs)) +'' +''.join(pairs)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[1]:\n        return '-1'\n    else:\n        return stdin[0] * stdin.count(stdin[0])\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Input is standard input\n    s, t = stdin.strip().split()\n    print(t)\n    c = collections.Counter(s)\n    print(c)\n    if not (set(c.keys()) == set(c.values())):\n        print(-1)\n        return\n    pairs = []\n    for c in set(c.keys()):\n        if c in t:\n            pairs.append(c)\n    if len(pairs) == 0:\n        print(-1)\n        return\n    s = sorted(c.items(), key=lambda x: x[1])\n    print(s)\n    ans = []\n    for i in range(len(s) // 2):\n        ans.append(s[i][0])\n        ans.append(s[len(s) - 1 - i][0])\n    print(ans)\n    return''.join(ans)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    matches = set()\n    for i in range(0, len(stdin), 2):\n        matches.add(stdin[i])\n        matches.add(stdin[i+1])\n    print(len(matches))\n    if len(matches) == 0:\n        return '-1'\n    return ''.join(sorted(matches))"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    s = stdin.strip()\n    if len(s) == 0:\n        return str(-1)\n    \n    if len(s)%2 == 1:\n        return str(-1)\n    \n    swaps = []\n    for i in range(0, len(s), 2):\n        swaps.append(s[i] + s[i+1])\n    \n    return str(len(set(swaps))) +'' +''.join(sorted(set(swaps)))\n\n\nprint(solution(\"merrychristmas\"))\nprint(solution(\"helloworld\"))"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    n = len(s)\n    if n!= 1000:\n        return -1\n    x = s.count('x')\n    if x % 2 == 1:\n        return -1\n    p = {'h': 0, 'a': 1, 't': 2, 'l': 3, 'o': 4, 'w': 5, 'r': 6, 'y': 7, 'b': 8, 'v': 9,'s': 10, 'i': 11, 'z': 12,'': 13}\n    d = {}\n    for i in range(0, n, 4):\n        try:\n            d[s[i]] += 1\n        except:\n            d[s[i]] = 1\n    a = list(d.keys())\n    if len(a) < 4:\n        return -1\n    a.sort()\n    # print(a)\n    t = list(p.values())\n    res = list(map(lambda x: x + 1, a))\n    # print(res)\n    for i in range(len(res)):\n        res[i] -= t[i]\n    res = list(map(lambda x: str(x), res))\n    res =''.join(res)\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    keyboard = stdin\n    keyboard_dict = {}\n    letter_count = {}\n\n    for letter in keyboard:\n        letter_count[letter] = 0\n\n    for letter in keyboard:\n        if letter_count[letter] == 0:\n            letter_count[letter] = 1\n        else:\n            letter_count[letter] += 1\n\n    for letter in letter_count:\n        if letter_count[letter] == 1:\n            keyboard_dict[letter] = letter\n        elif letter_count[letter] > 1:\n            keyboard_dict[letter] = letter * letter_count[letter]\n\n    unique_key_count = len(keyboard_dict)\n\n    possible_swaps = set()\n\n    while len(possible_swaps)!= unique_key_count:\n        for key in keyboard_dict:\n            if key in possible_swaps:\n                continue\n            for pair_key in keyboard_dict:\n                if pair_key in possible_swaps:\n                    continue\n                if keyboard_dict[key] == keyboard_dict[pair_key]:\n                    possible_swaps.add(key)\n                    possible_swaps.add(pair_key)\n\n    if len(possible_swaps) == unique_key_count:\n        print(len(possible_swaps))\n        for swap in possible_swaps:\n            print(keyboard_dict[swap], end=' ')\n    else:\n        print(-1)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 2:\n        return '-1'\n    st = set(s)\n    st_lc = set([chr(i).lower() for i in range(97, 123)])\n    st_lc.discard(' ')\n    st_lc.discard('\\t')\n    st_lc.discard('\\n')\n    if st!= st_lc:\n        return '-1'\n    st = set(s.upper())\n    if st!= st_lc:\n        return '-1'\n    t = s[0].lower() + s[1].lower()\n    if t not in st_lc:\n        return '-1'\n    d = collections.defaultdict(set)\n    for i in range(len(s)):\n        d[s[i]].add(i)\n    l = []\n    for k, v in d.items():\n        l.append(v)\n    l.sort()\n    l.sort(key=len, reverse=True)\n    if len(l) % 2 == 0:\n        s = l[0:len(l) // 2]\n    else:\n        s = l[0:len(l) // 2 + 1]\n    s = list(zip(s, l[len(l) // 2:len(l)]))\n    s = [(k1, k2) for k1, k2 in s]\n    if not s:\n        return '0'\n    p = {}\n    for k1, k2 in s:\n        if k1 not in p:\n            p[k1] = k2\n        else:\n            p[k1] = p[k1] if p[k1] < k2 else k2\n    l = sorted(p.items(), key=lambda k: (k[1], k[0]))\n    l = list(zip(l, range(len(l))))\n    print(l)\n    return str(len(l))"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    st_a = stdin.strip()\n    n_a = len(st_a)\n    st_b = stdin.strip()\n    n_b = len(st_b)\n    if n_a!= n_b:\n        print(-1)\n        return\n    if n_a == 0:\n        print(0)\n        return\n    if n_a == 1:\n        print(1)\n        return\n    flag = False\n    for i in range(0, n_a):\n        if st_a[i]!= st_b[i]:\n            flag = True\n            break\n    if not flag:\n        print(0)\n        return\n    st_a = list(st_a)\n    st_b = list(st_b)\n    st_a = sorted(st_a)\n    st_b = sorted(st_b)\n    st_a = \"\".join(st_a)\n    st_b = \"\".join(st_b)\n    if st_a == st_b:\n        print(0)\n        return\n    count = 0\n    for i in range(0, n_a - 1):\n        if st_a[i]!= st_a[i + 1]:\n            count += 1\n    ans = count\n    j = 0\n    while j < n_a - 1:\n        if st_a[j]!= st_a[j + 1]:\n            count += 1\n            if count > ans:\n                ans = count\n            j += 1\n        else:\n            count = 0\n            j += 1\n    count = 0\n    for i in range(0, n_a - 1):\n        if st_b[i]!= st_b[i + 1]:\n            count += 1\n    if count > ans:\n        ans = count\n    if ans > 0:\n        print(ans)\n        return\n    else:\n        print(-1)\n    return\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first_name, last_name = stdin.split()\n    prefix_first_name = first_name[0]\n    prefix_last_name = last_name[0]\n    if prefix_first_name == prefix_last_name:\n        return prefix_first_name\n    return min(prefix_first_name, prefix_last_name)\n\n\nprint(solution('harry potter'))\nprint(solution('tom riddle'))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first_name, last_name = stdin.split()\n    login = min(first_name + last_name, first_name[::-1] + last_name)\n    return login\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper().strip()[:1] + stdin.lower().strip()[:1]\n    # first letter comes from the first string and second letter comes from the second.\n    # return ''.join(sorted(stdin.upper().strip()[0], stdin.lower().strip()[0]))\n    # return ''.join(sorted(stdin.lower().strip()[0]))\n    # return stdin[0].upper() + stdin[1].lower()\n    # return sorted(stdin.lower())[0]\n    # return ''.join(sorted(stdin.lower()))\n    # return sorted(stdin)[0]\n    # return sorted(stdin.lower())[0]\n    # return ''.join(sorted(stdin.upper()))\n    # return sorted(stdin.upper())[0]\n    # return sorted(stdin)[0].upper()\n    # return sorted(stdin)[0].lower()\n    # return sorted(stdin)[0]\n    # return sorted(stdin)[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_name, last_name = stdin.split()\n    first_name = first_name.lower()\n    last_name = last_name.lower()\n    possible_logins = []\n    first_name_lower = first_name.lower()\n    last_name_lower = last_name.lower()\n    for i in range(len(first_name_lower)):\n        logins = first_name_lower[0:i]\n        for j in range(len(last_name_lower)):\n            logins += last_name_lower[j:j + 1]\n            possible_logins.append(logins)\n    possible_logins.sort()\n    print(possible_logins[0])\n\nsolution(input())\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower()\n    \nTest.assert_equals(solution('harry potter'), 'hap')\nTest.assert_equals(solution('tom riddle'), 'tomr')"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split()\n    name_1 = name[0][0] + name[0][1] + name[0][2] + name[0][3] + name[0][4] + name[0][5]\n    name_2 = name[1][0] + name[1][1] + name[1][2] + name[1][3] + name[1][4] + name[1][5]\n    return min(name_1,name_2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    f_name = stdin[0]\n    l_name = stdin[1]\n\n    if len(f_name) < 3:\n        prefix_first = \"\"\n    else:\n        prefix_first = f_name[0]\n\n    if len(l_name) < 3:\n        prefix_last = \"\"\n    else:\n        prefix_last = l_name[0]\n\n    if prefix_first < prefix_last:\n        return prefix_first + prefix_last\n    else:\n        return prefix_first\n\n\nprint(solution(\"harry potter\"))\n\n'''\n\n\ndef"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return data[0][0] + data[1][0]\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    st = stdin[0]\n    ans = \"\"\n    while st!= \"]\":\n        if st == \"[\":\n            ans += \"|\"\n            st = stdin[0]\n            while st!= \"]\" and st!= \"]\":\n                st = stdin[0]\n                if st == \"[\":\n                    ans += \"+\"\n                elif st == \"]\":\n                    ans += \"-\"\n                else:\n                    ans += st\n            ans += \"|\"\n            stdin = stdin[1:]\n        else:\n            ans += \"-\"\n            st = stdin[0]\n            while st!= \"]\" and st!= \"]\" and st!= \"]\":\n                st = stdin[0]\n                if st == \"[\":\n                    ans += \"+\"\n                elif st == \"]\":\n                    ans += \"-\"\n                else:\n                    ans += st\n            ans += \"-\"\n            stdin = stdin[1:]\n    return ans\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(stdin)\n    bracket = {\"{\": \"[\", \"}\": \"[\", \"[\": \"]\", \"]\": \"]\"}\n    stack = []\n    res = \"\"\n    for item in l:\n        if item in bracket.keys():\n            stack.append(item)\n        else:\n            # \uc774\ubbf8 \uac12\uc774 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0\n            if item == \"(\" and stack and stack[-1] == \")\":\n                stack.pop()\n            elif item == \"[\" and stack and stack[-1] == \"]\":\n                stack.pop()\n            else:\n                # \uc5ec\ub294 \uad04\ud638\uba74 \ub123\uace0, \ub2eb\ub294 \uad04\ud638\uba74 \ub2eb\uc74c\n                stack.append(item)\n\n    for item in stack:\n        # \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uac70\ub098, \uad04\ud638\uac00 \ub2eb\ud600\uc788\ub294 \uacbd\uc6b0\n        if not stack:\n            return \"?\"\n        res += \"|\" + item + \"|\"\n\n    return res\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    sequence = input_lines[1]\n    \n    result = \"\"\n    \n    for i in range(n):\n        result += \"|\"\n        for j in range(i+1, n):\n            result += \"+-\"\n        result += \"-\"\n        for j in range(i+1, n):\n            result += \"|\"\n    result += \"+\"\n    \n    for i in range(n-1, -1, -1):\n        result += \"+-\"\n        for j in range(i, n):\n            result += \"|\"\n        result += \"-\"\n    \n    for i in range(n):\n        result += \"|\"\n    \n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = list(map(int, stdin.strip().split()))\n    # first set of brackets\n    prev_left = 0\n    prev_right = 0\n    left_bracket = 0\n    right_bracket = 0\n    # print(f\"segments: {segments}\")\n    for i in range(n):\n        if segments[i] == 0:\n            if left_bracket:\n                left_bracket -= 1\n            elif right_bracket:\n                right_bracket -= 1\n        elif segments[i] == 1:\n            if left_bracket:\n                left_bracket -= 1\n            elif right_bracket:\n                right_bracket -= 1\n        elif segments[i] == 2:\n            if left_bracket:\n                left_bracket -= 1\n            elif right_bracket:\n                right_bracket -= 1\n        else:\n            left_bracket = segments[i]\n            right_bracket = segments[i]\n            # print(f\"new brackets: {left_bracket}:{right_bracket}\")\n    # print(f\"final left and right bracket: {left_bracket}:{right_bracket}\")\n    solution = \"\"\n    while left_bracket or right_bracket:\n        if left_bracket > 0:\n            solution += \"+\"\n        if right_bracket > 0:\n            solution += \"-\"\n        solution += \"|\"\n        left_bracket -= 1\n        right_bracket -= 1\n    return solution"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    brackets = stdin.split('[')\n    max_height = 0\n    for bracket in brackets:\n        bracket = list(bracket)\n        bracket_height = 1\n        for i in range(1, len(bracket)):\n            if bracket[i] == '[':\n                bracket_height += 1\n            if bracket[i] == ']':\n                bracket_height -= 1\n            max_height = max(bracket_height, max_height)\n    return \"\".join(['+' * max_height] + ['-' * max_height] + ['|'] + ['+' * max_height] + ['-' * max_height])\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bracket_seq = stdin.strip()\n\n    bracket_pairs = []\n    for i, x in enumerate(bracket_seq):\n        if i % 2:\n            bracket_pairs.append(x)\n        else:\n            bracket_pairs.append(x.replace(\"]\", \"[\"))\n    bracket_seq = \"\".join(bracket_pairs)\n\n    # print(bracket_seq)\n\n    current_max_height = 0\n    current_height = 0\n    current_max_line = []\n    for i, x in enumerate(bracket_seq):\n        if x == \"[\":\n            current_max_height = max(current_max_height, current_height)\n            current_height = 0\n            current_max_line = []\n        elif x == \"]\":\n            current_height += 1\n            current_max_line.append(\"|\")\n        else:\n            current_max_line.append(x)\n\n    print(\"+-\", end=\"\")\n    for i in range(current_max_height - 1):\n        print(\"-++-\", end=\"\")\n    print(\"+-\")\n\n    for x in current_max_line:\n        if x == \"|\":\n            print(\"|\", end=\"\")\n        else:\n            print(x, end=\"\")\n    print(\"\")\n    return"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.split()[1]\n    if len(sequence) == 1:\n        return sequence\n    max_height = max(len(sequence) - 1, 0)\n    max_length = max(len(sequence) - 1, 0)\n    output = ''\n    last_height = 0\n    for i, letter in enumerate(sequence):\n        current_height = max_height - i + last_height\n        current_length = max_length - i\n        if current_height > 0:\n            output += '+' * current_height + '-' * (current_height - 1) + '+'\n        if current_length > 0:\n            output += '|' + '+' * current_length + '|'\n        last_height = current_height\n    return output\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    ans = \"\"\n    for i in range(n):\n        if stdin[i] == \"[\":\n            ans += \"|\"\n        elif stdin[i] == \"]\":\n            ans += \"+\"\n        else:\n            ans += \"-\"\n    return ans\n\n\nsolution(input())\n\nsolution(\"[[][]][]\")\n\nsolution(\"[][]\")\n\nsolution(\"[]\")\n\nsolution(\"[][]\")\n\nsolution(\"[[]]\")\n\nsolution(\"[][][]\")\n\nsolution(\"[][[]]\")\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.strip().replace(' ', '')\n    # print(brackets)\n    n = len(brackets)\n    # print(n)\n    height = n\n    # print(height)\n    while True:\n        stack = []\n        for i in range(n):\n            if brackets[i] == '[':\n                stack.append(i)\n            elif brackets[i] == ']':\n                if len(stack) > 0:\n                    h = stack.pop()\n                    if i - h >= 0:\n                        height = max(height, i-h+1)\n                    else:\n                        break\n                else:\n                    break\n        # print(stack)\n        if len(stack) > 0:\n            n = stack[-1]\n        else:\n            break\n    print(height)\n    return ''"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, N, 2):\n        for _ in range(N - i):\n            print(\" \", end=\"\")\n        for _ in range(2 * i - 1):\n            print(\"|\", end=\"\")\n        print(\"+- -+\")\n    for i in range(1, N, 2):\n        for _ in range(N - i):\n            print(\" \", end=\"\")\n        for _ in range(2 * i - 1):\n            print(\"-\", end=\"\")\n        print(\"+- -+\")\n    for i in range(N - 1):\n        for _ in range(2):\n            print(\" \", end=\"\")\n        for _ in range(2 * (N - 1) - i - 1):\n            print(\"|\", end=\"\")\n        print(\"+- -+\")\n    for i in range(1, N - 1):\n        for _ in range(2 * i - 1):\n            print(\"|\", end=\"\")\n        print(\"+- -+\")\n    for _ in range(N - 1):\n        print(\" \", end=\"\")\n    print(\"+- -+\")\n    return \"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    val_num = int(nums[0])\n    val_num_2 = int(nums[1])\n    if val_num > val_num_2:\n        return \">\"\n    if val_num < val_num_2:\n        return \"<\"\n    return \"=\""
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    number_one, number_two = stdin.split()\n    result = (str(int(number_one) ** 2 + int(number_two) ** 2) + \" \") * int(number_one) + (str(int(number_two) ** 2 + int(number_one) ** 2) + \" \") * int(number_two)\n    if int(number_one) > int(number_two):\n        return \">\" + result\n    elif int(number_one) < int(number_two):\n        return \"<\" + result\n    else:\n        return \"=\" + result\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a non-empty string consisting of the non-negative integers, return a string of the form \"0\".\n    The returned string should contain only \"0\"s or \"1\"s.\n\n    The string should be \"0\" if the integer value of the string is less than or equal to 1, and \"1\" if the integer value of the string is greater than 1.\n\n    \"\"\"\n    a = int(stdin)\n    if a < 1:\n        return \"0\"\n    if a > 1:\n        return \"1\""
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    num1 = int(stdin[0])\n    num2 = int(stdin[1])\n    if num1 > num2:\n        return '>'\n    elif num1 == num2:\n        return '='\n    else:\n        return '<'\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    res1 = int(a[0])\n    res2 = int(a[1])\n    if res1 > res2:\n        return \"<\"\n    elif res2 > res1:\n        return \">\"\n    else:\n        return \"=\"\n\nsolution(input())\n\n\"\"\"\n\nn = int(input())\n\nnum_list = list(map(int, input().split()))\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    a[0] = int(a[0].replace(\"0\", \"\") + \"1\")\n    a[1] = int(a[1].replace(\"1\", \"\") + \"0\")\n    return \">\" if a[0] > a[1] else \"<\" if a[0] < a[1] else \"=\""
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split('\\n')\n    num1, num2 = numbers[0], numbers[1]\n    q1, q2 = int(num1, 2), int(num2, 2)\n    if q1 > q2:\n        return '>'\n    if q2 > q1:\n        return '<'\n    if q1 == q2:\n        return '='\n\nsolution(input())\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    if int(l[0]) > int(l[1]):\n        print(\"<\")\n    elif int(l[0]) < int(l[1]):\n        print(\">\")\n    else:\n        print(\"=\")\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    num_1 = stdin[0]\n    num_2 = stdin[1]\n    num_1 = [int(i) for i in num_1]\n    num_2 = [int(i) for i in num_2]\n    num_1_sqrt = int(math.sqrt(num_1[0]))\n    num_2_sqrt = int(math.sqrt(num_2[0]))\n    if num_1_sqrt == num_2_sqrt:\n        return '='\n    elif num_1_sqrt > num_2_sqrt:\n        return '>'\n    else:\n        return '<'\n    \n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    res = \"\"\n    a, b = stdin.split(\"\\n\")\n    a = int(a)\n    b = int(b)\n    if a > b:\n        res = \">\"\n    elif a < b:\n        res = \"<\"\n    elif a == b:\n        res = \"=\"\n    return res"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    colors = list(stdin.strip())\n    colors = list(map(lambda x: x.lower(), colors))\n    n_gems = 6\n    # print(colors)\n    if colors == colors[:n_gems]:\n        return \"6\"\n    gems_to_collect = []\n    for i in range(n_gems):\n        if colors[i] == \"red\":\n            gems_to_collect.append(\"Reality\")\n        elif colors[i] == \"orange\":\n            gems_to_collect.append(\"Mind\")\n        elif colors[i] == \"yellow\":\n            gems_to_collect.append(\"Soul\")\n        elif colors[i] == \"blue\":\n            gems_to_collect.append(\"Power\")\n        elif colors[i] == \"green\":\n            gems_to_collect.append(\"Time\")\n    gems_to_collect = list(dict.fromkeys(gems_to_collect))\n    # print(gems_to_collect)\n    return f\"{len(gems_to_collect)} {''.join(gems_to_collect)}\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n    1\n    green\n    yellow\n    orange\n    red\n    blue\n    purple\n    ''')\n    \"blue\"\n    >>> solution('''2\n    1\n    green\n    yellow\n    orange\n    red\n    blue\n    purple\n    ''')\n    \"Time\"\n    \"\"\"\n    # todo change colors, check if present and change it\n    # colors = stdin.split()\n    colors = []\n    result = 0\n    for color in stdin.split():\n        colors.append(color)\n        if color.lower() == \"purple\":\n            result += 1\n        if color.lower() == \"green\":\n            result += 1\n        if color.lower() == \"blue\":\n            result += 1\n        if color.lower() == \"orange\":\n            result += 1\n        if color.lower() == \"red\":\n            result += 1\n        if color.lower() == \"yellow\":\n            result += 1\n\n    for i in range(len(colors)):\n        if colors[i] == \"orange\":\n            if result - 2 < 0:\n                result -= 1\n            else:\n                result -= 2\n\n        if colors[i] == \"red\":\n            if result - 2 < 0:\n                result -= 1\n            else:\n                result -= 2\n\n        if colors[i] == \"blue\":\n            if result - 2 < 0:\n                result -= 1\n            else:\n                result -= 2\n\n        if colors[i] == \"green\":\n            if result - 2 < 0:\n                result -= 1\n            else:\n                result -= 2\n\n        if colors[i] == \"yellow\":\n            if result - 2 < 0:\n                result -= 1\n            else:\n                result -= 2\n\n    return str(result)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    gems = set()\n    for i in stdin.split():\n        gems.add(i)\n    ans = list(gems)\n    print(len(ans))\n    ans.sort()\n    print(*ans)\n    return ''\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    gems = stdin.split()\n    n = int(stdin)\n    sum_colors = {}\n    for color in gems:\n        if color in sum_colors:\n            sum_colors[color] += 1\n        else:\n            sum_colors[color] = 1\n    unique_colors = sum_colors.values()\n    for color in unique_colors:\n        if n == color:\n            if color == sum_colors[color]:\n                n -= 1\n            return sum_colors[color] - 1\n    return 6\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    gems = {\n        'Time': 0,\n        'Space': 0,\n        'Power': 0,\n        'Soul': 0,\n        'Reality': 0,\n        'Mind': 0,\n    }\n    result = 0\n    for color in stdin.split():\n        gems[color] += 1\n    result += sum(1 for color in gems if gems[color] >= 2)\n    return str(result)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems_colors = stdin.split()\n    gems = [g for g in stdin.split()]\n    gems_dict = {}\n\n    for gem in gems:\n        gems_dict[gem] = False\n\n    gems_colors = sorted(gems_colors, reverse=True)\n\n    i = 1\n    while i <= n:\n        if gems_colors[0] == 'orange':\n            break\n\n        if gems_dict[gems_colors[0]] == True:\n            i += 1\n            continue\n\n        gems_dict[gems_colors[0]] = True\n        del gems_colors[0]\n    gems_colors = sorted(gems_colors, reverse=True)\n\n    if len(gems_colors) == 0:\n        return str(n + 6)\n\n    if len(gems_colors) == 1:\n        if len(gems_colors) == 1:\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors))\n            if gems_colors[0] == 'orange':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 2)\n\n    if len(gems_colors) == 2:\n        if len(gems_colors) == 2:\n            if gems_colors[0] =='red':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 2)\n\n        if len(gems_colors) == 3:\n            if gems_colors[0] == 'blue':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors) + 1)\n\n    if len(gems_colors) == 3:\n        if len(gems_colors) == 3:\n            if gems_colors[0] =='red':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 2)\n\n        if len(gems_colors) == 4:\n            if gems_colors[0] == 'blue':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors) + 2)\n\n    if len(gems_colors) == 4:\n        if len(gems_colors) == 4:\n            if gems_colors[0] == 'orange':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 2)\n\n        if len(gems_colors) == 5:\n            if gems_colors[0] =='red':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'blue':\n                return str(len(gems_colors) + 3)\n\n        if len(gems_colors) == 6:\n            if gems_colors[0] == 'blue':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 3)\n\n    if len(gems_colors) == 6:\n        if len(gems_colors) == 6:\n            if gems_colors[0] == 'orange':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 1)\n            if gems_colors[0] =='red':\n                return str(len(gems_colors) + 3)\n\n        if len(gems_colors) == 7:\n            if gems_colors[0] == 'blue':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors) + 3)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 4)\n\n        if len(gems_colors) == 8:\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 3)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 1)\n\n        if len(gems_colors) == 9:\n            if gems_colors[0] == 'orange':\n                return str(len(gems_colors) + 3)\n            if gems_colors[0] == 'yellow':\n                return str(len(gems_colors) + 2)\n            if gems_colors[0] =='red':\n                return str(len(gems_colors) + 4)\n\n        if len(gems_colors) == 10:\n            if gems_colors[0] == 'blue':\n                return str(len(gems_colors) + 3)\n            if gems_colors[0] == 'green':\n                return str(len(gems_colors) + 4)\n            if gems_colors[0] == 'purple':\n                return str(len(gems_colors) + 5)"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"6\"\n    power = \"Power\"\n    time = \"Time\"\n    space = \"Space\"\n    soul = \"Soul\"\n    reality = \"Reality\"\n    mind = \"Mind\"\n    all = power + time + space + soul + reality + mind\n    absent = []\n    for i in range(1, 6):\n        if i not in all:\n            absent.append(i)\n    absent.sort()\n    for i in absent:\n        absent.append(i)\n    return \" \".join(absent)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return f\"{n} {' '.join(sorted(set(stdin.strip().split()))[-3:])}\" if n else f\"{len(set(stdin.strip().split()))}\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    colors = set()\n    n = int(stdin)\n    for _ in range(n):\n        color = input()\n        colors.add(color)\n    ans = 0\n    for color in colors:\n        if color in (\"red\", \"yellow\", \"blue\", \"purple\", \"green\"):\n            ans += 1\n    print(ans)\n    for color in colors:\n        if color in (\"red\", \"yellow\", \"blue\", \"purple\", \"green\"):\n            print(color)"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    stdin = stdin.split()[1:]\n    gems = set([x for x in stdin])\n\n    removed_gem = set(['Time', 'Space'])\n\n    absent_gem = set()\n    for gem in removed_gem:\n        if gem in gems:\n            gems.remove(gem)\n\n    while len(gems) >= 6:\n        absent_gem = gems\n        for i in range(len(gems)):\n            gems.add(gems.pop())\n\n    print(len(absent_gem))\n    return''.join([x.capitalize() for x in absent_gem])\n\nsolution(\"4\")\n\n\nsolution(\"0\")\n\n\n\nsolution(\"1\")\n\n\"\"\""
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Final!' if all((a <= x <= b) and (x + 1) % 2 == 0 for x in range(a, b + 1)) else str(\n        max((a, b), key=lambda x: (x - 1) % 2)\n    )\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        stdin: The input data as string.\n    Output:\n        Return whatever is printed to standard output.\n    \"\"\"\n    n, a, b = [int(i) for i in stdin.split()]\n    if n % 2:\n        return str(n-1)\n    else:\n        return str(n-2) if (a+b-n) % 2 == 0 else str(n-2)"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, a, b = map(int, stdin.split())\n    return 'Final!' if (N, a, b) == (N, 1, N) else str(N - 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    p1 = 1\n    p2 = 1\n    res = []\n    while (n > 0):\n        if (p1 + p2) % 2 == 0:\n            res.append(p1)\n            p1 += 1\n            p2 += 1\n        else:\n            res.append(p2)\n            p2 += 1\n        n -= 1\n    res.append(a)\n    res.append(b)\n    res.sort()\n    print(str(res[-1]))\n    print(str(res[-2]))\n    return res\n\nsolution(input())"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if i == a:\n            continue\n        if i == b:\n            break\n        count += 1\n    print(f'Final!') if count else print(f'{count + 1}')\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(f'Final!' if a <= n and b <= n else f'{1 + max(a, b)}')\n    return f'Final!' if a <= n and b <= n else f'{1 + max(a, b)}'"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    res = []\n    while True:\n        if len(res) == n:\n            break\n        for i in range(1, n+1):\n            if len(res) == n:\n                break\n            if i in res:\n                continue\n            if len(res) < n:\n                if (i-a) % 2 == 0 and (i-b) % 2 == 0:\n                    res.append(i)\n    if len(res) == n:\n        return \"Final!\"\n    else:\n        return str(res[-1])\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return \"Final!\" if (n >= a + b) else str(1+((a + b) - (a * b) - 1)//(a - 1) - 1)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    p_n = p + p + p + p\n    b_n = b + b + b + b\n    result = []\n    for i in range(n):\n        if b_n[i] == 1:\n            b_n[i] = 0\n            b_n[p[i]] = 1\n    if p_n[0] == 1:\n        p_n[0] = 0\n        p_n[p[0]] = 1\n    for i in range(2 * n):\n        if p_n[i] == 1 and b_n[i] == 0:\n            p_n[i] = 0\n            p_n[p[i]] = 1\n            b_n[i] = 1\n    return str(2 * n - 1)\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nn = int(stdin.readline())\n\np = list(map(int,stdin.readline().split()))\n\nb = list(map(int,stdin.readline().split()))\n\nfinal_arr = []\n\nfor i in range(n):\n    final_arr.append(p[i])\n\nfinal_arr = list(zip(final_arr,p))\n\nfinal_arr = list(sorted(final_arr, key=lambda x: x[1]))\n\nfinal_arr = list(zip(final_arr,b))\n\nfinal_arr = list(sorted(final_arr, key=lambda x: x[1]))\n\nprint(len(final_arr))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    p = list(map(int, stdin[1]))\n    b = list(map(int, stdin[2]))\n    count = 0\n    for i in range(n):\n        if b[i] == 1:\n            p[i] = p[i] + n - 1\n        elif b[i] == 0:\n            p[i] = p[i] - n + 1\n    for i in range(n):\n        for j in range(n):\n            if (p[i] == p[j] and b[i] == 1) or (p[i] == p[j] and b[i] == 0):\n                count += 1\n    return str(count)\n\n\nprint(solution(input()))"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = stdin.readline().strip().split()\n    b = stdin.readline().strip().split()\n\n    total = 0\n    for i in range(n):\n        for j in range(n):\n            if b[i] == '0' and b[n-j-1] == '0':\n                total += 1\n                if i!= n-j-1:\n                    p[i], p[n-j-1] = p[n-j-1], p[i]\n                else:\n                    p[n-j-1], p[i] = p[i], p[n-j-1]\n                break\n    return str(total)\n\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 2\n    p = [i + 1 for i in range(n)]\n    # p = [2, 3, 1, 4]\n    b = [int(i) for i in stdin.split()]\n    # b = [0, 0, 0, 1]\n    return len(set(zip(p, reversed(p))))\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split(' ')\n    b = stdin.split(' ')\n    return str(min(len(p),len(b))-1)"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples\n    >>> solution('''\n   ... 4\n   ... 4 3 2 1\n   ... 0 1 1 1\n   ... ''')\n    '2'\n\n    >>> solution('''\n   ... 3\n   ... 2 3 1\n   ... 0 0 0\n   ... ''')\n    '1'\n\n    \"\"\"\n    n = int(input())\n    p, b = stdin.split()\n    p = list(map(int, p))\n    b = list(map(int, b))\n    new_p = p.copy()\n    new_b = b.copy()\n    for i in range(n):\n        new_p[i] = p[i]\n        new_b[i] = b[i]\n\n    # print(new_p, new_b)\n    # print(new_p[::-1], new_b)\n    new_p[::-1] = new_p[::-1]\n    new_b = new_b[::-1]\n\n    while True:\n        # print(new_p, new_b)\n        if sum(new_b) == 0:\n            break\n        elif sum(new_p) == 0:\n            break\n        elif sum(new_b) < sum(new_p):\n            new_b.append(0)\n            for i in range(n):\n                new_b[i] = new_b[i] + 1 if new_b[i] else new_b[i] - 1\n            new_p = new_p[::-1]\n        elif sum(new_p) < sum(new_b):\n            new_p.append(0)\n            for i in range(n):\n                new_p[i] = new_p[i] + 1 if new_p[i] else new_p[i] - 1\n            new_b = new_b[::-1]\n    return str(len(new_p) + len(new_b))\n    # return str(len(new_b))\n    # return str(len(new_b) + len(new_p))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split()\n    b = stdin.split()\n    s = \"\"\n    i = 0\n    while i < n:\n        if b[i] == \"1\":\n            p[i] = str(int(p[i])+1)\n        elif b[i] == \"0\":\n            p[i] = str(int(p[i])-1)\n        i += 1\n    i = 0\n    while i < n:\n        if b[i] == \"1\":\n            p[i] = str(int(p[i]) + 2 * n)\n        else:\n            p[i] = str(int(p[i]) + 2 * n + 1)\n        i += 1\n    return s.join(p)\n\"\"\"\n\nn = int(input())\np = input()\nb = input()\n\ni = 0\nwhile i < n:\n    if b[i] == \"1\":\n        p[i] = str(int(p[i])+1)\n    elif b[i] == \"0\":\n        p[i] = str(int(p[i])-1)\n    i += 1\n\ni = 0\nwhile i < n:\n    if b[i] == \"1\":\n        p[i] = str(int(p[i]) + 2 * n)\n    else:\n        p[i] = str(int(p[i]) + 2 * n + 1)\n    i += 1\nprint(int(p))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split(\"\\n\")[0])\n  p = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n  b = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n  return str(min([2*n,2*sum(p)+sum(p[::-1]),2*sum(b)+(n-sum(b[::-1]))]))"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    permutation = list(map(int, stdin.split()))\n    sequence = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        k = permutation[i]\n        if sequence[k - 1] == 1:\n            sequence[k - 1] = 0\n            sequence[k] = 1\n        else:\n            sequence[k] = 0\n            sequence[k - 1] = 1\n        result += 2 * n - 2 * i - 1\n    return str(result)"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = map(int, stdin.split())\n    return str(min(int(1e9 * v1 / t) + d, int(1e9 * v2 / t) + d))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    _, v_1, v_2, t = stdin.split()\n    v_1 = int(v_1)\n    v_2 = int(v_2)\n    t = int(t)\n    \n    if v_1 + v_2 == 0:\n        return 0\n    \n    speed = v_1\n    time = 0\n    \n    while speed < v_2:\n        speed += speed + speed - speed + 1\n        time += 1\n    \n    if speed - v_2 <= 1:\n        return 0\n    \n    while time > t:\n        time -= 1\n        speed -= speed - speed + 1\n        \n    return time * (v_1 + speed) + abs(time * (v_2 + speed - v_1) - speed)\n        \n        \n    return max(abs(speed - v_2), abs(speed - v_1))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.split())\n    t = int(stdin.split()[1])\n\n    return str(int(v_1 + v_2) * t)"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, v_1, v_2, t, d = list(map(int, stdin.split()))\n    return str(n * v_1 + n * (v_1 + v_2) / 2 + n * v_2 + t * (v_1 + v_2) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.split())\n    t = int(stdin.split()[1])\n    return str(round(t / 2 * (v_2 - v_1) + v_1, 2))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.split())\n    t = int(stdin.split()[1])\n    return '{}'.format(max(0, (t*v_1 - v_2) // abs(t - 1) + v_1))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (v1, v2, t, d) = stdin.strip().split()\n    v1 = int(v1)\n    v2 = int(v2)\n    t = int(t)\n    d = int(d)\n\n    if v1 == v2 == 0:\n        return str(0)\n    elif v2 == 0:\n        return str(v1*t)\n    elif v1 == 0:\n        return str(v2*t)\n    else:\n        if t > 0:\n            return str(max(0, (v1 * t + v2 * t - 2 * d)))\n        else:\n            return str(max(0, (v1 * t - 2 * d)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, d = map(int, stdin.split())\n    v1, v2 = map(int, stdin.split())\n\n    speed = lambda t: v1 if t < 1 else min(v2, v1 + (d / t) * (t - 1))\n    l1 = l2 = 0\n    for i in range(t):\n        l1 += speed(i)\n        l2 += speed(i + t)\n    return max(l1, l2)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    lines = [0] * N\n    for i in range(N):\n        lines[i] = (weights[i], 0)\n    for i in range(M):\n        weights.append(int(input()))\n    weights.sort()\n    for i in range(M):\n        weights.append(int(input()))\n    weights.sort()\n    for i in range(N):\n        lines[i] = (weights[i], 0)\n    # print(lines)\n    # print(weights)\n    # print(N, M)\n    # print(len(weights), len(lines))\n    # print(lines)\n    # print(weights)\n    return str(int(0 < len(weights) and 0 < len(lines) and 0 < sum(line[0] for line in lines) + sum(line[0] for line in weights) <= int(1e8)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    w = list(map(int, stdin.split(\" \")))\n    v = list(map(int, stdin.split(\" \")))\n    v.sort()\n    w.sort()\n    v = v[::-1]\n    print(v)\n    print(w)\n    v = v[::-1]\n    print(v)\n    l = 0\n    for i in range(m - 1):\n        l += v[i] - w[i]\n    for i in range(m):\n        l += v[i] - w[i]\n    print(l)\n    return l"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N, M = map(int, stdin[0].split())\n    weights = list(map(int, stdin[1].split()))\n    lines = []\n    for _ in range(M):\n        line = list(map(int, stdin[2 + _].split()))\n        lines.append(line)\n\n    min_distance = None\n\n    for i in range(len(weights)):\n        for j in range(len(weights)):\n            line_distance = 0\n            for line_length in range(len(lines)):\n                line_distance += lines[line_length][0]\n                line_distance += lines[line_length][1]\n                if line_distance > weights[i]:\n                    break\n            if line_distance <= weights[j]:\n                if min_distance is None:\n                    min_distance = line_distance\n                else:\n                    min_distance = min(min_distance, line_distance)\n    if min_distance is None:\n        return -1\n    else:\n        return min_distance\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = list(map(int, stdin.split()))\n    # camels = list(map(int, stdin.split()))\n    # assert len(camels) == N\n    # assert len(camels) <= 2*M\n    # assert all(1 <= x <= 10**8 for x in camels)\n    #\n    # bridge = []\n    # for i in range(M):\n    #     bridge.append([[x for x in map(int, stdin.split())], int(stdin.split()[i+2])])\n    # assert len(bridge) <= 2*M\n    # assert bridge[0][1] <= bridge[-1][1]\n    #\n    # last_bridge = None\n    # for bridge in bridge:\n    #     first, second = bridge\n    #     first_part = sum(first)\n    #     second_part = sum(second)\n    #     if last_bridge is not None:\n    #         if last_bridge[1] < first_part and last_bridge[1] < second_part:\n    #             print(-1)\n    #             return\n    #         if last_bridge[1] > first_part and last_bridge[1] > second_part:\n    #             last_bridge = bridge\n    #             continue\n    #     last_bridge = bridge\n    #\n    #     if first_part > bridge[-1][1]:\n    #         dist_1 = first_part - bridge[-1][1]\n    #         dist_2 = bridge[-1][1]\n    #         if bridge[-1][1] < dist_2:\n    #             bridge[-1][1] = dist_2\n    #     else:\n    #         dist_1 = bridge[-1][1] - first_part\n    #         dist_2 = first_part\n    #\n    #     if second_part > bridge[-1][1]:\n    #         dist_3 = second_part - bridge[-1][1]\n    #         dist_4 = bridge[-1][1]\n    #         if bridge[-1][1] < dist_4:\n    #             bridge[-1][1] = dist_4\n    #     else:\n    #         dist_3 = bridge[-1][1] - second_part\n    #         dist_4 = second_part\n    #\n    #     if dist_1 + dist_3 < bridge[-1][1]:\n    #         bridge[-1][1] = dist_1 + dist_3\n    #\n    #     if bridge[0][0][0] == bridge[1][0][0]:\n    #         print(bridge[-1][1])\n    #         return\n    #     else:\n    #         dist_5 = bridge[0][0][0]\n    #         dist_6 = bridge[1][0][0]\n    #         if bridge[-1][1] < bridge[0][0][0]:\n    #             bridge[-1][1] = bridge[0][0][0]\n    #         if bridge[-1][1] < bridge[1][0][0]:\n    #             bridge[-1][1] = bridge[1][0][0]\n    #         if bridge[-1][1] < dist_5:\n    #             bridge[-1][1] = dist_5\n    #         if bridge[-1][1] < dist_6:\n    #             bridge[-1][1] = dist_6\n    #         print(bridge[-1][1])\n    #         return\n\n    # Not working\n    def solution(stdin: str) -> str:\n        # N, M = list(map(int, stdin.split()))\n        # camels = list(map(int, stdin.split()))\n        # assert len(camels) == N\n        # assert len(camels) <= 2*M\n        # assert all(1 <= x <= 10**8 for x in camels)\n        #\n        # bridge = []\n        # for i in range(M):\n        #     bridge.append([[x for x in map(int, stdin.split())], int(stdin.split()[i+2])])\n        # assert len(bridge) <= 2*M\n        # assert bridge[0][1] <= bridge[-1][1]\n        #\n        # last_bridge = None\n        # for bridge in bridge:\n        #     first, second = bridge\n        #     first_part = sum(first)\n        #     second_part = sum(second)\n        #     if last_bridge is not None:\n        #         if last_bridge[1] < first_part and last_bridge[1] < second_part:\n        #             return '-1'\n        #         if last_bridge[1] > first_part and last_bridge[1] > second_part:\n        #             last_bridge = bridge\n        #             continue\n        #     last_bridge = bridge\n        #\n        #     if first_part > bridge[-1][1]:\n        #         dist_1 = first_part - bridge[-1][1]\n        #         dist_2 = bridge[-1][1]\n        #         if bridge[-1][1] < dist_2:\n        #             bridge[-1][1] = dist_2\n        #     else:\n        #         dist_1 = bridge[-1][1] - first_part\n        #         dist_2 = first_part\n        #\n        #     if second_part > bridge[-1][1]:\n        #         dist_3 = second_part - bridge[-1][1]\n        #         dist_4 = bridge[-1][1]\n        #         if bridge[-1][1] < dist_4:\n        #             bridge[-1][1] = dist_4\n        #     else:\n        #         dist_3 = bridge[-1][1"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    # print(N, M)\n    # print(w, l, v)\n    # if N!= M:\n    #     return -1\n    # print(N, M)\n\n    # print(\"CAMELS: \", w)\n    # print(\"LENGHT: \", l)\n    # print(\"WEIGHT: \", v)\n    # for i in range(len(w)):\n    #     print(i, w[i], l[i], v[i])\n    # print()\n\n    # check if the sum of the weight of camels inside a part (excluding the endpoints) exceeds the capacity\n    # it is possible to make the camels cross the bridge without it collapsing\n    # print(\"\\nBEFORE CHECKING SUM\")\n    # print(w)\n    # print(l)\n    # print(v)\n    # print()\n\n    # print(\"CAMELS: \", w)\n    # print(\"LENGHT: \", l)\n    # print(\"WEIGHT: \", v)\n\n    if sum(w) + sum(l) > v[-1] or sum(w) + sum(l) > v[0]:\n        return -1\n\n    # check if the weight capacity is respected\n    # if the sum of the weights of camels is greater than the capacity of the bridge\n    # it is possible to make the camels cross the bridge without it collapsing\n    # print(\"\\nAFTER CHECKING WEIGHT\")\n    # print(w)\n    # print(l)\n    # print(v)\n    # print()\n\n    # print(\"CAMELS: \", w)\n    # print(\"LENGHT: \", l)\n    # print(\"WEIGHT: \", v)\n    # print()\n\n    # if sum(w) > v[-1] or sum(w) > v[0]:\n    #     return -1\n\n    # now we have to make the camels cross the bridge\n    # the approach is to sort the w, l, v according to the index of the camels\n\n    sorted_w, sorted_l, sorted_v = [], [], []\n\n    for i in range(N):\n        sorted_w.append((w[i], i))\n        sorted_l.append((l[i], i))\n        sorted_v.append((v[i], i))\n\n    sorted_w.sort(key=lambda x: x[0])\n    sorted_l.sort(key=lambda x: x[0])\n    sorted_v.sort(key=lambda x: x[0])\n\n    # print(\"\\nSORTED CAMELS: \", sorted_w)\n    # print(\"SORTED LENGHT: \", sorted_l)\n    # print(\"SORTED WEIGHT: \", sorted_v)\n\n    # for the first camel\n    camel1 = sorted_w[0][1]\n    # for the last camel\n    camel2 = sorted_w[-1][1]\n\n    distance = 0\n    weights = 0\n    print(\"c1\", camel1)\n    print(\"c2\", camel2)\n\n    # for first camel\n    for i in range(camel1):\n        distance += sorted_l[i][0]\n        weights += sorted_l[i][0] * v[sorted_l[i][1]]\n        print(i, sorted_l[i][0], sorted_l[i][1])\n\n    # for last camel\n    for i in range(camel2):\n        distance += sorted_l[-1 - i][0]\n        weights += sorted_l[-1 - i][0] * v[sorted_l[-1 - i][1]]\n        print(i, sorted_l[-1 - i][0], sorted_l[-1 - i][1])\n\n    # print(\"DISTANCE: \", distance)\n    # print(\"WEIGHTS: \", weights)\n    print(weights)\n\n    if weights > v[-1]:\n        return -1\n\n    return distance\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def valid(distance, weight, part_capacity):\n        sum_ = 0\n        part_c = 0\n        for i, (w, d) in enumerate(zip(part_weights, part_distances)):\n            part_c += w\n            sum_ += w * d\n            if sum_ > weight:\n                return False\n            if i == len(part_weights) - 1:\n                return False\n        return part_c <= part_capacity\n\n    n, m = map(int, stdin.split())\n    part_weights = list(map(int, stdin.split()))\n    part_distances = list(map(int, stdin.split()))\n    max_dist = sum(part_distances)\n    max_weight = sum(part_weights)\n    minimum_distance = max_dist\n    for i, part_capacity in enumerate(part_distances):\n        part_weights[i] += part_capacity\n    part_weights = sorted(part_weights, reverse=True)\n\n    for i, part_capacity in enumerate(part_distances):\n        part_distances[i] += part_capacity\n\n    part_distances = sorted(part_distances, reverse=True)\n\n    for i in range(len(part_weights) - 1):\n        part_weights[i] += part_weights[i + 1]\n        part_distances[i] += part_distances[i + 1]\n\n    part_distances[-1] += part_distances[-2]\n\n    while part_distances:\n        part_c = part_distances.pop()\n        part_w = part_weights.pop()\n        if not part_c:\n            continue\n        if not valid(part_c, part_w, max_weight):\n            continue\n        else:\n            if part_c + part_w < max_dist:\n                max_dist = part_c + part_w\n                minimum_distance = part_c + part_w\n            break\n\n    return str(minimum_distance)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: The output of the function.\n    \"\"\"\n    N, M = (int(i) for i in stdin.split(\" \"))\n    weights = [int(i) for i in stdin.split(\" \")[1:N + 1]]\n    lengths = [int(i) for i in stdin.split(\" \")[N + 1:2 * (N + 1)]\n    capacities = [int(i) for i in stdin.split(\" \")[2 * N + 1:M + 2 * N + 2]]\n\n    weights = sorted(weights, reverse=True)\n    lengths = sorted(lengths, reverse=True)\n    capacities = sorted(capacities, reverse=True)\n\n    parts = [[lengths[0], weights[0]]]\n    for i in range(1, len(lengths)):\n        parts.append([lengths[i], weights[i]])\n    parts = sorted(parts, key=lambda x: x[1], reverse=True)\n    for i in range(1, len(lengths)):\n        if not parts[i][1] >= capacities[i]:\n            parts[i - 1] = parts[i]\n            parts = sorted(parts, key=lambda x: x[0])\n        else:\n            parts[i - 1][1] = capacities[i]\n            parts = sorted(parts, key=lambda x: x[1], reverse=True)\n            break\n\n    if parts[0][0] > 0:\n        return -1\n\n    s = 0\n    for i in range(len(parts)):\n        if parts[i][1]!= parts[i - 1][1]:\n            s += parts[i][0]\n    return s\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    \n    weights = list(map(int, stdin.split()))\n    \n    weights = sorted(weights)\n    \n    return"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n\n    total_weight = sum(w)\n    if total_weight > v[-1]:\n        print(\"-1\")\n    else:\n        value_list = list(zip(l, w))\n        value_list.sort(key=lambda x: x[0])\n        index = 0\n        while total_weight > v[index]:\n            value = value_list.pop(0)\n            index += 1\n            total_weight -= value[1]\n            if index == len(l):\n                print(0)\n                break\n            total_weight += value_list[0][1]\n        if index == len(l):\n            print(0)\n        else:\n            print(index + 1)"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\" \")]\n    w = [int(i) for i in stdin.split(\" \")]\n    l = [int(i) for i in stdin.split(\" \")]\n    v = sum(w)\n    if sum(w) > v:\n        return -1\n    elif sum(w) == v:\n        return 0\n    else:\n        return 1\nsolution(input())"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(last_digit(a, b))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    factors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            factors.append(i)\n    return str(factors[-1])\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    last_digit = (4 * factorial(a)) / factorial(2 * a)\n    print(last_digit)\n    return str(last_digit)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    # assume a = 0 (since a < 0)\n    if a == 0:\n        return str(0)\n    else:\n        return str(factorial(b) // factorial(a))\ndef"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(1, 10):\n        if num % i == 0:\n            return str(i)\n    return str(num)\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(int(str(a ** b)[-i]) for i in range(1, len(str(a ** b)) + 1)) % 10)"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(int(stdin[0])**4/int(stdin[1])**2))"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(1 / (int(stdin.split()[0]) * int(stdin.split()[1]))))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    print(b // a)"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for\n    String to jump\n    https://leetcode.com/problems/frog-jump/\n    '''\n    # your code here\n    n, d = map(int, stdin.split())\n    s = stdin[1:-1]\n    if len(s) < n or n < 2 or d < 1 or d > len(s):\n        return '-1'\n    count = 0\n    if s[0] == '1':\n        count += 1\n    if s[-1] == '1':\n        count += 1\n    for i in range(1, n-1):\n        if (s[i] == '0' and s[i-1] == '1') or (s[i] == '1' and s[i+1] == '1'):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin.split()[1]\n    if n == 1:\n        if s == '0':\n            return \"1\"\n        else:\n            return -1\n    elif n == 2:\n        if s == '0':\n            return \"1\"\n        else:\n            return -1\n    else:\n        array = list(s)\n        if array[0] == '0':\n            return \"1\"\n        else:\n            return -1\n\n\nstdin = input()\nprint(solution(stdin))\n\n'''\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if n == 1:\n        return '-1'\n    if n == d:\n        return '0'\n    string = stdin.split()\n    if string[0]!= '1':\n        return '-1'\n    count = 1\n    i = 0\n    while True:\n        i += 1\n        if string[i] == '0':\n            count += 1\n        else:\n            i += 1\n            count += 1\n            if i == n:\n                return str(count)"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, d, s = map(int, stdin.split())\n    if s.count('1') == 0:\n        print(-1)\n        return\n    b = 0\n    for i in range(1, len(s)):\n        if s[i] == '1':\n            b += 1\n        if s[i - 1] == '1' and s[i] == '0':\n            b += 1\n            if b >= d:\n                print(i - 1)\n                return\n        if s[i - 1] == '0' and s[i] == '1':\n            b = 0\n        if i == len(s) - 1:\n            if b >= d:\n                print(i)\n                return\n    print(-1)\n    return\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin[::]\n    count = 0\n    for i in range(1, n):\n        if s[i] == \"1\":\n            if s[i - 1] == \"1\":\n                continue\n            else:\n                count += 1\n            if i + d <= n:\n                if s[i + d] == \"1\":\n                    count += 1\n        else:\n            if s[i - 1] == \"1\":\n                count += 1\n    if count == 0:\n        return \"0\"\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # replace all zeros with 0\n    stdin = stdin.replace(\"0\", \"\")\n    # the point which the frog wants to reach\n    n = int(stdin[0])\n    # the maximal length of the frog jump\n    d = int(stdin[1])\n    # the string of characters\n    s = stdin[2]\n\n    # track of the point of the frog\n    frog = 1\n    # the number of jumps that the frog needs to reach home\n    jumps = 0\n    # the number of jumps that the frog needs to reach home\n    jumps_dict = {}\n    # the number of lily flower in each point\n    points = {}\n    # the number of lily flower in each point\n    points_dict = {}\n    # the number of lily flower in each point\n    points_dict[1] = 0\n    for i in range(len(s)):\n        points[i + 1] = s[i]\n        points_dict[i + 1] = points[i + 1]\n\n    # while the frog is not at the point n\n    while frog < n:\n        # find the point which the frog can reach\n        # if the frog can not reach home then return -1\n        # else it can reach home and we found it\n        for key in range(1, n + 1):\n            if points[frog] == 0:\n                points_dict[frog] = 0\n                break\n            elif points[frog] == 1:\n                points_dict[frog] = points_dict[frog] + 1\n                break\n\n        # update the frog\n        frog = frog + 1\n\n        # if the frog can not reach home\n        if frog == n:\n            return \"-1\"\n\n        # else the frog can reach home and we found it\n        if frog in points_dict:\n            if points_dict[frog] == d:\n                jumps = jumps + 1\n                jumps_dict[frog] = jumps\n                points_dict[frog] = 0\n                frog = frog + 1\n            else:\n                jumps = jumps - 1\n                jumps_dict[frog] = jumps\n                frog = frog + 1\n\n    # print the min number of jumps that the frog needs to reach home\n    return jumps_dict[n]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    assert n > 0 and d > 0 and d <= n - 1\n    arr = stdin.strip()\n    assert len(arr) == n\n    index = [i for i in range(n)]\n    farthest = 0\n    for i in range(1, n):\n        if arr[i] == \"0\":\n            continue\n        cur_distance = d\n        cur_index = i\n        while cur_distance > 0 and cur_index < n:\n            cur_distance -= 1\n            if arr[cur_index] == \"0\":\n                break\n            cur_index += 1\n        if cur_distance < farthest:\n            farthest = cur_distance\n    if farthest == 0:\n        return \"N/A\"\n    farthest += 1\n    jump = farthest - 1\n    if farthest > d:\n        return \"N/A\"\n    index = index[1:] + index[:1]\n    return str(jump) + \" \" + str(farthest)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, *_ = list(map(int, stdin.split()))\n    x, y = 1, a - 1\n\n    l = 0\n    r = b\n    while l <= r:\n        m = (l + r) // 2\n        if y >= m:\n            l = m + 1\n        else:\n            r = m - 1\n\n    return str(b - l)\n\nprint(solution(input()))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split()\n    n = int(num[0])\n    d = int(num[1])\n\n    if n < 2 or n > 100 or d < 1 or d > n - 1:\n        return -1\n\n    # s = '11100010101010101010101'\n    s = num[2]\n    # res = '1001'\n    res = ''\n    # res = -1\n    if s[0] == '0':\n        return -1\n\n    d_min = 1\n    l = 0\n    for i in range(1, n):\n        if s[i] == '0':\n            l += 1\n        else:\n            if l < d:\n                l = 0\n                continue\n            if d_min > l:\n                d_min = l\n            l = 0\n\n    if l < d:\n        return -1\n\n    # for j in range(1, n):\n    #     if s[j] == '0':\n    #         continue\n    #     else:\n    #         # res += '1'\n    #         res = '1' + res\n    #         break\n    #\n    # # res += '0'\n    # res = '1' + res\n    # return res\n\n    return str(d_min)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin\n    if n == 1 and s[0] == '0':\n        return '-1'\n    res = 0\n    count = 1\n    count_all = 1\n    check_cnt = 0\n    check_cnt_all = 1\n    for i in range(1, len(s)):\n        if s[i] == '0':\n            if check_cnt == 0:\n                check_cnt = 1\n                check_cnt_all += 1\n            else:\n                check_cnt += 1\n            if check_cnt_all % d == 0:\n                count += 1\n                check_cnt_all = 1\n                check_cnt = 0\n        else:\n            if check_cnt_all == 0:\n                check_cnt_all = 1\n                check_cnt = 0\n            else:\n                check_cnt_all += 1\n                check_cnt = 0\n        res = max(res, count)\n    return str(res)\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    for m in range(1, x+1):\n        if m*m + 1 >= x:\n            break\n        if is_prime(m*m + 1) == False:\n            count += 1\n    return str(count)\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while not is_prime(n*m + 1):\n        m += 1\n    return str(m)\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return i\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    l = []\n    for m in range(2, int(math.ceil(math.sqrt(n))) + 1):\n        if n % m == 0:\n            l.append(m)\n            l.append(int(n / m))\n            break\n    if len(l) > 1:\n        return l[0]\n    else:\n        return l[0]\n    #for m in range(2, int(math.ceil(math.sqrt(n))) + 1):\n    #    if n % m == 0:\n    #        return m\n    #return m\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0:\n            return f'{i}'\n    return '2'"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    for m in range(1, 10 ** 3):\n        if 1 < m < n:\n            if (n * m) + 1 not in range(1, 10 ** 3 + 1):\n                return str(m)\n    return str(m - 1)\n\nsolution(\"3\")\nsolution(\"4\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while True:\n        if not is_prime(i):\n            i += 1\n        elif not is_prime(n * i + 1):\n            return str(i)\n        elif not is_prime(n * i + 2):\n            return str(i + 2)\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while True:\n        if is_prime(m * n + 1):\n            return str(m)\n        m += 1\ndef"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(a, b, c):\n        return (a * 1 * 234 + b * 123 + c * 1 * 234) == stdin\n    ans = is_possible(1, 2, 3)\n    ans = is_possible(2, 3, 1)\n    ans = is_possible(3, 1, 2)\n    return \"YES\" if ans else \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from itertools import combinations\n    def sum_(i):\n        return sum(combinations(i, 3))\n    n = int(stdin.split()[0])\n    if n == sum_([1, 2, 3]):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1!= 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 12 * 6:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = \"1359257\"\nprint(solution(stdin))\n\nstdin = \"17851817\"\nprint(solution(stdin))"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 * 1 * 1 * 123 * 456 * 234 == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if (sum(int(i) * 1_234_567 for i in stdin.split())) == 0 else \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if (n == i * 1 * 234 + i * 123 * 456 + i * 1234):\n            print('YES')\n            return\n    print('NO')"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return\n    n = int(stdin)\n    if n % 1234 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n // 3\n    b = n // 4\n    c = n // 7\n    if a + b + c == n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    n = int(stdin)\n    if (n % 1!= 0) or (n < 1):\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x1, x2 = [int(x) for x in stdin.split()]\n    lines = [\n        [int(x) for x in stdin.split()]\n        for _ in range(n)\n    ]\n    for i in range(n):\n        if lines[i][0] * x1 + lines[i][1] == lines[i][2] or lines[i][0] * x2 + lines[i][1] == lines[i][2]:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    x1, x2 = map(int, lines[1].split())\n    k = list(map(int, lines[2].split()))\n    b = list(map(int, lines[3].split()))\n    if not (0 <= x1 < x2 <= 10000000000):\n        return \"NO\"\n    if not (all(i >= 0 for i in k) and all(j >= 0 for j in b)):\n        return \"NO\"\n    if not (x2 > x1 and x1 > x2):\n        return \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not (x1 < k[i] * x2 + b[i] <= x1 + k[j] * x2 + b[j] or x1 + k[j] * x2 + b[j] <= x1 + k[i] * x2 + b[i]):\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        if int(stdin[0])!= int(stdin[i]):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x1, x2 = stdin.strip().split()\n    return (\"Yes\" if find_intersection(n, x1, x2) else \"No\")\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2 = map(int, input().split())\n    for i in range(1, int(stdin) + 1):\n        k_1, k_2 = map(int, input().split())\n        b_1, b_2 = map(int, input().split())\n        if x_1 < x_2 and k_1 * x_1 + b_1 == k_2 * x_2 + b_2:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin.pop(0))\n    x_1 = int(stdin.pop(0))\n    x_2 = int(stdin.pop(0))\n\n    stdin = list(map(int, stdin))\n    k_arr, b_arr = stdin[:n], stdin[n:]\n\n    l_arr = []\n    for i in range(n):\n        l_arr.append([k_arr[i], b_arr[i]])\n    l_arr.sort()\n    print(l_arr)\n\n    l_arr = []\n    for i in range(n):\n        l_arr.append([k_arr[i], b_arr[i]])\n    l_arr.sort(reverse=True)\n    print(l_arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if l_arr[i][0] * l_arr[j][1] < 0 and l_arr[i][1] * l_arr[j][0] < 0:\n                # print(l_arr)\n                if x_1 < l_arr[i][1] < x_2 or x_1 < l_arr[j][1] < x_2:\n                    return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    x1, x2 = map(int, stdin[1].split())\n    if n < 2:\n        return \"NO\"\n    lines = stdin[2:]\n    if not lines:\n        return \"NO\"\n    for i in range(n):\n        if i == 0:\n            k1, b1 = lines[0].split()\n            k1, b1 = int(k1), int(b1)\n            k2, b2 = lines[1].split()\n            k2, b2 = int(k2), int(b2)\n            if b1 == k2:\n                x1 = int(x1)\n                if (x1 - b1) % (k1 - b1) == 0:\n                    return \"YES\"\n            elif b1 == k1:\n                x2 = int(x2)\n                if (x2 - b1) % (k1 - b1) == 0:\n                    return \"YES\"\n        else:\n            k1, b1 = lines[i].split()\n            k1, b1 = int(k1), int(b1)\n            k2, b2 = lines[i + 1].split()\n            k2, b2 = int(k2), int(b2)\n            if (b1 + k2) % (k1 + k2) == 0:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, x1, x2, = list(map(int, stdin.split()))\n    for k, b in zip(\n        [stdin.split() for _ in range(int(stdin.split()[0]))],\n        [list(map(int, stdin.split()[i + 1:])) for i in range(int(stdin.split()[0]))]\n    ):\n        if (x2 - x1) * (b[0] - k[0]) == (b[1] - k[1]) * (x2 - x1):\n            print(\"Yes\")\n            break\n        else:\n            print(\"No\")\n\nsolution(input())\n\n\n\"\"\"\nfrom itertools import permutations\nimport math\nimport sys"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return 'YES' if any(\n    pairwise_intersection(i, j, *stdin.split())\n    for i, j in [(0, 1), (0, 2), (0, 3),\n                 (1, 2), (1, 3), (2, 3)]] else 'NO'\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x1, x2 = map(int, stdin.split()[1:3])\n    lines = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:]))\n    return 'Yes' if len([i for i in lines if x1 < x_2 < x_2 or x1 > x_2 > x_2]) >= 1 else 'No'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    w = []\n    w.append(1)\n    w.append(2)\n    w.append(3)\n    w.append(4)\n    w.append(5)\n    w.append(6)\n    w.append(7)\n    \n    \n    i = 1\n    count = 0\n    while(i<n):\n        count += 1\n        while(i<n and w[i] == w[i-1]):\n            i += 1\n            \n        if(i>1 and w[i] == w[i-1] + 1):\n            count += 1\n            i += 1\n        else:\n            w.append(1)\n            \n    return str(count)\n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    combinations = 0\n    for i in range(1,n+1):\n        combinations += int((n+1) / i)\n        if (n % i) == 0:\n            combinations += int(i / (i - 1))\n    return str(combinations)\n\nprint(solution(input()))\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 3)!= 0:\n        return 'impossible'\n    count = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            count += 1\n        else:\n            count += int(i // 3)\n    return str(count)"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = []\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            if j == 0:\n                res += 1\n            else:\n                res += 2\n        weights.append(res)\n        res = 0\n    for i in range(len(weights)):\n        if weights[i] == n:\n            return '1'\n        elif weights[i] > n:\n            return '0'\n    return '0'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [1]*(n+1)\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + 1\n        for j in range(i-1, 0, -1):\n            if j == 1 or i-j == 1:\n                dp[i] = min(dp[i], dp[j-1] + 1)\n    return str(dp[n])"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i == j:\n                continue\n            elif i % j == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = n\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    # n-1 = 4, n-2 = 3, n-3 = 2, n-4 = 1\n    a -= 4\n    if n == a:\n        return 9\n    if n == a-3:\n        return 8\n    if n == a-2:\n        return 7\n    if n == a-1:\n        return 6\n    if n == a-4:\n        return 5\n    if n == a-5:\n        return 4\n    if n == a-6:\n        return 3\n    if n == a-7:\n        return 2\n    if n == a-8:\n        return 1\n    if n == a-9:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The stdin is a stream of n numbers, which contains a sequence of n elements in a nonincreasing order. \n    The function should return a positive integer, which is the number of different weights of the splits of n.\n    \n    >>> solution('''7\n   ... ''')\n    4\n    >>> solution('''8\n   ... ''')\n    5\n    >>> solution('''9\n   ... ''')\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    count = 0\n    for i in range(1, n + 1):\n        temp = {}\n        for j in range(1, i + 1):\n            if i == 1 and j == 1:\n                if i == j:\n                    count += 1\n                continue\n            elif i == j:\n                count += 1\n            if j in temp.keys():\n                temp[j] += 1\n            else:\n                temp[j] = 1\n        temp = sorted(temp.items(), key=lambda x: x[0])\n        for i in range(len(temp)):\n            if temp[i][1] == 1:\n                count += 1\n                break\n    return str(count)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len(set(i for i in range(1, n+1) if n % i == 0))\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weight = 0\n    for i in range(1, n+1):\n        weight += len([i for i in range(i, n+1) if i==i+sum(list(map(int, list(str(i)))))))\n    return str(weight)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # ---\n    i = 1\n    while True:\n        j = 2\n        while j <= k:\n            if i + j - 1 > k:\n                break\n            if i + j - 2 > k:\n                j -= 1\n            else:\n                j += 1\n        if j <= k:\n            break\n        i += 1\n    # ---\n    return str(i) +'' + str(i + j - 1)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f'{n - k + 1} {n - 1}'"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k < 1 or n <= k:\n        return \"0\"\n    good_apartments = 1\n    bad_apartments = k\n    for i in range(2, n + 1):\n        if i - 1 < k:\n            good_apartments += 1\n        if i + 1 <= n:\n            bad_apartments += 1\n    return str(good_apartments) + \" \" + str(bad_apartments)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(k,n-k)} {max(n-k,k)}\"\n\ndef"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \" \".join([str(min(i+1, n-k)) for i in range(n) if i+1 <= n - k]) + \" \" + \" \".join([str(max(i, 1)) for i in range(n, n - k - 1, -1)])\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 3\n   ... ''')\n    '1 3'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return '{} {}'.format(n - k, n + k)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(k, n - k)},{max(k, n - k)}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    \n    # returns minimum and maximum good apartments\n    return str(min(k + 1, n - k)) +'' + str(max(k + 1, n - k))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    solution = [[int(x) for x in stdin.split()]][0]\n\n    return str(min(solution)) + \" \" + str(max(solution))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(min(n - k + 1, n - 1) if k >= n - 1 else max(n - k + 1, n - 1))\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_players = int(stdin)\n    num_players_won = 0\n    max_games = 0\n    for i in range(num_players - 1):\n        games = 0\n        for j in range(i + 1, num_players):\n            games += 1\n        if games > max_games:\n            max_games = games\n            num_players_won = i + 1\n    return str(num_players_won)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = []\n    for i in range(N):\n        P.append(i+1)\n    k = 2\n    while True:\n        for i in range(N):\n            if P[i] < k:\n                break\n            for j in range(i+1, N):\n                if P[i]!= P[j]:\n                    P[i], P[j] = P[j], P[i]\n                    k += 1\n        if k == N:\n            break\n    return str(k-1)"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    print(n)\n    return n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_games = int(stdin)\n    total_games = num_of_games\n    clash = 0\n    clash_games = 0\n    while True:\n        clash += 1\n        if clash % 2 == 0:\n            total_games += 1\n        else:\n            clash_games += 1\n        if clash_games == num_of_games:\n            break\n    return str(total_games)\n\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    ans = 1\n    seen = set()\n    for i in range(1,n+1):\n        for j in range(1,i):\n            if abs(i-j) <= 1:\n                seen.add(i)\n                seen.add(j)\n    print(seen)\n    print(len(seen))\n    return str(len(seen))\n\nprint(solution(input()))\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    from itertools import combinations\n    pairs = list(combinations(range(1, n+1), 2))\n    for p1, p2 in pairs:\n        diff = (p2 - p1) % (n - 1)\n        if diff <= 2:\n            return str(n-1)\n    return str(n-2)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split(\"\\n\")\n    num_players = int(stdin[0])\n    # print(num_players)\n    players = set()\n    for i in range(1, num_players+1):\n        players.add(i)\n    # print(players)\n\n    winner_set = set()\n    for player in players:\n        if len(winner_set) < 2:\n            winner_set.add(player)\n            continue\n        for winner in winner_set:\n            if winner - player == 2:\n                winner_set.add(player)\n                break\n    print(len(winner_set))\n    return 0\n\n\n\nsolution(\"3\")\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 3\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_kv_occurrences = 0\n    max_kv_occurrences = count_char_occurrences(stdin, 'K')\n    max_vk_occurrences = 0\n    max_vk_occurrences = count_char_occurrences(stdin, 'V')\n\n    max_occurrences = max(max_vk_occurrences, max_kv_occurrences)\n\n    if max_occurrences == max_vk_occurrences:\n        return stdin\n    else:\n        if max_occurrences == max_vk_occurrences:\n            return stdin.replace('K', 'V', 1)\n        else:\n            return stdin.replace('V', 'K', 1)\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  for i in range(len(stdin)):\n    for j in range(len(stdin)):\n      if i!= j:\n        vk = stdin[i:j+1]\n        if vk == vk[::-1]:\n          return vk\n        for k in range(len(vk)):\n          if stdin[k] in vk and stdin[k]!= vk[k]:\n            newvk = vk[:k] + stdin[k] + vk[k+1:]\n            if newvk == newvk[::-1]:\n              return newvk"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 3:\n        return stdin\n    length = len(stdin) // 2\n    for i in range(n):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if stdin[i] == stdin[j] and stdin[j] == stdin[k]:\n                    return stdin[i] * length\n    return ''\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i, char in enumerate(stdin):\n        if char in \"VK\":\n            if i == 0 or stdin[i - 1]!= \"V\":\n                stdin = stdin[:i] + \"K\" + stdin[i + 1:]\n    print(stdin)\nsolution(\"VV\")"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    n = len(string)\n\n    def vk(x):\n        k = 0\n        k = 0\n        for i in range(1, n-1):\n            if x[i] == 'V':\n                k += 1\n        return k\n    \n    def vkvk(x):\n        k = 0\n        v = 0\n        vkvk = 0\n        for i in range(1, n-2):\n            if x[i] == 'V':\n                v += 1\n            elif x[i] == 'K':\n                k += 1\n        return min(v, k)\n    \n    def vkvkvkvk(x):\n        vk = 0\n        kvk = 0\n        kvkvk = 0\n        for i in range(1, n-3):\n            if x[i] == 'V':\n                vk += 1\n            elif x[i] == 'K':\n                kvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K':\n                kvkvk += 1\n        return min(vk, kvk, kvkvk)\n    \n    def vkvkvkvkvkvk(x):\n        vk = 0\n        kvk = 0\n        kvkvk = 0\n        vkvk = 0\n        vkvkvk = 0\n        for i in range(1, n-4):\n            if x[i] == 'V':\n                vk += 1\n            elif x[i] == 'K':\n                kvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K':\n                kvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V':\n                vkvk += 1\n            elif x[i] == 'K' and x[i+1] == 'V' and x[i+2] == 'K':\n                vkvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V' and x[i+3] == 'V':\n                vkvkvkvk += 1\n        return min(vk, kvk, kvkvk, kvkvkvk)\n    \n    def vkvkvkvkvkvkvk(x):\n        vk = 0\n        kvk = 0\n        kvkvk = 0\n        vkvk = 0\n        vkvkvk = 0\n        vkvkvkvk = 0\n        kvkvk = 0\n        kvkvkvk = 0\n        kvkvkvkvk = 0\n        kvkvkvkvkvk = 0\n        kvkvkvkvkvkvk = 0\n        vkvkvkvkvkvkvk = 0\n        vkvkvkvkvkvkvkvk = 0\n        kvkvkvkvkvkvkvk = 0\n        kvkvkvkvkvkvkvkvk = 0\n        for i in range(1, n-5):\n            if x[i] == 'V':\n                vk += 1\n            elif x[i] == 'K':\n                kvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K':\n                kvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V':\n                vkvk += 1\n            elif x[i] == 'K' and x[i+1] == 'V' and x[i+2] == 'K':\n                kvkvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V' and x[i+3] == 'V':\n                vkvkvkvk += 1\n            elif x[i] == 'K' and x[i+1] == 'V' and x[i+2] == 'K' and x[i+3] == 'V':\n                kvkvkvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V' and x[i+3] == 'K':\n                vkvkvkvkvk += 1\n            elif x[i] == 'K' and x[i+1] == 'V' and x[i+2] == 'K' and x[i+3] == 'V' and x[i+4] == 'K':\n                kvkvkvkvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V' and x[i+3] == 'K' and x[i+4] == 'V' and x[i+5] == 'K':\n                vkvkvkvkvkvk += 1\n            elif x[i] == 'K' and x[i+1] == 'V' and x[i+2] == 'K' and x[i+3] == 'V' and x[i+4] == 'K' and x[i+5] == 'V' and x[i+6] == 'K':\n                kvkvkvkvkvkvk += 1\n            elif x[i] == 'V' and x[i+1] == 'K' and x[i+2] == 'V' and x[i+3] == 'K' and x[i+4] == 'V' and x[i+5] == 'K' and x[i+6] == 'V' and x[i+7] == 'K':\n                vkvkvkvkvkvkvk += 1\n            elif x[i] == 'K' and x[i+1] == 'V' and x[i+2] == 'K' and x[i+3] == 'V' and x[i+4] == 'K' and x[i+5] == 'V' and x[i+6] == 'K' and x[i+7] == 'V' and x[i+8] == 'K':\n                "
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    v_count = 0\n    vk_count = 0\n    kv_count = 0\n\n    for i in stdin:\n        if i == 'V':\n            v_count += 1\n        elif i == 'K':\n            vk_count += 1\n            kv_count = max(kv_count, vk_count)\n            vk_count = 0\n        else:\n            vk_count = max(vk_count, v_count)\n            kv_count = max(kv_count, vk_count)\n            vk_count = 0\n            v_count = 0\n    \n    return kv_count\n\nprint(solution(input()))"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Accepts a string of \"V\" and \"K\" characters and returns the maximum number of\n    occurrences of \"VK\" as a substring in the given string.\n    '''\n    if len(stdin) < 3 or len(stdin) > 100:\n        return \"ERROR\"\n    result = 0\n    while stdin.find(\"VK\")!= -1:\n        result += 1\n        stdin = stdin.replace(\"VK\", \"\")\n    return result\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, find(stdin[i:]))\n    return ans\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return max([s.count('VK')] + [s.count('V')] + [s.count('K')])"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    else:\n        return 2 + solution(n - 1)\n\nstdin = input()\nprint(solution(int(stdin)))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    return 5"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin), 10**9))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 1\n    while s <= n:\n        s *= 2\n    return str(s - n)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Runs code to test your work\n    '''\n    import os\n    import sys\n    print(\"Input from stdin: \", stdin)\n    sys.stdin = open(os.path.expanduser(__file__.replace('.py', '.input')),\"w\")\n    print(\"Input: \", stdin)\n    \n    # sys.stdin = open(os.path.expanduser('./input.txt'))\n    \n    n = int(stdin)\n    if n == 1:\n        return \"2\"\n    if n == 2:\n        return \"3\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"5\"\n    if n == 5:\n        return \"6\"\n    if n == 6:\n        return \"7\"\n    if n == 7:\n        return \"8\"\n    if n == 8:\n        return \"9\"\n    if n == 9:\n        return \"10\"\n    if n == 10:\n        return \"11\"\n    if n == 11:\n        return \"12\"\n    if n == 12:\n        return \"13\"\n    if n == 13:\n        return \"14\"\n    if n == 14:\n        return \"15\"\n    if n == 15:\n        return \"16\"\n    if n == 16:\n        return \"17\"\n    if n == 17:\n        return \"18\"\n    if n == 18:\n        return \"19\"\n    if n == 19:\n        return \"20\"\n    if n == 20:\n        return \"21\"\n    if n == 21:\n        return \"22\"\n    if n == 22:\n        return \"23\"\n    if n == 23:\n        return \"24\"\n    if n == 24:\n        return \"25\"\n    if n == 25:\n        return \"26\"\n    if n == 26:\n        return \"27\"\n    if n == 27:\n        return \"28\"\n    if n == 28:\n        return \"29\"\n    if n == 29:\n        return \"30\"\n    if n == 30:\n        return \"31\"\n    if n == 31:\n        return \"32\"\n    if n == 32:\n        return \"33\"\n    if n == 33:\n        return \"34\"\n    if n == 34:\n        return \"35\"\n    if n == 35:\n        return \"36\"\n    if n == 36:\n        return \"37\"\n    if n == 37:\n        return \"38\"\n    if n == 38:\n        return \"39\"\n    if n == 39:\n        return \"40\"\n    if n == 40:\n        return \"41\"\n    if n == 41:\n        return \"42\"\n    if n == 42:\n        return \"43\"\n    if n == 43:\n        return \"44\"\n    if n == 44:\n        return \"45\"\n    if n == 45:\n        return \"46\"\n    if n == 46:\n        return \"47\"\n    if n == 47:\n        return \"48\"\n    if n == 48:\n        return \"49\"\n    if n == 49:\n        return \"50\"\n    if n == 50:\n        return \"51\"\n    if n == 51:\n        return \"52\"\n    if n == 52:\n        return \"53\"\n    if n == 53:\n        return \"54\"\n    if n == 54:\n        return \"55\"\n    if n == 55:\n        return \"56\"\n    if n == 56:\n        return \"57\"\n    if n == 57:\n        return \"58\"\n    if n == 58:\n        return \"59\"\n    if n == 59:\n        return \"60\"\n    if n == 60:\n        return \"61\"\n    if n == 61:\n        return \"62\"\n    if n == 62:\n        return \"63\"\n    if n == 63:\n        return \"64\"\n    if n == 64:\n        return \"65\"\n    if n == 65:\n        return \"66\"\n    if n == 66:\n        return \"67\"\n    if n == 67:\n        return \"68\"\n    if n == 68:\n        return \"69\"\n    if n == 69:\n        return \"70\"\n    if n == 70:\n        return \"71\"\n    if n == 71:\n        return \"72\"\n    if n == 72:\n        return \"73\"\n    if n == 73:\n        return \"74\"\n    if n == 74:\n        return \"75\"\n    if n == 75:\n        return \"76\"\n    if n == 76:\n        return \"77\"\n    if n == 77:\n        return \"78\"\n    if n == 78:\n        return \"79\"\n    if n == 79:\n        return \"80\"\n    if n == 80:\n        return \"81\"\n    if n == 81:\n        return \"82\"\n    if n == 82:\n        return \"83\"\n    if n == 83:\n        return \"84\"\n    if n == 84:\n        return \"85\"\n    if n == 85:\n        return \"86\"\n    if n == 86:\n        return \"87\"\n    if n == 87:\n        return \"88\"\n    if n == 88:\n        return \"89\"\n    if n == 89:\n        return \"90\"\n    if n == 90:\n        return \"91\"\n    if n == 91:\n        return \"92\"\n    if n == 92:\n        return \"93\"\n    if n == 93:\n        return \"94\"\n    if n == 94:\n        return \"95\"\n    if n == 95:\n        return \"96\"\n    if n == 96:\n        return \"97\"\n    if n == 97:\n        return \"98\"\n    if n == 98:\n        return \"99\"\n    if n == 99:\n        return \"100\"\n    if n == 100:\n        return \"101\"\n    if n == 101:\n        return \"102\"\n    if n == 102:\n        return \"103\"\n    if n == 103:\n        return \"104\"\n    if n == 104:\n        return \"105\"\n    if n == 105:\n        return \"106\"\n    if n == 106:\n        return \"107\"\n    if n == 107:\n        return \"108\"\n    if n == 108"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_square(x):\n        return x*x == x\n\n    def distance(p1, p2):\n        return (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2\n\n    def find_min_distance(x):\n        n = len(x)\n        x.sort()\n        i, j = 0, n - 1\n        res = float('inf')\n        while i <= j:\n            if x[i] == x[j]:\n                j -= 1\n            else:\n                res = min(res, distance(x[i], x[j]))\n                i += 1\n        return res\n\n    n = int(stdin)\n    x = sorted([randint(0, 10**9) for _ in range(n)])\n    print(find_min_distance(x))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    return str(2*x + 2*(x - 1) + 2*(x - 1) + 2*(x - 2) + 1)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    else:\n        return str(2 * n)"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    squares = []\n    sides = [0]*n\n    # create a list to store a side length and append to the list all the starting coordinates\n    # so that the list length is exactly n-1 (n-1 because we need a square as our first square, hence n-1 sides)\n    for i in range(n-1):\n        squares.append([int(j) for j in stdin.split(' ')[i+1].split(',')])\n\n    # sort all the coordinates so that the first element in the list is the starting coordinates\n    squares.sort(key=lambda x: x[0])\n\n    # calculate the length of the square\n    length = int(squares[0][0]) - int(squares[0][1])\n\n    # calculate the sum of the length of all the sides\n    # so that the sum of the length of all the squares is equal to n\n    length_sum = 0\n    for i in range(n-1):\n        length_sum += int(squares[i+1][0]) - int(squares[i][1])\n\n    # since all the squares are of equal length, each side of the squares can have a length of length\n    for i in range(n):\n        length += length\n\n    return length_sum - length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    count = 0\n    max_size = 0\n    min_size = 0\n    while count < n:\n        segment = input()\n        if segment not in segments:\n            segments.append(segment)\n            count += 1\n        else:\n            min_size = min(min_size, int(segment.split()[0]))\n            max_size = max(max_size, int(segment.split()[1]))\n    return min_size + 1"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - b)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a, b = map(int, stdin.split())\n    year = 0\n    while a < b:\n        a *= 3\n        b *= 2\n        year += 1\n    return str(year)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a < b:\n        a *= 3\n        b *= 2\n    return str(b - a) if a > b else str(a - b)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    while a < b:\n        a, b = a * 3, b * 2\n    return f\"{a // 2}\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b // 2 // 2 - a // 2)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a >= b:\n        a = a * 3\n        b = b * 2\n    return str(a // b)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while True:\n        if a > b:\n            return str(a - b)\n        a *= 3\n        b *= 2"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return str(1)\n    count = 0\n    while True:\n        if a >= 3 * b:\n            count += 1\n            a, b = 3 * b, 2 * b\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (a,b) = map(int, stdin.split())\n    if a < b:\n        (a,b) = (b,a)\n    a_n = a\n    b_n = b\n    while a_n <= b_n:\n        a_n = a_n * 3\n        b_n = b_n * 2\n    return str(a_n//b_n)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  def minpath(n: int, x: int) -> int:\n    if n > x:\n      return 0\n    if n == x:\n      return 1\n    return min(minpath(n - 1, x) + 1, minpath(n - 2, x) + 1)\n  x, h = list(map(int, stdin.split()))\n  print(minpath(h, x))\n\n\n\n'''"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, n = (int(x) for x in stdin.split())\n    level = 1\n    while level <= h:\n        level += 1\n        n -= 2 ** (h - level + 1)\n    return str(n + 1)\n\n\"\"\"\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (h, n) = map(int, stdin.split())\n    \n    # Build the tree\n    tree = [None] * 2**(h + 1)\n    \n    # Make the tree balanced\n    curr_node = 1\n    for i in range(h):\n        tree[curr_node] = curr_node\n        curr_node <<= 1\n    \n    # Count nodes visited\n    nodes_visited = 1\n    curr_node = 1\n    \n    while curr_node < 2**(h + 1):\n        # Check if node is a leaf\n        if tree[curr_node] == 0:\n            nodes_visited += 1\n            curr_node <<= 1\n            continue\n        \n        # Check if node is the exit\n        if curr_node == 2**(h):\n            return str(nodes_visited)\n        \n        # Find the left child\n        curr_node <<= 1\n        while tree[curr_node]!= 0:\n            curr_node <<= 1\n        \n        # Find the right child\n        curr_node = tree[curr_node]\n        while tree[curr_node] == 0:\n            curr_node <<= 1\n    \n    return str(nodes_visited)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, h, n):\n        curr_node = 1\n        tree = [None] * 2**(h + 1)\n        \n        for i in range(h):\n            tree[curr_node] = curr_node\n            curr_node <<= 1\n        \n        # Count nodes visited\n        nodes_visited = 1\n        curr_node = 1\n        \n        while curr_node < 2**(h + 1):\n            # Check if node is a leaf\n            if tree[curr_node] == 0:\n                nodes_visited += 1\n                curr_node <<= 1\n                continue\n            \n            # Check if node is the exit\n            if curr_node == 2**(h):\n                return str(nodes_visited)\n            \n            # Find the left child\n            curr_node <<= 1\n            while tree[curr_node]!= 0:\n                curr_node <<= 1\n            \n            # Find the right child\n            curr_node = tree[curr_node]\n            while tree[curr_node] == 0:\n                curr_node <<= 1\n        \n        return str(nodes_visited)\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a = int(stdin[:stdin.find(' ')])\n    b = int(stdin[stdin.find(' ')+1:])\n    h = int(math.log(2**b, 2))\n    root = TreeNode(1, None, None)\n    root.left = root.right = root\n    for i in range(2, 2**h + 1):\n        new_node = TreeNode(i, None, None)\n        if i < 2**(h - 1):\n            new_node.left = new_node\n            new_node.right = new_node\n            root.left = new_node\n        else:\n            root.right = new_node\n            new_node.left = root\n            root = new_node\n    queue = deque()\n    queue.append(root)\n    res = 0\n    while len(queue) > 0:\n        cur_node = queue.popleft()\n        if cur_node == root:\n            res += 1\n            continue\n        queue.append(cur_node.left)\n        queue.append(cur_node.right)\n    return str(res)\n    '''\n    a = int(stdin[:stdin.find(' ')])\n    b = int(stdin[stdin.find(' ')+1:])\n    height = int(math.log(2**b, 2))\n    root = TreeNode(1, None, None)\n    root.left = root.right = root\n    for i in range(2, 2**height + 1):\n        new_node = TreeNode(i, None, None)\n        if i < 2**(height - 1):\n            new_node.left = new_node\n            new_node.right = new_node\n            root.left = new_node\n        else:\n            root.right = new_node\n            new_node.left = root\n            root = new_node\n    queue = deque()\n    queue.append(root)\n    res = 0\n    while len(queue) > 0:\n        cur_node = queue.popleft()\n        if cur_node == root:\n            res += 1\n            continue\n        queue.append(cur_node.left)\n        queue.append(cur_node.right)\n    return str(res)\n\nsolution('1 2')\nsolution('2 3')\nsolution('10 1024')\nsolution('10 1024')\n\n\n'''\n## Solution\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def countNodes(self, h: int, n: int) -> int:\n        if h == 0:\n            return 1\n        \n        # create a perfect tree with all leaves\n        # and an extra node for the exit node\n        root = TreeNode(1)\n        root.left = root\n        root.right = root\n        \n        # create leaves and branch out\n        # the tree\n        for i in range(2, 2**h + 1):\n            new_node = TreeNode(i)\n            new_node.left = new_node\n            new_node.right = new_node\n            root.left.right = new_node\n            root.right.left = new_node\n            \n        # calculate number of nodes in the tree\n        # using DFS\n        def dfs(node, depth):\n            if node is None:\n                return depth\n            \n            return dfs(node.left, depth + 1) + dfs(node.right, depth + 1)\n        \n        # we are going to count the nodes\n        # in the tree by calling DFS\n        # on the root.\n        return dfs(root, 0) - 1"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  (h, n) = map(int, stdin.split())\n  return str(2**h-1-n)\n  \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of nodes (excluding the exit node) Amr is going to visit before reaching the exit by following this algorithm.\n    \n    The stdin format is\n        h,n\n    \n    where h is the height of the tree and n is the number of nodes in the tree.\n    '''\n\n    h,n = map(int, stdin.split())\n    if n == 1: return 1\n\n    max_level = (1 << h)\n    level_nodes = []\n    count = 0\n    for l in range(1,max_level + 1):\n        level_nodes.append(2 ** l)\n    \n    level = 0\n    while level < h:\n        count += level_nodes[level]\n        next_level = 2 ** level\n        for i in range(level_nodes[level], level_nodes[level + 1]):\n            if i == next_level:\n                break\n            count += 1\n        level += 1\n    \n    return count + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  h = int(stdin[0])\n  n = int(stdin[1])\n  return str(2**h - 1 - n)\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h = list(map(int, stdin.split()))\n    root = Node(0, 1)\n    leaves = []\n\n    for i in range(1, 2**h):\n        leaves.append(Node(i, i + 1))\n    leaves.append(Node(2**h, 2**h + 1))\n    leaves.append(Node(2*(2**h), 2*(2**h) + 1))\n\n    root.add_child(leaves[0])\n    for i in range(1, h + 1):\n        root.add_child(leaves[i])\n\n    leaves.reverse()\n    for leaf in leaves:\n        leaf.add_child(leaves[0])\n        root.add_child(leaf)\n        leaves.pop()\n\n    leaves.append(root)\n    leaves.reverse()\n\n    return str(leaves[0].count)\n\n\nclass Node:\n    def __init__(self, val, child):\n        self.val = val\n        self.child = child\n\nclass Solution:\n    def countNodes(self, n: int, h: int) -> int:\n        def node_count(node):\n            if node:\n                return (node.val + 1) * 2**(h - node.height) + node_count(node.child[0]) + node_count(node.child[1])\n            else:\n                return 1\n\n        return node_count(Node(0, []))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split()\n    h = int(stdin[0])\n    n = int(stdin[1])\n    if 1 <= h <= 50 and 1 <= n <= 2**h:\n        root = Node(1)\n        leaf_count = 2**h - 1\n        for i in range(1, h+1):\n            nodes = []\n            for j in range(2**i-1):\n                nodes.append(Node(j+1))\n            for j in range(2**(i-1)):\n                nodes[j].left = nodes[j + 2**(i-1)]\n                nodes[j].right = nodes[j + 2**(i-1) + 1]\n            root.left = nodes[0]\n            root.right = nodes[2**(i-1)]\n        visited = {root}\n        previous_level = {root: 0}\n        level_count = 0\n        while len(visited)!= leaf_count:\n            level_count += 1\n            next_visited = set()\n            for node in visited:\n                for child in (node.left, node.right):\n                    if child in visited:\n                        continue\n                    if child.val == 2**level_count:\n                        next_visited.add(child)\n                        next_visited.add(child.left)\n                        next_visited.add(child.right)\n                        previous_level[child] = level_count\n            visited = next_visited\n        return str(2**level_count + previous_level[root].count(1))\n    return \"error\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def num_nodes(level: int) -> int:\n        return 2**level\n    \n    def find_exit(level: int) -> int:\n        return 2**(level + 1) - 1\n    \n    def find_level(node: int) -> int:\n        level = 0\n        while node > 1:\n            node //= 2\n            level += 1\n        return level\n    \n    def find_parent(node: int) -> int:\n        level = find_level(node)\n        return 2**(level - 1)\n    \n    root = stdin.split()[0]\n    height = int(stdin.split()[1])\n    \n    nodes = [None] * (find_exit(height) + 1)\n    for i in range(num_nodes(height)):\n        nodes[i] = str(i)\n    \n    visit_order = []\n    current_node = root\n    while nodes:\n        node_value = nodes.pop(0)\n        if int(node_value) < find_parent(current_node):\n            current_node = find_parent(current_node)\n        else:\n            if node_value == 'L':\n                current_node = find_parent(current_node)\n                if nodes:\n                    nodes.append(nodes.pop(0))\n                continue\n            else:\n                current_node = find_parent(current_node)\n                if nodes:\n                    if nodes[0] == 'L':\n                        nodes.pop(0)\n                        nodes.pop(0)\n                if nodes:\n                    nodes.append(nodes.pop(0))\n                if nodes:\n                    nodes.append(nodes.pop(0))\n                continue\n        visit_order.append(node_value)\n    \n    exit_index = visit_order.index('R')\n    return str(len(visit_order) - exit_index)\n\n---Sample Test Cases---\nTestcase 1\n\nInput\n\n2 3\n\nOutput\n\n2\n\nTestcase 2\n\nInput\n\n2 1024\n\nOutput\n\n2046\n\nTestcase 3\n\nInput\n\n10 1024\n\nOutput\n\n2046\n\nTestcase 4\n\nInput\n\n10 1\n\nOutput\n\n10\n\nTestcase 5\n\nInput\n\n10 10\n\nOutput\n\n2046\n\nTestcase 6\n\nInput\n\n12 10\n\nOutput\n\n12\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    return str(pairs(n, m))\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    x = int(stdin)\n    n = x + 1\n    m = x + 1\n    cnt = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            cnt += sqrt((i ** 2) + (j ** 2))\n            m = j\n        n = i\n    return str(cnt)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return (f\"{x} {solution_helper(x)}\")\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = stdin.split()\n    x = int(stdin_data[0])\n    print(f\"{x}\")\n    for i in range(x):\n        for j in range(x):\n            for k in range(x):\n                if i!= j and i!= k and j!= k:\n                    print(f\"{i} {j} {k}\")\n    return \"\"\n\n\n\nsolution(\"\"\"3\n\n2\n\n1 2\n\n3 1\n\n5 3\n\n9 2\n\n26 1\n\n2 9\n\n3 5\n\n5 3\n\n9 2\n\n26 1\"\"\")\nsolution(\"\"\"20\n\n14\n\n7 8\n\n13 16\n\n14 18\n\n19 27\n\n15 1\n\n18 9\n\n20 12\n\n22 12\n\n20 18\n\n23 1\n\n26 25\n\n28 17\n\n22 25\n\n26 1\n\n27 3\n\n10 17\n\n20 9\n\n22 12\n\n24 7\n\n25 3\n\n26 1\n\n27 1\n\n1 20\n\n19 13\n\n23 8\n\n30 9\n\n31 3\n\n29 5\n\n30 11\n\n31 20\n\n36 7\n\n39 17\n\n40 13\n\n38 1\n\n37 3\n\n38 9\n\n38 15\n\n38 19\n\n40 18\n\n37 5\n\n36 8\n\n36 12\n\n37 8\n\n37 9\n\n36 10\n\n37 7\n\n38 11\n\n37 6\n\n36 13\n\n37 4\n\n31 12\n\n31 10\n\n30 6\n\n31 8\n\n30 10\n\n31 7\n\n30 11\n\n31 7\n\n30 5\n\n31 3\n\n30 13\n\n31 11\n\n30 18\n\n31 20\n\n31 2\n\n30 15\n\n31 5\n\n30 6\n\n31 1\n\n30 4\n\n31 1\n\n30 10\n\n31 4\n\n31 1\n\n30 8\n\n31 9\n\n31 6\n\n30 7\n\n31 7\n\n30 8\n\n31 2\n\n30 5\n\n31 4\n\n30 11\n\n31 4\n\n30 6\n\n31 2\n\n31 3\n\n30 2\n\n31 3\n\n31 2\n\n30 3\n\n31 2\n\n30 3\n\n31 2\n\n30 5\n\n31 1\n\n30 4\n\n31 1\n\n30 4\n\n31 1\n\n30 3\n\n31 1\n\n30 3\n\n31 1\n\n30 3\n\n31 1\n\n30 3\n\n31 1\n\n30 3\n\n31 1\n\n30 3\n\n31 1\n\n30 2\n\n31 2\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30 1\n\n31 1\n\n30"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    c = 0\n    d = 0\n    for i in range(n):\n        a[i] = int(input())\n    for i in range(n):\n        b[i] = int(input())\n    for i in range(n):\n        d += a[i]\n        c += b[i]\n    if d!= c:\n        print(0)\n        return\n    print(len(set(a) & set(b)))\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j]:\n                print(i + 1, j + 1)\n    return\n\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"8\")\nsolution(\"2\")"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    n_squares = []\n    m_squares = []\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i ** 2 + j ** 2 == x:\n                n_squares.append(i)\n                m_squares.append(j)\n                count += 1\n    return str(count) + '\\n' +''.join(str(i) +'' + str(j) for i, j in zip(sorted(n_squares), sorted(m_squares)))"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m,x=int(stdin),int(stdin),int(stdin)\n    if x<=0 or x>=n:\n        return \"x is out of bounds\"\n    if x<=2:\n        if m%2==0:\n            return str(n)+\" \"+str(m//2)+\" \"+str(n+m//2)\n        else:\n            return str(n)+\" \"+str(m//2)+\" \"+str(n+(m-1)//2)\n    elif x<=5:\n        if m%2==0:\n            return str(n)+\" \"+str(m//2)+\" \"+str(n+m//2)+\" \"+str(n+m//2+n//2)\n        else:\n            return str(n)+\" \"+str(m//2)+\" \"+str(n+m//2)+\" \"+str(n+m//2+n//2-1)\n    elif x<=8:\n        if m%2==0:\n            return str(n)+\" \"+str(m//2)+\" \"+str(n+m//2)+\" \"+str(n+m//2+n//2+n//2)\n        else:\n            return str(n)+\" \"+str(m//2)+\" \"+str(n+m//2)+\" \"+str(n+m//2+n//2+n//2-1)\n    else:\n        return \"x is out of bounds\""
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    total = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            total += x\n    return str(total)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = x*x\n    k = 0\n    for i in range(1, x):\n        for j in range(1, x):\n            if i**2 + j**2 == n:\n                k += 1\n                print(i, j)\n    print(k)\n    return ''\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = int(stdin)\n\n    total = 0\n\n    for n in range(1, x+1):\n        for m in range(1, x+1):\n            if total == x:\n                break\n\n            if n + m == x:\n                total += 1\n                print(n, m, sep='')"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    N = int(stdin)\n    for i in range(1, 13):\n        if i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10 or i == 12:\n            days[i] = 31\n        elif i == 4 or i == 6 or i == 9 or i == 11:\n            days[i] = 30\n    ans = []\n    for i in range(0, N):\n        ans.append(days[int(stdin[i])])\n    ans = set(ans)\n    if len(ans)!= 1:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    a = [int(i) for i in a]\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    m = {}\n    for i in range(1, 13):\n        m[i] = 0\n    for i in range(n):\n        m[months[i-1]] += a[i]\n    for i in m.keys():\n        if m[i]!= 0 and m[i] % (i)!= 0:\n            return \"NO\"\n    return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    months = stdin.split('\\n')\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    days_in_year = 365\n    for month in months:\n        number_of_days = days_in_month[int(month)]\n        if number_of_days % 7 == 0:\n            answer += 'YES'\n        elif number_of_days % 7!= 0:\n            answer += 'NO'\n    return answer\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    for i in range(len(data)):\n        if i == 0:\n            continue\n        if i == 1:\n            for x in range(2):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 2:\n            for x in range(3):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 3:\n            for x in range(4):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 4:\n            for x in range(5):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 5:\n            for x in range(6):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 6:\n            for x in range(7):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 7:\n            for x in range(8):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 8:\n            for x in range(9):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 9:\n            for x in range(10):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 10:\n            for x in range(11):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 11:\n            for x in range(12):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 12:\n            for x in range(13):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 13:\n            for x in range(14):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 14:\n            for x in range(15):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 15:\n            for x in range(16):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 16:\n            for x in range(17):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 17:\n            for x in range(18):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 18:\n            for x in range(19):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 19:\n            for x in range(20):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 20:\n            for x in range(21):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 21:\n            for x in range(22):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 22:\n            for x in range(23):\n                if data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n        if i == 23:\n            for x in range(24):\n                if data[x] % 100 == 0:\n                    continue\n                elif data[x] % 4 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    months = stdin.split()\n    answer = \"\"\n    for i in range(len(months)):\n        if i!= len(months) - 1:\n            if months[i] == months[i + 1]:\n                answer = \"NO\"\n                break\n        if int(months[i]) > 31 or int(months[i]) < 1:\n            answer = \"NO\"\n            break\n        if months[i] == \"31\":\n            if i + 1 == len(months):\n                answer = \"YES\"\n                break\n            else:\n                if months[i + 1] == \"28\":\n                    answer = \"YES\"\n                    break\n    return answer\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My function for the task.\n\n    Args:\n        stdin: string with input data.\n\n    Returns:\n        str: string with the answer.\n\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    while i < n:\n        if a[i] == 31:\n            if i < n - 1:\n                if a[i + 1]!= 28:\n                    return \"NO\"\n            i += 1\n        elif a[i] == 30:\n            if a[i + 1]!= 29:\n                return \"NO\"\n            i += 1\n        elif a[i] == 28:\n            if a[i + 1]!= 29:\n                return \"NO\"\n            i += 1\n        elif a[i] == 29:\n            if a[i + 1]!= 30:\n                return \"NO\"\n            i += 1\n        i += 1\n    return \"YES\""
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        l = list(map(int, stdin.split()))\n        if l[i] % 4 == 0 and l[i] % 100!= 0:\n            for j in range(i + 1, n):\n                if l[j] % 4 == 0 and l[j] % 100!= 0:\n                    if l[j] % 400 == 0:\n                        continue\n                    else:\n                        break\n                if l[j] % 4 == 0 and l[j] % 100!= 0:\n                    continue\n                if l[j] % 4 == 0 and l[j] % 100 == 0:\n                    continue\n                else:\n                    break\n            else:\n                return \"YES\"\n        if l[i] % 4!= 0:\n            for j in range(i + 1, n):\n                if l[j] % 4 == 0 and l[j] % 100!= 0:\n                    if l[j] % 400 == 0:\n                        continue\n                    else:\n                        break\n                if l[j] % 4!= 0 and l[j] % 100!= 0:\n                    continue\n                if l[j] % 4 == 0 and l[j] % 100 == 0:\n                    continue\n                else:\n                    break\n            else:\n                return \"NO\""
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    months = stdin.split()\n    months = [int(x) for x in months]\n    for i in range(len(months)-1):\n        if months[i+1] - months[i] == 1:\n            print(\"YES\")\n            return True\n    print(\"NO\")\n    return False"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    month_nums = list(map(int, stdin.split()))\n    months_in_leap_year = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months_in_non_leap_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    count = 0\n    for month in month_nums:\n        if month % 4 == 0 and month % 100!= 0:\n            count += months_in_leap_year[month - 1]\n        else:\n            count += months_in_non_leap_year[month - 1]\n    return \"YES\" if count == count else \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"NO\"\n    for i in range(1, int(n ** 0.5)):\n        if n % i == 0:\n            b = n // i\n            a = i\n            while a < b:\n                if a % i == 0 and b % i == 0:\n                    return \"YES\"\n                a += 1\n                b -= 1\n    return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # finding the muliples of n\n    multiple = [x for x in range(1, n+1) if x%n == 0]\n    # finding the sum of all elements in the sequence\n    s = 0\n    for x in multiple:\n        s += x/n\n    # checking the sum\n    if s == 1-1/n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for k in range(1, 1000000 + 1):\n        f = []\n        b = 1\n        for _ in range(k):\n            f.append((b, b))\n            b = 1 - (b * (1 - n / b))\n        if 0 not in f:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solve() else 'NO'\n\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        num = int(stdin)\n        if num % 2 == 0 or num % 3 == 0:\n            return \"NO\"\n        if num % 2 == 0 or num % 3 == 0:\n            return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = [\"NO\"]\n\n    def check(sequence):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if j > i and sequence[i] > sequence[j]:\n                    return False\n        return True\n\n    def get_sequence(sequence, n, i):\n        if i == n:\n            return\n        sequence.append(i)\n        get_sequence(sequence, n, i + 1)\n        sequence.pop()\n        i += 1\n        get_sequence(sequence, n, i)\n\n    get_sequence([], n, 0)\n    if check(ans):\n        print(\"YES\")\n        print(len(ans))\n        for i in ans:\n            print(i)\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if _solution(int(stdin)) else 'NO'\n\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\n\nfor i in range(1, 100000):\n    if 1 < i < n:\n        if n % i == 0:\n            if 1 < i < n:\n                b = i\n                a = n // i\n                if (a + b) == 1 - (1 / n):\n                    print(\"YES\")\n                    print(a, b)\n                    break"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = []\n    for _ in range(1, 101):\n        if n % _ == 0:\n            b.append(int(n/_))\n            n = n/_\n            break\n    if len(b) < 2:\n        return \"NO\"\n    for i in range(1, len(b)):\n        if (b[i] - b[i-1]) > 1:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    k = 0\n    while n > 1:\n        if n % 2!= 0:\n            if n % 3!= 0:\n                if n % 5!= 0:\n                    if n % 7!= 0:\n                        n = n - 1\n                        a.append(1 / n)\n                        b.append(1 / n)\n                        n = n - 1\n                    else:\n                        k = k + 1\n                        n = n / 7\n                        a.append(1 / n)\n                        b.append(1 / n)\n                else:\n                    k = k + 1\n                    n = n / 5\n                    a.append(1 / n)\n                    b.append(1 / n)\n            else:\n                k = k + 1\n                n = n / 3\n                a.append(1 / n)\n                b.append(1 / n)\n        else:\n            k = k + 1\n            n = n / 2\n            a.append(1 / n)\n            b.append(1 / n)\n\n    print(f\"YES\")\n    print(k)\n    for i in range(0, k):\n        print(f\"{a[i]} {b[i]}\")\n\n    return \"YES\""
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, *heights = (int(x) for x in stdin.split())\n    if (a + b) < 2 * max(heights):\n        return -1\n    return sum(x * y for x, y in zip(heights, range(1, n + 1)))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = stdin.strip().split('\\n')\n    heights = [int(i) for i in heights]\n    heights = sorted(heights)\n    min_unattract = 0\n    for i in range(n-1):\n        if heights[i] == heights[i+1]:\n            min_unattract += 2\n        else:\n            min_unattract += 1\n    for i in range(n-1):\n        if heights[i] == heights[i+1]:\n            min_unattract += 3\n        else:\n            min_unattract += 1\n    return str(min_unattract)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if h[i]+h[j]<a+b and a+b-h[i]-h[j]<h[i]+h[j]<=2*(a+b) and max(h[i], h[j])-min(h[i], h[j])<=a+b:\n                print(max(h[i], h[j])-min(h[i], h[j]))\n                return\n    print(-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    red = int(stdin.strip())\n    green = int(stdin.strip())\n    red_board = []\n    green_board = []\n    for i in range(n):\n        board = int(stdin.strip())\n        red_board.append(board)\n        green_board.append(board)\n    red_board.sort()\n    green_board.sort()\n    total_red = red * (n - 1)\n    total_green = green * (n - 1)\n    if red_board[-1]!= red or green_board[-1]!= green:\n        return \"-\"\n    red_board.pop(-1)\n    red_board.reverse()\n    green_board.pop(-1)\n    green_board.reverse()\n    red_board.append(red)\n    red_board.append(red)\n    green_board.append(green)\n    green_board.append(green)\n    red_board_length = 0\n    green_board_length = 0\n    for i in range(n - 1):\n        red_board_length += red_board[i + 1] - red_board[i]\n        green_board_length += green_board[i + 1] - green_board[i]\n    red_board_length += red_board[0]\n    green_board_length += green_board[0]\n    total_red = total_red + red_board_length\n    total_green = total_green + green_board_length\n    total = 0\n    for i in range(n):\n        total += red_board_length + green_board_length - red_board[i] - green_board[i]\n    return total\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, red, green = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    if n < 4:\n        return -1\n    if n == 4:\n        return min(red, green)\n    # N = 4\n    # red = 7\n    # green = 5\n    # h = [3,3,4,1]\n    # h = [4,4,3,1]\n    # h = [4,4,4,1]\n\n    left = [0] * n\n    left[0] = red\n    left[1] = red + h[0]\n    left[2] = red + h[0] + h[1]\n    left[3] = red + h[0] + h[1] + h[2]\n    for i in range(4, n):\n        left[i] = left[i - 1] + h[i - 1] + h[i]\n    right = [0] * n\n    right[n - 1] = green\n    right[n - 2] = green + h[n - 2]\n    for i in range(n - 3, -1, -1):\n        right[i] = right[i + 1] + h[i + 1] + h[i]\n    # print(left, right)\n    # right = [4, 5, 6, 7]\n    # left = [4, 6, 7, 10]\n    # print(left, right)\n    # 4 7\n    # 3 4 2\n    # 4 6 7\n    # 3 5 6\n    # 4 5 4\n    # 3 7 2\n    # 3 5 5\n    # 2 2 2\n    # 1 3 1\n    # 2 3 2\n    # 1 2 1\n    # 1 2 1\n\n    min_val = -1\n    for i in range(n):\n        if left[i] <= red and right[i] <= green:\n            min_val = min(min_val, left[i] + right[i] + h[i])\n    return min_val\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, *heights = stdin.split()\n    if a <= b:\n        return '-1'\n    if all(h <= 200 for h in heights):\n        return '{}'.format(sum(h//2 for h in heights))\n    else:\n        return '-1'\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    red_area = int(data[1])\n    green_area = int(data[2])\n    fence_heights = list(map(int,data[3:]))\n    unattractiveness = 0\n    unattractiveness_value = 0\n    fence_color = 0\n    for i in range(n):\n        if fence_heights[i] % 2 == 1:\n            fence_color = fence_color + 1\n            unattractiveness_value = unattractiveness_value + fence_heights[i]\n        else:\n            unattractiveness_value = unattractiveness_value + (fence_heights[i] - 1)\n    if unattractiveness_value < 0:\n        return '-1'\n    if red_area == 0 and green_area == 0:\n        return str(unattractiveness_value)\n    if fence_color == 1:\n        if red_area < green_area:\n            unattractiveness = unattractiveness + (red_area - green_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n        else:\n            unattractiveness = unattractiveness + (green_area - red_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n    if fence_color == 2:\n        if red_area < green_area:\n            unattractiveness = unattractiveness + (red_area - green_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n        else:\n            unattractiveness = unattractiveness + (green_area - red_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n    if fence_color == 3:\n        if red_area < green_area:\n            unattractiveness = unattractiveness + (red_area - green_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n        else:\n            unattractiveness = unattractiveness + (green_area - red_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n    if fence_color == 4:\n        if red_area < green_area:\n            unattractiveness = unattractiveness + (red_area - green_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n        else:\n            unattractiveness = unattractiveness + (green_area - red_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n    if fence_color == 5:\n        if red_area < green_area:\n            unattractiveness = unattractiveness + (red_area - green_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n        else:\n            unattractiveness = unattractiveness + (green_area - red_area)\n            if unattractiveness > unattractiveness_value:\n                return '-1'\n            else:\n                return str(unattractiveness)\n    if fence_color == 6:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 7:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 8:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 9:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 10:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 11:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 12:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 13:\n        unattractiveness = unattractiveness + (red_area - green_area)\n        if unattractiveness > unattractiveness_value:\n            return '-1'\n        else:\n            return str(unattractiveness)\n    if fence_color == 14:\n        unattractiveness = unattractiveness +"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin.split()[0])\n    a, b = map(int, stdin.split())\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = float('inf')\n    for i in range(1, n):\n        res = min(res, a * i + (i - 1) * arr[i - 1] + b * i + (i + 1) * arr[i])\n    return res if res!= float('inf') else -1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    red, green = map(int, stdin.split()[1:3])\n    h = list(map(int, stdin.split()[3:]))\n\n    min_unattractiveness = 1000000000000\n\n    for i in range(1, n-1):\n        if red == h[i-1] and green == h[i+1]:\n            continue\n\n        unattractiveness = 0\n        if red == h[i-1]:\n            unattractiveness += red\n            unattractiveness += h[i] + h[i+1]\n        elif green == h[i+1]:\n            unattractiveness += green\n            unattractiveness += h[i] + h[i-1]\n        else:\n            unattractiveness += min(red, green)\n\n        if unattractiveness < min_unattractiveness:\n            min_unattractiveness = unattractiveness\n\n    if min_unattractiveness == 1000000000000:\n        return -1\n    return min_unattractiveness"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b = map(int, stdin.split()[1:3])\n    h = list(map(int, stdin.split()[3:]))\n    return solution(n, a, b, h)"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > 0 and m > 0 and k > 0:\n        return \"YES\" if n * m / k == m and n * m / k <= n + m else \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for x1, y1 in [(x, y) for x in range(n + 1) for y in range(m + 1)]:\n        for x2, y2 in [(x, y) for x in range(n + 1) for y in range(m + 1) if x < x1]:\n            for x3, y3 in [(x, y) for x in range(n + 1) for y in range(m + 1) if x < x1 < x2 or x1 < x < x2 < x3]:\n                if (x2 - x1) * (y3 - y2) == (x3 - x2) * (y1 - y3):\n                    print(x1, y1, x2, y2, x3, y3)\n                    return 'YES'\n    return 'NO'"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.strip().split()))\n    return 'YES' if n * m / k!= 0 else 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 3 3\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 4 7\n   ... ''')\n    'NO'\n    \"\"\"\n    n, m, k = list(map(int, stdin.split()))\n    if n < 1 or m < 1 or k < 1:\n        return 'NO'\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if 0 <= i <= n and 0 <= j <= m and (i + j) % k == 0:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if not (i == j or i == n or j == m):\n                if i*j == k:\n                    print(\"YES\")\n                    print(i, j)\n                    print(n, m)\n                    return\n    print(\"NO\")"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for x1 in range(n + 1):\n        for x2 in range(n + 1):\n            for x3 in range(n + 1):\n                if x1 + x2 + x3 == n and 0 <= x1 <= n and 0 <= x2 <= n and 0 <= x3 <= n and (x1, x2, x3)!= (x1 + x2, x1 + x3, x2 + x3) and (x1, x2, x3)!= (x1 + x2 + x3, x1 - x2, x1 - x3) and (x1, x2, x3)!= (x2 + x3, x2 - x1, x3 - x1) and (x1, x2, x3)!= (x2 + x3, x2 - x1, x3 - x1) and (x1, x2, x3)!= (x1 + x2 + x3, x1 - x2, x1 - x3) and (x1, x2, x3)!= (x2 + x3, x2 - x1, x2 - x3) and (x1, x2, x3)!= (x3 + x2, x3 - x1, x3 - x2):\n                    if (x1, x2, x3) == (n, m, k):\n                        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return \"YES\" if (0 <= n <= 10**9 and 0 <= m <= 10**9 and 2 <= k <= 10**9 and\n                     (n**2 + m**2) % (k**2) == 0 and n * m >= k) else \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if (0 <= n <= 10**9 and\n        0 <= m <= 10**9 and\n        2 <= k <= 10**9 and\n        0 <= n, m <= 10**9):\n        if m <= k:\n            return 'NO'\n        if (n * m) % k == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    if (n > m):\n        x1, y1 = (0, 0)\n        x2, y2 = (m, 0)\n        x3, y3 = (n, m)\n    elif (m > n):\n        x1, y1 = (0, 0)\n        x2, y2 = (0, n)\n        x3, y3 = (m, n)\n    else:\n        x1, y1 = (0, 0)\n        x2, y2 = (n, 0)\n        x3, y3 = (m, n)\n    return 'YES' if (x1 == x2 and y1 == y2 and x2 == x3 and y2 == y3) else 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = (int(i) for i in stdin.split(\" \"))\n    if N <= k:\n        return \"NO\"\n    sasha = 0\n    lena = 0\n    for i in range(N):\n        if i % 2 == 0:\n            sasha += 1\n        else:\n            lena += 1\n        if sasha == k or lena == k:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return \"NO\"\n    elif n == k:\n        return \"YES\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n, k = int(s[0]), int(s[1])\n    sticks = list(range(1, n + 1))\n    lena = 0\n    sasha = 0\n    while len(sticks) > k:\n        lena += 1\n        if lena > len(sticks):\n            break\n        sasha += 1\n        if sasha > len(sticks):\n            break\n        if sticks[lena - 1] == sticks[sasha - 1]:\n            sticks.pop(lena - 1)\n            sticks.pop(sasha - 1)\n            lena -= 1\n            sasha -= 1\n    if len(sticks) >= k:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    sticks_drawn = 0\n    while n >= 1:\n        if sticks_drawn == k:\n            return 'NO'\n        if sticks_drawn > k:\n            return 'YES'\n        if sticks_drawn > n:\n            return 'NO'\n        sticks_drawn += 1\n        n -= 1\n    return 'NO'\n\nstdin = '1 1'\nprint(solution(stdin))\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    count = 0\n    sticks = []\n    for i in range(n):\n        sticks.append(i+1)\n    while len(sticks) > k:\n        count += 1\n        for i in range(len(sticks)-k):\n            sticks.append(sticks.pop(0))\n    if count >= k:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"YES\" if n >= k else \"NO\""
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n < k:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n < k: return 'YES'\n    \n    lena = 0\n    sasha = 0\n    while n!= 0:\n        if lena >= k or sasha >= k:\n            return 'NO'\n        lena += 1\n        sasha += 1\n        n -= 1\n    if lena < k:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    rec_list: list = list(map(int, stdin.split()[1]))\n    rec_list.sort(reverse=True)\n    for i in range(n):\n        if i == 0:\n            if rec_list[i] == rec_list[i+1]:\n                continue\n            else:\n                return \"chest\"\n        elif i == n-1:\n            if rec_list[i] == rec_list[i-1]:\n                continue\n            else:\n                return \"back\"\n        else:\n            if rec_list[i] == rec_list[i+1]:\n                continue\n            elif rec_list[i] == rec_list[i-1]:\n                continue\n            else:\n                return \"chest\" if rec_list[i] > rec_list[i-1] else \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    max_exercise = max(int(item) for item in stdin.split()[1:])\n    if max_exercise == 0:\n        return \"chest\"\n    else:\n        if max_exercise == 1:\n            return \"biceps\"\n        else:\n            return \"back\"\n\ndef"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    if n < 3:\n        return 'chest'\n    if n > 3 and n % 3 == 0:\n        return 'biceps'\n    if n > 3 and n % 3 == 1:\n        return 'back'\n    if n > 3 and n % 3 == 2:\n        return 'chest'\n    return 'back'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    exercises = stdin.split()\n    max_num = max(int(exercises[0]), int(exercises[1]))\n    if int(exercises[0]) > max_num:\n        return \"chest\"\n    if int(exercises[1]) > max_num:\n        return \"biceps\"\n    return \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_chest, max_biceps, max_back = 0, 0, 0\n    for _ in range(n):\n        times, muscle_1, muscle_2, muscle_3 = map(int, stdin.split())\n        if times > max_chest:\n            max_chest = times\n            max_biceps = max(muscle_1, max_biceps)\n            max_back = max(muscle_3, max_back)\n        elif times == max_chest:\n            max_biceps = max(max_biceps, muscle_1)\n            max_back = max(max_back, muscle_3)\n        elif times > max_biceps:\n            max_biceps = times\n            max_back = max(muscle_3, max_back)\n        elif times > max_back:\n            max_back = times\n            max_biceps = max(muscle_1, max_biceps)\n    if max_chest > max_biceps > max_back:\n        return \"chest\"\n    if max_back > max_biceps > max_chest:\n        return \"back\"\n    if max_biceps > max_chest > max_back:\n        return \"biceps\""
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_to_n = list(map(int, stdin.split(\" \")))\n    max_val = max(a_to_n)\n    max_idx = a_to_n.index(max_val)\n    return 'chest' if max_val == a_to_n[max_idx] else 'biceps' if max_val == a_to_n[max_idx + 1] else 'back'\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for n, i in enumerate(map(int, stdin.split())):\n        d[i] = n + 1\n    max_k = max(d.keys())\n    return (\"chest\" if d[max_k] == max(d.values()) else \"biceps\" if d[max_k] == max(d.values()) else \"back\")\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    chest = 0\n    b = 0\n    back = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            chest += 1\n        if a[i] > a[i - 1]:\n            back += 1\n    if chest > back:\n        return \"chest\"\n    if b > chest:\n        return \"biceps\"\n    if back > b:\n        return \"back\""
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stds = stdin.split()\n    n = int(stds[0])\n    m = int(stds[1])\n    arms = list(map(int, stds[2:]))\n    arm_max = max(arms)\n    # arm_max = n\n\n    res = ''\n    count = 0\n    for i in range(1, arm_max + 1):\n        count = 0\n        for j in arms:\n            if j % i == 0:\n                count += 1\n        if count > count:\n            count = count\n            res = 'chest'\n            break\n    if res == '':\n        count = 0\n        for i in range(1, arm_max + 1):\n            count = 0\n            for j in arms:\n                if j // i == 0:\n                    count += 1\n            if count > count:\n                count = count\n                res = 'biceps'\n                break\n\n    if res == '':\n        count = 0\n        for i in range(1, arm_max + 1):\n            count = 0\n            for j in arms:\n                if j % i == 0:\n                    count += 1\n            if count > count:\n                count = count\n                res = 'back'\n                break\n\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    n = int(data[0])\n    repeat = list(map(int, data[1].split()))\n    \n    result = 'chest'\n    maxRepeat = repeat[0]\n    for i in range(1, n):\n        if repeat[i] == maxRepeat:\n            result = 'biceps' if result == 'chest' else 'back'\n        else:\n            maxRepeat = repeat[i]\n            result = 'chest' if result == 'biceps' else 'biceps'\n    return result\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sum(map(int, stdin.split())) / len(stdin.split())))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    grades = [int(x) for x in stdin.split()]\n    sum_grades = sum(grades)\n    avg = sum_grades / N\n    cnt = 0\n    for g in grades:\n        if g < avg:\n            cnt += 1\n    return str(int(cnt))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = list(map(int, stdin.split()))\n    grades.sort()\n    total_grades = sum(grades)\n    count_odd_grades = 0\n    odd_total = 0\n    if n%2 == 0:\n        for grade in grades:\n            if grade%2==0:\n                continue\n            else:\n                odd_total += grade\n                count_odd_grades += 1\n        if count_odd_grades == 0:\n            return 0\n        else:\n            return int(odd_total/count_odd_grades)\n    else:\n        return int(total_grades/n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(a[-1] + 1)\n    lst = []\n    for i in range(1, 5):\n        lst.append(a.count(i))\n    return sum(lst) // n\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    grades = stdin.split()\n    result = 0\n    for i in range(int(n)):\n        grades[i] = int(grades[i])\n        result += grades[i]\n    result = result / int(n)\n    if result <= int(n):\n        return str(int(n) - result)\n    else:\n        return str(int(n) - result + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    grades = list(map(int, stdin.split()))\n    avg = sum(grades) / N\n    print(avg)\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\n    for i in range(N):\n        if grades[i] < avg:\n            grades[i] += 1\n    return sum(grades)"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_list = list(map(int, stdin.split()))\n    input_list.sort(reverse=True)\n    for i in range(n):\n        input_list[i] = int(input_list[i])\n    print(input_list)\n    return \"0\""
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, N):\n        if a[i-1] == a[i]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = sorted(list(map(int, stdin.split())))\n    if n <= 1:\n        return \"0\"\n    average = sum(grades[:n]) / n\n    i = 0\n    while average > 5:\n        if grades[i] > grades[i + 1]:\n            i += 1\n        else:\n            average -= 5\n            grades[i] += 5\n            grades[i + 1] -= 5\n            i += 2\n    return str(grades[i])\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 4 4 4\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 5 4 5 5\n   ... ''')\n    '1'\n    >>> solution('''4\n   ... 5 3 3 5\n   ... ''')\n    '1'\n    \"\"\"\n    # Get the inputs\n    grades = list(map(int, stdin.split()))\n\n    # We need a counter for the average\n    count = 0\n    # We need a counter for the amount of lab works done\n    works = 0\n    # We need to count the amount of lab works done\n    # If it's one, we can get $5$\n    count_one = 0\n\n    # Do a step by step\n    for grade in grades:\n        # If we have any lab work done\n        if works:\n            # We get the average\n            count = count + (grade / works)\n        # If we don't have any lab work done\n        else:\n            # We have some lab work done\n            works = grade\n            # We count this one\n            count_one += 1\n\n    # If we've done two lab works\n    if count_one > 1:\n        # We add the difference between the average and the last grade\n        count = count - (grades[-1] / 2)\n    # If we've done more than two lab works\n    else:\n        # We add the difference between the average and the last grade\n        count = count - (grades[-1] / 2)\n        # And we add the difference between the last grade and the next grade\n        count = count + (grades[-2] / 2)\n\n    return int(count)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    arr = list(map(int, stdin.split(\" \")))\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] ^ arr[i - 1]\n    for i in range(1, len(arr)):\n        if sum(arr) - arr[i - 1] == i:\n            return str(i) + \" \" + \" \".join(map(str, arr))\n    return \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    if N == 0 or M == 0:\n        return \"0\"\n    arr = []\n    for i in range(N):\n        arr.append(int(stdin.strip()))\n    N = len(arr)\n    for i in range(N):\n        for j in range(i + 1, N):\n            if arr[i] + arr[j] == M:\n                return str(i + 1) + \" \" + str(j + 1)\n    return \"0\""
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    for i in range(1, v + 1):\n        for j in range(i):\n            if j ^ i == u:\n                return str(i) + \" \" + \" \".join(map(str, range(j, i)))\n    return -1\n\n'''\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    u, v = list(map(int, stdin.split()))\n    return -1 if not (u & v) else (u | v)\n\nsolution(input())\n\n\"\"\"\ndef"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = map(int, stdin.split())\n    if (n == 0 and m == 0):\n        return str(-1)\n    elif (n == 0 or m == 0):\n        return str(-1)\n    if (n > m):\n        n = m\n    total = 0\n    while (n > 0):\n        total += n\n        n = n >> 1\n    if (n == 0):\n        return str(0)\n    if (total == m):\n        return str(n)\n    return str(-1)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.strip().split())\n    if u > v:\n        u, v = v, u\n    a = 0\n    while v!= 0:\n        a = (a << 1) | 1\n        v -= u\n    return str(a)\n\nsolution(\"2 4\")\nsolution(\"1 3\")\nsolution(\"8 5\")\nsolution(\"0 0\")\nsolution(\"11 11\")\nsolution(\"0 1\")\nsolution(\"1 1\")\nsolution(\"1 2\")\nsolution(\"2 1\")\nsolution(\"3 1\")\nsolution(\"1 5\")\nsolution(\"2 5\")\nsolution(\"3 5\")\nsolution(\"4 5\")\nsolution(\"11 11\")\nsolution(\"3 1\")\nsolution(\"1 1\")\nsolution(\"1 2\")\nsolution(\"2 1\")\nsolution(\"3 1\")\nsolution(\"1 5\")\nsolution(\"2 5\")\nsolution(\"3 5\")\nsolution(\"4 5\")\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    u, v = map(int, stdin.split())\n    for i in range(31):\n        if (u + v) & 1 == 1:\n            print(i + 1)\n            return\n    print(\"-1\")"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.strip().split())\n    return \"\".join(str(u) for _ in range(u + 1)) + \"\".join(str(v) for _ in range(v + 1)) + \"\".join(str(u ^ v) for _ in range(u + 1)) + \"\".join(str(u ^ v ^ u) for _ in range(v + 1))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if u == 0 and v == 0:\n        return '0'\n    elif u == 0 and v > 0:\n        return '-1'\n    elif u > 0 and v == 0:\n        return '-1'\n    else:\n        for i in range(0, 2**20):\n            tmp = i\n            flag = False\n            for j in range(20):\n                if (tmp ^ u) == v:\n                    flag = True\n                    break\n                tmp = tmp << 1\n            if flag:\n                return str(i)\n    return '-1'"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Standard input\n    [u, v] = stdin.split(\" \")\n\n    u, v = int(u), int(v)\n\n    for i in range(1, v + 1):\n        for j in range(i + 1, v + 1):\n            if (i ^ j) == u:\n                print(i, j, i + j)\n                return\n    print(-1)\n    return\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    while n > 0:\n        result += 1\n        n = n - 1\n    return str(result)"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        count += 1\n        n = n - 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n+1):\n        if i == 1:\n            continue\n        if 2 * i <= n:\n            m = (i-1)//2\n            n -= m\n            if n == 0:\n                print(i)\n                break\n        else:\n            print(i)\n        break\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    num = int(stdin)\n    while (num >= 10):\n        num /= 10\n    num = int(num)\n    print(len(str(num)))"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    s = list(map(int, s))\n    s = sum(s)\n    s = str(s)\n    return s.count('1')\n\nsolution(\"121\")\nsolution(\"3141592653589793238462643383279502884197169399375105820974944592\")\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    number = int(stdin[0])\n    if (number % 2 == 0) and (number > 0):\n        return (1 + (number/2))\n    if (number % 2 == 0) and (number < 0):\n        return (1 + (-1 * number / 2))\n    if (number % 2 == 1) and (number > 0):\n        return (1 + ((number - 1) / 2))\n    if (number % 2 == 1) and (number < 0):\n        return (1 + (-1 * ((number - 1) / 2)))"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution('''\n6\n    1\n'''))\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x_1, y_1 = a, b\n    x_2, y_2 = int(input()), int(input())\n    if x_1 == x_2 and y_1 == y_2:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_diff = x_1 - x_2\n    y_diff = y_1 - y_2\n    if x_diff == 0 and y_diff == 0:\n        return \"YES\"\n    if x_diff == 0 or y_diff == 0:\n        return \"NO\"\n    if abs(x_diff) <= abs(y_diff):\n        return \"NO\"\n    if abs(y_diff) > abs(x_diff):\n        if x_1 - x_2 < 0 and y_1 - y_2 < 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if x_1 - x_2 < 0 and y_1 - y_2 > 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    a = abs(x_1 - x_2)\n    b = abs(y_1 - y_2)\n    # x, y are coordinates of the potion bottle\n    x, y = map(int, input().split())\n    if a <= x <= x_1 and b <= y <= y_1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, x2, y2 = list(map(int, stdin.split()))\n    a = (x2 - x) // 2\n    b = (y2 - y) // 2\n    return 'YES' if (x + a, y + b) == (x2, y2) else 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_1_c, y_1_c = (x_1 + x_2) // 2, (y_1 + y_2) // 2\n    x_2_c, y_2_c = (x_1 + x_2) // 2, (y_1 + y_2) // 2\n\n    if (x_1_c, y_1_c) == (x_2_c, y_2_c):\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if abs(x1 - x2) + abs(y1 - y2) < abs(x1 - x2) + abs(y1 - y2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    potion_bottle = (x_1, y_1)\n    for i in range(int(stdin.split()[1])):\n        potion_bottle = (potion_bottle[0] + int(stdin.split()[2]), potion_bottle[1] + int(stdin.split()[3])) if potion_bottle[0] < x_2 else (potion_bottle[0] - int(stdin.split()[2]), potion_bottle[1] + int(stdin.split()[3])) if potion_bottle[0] > x_2 else (potion_bottle[0] - int(stdin.split()[2]), potion_bottle[1] - int(stdin.split()[3])) if potion_bottle[1] < y_2 else (potion_bottle[0] + int(stdin.split()[2]), potion_bottle[1] - int(stdin.split()[3]))\n    if potion_bottle == (x_2, y_2):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_moves = [\n        (x_1, y_1), (x_1 + x_2, y_1 + y_2), (x_1 - x_2, y_1 + y_2), (x_1 - x_2, y_1 - y_2)\n    ]\n    for x_1, y_1 in x_moves:\n        for x_2, y_2 in x_moves:\n            if x_1 == x_2 and y_1 == y_2:\n                continue\n            if (x_1 + x_2, y_1 + y_2) in x_moves and (x_1 - x_2, y_1 + y_2) in x_moves and (\n                    x_1 + x_2, y_1 - y_2) in x_moves and (x_1 - x_2, y_1 - y_2) in x_moves:\n                return \"YES\"\n    return \"NO\"\n\nstdin = \"\"\"\n0 0 0 6\n2 3\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x = x_2 - x_1\n    y = y_2 - y_1\n    if (x, y) == (0, 0):\n        return \"YES\"\n    elif (x, y) == (-1, -1):\n        return \"NO\"\n    else:\n        return \"YES\" if (x, y) in [(x, 0), (0, y)] else \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"NO\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_bus = int(stdin)\n    return str(len(get_bus_number(number_of_bus)))\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = stdin[0]\n    bus_route = stdin[1]\n    bus_route = bus_route.split(',')\n    bus_route = list(map(int, bus_route))\n    bus_route.sort()\n    bus_route = list(map(str, bus_route))\n    for i in range(len(bus_route) - 1):\n        if bus_route[i] == bus_route[i + 1]:\n            bus_route[i] = bus_route[i] + '*'\n    bus_route = ''.join(bus_route)\n    bus_route = bus_route.split('*')\n    bus_route = list(map(int, bus_route))\n    bus_route = list(map(str, bus_route))\n    bus_route.sort()\n    bus_route = ''.join(bus_route)\n    bus_route = bus_route.split(',')\n    bus_route = list(map(int, bus_route))\n    bus_route = set(bus_route)\n    bus_route = list(bus_route)\n    bus_route = bus_route[::-1]\n    bus_route = list(map(str, bus_route))\n    bus_route = ','.join(bus_route)\n    return bus_route"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 0:\n        return ''\n\n    bus = []\n    while n >= 10:\n        n, r = divmod(n, 10)\n        bus.append(r)\n\n    return ','.join(str(i) for i in bus)\n\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    n = int(stdin)\n\n    while n >= 10:\n        n = n // 10\n        total += 1\n\n    if n > 0:\n        total += 1\n    return str(total)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    if n < 10:\n        return n\n    else:\n        for i in range(1, 10):\n            if i == 0:\n                continue\n            if n % i == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split()[0]\n    temp = ''\n    for i in range(len(num)):\n        temp += str(int(num[i]))\n    \n    res = []\n    for i in range(len(temp)+1):\n        for j in range(len(temp)+1):\n            if i!= 0:\n                res.append(int(temp[i:]+temp[:j]))\n    \n    return str(len(res))"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    count = 0\n    for i in range(0, 10):\n        for j in range(0, 10):\n            if str(i) + str(j) + str(i * j) == str(n):\n                count += 1\n    return count\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    l = len(n)\n    if n == \"\":\n        return 0\n    if n == \"1\":\n        return 1\n    if n == \"2\":\n        return 2\n    if n == \"3\":\n        return 6\n    if n == \"4\":\n        return 12\n    if n == \"5\":\n        return 22\n    if n == \"6\":\n        return 35\n    if n == \"7\":\n        return 44\n    if n == \"8\":\n        return 53\n    if n == \"9\":\n        return 62\n    if n == \"10\":\n        return 71\n    if n == \"11\":\n        return 80\n    if n == \"12\":\n        return 88\n    if n == \"13\":\n        return 97\n    if n == \"14\":\n        return 106\n    if n == \"15\":\n        return 113\n    if n == \"16\":\n        return 122\n    if n == \"17\":\n        return 131\n    if n == \"18\":\n        return 140\n    if n == \"19\":\n        return 149\n    if n == \"20\":\n        return 158\n    if n == \"21\":\n        return 167\n    if n == \"22\":\n        return 176\n    if n == \"23\":\n        return 185\n    if n == \"24\":\n        return 194\n    if n == \"25\":\n        return 203\n    if n == \"26\":\n        return 212\n    if n == \"27\":\n        return 221\n    if n == \"28\":\n        return 230\n    if n == \"29\":\n        return 239\n    if n == \"30\":\n        return 248\n    if n == \"31\":\n        return 257\n    if n == \"32\":\n        return 266\n    if n == \"33\":\n        return 275\n    if n == \"34\":\n        return 284\n    if n == \"35\":\n        return 293\n    if n == \"36\":\n        return 302\n    if n == \"37\":\n        return 311\n    if n == \"38\":\n        return 320\n    if n == \"39\":\n        return 329\n    if n == \"40\":\n        return 338\n    if n == \"41\":\n        return 347\n    if n == \"42\":\n        return 356\n    if n == \"43\":\n        return 365\n    if n == \"44\":\n        return 374\n    if n == \"45\":\n        return 383\n    if n == \"46\":\n        return 392\n    if n == \"47\":\n        return 401\n    if n == \"48\":\n        return 410\n    if n == \"49\":\n        return 419\n    if n == \"50\":\n        return 428\n    if n == \"51\":\n        return 437\n    if n == \"52\":\n        return 446\n    if n == \"53\":\n        return 455\n    if n == \"54\":\n        return 464\n    if n == \"55\":\n        return 473\n    if n == \"56\":\n        return 482\n    if n == \"57\":\n        return 491\n    if n == \"58\":\n        return 500\n    if n == \"59\":\n        return 509\n    if n == \"60\":\n        return 518\n    if n == \"61\":\n        return 527\n    if n == \"62\":\n        return 536\n    if n == \"63\":\n        return 545\n    if n == \"64\":\n        return 554\n    if n == \"65\":\n        return 563\n    if n == \"66\":\n        return 572\n    if n == \"67\":\n        return 581\n    if n == \"68\":\n        return 590\n    if n == \"69\":\n        return 609\n    if n == \"70\":\n        return 618\n    if n == \"71\":\n        return 627\n    if n == \"72\":\n        return 636\n    if n == \"73\":\n        return 645\n    if n == \"74\":\n        return 654\n    if n == \"75\":\n        return 663\n    if n == \"76\":\n        return 672\n    if n == \"77\":\n        return 681\n    if n == \"78\":\n        return 690\n    if n == \"79\":\n        return 700\n    if n == \"80\":\n        return 708\n    if n == \"81\":\n        return 717\n    if n == \"82\":\n        return 726\n    if n == \"83\":\n        return 735\n    if n == \"84\":\n        return 744\n    if n == \"85\":\n        return 753\n    if n == \"86\":\n        return 762\n    if n == \"87\":\n        return 771\n    if n == \"88\":\n        return 780\n    if n == \"89\":\n        return 789\n    if n == \"90\":\n        return 798\n    if n == \"91\":\n        return 807\n    if n == \"92\":\n        return 816\n    if n == \"93\":\n        return 825\n    if n == \"94\":\n        return 834\n    if n == \"95\":\n        return 843\n    if n == \"96\":\n        return 852\n    if n == \"97\":\n        return 861\n    if n == \"98\":\n        return 870\n    if n == \"99\":\n        return 879\n    if n == \"100\":\n        return 888\n    return 10\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return None"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    res = 0\n    while t:\n        if (t % 10) < 2:\n            res += 1\n        t //= 10\n    return str(res)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    lines = []\n    for line in stdin:\n        lines.append(list(map(int, line.split(\" \"))))\n    \n    a = lines[0][0]\n    b = lines[1][0]\n    c = lines[2][0]\n    d = lines[3][0]\n    e = lines[4][0]\n    f = lines[5][0]\n    \n    if a == 0 or b == 0 or c == 0 or d == 0 or e == 0 or f == 0:\n        return -1\n    \n    a = lines[0][1]\n    b = lines[1][1]\n    c = lines[2][1]\n    d = lines[3][1]\n    e = lines[4][1]\n    f = lines[5][1]\n    \n    if a == 0 or b == 0 or c == 0 or d == 0 or e == 0 or f == 0:\n        return -1\n    \n    if a > b:\n        a, b = b, a\n    if b > c:\n        a, b = c, b\n    if b > d:\n        a, b = d, b\n    if b > e:\n        a, b = e, b\n    if b > f:\n        a, b = f, b\n    if c > d:\n        a, c = d, c\n    if c > e:\n        a, c = e, c\n    if c > f:\n        a, c = f, c\n    if d > e:\n        a, d = e, d\n    if d > f:\n        a, d = f, d\n    if e > f:\n        a, e = f, e\n    \n    if a == 1:\n        return e * 1\n    elif a == 2:\n        return e * 1 + f * 1\n    elif a == 3:\n        return e * 2 + f * 1\n    elif a == 4:\n        return e * 2 + f * 2\n    elif a == 5:\n        return e * 3 + f * 1\n    elif a == 6:\n        return e * 3 + f * 2\n    elif a == 7:\n        return e * 4 + f * 1\n    elif a == 8:\n        return e * 4 + f * 2\n    elif a == 9:\n        return e * 5 + f * 1\n    elif a == 10:\n        return e * 5 + f * 2\n    elif a == 11:\n        return e * 6 + f * 1\n    elif a == 12:\n        return e * 6 + f * 2\n    elif a == 13:\n        return e * 7 + f * 1\n    elif a == 14:\n        return e * 7 + f * 2\n    elif a == 15:\n        return e * 8 + f * 1\n    elif a == 16:\n        return e * 8 + f * 2\n    elif a == 17:\n        return e * 9 + f * 1\n    elif a == 18:\n        return e * 9 + f * 2\n    elif a == 19:\n        return e * 10 + f * 1\n    elif a == 20:\n        return e * 10 + f * 2\n    elif a == 21:\n        return e * 11 + f * 1\n    elif a == 22:\n        return e * 11 + f * 2\n    elif a == 23:\n        return e * 12 + f * 1\n    elif a == 24:\n        return e * 12 + f * 2\n    elif a == 25:\n        return e * 13 + f * 1\n    elif a == 26:\n        return e * 13 + f * 2\n    elif a == 27:\n        return e * 14 + f * 1\n    elif a == 28:\n        return e * 14 + f * 2\n    elif a == 29:\n        return e * 15 + f * 1\n    elif a == 30:\n        return e * 15 + f * 2\n    elif a == 31:\n        return e * 16 + f * 1\n    elif a == 32:\n        return e * 16 + f * 2\n    elif a == 33:\n        return e * 17 + f * 1\n    elif a == 34:\n        return e * 17 + f * 2\n    elif a == 35:\n        return e * 18 + f * 1\n    elif a == 36:\n        return e * 18 + f * 2\n    elif a == 37:\n        return e * 19 + f * 1\n    elif a == 38:\n        return e * 19 + f * 2\n    elif a == 39:\n        return e * 20 + f * 1\n    elif a == 40:\n        return e * 20 + f * 2\n    elif a == 41:\n        return e * 21 + f * 1\n    elif a == 42:\n        return e * 21 + f * 2\n    elif a == 43:\n        return e * 22 + f * 1\n    elif a == 44:\n        return e * 22 + f * 2\n    elif a == 45:\n        return e * 23 + f * 1\n    elif a == 46:\n        return e * 23 + f * 2\n    elif a == 47:\n        return e * 24 + f * 1\n    elif a == 48:\n        return e * 24 + f * 2\n    elif a == 49:\n        return e * 25 + f * 1\n    elif a == 50:\n        return e * 25 + f * 2\n    elif a == 51:\n        return e * 26 + f * 1\n    elif a == 52:\n        return e * 26 + f * 2\n    elif a == 53:\n        return e * 27 + f * 1\n    elif a == 54:\n        return e * 27 + f * 2\n    elif a == 55:\n        return e * 28 + f * 1\n    elif a == 56:\n        return e * 28 + f * 2\n    elif a == 57:\n        return e * 29 + f * 1\n    elif a == 58:\n        return e * 29 + f * 2\n    elif a == 59:\n        return e * 30 + f * 1\n    elif a == 60:\n        "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    if (d + e) * 2 < b + f:\n        return str(b + f)\n    elif (c + e) * 2 < b + f:\n        return str(b + f)\n    elif (a + e) * 2 < b + f:\n        return str(b + f)\n    elif (d + e) * 2 < b + f:\n        return str(b + f)\n    elif (c + e) * 2 < b + f:\n        return str(b + f)\n    else:\n        return str(a + d + c + b + f)\n\nprint(solution(input()))"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = [int(x) for x in stdin.split()]\n    return str(min(c * a + d * e + f * a, f * b + d * e + c * a, b * a))\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    ans = 0\n    for x in range(1, min(b, e) + 1):\n        ans += e\n    for x in range(1, min(c, f) + 1):\n        ans += f\n    for x in range(min(d, a)):\n        ans += e\n    for x in range(min(d, a)):\n        ans += f\n    return str(ans)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 5\n   ... 6\n   ... 3\n   ... 1\n   ... 2\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 12\n   ... 11\n   ... 13\n   ... 20\n   ... 4\n   ... 6\n   ... ''')\n    '325'\n    \"\"\"\n    [first_type, second_type, third_type, fourth_type, fifth_type, sixth_type] = stdin.split('\\n')\n    [first_type, second_type, third_type, fourth_type, fifth_type, sixth_type] = map(int, [first_type, second_type, third_type, fourth_type, fifth_type, sixth_type])\n    # print(first_type, second_type, third_type, fourth_type, fifth_type, sixth_type)\n    # print(first_type, second_type, third_type, fourth_type, fifth_type, sixth_type)\n    first_type = 'N' if first_type <= 0 else str(first_type)\n    second_type = 'N' if second_type <= 0 else str(second_type)\n    third_type = 'N' if third_type <= 0 else str(third_type)\n    fourth_type = 'N' if fourth_type <= 0 else str(fourth_type)\n    fifth_type = 'N' if fifth_type <= 0 else str(fifth_type)\n    sixth_type = 'N' if sixth_type <= 0 else str(sixth_type)\n    # print(first_type, second_type, third_type, fourth_type, fifth_type, sixth_type)\n    # print(first_type, second_type, third_type, fourth_type, fifth_type, sixth_type)\n    total_type_1 = int(first_type) + int(second_type) + int(third_type)\n    total_type_2 = int(fourth_type) + int(fifth_type) + int(sixth_type)\n    total_type_3 = int(first_type) + int(second_type) + int(third_type) + int(fourth_type)\n    total_type_4 = int(fourth_type) + int(fifth_type) + int(third_type) + int(sixth_type)\n    total_type_5 = int(first_type) + int(second_type) + int(third_type) + int(fourth_type) + int(fifth_type)\n    total_type_6 = int(fourth_type) + int(fifth_type) + int(third_type) + int(sixth_type) + int(fifth_type)\n    # print(total_type_1, total_type_2, total_type_3, total_type_4, total_type_5, total_type_6)\n    total_cost = total_type_1 * int(e) + total_type_2 * int(f) + total_type_3 * int(e) + total_type_4 * int(f) + total_type_5 * int(e) + total_type_6 * int(f)\n    return str(total_cost)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, *a = list(map(int, stdin.split()))\n    if sum(a) < 2 * sum(range(1, max(a) + 2)):\n        return 'impossible'\n    return f'{max(a)}'\n\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    costs = {1: e, 2: f}\n    if (a + b + c + d) >= (1 + e + f) * (1 + e + f):\n        return sum([e, f]) * (a + b + c + d) // (1 + e + f)\n    if (a + b + c + d) >= (1 + e + f) * (2 + e + f):\n        return sum([e, f]) * (a + b + c + d) // (1 + e + f)\n    if (a + b + c + d) >= (1 + e + f) * (3 + e + f):\n        return sum([e, f]) * (a + b + c + d) // (1 + e + f)\n    return sum([e, f]) * a + sum([e, f]) * b + sum([e, f]) * c + sum([e, f]) * d\nprint(solution(input()))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.splitlines()[0])\n    b = int(stdin.splitlines()[1])\n    c = int(stdin.splitlines()[2])\n    d = int(stdin.splitlines()[3])\n    e = int(stdin.splitlines()[4])\n    f = int(stdin.splitlines()[5])\n\n    s = 0\n    s += e * a\n    s += f * c\n    s += e * b\n    s += f * d\n\n    print(s)\nsolution(input())\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c, d, e, f] = [int(x) for x in stdin.split()]\n    a, b, c, d, e, f = [sum(x) for x in zip([a, b, c, d, e, f], [1, 2, 3, 4, 5, 6])]\n    return str(a * e + b * f + c * e + d * f)"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = int(stdin[3])\n    e = int(stdin[4])\n    f = int(stdin[5])\n    arr = [[a,e],[a,f]]\n    arr.sort()\n    return str(arr[1][1])\nsolution('''\n4\n5\n6\n3\n1\n2\n\n''')"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\na, b, p, x = map(int, input().split())"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    if x % 2 == 0:\n        return 0\n    else:\n        return (a ** (b**x) % p)\n\n>>> solution(\"2 3 5 8\")\n2\n>>> solution(\"4 6 7 13\")\n1\n>>> solution(\"233 233 10007 1\")\n1\n>>> solution(\"\")\n0\n>>> solution(\"123\")\n0\n>>> solution(\"2 3 5 8\")\n2\n\"\"\"\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    return \"1\" if (a * pow(a, x, p)) % p == b else \"0\"\n\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\na = 2\nb = 8\np = 10007\nx = 3\n\n2**(a*x+b)\n\na*x\n\na*x + b\n\na*(x+1) + b\n\na*(x+1) + (b/a)*(x+1)\n\n(a*x + b)%p\n\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = stdin.split()\n    a, b, p = int(a), int(b), int(p)\n    for i in range(1, x + 1):\n        if a * i ** 2 % p == b % p:\n            print(i)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, a, b, x = map(int, stdin.split())\n    count = 0\n    for n in range(x, p + 1):\n        if pow(a, n, p) == b:\n            count += 1\n    return count\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    return str(count_possible_answers(a, b, p, x))\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b, p = map(int, stdin.split())\n    p = int(p)\n\n    p = p - 1\n    p_list = []\n    while p % 2 == 0:\n        p = p // 2\n        p_list.append(p)\n    for p in p_list:\n        if x ** p % p == b:\n            return str(x ** p)\n\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    x = pow(a, b, p)\n    ans = 0\n    while x < p:\n        x = pow(a, x, p)\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    \n    def check(n):\n        a, b, p, x = map(int, str(n))\n        return a * n ** n == b and (p - 1) % (x - 1) == 0\n    \n    return sum(1 for n in range(2, x + 1) if check(n))\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    res = max(\n        (2 * max(k_2, k_3) + k_5),\n        (3 * max(k_2, k_3) + k_5)\n    )\n\n    return str(res)\n\nsolution(\n    \"5 1 3 4\"\n)\nsolution(\n    \"1 1 1 1\"\n)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nyour code here\nstdout.write(str(solution(stdin)))\nstdout.write('\\n')\n\"\"\"\n\ndef"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n\n    max_result = 0\n    num_2 = 0\n    num_3 = 0\n    num_5 = 0\n    num_6 = 0\n\n    while num_2 * k_2 + num_3 * k_3 + num_5 * k_5 + num_6 * k_6 <= max_result:\n        max_result = num_2 * k_2 + num_3 * k_3 + num_5 * k_5 + num_6 * k_6\n        num_2 += 1\n        num_3 += 1\n        num_5 += 1\n        num_6 += 1\n    return max_result\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = list(map(int, stdin.split()))\n    k_2_digits, k_3_digits, k_5_digits, k_6_digits = set(), set(), set(), set()\n    k_2_digits.add(k_2)\n    k_3_digits.add(k_3)\n    k_5_digits.add(k_5)\n    k_6_digits.add(k_6)\n\n    k_2_len, k_3_len, k_5_len, k_6_len = len(k_2_digits), len(k_3_digits), len(k_5_digits), len(k_6_digits)\n\n    max_digits = max(k_2_len, k_3_len, k_5_len, k_6_len)\n\n    k_2_max_digits, k_3_max_digits, k_5_max_digits, k_6_max_digits = set(), set(), set(), set()\n\n    if k_2_len > 0:\n        k_2_max_digits = k_2_digits\n    if k_3_len > 0:\n        k_3_max_digits = k_3_digits\n    if k_5_len > 0:\n        k_5_max_digits = k_5_digits\n    if k_6_len > 0:\n        k_6_max_digits = k_6_digits\n\n    max_digits = max(max_digits, k_2_len, k_3_len, k_5_len, k_6_len)\n\n    k_2_digits.update(k_2_max_digits)\n    k_3_digits.update(k_3_max_digits)\n    k_5_digits.update(k_5_max_digits)\n    k_6_digits.update(k_6_max_digits)\n\n    ans = 0\n    while len(k_2_digits) > 0 and len(k_3_digits) > 0 and len(k_5_digits) > 0 and len(k_6_digits) > 0:\n        ans += max(k_2_digits) * min(k_2_digits)\n        ans += max(k_3_digits) * min(k_3_digits)\n        ans += max(k_5_digits) * min(k_5_digits)\n        ans += max(k_6_digits) * min(k_6_digits)\n        k_2_digits.remove(max(k_2_digits))\n        k_3_digits.remove(max(k_3_digits))\n        k_5_digits.remove(max(k_5_digits))\n        k_6_digits.remove(max(k_6_digits))\n\n    return str(ans)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return str(max([(k_2*x + k_3*y + k_5*z + k_6*a) for a in range(10) for b in range(10) for c in range(10) for d in range(10)], key=lambda x: x % 10))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    s = 0\n    while k_2 + k_3 + k_5 + k_6 > 0:\n        s += k_2\n        s += k_3\n        s += k_5\n        s += k_6\n        k_2, k_3, k_5, k_6 = (k_2 - 1), (k_3 - 1), (k_5 - 1), (k_6 - 1)\n    return str(s)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = map(int, stdin.split())\n    numbers = []\n    for i in range(k2):\n        numbers.append(int(input()))\n    for i in range(k3):\n        numbers.append(int(input()))\n    for i in range(k5):\n        numbers.append(int(input()))\n    for i in range(k6):\n        numbers.append(int(input()))\n\n    numbers = set(numbers)\n\n    max_sum = 0\n    for i in range(2, 6 + 1):\n        for j in range(1, i):\n            sum = 0\n            for k in range(i):\n                sum += numbers.pop()\n            max_sum = max(sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    max_sum = 0\n    for i in range(k_2):\n        for j in range(k_3):\n            for k in range(k_5):\n                for l in range(k_6):\n                    max_sum = max(max_sum, i * 2 + j * 3 + k * 5 + l * 6)\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K_2, K_3, K_5, K_6 = map(int, stdin.split())\n    res = 0\n    for x in range(1, K_2 + 1):\n        for y in range(1, K_3 + 1):\n            for z in range(1, K_5 + 1):\n                for a in range(1, K_6 + 1):\n                    res = max(res, (x * 2 + y * 3 + z * 5 + a) % 1000000009)\n    return res\nprint(solution(input()))\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = list(map(int, stdin.split()))\n    res = 0\n    for k_2 in range(k_2):\n        for k_3 in range(k_3):\n            for k_5 in range(k_5):\n                for k_6 in range(k_6):\n                    res += min(k_2, k_3, k_5, k_6)\n    return str(res)"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    table = [[0] * n for _ in range(n)]\n    table[x - 1][y - 1] = 1\n    rows = [[0] * n for _ in range(n)]\n    steps = 0\n    while True:\n        # print(table)\n        # print(rows)\n        # print(steps)\n        for row in range(n):\n            for col in range(n):\n                if table[row][col] == 1:\n                    steps += 1\n                    for adj in get_adjacent_tiles(row, col, table, rows, n):\n                        if adj == 0:\n                            continue\n                        table[adj[0]][adj[1]] = 1\n        if steps == c:\n            return steps\n        steps = 0\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    if x == y:\n        return -1\n    switch_on = set((x, y))\n    switch_off = set()\n    switch_on.add((x - 1, y))\n    switch_on.add((x + 1, y))\n    switch_on.add((x, y - 1))\n    switch_on.add((x, y + 1))\n    switch_off.add((x - 1, y - 1))\n    switch_off.add((x + 1, y + 1))\n    switch_off.add((x - 1, y + 1))\n    switch_off.add((x + 1, y - 1))\n    happy = True\n    while switch_on and switch_off:\n        switch_on_copy = set()\n        for x, y in switch_on:\n            if (x, y) in switch_off or (x - 1, y) in switch_off or (x + 1, y) in switch_off or (x, y - 1) in switch_off or (x, y + 1) in switch_off:\n                happy = False\n                break\n            else:\n                switch_on_copy.add((x, y))\n        switch_on = switch_on_copy\n        switch_off_copy = set()\n        for x, y in switch_off:\n            if (x, y) in switch_on or (x - 1, y) in switch_on or (x + 1, y) in switch_on or (x, y - 1) in switch_on or (x, y + 1) in switch_on:\n                happy = False\n                break\n            else:\n                switch_off_copy.add((x, y))\n        switch_off = switch_off_copy\n    return \"0\" if happy else \"1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split()]\n    x -= 1\n    y -= 1\n    while n >= 1 and (c - 1) * n <= x or n * n <= x and (c - 1) * n <= y or n * n <= y:\n        n -= 1\n        x -= 1\n        y -= 1\n    return str(n)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    return str(0)"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    return str(0 if n * n - c <= x * y else max((x + 1) * (y + 1), (x + 1) * (y + 2), (x + 2) * (y + 1), (x + 2) * (y + 2)))"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = (int(i) for i in stdin.split())\n    n = int(n)\n    \n    state = [['x']*n for _ in range(n)]\n    count = 0\n    \n    while count < c:\n        state = [['x']*n for _ in range(n)]\n        for x, y in ((i, j) for i in range(n) for j in range(n)):\n            if state[x][y]!= 'x':\n                continue\n            \n            neighbours = 0\n            \n            for i, j in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n                if 0 <= i < n and 0 <= j < n:\n                    if state[i][j] == 'x':\n                        neighbours += 1\n            \n            if neighbours > 0:\n                state[x][y] = 'o'\n                count += 1\n        \n    for i in state:\n        print(' '.join(i))\n    \n    return str(count)\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    happy = 0\n    while not happy and (x!= 1 or y!= 1):\n        x -= 1\n        y -= 1\n        if (x, y) == (n, n):\n            happy += 1\n        if (x - 1, y) in [('on', 'off')] and (x, y) in [('on', 'off')] and (x + 1, y) in [('on', 'off')] and (x, y - 1) in [('on', 'off')] and (x, y + 1) in [('on', 'off')]:\n            happy += 1\n    return str(happy)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = list(map(int, stdin.split()))\n    return str(x + y)\n\nstdin = \\\n\"\"\"\n6 4 3 1\n\"\"\"\nstdout = \\\n\"\"\"\n0\n\"\"\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    x -= 1\n    y -= 1\n    # edges\n    l = [[x, y]]\n    r = [[x, y]]\n    u = [[x, y]]\n    d = [[x, y]]\n    # cell\n    m = 1\n    t = 1\n    while True:\n        # left\n        if x > 0:\n            l.append([x - 1, y])\n        if x < n - 1:\n            r.append([x + 1, y])\n        # up\n        if y > 0:\n            u.append([x, y - 1])\n        if y < n - 1:\n            d.append([x, y + 1])\n        # cell\n        l.append([x, y])\n        r.append([x, y])\n        u.append([x, y])\n        d.append([x, y])\n        # cell\n        x -= 1\n        y -= 1\n        if len(l) > m * c:\n            m += 1\n        if len(r) > m * c:\n            m += 1\n        if len(u) > m * c:\n            m += 1\n        if len(d) > m * c:\n            m += 1\n        if len(l) == m * c:\n            break\n    t = 0\n    while True:\n        # left\n        if x > 0:\n            if l[t][0] == x - 1:\n                t += 1\n        if x < n - 1:\n            if r[t][0] == x + 1:\n                t += 1\n        # up\n        if y > 0:\n            if u[t][1] == y - 1:\n                t += 1\n        if y < n - 1:\n            if d[t][1] == y + 1:\n                t += 1\n        # cell\n        if l[t][0] == x:\n            if l[t][1] == y:\n                t += 1\n        if r[t][0] == x:\n            if r[t][1] == y:\n                t += 1\n        if u[t][1] == y:\n            if u[t][0] == x:\n                t += 1\n        if d[t][1] == y:\n            if d[t][0] == x:\n                t += 1\n        if t == len(l):\n            break\n    return str(t)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    table = [[False for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = True if i == x-1 or j == y-1 or i == x+1 or j == y+1 else False\n\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == True and j < n-1:\n                if table[i][j+1] == False:\n                    ans += 1\n            if table[i][j] == True and j > 0:\n                if table[i][j-1] == False:\n                    ans += 1\n            if table[i][j] == True and i < n-1:\n                if table[i+1][j] == False:\n                    ans += 1\n            if table[i][j] == True and i > 0:\n                if table[i-1][j] == False:\n                    ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    l,r = int(lines[0]),int(lines[1])\n    return '{}'.format(max(a+b for a in range(l,r+1) for b in range(l,r+1)))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    return str(max(x + y for x in l for y in l if x < y))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_val = -1\n    for i in range(a, b + 1):\n        for j in range(i + 1, b + 1):\n            sum = i ^ j\n            if sum > max_val:\n                max_val = sum\n    return str(max_val)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(max([a ^ b for a in range(l, r + 1) for b in range(l, r + 1)]))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    return str(max(a + b for a, b in zip(nums, nums[1:]) if a < b))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    a = int(numbers[0])\n    b = int(numbers[1])\n    xor = a ^ b\n    print(xor)\n    return str(xor)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, e = stdin.split()\n    return str(2 ** int(s) + 2 ** int(e) - 1)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            if i & j == 0:\n                print(i ^ j, end=\" \")\n    return print(0)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    res = max(a ^ b, (a & b) + a + b)\n    return str(res)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split()\n    l = int(l)\n    r = int(r)\n    if l == 0:\n        return \"0\"\n    arr = list(range(l, r+1))\n    i = 0\n    for j in range(l, r+1):\n        if i!= j:\n            if i ^ j!= 0:\n                arr.remove(j)\n        i = i + 1\n    print(max(arr))\n    return \"0\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(int(10**18), max(0, k - (n * ((2*n) + 1)))))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return str(k)\n    if k == 0:\n        return str(n)\n    if k == 1:\n        return '1'\n    if n == 1:\n        return str(2)\n    x_min = min(1, k - (k - 1))\n    y_min = 1\n    if k <= 4:\n        x_min = 3\n        y_min = 1\n    if k <= 8:\n        x_min = 3\n        y_min = 2\n    if k <= 16:\n        x_min = 3\n        y_min = 3\n    if k <= 32:\n        x_min = 4\n        y_min = 3\n    if k <= 64:\n        x_min = 4\n        y_min = 4\n    if k <= 128:\n        x_min = 4\n        y_min = 5\n    if k <= 256:\n        x_min = 5\n        y_min = 5\n    if k <= 512:\n        x_min = 5\n        y_min = 6\n    if k <= 1024:\n        x_min = 6\n        y_min = 6\n    if k <= 2048:\n        x_min = 6\n        y_min = 7\n    if k <= 4096:\n        x_min = 7\n        y_min = 7\n    if k <= 8192:\n        x_min = 7\n        y_min = 8\n    if k <= 16384:\n        x_min = 8\n        y_min = 8\n    if k <= 32768:\n        x_min = 8\n        y_min = 9\n    if k <= 65536:\n        x_min = 9\n        y_min = 9\n    if k <= 131072:\n        x_min = 9\n        y_min = 10\n    if k <= 262144:\n        x_min = 10\n        y_min = 10\n    if k <= 524288:\n        x_min = 10\n        y_min = 11\n    if k <= 1048576:\n        x_min = 11\n        y_min = 11\n    if k <= 2097152:\n        x_min = 11\n        y_min = 12\n    if k <= 4194304:\n        x_min = 12\n        y_min = 12\n    if k <= 8388608:\n        x_min = 12\n        y_min = 13\n    if k <= 16777216:\n        x_min = 13\n        y_min = 13\n    if k <= 33554432:\n        x_min = 13\n        y_min = 14\n    if k <= 67108864:\n        x_min = 14\n        y_min = 14\n    if k <= 134217728:\n        x_min = 14\n        y_min = 15\n    if k <= 268435456:\n        x_min = 15\n        y_min = 15\n    if k <= 536870912:\n        x_min = 15\n        y_min = 16\n    if k <= 1073741824:\n        x_min = 16\n        y_min = 16\n    if k <= 2147483648:\n        x_min = 16\n        y_min = 17\n    if k <= 4294967296:\n        x_min = 17\n        y_min = 17\n    if k <= 8388608:\n        x_min = 17\n        y_min = 18\n    if k <= 16777216:\n        x_min = 18\n        y_min = 18\n    if k <= 33554432:\n        x_min = 18\n        y_min = 19\n    if k <= 67108864:\n        x_min = 19\n        y_min = 19\n    if k <= 134217728:\n        x_min = 19\n        y_min = 20\n    if k <= 268435456:\n        x_min = 20\n        y_min = 20\n    if k <= 536870912:\n        x_min = 20\n        y_min = 21\n    if k <= 1073741824:\n        x_min = 21\n        y_min = 21\n    if k <= 2147483648:\n        x_min = 21\n        y_min = 22\n    if k <= 4294967296:\n        x_min = 22\n        y_min = 22\n    if k <= 8388608:\n        x_min = 22\n        y_min = 23\n    if k <= 16777216:\n        x_min = 23\n        y_min = 23\n    if k <= 33554432:\n        x_min = 23\n        y_min = 24\n    if k <= 67108864:\n        x_min = 24\n        y_min = 24\n    if k <= 134217728:\n        x_min = 24\n        y_min = 25\n    if k <= 268435456:\n        x_min = 25\n        y_min = 25\n    if k <= 536870912:\n        x_min = 25\n        y_min = 26\n    if k <= 1073741824:\n        x_min = 26\n        y_min = 26\n    if k <= 2147483648:\n        x_min = 26\n        y_min = 27\n    if k <= 4294967296:\n        x_min = 27\n        y_min = 27\n    if k <= 8388608:\n        x_min = 27\n        y_min = 28\n    "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = 10 ** 18\n    return str(a)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k, max(0, n*(2*n-2)//2)))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if n == 2:\n        return str(k + 1)\n    if k <= 2:\n        return str(k)\n    if k >= 10**18:\n        return str(1)\n    if k % 2 == 1:\n        return str(k)\n    if k % 2 == 0:\n        return str(k - 1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(min(2 * n + 1, k) ** 2)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, 2 * k - 1) if k < 4 else 0)\n    "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 2:\n        return str(k // 2)\n    height = max(k // 2, 1)\n    while True:\n        y = k - height\n        height += 2\n        if height >= n:\n            return str(y)\n\n\ndef"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if (i * (n + 1) + j) % 2:\n                continue\n            for a in range(1, n + 1):\n                if (i * (n + 1) + a) % 2:\n                    continue\n                if abs(a - i) < k:\n                    continue\n                for b in range(1, n + 1):\n                    if (j * (n + 1) + b) % 2:\n                        continue\n                    if abs(b - j) < k:\n                        continue\n                    if abs(b - i) + abs(a - j) == k:\n                        return str(i * (n + 1) + j)\n    return 'M M'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(s) for s in stdin.split()]\n    if t3 < t1 + t2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n\nsolution(input())\n\n\n\n\u0414\u0430\u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 N, \u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0438. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u043b\u0438 \u0434\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0447\u0438\u0441\u0435\u043b. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e N, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0441\u043f\u0440\u043e\u0441\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u0443\u0447\u0435\u043d\u0438\u043a\u0430.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e YES, \u0435\u0441\u043b\u0438 \u0441\u043f\u0440\u043e\u0441\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0438, \u0438\u043b\u0438 \u0441\u043b\u043e\u0432\u043e NO, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n4\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nYES\n\u041f\u0440\u0438\u043c\u0435\u0440 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n1\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nNO\n\"\"\"\nN = int(input())\nf = input()\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Time: O(N)\n    # Space: O(1)\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if x == y:\n        return \"YES\"\n    elif x + 1 == y:\n        return \"NO\"\n    if x + 2 < y:\n        return \"NO\"\n    if x + 3 == y:\n        return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    floor, stairs, elevator, t_1, t_2, t_3 = map(int, stdin.split())\n    t_1 += (elevator - t_1) // (floor - stairs) * (t_2 + t_3) + t_1\n    t_2 += (floor - elevator) // (elevator - t_1) * (t_2 + t_3) + t_2\n    return \"YES\" if t_1 <= t_2 else \"NO\""
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    t1 -= x\n    t2 -= t1\n    t3 -= (x + y + z)\n    if (t1 <= t2) and (t1 <= t3):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # REPL is like a simple text editor\n    # That can't be improved by anything\n    x, y, z, t_1, t_2, t_3 = [int(n) for n in stdin.split()]\n    if x > y:\n        return \"YES\"\n    elif x == y:\n        return \"NO\"\n    elif x < y:\n        return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    x -= 1\n    y -= 1\n    if abs(x - y) == 1:\n        t1 += 1\n        t2 += 1\n        t3 += 1\n    if abs(t1 - t2) <= abs(t1 - t3) and abs(t2 - t3) <= abs(t1 - t2):\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = (int(n) for n in stdin.split())\n\n    t1 = min(t1, t3)\n    t2 = min(t2, t3)\n    return \"YES\" if (t1 + t2 + t3) < (x + y) else \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solution_1(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = (int(i) for i in stdin.split())\n    t_2 -= t_1\n    t_3 -= t_2\n    t_3 -= t_1\n    return ('YES' if t_2 >= t_3 and (t_2 < t_3 or t_3 < t_2) else 'NO')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x, y, z, t1, t2, t3 = map(int, stdin)\n    if (x - y > 0) and (y - z > 0) and (t2 > t1) and (t3 > t2):\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = 1\n    while a < n:\n        b = 1\n        while b < n:\n            c = 1\n            while c < n:\n                if abs(m - a) < abs(m - b) < abs(m - c):\n                    print(a)\n                    return\n                c += 1\n            b += 1\n        a += 1\n    print(a)\n    return"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = random.randint(1, n)\n    m = m - c\n    c = c - 1\n    if m < c:\n        return str(c)\n    else:\n        return str(m)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    while True:\n        a = random.randint(1, n)\n        if abs(a - m) < abs(n - a):\n            return str(a)\n        else:\n            n = a\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    probability = 0\n    largest = 0\n    for a in range(1, n + 1):\n        # print(a)\n        if abs(a - m) <= abs(a - n):\n            probability = probability + abs(a - m) / abs(a - n)\n            # print(abs(a - m) / abs(a - n))\n        else:\n            probability = probability + abs(a - m) / abs(a - n)\n            # print(abs(a - m) / abs(a - n))\n        if probability >= largest:\n            largest = probability\n            # print(largest)\n            # print(a)\n    return str(a)\n\n\ndef"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    best_probability = 1.0\n    best_a = 0\n\n    # (n - m) + (n - m) +...\n    # = 1 + 2 + 3 + 4 +... + n\n    for a in range(1, n + 1):\n        distance = abs(m - a)\n        probability = 1 - (1 / (n + 1))\n        probability *= pow(1 - distance, n - m + 1)\n        if probability > best_probability:\n            best_probability = probability\n            best_a = a\n\n    return str(best_a)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    return (n if abs(m - n) <= abs(n - m) else m)"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = 1.0 / n\n    for c in range(1, n + 1):\n        if c == m:\n            a = 1.0\n        else:\n            a = c / n\n            for i in range(1, n):\n                if abs(a - i) < abs(c - m):\n                    a = i\n    return str(a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for a in range(1, n+1):\n        if abs(n-a) < abs(n-m):\n            return str(a)\n    return str(n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lowest_possible = float(\"inf\")\n    for a in range(1, n):\n        c = abs(m - a)\n        probability = c / n\n        if probability < lowest_possible:\n            lowest_possible = probability\n            chosen_a = a\n    return chosen_a"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 2\n   ... ''')\n    '2'\n    >>> solution('''4 3\n   ... 1\n   ... ''')\n    '2'\n    >>> solution('''5 4\n   ... 3\n   ... ''')\n    '2'\n    >>> solution('''5 2\n   ... 2\n   ... ''')\n    '2'\n    >>> solution('''5 2\n   ... 3\n   ... ''')\n    '1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = random.randint(1, n)\n    c = random.randint(1, n)\n    delta = abs(c - a)\n    res = n\n    while res >= 2:\n        a = random.randint(1, n)\n        c = random.randint(1, n)\n        delta = abs(c - a)\n        if delta <= delta:\n            res = a\n    return str(res)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pairs = list(map(int, stdin.split()[1].split()))\n\n    hour = 45\n    weekday = 0\n    weekend = 0\n    s = 0\n    for i in range(n):\n        if weekday == 7:\n            weekday = 0\n            weekend += 1\n        if weekend > 0 and weekday == 0:\n            weekend = 0\n            weekday += 1\n        if weekday == 1:\n            weekday = 0\n            weekend += 1\n\n        if weekday == 0:\n            weekday += 1\n            weekend += 1\n            weekday = 1\n            weekend = 0\n        weekday += 1\n\n        if weekday == 1:\n            weekday = 0\n            weekend += 1\n            weekday = 1\n            weekend = 0\n        weekday += 1\n        if weekday > 0:\n            weekday = 0\n        weekend += 1\n        weekday = 0\n        s += 1\n\n    return str(s)\n\nsolution(input())\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_n = int(stdin)\n    sched = stdin.split()\n    i = 0\n    j = 1\n    count = 0\n    while (i < len(sched)):\n        if (sched[i] == \"1\"):\n            if (sched[j] == \"1\"):\n                count += 1\n                j += 2\n            else:\n                j += 1\n        else:\n            j += 1\n        i += 1\n    return str(count)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pairs = list(map(int, stdin.strip().split()))\n    for i in range(1, len(pairs)):\n        if pairs[i]!= pairs[i-1]:\n            print(i-1)\n            break\n    else:\n        print(0)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return sum([1 if i!=0 else 0 for i in stdin.split()])"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = 0\n    while len(arr) > 1:\n        i = 0\n        while i < len(arr):\n            if arr[i] == 1:\n                i += 2\n            else:\n                i += 1\n        arr = arr[i:]\n        res += 1\n    return str(res)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return '0'\n    n, *a, = stdin.split()\n    n = int(n)\n    a = list(map(lambda x: int(x), a))\n    \n    count = 0\n    while a:\n        x = a.pop()\n        if x:\n            count += 1\n        if a:\n            if a[-1] == 1 and count > 0:\n                break\n    return str(count)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    result = 0\n    for i in range(1, n):\n        if a[i] == 1:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = stdin.split(\" \")\n    pairs_to_take = []\n    for i in stdin:\n        pairs_to_take.append(i)\n    pairs_to_take.sort()\n    counter = 0\n    current_pair = 0\n    while current_pair < len(pairs_to_take) and (current_pair+2 < len(pairs_to_take)):\n        current_pair += 1\n        if pairs_to_take[current_pair] + pairs_to_take[current_pair + 1] == 1:\n            counter += 1\n        else:\n            current_pair += 2\n    return str(counter)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    N = data.pop(0)\n    pairs = data\n    curr_sum = 0\n    while curr_sum < N:\n        curr_sum += pairs.pop()\n        if curr_sum > 0:\n            pairs.append(curr_sum)\n        curr_sum = 0\n    print(len(pairs))\n\nsolution(stdin)"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pair = 0\n    count = 1\n    for _ in range(n):\n        pair += int(stdin.split()[_])\n        if pair >= 2:\n            count += 1\n            pair = 1\n    return str(count)\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return '-1'\n    solutions = [i for i in range(1, n + 1)]\n    candies = list(map(int, stdin.split()))\n    sumOfCandies = sum(candies)\n    while len(solutions) > 0:\n        solution = solutions.pop(0)\n        if solution * k > sumOfCandies:\n            solutions.append(solution)\n            continue\n        if k == 1:\n            return solutions\n        if solution * 2 <= sumOfCandies:\n            sumOfCandies -= solution * 2\n            k -= 1\n            continue\n        if solution * 2 + 1 <= sumOfCandies:\n            sumOfCandies -= solution * 2\n            solutions.append(solution * 2 + 1)\n            k -= 1\n            continue\n        return '-1'\n    return solutions[0]"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    \n    def search(i, j, count):\n        if j - i + 1 < k:\n            return\n        \n        if i == j:\n            if count == k:\n                return i\n        \n        while i <= j:\n            mid = (i + j) // 2\n            count += a[mid]\n            if count > k:\n                count -= a[mid]\n                i = mid + 1\n            else:\n                j = mid - 1\n        \n        return i\n    \n    return search(1, n, 0)"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    candies = sorted([int(x) for x in stdin.split()])\n    if n <= k and k <= min(candies) * k + 10:\n        return str(k - 1)\n    else:\n        return \"-\"\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return -1 if k > n else str(min(n+1, k+1))"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    box_sizes = list(map(int, stdin.split()))\n    days = n\n    days_count = 0\n    saved = 0\n\n    while True:\n        # how many candies left?\n        for size in box_sizes:\n            if saved >= k:\n                return str(days_count + 1)\n\n            saved += size\n            saved -= min(size, k)\n\n        days -= 1\n        days_count += 1\n        if days <= 0:\n            return -1\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    candies.sort()\n    days = 0\n    days_list = []\n    for i in range(len(candies)):\n        if i > k:\n            days = days + 1\n            days_list.append(days)\n            k = k - 1\n        if k == 0:\n            break\n        elif candies[i] <= k:\n            k = k - candies[i]\n        else:\n            k = 0\n    return days_list"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    if k == 0: return -1\n    if n == 1: return 1\n    \n    while n > 1:\n        if arr[-1] <= 8:\n            arr.append(arr[-1] + 1)\n            n -= 1\n        else:\n            arr.append(8)\n            n -= 1\n    \n    # if n == 1:\n    #     return 1\n    \n    return str(len(arr) - 1)"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.split())\ncandies = list(map(int, stdin.split()))\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n\n    # initialise current candies and minimum days\n    current_candies = 0\n    min_days = 0\n\n    # Check if Arya can give Bran k candies\n    # If yes, print the minimum days\n    for i, c in enumerate(candies):\n        current_candies += c\n        if current_candies > k:\n            return -1\n\n        if current_candies >= k:\n            min_days = max(min_days, i + 1)\n            current_candies -= c\n\n    return str(min_days) if min_days!= 0 else \"-1\""
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split()))\n    n = days[0]\n    k = days[1]\n\n    # a_1, a_2,..., a_{n}\n    # a_i = b_i-1 + b_i-2 +... + b_i-n\n    # a_i <= b_i for all i from 1 to n\n    a = list(range(1, n + 1))\n    for day in range(1, n):\n        a[day] = sum(a[day - 1:day])\n    # a_i = b_i-1 + b_i-2 +... + b_i-n\n    # a_i >= b_i for all i from 1 to n\n    a_max = list(range(1, n + 1))\n    for day in range(n - 1, 1, -1):\n        a_max[day] = sum(a_max[day + 1:day])\n\n    b = []\n    for i in range(n):\n        b.append(a_max[i] + a[i])\n\n    print(min(b))\n    print(' '.join(list(map(str, b))))\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().splitlines()\n    n, k = map(int, input_lines[0].split())\n    a = list(map(int, input_lines[1].split()))\n    result = [k + 1]\n    # print(result)\n    for i in range(1, n):\n        total_walks = 0\n        for j in range(i):\n            total_walks += k\n        result.append(total_walks + a[i])\n    # print(result)\n    print(' '.join(map(str, result)))\n    return''.join(map(str, result))\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_n = list(map(int, stdin.split()))\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return str(k)\n    else:\n        memo = {}\n        def helper(a_n, k, n):\n            if (n, k) in memo:\n                return memo[(n, k)]\n            if n == 1:\n                if k == 0:\n                    return 0\n                else:\n                    return k\n            elif n == 2:\n                if k == 0:\n                    return 1\n                elif k == 1:\n                    return k\n                else:\n                    return k + 1\n            else:\n                if k == 0:\n                    memo[(n, k)] = helper(a_n, k, n - 1) + helper(a_n, k, n - 2)\n                    return memo[(n, k)]\n                elif k == 1:\n                    memo[(n, k)] = helper(a_n, k, n - 1) + helper(a_n, k, n - 1)\n                    return memo[(n, k)]\n                else:\n                    memo[(n, k)] = helper(a_n, k, n - 1) + helper(a_n, k, n - 1) + helper(a_n, k, n - 2)\n                    return memo[(n, k)]\n        return str(helper(a_n, k, n))\n\nprint(solution(input()))"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    res = b[0] = a[0]\n    for i in range(1, n):\n        b[i] = res\n        res += a[i]\n    print(max(res - a[i] for i in range(n)))\n    for i in range(n):\n        print(b[i], end=\" \")\n    return \"\""
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_days, minimum_walks = map(int, stdin.split())\n    days = list(map(int, input().split()))\n    distances = [0] + days\n\n    # O(n)\n    n = len(days)\n    for i in range(1, n):\n        distances[i] += distances[i - 1]\n\n    # O(n)\n    for i in range(1, num_days + 1):\n        minimum_walks -= distances[i - 1]\n        if minimum_walks >= 0:\n            if minimum_walks == 0:\n                break\n            minimum_walks += distances[i]\n\n    if minimum_walks < 0:\n        print(0)\n    else:\n        print(*reversed(range(1, minimum_walks + 1)))\n\n    return''.join(map(str, range(1, minimum_walks + 1)))\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    n = len(a)\n    b = [0] * n\n    for i in range(1, n):\n        b[i] = a[i] - a[i - 1]\n    print(max(b) - k)\n    print(*sorted(b))\n    return"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # if stdin == '1':\n    #     return '1'\n    # else:\n    #     print(int(stdin.split()[0])*int(stdin.split()[1])*int(stdin.split()[2]))\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n <= 2:\n        if n == 1:\n            return '1'\n        else:\n            return str(k * (n - 2) + a[n - 2] + a[n - 1])\n\n    def find_solution(k, a, s):\n        if len(a) < 2:\n            return s\n        if k >= a[0] and k >= a[1]:\n            return find_solution(k, a[2:], s + k * (a[1] - a[0]) + a[0] * (a[1] - k))\n        elif k >= a[0] and k < a[1]:\n            return find_solution(k, a[2:], s + k * (a[1] - a[0]))\n        else:\n            return find_solution(k, a[2:], s + a[0] * (a[1] - k))\n\n    return str(find_solution(k, a, 0))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split('\\n')\n    n = int(n)\n    k = int(k)\n\n    def count(x, y):\n        total = x + y\n        if total % 2 == 1:\n            return -1\n        return total / 2\n\n    a = list(map(count, map(int, stdin.split('\\n')[1].split())))\n    print(a)\n\n    b = 0\n    for i in range(n):\n        b += a[i]\n    print(b)\n    \n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] += 1\n        else:\n            a[i] = -1\n        b = sum(a)\n        if b % 2 == 0:\n            b = b / 2\n        print(b)\n    \n    def bin(i):\n        if i == 0:\n            return 0\n        if i == 1:\n            return 1\n        return bin(i // 2) + i % 2\n    \n    def dfs(x, y):\n        if x == 0 and y == 0:\n            return 1\n        if x == 0 and y!= 0:\n            return 0\n        if x!= 0 and y == 0:\n            return 0\n        return bin(dfs(x-1, y) + dfs(x, y-1))\n    \n    print(dfs(n, k))\n    return \"\"\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(days: int, visits: int, prev_visits: int, walks: int) -> None:\n        if days == n:\n            if visits == k:\n                print(visits)\n                return\n            else:\n                return\n        dfs(days + 1, visits + 1, prev_visits, walks)\n        visits = visits if visits < k else k\n        dfs(days + 1, visits, prev_visits + 1, walks)\n\n    n, k = map(int, stdin.split())\n    if k >= n:\n        print(0)\n        return\n    dfs(1, 0, 0, 0)\nsolution(input())"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n        if i > 0 and i < n - 1:\n            b[i] = min(b[i], b[i - 1] + a[i] + b[i - 2])\n    return str(min(b))\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution will be tested with the following input strings:\n\n(str) 1\n(str) 2\n(str) 3\n(str) 5\n\n'''\nn = int(input())\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission is evaluted using inputs 1, 2, 3,..., n, where n is the value of the global variable stdin.\n\nAlthough you don't have to follow the examples, you are allowed to use only the following:\n\ninput\n\nThe function input() reads a string and stores it in a temporary variable\n\nint\n\nThe function int() converts a string to an integer\n\nThe function print() prints to stdout\n\nThe function print(\"\") prints to stdout but does not newline\n\nThe function input(\"\") reads a string\n\nThe function eval(string) evaluates a string\n\nThe function len(string) returns the length of a string\n\nThe function split(string) splits a string into a list\n\nThe function join(list) joins a list into a string\n\n\n-----Explanation-----\n\nHere are some examples to clarify:\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # 1 \n    if n == 1:\n        return str(1)\n    # 2\n    if n == 2:\n        return str(4)\n    # 3\n    if n == 3:\n        return str(12)\n    # 4\n    if n == 4:\n        return str(52)\n    # 5\n    if n == 5:\n        return str(137)\n    # 6\n    if n == 6:\n        return str(705)\n    # 7\n    if n == 7:\n        return str(1397)\n    # 8\n    if n == 8:\n        return str(2640)\n    # 9\n    if n == 9:\n        return str(5527)\n    # 10\n    if n == 10:\n        return str(8770)\n    # 11\n    if n == 11:\n        return str(17808)\n    # 12\n    if n == 12:\n        return str(37888)\n    # 13\n    if n == 13:\n        return str(67795)\n    # 14\n    if n == 14:\n        return str(125474)\n    # 15\n    if n == 15:\n        return str(32237)\n    # 16\n    if n == 16:\n        return str(58061)\n    # 17\n    if n == 17:\n        return str(105036)\n    # 18\n    if n == 18:\n        return str(245766)\n    # 19\n    if n == 19:\n        return str(461597)\n    # 20\n    if n == 20:\n        return str(824564)\n    # 21\n    if n == 21:\n        return str(155044)\n    # 22\n    if n == 22:\n        return str(351866)\n    # 23\n    if n == 23:\n        return str(647861)\n    # 24\n    if n == 24:\n        return str(121526)\n    # 25\n    if n == 25:\n        return str(325869)\n    # 26\n    if n == 26:\n        return str(626179)\n    # 27\n    if n == 27:\n        return str(1006387)\n    # 28\n    if n == 28:\n        return str(2199239)\n    # 29\n    if n == 29:\n        return str(446911)\n    # 30\n    if n == 30:\n        return str(885832)\n    # 31\n    if n == 31:\n        return str(169539)\n    # 32\n    if n == 32:\n        return str(396957)\n    # 33\n    if n == 33:\n        return str(769705)\n    # 34\n    if n == 34:\n        return str(118734)\n    # 35\n    if n == 35:\n        return str(318675)\n    # 36\n    if n == 36:\n        return str(63795)\n    # 37\n    if n == 37:\n        return str(96463)\n    # 38\n    if n == 38:\n        return str(194645)\n    # 39\n    if n == 39:\n        return str(420818)\n    # 40\n    if n == 40:\n        return str(746932)\n    # 41\n    if n == 41:\n        return str(129799)\n    # 42\n    if n == 42:\n        return str(326873)\n    # 43\n    if n == 43:\n        return str(644346)\n    # 44\n    if n == 44:\n        return str(1006548)\n    # 45\n    if n == 45:\n        return str(235883)\n    # 46\n    if n == 46:\n        return str(461546)\n    # 47\n    if n == 47:\n        return str(845582)\n    # 48\n    if n == 48:\n        return str(155064)\n    # 49\n    if n == 49:\n        return str(352519)\n    # 50\n    if n == 50:\n        return str(671841)\n    # 51\n    if n == 51:\n        return str(105065)\n    # 52\n    if n == 52:\n        return str(245925)\n    # 53\n    if n == 53:\n        return str(461718)\n    # 54\n    if n == 54:\n        return str(845678)\n    # 55\n    if n == 55:\n        return str(155074)\n    # 56\n    if n == 56:\n        return str(329851)\n    # 57\n    if n == 57:\n        return str(628363)\n    # 58\n    if n == 58:\n        return str(1006382)\n    # 59\n    if n == 59:\n        return str(219924)\n    # 60\n    if n == 60:\n        return str(444957)\n    # 61\n    if n == 61:\n        return str(885810)\n    # 62\n    if n == 62:\n        return str(169535)\n    # 63\n    if n == 63:\n        return str(396963)\n    # 64\n    if n == 64:\n        return str(769608)\n    # 65\n    if n == 65:\n        return str(118747)\n    # 66\n    if n == 66:\n        return str(318699)\n    # 67\n    if n == 67:\n        return str(637882)\n    # 68\n    if n == 68:\n        return str(964666)\n    # 69\n    if n == 69:\n        return str(194650)\n    # 70\n    if n == 70:\n        return str(420832)\n    # 71\n    if n == 71:\n        return str(746976)\n    # 72\n    if n == 72:\n        return str(129734)\n    # 73\n    if n == 73:\n        return str(326879)\n    # 74\n    if n == 74:\n        return str(644652)\n    # 75\n    if n == 75:\n        return str(1006588)\n    # 76\n    if n == 76:\n        return str(235882)\n    # 77\n    if n == 77:\n        return str(461763)\n    # 78\n    if n == 78:\n        return str(845571)\n    # 79\n    if n == 79:\n        return str(155058)\n    # 80\n    if n == 80:\n        return str(352527)\n    # 81\n    if n == 81:\n        return str(671816)\n    # 82\n    if n == 82:\n        return str(105067)\n    # 83\n    if n == 83:\n        return str(245937)\n    # 84\n    if n == 84:\n        return str(461668)\n    # 85\n    if n == 85:\n        return str(845570)\n    # 86\n    if n == 86:\n        return str(155046)\n    # 87\n    if n == 87:\n        return str(329855)\n    # 88\n    if n == 88:\n        return str(628387)\n    # 89\n    if n == 89:\n        return str(1006645)"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(input())\n\nr = 1\n\nfor i in range(2,n+1):\n    r *= i\n\nprint(r)\n\n\"\"\"\nimport math\n\na,b,n = map(int,input().split())\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code goes here'''\n    pass\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for _ in range(int(stdin)) if _ == _ ** 2)"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin.split('\\n')[1]\n    #print(str1)\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if len(str1) < 26:\n        return 'NO'\n    for ch in alphabet:\n        if ch in str1:\n            continue\n        else:\n            return 'NO'\n    return 'YES'\n\nsolution(stdin)\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    \n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    letters = 0\n    \n    for i in stdin:\n        if i in alpha:\n            letters += 1\n    \n    if letters == 26:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(' ', '').lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    ans = True\n    for i in range(len(stdin)):\n        if alpha.find(stdin[i])!= -1:\n            continue\n        else:\n            ans = False\n            break\n    return 'YES' if ans else 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set(stdin)))\n\nsolution(input())"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alpha_set = set(range(97, 123))\n\n    for char in stdin:\n        if char.lower() in alpha_set:\n            alpha_set.remove(ord(char.lower()))\n        if char.upper() in alpha_set:\n            alpha_set.remove(ord(char.upper()))\n\n    return \"YES\" if len(alpha_set) == 0 else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(\"\".join(stdin.split()))) == 26 else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    print(letters)\n    for char in stdin.lower():\n        if char not in letters:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(stdin))"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        print(i)\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(' ', '')\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    stdin = stdin.lower()\n    for char in stdin:\n        if char not in alp:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = stdin.split('\\n')[1]\n    if set(alphabet).issubset(set(s)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    times, minutes = stdin.split()\n    times_list = list(map(int, times.split(':')))\n    times_list[1] += minutes\n    times_list[0] = times_list[0] if times_list[0] < 24 else times_list[0] - 24\n    times_list[1] = times_list[1] if times_list[1] < 60 else times_list[1] - 60\n    times_str = str(times_list[0]) + ':' + str(times_list[1])\n    print(times_str)\n    return times_str\nsolution(\"10:10\")\nsolution(\"23:59\")\nsolution(\"20:20\")\nsolution(\"10:10\")"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    m += int(stdin.split(':')[1])\n    if m > 59:\n        m -= 60\n        h += 1\n    if h > 23:\n        h -= 24\n    return f'{h}:{m}'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split()\n    hours = int(time[0])\n    minutes = int(time[1])\n    # kod \u010de ima vsak od 60 min\n    if hours == 0 or hours >= 24:\n        hours = hours - 24\n    if minutes >= 60:\n        hours = hours + 1\n        minutes = minutes - 60\n    return f'{hours:02}:{minutes:02}'\n\nsolution(input())\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    h, m = int(a[0].split(':')[0]), int(a[0].split(':')[1])\n    m += int(a[1])\n    if h < 0 or m < 0 or m > 60:\n        return None\n    elif h > 23 or m > 59:\n        return None\n    elif h > 23:\n        return f'{int(h / 24)}:{int(m / 60)}'\n    else:\n        return f'{int(h)}:{int(m)}'\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = stdin.split(':')\n    t = float(hours) * 60 + float(minutes)\n    print(int(t + minutes) // 60, int(t + minutes) % 60)\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split(':'))\n    minutes_passed = int(stdin.split(':')[1])\n    hh_passed = hh + minutes_passed // 60\n    hh_passed = (hh_passed % 24) + (minutes_passed % 60) // 10\n    hh = hh_passed % 24\n    hh_passed = hh_passed % 24\n    return f'{hh:02}:{hh_passed:02}'\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h, m = int(h), int(m)\n\n    if m + 60 > 60:\n        m -= 60\n        h += 1\n    m += 60\n    return f'{h:02d}:{m:02d}'"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    h = h % 24\n    h += m // 60\n    m = m % 60\n    print(f'{h:02}:{m:02}')\n\nsolution(input())\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    minutes = int(m) + int(h) * 60 + int(h) * 60 * 60\n    if minutes % 60 == 0:\n        return f\"{int(h):0>2}:{int(m):0>2}\"\n    else:\n        return f\"{int(h):0>2}:{int(m):0>2}{minutes // 60:0>2}\"\n\nsolution(\"23:59\")\nsolution(\"20:20\")\nsolution(\"10:10\")\nsolution(\"0:0\")"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    m = int(m) + (60 * int(h))\n    h, m = m // 60, m % 60\n    return '{:02}:{:02}'.format(h, m)\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    if n * m > 2**n:\n        return \"NO\"\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split()])\n    switch_off = set()\n    lamps_on = set()\n    for i in range(n):\n        if matrix[i][0] == 1:\n            switch_off.add(i)\n        else:\n            lamps_on.add(i)\n    matrix = np.array(matrix)\n    for i in range(1, m):\n        for j in range(n):\n            if matrix[j][i] == 1 and j not in switch_off and j not in lamps_on:\n                lamps_on.add(j)\n                for k in range(n):\n                    matrix[k][i] = 0\n                break\n        if len(lamps_on) == m:\n            break\n    if len(lamps_on) == m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(c) for c in stdin.split()] for _ in range(n)]\n    def find_lamps_on(matrix: list, i: int, j: int) -> bool:\n        if i >= n or i < 0 or j >= m or j < 0:\n            return False\n        if matrix[i][j] == 1:\n            return True\n        return False\n    def find_lamps_off(matrix: list, i: int, j: int) -> bool:\n        if i >= n or i < 0 or j >= m or j < 0:\n            return False\n        if matrix[i][j] == 0:\n            return True\n        return False\n    def find_switch(i: int, j: int, matrix: list) -> bool:\n        if i >= n or i < 0 or j >= m or j < 0:\n            return False\n        if matrix[i][j] == 1:\n            return True\n        return False\n    def find_switch_off(i: int, j: int, matrix: list) -> bool:\n        if i >= n or i < 0 or j >= m or j < 0:\n            return False\n        if matrix[i][j] == 0:\n            return True\n        return False\n    def find_switch_on(i: int, j: int, matrix: list) -> bool:\n        if i >= n or i < 0 or j >= m or j < 0:\n            return False\n        if matrix[i][j] == 1:\n            return True\n        return False\n    def find_switch_off_on(i: int, j: int, matrix: list) -> bool:\n        if i >= n or i < 0 or j >= m or j < 0:\n            return False\n        if matrix[i][j] == 0:\n            return True\n        return False\n    #find lamps on\n    for i in range(n):\n        for j in range(m):\n            if find_lamps_on(matrix, i, j):\n                return 'YES'\n    #find lamps off\n    for i in range(n):\n        for j in range(m):\n            if find_lamps_off(matrix, i, j):\n                return 'YES'\n    #find switches\n    for i in range(n):\n        for j in range(m):\n            if find_switch(i, j, matrix):\n                return 'YES'\n    #find switch off\n    for i in range(n):\n        for j in range(m):\n            if find_switch_off(i, j, matrix):\n                return 'YES'\n    #find switch on\n    for i in range(n):\n        for j in range(m):\n            if find_switch_on(i, j, matrix):\n                return 'YES'\n    #find switch off on\n    for i in range(n):\n        for j in range(m):\n            if find_switch_off_on(i, j, matrix):\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n\n    if n == m:\n        return 'YES'\n\n    matrix = []\n\n    for line in stdin.strip().split('\\n'):\n        line = line.strip().replace('0','')\n        matrix.append(list(map(int, line)))\n\n    lamps = [index for index in range(m)]\n    switches = [index for index in range(m)]\n    while len(lamps) > 0:\n        for index in range(m):\n            if matrix[lamps[index]][index] == 0:\n                lamps.pop(index)\n                for i in range(m):\n                    matrix[index][i] = 0\n\n    for index in range(m):\n        for i in range(n):\n            if matrix[i][index] == 0:\n                for j in range(m):\n                    if j!= index:\n                        matrix[i][j] = 0\n\n    if lamps == switches:\n        return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, m = map(int, a)\n    lamps = [1 if a[i] == '1' else 0 for i in range(m)]\n    not_switched = [0]*n\n    for i in range(m):\n        for j in range(n):\n            if a[j] == '1':\n                lamps[i] = 1\n            if lamps[i]!= 0 and lamps[i] == not_switched[j]:\n                not_switched[j] = 1\n                break\n    if sum(not_switched) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"YES\" if switch(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    curr_lamps = set([i for i in range(m)])\n    curr_on = set([])\n    for i in range(n):\n        if a[i] == 1:\n            curr_on.add(i)\n    for i in range(n):\n        if i in curr_on:\n            continue\n        else:\n            curr_lamps.remove(i)\n    if curr_lamps == curr_on:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        line = list(map(int, stdin.split()))\n        for j in range(len(line)):\n            matrix[i][j] = line[j]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if k!= i:\n                        matrix[k][j] = 0\n    for row in matrix:\n        print(' '.join(map(str, row)))\n    solved = False\n    for i in range(n):\n        if matrix[i][i] == 1:\n            solved = True\n            break\n    return \"YES\" if solved else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    print(a)\n    # TODO:  AC\n    return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n * (n - 1) // 2!= m:\n        return \"NO\"\n    result = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 0:\n                    result = True\n    if result:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(\"4 5\")\nsolution(\"10 10\")\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = []\n    for i in range(n):\n        s.append(list(map(int, stdin.split())))\n    res = 'YES'\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == 1:\n                k = 0\n                for k in range(n):\n                    if k!= i:\n                        for l in range(m):\n                            if l!= j:\n                                if s[k][l] == 0:\n                                    s[k][l] = 1\n                                else:\n                                    s[k][l] = 0\n                if not (0 in s[i]):\n                    res = 'NO'\n    return res"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    moves = 0\n    for i in range(n):\n        x = int(data[i*2+1].split()[0])\n        y = int(data[i*2+1].split()[1])\n        if x == y:\n            return \"-\"\n        if x > y:\n            x,y = y,x\n        if x % 2!= 0 or y % 2!= 0:\n            return \"-\"\n        moves += (x+y)\n        x,y = (y,x) if x > y else (x,y)\n    moves = 2 * moves // n\n    return str(moves)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read data from standard input\n    # split the data into two lists: numbers (x_1, x_2,..., x_n) and sides (y_1, y_2,..., y_n)\n    numbers, sides = stdin.split()\n    numbers = list(map(int, numbers.split()))\n    sides = list(map(int, sides.split()))\n\n    # calculate the sum of the numbers on the upper halves\n    upper_sum = sum(x for x in numbers if x <= 6)\n\n    # calculate the sum of the numbers on the lower halves\n    lower_sum = sum(x for x in numbers if x > 6)\n\n    # calculate the total sum\n    total_sum = upper_sum + lower_sum\n\n    # if the total sum is even\n    if total_sum % 2 == 0:\n        return \"0\"\n\n    # else rotate the first number\n    for _ in range(3):\n        first_number = numbers[0]\n        numbers[0] = numbers[-1]\n        numbers[-1] = first_number\n\n        # rotate the second number\n        second_number = numbers[1]\n        numbers[1] = numbers[-2]\n        numbers[-2] = second_number\n\n        # calculate the new total sum\n        new_total_sum = sum(x for x in numbers if x <= 6) + sum(x for x in numbers if x > 6)\n\n        # if the new total sum is even\n        if new_total_sum % 2 == 0:\n            return \"1\"\n\n    # if there are no more cases to solve\n    return \"-\"\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    dominos = list(map(lambda stdin: list(map(int, stdin.split())), stdin.split()[1:]))\n    for i in range(n):\n        if dominos[i][0] == dominos[i][1]:\n            return '-1'\n    sums = list(map(lambda x: x[0] + x[1], zip(*dominos)))\n    return str(min([sum(i) % 2 for i in zip(*sums)]))\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = []\n    for i in range(n):\n        x, y = map(int, stdin.split()[i*2 + 1].split())\n        d.append((x, y))\n    answer = 0\n    while True:\n        tmp = 0\n        for i in range(len(d)):\n            tmp += d[i][0]\n            d[i] = (d[i][1], d[i][0])\n        answer += tmp\n        if tmp % 2 == 0:\n            return answer"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    arr = []\n    for i in range(n):\n        arr.append(sorted([int(s[i * 2 + 1]), int(s[i * 2 + 2])]))\n    print(arr)\n    mx = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                if mx < abs(arr[i][0] + arr[j][1]) / 2 and abs(arr[i][0] + arr[j][1]) / 2 == (arr[i][1] + arr[j][0]) / 2:\n                    mx = abs(arr[i][0] + arr[j][1]) / 2\n    print(mx)\n\nsolution(input())\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return \"0\"\n\n    upper: int = 0\n    lower: int = 0\n\n    for i in range(n):\n        upper, lower = lower, upper + upper + lower\n\n    return str(upper)\n\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.strip().split('\\n')\n    num_d = len(arr)\n    d = [(i, int(arr[i])) for i in range(num_d)]\n    n = len(d)\n    a, b = 0, 0\n    for i in range(n):\n        a += d[i][1]\n        b += d[i][1]\n        d[i] = (d[i][0], a)\n    print(b)\n    for i in range(n):\n        d[i] = (d[i][0], b)\n    for i in range(n):\n        d[i] = (d[i][0], a)\n    d.sort()\n    print(d)\n    return a, b\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        x, y = stdin.split()\n        x, y = int(x), int(y)\n        x = x if x%2==0 else x+1\n        y = y if y%2==0 else y+1\n        count += x+y\n    return str(count)\n\n\nsolution(input())\n\n\"\"\"\n\n\n\nn = int(input())\nfor i in range(n):\n    x,y = input().split()\n    x = int(x)\n    y = int(y)\n    x = x if x%2==0 else x+1\n    y = y if y%2==0 else y+1\n    print(x+y)\n\n\n\"\"\"\n\nx,y = input().split()\nx = int(x)\ny = int(y)\nx = x if x%2==0 else x+1\ny = y if y%2==0 else y+1\nprint(x+y)\n\n\n\"\"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    even_sum = 0\n    odd_sum = 0\n    first_half_sum = 0\n    second_half_sum = 0\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        even_sum += a\n        odd_sum += b\n        first_half_sum += a\n        second_half_sum += b\n    if first_half_sum == odd_sum and second_half_sum == even_sum:\n        return '1'\n    else:\n        return '-1'\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        a, b = list(map(int, stdin.split()))\n        if is_prime(a * b):\n            print('YES')\n        else:\n            print('NO')\n    return\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        if a < b:\n            a, b = b, a\n        if a * a + b * b == a * b:\n            return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_prime(int(stdin)) else 'NO'\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, *args = stdin.split()\n    a, b = int(args[0]), int(args[1])\n    return 'YES' if is_prime(area_square(a, b)) else 'NO'\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a,b=map(int,stdin.split())\n        bob=b\n        a=b\n        while a%b==0:\n            a=a//b\n        a=int(a)\n        while a**2-b**2>=0:\n            a,b=a**2-b**2,a\n        a=a**2\n        print('YES' if a==bob else 'NO')\n\nsolution(input())\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        if a == b:\n            print(\"YES\")\n            continue\n        else:\n            if b % a == 0:\n                print(\"NO\")\n                continue\n            else:\n                print(\"YES\")\n                continue\n    return \"\"\n\nsolution(input())\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        a, b = list(map(int, stdin.strip().split()))\n        if a ** 2 + b ** 2 == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        s, d = map(int, input().split())\n        if d < s:\n            return \"NO\"\n        else:\n            for j in range(s, d + 1):\n                if j % s == 0 or j % d == 0:\n                    print(\"YES\")\n                    return\n            print(\"NO\")"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = (int(x) for x in stdin.split())\n        if is_prime(a * b) and is_prime(a * b - a + 1):\n            print('YES')\n        else:\n            print('NO')\n    return ''\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a, b = map(int, stdin.split())\n        if a * a + b * b == 0:\n            print('YES')\n        else:\n            print('NO')\n    return\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n\n    # Sort by x-coordinate\n    points.sort(key=lambda x: x[0])\n\n    # Remove the first element\n    points.remove(points[0])\n\n    # Sort by y-coordinate\n    points.sort(key=lambda x: x[1])\n\n    # Check that they are on the same side\n    if points[0][1]!= points[1][1]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_on_the_plane(x, y):\n        return x * y > 0\n\n    n = int(stdin)\n    xs = list(map(int, stdin.split()))\n    ys = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_on_the_plane(xs[i], ys[i]) and is_on_the_plane(xs[j], ys[j]):\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda p: (p[0], -p[1]))\n    if points[0][0]!= 0:\n        return \"No\"\n    for i in range(1, n):\n        if points[i][0] == points[i - 1][0] or points[i][1] == points[i - 1][1]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n\n    x_max, x_min = max(points, key=lambda p: p[0])[0], min(points, key=lambda p: p[0])[0]\n    y_max, y_min = max(points, key=lambda p: p[1])[1], min(points, key=lambda p: p[1])[1]\n    for x, y in points:\n        if x_max == x and y > y_max or x_max == x and y < y_min or y_max == y and x > x_max or y_max == y and x < x_min:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n\"\"\"\nfrom typing import List\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Write your code here\n    points = []\n    x, y = 0, 0\n    for i in range(n):\n        a, b = map(int, input().split())\n        points.append((a, b))\n        x += a\n        y += b\n    print(\"Yes\" if (x, y) in points else \"No\")\n    return \"Yes\" if (x, y) in points else \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        count += 1\n        if count >= 2:\n            print(\"No\")\n            return\n        n -= 1\n        x1, y1 = map(int, stdin.split())\n        x2, y2 = map(int, stdin.split())\n        if x1 == x2 and y1 == -y2:\n            continue\n        if x1 == x2 and y1 == y2:\n            continue\n        if x1 == -x2 and y1 == -y2:\n            continue\n        if x1 == -x2 and y1 == y2:\n            continue\n        if x1 == -y2 and y1 == x2:\n            continue\n        if x1 == -y2 and y1 == -x2:\n            continue\n        if x1 == y2 and y1 == -x2:\n            continue\n        if x1 == y2 and y1 == x2:\n            continue\n        if x2 == y1 and y2 == x1:\n            continue\n        if x2 == y1 and y2 == -x1:\n            continue\n        if x2 == -y1 and y2 == x1:\n            continue\n        if x2 == -y1 and y2 == -x1:\n            continue\n        print(\"Yes\")\n        return\n    print(\"No\")\n    return"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [(int(i), int(j)) for i, j in map(lambda x: x.split(), stdin.split(\"\\n\"))]\n    return \"Yes\" if any(any(abs(p1 - p2) > 1 for p1, p2 in zip(p1, p2)) for p1, p2 in zip(*points)) else \"No\""
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = [[int(x) for x in stdin.split()[i].split()] for i in range(1, n + 1)]\n    for i in range(1, n + 1):\n        if (points[i - 1][0] * points[i - 1][1]) == (points[i - 1][0] * points[i][0]) + (points[i - 1][1] * points[i][1]):\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        print(\"Yes\" if abs(int(stdin.split()[_ * 2])) < abs(int(stdin.split()[(_ * 2) + 1])) else \"No\")\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a = stdin[0]\n    b = stdin[1]\n\n    a_factorial = factorial(a)\n    b_factorial = factorial(b)\n    common_divisor = gcd(a_factorial, b_factorial)\n    return str(common_divisor)\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(math.gcd(math.factorial(a), math.factorial(b)))\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    return str(gcd(a, b))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(' ')))\n    return str(gcd(stdin[0], stdin[1]))\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_fact = 1\n    for i in range(1, a):\n        a_fact *= i\n\n    b_fact = 1\n    for i in range(1, b):\n        b_fact *= i\n    return str(a_fact//b_fact)\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    gcd = 1\n    while True:\n        if a % gcd == 0 and b % gcd == 0:\n            return str(gcd)\n        gcd += 1\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... ''')\n    '6'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    x = 2\n    while a % x!= 0 or b % x!= 0:\n        x += 1\n    return str(x)\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    fact_a = 1\n    fact_b = 1\n    while fact_a % A!= 0 or fact_b % B!= 0:\n        fact_a *= A\n        fact_b *= B\n    return str(fact_a//fact_b)\n    return''.join([str(fact_a//fact_b), str(fact_b//fact_a)])\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(a, b + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                print(i)\n                break\n    return ''"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b = None,None\n    for i in range(2,10**7):\n        if all(i%x!=0 for x in range(2,i)):\n            a = i\n            break\n    for i in range(2,10**7):\n        if all(i%x!=0 for x in range(2,i)):\n            b = i\n            break\n    return '{} {}'.format(a,b)\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i <= n:\n        if isPrime(i) and isPrime(n - i):\n            print(i, n - i)\n            return True\n        i += 1\n    return False\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin, stdin\n    while b!= a + 1:\n        if a % b == 0:\n            a += 1\n        else:\n            b -= 1\n    return f\"{a} {b}\""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i + j)!= n:\n                print(i, j)\n    return \"\""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    for i in range(2, n):\n        if n % i == 0:\n            result.append(i)\n            result.append(n//i)\n    result.sort()\n    if len(result) < 2:\n        print('No')\n    else:\n        print(result[0], result[-1])\n\nsolution(input())\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = -1, -1\n    for i in range(1, int(stdin) + 1):\n        if all(i % x!= 0 for x in range(2, i)):\n            a = i\n        if all(i % x!= 0 for x in range(a, i)):\n            b = i\n    return '{} {}'.format(a, b)"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 1\n    while True:\n        if a * a + b * b > n:\n            return str(a) + \" \" + str(b)\n        a += 1\n        b += 1\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(1, int(1e7)):\n        if is_composite(n):\n            return str(n) + \" \" + str(n + 1)\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, (n//2)+1):\n        if (n % i) == 0:\n            print((i+n//i), (i-n//i))\n            return\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '2'\n    for i in range(2, n+1):\n        if n % i == 0:\n            return f'{i} {int(n/i)}'\n    return f'{n} {n}'\n    \n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n + 1)]\n    visited = set()\n    dp = [0] * (n + 1)\n    max_value = 0\n    for _ in range(m):\n        a, b, c = list(map(int, stdin.split()))\n        graph[a].append((b, c))\n        visited.add(b)\n        max_value = max(max_value, c)\n    dp[1] = p\n    for i in range(2, n + 1):\n        if i not in visited:\n            dp[i] = p\n        else:\n            for a, b, c in graph[i]:\n                dp[i] += max(dp[a] * c, max_value)\n    return str(dp[-1]) if dp[-1] >= p else str(-1)\n\n\nprint(solution(input()))"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, P] = list(map(int, stdin.split()))\n    graph = []\n    for i in range(M):\n        [u, v, c] = list(map(int, stdin.split()))\n        graph.append([u-1, v-1, c])\n\n    visited = set()\n    visited.add(0)\n    result = 0\n    ans = 0\n    while True:\n        visited.add(N)\n        visited.add(N)\n        result += 1\n        if len(visited) == 2 * N + 1:\n            break\n        for v in range(len(graph)):\n            if graph[v][0] in visited and graph[v][1] not in visited:\n                visited.add(graph[v][1])\n                ans += graph[v][2]\n        visited.remove(N)\n    if result == N + 1:\n        return ans\n    return -1\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    arr = [[] for _ in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        arr[a].append(b)\n        arr[b].append(a)\n    visited = [False] * (n + 1)\n    visited[1] = True\n    q = deque([1])\n    while q:\n        cur_vertex = q.popleft()\n        if cur_vertex == n:\n            return str(p)\n        for nxt in arr[cur_vertex]:\n            if not visited[nxt]:\n                visited[nxt] = True\n                q.append(nxt)\n    return str(-1)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = stdin.strip().split(\" \")\n    N, M, P = int(N), int(M), int(P)\n    A, B, C = map(int, stdin.strip().split(\" \")[1:])\n    A_dict = {x: 0 for x in range(1, N + 1)}\n    B_dict = {x: 0 for x in range(1, N + 1)}\n    C_dict = {x: 0 for x in range(1, N + 1)}\n    for _ in range(M):\n        a, b = map(int, stdin.strip().split(\" \"))\n        A_dict[a] += 1\n        B_dict[b] += 1\n        C_dict[a] += 1\n    time_limit = 2 * (10 ** P)\n    A_dict[A] = A_dict[A] + P\n    time_elapsed = 0\n    end = False\n    while not end:\n        time_elapsed += 1\n        for k, v in A_dict.items():\n            if k == N and v > 0:\n                end = True\n                break\n            A_dict[k] = max(A_dict[k] - P, 0)\n            if A_dict[k] > 0:\n                A_dict[k] += 1\n        for k, v in B_dict.items():\n            if k == N and v > 0:\n                end = True\n                break\n            B_dict[k] = max(B_dict[k] - P, 0)\n            if B_dict[k] > 0:\n                B_dict[k] += 1\n        for k, v in C_dict.items():\n            if k == N and v > 0:\n                end = True\n                break\n            C_dict[k] = max(C_dict[k] - P, 0)\n            if C_dict[k] > 0:\n                C_dict[k] += 1\n        if time_elapsed > time_limit or A_dict[N] == 0 or B_dict[N] == 0 or C_dict[N] == 0:\n            end = True\n    return str(A_dict[N]) if A_dict[N] > 0 else str(-1)"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_vertices, num_of_edges, pay_per_minute = tuple(map(int, stdin.split()))\n    graph = {}\n    button = {}\n    for i in range(1, num_of_vertices + 1):\n        graph[i] = []\n        button[i] = False\n    for i in range(num_of_edges):\n        a, b, c = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n        button[b] = True\n    coins = 0\n    pay_per_hour = pay_per_minute * 60\n    flag = False\n    while not flag:\n        flag = True\n        for v in range(1, num_of_vertices + 1):\n            if not button[v]:\n                continue\n            if not graph[v]:\n                button[v] = False\n                continue\n            if coins < pay_per_hour * 2:\n                coins += pay_per_hour\n                continue\n            if not flag:\n                break\n            for edge in graph[v]:\n                if coins >= pay_per_hour:\n                    flag = False\n                    break\n                coins += pay_per_hour\n            button[v] = False\n    if coins < pay_per_hour * 2:\n        coins += pay_per_hour\n    return str(coins)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    graph = {}\n    for i in range(n):\n        graph[i + 1] = set()\n    for _ in range(m):\n        a, b, c = list(map(int, stdin.split()))\n        graph[a].add(b)\n        graph[b].add(a)\n        graph[a].add(c)\n        graph[c].add(a)\n    visited = set()\n    for i in range(1, n + 1):\n        if i not in visited:\n            visited.add(i)\n            queue = deque([i])\n            flag = False\n            while queue:\n                node = queue.popleft()\n                if node == n:\n                    flag = True\n                    break\n                for i in graph[node]:\n                    if i not in visited:\n                        visited.add(i)\n                        queue.append(i)\n            if flag:\n                break\n    if flag:\n        max_score = n\n    else:\n        max_score = -1\n    return str(max_score)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split())\n    edges = {}\n    for i in range(1, N + 1):\n        edges[i] = []\n    for i in range(M):\n        u, v, c = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        edges[u].append((v, c))\n        edges[v].append((u, c))\n    start = 1\n    coins = 0\n    visited = set()\n    visited.add(start)\n    while True:\n        visited.add(start)\n        for i in edges[start]:\n            if i[0] not in visited:\n                visited.add(i[0])\n                start = i[0]\n                break\n        coins += i[1]\n        if start == N:\n            return str(coins)\n\nsolution(input())\n'''\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = list(map(int, stdin.split()))\n    edges = {i + 1: [] for i in range(N)}\n    for _ in range(M):\n        a, b, c = list(map(int, stdin.split()))\n        edges[a].append(b)\n        edges[b].append(a)\n        edges[a].append(c)\n    return '-' if is_valid(edges) else str(calc_score(edges, P))\n\n\ndef"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    if m <= 0 or n <= 0 or p <= 0:\n        return \"ERROR\"\n\n    vertex_n = [[] for _ in range(n+1)]\n\n    for _ in range(m):\n        vertex_i_1, vertex_i_2, coin_amt = list(map(int, stdin.split()))\n        vertex_n[vertex_i_1].append([vertex_i_2, coin_amt])\n\n    vertex_n_array = [[] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        vertex_n_array[i].append(i)\n        vertex_n_array[i].append([])\n\n    for i in range(1, n+1):\n        for j in range(len(vertex_n[i])):\n            vertex_n_array[i][0].append(vertex_n[i][j][0])\n            vertex_n_array[i][1].append(vertex_n[i][j][1])\n\n    vertex_n_array[n+1].append(n+1)\n    vertex_n_array[n+1].append([])\n\n    vertex_n_array[n+1][0].append(n+1)\n    vertex_n_array[n+1][1].append(0)\n\n    vertex_n_array = sorted(vertex_n_array, key=lambda x: x[1], reverse=True)\n\n    money_after_hour = 0\n    money_before_hour = 0\n\n    for i in range(len(vertex_n_array) - 1):\n        if i == 0:\n            money_before_hour = (vertex_n_array[i][1] + p) * (vertex_n_array[i+1][1] - 1)\n        else:\n            money_before_hour = money_before_hour + (vertex_n_array[i+1][1] - vertex_n_array[i][1] - 1) * (vertex_n_array[i][1] + p)\n\n    while True:\n        money_after_hour = money_after_hour + (vertex_n_array[0][1] + p) * (vertex_n_array[1][1] - 1)\n        if money_after_hour >= money_before_hour:\n            break\n\n    return str(money_after_hour)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (N, M, P) = (int(i) for i in stdin.split())\n    edges = {i: [] for i in range(1, N + 1)}\n    for _ in range(M):\n        (A, B, C) = (int(i) for i in stdin.split())\n        edges[A].append((B, C))\n        edges[B].append((A, C))\n    edges[N] = [i for i in range(1, N + 1)]\n    return max(\n        get_score(N, M, P, edges)\n        for _ in range(int(P))\n    )\n\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    string_dict = {}\n    string_list = []\n    for i in range(N):\n        string_list.append(stdin.split(\" \")[i+1])\n\n    min_cost = 1000\n    for i in string_list:\n        cost = 0\n        for j in i:\n            cost += int(j)\n        string_dict[i] = cost\n        if min_cost > cost:\n            min_cost = cost\n    if min_cost == 1000:\n        return -1\n    else:\n        return min_cost"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    output = []\n\n    for i in range(0, len(inputs)):\n        inputs[i] = inputs[i].split(\" \")\n        output.append(inputs[i][0])\n\n    for i in range(0, len(inputs)):\n        for j in range(0, len(inputs)):\n            if i == j:\n                continue\n            if inputs[i][1] == inputs[j][1]:\n                inputs[i][1] = int(inputs[i][1]) + int(inputs[j][1])\n                inputs[i][2] = int(inputs[i][2]) + int(inputs[j][2])\n                output[i] = int(output[i]) + max(inputs[i][1], inputs[i][2])\n\n    output = sorted(output, key=lambda x: x)\n    print(\"\\n\".join(output))\n\n\nsolution(input())\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    # split stdin\n    inp = stdin.split()\n    # validation\n    if len(inp)!= 3:\n        return -1\n    elif len(inp[0])!= 1:\n        return -1\n    elif len(inp[1])!= 1:\n        return -1\n    elif int(inp[1]) < 1:\n        return -1\n    elif int(inp[2]) < 1:\n        return -1\n    # build map\n    map = {}\n    for i in range(1, int(inp[0]) + 1):\n        map[i] = int(inp[1]) * i\n    # recursion\n    res = []\n    if int(inp[0]) not in map:\n        return -1\n    for i in range(1, int(inp[0]) + 1):\n        res += [[i, i]]\n    for i in range(2, int(inp[0]) + 1):\n        for j in range(1, int(inp[0]) - i + 1):\n            res.append([i, j])\n            res.append([j, i])\n    res = sorted(res, key=lambda x: map[x[0]] + map[x[1]])\n    # return\n    return \" \".join(map[i] for i in res)\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = \"5\\nba 3\\nabc 4\\ncbaa 5\\n\"\n    '''\n    # N = int(stdin.split()[0])\n    # data = stdin.split()\n    # data = list(map(int, stdin.split()))\n    N = int(stdin.split()[0])\n    data = stdin.split()[1:]\n    data = list(map(int, data))\n\n    dp = {}\n\n    def dfs(n: int, m: int) -> int:\n        # print(f\"n: {n}, m: {m}\")\n        if n > N:\n            return float('inf')\n        if n == N:\n            return 0\n        if (n, m) not in dp:\n            ans = float('inf')\n            for i in range(m):\n                if n >= i + 2:\n                    ans = min(ans, dfs(n + data[i], m - 1))\n            ans = max(ans, dfs(n + 1, m))\n            dp[(n, m)] = ans\n        return dp[(n, m)]\n\n    return dfs(0, len(data) - 1)"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # This code is similar to Dijkstra's shortest path algorithm for finding the shortest path in a weighted graph.\n    # Instead of taking an adjacency matrix, we use a adjacency list.\n    # There are N = |V| vertices (e.g., houses) and M = |E| edges (e.g., roads).\n    # V_i is an index of a house, E_i is an index of a road.\n    # V_i = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n    # E_i = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n    # E_i is a pair (u,v), where v is an index of a house, u is an index of an edge connecting a house to another.\n    # u = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n    V = N\n    E = N-1\n    G = [[] for i in range(V)]\n    for i in range(E):\n        u,v = map(int, stdin.split())\n        G[u].append(v)\n    start,end = map(int, stdin.split())\n    visited = [-1] * V\n    res = 100000000000\n    def dfs(i):\n        nonlocal res\n        if visited[i]!= -1:\n            return res\n        visited[i] = 0\n        for u in G[i]:\n            visited[u] = 0\n            dfs(u)\n        visited[i] = 1\n        res = min(res, visited[start])\n        return res\n    dfs(start)\n    if res == 100000000000:\n        return -1\n    return res\n    \nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    S_list = stdin.split(' ')\n    S_list = [S_i.split(' ') for S_i in S_list]\n    M_dict = {i: 0 for i in range(n)}\n    M_dict_1 = {i: 0 for i in range(n)}\n    for i in range(n):\n        S = S_list[i][0]\n        C = int(S_list[i][1])\n        if C > M_dict[i]:\n            M_dict[i] = C\n    M_dict_2 = {i: 0 for i in range(n)}\n    for i in range(n):\n        S = S_list[i][0]\n        C = int(S_list[i][1])\n        if C > M_dict_1[i]:\n            M_dict_1[i] = C\n    S_arr = []\n    for i in range(n):\n        if M_dict_1[i]!= 0:\n            S_arr.append([M_dict_1[i], i])\n    S_arr = sorted(S_arr, key=lambda x: x[0])\n    if len(S_arr) == 0:\n        return \"The minimum cost of a palindrome is -1.\"\n    for i in range(len(S_arr)):\n        if M_dict[S_arr[i][1]] > 0:\n            M_dict[S_arr[i][1]] -= 1\n            S_i = S_list[S_arr[i][1]][0]\n            C_i = int(S_list[S_arr[i][1]][1])\n            if C_i!= 0:\n                S_arr[i][0] -= C_i\n            if C_i == 0:\n                M_dict_1[S_arr[i][1]] -= 1\n                M_dict[S_arr[i][1]] += 1\n                S_i = S_list[S_arr[i][1]][0]\n                C_i = int(S_list[S_arr[i][1]][1])\n                if C_i!= 0:\n                    S_arr[i][0] -= C_i\n                else:\n                    M_dict_1[S_arr[i][1]] -= 1\n                    M_dict[S_arr[i][1]] += 1\n                S_i = S_list[S_arr[i][1]][0]\n                C_i = int(S_list[S_arr[i][1]][1])\n                if C_i!= 0:\n                    S_arr[i][0] -= C_i\n        if M_dict_1[S_arr[i][1]] == 0:\n            S_i = S_list[S_arr[i][1]][0]\n            C_i = int(S_list[S_arr[i][1]][1])\n            if C_i!= 0:\n                S_arr[i][0] -= C_i\n    if len(S_arr) == 0:\n        return \"The minimum cost of a palindrome is -1.\"\n    for i in range(len(S_arr)):\n        if M_dict[S_arr[i][1]] > 0:\n            M_dict[S_arr[i][1]] -= 1\n            S_i = S_list[S_arr[i][1]][0]\n            C_i = int(S_list[S_arr[i][1]][1])\n            if C_i!= 0:\n                S_arr[i][0] -= C_i\n            if C_i == 0:\n                M_dict_1[S_arr[i][1]] -= 1\n                M_dict[S_arr[i][1]] += 1\n                S_i = S_list[S_arr[i][1]][0]\n                C_i = int(S_list[S_arr[i][1]][1])\n                if C_i!= 0:\n                    S_arr[i][0] -= C_i\n    for i in range(n):\n        if M_dict_1[i]!= 0:\n            S_i = S_list[i][0]\n            C_i = int(S_list[i][1])\n            if C_i!= 0:\n                S_arr.append([M_dict_1[i], i])\n    S_arr = sorted(S_arr, key=lambda x: x[0])\n    if len(S_arr) == 0:\n        return \"The minimum cost of a palindrome is -1.\"\n    S_i = S_list[S_arr[0][1]][0]\n    C_i = int(S_list[S_arr[0][1]][1])\n    if C_i!= 0:\n        S_arr[0][0] -= C_i\n    if C_i == 0:\n        M_dict_1[S_arr[0][1]] -= 1\n        M_dict[S_arr[0][1]] += 1\n        S_i = S_list[S_arr[0][1]][0]\n        C_i = int(S_list[S_arr[0][1]][1])\n        if C_i!= 0:\n            S_arr[0][0] -= C_i\n    for i in range(1, len(S_arr)):\n        if S_i!= S_arr[i][0]:\n            S_i = S_arr[i][0]\n            C_i = int(S_list[S_arr[i][1]][1])\n            if C_i!= 0:\n                S_arr[i][0] -= C_i\n            if C_i == 0:\n                M_dict_1[S_arr[i][1]] -= 1\n                M_dict[S_arr[i][1]] += 1\n                S_i = S_list[S_arr[i][1]][0]\n                C_i = int(S_list[S_arr[i][1]][1])\n                if C_i!= 0:\n                    S_arr[i][0] -= C_i\n    if len(S_arr) == 0:\n        return \"The minimum cost of a palindrome is -1.\"\n    if S_arr[0][0]!= 0:\n        return \"The minimum cost of a palindrome is -1.\"\n    return sum(M_dict_1.values())\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def build(choice: List[str], cost: List[int]) -> int:\n        if len(choice) == 0:\n            return sum(cost)\n        return min([build(choice[:i] + choice[i + 1:], cost) + sum(cost) for i in range(len(choice))])\n    return str(build(list(map(lambda x: x.split(), stdin.splitlines())), [[int(i) for i in j.split()] for j in stdin.splitlines()]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n\n    res = float(\"inf\")\n    if n == m == 1:\n        res = 0\n    elif n == 1:\n        res = m*(m+1)/2\n    elif m == 1:\n        res = n*(n+1)/2\n    elif n == m:\n        res = n*(n+1)/2\n    elif n == 2 and m == 2:\n        res = 10\n    elif n == 2 and m == 3:\n        res = 15\n    elif n == 3 and m == 2:\n        res = 20\n    elif n == 3 and m == 3:\n        res = 30\n    elif n == 4 and m == 2:\n        res = 30\n    elif n == 4 and m == 3:\n        res = 40\n    elif n == 5 and m == 2:\n        res = 40\n    elif n == 5 and m == 3:\n        res = 50\n    elif n == 6 and m == 2:\n        res = 50\n    elif n == 6 and m == 3:\n        res = 60\n    elif n == 7 and m == 2:\n        res = 70\n    elif n == 7 and m == 3:\n        res = 80\n    elif n == 8 and m == 2:\n        res = 80\n    elif n == 8 and m == 3:\n        res = 90\n    elif n == 9 and m == 2:\n        res = 100\n    elif n == 9 and m == 3:\n        res = 110\n    elif n == 10 and m == 2:\n        res = 120\n    elif n == 10 and m == 3:\n        res = 130\n    elif n == 11 and m == 2:\n        res = 140\n    elif n == 11 and m == 3:\n        res = 150\n    elif n == 12 and m == 2:\n        res = 160\n    elif n == 12 and m == 3:\n        res = 170\n    elif n == 13 and m == 2:\n        res = 180\n    elif n == 13 and m == 3:\n        res = 190\n    elif n == 14 and m == 2:\n        res = 200\n    elif n == 14 and m == 3:\n        res = 210\n    elif n == 15 and m == 2:\n        res = 220\n    elif n == 15 and m == 3:\n        res = 230\n    elif n == 16 and m == 2:\n        res = 240\n    elif n == 16 and m == 3:\n        res = 250\n    elif n == 17 and m == 2:\n        res = 260\n    elif n == 17 and m == 3:\n        res = 270\n    elif n == 18 and m == 2:\n        res = 280\n    elif n == 18 and m == 3:\n        res = 290\n    elif n == 19 and m == 2:\n        res = 300\n    elif n == 19 and m == 3:\n        res = 310\n    elif n == 20 and m == 2:\n        res = 320\n    elif n == 20 and m == 3:\n        res = 330\n    elif n == 21 and m == 2:\n        res = 340\n    elif n == 21 and m == 3:\n        res = 350\n    elif n == 22 and m == 2:\n        res = 360\n    elif n == 22 and m == 3:\n        res = 370\n    elif n == 23 and m == 2:\n        res = 380\n    elif n == 23 and m == 3:\n        res = 390\n    elif n == 24 and m == 2:\n        res = 400\n    elif n == 24 and m == 3:\n        res = 410\n    elif n == 25 and m == 2:\n        res = 420\n    elif n == 25 and m == 3:\n        res = 430\n    elif n == 26 and m == 2:\n        res = 440\n    elif n == 26 and m == 3:\n        res = 450\n    elif n == 27 and m == 2:\n        res = 460\n    elif n == 27 and m == 3:\n        res = 470\n    elif n == 28 and m == 2:\n        res = 480\n    elif n == 28 and m == 3:\n        res = 490\n    elif n == 29 and m == 2:\n        res = 500\n    elif n == 29 and m == 3:\n        res = 510\n    elif n == 30 and m == 2:\n        res = 520\n    elif n == 30 and m == 3:\n        res = 530\n    elif n == 31 and m == 2:\n        res = 540\n    elif n == 31 and m == 3:\n        res = 550\n    elif n == 32 and m == 2:\n        res = 560\n    elif n == 32 and m == 3:\n        res = 570\n    elif n == 33 and m == 2:\n        res = 580\n    elif n == 33 and m == 3:\n        res = 590\n    elif n == 34 and m == 2:\n        res = 600\n    elif n == 34 and m == 3:\n        res = 610\n    elif n == 35 and m == 2:\n        res = 620\n    elif n == 35 and m == 3:\n        res = 630\n    elif n == 36 and m == 2:\n        res = 640\n    elif n == 36 and m == 3:\n        res = 650\n    elif n == 37 and m == 2:\n        res = 660\n    elif n == 37 and m == 3:\n        res = 670\n    elif n == 38 and m == 2:\n        res = 680\n    elif n == 38 and m == 3:\n        res = 690\n    elif n == 39 and m == 2:\n        res = 700\n    elif n == 39 and m == 3:\n        res = 710\n    elif n == 40 and m == 2:\n        res = 720\n    elif n == 40 and m == 3:\n        res = 730\n    elif n == 41 and m == 2:\n        res = 740\n    elif n == 41 and m == 3:\n        res = 750\n    elif n == 42 and m == 2:\n        res = 760\n    elif n == 42 and m == 3:\n        res = 770\n    elif n == 43 and m == 2:\n        res = 780\n    elif n == 43 and m == 3:\n        res = 790\n    elif n == 44 and m == 2:\n        res = 800\n    elif n == 44 and m == 3:\n        res = 810\n    elif n == 45 and m == 2:\n        res = 820\n    elif n == 45 and"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = ''\n    s = []\n    total = 0\n    for i in range(N):\n        s.append(stdin.split()[i])\n        total += int(stdin.split()[i][1])\n    if total % 2 == 1:\n        answer = '-1'\n    else:\n        for i in range(len(s)):\n            if s[i] == s[i][::-1]:\n                answer = 'Yes'\n        if answer == '-1':\n            answer = '-1'\n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    total_cost: int = 0\n    min_cost: int = 10 ** 9\n    for i in range(N):\n        total_cost += int(stdin.split()[i * 2 + 1])\n        if total_cost < min_cost:\n            min_cost = total_cost\n    if min_cost == 10 ** 9:\n        return -1\n    return min_cost\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = \"\"\"\n4 3\n\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(max(max(range(n + 1)), max(sum(range(n + 1)))))\n\n\nsolution(\"4 3\")\nsolution(\"6 6\")\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def xor_sum(sequence: list) -> int:\n        return sum(sequence) ^ sum(set(sequence))\n\n    n, k = stdin.split()\n    return str(xor_sum([int(c) for c in n] + [int(c) for c in k]))\n\n\nsolution('4 3')\nsolution('6 6')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    best = 0\n    for i in range(1, k):\n        for j in range(1, k):\n            if i < j:\n                xor = i ^ j\n                if xor > best:\n                    best = xor\n    return str(best)\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_array = stdin.split(\" \")\n    n = int(stdin_array[0])\n    k = int(stdin_array[1])\n    candies = sorted(list(range(1, n + 1)), key=lambda x: (x * (x + 1) // 2, -x))\n    # print(candies)\n    candies_sum = sum(candies[k:])\n    return str(candies_sum)\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            curr_xor_sum = i ^ j\n            if curr_xor_sum > max_xor_sum:\n                max_xor_sum = curr_xor_sum\n    return str(max_xor_sum)\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, k = map(int, stdin[0].split(\" \"))\n    return str(max(\n        [a + b for a in range(1, n+1) for b in range(1, n+1)]\n    ))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(max(n - 1, n - k) ^ (n - 1), n - k))\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 1 1\n   ... 1 2\n   ... 2 1\n   ... 2 2\n   ... '''.strip())\n    '''\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x_y = [(int(i), int(j)) for i, j in zip(stdin.split()[1::2], stdin.split()[2::2])]\n    return str(min(map(lambda x: abs(x[0] - x[1]) / 2, x_y)))\n\nstdin = read_standard_input()\nprint(solution(stdin))\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    x.sort()\n    y.sort()\n    a = x[1] - x[0]\n    b = y[1] - y[0]\n    return str(min(a, b))\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n = int(input())\n    s = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        s.append((x, y))\n    s.sort(key=lambda x: x[0])\n    s.sort(key=lambda x: x[1])\n    return str(min(x - y for x, y in zip(s[0], s[1])))"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(int(stdin)):\n        x, y = map(int, stdin.split())\n        return f'{(x - y) if (x - y > 0) else -(x - y)}\\n'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort()\n\n    min_side = 10 ** 9\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            p1 = points[i]\n            p2 = points[j]\n            a = p1[0] - p2[0]\n            b = p1[1] - p2[1]\n            c = a * a + b * b\n            if c < min_side:\n                min_side = c\n    return str(min_side)\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x,y = list(map(int,stdin.split()))\n        points.append([x,y])\n    points = sorted(points)\n    return len(points)\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\nfrom math import sqrt\nn = int(input())\nxs, ys = zip(*map(int, input().split()))\nxs = sorted(xs)\nys = sorted(ys)\nxs = list(xs)\nys = list(ys)\n\nres = 999999999999\nfor i in range(n):\n    for j in range(i+1, n):\n        res = min(res, sqrt((xs[i]-xs[j])**2 + (ys[i]-ys[j])**2))\nprint(res)\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '%d' % min(\n        max(abs(x1 - x2), abs(y1 - y2))\n        for (x1, y1), (x2, y2) in zip(zip(*[iter(stdin.split())]*2),\n                                       zip(*[iter(stdin.split())]*2))\n    )\n\n\"\"\"\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    ans = 0\n    words = stdin.split()\n    words_dict = {}\n    for word in words:\n        if word not in words_dict.keys():\n            words_dict[word] = 1\n        else:\n            words_dict[word] = words_dict[word] + 1\n    for word in words_dict.keys():\n        if word == \"nineteen\":\n            ans = ans + words_dict[word]\n        if word == \"eighteen\":\n            ans = ans + words_dict[word]\n    print(ans)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    if (len(inp) > 100):\n        return ''\n    t = ''\n    max = 0\n    temp = 0\n    for i in range(0, len(inp)):\n        if inp[i] =='':\n            continue\n        elif inp[i] == 'n':\n            if i + 1 < len(inp):\n                if inp[i + 1] == 'i':\n                    if i + 2 < len(inp):\n                        if inp[i + 2] == 'n':\n                            temp += 1\n                            if temp > max:\n                                max = temp\n                    else:\n                        continue\n                else:\n                    continue\n            else:\n                continue\n        else:\n            continue\n    return max\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_result = 0\n    numbers = stdin.split()\n    words = []\n    for number in numbers:\n        number = number.replace(\" \",\"\")\n        number = number.replace(\"-\",\"\")\n        for word in number:\n            if word == 'e':\n                continue\n            if int(word) == 20:\n                words.append('twenty')\n            elif int(word) < 20:\n                words.append(str(int(word)))\n    print(words)\n    for word in words:\n        max_result = max(max_result, len(word))\n    return max_result\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    # print(lines)\n\n    possible_words = 0\n    max_possible_words = 0\n\n    for line in lines:\n        # print(line)\n\n        count = 0\n        words = line.split(' ')\n        for word in words:\n            if len(word) > 1:\n                if word == 'nineteen':\n                    count += 1\n                elif word == 'teen':\n                    count += 3\n                elif word == 'ten':\n                    count += 2\n                elif word == 'one':\n                    count += 1\n                elif word == 'hundred':\n                    count += 1\n                elif word == 'thousand':\n                    count += 2\n                elif word == 'lakh':\n                    count += 3\n                elif word == 'lakh':\n                    count += 2\n                elif word =='million':\n                    count += 2\n                elif word =='million':\n                    count += 2\n                elif word == 'billion':\n                    count += 3\n                elif word == 'billion':\n                    count += 2\n                elif word == 'trillion':\n                    count += 3\n                elif word == 'trillion':\n                    count += 2\n                elif word == 'point':\n                    count += 1\n                elif word == 'point':\n                    count += 1\n                elif word == 'point':\n                    count += 1\n                else:\n                    count += 1\n                possible_words += count\n        # print(count)\n        if count > max_possible_words:\n            max_possible_words = count\n\n    return str(possible_words)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_list = stdin.split()\n    return max(len(list(filter(lambda x: x == 'nineteen', str_list)))\n\nsolution(input())"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"n\" and i!= 0 and stdin[i-1] == \"e\":\n            num += 1\n    return str(num)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    lst = []\n    for char in stdin:\n        if char == 'n':\n            count += 1\n        elif char == 'i':\n            count += 2\n        elif char == 'e':\n            count += 4\n        else:\n            count += 5\n        lst.append(count)\n    return str(max(lst))"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.replace(' ', '').replace('', '').split('nine')))\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    max_result = 0\n    s_split = s.split(\" \")\n\n    for item in s_split:\n        if item.find(\"nineteen\")!= -1:\n            max_result += 1\n\n    return str(max_result)\n\nsolution(\"nniinneetteeeenn\")\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    p, y = int(stdin[0]), int(stdin[1])\n    if y >= p or p >= 10 or y <= 2:\n        return -1\n    h = p * (p + 1) // 2\n    while h > y:\n        h -= p\n    if h < y:\n        return h\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    branches = list(range(p, y + 1))\n    for i in range(1, y):\n        for j in range(2, y + 1):\n            branches[i - 1] = max(branches[i - 1], branches[i] * j)\n    return '-1' if any(branches) else str(branches[-1])\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, y = map(int, stdin.split())\n    for i in range(2, y):\n        if i % 2 == 0:\n            if i * i <= y:\n                return str(i)\n        else:\n            if i <= y and i > 2:\n                if i * i > y:\n                    return str(i)\n    return str(-1)\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = -1\n    while True:\n        p = int(stdin.readline())\n        if p == 0:\n            break\n        y = int(stdin.readline())\n        for i in range(p + 1):\n            if 2 * i <= y <= p and 2 * i + 1 <= y <= p:\n                result = i\n                break\n        if result!= -1:\n            break\n    return str(result)"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')[0]"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while b > 1:\n        x = 1\n        while b % 2 == 0:\n            b //= 2\n            x += 1\n        if a % (b*x) == 0:\n            a *= x\n            b //= x\n        else:\n            return str(-1)\n    return str(a)\n\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    candidates = range(2, y+1)\n    if 2*p <= y:\n        candidates.remove(p)\n    \n    if 2*p > y:\n        return '-1'\n    return str(max(candidates))\n\nsolution('''3 6\n3\n3\n5''')\n\nsolution('''4 4\n-1\n3\n-1\n-1\n-1''')\n\nsolution('''3 3\n-1\n3\n3''')"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, y = list(map(int, stdin.split()))\n    if y % p == 0:\n        return -1\n    return str(math.ceil(y / p))"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    if n<1 or n>10**9 or m<1 or m>10**9:\n        return -1\n    res = 1\n    for i in range(2,m+1):\n        if (m+1)%i==0:\n            if i*i > m:\n                res = i\n                break\n    return str(res)"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return -1\n    if x < 0 or x > 10 ** 9:\n        return -1\n    answer = 0\n    for i in range(2, x // 2 + 1):\n        if answer == -1:\n            break\n        for j in range(i * 2, x + 1, i):\n            if j % i == 0:\n                answer = j\n    return answer"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    house = sorted(list(map(int, stdin.split())))\n    res = 0\n    house_start = house[0]\n    house_end = house[1]\n    sum_list = 0\n    for i in range(1, n):\n        if house_start <= house[i]:\n            sum_list += house_start - house[i]\n        else:\n            sum_list += house_start - house[i] + house_start\n        house_start = house_end\n        house_end += house[i]\n\n    house_start = house[n - 2]\n    house_end = house[n - 1]\n    sum_list += house_start - house[n - 1]\n\n    print(abs(sum_list - k))\n\n\n\nsolution(\"5 1 20\")\n\n\ndef"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, m, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    houses = sorted(map(int, stdin[3:]))\n    i = 0\n    for i in range(len(houses)):\n        if houses[i] == 0:\n            break\n    house = houses[i]\n    distance = abs(houses[i] - house)\n    print(distance)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    a = list(filter(lambda x: x, a))\n    a.append(0)\n    # a = sorted(a)\n    i = 0\n    distance = 0\n    while i < n and a[i] <= k:\n        distance += (a[i] + a[i + 1] + a[i + 2] + a[i + 3])\n        i += 1\n    return distance\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k = int(stdin[2])\n    house_list = list(map(int, stdin[3:]))\n    house_list = sorted(house_list)\n    i = 0\n    while i < n - 1:\n        if house_list[i] <= k <= house_list[i + 1]:\n            k -= house_list[i]\n            i += 1\n        i += 1\n    return house_list[i]\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = map(int, stdin.split())\n    available = list(map(int, stdin.split()))\n    houses = [(i + 1, available[i]) for i in range(n)]\n    ans = float(\"inf\")\n    for j in range(1, n):\n        # find the closest house to m\n        min_dist = float(\"inf\")\n        for i in range(n - 1):\n            dist = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1])\n            if dist < min_dist:\n                min_dist = dist\n        # the minimum distance is the distance from m to the closest house\n        ans = min(ans, min_dist)\n        # try buying it\n        houses[i][1] -= k\n        if houses[i][1] < 0:\n            # no more choice, no solution\n            break\n    if ans == float(\"inf\"):\n        print(\"no solution\")\n    else:\n        print(ans)\n\nsolution(input())\n\n\n'''\n\n\nimport sys\n\ndef"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    house_price = list(map(int, stdin.split()))\n    house_price.sort()\n    house_price.reverse()\n    house_price_memo = {}\n    def calculate_houses_distances(m):\n        if m in house_price_memo:\n            return house_price_memo[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(house_price[m-1])\n        for i in range(m-2, 0, -1):\n            houses.append(houses[-1] + house_price[i])\n        houses.append(house_price[m-1])\n        house_price_memo[m] = houses\n        return houses\n    houses_distances = list(map(calculate_houses_distances, range(0, n+1)))\n    houses_distances_memo = {}\n    def calculate_houses_distances_memo(m):\n        if m in houses_distances_memo:\n            return houses_distances_memo[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(houses_distances[m-1][-1])\n        for i in range(m-2, -1, -1):\n            houses.append(houses[-1] + houses_distances[i][-1])\n        houses.append(houses_distances[m-1][-1])\n        houses_distances_memo[m] = houses\n        return houses\n    houses_distances_memo = list(map(calculate_houses_distances_memo, range(0, n+1)))\n    def calculate_houses_distances_memo_len_2(m):\n        if m in houses_distances_memo_len_2:\n            return houses_distances_memo_len_2[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(houses_distances[m-1][-1])\n        for i in range(m-2, -1, -1):\n            houses.append(houses[-1] + houses_distances[i][-1])\n        houses.append(houses_distances[m-1][-1])\n        houses_distances_memo_len_2[m] = houses\n        return houses\n    houses_distances_memo_len_2 = list(map(calculate_houses_distances_memo_len_2, range(0, n+1)))\n    def calculate_houses_distances_memo_len_3(m):\n        if m in houses_distances_memo_len_3:\n            return houses_distances_memo_len_3[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(houses_distances[m-1][-1])\n        for i in range(m-2, -1, -1):\n            houses.append(houses[-1] + houses_distances[i][-1])\n        houses.append(houses_distances[m-1][-1])\n        houses_distances_memo_len_3[m] = houses\n        return houses\n    houses_distances_memo_len_3 = list(map(calculate_houses_distances_memo_len_3, range(0, n+1)))\n    def calculate_houses_distances_memo_len_4(m):\n        if m in houses_distances_memo_len_4:\n            return houses_distances_memo_len_4[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(houses_distances[m-1][-1])\n        for i in range(m-2, -1, -1):\n            houses.append(houses[-1] + houses_distances[i][-1])\n        houses.append(houses_distances[m-1][-1])\n        houses_distances_memo_len_4[m] = houses\n        return houses\n    houses_distances_memo_len_4 = list(map(calculate_houses_distances_memo_len_4, range(0, n+1)))\n    def calculate_houses_distances_memo_len_5(m):\n        if m in houses_distances_memo_len_5:\n            return houses_distances_memo_len_5[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(houses_distances[m-1][-1])\n        for i in range(m-2, -1, -1):\n            houses.append(houses[-1] + houses_distances[i][-1])\n        houses.append(houses_distances[m-1][-1])\n        houses_distances_memo_len_5[m] = houses\n        return houses\n    houses_distances_memo_len_5 = list(map(calculate_houses_distances_memo_len_5, range(0, n+1)))\n    def calculate_houses_distances_memo_len_6(m):\n        if m in houses_distances_memo_len_6:\n            return houses_distances_memo_len_6[m]\n        houses = []\n        if m == 0:\n            houses.append(0)\n        else:\n            houses.append(houses_distances[m-1][-1])\n        for i in range(m-2, -1, -1):\n            houses.append(houses[-1] + houses_distances[i]["
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    house1 = houses[m]\n    houses.remove(house1)\n    house1_dist = house1 - houses[0]\n    for house in houses:\n        if house1_dist > k:\n            house1_dist = k\n            break\n        house1_dist += house - houses[0]\n    return str(house1_dist)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses, prices = [], []\n    for _ in range(n):\n        houses.append(int(stdin))\n        prices.append(int(stdin))\n\n    # house m = houses[m]\n\n    distance = 0\n    while houses:\n        first = houses.pop(0)\n        while houses and houses[0] == first:\n            houses.pop(0)\n        if houses:\n            second = houses.pop(0)\n            distance += min(first, second) * (n - 2)\n        if houses:\n            third = houses.pop(0)\n            distance += min(first, third) * (n - 1)\n        if houses:\n            fourth = houses.pop(0)\n            distance += min(first, fourth) * (n - 0)\n    return str(distance)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    min_dis = 100\n    for i in range(n):\n        if houses[i]!= 0:\n            min_dis = min(min_dis, houses[i] + houses[i + 1])\n    if min_dis >= k:\n        return \"impossible\"\n    else:\n        return str(min_dis)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    houses = list(map(int, stdin.split()))\n    houses.sort(reverse=True)\n    distances = []\n    for house in houses:\n        if house >= m:\n            distances.append(k)\n            continue\n        if house > m:\n            distances.append(k)\n            continue\n        if house == m:\n            if k <= house:\n                distances.append(k)\n            continue\n        if k <= house:\n            distances.append(k)\n            continue\n        if house <= k:\n            distances.append(house)\n            continue\n    if len(distances) == 0:\n        distances.append(k)\n    return sum(distances)"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[j][i]\n\n    return 'YES' if is_transpose_possible(b) else 'NO'\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = stdin[0], stdin[1]\n    n = int(n)\n    m = int(m)\n\n    A = []\n    for i in range(n):\n        row = stdin[i + 2]\n        row = list(map(int, row.split()))\n        A.append(row)\n\n    B = []\n    for i in range(n):\n        row = stdin[i + 2 + n]\n        row = list(map(int, row.split()))\n        B.append(row)\n\n    ans = True\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                ans = False\n    if ans:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    A = []\n    for i in range(n):\n        A.append(list(map(int, stdin.split())))\n    B = []\n    for i in range(n):\n        B.append(list(map(int, stdin.split())))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            k = m - j\n            if A[i][j]!= B[i][j]:\n                for x in range(i, n):\n                    for y in range(j, m):\n                        A[x][y], B[x][y] = B[x][y], A[x][y]\n                count += 1\n                break\n    if count == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append([0] * m)\n\n    for i in range(n):\n        for j in range(m):\n            if j == i:\n                c[i][j] = a[i]\n            if j < i:\n                c[i][j] = b[j]\n    for i in range(n):\n        for j in range(m):\n            print(c[i][j], end=\" \")\n        print()\n    return \"YES\" if c == b else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _n, _m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(_n)]\n    B = [list(map(int, stdin.split())) for _ in range(_n)]\n    return \"YES\" if is_equal(A, B) else \"NO\"\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _n, _m = list(map(int, stdin.split()))\n    A = [[int(x) for x in stdin.split()] for _ in range(_n)]\n    B = [[int(x) for x in stdin.split()] for _ in range(_n)]\n    for i in range(0, _n):\n        for j in range(0, _m):\n            A[i][j] = int(A[i][j])\n            B[i][j] = int(B[i][j])\n    for _ in range(0, _n):\n        print(A)\n        for i in range(0, _m):\n            for j in range(0, _m):\n                if A[i][j]!= 0:\n                    A[i][j] = 0\n                    for k in range(0, i):\n                        A[k][j] = 0\n                        A[i][k] = 0\n                        A[j][k] = 0\n    print(A)\n    for _ in range(_n):\n        print(B)\n        for i in range(_m):\n            for j in range(_m):\n                if B[i][j]!= 0:\n                    B[i][j] = 0\n                    for k in range(0, i):\n                        B[k][j] = 0\n                        B[i][k] = 0\n                        B[j][k] = 0\n    for i in range(_n):\n        for j in range(_n):\n            for k in range(_m):\n                if A[i][j]!= 0:\n                    A[i][j] = 0\n                    A[i][k] = 0\n                    A[j][k] = 0\n                    A[k][i] = 0\n    for i in range(_n):\n        for j in range(_m):\n            for k in range(_m):\n                if B[i][j]!= 0:\n                    B[i][j] = 0\n                    B[i][k] = 0\n                    B[j][k] = 0\n                    B[k][i] = 0\n    for i in range(_n):\n        for j in range(_m):\n            if A[i][j]!= 0 and B[i][j]!= 0:\n                A[i][j] = 0\n                A[j][i] = 0\n                A[i][k] = 0\n                A[j][k] = 0\n    for i in range(_n):\n        for j in range(_m):\n            if A[i][j]!= 0 and B[i][j]!= 0:\n                B[i][j] = 0\n                B[j][i] = 0\n                B[i][k] = 0\n                B[j][k] = 0\n    for i in range(_n):\n        for j in range(_m):\n            if A[i][j]!= 0 and B[i][j]!= 0:\n                A[i][j] = 0\n                A[j][i] = 0\n                A[i][k] = 0\n                A[j][k] = 0\n    for i in range(_n):\n        for j in range(_m):\n            if A[i][j]!= 0 and B[i][j]!= 0:\n                B[i][j] = 0\n                B[j][i] = 0\n                B[i][k] = 0\n                B[j][k] = 0\n    if A == B:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(i) for i in stdin.split()[i]] for i in range(n)]\n    B = [[int(i) for i in stdin.split()[i]] for i in range(n)]\n    while True:\n        if len(set([x for row in A for x in row]))!= n:\n            return \"NO\"\n        if len(set([x for row in B for x in row]))!= n:\n            return \"NO\"\n        if len(set([x for col in zip(*A) for x in col]))!= m:\n            return \"NO\"\n        if len(set([x for col in zip(*B) for x in col]))!= m:\n            return \"NO\"\n        for i in range(n):\n            for j in range(m):\n                if A[i][j] == B[i][j]:\n                    A[i][j] = 0\n                    B[i][j] = 0\n        if sum([sum(row) for row in A]) == sum([sum(row) for row in B]):\n            return \"YES\""
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    matrix_a = []\n    matrix_b = []\n    for i in range(n):\n        matrix_a.append(list(map(int, stdin.strip().split())))\n    for i in range(n):\n        matrix_b.append(list(map(int, stdin.strip().split())))\n    # print(matrix_a)\n    # print(matrix_b)\n    ans = \"YES\"\n    for i in range(n):\n        for j in range(m):\n            if matrix_a[i][j]!= matrix_b[i][j]:\n                ans = \"NO\"\n    return ans\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    A = [list(map(int, stdin.split()[i])) for i in range(n)]\n    B = [list(map(int, stdin.split()[i])) for i in range(n)]\n    return 'YES' if check(A, B) else 'NO'\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom itertools import combinations\nimport sys\n\na, b = stdin.split()\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin.split()\n    str1_len = len(str1)\n    if str1_len < 2:\n        return -1\n    str2 = str1[1]\n    str2_len = len(str2)\n\n    dp = [[0] * (str2_len + 1) for _ in range(str1_len + 1)]\n\n    for i in range(1, str1_len + 1):\n        for j in range(1, str2_len + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    for i in range(str1_len, -1, -1):\n        for j in range(str2_len, -1, -1):\n            if dp[i][j] == str2_len:\n                return i - str1_len + 1\n    return -1\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = a[1:]\n    i = j = 0\n    max_len = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n        else:\n            j += 1\n            if max_len < j-i:\n                max_len = j-i\n    if max_len == 0:\n        return '-1'\n    return str(max_len)\n    \n    \nstdin = input()\nprint(solution(stdin))\n    \n\n##Testing\ndef"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        a = stdin[i]\n        for j in range(i+1, len(stdin)):\n            b = stdin[j]\n            if len(set(a) - set(b)) == 0:\n                if len(set(b) - set(a)) == 0:\n                    continue\n                else:\n                    return len(a)\n    return -1\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s1 = stdin\n    s2 = stdin\n    s1 = list(s1.split())\n    s2 = list(s2.split())\n    s1_list = []\n    s2_list = []\n    max1 = 0\n    max2 = 0\n    for i in range(len(s1)):\n        if s1[i] not in s2_list:\n            s1_list.append(s1[i])\n            s2_list.append(s1[i])\n            if len(s1_list) > max1:\n                max1 = len(s1_list)\n        else:\n            s2_list.remove(s1[i])\n\n    s2_list = []\n    for i in range(len(s2)):\n        if s2[i] not in s1_list:\n            s2_list.append(s2[i])\n            s1_list.append(s2[i])\n            if len(s2_list) > max2:\n                max2 = len(s2_list)\n        else:\n            s1_list.remove(s2[i])\n\n    if max1 == 0 and max2 == 0:\n        return \"-\"\n    return max(max1, max2)\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ns1, s2 = stdin.split()\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    a = set(a)\n    b = set(b)\n    c = a - b\n    d = b - a\n    if len(c) == 0 or len(d) == 0:\n        return -1\n    return max(len(c), len(d))"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()[0]\n    b = stdin.splitlines()[1]\n\n    len_a = len(a)\n    len_b = len(b)\n\n    dp = [[0] * (len_b + 1) for _ in range(len_a + 1)]\n    # dp[i][j] -> longest common subsequence of strings a[0...i-1] and b[0...j-1].\n    #  => dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + 1)\n    for i in range(len_a):\n        for j in range(len_b):\n            if a[i] == b[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n\n    for i in range(len_a + 1):\n        for j in range(len_b + 1):\n            if dp[i][j] == 0:\n                return \"-1\"\n    return str(dp[len_a][len_b])\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if (B - A) % 2 == 0:\n        return '-1'\n    return str(min(D, C) - max(D, C) + (A - D) + (B - A))\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    time = 0\n    ans = -1\n    while True:\n        time += 1\n        if time % (c + 2 * d) == 0:\n            if time % (a + 2 * b) == 0:\n                ans = time\n        if time % (a + 2 * b) == 0:\n            if time % (c + 2 * d) == 0:\n                ans = time\n        if time % (a + 2 * b) == 0:\n            if time % (c + 2 * d) == 0:\n                ans = time\n        if time % (a + 2 * b) == 0:\n            if time % (c + 2 * d) == 0:\n                ans = time\n        if time % (a + 2 * b) == 0:\n            if time % (c + 2 * d) == 0:\n                ans = time\n        if time % (a + 2 * b) == 0:\n            if time % (c + 2 * d) == 0:\n                ans = time\n        if ans!= -1:\n            break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    t = 0\n    while t <= 10000000:\n        if t % 2!= 0:\n            t += a\n            if t == d:\n                return str(t)\n        else:\n            t += b\n            if t == c:\n                return str(t)\n        \nprint(solution(input()))\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    result = -1\n\n    if (a + 2 * c + 4 * d) % (2 * a) == 0:\n        result = 0\n    else:\n        result = (a + 2 * c + 4 * d) // (2 * a) + 1\n\n    return str(result)\n\n\n\n'''"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if not ((a == c) or (d == c)):\n        return '-1'\n    if a == c and b == d:\n        return '0'\n    if a == c:\n        return '1'\n    # b = c + a\n    # if (b - a) % 2 == 0:\n    #     return '0'\n    # else:\n    #     return '1'\n    return '2'\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(get_best_time(a, b, c, d))\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n\n    c, d = stdin.split()\n    c = int(c)\n    d = int(d)\n\n    if a % 2 == 0 and b % 2 == 0:\n        if c % 2 == 1 and d % 2 == 1:\n            return -1\n        elif a % 2 == 1 and b % 2 == 0:\n            return c\n        elif a % 2 == 0 and b % 2 == 1:\n            return d\n        elif c % 2 == 0 and d % 2 == 0:\n            return c + d\n        elif a % 2 == 0 and c % 2 == 1:\n            return d + a\n        else:\n            return a + b\n    else:\n        return -1\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    time = c\n    for i in range(c+1, d):\n        if i % 2 == 0:\n            time = min(time, i)\n            #print(time)\n        else:\n            time = max(time, i)\n            #print(time)\n    #print(time)\n    if time % 2 == 0:\n        return time\n    return -1"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    c, d = (int(i) for i in stdin.split())\n    scream = b\n    m = 1\n    for time in range(c, d+1):\n        if time % 2 == 0:\n            if scream == 0:\n                if m % 2 == 0:\n                    m += 1\n                scream = a\n            else:\n                if m % 2 == 0:\n                    m += 1\n                scream = a + a\n        else:\n            if scream == 0:\n                if m % 2 == 1:\n                    m += 1\n                scream = a\n            else:\n                if m % 2 == 1:\n                    m += 1\n                scream = a + a\n    return str(m)\n\nprint(solution(input()))"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number <= 0:\n        raise ValueError('Input number should be a positive integer')\n    return str(3 * math.ceil(number / 3))"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = sorted(map(int, stdin.split()))\n    for i in range(1, a+1):\n        if i + b + c == a:\n            print(i, i + b, i + c)\n            return\n    for i in range(1, b+1):\n        if i + a + c == b:\n            print(i, i + a, i + c)\n            return\n    for i in range(1, c+1):\n        if i + b + a == c:\n            print(i, i + b, i + a)\n            return\nsolution(input())\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,n+1):\n                if i + j + k == n:\n                    return str(i)+\" \"+str(j)+\" \"+str(k)\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n // 3 + 1):\n        b = n - a - (n - a) // 3\n        c = n - a - b - (n - a - b) // 3\n        if a + b + c == n and a % 3 == 0 and b % 3 == 0 and c % 3 == 0:\n            return '{} {} {}'.format(a, b, c)\n    return 'No solutions'"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        for j in range(1, n):\n            for k in range(1, n):\n                if i+j+k == n and all([i % 3!= 0, j % 3!= 0, k % 3!= 0]):\n                    return''.join(map(str, [i, j, k]))"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = 0\n    b = 0\n    c = 0\n    while a+b+c!= n:\n        if a+b+c >= n:\n            a -= 1\n        elif a+b+c < n:\n            c += 1\n        else:\n            b -= 1\n    if a+b+c == n:\n        print(a, b, c)\n    else:\n        print(-1)"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split(\" \")\n    if int(a)+int(b)+int(c) == int(stdin):\n        return a,b,c\n    else:\n        for i in range(int(a),int(c)+1):\n            if int(a)+int(i)+int(c) == int(stdin):\n                return a,i,c\n        for i in range(int(c),int(a)+1):\n            if int(a)+int(c)+int(i) == int(stdin):\n                return a,c,i\n        for i in range(int(a),int(c)+1):\n            if int(c)+int(i)+int(a) == int(stdin):\n                return c,i,a\n        for i in range(int(c),int(a)+1):\n            if int(c)+int(a)+int(i) == int(stdin):\n                return c,a,i\n        return \"NO SOLUTION\""
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n\n    def divisible(a, b, c):\n        return (a % 3) + (b % 3) + (c % 3) == 0\n\n    def find_numbers(n):\n        for i in range(1, n):\n            if divisible(i, n, i):\n                return i\n\n    ans = []\n    while n!= 0:\n        n -= find_numbers(n)\n        ans.append(find_numbers(n))\n\n    ans = str(ans[0])\n    for i in range(1, len(ans)):\n        ans +='' + str(ans[i])\n    return ans\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return \"1 1 1\"\n\n    candidates = []\n    i = 1\n    while n >= i:\n        if n == i:\n            candidates.append(i)\n            break\n        if n % i == 0:\n            candidates.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if len(candidates) == 3:\n        return \"1 {} 1\".format(candidates[0])\n    return \"1 {} 1\".format(min(candidates))\n\nsolution(\"3\")\n\nsolution(\"233\")"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 3*(3*n + 1) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n + 2) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n + 3) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 1) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 2) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 3) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 4) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 5) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 6) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 7) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    if 3*(3*n - 8) == n:\n        return str(3) +'' + str(3) +'' + str(3)\n    return str(3) +'' + str(3) +'' + str(3)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    return str(count_squares(a, b, c, d, n))\n\ncount_squares(a, b, c, d, n):\n    #base case\n    if n == 1:\n        return 1\n\n    #general case\n    res = 0\n    for i in range(n):\n        if is_square(i, a, n) and is_square(i, b, n) and is_square(i, c, n) and is_square(i, d, n):\n            res += count_squares(a, b, c, d, n - 1)\n    return res\n\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n\n    # We can find it in 2 ways\n    def unique_square(s1, s2, s3, s4):\n        return s1 * s1 == s2 * s2 + s3 * s3 + s4 * s4\n\n    return (sum([sum(unique_square(a, b, c, d)) for a in range(1, n+1)]) +\n            sum([sum(unique_square(a, d, b, c)) for a in range(1, n+1)]) +\n            sum([sum(unique_square(c, d, b, a)) for a in range(1, n+1)]) +\n            sum([sum(unique_square(b, d, a, c)) for a in range(1, n+1)])\n            )\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = stdin.split(\" \")\n    return str(int(n) ** 2)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = list(map(int, stdin.split(' ')))\n    print(a, b, c, d)\n    print(b-a, c-a, d-a, d-c)\n    print(a+b, a+c, a+d, c+d)\n    print(a*b, a*c, a*d, c*d)\n    print(c*b, c*c, d*d, d*c)\n    print(c*d, d*c, c*d, d*c)\n    print(a+b+c+d, a*b+c*d, b*c+d*a, c*d+a*b, a*b+c*d, b*c+d*a, c*d+a*b, d*c+a*b, a*b+c*d, b*c+d*a, c*d+a*b, d*c+a*b)\n    print(a+b, a+c, a+d, c+d)\n    print(b+c, b+d, c+d)\n    print(a+b+c+d, a*b+c*d, b*c+d*a, c*d+a*b)\n    print(a+b+c+d, a*b+c*d, b*c+d*a, c*d+a*b, a*b+c*d, b*c+d*a, c*d+a*b, d*c+a*b)\n    print(a*b+c*d, a*b*c*d, a*b*c*d, a*b*c*d)\n    print(a*b+c*d, b*c+d*a, a*b*c*d, a*b*c*d, b*c+d*a, c*d+a*b, a*b*c*d, b*c+d*a, c*d+a*b, d*c+a*b)\n    print(a+b+c+d, b+c+d, a+c+d, a+d+c, a+b+c, a+b+d, a+c+d, a+d+c)\n    print(b+c+d, a+c+d, c+d, b+c+d, a+b+c, a+b+d, a+c+d, a+d+c)\n    print(a+b+c+d, b+c+d, c+d, a+c+d, a+b+c, a+b+d, a+c+d, a+d+c)\n    print(a*b+c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d)\n    print(a*b+c*d, b*c+d*a, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d)\n    print(a*b+c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d)\n    print(a*b+c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d)\n    print(a+b+c+d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d)\n    print(a+b+c+d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b+c*d, a*b"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    return len(set([i for i in range(1, n + 1) if i == a or i == b or i == c or i == d]))\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    res = 0\n    n, a, b, c, d = list(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a * i + b * j == c * i + d * j:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = stdin.split()\n    n, a, b, c, d = int(n), int(a), int(b), int(c), int(d)\n    dict_a = {}\n    dict_b = {}\n    dict_c = {}\n    dict_d = {}\n    for i in range(1, n+1):\n        dict_a[i] = []\n        dict_b[i] = []\n        dict_c[i] = []\n        dict_d[i] = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i+j <= n:\n                dict_a[i].append(j)\n            if j+i <= n:\n                dict_b[i].append(j)\n            if i-j >= 1:\n                dict_c[i].append(j)\n            if j-i >= 1:\n                dict_d[i].append(j)\n    tot_a = 0\n    tot_b = 0\n    tot_c = 0\n    tot_d = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if set(dict_a[i]).issubset(set(dict_a[j])) and set(dict_a[j]).issubset(set(dict_a[i])):\n                tot_a += 1\n            if set(dict_b[i]).issubset(set(dict_b[j])) and set(dict_b[j]).issubset(set(dict_b[i])):\n                tot_b += 1\n            if set(dict_c[i]).issubset(set(dict_c[j])) and set(dict_c[j]).issubset(set(dict_c[i])):\n                tot_c += 1\n            if set(dict_d[i]).issubset(set(dict_d[j])) and set(dict_d[j]).issubset(set(dict_d[i])):\n                tot_d += 1\n    return f'{tot_a} {tot_b} {tot_c} {tot_d}'\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    dp = [[0, 0, 0, 0] for _ in range(n)]\n    dp[0] = [[a], [a], [a], [a]]\n    dp[1] = [[a, b], [a, b], [a, b], [a, b]]\n    dp[2] = [[a, b, c], [a, b, c], [a, b, c], [a, b, c]]\n    dp[3] = [[a, b, c, d], [a, b, c, d], [a, b, c, d], [a, b, c, d]]\n\n    for i in range(4, n):\n        dp[i][0] = sum(dp[i - 1][j] for j in range(1, 4))\n        dp[i][1] = sum(dp[i - 1][j] for j in range(0, 4))\n        dp[i][2] = sum(dp[i - 1][j] for j in range(0, 3))\n        dp[i][3] = sum(dp[i - 1][j] for j in range(0, 2))\n\n    result = dp[n - 1][0]\n\n    return str(result)"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = list(map(int, stdin.split()))\n    if n < a or n < b or n < c or n < d:\n        return \"0\"\n    def sum_of_2_squares(n):\n        return sum(((i * i) + (j * j)) for i in range(1, n // 2 + 1) for j in range(1, n // 2 + 1))\n    def sum_of_3_squares(n):\n        return sum(((i * i) + (j * j) + (k * k)) for i in range(1, n // 3 + 1) for j in range(1, n // 3 + 1) for k in range(1, n // 3 + 1))\n    if sum_of_2_squares(n) == a or sum_of_2_squares(n) == b or sum_of_2_squares(n) == c or sum_of_2_squares(n) == d:\n        return \"2\"\n    if sum_of_3_squares(n) == a or sum_of_3_squares(n) == b or sum_of_3_squares(n) == c or sum_of_3_squares(n) == d:\n        return \"3\"\n    return \"4\"\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n,a,b,c,d = map(int, stdin.split())\n  if (n == 1):\n    return str(0)\n  paintings = [[0,0,0,0],\n               [0,0,0,0],\n               [0,0,0,0],\n               [0,0,0,0]]\n  #print(paintings)\n  for i in range(1,n):\n    for j in range(1,n):\n      if (i >= j):\n        if (paintings[i-1][j-1]!= 0):\n          paintings[i][j] = paintings[i-1][j-1] + 1\n        else:\n          paintings[i][j] = 0\n  #print(paintings)\n  b2 = 0\n  for i in range(1,n):\n    if (paintings[i][i] == 1):\n      b2 = b2 + 1\n  #print(b2)\n  b3 = 0\n  for i in range(1,n):\n    for j in range(1,n):\n      if (paintings[i][j] == 2):\n        b3 = b3 + 1\n  #print(b3)\n  res = b3 - b2\n  return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    return (a - b)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    w = int(input[0])\n    h = int(input[1])\n    u1 = int(input[2])\n    d1 = int(input[3])\n    u2 = int(input[4])\n    d2 = int(input[5])\n    return(f\"{solution_helper(w, h, u1, d1, u2, d2)}\")\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    weight, height = list(map(int, stdin.split()))\n    \n    stone_weight = abs(weight - 1)\n    stone_height = height\n    stone_weight = stone_weight if stone_weight > 0 else 0\n    stone_height = stone_height if stone_height > 0 else 0\n\n    while stone_height > 0:\n        weight = weight + (stone_weight + stone_weight * (stone_height - stone_height))\n        height = height - 1\n        stone_height = stone_height - 1\n\n    return str(weight)"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    stones_weights = []\n    for i in range(2):\n        stones_weights.append(list(map(int, stdin.split())))\n\n    while True:\n        for i in range(2):\n            if stones_weights[i][1] == h:\n                stones_weights[i][1] = -1\n                if h == 0:\n                    return h * w\n                h -= 1\n            else:\n                stones_weights[i][1] += 1\n                h += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    if u1 == u2 and d1 == d2:\n        return -1\n    while h!= 0:\n        if u1 <= w <= u2:\n            if h == d1:\n                w = w + 3\n            else:\n                w = w - 1\n        else:\n            if h == d1:\n                w = w - 1\n            else:\n                w = w + 1\n        if h == d2:\n            w = w - 1\n        else:\n            w = w + 1\n        if w < 0:\n            w = 0\n    return w\n\nprint(solution(input()))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [w, h] = map(int, stdin.split())\n    [s1_height, s1_weight, s2_height, s2_weight] = map(int, stdin.split())\n    steps = 0\n    snowball_weight = 0\n    while snowball_weight < w:\n        snowball_weight = snowball_weight + s2_weight\n        if snowball_weight < w:\n            snowball_weight = snowball_weight + s1_weight\n            steps = steps + 1\n            if snowball_weight < w:\n                snowball_weight = snowball_weight + s2_weight\n                steps = steps + 1\n                if snowball_weight < w:\n                    snowball_weight = snowball_weight + s1_weight\n                    steps = steps + 1\n                    if snowball_weight < w:\n                        snowball_weight = snowball_weight + s2_weight\n                        steps = steps + 1\n                        if snowball_weight < w:\n                            snowball_weight = snowball_weight + s1_weight\n                            steps = steps + 1\n                            if snowball_weight < w:\n                                snowball_weight = snowball_weight + s2_weight\n                                steps = steps + 1\n                                if snowball_weight < w:\n                                    snowball_weight = snowball_weight + s1_weight\n                                    steps = steps + 1\n                                    if snowball_weight < w:\n                                        snowball_weight = snowball_weight + s2_weight\n                                        steps = steps + 1\n                                        if snowball_weight < w:\n                                            snowball_weight = snowball_weight + s1_weight\n                                            steps = steps + 1\n                                            if snowball_weight < w:\n                                                snowball_weight = snowball_weight + s2_weight\n                                                steps = steps + 1\n                                                if snowball_weight < w:\n                                                    snowball_weight = snowball_weight + s1_weight\n                                                    steps = steps + 1\n                                                    if snowball_weight < w:\n                                                        snowball_weight = snowball_weight + s2_weight\n                                                        steps = steps + 1\n                                                        if snowball_weight < w:\n                                                            snowball_weight = snowball_weight + s1_weight\n                                                            steps = steps + 1\n                                                            if snowball_weight < w:\n                                                                snowball_weight = snowball_weight + s2_weight\n                                                                steps = steps + 1\n                                                                if snowball_weight < w:\n                                                                    snowball_weight = snowball_weight + s1_weight\n                                                                    steps = steps + 1\n                                                                    if snowball_weight < w:\n                                                                        snowball_weight = snowball_weight + s2_weight\n                                                                        steps = steps + 1\n                                                                        if snowball_weight < w:\n                                                                            snowball_weight = snowball_weight + s1_weight\n                                                                            steps = steps + 1\n                                                                            if snowball_weight < w:\n                                                                                snowball_weight = snowball_weight + s2_weight\n                                                                                steps = steps + 1\n                                                                                if snowball_weight < w:\n                                                                                    snowball_weight = snowball_weight + s1_weight\n                                                                                    steps = steps + 1\n                                                                                    if snowball_weight < w:\n                                                                                        snowball_weight = snowball_weight + s2_weight\n                                                                                        steps = steps + 1\n                                                                                        if snowball_weight < w:\n                                                                                            snowball_weight = snowball_weight + s1_weight\n                                                                                            steps = steps + 1\n                                                                                            if snowball_weight < w:\n                                                                                                snowball_weight = snowball_weight + s2_weight\n                                                                                                steps = steps + 1\n                                                                                                if snowball_weight < w:\n                                                                                                    snowball_weight = snowball_weight + s1_weight\n                                                                                                    steps = steps + 1\n                                                                                                    if snowball_weight < w:\n                                                                                                        snowball_weight = snowball_weight + s2_weight\n                                                                                                        steps = steps + 1\n                                                                                                        if snowball_weight < w:\n                                                                                                            snowball_weight = snowball_weight + s1_weight\n                                                                                                            steps = steps + 1\n                                                                                                            if snowball_weight < w:\n                                                                                                               snowball_weight = snowball_weight + s2_weight\n                                                                                                               steps = steps + 1\n                                                                                                               if snowball_weight < w:\n                                                                                                                     snowball_weight = snowball_weight + s1_weight\n                                                                                                                     steps = steps + 1\n                                                                                                                     if snowball_weight < w:\n                                                                                                                         snowball_weight = snowball_weight + s2_weight\n                                                                                                                         steps = steps + 1\n                                                                                                                         if snowball_weight < w:\n                                                                                                                            snowball_weight = snowball_weight + s1_weight\n                                                                                                                            steps = steps + 1\n                                                                                                                            if snowball_weight < w:\n                                                                                                                                snowball_weight = snowball_weight + s2_weight\n                                                                                                                                steps = steps + 1\n                                                                                                                            "
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weight, height = list(map(int, stdin.split()))\n    stone_height1 = height\n    stone_height2 = height\n    while (weight > 0 and stone_height1 >= 0 and stone_height2 >= 0):\n        if stone_height1 < stone_height2:\n            weight += stone_height2\n            stone_height1 -= 1\n            weight -= stone_height1\n        else:\n            weight += stone_height1\n            stone_height2 -= 1\n            weight -= stone_height2\n    return str(weight)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [w, h] = list(map(int, stdin.split()))\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n\n    while True:\n        if d1 == 0:\n            return \"%.1f\" % u1\n        u1 += (h - d1) * (u2 - u1) / (d2 - d1)\n        h -= 1\n        if h == 0:\n            break\n        if d1 == d2:\n            u1 -= u2\n            break\n        u2 += (h - d2) * (u1 - u2) / (d1 - d2)\n        h -= 1\n    return \"%.1f\" % u1\nprint(solution(input()))\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(height, weight):\n        if height == 0:\n            return weight\n        if weight < 0:\n            return weight\n        weight += solve(height-1, weight - i)\n        weight -= i\n        return weight\n\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    i = d1 - d2\n    return str(solve(h, w))\n\n\nprint(solution(*input().split()))"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    moves = 0\n    u = u1\n    d = d2\n    while u!= 0 and d!= 0:\n        if u > d:\n            u -= 1\n        else:\n            d -= 1\n        moves += 1\n    return str(moves)\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  x, y, m = list(map(int, stdin.split()))\n  c = list(map(int, stdin.split()))\n  \n  while(x+1>y):\n    x -= 1\n    y += 1\n  if x+1==y:\n    return str(x+1)\n  elif x>y:\n    return str(x)\n  else:\n    return str(y)\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    chs = list(map(int, stdin.split()[1:]))\n    l, r = list(map(int, stdin.split()[2].split()))\n\n    if m > 1:\n        if m > r - l + 1:\n            return 0\n\n        else:\n            chs.sort()\n            return chs[r - l]\n    else:\n        return 0\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = list(map(int, stdin.split()[1:]))\n    arr_min = min(array)\n    arr_max = max(array)\n    if arr_min > arr_max:\n        return 0\n    if arr_min < n and arr_max > n:\n        if arr_min >= 0 and arr_max <= n:\n            # the size of each group is between x and y, inclusive\n            return 0\n        else:\n            # the size of each group is less than x, so the size of the whole group is less than y\n            return 0\n    else:\n        # the size of each group is greater than y, so the size of the whole group is less than x\n        return 0\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    m = s[0]\n    s = s[1:]\n    s.sort()\n    m1 = s[:m]\n    s = s[m:]\n    m2 = s[:m]\n    s = s[m:]\n    s.sort()\n    if len(s) < m:\n        return 0\n    l1 = []\n    l2 = []\n    for i in m1:\n        l1.append(i)\n    for i in m2:\n        l2.append(i)\n    l2 = l2[m:]\n    i = 0\n    j = 0\n    l3 = []\n    while i < m:\n        if j < m2:\n            if l1[i] < l2[j]:\n                l3.append(l2[j])\n                j += 1\n                i += 1\n            else:\n                l3.append(l1[i])\n                i += 1\n        else:\n            l3.append(l1[i])\n            i += 1\n    if m == 1:\n        return l3[0]\n    if m == 2:\n        if l3[0] > l3[1]:\n            return l3[0]\n        return l3[1]\n    if l3[0] < l3[1]:\n        return l3[0]\n    return l3[1]\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    x, y = map(int, stdin.split()[2].split())\n\n    if x == 0 and y == 0:\n        return str(0)\n    if x < y:\n        return str(0)\n    if x > y:\n        return str(m)\n    else:\n        l = max(x, y)\n        r = min(x, y)\n\n        pass_rate = 0\n        min_c = 0\n        max_c = 0\n\n        for i in range(1, m + 1):\n            if c[i - 1] < r:\n                if max_c < c[i - 1]:\n                    max_c = c[i - 1]\n                if min_c > c[i - 1]:\n                    min_c = c[i - 1]\n                pass_rate += min_c + 1\n            else:\n                if max_c < c[i - 1]:\n                    max_c = c[i - 1]\n                if min_c > c[i - 1]:\n                    min_c = c[i - 1]\n                pass_rate += max_c - min_c + 1\n                max_c = c[i - 1]\n                min_c = 0\n                pass_rate += 1\n\n        return str(pass_rate)\n\n\nsolution(\"5 0 3 4 2\")\nsolution(\"5 3 10\")\nsolution(\"4 3 6\")\nsolution(\"2 1\")\nsolution(\"2 0\")\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    passing_rate = int(stdin.split()[2])\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1].split()))\n    x = int(stdin.split()[3])\n    y = int(stdin.split()[4])\n    if sum(c) < x:\n        return \"0\"\n    c.sort()\n    for i in range(len(c)):\n        if c[i] < x:\n            if c[i] >= y:\n                return str(i + 1)\n    return \"0\"\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split(\"\\n\")[0])\n    c = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    x, y = map(int, stdin.split(\"\\n\")[2].split(\" \"))\n    if m < y:\n        return \"0\"\n\n    def is_small(arr):\n        for i in range(len(arr)):\n            if arr[i] > x:\n                return False\n        return True\n\n    if is_small(c) is False:\n        return \"0\"\n\n    if m < x:\n        return \"0\"\n    \n    counts = [0] * m\n    for i in range(len(c)):\n        counts[i] = c[i]\n    sorted_counts = sorted(counts)\n    \n    if is_small(counts) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts[:x]) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts[x:y]) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts[y:]) is False:\n        return \"0\"\n\n    counts = [0] * m\n    for i in range(len(c)):\n        counts[i] = c[i]\n    sorted_counts = sorted(counts)\n    \n    if is_small(counts) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts[:x]) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts[x:y]) is False:\n        return \"0\"\n    \n    if is_small(sorted_counts[y:]) is False:\n        return \"0\"\n\n    counts = sorted_counts[:x]\n    for i in range(x):\n        if counts[i] < y:\n            return str(i + 1)\n    \n    counts = sorted_counts[x:y]\n    for i in range(x, y):\n        if counts[i - x] < y:\n            return str(i + 1)\n    \n    counts = sorted_counts[y:]\n    for i in range(y, m):\n        if counts[i - y] < m:\n            return str(i + 1)\n\n    return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    passing = []\n    for i in range(len(arr)):\n        if int(arr[i]) >= int(arr[0]):\n            passing.append(int(arr[i]))\n    if len(passing) <= int(arr[2]):\n        return 0\n    if len(passing) > int(arr[2]):\n        return max(passing)\n\nsolution(\"2 4 4 0\")\nsolution(\"5 5 3 0\")\nsolution(\"0 0 0 0\")\n\n\"\"\""
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1].split()))\n    x, y = list(map(int, stdin.split()[2].split()))\n    n = 0\n    while (x > c[0] and y < c[-1]):\n        n += 1\n        if n > m:\n            break\n        if n <= m:\n            x, y = x - c[0], y - c[0]\n            c = c[1:]\n        else:\n            x, y = x - c[-1], y - c[-1]\n            c = c[:-1]\n    return n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    stdin2 = stdin.split()[2].split()\n    x, y = list(map(int, stdin2))\n\n    if x > y:\n        return 0\n\n    def count_school(c, x, y):\n        res = 0\n        for i in range(len(c)):\n            if x <= c[i] <= y:\n                res += 1\n        return res\n\n    def calc_passing(c, x, y):\n        return max(min(c, x) - 1, y)\n\n    c.sort()\n    return \"YES\" if count_school(c, x, y) >= m else str(calc_passing(c, x, y))\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split()))\n    return str(min(int(n / (k * a) + b), int(n / (k * b) + a)))\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    \n    for i in range(1, n + 1):\n        if i % k == 0:\n            if i // k <= b:\n                return '{} {}'.format(i, b)\n            else:\n                return '{} {}'.format(i - k, b)\n        if i % k!= 0:\n            if i // k <= b:\n                return '{} {}'.format(i, b)\n            else:\n                if (i - k) % k == 0:\n                    return '{} {}'.format(i, i // k)\n                else:\n                    return '{} {}'.format(i - k, i // k)\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nn,k,a,b=map(int,stdin.split())"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for _ in stdin)\n    \n\"\"\"\n\nx, k, A, B = map(int, input().split())\n\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    if n == 1:\n        return str(n)\n    if k == 1:\n        return str(n)\n    coin_num = 0\n    while n!= 1:\n        if n % k == 0:\n            n = n // k\n        elif n % k!= 0:\n            if n < k:\n                n = n + k - n\n                coin_num += n\n                n = n // k\n            else:\n                n = n // k\n                coin_num += n\n    return str(coin_num)\n\nprint(solution(input()))\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = stdin.split()\n    n = int(n)\n    k = int(k)\n    A = int(A)\n    B = int(B)\n\n    if n == 1:\n        print(A)\n        return\n\n    def solve(n, k, A, B):\n        res = float('inf')\n        while n >= k:\n            if n % k == 0:\n                res = min(res, solve(n - k, k, A, B) + 1)\n            n -= 1\n        return res\n\n    print(solve(n, k, A, B))\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    \n    if n == 1:\n        return 0\n    \n    num = 1\n    if k == 1:\n        return num\n    \n    while True:\n        if a >= num and k >= num:\n            if k % num == 0:\n                return num + a\n            else:\n                a -= 1\n                num += 1\n        elif k >= num:\n            num += 1\n        else:\n            return num + a\n            \ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([str(x) for x in stdin.split()])\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = list(map(int, stdin.split()))\n    return str(min(n - k + A, k * min(n // k, n + B)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b = list(map(int,stdin.split()))\n    if n==1:\n        if a==0:\n            return \"0\"\n        elif a==1:\n            return \"1\"\n        else:\n            return \"1\"+\"0\"*(a-1)\n    \n    if n==k:\n        if a==0:\n            return \"0\"\n        elif a==1:\n            return \"1\"\n        else:\n            return \"1\"+\"0\"*(a-1)\n    \n    if n>k:\n        if a==0:\n            return \"0\"\n        elif a==1:\n            return \"1\"\n        else:\n            return \"1\"+\"0\"*(a-1)\n    \n    if n==k:\n        if a==0:\n            return \"0\"\n        elif a==1:\n            return \"1\"\n        else:\n            return \"1\"+\"0\"*(a-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_sqrt(n: int) -> bool:\n        return int(n**0.5) == int(n**0.5)\n    \n    def min_operations(n: int) -> int:\n        return 1 + int(sqrt(n)) if is_sqrt(n) else int(n)\n    \n    def min_operations_with_mul(n: int) -> int:\n        mul_op = 2\n        while True:\n            if mul_op >= len(str(n)):\n                return n, mul_op\n            if is_sqrt(n):\n                return n, mul_op\n            mul_op += 1\n            n = int(n * 10)\n    \n    def min_operations_with_sqrt(n: int) -> int:\n        sqrt_op = 1\n        while True:\n            if sqrt_op >= len(str(n)):\n                return n, sqrt_op\n            if is_sqrt(n):\n                return n, sqrt_op\n            sqrt_op += 1\n            n = int(n * 10)\n    \n    return min_operations_with_mul(int(stdin))[0] + min_operations_with_sqrt(int(stdin))[0]\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_n = n\n    min_ops = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        min_ops += 1\n        if min_n > n:\n            min_n = n\n    return str(min_n) + \" \" + str(min_ops)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        min_operations = 0\n        while n > 2:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = n * 3 + 1\n            min_operations += 1\n        return n, min_operations\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    _, n = stdin.split()\n    n = int(n)\n    min_value = 1\n    min_num_operations = 0\n\n    while min_value < n:\n        if (n-min_value) % 2 == 1:\n            break\n        min_value = min_value*3 + 1\n        min_num_operations += 1\n    return str(min_value) + \" \" + str(min_num_operations)\n\nprint(solution(input()))"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_operations = 0\n    min_value = n\n    # sqrt(n) -> 2\n    # mul(n, 3) -> n * 3\n    # mul(n, 4) -> n * 2\n    # mul(n, 5) -> n * 1\n    while n > 0:\n        min_operations += 1\n        if n >= 10:\n            if n % 10!= 0:\n                n = (n % 10) * 2\n        else:\n            n = n * 10\n    if min_operations > 0:\n        min_operations += 1\n    if min_value > 0:\n        min_value = min_value * (1 + min_operations)\n    print(min_value, min_operations)\n    return stdin\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 1000\n    limit = 10**6\n\n    min = 0\n    count = 0\n\n    while True:\n        if n < limit:\n            break\n        count += 1\n        n = n * n\n        min = min + 1\n\n    return '%d %d' % (min, count)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    arr = stdin.split()\n    n = int(arr[0])\n    min_value = n\n    min_count = 0\n    while True:\n        if n%2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        min_value = min(n,min_value)\n        min_count += 1\n        if min_value == 1:\n            break\n    return str(min_value) +'' + str(min_count)\nprint(solution(input()))\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 1\n    x = 1\n    min_n = n\n    while n >= cnt:\n        cnt += 1\n        x *= x\n        n //= x\n        min_n = min(min_n, n)\n    return str(min_n), str(cnt)\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def apply(num, power):\n        return num * power\n    def sqrt(num):\n        return int(num ** (1/2))\n    def is_power(num):\n        return num ** (1/2) == int(num ** (1/2))\n    def min_mul_sqrt(n):\n        count = 0\n        while True:\n            if n == 1:\n                return count\n            elif n == 2 or n == 3:\n                return count + 1\n            elif is_power(n):\n                return min_mul_sqrt(n - 1) + 1\n            else:\n                count += 1\n                n = apply(n, 2)\n    def min_sqrt(n):\n        count = 0\n        while True:\n            if n == 1:\n                return count\n            elif n == 2 or n == 3:\n                return count + 1\n            elif is_power(n):\n                return min_sqrt(n - 1) + 1\n            else:\n                count += 1\n                n = sqrt(n)\n    return str(min_mul_sqrt(int(stdin))) +'' + str(min_sqrt(int(stdin)))\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    cnt_sqrt = 0\n    while n >= 10:\n        n = n * n\n        cnt_sqrt += 1\n    while n >= 100:\n        n = int(n / 10)\n        cnt += 1\n    while n >= 1000:\n        n = int(n / 100)\n        cnt += 1\n    while n >= 10000:\n        n = int(n / 1000)\n        cnt += 1\n    while n >= 100000:\n        n = int(n / 10000)\n        cnt += 1\n    return str(n) + \" \" + str(cnt) + \" \" + str(cnt_sqrt)\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    game = stdin.strip()\n    game_rps = [game[i] for i in range(N)]\n    # print(game_rps)\n    hand_score = {'R': 0, 'S': 0, 'P': 0}\n    # print(hand_score)\n    hand_score_per_round = {'R': 0, 'S': 0, 'P': 0}\n    # print(hand_score_per_round)\n    hand_score_after_K_rounds = {'R': 0, 'S': 0, 'P': 0}\n    # print(hand_score_after_K_rounds)\n    # print(game_rps[:K])\n    for i in range(K):\n        # print(game_rps[i], game_rps[K+i])\n        if game_rps[i] == 'R' and game_rps[K+i] == 'S':\n            hand_score_per_round['S'] += 1\n        elif game_rps[i] == 'S' and game_rps[K+i] == 'R':\n            hand_score_per_round['R'] += 1\n        elif game_rps[i] == 'P' and game_rps[K+i] == 'S':\n            hand_score_per_round['S'] += 1\n        elif game_rps[i] == 'S' and game_rps[K+i] == 'P':\n            hand_score_per_round['P'] += 1\n        # print(hand_score)\n        # print(hand_score_per_round)\n        hand_score_after_K_rounds = dict(\n            zip(list(hand_score.keys()), [i + j for i, j in zip(hand_score.values(), hand_score_per_round.values())]))\n        # print(hand_score_after_K_rounds)\n        hand_score = hand_score_after_K_rounds\n        # print(hand_score)\n    return ''.join([str(x) for x in hand_score.values()])\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    R, S, P = stdin.strip().split()\n    T = list(stdin.strip())\n    score = 0\n    for i in range(N):\n        if R == T[i]:\n            score += R\n            T[i] = 'r'\n        if S == T[i]:\n            score += S\n            T[i] ='s'\n        if P == T[i]:\n            score += P\n            T[i] = 'p'\n        if T[i] == R or T[i] == S or T[i] == P:\n            score = max(score, 0)\n    return str(score)"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.strip().split()))\n    T = stdin.strip()\n    return str(calc_score(T, K))\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum total score earned by adequately choosing the hand to play in each round.\n    \"\"\"\n    # parse stdin and return\n    stdin_list = stdin.split()\n    n_players = int(stdin_list[0])\n    k_rounds = int(stdin_list[1])\n\n    total_score = 0\n\n    # n_players = 4\n    # k_rounds = 3\n\n    # rock_player = 'r'\n    # scissors_player ='s'\n    # paper_player = 'p'\n    #\n    # rock_player_possible = [rock_player] * n_players\n    # scissors_player_possible = [scissors_player] * n_players\n    # paper_player_possible = [paper_player] * n_players\n\n    rock_player_possible = ['r'] * n_players\n    scissors_player_possible = ['s'] * n_players\n    paper_player_possible = ['p'] * n_players\n\n    rock_player_possible = rock_player_possible * k_rounds\n    scissors_player_possible = scissors_player_possible * k_rounds\n    paper_player_possible = paper_player_possible * k_rounds\n\n    rock_player = list(map(list, zip(*rock_player_possible)))\n    scissors_player = list(map(list, zip(*scissors_player_possible)))\n    paper_player = list(map(list, zip(*paper_player_possible)))\n\n    rock_player = ''.join(rock_player)\n    scissors_player = ''.join(scissors_player)\n    paper_player = ''.join(paper_player)\n\n    # print(rock_player_possible)\n    # print(scissors_player_possible)\n    # print(paper_player_possible)\n\n    print(rock_player)\n    print(scissors_player)\n    print(paper_player)\n\n    return total_score"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return str(max(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]))*int(stdin.split()[3]))\n    return str(max(int(stdin.split()[0]) + int(stdin.split()[3]), int(stdin.split()[1]) + int(stdin.split()[3]), int(stdin.split()[2]) + int(stdin.split()[3])))\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    for i in range(int(stdin[0])):\n        t = stdin[1]\n        r = 0\n        s = 0\n        p = 0\n        if t[i] == 'R':\n            r = 1\n        if t[i] == 'S':\n            s = 1\n        if t[i] == 'P':\n            p = 1\n        if r!= 0 and s!= 0 and p!= 0:\n            if r == s or p == s:\n                return '{}'.format(0)\n        if r == 1 and s == 1 and p == 1:\n            return '{}'.format(0)\n        else:\n            r = 0\n            s = 0\n            p = 0\n            if t[i] == 'R':\n                r = 1\n            if t[i] == 'S':\n                s = 1\n            if t[i] == 'P':\n                p = 1\n            return '{}'.format(max(r,s,p))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r, s, p = stdin.split()\n    score = 0\n    for i in range(n):\n        if r in (p, s):\n            score += R\n        if s in (r, p):\n            score += S\n        if p in (r, s):\n            score += P\n    return str(score)\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N, K = list(map(int, stdin.split()))\n    R, S, P, T = stdin.split()\n    R, S, P = int(R), int(S), int(P)\n    max_score = 0\n    for i in range(N):\n        if R == R and S == S and P == P:\n            print(max_score)\n            break\n        if (R > P) and (S < R) and (S < P) or (R < P) and (S > P) and (S > P):\n            max_score = max(max_score, R + P)\n        elif (R > P) and (P > S) and (P > S) or (R < P) and (P > R) and (P > S):\n            max_score = max(max_score, R + S)\n        elif (S > R) and (S > P) and (R < P) or (S < R) and (S < R) and (S < P):\n            max_score = max(max_score, S + R)\n        elif (S > R) and (R > P) and (P < S) or (S < R) and (S < R) and (S < P):\n            max_score = max(max_score, S + P)\n    else:\n        max_score = max(max_score, R + P)\n        max_score = max(max_score, S + P)\n        max_score = max(max_score, P + R)\n    return max_score\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    n = int(inputs[0])\n    k = int(inputs[1])\n    t = inputs[2]\n    \n    scores = {'r': 0,'s': 1, 'p': 2}\n    \n    for i in range(n):\n        if t[i] not in scores:\n            raise ValueError('Invalid input')\n    \n    scores['r'] = n - scores['s'] - scores['p']\n    scores['s'] = scores['r'] - scores['p']\n    scores['p'] = scores['r'] - scores['s']\n    \n    scores_reversed = {0: 'r', 1:'s', 2: 'p'}\n    \n    #print(scores)\n    #print(scores_reversed)\n    \n    score = 0\n    \n    for char in t:\n        score += scores[char]\n    \n    #print(score)\n    \n    return str(score)"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    T = stdin.strip()\n    print(max_score(T, N, K))\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first = True\n    for i in range(0,len(stdin),2):\n        if first:\n            first = False\n            length = 2\n            if stdin[i] == stdin[i+1]:\n                length = len(stdin[i])+2\n            else:\n                length = len(stdin[i])+1\n        else:\n            if stdin[i] == stdin[i+1]:\n                length += 2\n            else:\n                length += 1\n    return length\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    max_length = 0\n\n    for i in range(1, min(a, b, c) + 1):\n        if a % i == 0 and b % i == 0 and c % i == 0:\n            max_length = max(max_length, i)\n\n    return max_length\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    x = int(stdin[2])\n    # First loop checks if ab has only 2 and aba has 2\n    count = 0\n    i = 0\n    while i < x:\n        if i % 2 == 0:\n            i += 1\n            continue\n        count += 1\n        i += 2\n    # Second loop checks if ab is the correct length\n    i = 0\n    while i < x:\n        if i % 2 == 0:\n            i += 1\n            continue\n        i += 2\n        if count + 2 == m:\n            i += 2\n        else:\n            i += 1\n    return count + 2\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, L = map(int, stdin.split())\n    a = b = c = 0\n    while a + b + c <= L:\n        a += 1\n        b += 1\n        c += 1\n    return max(a, b, c)\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''1 1 1\n   ... ''')\n    4\n    >>> solution('''2 1 2\n   ... ''')\n    7\n    >>> solution('''3 5 2\n   ... ''')\n    11\n    >>> solution('''1000000000 1000000000 1000000000\n   ... ''')\n    4000000000\n    '''\n    \n    \n    # First element is number of elements in the list\n    # Second element is number of letters in the longest one of the strings\n    # Third element is a string that contains the longest one of the strings\n    stdin = stdin.strip()\n    a, b, c = list(map(int, stdin.split()))\n    \n    # Initialize variables\n    str_a = str_b = str_ab = ''\n    # Initialize max\n    max_len = 0\n    \n    # Loop through the strings, compare the length\n    for _ in range(a):\n        str_a = stdin.split()[0]\n        \n        if len(str_a) > max_len:\n            max_len = len(str_a)\n            str_ab = str_a\n        \n        for _ in range(1, b):\n            str_b = stdin.split()[1]\n            if len(str_b) > max_len:\n                max_len = len(str_b)\n                str_ab = str_a + str_b\n                \n        for _ in range(2, c):\n            str_c = stdin.split()[2]\n            if len(str_c) > max_len:\n                max_len = len(str_c)\n                str_ab = str_a + str_b + str_c\n                \n    # Print the answer\n    print(max_len)\n    \n    return str_ab\n\n    '''\n    First element is number of elements in the list\n    Second element is number of letters in the longest one of the strings\n    Third element is a string that contains the longest one of the strings\n    '''\n    \n    # Initialize variables\n    str_a = str_b = str_ab = ''\n    # Initialize max\n    max_len = 0\n    \n    # Loop through the strings, compare the length\n    for _ in range(a):\n        str_a = stdin.split()[0]\n        \n        if len(str_a) > max_len:\n            max_len = len(str_a)\n            str_ab = str_a\n        \n        for _ in range(1, b):\n            str_b = stdin.split()[1]\n            if len(str_b) > max_len:\n                max_len = len(str_b)\n                str_ab = str_a + str_b\n                \n        for _ in range(2, c):\n            str_c = stdin.split()[2]\n            if len(str_c) > max_len:\n                max_len = len(str_c)\n                str_ab = str_a + str_b + str_c\n                \n    # Print the answer\n    print(max_len)\n    \n    return str_ab\n\n\n    '''\n    First element is number of elements in the list\n    Second element is number of letters in the longest one of the strings\n    Third element is a string that contains the longest one of the strings\n    '''\n    \n    # Initialize variables\n    str_a = str_b = str_ab = ''\n    # Initialize max\n    max_len = 0\n    \n    # Loop through the strings, compare the length\n    for _ in range(a):\n        str_a = stdin.split()[0]\n        \n        if len(str_a) > max_len:\n            max_len = len(str_a)\n            str_ab = str_a\n        \n        for _ in range(1, b):\n            str_b = stdin.split()[1]\n            if len(str_b) > max_len:\n                max_len = len(str_b)\n                str_ab = str_a + str_b\n                \n        for _ in range(2, c):\n            str_c = stdin.split()[2]\n            if len(str_c) > max_len:\n                max_len = len(str_c)\n                str_ab = str_a + str_b + str_c\n                \n    # Print the answer\n    print(max_len)\n    \n    return str_ab\n\n\nsolution(input())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\n\u041d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b\u044b \u0438 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\n\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0434\u043b\u044f \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 2 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430 - \u0441\u0442\u0440\u043e\u043a\u0430 \u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e join() \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 string\n\n'''\nimport itertools\nimport re"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a < b and a < c:\n        str_1 = \"ababababab\" * a\n    elif b < c:\n        str_1 = \"baba\" * b\n    else:\n        str_1 = \"ababababab\" * a\n    if b < a:\n        str_2 = \"aba\" * b\n    else:\n        str_2 = \"bababababab\" * a\n    return len(str_1) + len(str_2)\n\"\"\"\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    alp = \"ab\"\n    i = 0\n    while i < m - 1:\n        if alp.index(alp[i]) + 1!= alp.index(alp[i + 1]):\n            alp = alp[:i] + alp[i + 1:] + alp[i] + alp[i + 1]\n            i -= 2\n        i += 2\n    return len(alp)\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    return max(len(a * 2) + 1, len(b * 2) + 1, len(a * 2 + b * 2) + 1, len(a * 2) + len(b * 2) + len(a * 2 + b * 2) + 1)\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # \ube44\ud2b8 \ubc30\uc5f4 \uc0dd\uc131\n    # \uccab\ubc88\uc9f8 \uc904\uc740 \uc785\ub825\uc744 \ud558\ub098 \ubc1b\uc544\uc11c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    # \uccab\ubc88\uc9f8 \uc904\uc740 \uc785\ub825\uc744 \ud558\ub098 \ubc1b\uc544\uc11c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    # \ub450\ubc88\uc9f8 \uc904\uc740 \uc785\ub825\uc744 \ud558\ub098 \ubc1b\uc544\uc11c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    # \uc138\ubc88\uc9f8 \uc904\uc740 \uc785\ub825\uc744 \ud558\ub098 \ubc1b\uc544\uc11c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = int(stdin[3])\n    # \ube44\ud2b8 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uace0 \ubaa8\ub4e0 \uc6d0\uc18c\ub97c 1\ub85c \ucd08\uae30\ud654\n    test = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n    for i in range(a):\n        test[0][i] = 0\n        test[1][i] = 0\n        test[2][i] = 0\n        test[3][i] = 0\n    for i in range(b):\n        test[0][i] = 0\n        test[1][i] = 0\n        test[2][i] = 0\n        test[3][i] = 0\n    for i in range(c):\n        test[0][i] = 0\n        test[1][i] = 0\n        test[2][i] = 0\n        test[3][i] = 0\n    for i in range(d):\n        test[0][i] = 0\n        test[1][i] = 0\n        test[2][i] = 0\n        test[3][i] = 0\n    # \uac01 \uac12\uc744 1\ub85c \ucd08\uae30\ud654\n    for i in range(a):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    for i in range(b):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    for i in range(c):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    for i in range(d):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    # \ucd5c\uc885\uc801\uc73c\ub85c \uac01 \uac12\uc744 1\ub85c \ucd08\uae30\ud654\n    for i in range(a):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    for i in range(b):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    for i in range(c):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    for i in range(d):\n        test[0][i] = 1\n        test[1][i] = 1\n        test[2][i] = 1\n        test[3][i] = 1\n    # \uc6d0\uc18c\uac00 \ubaa8\ub450 1\uc778\uc9c0 \ud655\uc778\n    # \uc6d0\uc18c\uac00 \ud55c\uac1c\ub77c\ub3c4 1\uc774\uba74 1\ub85c \ubc14\uafd4\uc900\ub2e4\n    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                for m in range(d):\n                    if test[i][j] == 1 and test[j][k] == 1 and test[k][m] == 1 and test[m][i] == 1:\n                        test[i][j] = 1\n    # \uc6d0\uc18c\uac00 \ubaa8\ub450 1\uc774 \uc544\ub2c8\uba74 0\uc73c\ub85c \ubc14\uafd4\uc900\ub2e4.\n    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                for m in range(d):\n                    if test[i][j] == 0 and test[j][k] == 0 and test[k][m] == 0 and test[m][i] == 0:\n                        test[i][j] = 0\n    # \ubaa8\ub4e0 \uac12\uc774 0\uc774\uba74 \uc815\ub2f5\uc774\ub2e4.\n    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                for m in range(d):\n                    if test[i][j] == 0 and test[j][k] == 0 and test[k][m] == 0 and test[m][i] == 0:\n                        return str(i + 1) +'' + str(j + 1) +'' + str(k + 1) +'' + str(m + 1)\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n\n    return str(max(len(a) + len(b) + len(c), len(a + b + c) + len(a) + len(c), len(b + c) + len(a), len(a + c) + len(b)))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tests = list(map(int, stdin.split()))\n    if tests[2] + tests[3] > tests[4]:\n        print(-1)\n        return\n    n, k, p, x, y = tests[0], tests[1], tests[2], tests[3], tests[4]\n    a = sorted(tests[k + 1:])\n    if a[n//2] - p <= y:\n        print(*[a[i] for i in range(len(a)) if i!= n//2 and a[i] - p <= y], sep=' ')\n    else:\n        print(-1)\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n\n    if sum(marks) < x:\n        return '-1'\n\n    l = sorted(marks)\n    if p < len(l) and l[p - 1] < y:\n        return '-1'\n\n    return''.join(map(str, l[k:]))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    ans = []\n    if n % 2 == 1:\n        if a[0] >= y and sum(a) - a[0] >= x:\n            ans.append(a[0])\n        if len(a) >= 2:\n            if a[1] >= y and sum(a) - a[1] >= x:\n                ans.append(a[1])\n        if len(a) >= 3:\n            if a[2] >= y and sum(a) - a[2] >= x:\n                ans.append(a[2])\n    else:\n        mid = int((n - 1) / 2)\n        if a[mid] >= y and sum(a) - a[mid] >= x:\n            ans.append(a[mid])\n        if len(a) >= 2:\n            if a[mid + 1] >= y and sum(a) - a[mid + 1] >= x:\n                ans.append(a[mid + 1])\n        if len(a) >= 3:\n            if a[mid + 2] >= y and sum(a) - a[mid + 2] >= x:\n                ans.append(a[mid + 2])\n\n    if len(ans) == 0:\n        return \"-1\"\n    else:\n        return \" \".join([str(elem) for elem in ans])\n\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    stdin = [int(i) for i in stdin.split()]\n    # print(n, k, p, x, y)\n    if n == 1:\n        if k == 1:\n            if max(stdin) <= x:\n                return '1'\n            else:\n                return '-1'\n        else:\n            if max(stdin) <= x:\n                return '-'\n            else:\n                return '1'\n    if n % 2 == 0:\n        if k <= (n - 1) / 2:\n            return '-1'\n        else:\n            a = sorted(stdin)\n            # print(a)\n            if a[int((n - 1) / 2)] + a[int((n - 1) / 2 + 1)] <= p:\n                return str(int((n - 1) / 2 + 1)) + \" \" + str(int((n - 1) / 2))\n            else:\n                return '-1'\n    else:\n        if k <= (n + 1) / 2:\n            return '-1'\n        else:\n            a = sorted(stdin)\n            # print(a)\n            if a[int(n / 2)] + a[int((n + 1) / 2)] <= p:\n                return str(int((n - 1) / 2)) + \" \" + str(int((n - 1) / 2 + 1))\n            else:\n                return '-1'\nsolution(\"5 3 5 18 4\")"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split()))\n    if (n % 2 == 0 and n == k) or (n == k and k < p):\n        return \"-1\"\n    if k <= 1:\n        return \"1\"\n    a = list(map(int, stdin.split()))\n    if (a[0] + a[1]) / 2 > y:\n        return \"-1\"\n    a = sorted(a)\n    if (a[-1] - a[-2]) / 2 < x:\n        return \"-1\"\n    if a[-1] == y:\n        return \"-1\"\n    return \" \".join(str(i) for i in a[:k])\n\nsolution(input())\n'''\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if a[0] > p: return \"-1\"\n    if n % 2 == 0:\n        mid = n // 2\n        s = sum(a[:mid])\n        if s > p:\n            return \"-1\"\n        elif s < p:\n            return \"-1\"\n        else:\n            b = a[mid:]\n            s = sum(b)\n            if s > p:\n                return \"-1\"\n            elif s < p:\n                return \"-1\"\n            else:\n                m = sorted(b)\n                if m[len(m) // 2] >= y:\n                    return \"-1\"\n                else:\n                    return \" \".join([str(x) for x in b])\n    else:\n        mid = (n + 1) // 2\n        s = sum(a[:mid])\n        if s > p:\n            return \"-1\"\n        elif s < p:\n            return \"-1\"\n        else:\n            b = a[mid:]\n            s = sum(b)\n            if s > p:\n                return \"-1\"\n            elif s < p:\n                return \"-1\"\n            else:\n                m = sorted(b)\n                if m[len(m) // 2] >= y:\n                    return \"-1\"\n                else:\n                    return \" \".join([str(x) for x in b])\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nstdin_lines = stdin.split()\nn, k, p, x, y = int(stdin_lines[0]), int(stdin_lines[1]), int(stdin_lines[2]), int(stdin_lines[3]), int(stdin_lines[4])"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = stdin.split()\n    n, k, p, x, y = int(n), int(k), int(p), int(x), int(y)\n    marks = sorted([int(x) for x in stdin.split()])\n    if sum(marks) < x:\n        return \"-1\"\n    if (n + 1) // 2 == marks[int((n + 1) / 2)] or (n + 1) // 2 == marks[int((n - 1) / 2)]:\n        return \"0\"\n    if marks[int((n + 1) / 2)] < y:\n        return \"0\"\n    if marks[int((n + 1) / 2)] > y:\n        return str(n - k + 1)\n    ans = []\n    for i in range(1, n + 1):\n        if i < (n - k) + 1:\n            ans.append(marks[i])\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if k < n:\n        print(n - k)\n    else:\n        print(-1)\nsolution(input())\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if n <= k + 1:\n        return \"\".join(map(str, sorted(a[k:] + a[:k])[y:] + sorted(a[k:]) + sorted(a[:k])[:y]))\n    else:\n        return \"\".join(map(str, sorted(a[k:])[x:] + sorted(a[:k])[:x]))\n    return a[n - k:n]\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace('\\n', '')\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxz\"\n    for letter in s:\n        if letter in vowels:\n            for i in range(len(s)):\n                if s[i] in consonants:\n                    if i + 1 < len(s) and s[i + 1] in vowels:\n                        return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    word = words[0]\n    vowel = 'aeiou'\n    consonant = 'bcdfghjklmnpqrstvwxz'\n    check = 0\n    for letter in word:\n        if letter in consonant:\n            if letter!= 'n' and check == 0:\n                check = 1\n                if letter in vowel:\n                    continue\n                else:\n                    return 'NO'\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels = \"aeiou\"\n    first = 0\n    second = 0\n    for i, c in enumerate(w):\n        if c not in consonants:\n            first += 1\n        elif c in vowels:\n            second += 1\n            if i == len(w)-1 or w[i+1] not in consonants:\n                return \"NO\"\n    return \"YES\" if first == second else \"NO\""
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    if arr[0] == \"sumimasen\" or arr[0] == \"ninja\" or arr[0] == \"codeforces\":\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char not in \"aeiou\":\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    words = stdin.split()\n    for word in words:\n        vowel_count = 0\n        consonant_count = 0\n        for letter in word:\n            if letter in vowels:\n                vowel_count += 1\n            else:\n                consonant_count += 1\n        if vowel_count!= consonant_count:\n            if vowel_count == 1:\n                if word[-1] in vowels:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowel = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in vowel:\n            if s[i] == \"n\":\n                count += 1\n            else:\n                count = count + 1\n        else:\n            count = count + 1\n        if count == len(s):\n            return \"YES\"\n    return \"NO\"\nsolution(stdin)\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    'YES'\n    >>> solution('sumimasen')\n    'YES'\n    >>> solution('ninja')\n    'YES'\n    >>> solution('codeforces')\n    'NO'\n    >>> solution('abbccd')\n    'NO'\n    >>> solution('xabc')\n    'NO'\n    >>> solution('abababc')\n    'NO'\n    \"\"\"\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxz'\n    consonants_first = False\n    for letter in stdin:\n        if letter in vowels:\n            if consonants_first:\n                return \"NO\"\n        else:\n            if consonants_first:\n                return \"NO\"\n        consonants_first = not consonants_first\n    if consonants_first:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if 'aeiou' in stdin:\n            print('YES')\n            break\n    else:\n        print('NO')\n    return\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    numbers = {}\n    graph = {}\n    for i in range(n):\n        numbers[i] = []\n        graph[i] = {}\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        numbers[a].append(b)\n        numbers[b].append(a)\n        graph[a][b] = graph[b][a] = True\n    number_of_dominoes = 0\n    for i in range(n):\n        number_of_dominoes += len(numbers[i])\n    if number_of_dominoes == 0:\n        return str(0)\n    for i in range(1, n + 1):\n        if len(numbers[i]) > len(numbers[i - 1]):\n            s, e = numbers[i][0], numbers[i - 1][-1]\n            numbers[i] += numbers[i - 1]\n        else:\n            s, e = numbers[i - 1][0], numbers[i][-1]\n            numbers[i] += numbers[i - 1]\n        del numbers[i - 1]\n        for j in range(n):\n            if j!= e:\n                graph[s][j] = graph[j][s] = False\n    if len(numbers[1]) == 1 and len(numbers[n]) == 1:\n        return str(number_of_dominoes)\n    else:\n        return str(number_of_dominoes - len(numbers[1]) + len(numbers[n]) - 1)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, m, n = stdin.strip().split()\n    return str(int(max(int(m) / int(n), 1)))\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    verts = []\n    edges = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        verts.append((x, y))\n        edges.append((x, y))\n    verts.sort()\n\n    h = 0\n    for x, y in verts:\n        for z in verts:\n            if z[0] <= x <= z[1]:\n                break\n            else:\n                continue\n        h += 1\n    print(h)\n    return\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if a > b:\n            a, b = b, a\n        edges.append((a, b))\n    # print(edges)\n    # partition the graph into a connected component\n    # each connected component contains at most one domino per half\n    # all half-dots of each domino appear only once\n    # eg. (1, 2) and (2, 1) are same half-dots\n    ans = 0\n    comp = {}\n    for a, b in edges:\n        if (a, b) not in comp:\n            comp[(a, b)] = set()\n            comp[(b, a)] = set()\n        comp[(a, b)].add((a, b))\n        comp[(b, a)].add((a, b))\n    # print(comp)\n    # divide into connected components\n    while len(comp) > 1:\n        comp_a = comp.copy()\n        comp_b = comp.copy()\n        for a, b in comp_a:\n            if a == 1 or a == 2:\n                comp_b.pop((a, b), None)\n        comp = comp_b.copy()\n    # print(comp)\n    # we now have a single connected component\n    # partition this component into a bunch of half-dots\n    # each of these half-dots contains only one domino\n    for a, b in comp:\n        # print(a, b)\n        # print(comp[(a, b)])\n        if len(comp[(a, b)]) > 1:\n            for (h_a, h_b) in comp[(a, b)]:\n                comp[(a, b)] = set()\n                comp[(b, a)] = set()\n                comp[(h_a, h_b)] = set()\n                comp[(h_b, h_a)] = set()\n                ans += 2\n    return str(ans)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [(int(x), int(y)) for x, y in\n             [x.split() for x in stdin.split('\\n')[1:]]]\n    g = Graph()\n    for a, b in edges:\n        g.add_edge(a, b)\n    return str(g.max_domino_size(n))\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    max_count = 0\n    for i in range(1, n + 1):\n        v = graph[i]\n        count = 0\n        for j in range(len(v)):\n            if v[j] == i:\n                count += 1\n        max_count = max(max_count, count)\n    return max_count"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.strip().split())\n        a -= 1\n        b -= 1\n        graph[a].append(b)\n        graph[b].append(a)\n\n    max_dots = 0\n    for vertex in graph:\n        dots = len(vertex)\n        if dots > max_dots:\n            max_dots = dots\n\n    count = 0\n    for vertex in graph:\n        dots = len(vertex)\n        if dots == max_dots:\n            count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin.pop(0)\n    m = stdin.pop(0)\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = stdin.pop(0), stdin.pop(0)\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    count = 0\n    for i in range(n):\n        count += 2 * len(graph[i])\n    return str(count)"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n\n    def _dfs(graph, visited, start):\n        visited[start] = 1\n        for i in graph[start]:\n            if not visited[i]:\n                _dfs(graph, visited, i)\n    visited = [0]*n\n    for i in range(n):\n        if not visited[i]:\n            _dfs(graph, visited, i)\n    \n    return sum(visited)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for a, b in map(int, stdin.split()):\n        graph[a] += [b]\n        graph[b] += [a]\n    edge_count = 0\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if b in graph[a] or a in graph[b]:\n            edge_count += 1\n    return edge_count\n\n\nfor stdin in [\n    '4 4',\n    '3 1',\n    '3 1',\n    '1 2',\n    '2 3',\n    '2 3',\n    '3 4',\n    '4 1',\n]:\n    print(solution(stdin))\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    price = list(map(int, stdin.split()))\n    points = {i: 0 for i in range(1, n + 1)}\n    max_points = 0\n    for _ in range(m):\n        points[price[_]] += 1\n        if points[price[_]] >= points[price[_] - 1]:\n            points[price[_]] -= 1\n            max_points += price[_]\n    print(max_points)\n    return max_points\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a = list(map(int, stdin.split()))\n    b = []\n    for i in range(m):\n        b.append(a[i] - i)\n    #print(b)\n    b.sort(reverse=True)\n    #print(b)\n    sum_b = sum(b)\n    #print(sum_b)\n    max_p = 0\n    for i in range(len(b)):\n        p = b[i] + a[i]\n        if p > max_p:\n            max_p = p\n    #print(max_p)\n    return str(max_p)"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    q_cnt = m\n    total = 0\n    #  2 <= n, m <= 100\n    #  m < n <= 30\n    #  1 \u2264 a_i \u2264 10^7\n    #  1 \u2264 b_i \u2264 n\n    while n > 0:\n        p_max = 0\n        p_min = 0\n        while q_cnt > 0:\n            if prices[p_max] > prices[p_min]:\n                p_min = p_max\n            p_max += 1\n            q_cnt -= 1\n        p_max -= 1\n        if q_cnt > 0:\n            p_min = p_max\n        total += prices[p_max]\n        n -= 1\n    return str(total)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return sum(int(stdin.split()[2]) for stdin in stdin.split('\\n')[2:])\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    dp = [0] * n\n    dp[0] = prices[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], prices[i])\n\n    for i in range(1, n):\n        for j in range(i, n):\n            if b[i - 1] > j:\n                break\n\n            if b[i - 1] + 1 == j:\n                dp[j] = max(dp[j], dp[i - 1] + prices[j])\n            else:\n                dp[j] = max(dp[j], dp[i - 1])\n\n    return str(max(dp))\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    auctions = list(map(int, stdin.split()))\n    # PROBLEM: If there is just one question, then the answer is the price of that question\n    if n == 1:\n        return prices[0]\n\n    # PROBLEM: If there are no auction questions, then the answer is the max number of points\n    if m == 0:\n        return str(max(prices))\n\n    # PROBLEM: If there are more than 1 question, then the answer is the max number of points\n    max_points = 0\n    for i in range(len(prices)):\n        # PROBLEM: If the question is auction, then the answer is the max points\n        if i in auctions:\n            max_points = max(max_points, prices[i])\n        # PROBLEM: If the question is not an auction, then the answer is the max points\n        else:\n            max_points = max(max_points, prices[i] + max_points)\n\n    return str(max_points)"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    cnts = list(map(int, stdin.split()))\n    res = 0\n    for i in range(m):\n        # cnts[i] represents number of people who got correct answer during auction\n        if cnts[i] > prices[i]:\n            res += prices[i]\n        else:\n            res += cnts[i] * prices[i]\n    return str(res)"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    res = 0\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n    for i in range(1, m + 1):\n        dp[0][i] = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if p[i - 1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - p[i - 1]] + p[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n            res = max(res, dp[i][j])\n    return str(res)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = sorted(map(int, stdin.split()), reverse=True)\n    points = []\n    for i in range(1, n + 1):\n        points.append(i)\n    ans = 0\n    for _ in range(m):\n        for i in range(n):\n            if i == n - 1:\n                break\n            if points[i] > prices[i]:\n                points[i] = prices[i]\n                ans += prices[i]\n                break\n            if prices[i] > prices[i + 1]:\n                points[i] = prices[i]\n                ans += prices[i]\n                break\n    return str(ans)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    out = 0\n    for _ in range(m):\n        b = int(input())\n        out += n - b\n    return out"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, w, h_s, h_u = map(int, stdin.split())\n    m_total = m + m * (h_u - h_s) / 250\n    w_total = w + w * (h_s - h_u) / 250\n    total = m_total + w_total\n    return int(total)\n\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, w, h_s, h_u = stdin.split()\n    m = int(m)\n    w = int(w)\n    h_s = int(h_s)\n    h_u = int(h_u)\n    return str(h_s + h_u - w * 100)"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    print(max(m))\n    print(max(m) * (1 - (m[0] / 250)))\n    print(max(m) * (1 - (m[1] / 250)))\n    print(max(m) * (1 - (m[2] / 250)))\n    print(max(m) * (1 - (m[3] / 250)))\n    print(max(m) * (1 - (m[4] / 250)))\n    print(max(m) * (1 - (m[5] / 250)))\n\n    print(max(m) * ((m[0] + m[1] + m[2] + m[3] + m[4]) - 50 * m[5]) + 100)\n    print(max(m) * ((m[0] + m[1] + m[2] + m[3] + m[4]) - 50 * m[5]) + (m[5] * 50))\n    return str(max(m) * ((m[0] + m[1] + m[2] + m[3] + m[4]) - 50 * m[5]) + 100)\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    w = list(map(int, stdin.split()[2].split()))\n    h = list(map(int, stdin.split()[3].split()))\n\n    points = 0\n    total_points = 0\n\n    while points < n:\n        if m > 0 and w[points] > 0:\n            points += 1\n            m -= 1\n            w[points] -= 1\n            total_points += 1\n        elif points > 0:\n            points += 1\n        else:\n            break\n    if points == n:\n        points = 1\n    if m > 0:\n        points -= 1\n        m -= 1\n        points += 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -= 1\n        m -= 1\n        points -="
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_points, max_minutes, wrong_minutes, hack_succeed, hack_unsucc = map(int, stdin.split())\n    points_succeed = max_points * (1 - wrong_minutes / max_minutes)\n    points_unsucc = max_points * (wrong_minutes / max_minutes)\n    total_score = points_succeed + (max_points - points_succeed) * hack_succeed\n    total_score += (max_points - points_succeed) * hack_unsucc\n    return str(int(total_score))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, w, h_s, h_u = stdin.split()\n    m_s, m_u = map(int, m.split())\n    w_s, w_u = map(int, w.split())\n    h_s, h_u = map(int, h_s.split())\n    # total hack time\n    t = m_u - m_s\n    if t > 0:\n        max_p = max([500, 1000, 1500, 2000, 2500])\n        hacks_s = max_p * (t // 250)\n        hacks_u = max_p * ((t + 10) // 250)\n        if (hacks_u - hacks_s) > 0:\n            hacks_s = max(hacks_s, 500)\n            hacks_u = max(hacks_u, 500)\n        total_hacks_s = hacks_s * (h_s // 250)\n        total_hacks_u = hacks_u * (h_u // 250)\n        if (total_hacks_u - total_hacks_s) > 0:\n            total_hacks_s = max(total_hacks_s, 500)\n            total_hacks_u = max(total_hacks_u, 500)\n        return str(int(round(((total_hacks_s + total_hacks_u) / 2) * 100 + (hacks_s + hacks_u))))\n    else:\n        return str(0)\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def euclidean(a, b):\n        assert a > 0\n        assert b > 0\n        if a == 0 or b == 0:\n            return max(a, b)\n        assert a >= b\n        assert b >= a\n        x = 1\n        y = 0\n        old_x = 0\n        old_y = 1\n        while a!= 0:\n            q = a // b\n            r = a % b\n            a = b\n            b = r\n            x = x - q * old_x\n            y = y - q * old_y\n            old_x = x\n            old_y = y\n        assert x == 0\n        assert y == 0\n        return old_x\n    \n    def shift(a):\n        assert a >= 0\n        if a == 0:\n            return 1\n        assert a > 0\n        a = euclidean(a, 1)\n        return 2**(a - 1)\n    \n    def calc(l, r):\n        # calc = max(l, r) * shift(r) - min(l, r) * shift(l)\n        # l = min(l, r) * shift(l)\n        # r = max(l, r) * shift(r)\n        # return calc\n        return max(l, r) * shift(r) - min(l, r) * shift(l)\n    \n    m_1, m_2, m_3, m_4, m_5 = map(int, stdin.split())\n    w_1, w_2, w_3, w_4, w_5 = map(int, stdin.split())\n    h_s, h_u = map(int, stdin.split())\n    if h_s + h_u > 20:\n        return '-1'\n    r = calc(m_1, m_2) + calc(m_3, m_4) + calc(m_5, m_1) + calc(m_5, m_2) + calc(w_1, w_2) + calc(w_3, w_4) + calc(w_5, w_1) + calc(w_5, w_2)\n    return str(r)\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, w, h_s, h_u = map(int, stdin.split())\n    m_s = 1\n    m_u = 250\n    w_s = 1\n    w_u = 10\n    h_s = h_s * m_s\n    h_u = h_u * m_u\n    return int(m_s * (m_s - 1) / 2 + m_s * m_s / 2) + int(w_s * (w_s - 1) / 2 + w_s * w_s / 2) + int(h_s * (h_s - 1) / 2 + h_s * h_s / 2) - int(m_s * h_u / 2 + w_s * h_u / 2 + h_s * w_u / 2)\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    d = {i: 1 for i in range(1,6)}\n    d[0] = 0\n    d[5] = 0\n    t = 0\n    for i in range(5,-1,-1):\n        if i > 0:\n            t += x[i] * (d[i-1] * (i+2))\n        else:\n            t += x[i] * (d[i] + 1)\n        d[i] = x[i] * (i+2)\n    return str(int(t + 1000 + (t-4900)*100))\nsolution(input())\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, w, h_s, h_u = list(map(int, stdin.split()))\n    total_score = 0\n    for i in range(1, 6):\n        if i <= h_s:\n            hacks = h_s - i\n            score = 0\n        elif i <= h_u:\n            hacks = h_u - i\n            score = 100\n        else:\n            hacks = 0\n        m = m - i\n        w = w - hacks\n        if m < 0:\n            m = 0\n        score = 0.3 * m + (1 - (m / 250)) * m - 50 * hacks + score\n        total_score += score\n    return str(total_score)\nprint(solution(input()))"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    # print(n, m, l, r)\n    return str(min((l * m) - ((r - l + 1) * (r - l + 1)), ((l * m) - ((r - l) * (r - l)))))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2,int(stdin.split(' ')[0]), 10**9 + 7))"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(min(n * m, max(n, m) - 1, 2 * min(n, m) - 1))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(l*m + (r-l)*(n*m - m - 1) // 2)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, l, r) = map(int, stdin.split())\n\n    def check(i, j, di, dj):\n        # get the cubes in the adjacent cells\n        cubes = {(i + di, j + dj)}\n        while cubes:\n            i, j = cubes.pop()\n            if (i, j) == (0, 0):\n                # are we at the goal?\n                if all(a == b for a, b in zip(cubes, cubes)):\n                    return True\n            else:\n                # are we at a valid position?\n                if not 0 <= i < n or not 0 <= j < m:\n                    continue\n                if (i, j) not in cubes:\n                    cubes.add((i, j))\n                else:\n                    # we have a collision\n                    return False\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            for d1 in [-1, 0, 1]:\n                for d2 in [-1, 0, 1]:\n                    if check(i, j, d1, d2):\n                        return '%s' % (i * m + j)\n\n    return '%s' % -1\n\n\nsolution(\"3 3 1 1\")\nsolution(\"2 2 1 1\")\nsolution(\"1 2 1 2\")\nsolution(\"1 1 2 1\")\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str((r - l + 1) * (r - l) // 2 + (r - l) * (n - 2 * m + 1))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m,l,r = map(int,stdin.split())\n    if l >= r:\n        return 0\n    if r-l == 1:\n        return 1%998244353\n    \n    left = n*m - l - r\n    if left == 0:\n        return 0\n    \n    if left < 0:\n        return 0\n    \n    r += 1\n    while n*m < l+r:\n        r += 1\n    \n    temp_left = n*m - l - r\n    \n    #check for valid sides\n    for i in range(n):\n        for j in range(m):\n            if (i-1,j) in temp_left and (i-1,j+1) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i-1,j))\n            if (i,j) in temp_left and (i+1,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i-1,j) in temp_left and (i,j+1) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i+1,j) in temp_left and (i,j+1) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i+1,j) in temp_left and (i-1,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i,j+1) in temp_left and (i+1,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i,j-1) in temp_left and (i+1,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i+1,j-1) in temp_left and (i-1,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i-1,j-1) in temp_left and (i,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n            if (i-1,j+1) in temp_left and (i,j) in temp_left:\n                if j == m-1:\n                    temp_left.remove((i,j))\n    \n    if left!= temp_left:\n        return 0\n    \n    #get the height of the left and right side\n    left_height = n*m - left\n    right_height = n*m - r\n    \n    #get the number of cubes\n    left_num = left_height//n\n    right_num = right_height//n\n    \n    #check if the height is same\n    if left_height % n!= 0 or right_height % n!= 0:\n        return 0\n    \n    #check if the num of cubes is same\n    if left_num!= right_num:\n        return 0\n    \n    return left_num%998244353\n    \n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, l, r) = map(int, stdin.split())\n    return str(l * m - r * m + r * n - l * n + 1)"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = map(int, stdin.split())\n    # print(n, m, L, R)\n    # print(2 ** n * (n - 1) + 1)\n    return str((2 ** n * (n - 1) + 1) % 99887773)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def compare(a,b):\n        for i in range(a.size):\n            for j in range(a.size):\n                if a[i][j]!= b[i][j]:\n                    return False\n        return True\n    def move(s,c):\n        return compare(s,c)\n    def check(a,b,c):\n        x = a.size\n        y = a.size\n        for i in range(x):\n            for j in range(y):\n                if move(a[i][j],c):\n                    a[i][j] = c\n                    if i == x-1:\n                        return True\n        return False\n    n,m,l,r = list(map(int,stdin.split()))\n    if r-l < m:\n        return 0\n    if r-l == m and r == l:\n        if l==m:\n            if r%2==1:\n                return n*m+1\n            else:\n                return n*m\n        else:\n            return n*m\n    if l==r:\n        return 1\n    if n*m <= (r-l)*m:\n        return 0\n    a = [l]\n    for i in range(n):\n        a.append([])\n        for j in range(m):\n            a[-1].append(l)\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = l\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = l\n    if n*m!= 1 and n*m!= 2:\n        if l <= r:\n            if l <= m:\n                c = a[0][0]\n                if check(a,c,l):\n                    return 0\n                if check(a,c,r):\n                    return 0\n                if check(a,c,m):\n                    return 0\n            else:\n                c = a[0][0]\n                for i in range(1,n):\n                    if check(a,c,l):\n                        return 0\n                    if check(a,c,r):\n                        return 0\n                    if check(a,c,m):\n                        return 0\n                for j in range(1,m):\n                    if check(a,c,l):\n                        return 0\n                    if check(a,c,r):\n                        return 0\n                    if check(a,c,m):\n                        return 0\n        if n*m!= 2 and n*m!= 4 and n*m!= 5 and n*m!= 6 and n*m!= 7 and n*m!= 8 and n*m!= 9:\n            if n*m!= 3 and n*m!= 6:\n                return 0\n            if n*m!= 5:\n                return 0\n            if n*m!= 7 and n*m!= 8:\n                return 0\n            if n*m!= 9:\n                return 0\n    return 1"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    B = [list(map(int, stdin.split())) for _ in range(n)]\n    if not(n==m):\n        return \"Impossible\"\n    for i in range(n):\n        if any(A[i] < A[j] for j in range(i)):\n            return \"Impossible\"\n        if any(B[i] < B[j] for j in range(i)):\n            return \"Impossible\"\n    for i in range(m):\n        if any(A[j] < A[i] for j in range(i)):\n            return \"Impossible\"\n        if any(B[j] < B[i] for j in range(i)):\n            return \"Impossible\"\n    if n == 2 and m == 2:\n        if A[0] > A[1] or B[0] > B[1]:\n            return \"Impossible\"\n        if A[0] < A[1] and B[0] < B[1]:\n            return \"Possible\"\n        return \"Possible\"\n    if n == 3 and m == 3:\n        if A[0] > A[1] or A[1] > A[2] or B[0] > B[1] or B[1] > B[2]:\n            return \"Impossible\"\n        if A[0] < A[1] and A[1] < A[2] and B[0] < B[1] and B[1] < B[2]:\n            return \"Possible\"\n        return \"Possible\"\n    return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    if a_sorted == b_sorted:\n        return \"Possible\"\n    return \"Impossible\"\n\n\nprint(solution('2 3'))\nprint(solution('2 2'))\nprint(solution('3 2'))\nprint(solution('3 3'))"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    possible = False\n    if n == 1:\n        if m == 1:\n            if a[0] <= b[0]:\n                return \"Possible\"\n            else:\n                return \"Impossible\"\n        else:\n            return \"Impossible\"\n    else:\n        for i in range(n):\n            for j in range(m):\n                if a[i * m + j] > b[i * m + j]:\n                    break\n            else:\n                possible = True\n                break\n        if possible:\n            return \"Possible\"\n        else:\n            return \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        if all(a[i][j] <= a[i][j+1] for j in range(m-1)):\n            return \"Possible\"\n    for i in range(n):\n        if all(b[i][j] <= b[i][j+1] for j in range(m-1)):\n            return \"Possible\"\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                a[i][j], b[i][j] = b[i][j], a[i][j]\n                if all(a[i][j] <= a[i][j+1] for j in range(m-1)) and all(b[i][j] <= b[i][j+1] for j in range(m-1)):\n                    return \"Possible\"\n                a[i][j], b[i][j] = b[i][j], a[i][j]\n    return \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] <= b[i][j]:\n                return \"Impossible\"\n            else:\n                a[i][j], b[i][j] = b[i][j], a[i][j]\n    for i in range(n):\n        if a[i][0] <= b[i][0]:\n            return \"Impossible\"\n    for j in range(1, m):\n        if a[0][j] <= b[0][j]:\n            return \"Impossible\"\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] <= b[i][j]:\n                return \"Impossible\"\n    return \"Possible\""
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = list(map(int, stdin[0].split(\" \")))\n    first_matrix = list(map(int, stdin[1].split(\" \")))\n    second_matrix = list(map(int, stdin[2].split(\" \")))\n    result = \"Impossible\"\n    if len(first_matrix)!= len(second_matrix):\n        return result\n    if len(first_matrix) == 1 and len(second_matrix) == 1:\n        if first_matrix[0] > second_matrix[0]:\n            result = \"Possible\"\n    else:\n        for i in range(len(first_matrix)):\n            if first_matrix[i] > second_matrix[i]:\n                result = \"Possible\"\n                break\n    return result\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    matrix_1 = [(int(x) for x in stdin.split()[i * m:(i + 1) * m]) for i in range(n)]\n    matrix_2 = [(int(x) for x in stdin.split()[i * m:(i + 1) * m]) for i in range(n)]\n    for i in range(n):\n        for j in range(m - 1):\n            if matrix_1[i][j] > matrix_1[i][j + 1]:\n                matrix_1[i][j], matrix_1[i][j + 1] = matrix_1[i][j + 1], matrix_1[i][j]\n            if matrix_2[i][j] > matrix_2[i][j + 1]:\n                matrix_2[i][j], matrix_2[i][j + 1] = matrix_2[i][j + 1], matrix_2[i][j]\n\n    if matrix_1 == matrix_2:\n        return \"Possible\"\n    else:\n        return \"Impossible\""
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                i_swap = i\n                j_swap = j\n                break\n    i = i_swap\n    j = j_swap\n    while i > 0 and j > 0:\n        if a[i - 1][j] <= a[i][j]:\n            i -= 1\n        elif b[i][j - 1] <= b[i][j]:\n            j -= 1\n        else:\n            return \"Impossible\"\n    return \"Possible\"\n\n\ndef"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix1 = list(map(int, stdin.split()))\n    matrix2 = list(map(int, stdin.split()))\n    if not all([0 < i < 10 ** 9 for i in matrix1]) or not all([0 < j < 10 ** 9 for j in matrix2]):\n        return \"Impossible\"\n    first_rows = {i for i, j in zip(range(len(matrix1)), matrix1) if j == min(matrix1)}\n    second_rows = {i for i, j in zip(range(len(matrix2)), matrix2) if j == min(matrix2)}\n    if first_rows!= second_rows:\n        return \"Impossible\"\n    first_cols = {i for i, j in zip(range(len(matrix1)), zip(*matrix1)) if j == min(matrix1)}\n    second_cols = {i for i, j in zip(range(len(matrix2)), zip(*matrix2)) if j == min(matrix2)}\n    if first_cols!= second_cols:\n        return \"Impossible\"\n    first_diag = {i for i, j in zip(range(len(matrix1)), zip(*matrix1)) if j == min(matrix1) and i == min(matrix1)}\n    second_diag = {i for i, j in zip(range(len(matrix2)), zip(*matrix2)) if j == min(matrix2) and i == min(matrix2)}\n    if first_diag!= second_diag:\n        return \"Impossible\"\n    return \"Possible\"\n\n\nsolution(input())\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return \"Possible\"\n    return \"Impossible\"\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin\n    # print(f'n = {n}')\n    # print(f'strings = {strings}')\n    def max_strings(a, b, c):\n        \"\"\"\n        :param a:int, the limitation on the number of occurrences of the i-th letter\n        :param b:int, the limitation on the number of occurrences of the i-th letter\n        :param c:int, the limitation on the number of occurrences of the i-th letter\n        :return: the maximum length of the string that meets all the requirements\n        \"\"\"\n        if len(strings) <= 1:\n            if a >= 1:\n                return len(strings)\n            else:\n                return len(strings) - 1\n        strings_list = []\n        strings_list.append(strings[0])\n        strings_list.append(strings[1])\n        strings_list.append(strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings[0] + strings[2])\n        strings_list.append(strings[0] + strings[1] + strings[0] + strings[1] + strings[1] + strings[1] + strings[1] + strings[1] + strings["
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    res = 0\n    m = float(\"inf\")\n    for i in range(1, 26):\n        if m < n // i:\n            m = n // i\n            res = i\n    return res\n    \n    \nsolution(\n    \"3\"\n)\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  data = stdin.split()\n  n = int(data[0])\n  #print(n)\n  res = 0\n  for i in data[1:]:\n    #print(i)\n    i = int(i)\n    c = 0\n    for j in range(0,n):\n      #print(i,res)\n      if j in range(0,n-i+1):\n        c += 1\n      else:\n        c = 0\n    if c > res:\n      res = c\n  return res\n\nprint(solution(\"3\"))"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    alphabet = list(range(1, n + 1))\n    a = list(map(int, stdin.split()))\n\n    alpha_dict = dict()\n    for i in range(n):\n        alpha_dict[alphabet[i]] = a[i]\n    \n    max_length = 0\n    keys = sorted(alpha_dict.keys(), key=lambda x: alpha_dict[x])\n    for key in keys:\n        a_count = alpha_dict[key]\n        if a_count < 1:\n            continue\n        for c in range(1, a_count + 1):\n            if key * c > max_length:\n                max_length = key * c\n    \n    return str(max_length)"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    letters = list(map(int, stdin.split()))\n    max_length = 0\n    for i in range(N):\n        max_length = max(max_length, letters[i] + letters[i] * (letters[i] - 1) // 2)\n    print(max_length)\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return max(int(stdin), len(stdin))"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.strip().split()))\n    a = t[:n]\n    b = t[n:]\n    counts = {}\n    for i in range(len(a)):\n        counts[a[i]] = counts.get(a[i], 0) + 1\n    for i in range(len(b)):\n        counts[b[i]] = counts.get(b[i], 0) + 1\n    res = 0\n    for j in range(len(a)):\n        if a[j] not in counts:\n            continue\n        if counts[a[j]] > b[j]:\n            res = max(res, len(a))\n    for j in range(len(b)):\n        if b[j] not in counts:\n            continue\n        if counts[b[j]] > a[j]:\n            res = max(res, len(b))\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    max_len = 1\n    cur_len = 1\n    while True:\n        for i in range(n):\n            if a[i] >= cur_len:\n                cur_len += 1\n        max_len = max(max_len, cur_len)\n        if cur_len >= n * max(a):\n            break\n        cur_len = 1\n    return str(max_len)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[-1] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for j in range(n):\n        for i in range(k, -1, -1):\n            if dp[j][i] == -1:\n                continue\n            dp[j + 1][i] = dp[j][i]\n            if i >= a[j]:\n                dp[j + 1][i] = max(dp[j + 1][i], dp[j][i] + 1)\n    return dp[n][k]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    ans = 0\n    \n    while a:\n        target = max(a)\n        count = 1\n        while count < k and a[count] >= target:\n            count += 1\n        ans += count\n        for i in range(count):\n            a.remove(target)\n    return str(ans)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    while k:\n        if a[0] <= max(a[1:]):\n            res += 1\n            k -= 1\n        a.pop(0)\n    return str(res)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # return f\"{solution2(int(stdin[0]), list(map(lambda x: int(x), stdin[1].split())))}\"\n    return f\"{solution2(int(stdin[0]), list(map(lambda x: int(x), stdin[1].split())))}\"\ndef"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 1\n    l = 1\n    r = k\n    while l < r:\n        m = l + (r - l) // 2\n        if sum([i * a[i] for i in range(m, n)]) > 0:\n            l = m + 1\n        else:\n            r = m\n    if l * a[l-1] > 0:\n        s += 1\n    return str(s)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_decoforce(n):\n        return n >= 5\n\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    low, high = min(problems), max(problems)\n\n    while low <= high:\n        mid = (low + high) // 2\n        if all(is_decoforce(p - mid) for p in problems):\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return str(low - 1)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    a.sort(reverse=True)\n    \n    if not k:\n        return str(0)\n    \n    for i in range(1, n):\n        if a[i] == a[i-1] and a[i] > 1:\n            a[i] = int((a[i] // 2) + (k - 2))\n    \n    print(len(a))\n    return"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    start = 0\n    count = 0\n    while start < n:\n        if a[start] % 2 == 0:\n            start += 1\n            continue\n        start += 1\n        count += 1\n        if count >= k:\n            return \"0\"\n    return str(count)"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems_in_decoforces = list(map(int, stdin.split()))\n    problems_in_other_judges = {}\n    problems_in_other_judges[1] = problems_in_decoforces\n    for i in range(2, n + 1):\n        problems_in_other_judges[i] = []\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if problems_in_other_judges[i]:\n                for problem in problems_in_other_judges[i]:\n                    if problem % 2 == 0:\n                        if problem // 2 in problems_in_decoforces:\n                            problems_in_other_judges[i].append(problem)\n            if problems_in_other_judges[j]:\n                for problem in problems_in_other_judges[j]:\n                    if problem % 2 == 0:\n                        if problem // 2 in problems_in_decoforces:\n                            problems_in_other_judges[j].append(problem)\n    tasks = 0\n    while tasks < k:\n        if tasks in problems_in_other_judges:\n            for problem in problems_in_other_judges[tasks]:\n                problems_in_decoforces.remove(problem)\n            tasks += 1\n        else:\n            break\n    if len(problems_in_decoforces) < k:\n        return \"0\"\n    return str(len(problems_in_decoforces))\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    return str(min(a))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split('\\n')\n    n = int(inputs[0])\n    min_1, max_1 = list(map(int, inputs[1].split()))\n    min_2, max_2 = list(map(int, inputs[2].split()))\n    min_3, max_3 = list(map(int, inputs[3].split()))\n    print(max(2, min(max_1 + max_2 + max_3, 3 * n)))\n\n    return '\\n'.join(str(x) for x in (max_1, max_2, max_3))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.strip().split(\"\\n\")\n    n = int(stdin_lines[0])\n    limits_1 = list(map(int, stdin_lines[1].split()))\n    limits_2 = list(map(int, stdin_lines[2].split()))\n    limits_3 = list(map(int, stdin_lines[3].split()))\n    return \" \".join(map(str, find_optimal_distribution(n, limits_1, limits_2, limits_3)))\n\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    stdin_1 = [int(i) for i in lines[1].split(\" \")]\n    stdin_2 = [int(i) for i in lines[2].split(\" \")]\n\n    max_1 = max_2 = max_3 = min_1 = min_2 = min_3 = 1\n\n    for i in stdin_1:\n        if i > max_1:\n            max_1 = i\n\n    for i in stdin_2:\n        if i > max_2:\n            max_2 = i\n\n    for i in stdin_2:\n        if i > max_3:\n            max_3 = i\n\n    for i in stdin_1:\n        if i > max_1:\n            min_1 = i\n        if i > max_2:\n            min_2 = i\n        if i > max_3:\n            min_3 = i\n\n    sum_3 = sum_2 = sum_1 = n\n\n    if max_1 >= max_2 >= max_3:\n        sum_3 = sum_1 + min_1 - min_3\n        sum_2 = sum_1 + min_2 - min_3\n        sum_1 = sum_1 + min_3 - min_3\n\n    elif max_1 >= max_3 >= max_2:\n        sum_3 = sum_1 + min_1 - min_3\n        sum_2 = sum_1 + min_2 - min_3\n        sum_1 = sum_2 + min_3 - min_3\n\n    elif max_2 >= max_3 >= max_1:\n        sum_3 = sum_1 + min_2 - min_3\n        sum_2 = sum_2 + min_1 - min_3\n        sum_1 = sum_2 + min_3 - min_3\n\n    elif max_2 >= max_1 >= max_3:\n        sum_3 = sum_1 + min_2 - min_3\n        sum_2 = sum_1 + min_1 - min_3\n        sum_1 = sum_2 + min_3 - min_3\n\n    elif max_3 >= max_1 >= max_2:\n        sum_3 = sum_1 + min_3 - min_3\n        sum_2 = sum_1 + min_2 - min_3\n        sum_1 = sum_2 + min_1 - min_3\n\n    elif max_3 >= max_2 >= max_1:\n        sum_3 = sum_1 + min_3 - min_3\n        sum_2 = sum_1 + min_2 - min_3\n        sum_1 = sum_2 + min_1 - min_3\n\n    else:\n        sum_3 = sum_1 + min_3 - min_3\n        sum_2 = sum_1 + min_2 - min_3\n        sum_1 = sum_2 + min_1 - min_3\n\n    return str(sum_1) + \" \" + str(sum_2) + \" \" + str(sum_3)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_1 = int(stdin.split()[0])\n    max_1 = int(stdin.split()[1])\n    min_2 = int(stdin.split()[2])\n    max_2 = int(stdin.split()[3])\n    min_3 = int(stdin.split()[4])\n    max_3 = int(stdin.split()[5])\n\n    # stdout.write(str(find_optimal_distribution(n, min_1, max_1, min_2, max_2, min_3, max_3)))\n    return str(find_optimal_distribution(n, min_1, max_1, min_2, max_2, min_3, max_3))\n\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_1 = int(stdin.split()[1])\n    max_1 = int(stdin.split()[2])\n    min_2 = int(stdin.split()[3])\n    max_2 = int(stdin.split()[4])\n    min_3 = int(stdin.split()[5])\n    max_3 = int(stdin.split()[6])\n    return \" \".join([str(max_1 + max_2 + max_3), str(max_1 + max_2 + max_3 + max_1), str(max_2 + max_2 + max_3)])"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4')\n    '1 2'\n    '''\n    n = int(stdin.split('\\n')[0])\n    min_1, max_1 = map(int, stdin.split('\\n')[1].split(' '))\n    min_2, max_2 = map(int, stdin.split('\\n')[2].split(' '))\n    min_3, max_3 = map(int, stdin.split('\\n')[3].split(' '))\n    #print(n, min_1, max_1, min_2, max_2, min_3, max_3)\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n    while True:\n        if count_1 >= min_1 and count_1 <= max_1:\n            if count_2 >= min_2 and count_2 <= max_2:\n                if count_3 >= min_3 and count_3 <= max_3:\n                    count_1 += 1\n                    count_2 += 1\n                    count_3 += 1\n                else:\n                    count_3 += 1\n            else:\n                count_2 += 1\n        else:\n            count_1 += 1\n        if count_1 > n:\n            break\n    return str(count_1) +'' + str(count_2) +'' + str(count_3)\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    min_1, max_1 = map(int, stdin.split()[1].split(' '))\n    min_2, max_2 = map(int, stdin.split()[2].split(' '))\n    min_3, max_3 = map(int, stdin.split()[3].split(' '))\n    if min_1 + min_2 + min_3 <= n <= max_1 + max_2 + max_3:\n        if max_1 + max_2 + max_3 < n:\n            if max_1 + max_2 <= max_3:\n                return str(max_1) +'' + str(max_2) +'' + str(max_3)\n            else:\n                return str(max_1) +'' + str(max_3) +'' + str(max_2)\n        else:\n            if max_1 + max_2 <= max_3:\n                return str(max_1) +'' + str(max_3) +'' + str(max_2)\n            else:\n                return str(max_1) +'' + str(max_2) +'' + str(max_3)\n    else:\n        return 'ERROR'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    min1 = int(stdin.split()[1])\n    max1 = int(stdin.split()[2])\n    min2 = int(stdin.split()[3])\n    max2 = int(stdin.split()[4])\n    min3 = int(stdin.split()[5])\n    max3 = int(stdin.split()[6])\n    max_1 = min(max1, max2, max3)\n    min_1 = max(min1, min2, min3)\n    max_2 = max(max2, max3)\n    min_2 = min(min2, min3)\n    max_3 = max(max3, max1)\n    min_3 = min(min3, min1)\n    return str(max_1 + max_2 + max_3)"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    min_1, max_1 = int(stdin.split()[1]), int(stdin.split()[2])\n    min_2, max_2 = int(stdin.split()[3]), int(stdin.split()[4])\n    min_3, max_3 = int(stdin.split()[5]), int(stdin.split()[6])\n    total_d = max_1 + max_2 + max_3\n    if total_d > n:\n        print(max_1, max_2, max_3)\n    else:\n        if min_1 <= min_2 <= max_1 <= max_2 <= max_3 <= n and min_1 <= min_3 <= max_1 <= max_2 <= max_3 <= max_3:\n            print(min_2, max_2, max_3)\n        elif min_2 <= min_1 <= max_2 <= max_1 <= max_3 <= n and min_2 <= min_3 <= max_2 <= max_3 <= max_3:\n            print(min_2, max_2, max_3)\n        elif min_2 <= min_1 <= max_2 <= max_1 <= max_3 <= n and min_2 <= min_1 <= max_2 <= max_3 <= max_3:\n            print(min_2, max_2, max_3)\n        elif min_3 <= min_1 <= max_3 <= max_1 <= max_2 <= n and min_3 <= min_2 <= max_3 <= max_2 <= max_3:\n            print(min_3, max_3, max_3)\n        elif min_3 <= min_1 <= max_3 <= max_1 <= max_2 <= n and min_3 <= min_2 <= max_3 <= max_2 <= max_3:\n            print(min_3, max_3, max_3)\n        elif min_3 <= min_1 <= max_3 <= max_1 <= max_2 <= n and min_3 <= min_2 <= max_3 <= max_2 <= max_3:\n            print(min_3, max_3, max_3)\n        elif min_1 <= min_2 <= max_1 <= max_2 <= max_3 <= n and min_1 <= min_3 <= max_1 <= max_2 <= max_3 <= max_3:\n            print(min_1, max_1, max_3)\n        elif min_2 <= min_1 <= max_2 <= max_1 <= max_3 <= n and min_2 <= min_3 <= max_2 <= max_3 <= max_3:\n            print(min_2, max_2, max_3)\n        elif min_2 <= min_1 <= max_2 <= max_1 <= max_3 <= n and min_2 <= min_3 <= max_2 <= max_3 <= max_3:\n            print(min_2, max_2, max_3)\n        elif min_3 <= min_1 <= max_3 <= max_1 <= max_2 <= n and min_3 <= min_2 <= max_3 <= max_2 <= max_3:\n            print(min_3, max_3, max_3)\n        elif min_3 <= min_1 <= max_3 <= max_1 <= max_2 <= n and min_3 <= min_2 <= max_3 <= max_2 <= max_3:\n            print(min_3, max_3, max_3)\n        elif min_3 <= min_1 <= max_3 <= max_1 <= max_2 <= n and min_3 <= min_2 <= max_3 <= max_2 <= max_3:\n            print(min_3, max_3, max_3)"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d_min, d_max = map(int, stdin.split())\n    student_d = [[0] * (d_max + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        student_d[i][0] = 1\n    for i in range(1, d_max + 1):\n        student_d[0][i] = i\n    for i in range(1, n + 1):\n        for j in range(1, d_max + 1):\n            student_d[i][j] = student_d[i - 1][j] + student_d[i][j - 1]\n    return str(student_d[n][d_max])\n\nprint(solution(input()))\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    a = list(map(int, lines.pop(0).split()))\n    print('UP' if a[0] < n+1 else 'DOWN')"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    prev_size = 0\n    for size in stdin.strip().split():\n        size = int(size)\n        if size > prev_size:\n            print(\"UP\")\n        elif size < prev_size:\n            print(\"DOWN\")\n        else:\n            print(\"-\" * 10)\n        prev_size = size\n    return \"-\" * 10\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 8:\n        return \"DOWN\"\n    elif n == 8:\n        return \"UP\"\n    else:\n        return -1"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if n == 1:\n        return 'UP' if a[0] < a[1] else 'DOWN'\n    if n >= 2:\n        if a[0] == a[1] and a[1] < a[2]:\n            return 'UP'\n        if a[0] == a[1] and a[1] > a[2]:\n            return 'DOWN'\n        if a[0]!= a[1] and a[1] < a[2]:\n            return 'UP'\n        if a[0]!= a[1] and a[1] > a[2]:\n            return 'DOWN'\n    return '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        #print(a)\n        if a[0] == 1 and a[1] > a[2]:\n            #print(\"UP\")\n            return \"UP\"\n        elif a[0] == 1 and a[1] <= a[2]:\n            #print(\"DOWN\")\n            return \"DOWN\"\n        elif a[0] > 1 and a[1] == a[2]:\n            #print(\"DOWN\")\n            return \"DOWN\"\n        elif a[0] > 1 and a[1] > a[2]:\n            #print(\"UP\")\n            return \"UP\"\n    return \"-\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    size = data[0]\n    days = data[1:]\n    last_day = days[-1]\n    \n    is_up = False\n    \n    for day in days:\n        if day <= size:\n            size = day\n        else:\n            break\n    \n    if size <= last_day:\n        is_up = True\n        \n    return \"UP\" if is_up else \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    consecutive_days = []\n    for i in range(1, n + 1):\n        consecutive_days.append(int(stdin.split()[i - 1]))\n    return \"DOWN\" if consecutive_days[-1] > consecutive_days[0] else \"UP\"\n\nsolution('1')\nsolution('7')\nsolution('3 4 5 6 7')\nsolution('5 12 13 14 15 14 13 12')\nsolution('1 8')\nsolution('2 9')\nsolution('3 4 5 6 7')\nsolution('5 12 13 14 15 14 13 12')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\nsolution('5 1 2 3 4 5 6 7')\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin\n    s = {i for i in range(1, n + 1)}\n    _, *a = sorted(map(int, stdin.split()))\n\n    while s:\n        if len(s) < 5:\n            return \"-\"\n        day = s.pop()\n        if a[-1] >= day:\n            return \"UP\"\n        a.pop()\n        s.update(s - {day})\n    return \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"UP\" if stdin.split()[1] < stdin.split()[2] else \"DOWN\" if stdin.split()[1] > stdin.split()[2] else \"-\""
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    \n    i = 0\n    d = True\n    for j in range(n):\n        if a[i] > 15:\n            d = False\n            break\n        i += 1\n    if d:\n        return \"UP\"\n    \n    if i == n - 1:\n        return \"DOWN\"\n    \n    i = 0\n    d = True\n    for j in range(n - 1, -1, -1):\n        if a[i] > 15:\n            d = False\n            break\n        i += 1\n    if d:\n        return \"DOWN\"\n    \n    if i == 0:\n        return \"UP\"\n    \n    return \"-\"\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin.lower()\n    t = stdin.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in vowels:\n        if i in s and i in t:\n            for j in range(len(s)):\n                if s[j] == i and t[j] == i:\n                    continue\n                elif s[j] == i and t[j] in vowels:\n                    t = t[:j] + t[j+1:]\n                elif s[j] == i and t[j] in vowels:\n                    s = s[:j] + s[j+1:]\n                else:\n                    return \"No\"\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    vowels = \"aeiou\"\n    if s == t:\n        return \"Yes\"\n    elif len(s)!= len(t):\n        return \"No\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s = s[0:i] + t[i] + s[i + 1:]\n            if s == t:\n                return \"Yes\"\n        elif t[i] in vowels:\n            t = t[0:i] + s[i] + t[i + 1:]\n            if t == s:\n                return \"Yes\"\n        else:\n            t = t[0:i] + s[i] + t[i + 1:]\n            if t == s:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return a if s1 == s2\n    s1 = stdin.split()[0]\n    s2 = stdin.split()[1]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    con = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    for i in range(len(s1)):\n        if s1[i] in vowels and s2[i] in con:\n            if s1[i]!= s2[i]:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l_s = len(s)\n    l_t = len(t)\n    for i in range(l_s):\n        if s[i].lower() not in ['a','e','i','o','u']:\n            continue\n        for j in range(i+1,l_s):\n            if s[j].lower() not in ['a','e','i','o','u']:\n                continue\n            if s[i]!= s[j]:\n                if s[i].lower() == s[j].lower():\n                    if s[i].lower() == 'a':\n                        s_1 = s[:i] + 'b' + s[i+1:]\n                        s_2 = s[:j] + 'c' + s[j+1:]\n                    elif s[i].lower() == 'e':\n                        s_1 = s[:i] + 'b' + s[i+1:]\n                        s_2 = s[:j] + 'c' + s[j+1:]\n                    elif s[i].lower() == 'i':\n                        s_1 = s[:i] + 'c' + s[i+1:]\n                        s_2 = s[:j] + 'b' + s[j+1:]\n                    else:\n                        s_1 = s[:i] + 'c' + s[i+1:]\n                        s_2 = s[:j] + 'b' + s[j+1:]\n                    if s_1 == t:\n                        return 'Yes'\n                    elif s_2 == t:\n                        return 'Yes'\n    return 'No'"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"Yes\" if \"a\" in s and \"u\" in s and \"e\" in s and \"i\" in s and \"o\" in s and \"i\" in s else \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = input()\n\n    if len(s) == len(t):\n        for i in range(len(s)):\n            if s[i].isalpha() and t[i].isalpha():\n                if s[i]!= t[i]:\n                    return 'No'\n                else:\n                    return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, t = stdin.split(\"\\n\")\n    if a == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_transformable(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if is_transformable(s, t):\n        return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s_list = list(s)\n    t_list = list(t)\n\n    if set(s_list).symmetric_difference(set(t_list)):\n        return \"No\"\n    if len(s_list)!= len(t_list):\n        return \"No\"\n    for i in range(len(s_list)):\n        if s_list[i]!= t_list[i]:\n            if t_list[i] in 'aeiou':\n                if i + 1 == len(s_list) or s_list[i + 1] not in 'aeiou':\n                    return \"No\"\n            if t_list[i] in 'aeiou':\n                if i + 1 == len(s_list) or t_list[i + 1] not in 'aeiou':\n                    return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an initial board description, return 'A' if A wins the game, and 'B' if B wins.\n    \"\"\"\n    # your code here\n    stdin_list = stdin.split()\n    black_pos = []\n    white_pos = []\n    for i in range(8):\n        for j in range(8):\n            if stdin_list[i][j] == 'B':\n                black_pos.append((i, j))\n            elif stdin_list[i][j] == 'W':\n                white_pos.append((i, j))\n    white_pos.sort(key=lambda x: x[0])\n    black_pos.sort(key=lambda x: x[0])\n\n    white_move = 0\n    black_move = 0\n\n    for i in range(len(white_pos)):\n        while white_move < 5 and white_pos[i][0] < 8:\n            white_pos[i] = (white_pos[i][0] - 1, white_pos[i][1])\n            white_move += 1\n        if white_move == 5:\n            break\n\n    for i in range(len(black_pos)):\n        while black_move < 5 and black_pos[i][0] > 0:\n            black_pos[i] = (black_pos[i][0] + 1, black_pos[i][1])\n            black_move += 1\n        if black_move == 5:\n            break\n    if white_move == black_move:\n        return \"A\"\n    else:\n        return \"B\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split()\n    a = line1[0].split(\".\")\n    b = line1[1].split(\".\")\n    c = line1[2].split(\".\")\n    d = line1[3].split(\".\")\n    e = line1[4].split(\".\")\n    f = line1[5].split(\".\")\n    g = line1[6].split(\".\")\n    h = line1[7].split(\".\")\n\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    c = [int(i) for i in c]\n    d = [int(i) for i in d]\n    e = [int(i) for i in e]\n    f = [int(i) for i in f]\n    g = [int(i) for i in g]\n    h = [int(i) for i in h]\n\n    if (8 not in a) and (1 not in b) and (8 not in c) and (1 not in d) and (8 not in e) and (1 not in f) and (1 not in g) and (8 not in h):\n        return \"A\"\n    else:\n        return \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  black = stdin.count('B')\n  white = stdin.count('W')\n  if black > white:\n    return 'B'\n  if white > black:\n    return 'A'\n  return 'D'\n\nstdin = sys.stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    board = {}\n    for line in lines:\n        cells = []\n        for i in range(1, 9):\n            if line[i] == 'B':\n                cells.append(i)\n        board[tuple(cells)] = 1 if line[0] == 'B' else -1\n    for i in range(1, 8):\n        for j in range(1, 9):\n            if board[(i, j)] == 1:\n                board[(i, j + 1)] *= -1\n            elif board[(i, j)] == -1:\n                board[(i + 1, j)] *= -1\n    if len(board) == 8:\n        if sum(board.values()) == 0:\n            return 'A'\n        elif sum(board.values()) == -8:\n            return 'B'\n    return 'D'\n    \n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = None\n    return answer\nprint(solution(input()))\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # The chessboard is represented as a string, where letters represent white pawns and. represent black pawns. We need to find the winner for this game.\n    n = len(stdin)\n    # We need to check the white pawns first. They are placed at the top of the board.\n    if stdin[0] == 'W' * n:\n        return 'A'\n    # Now we need to check the black pawns. The black pawns are placed in the first row from the bottom.\n    if stdin[n-1] == 'B' * n:\n        return 'B'\n\n    # Now we need to check the white pawns. The black pawns are placed in the first row from the bottom.\n    if stdin[0] == 'B' * n:\n        return 'A'\n    # We have to use the same approach to find the winner, except that we need to look at the black pawns first.\n    if stdin[n - 1] == 'W' * n:\n        return 'B'\n    return 'A'"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split(\"\\n\")\n    n = len(board)\n    m = len(board[0])\n    w_count = 0\n    b_count = 0\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \"B\":\n                b_count += 1\n            if board[row][col] == \"W\":\n                w_count += 1\n    if b_count == 0 or w_count == 0:\n        print(\"A\")\n        return \"A\"\n    if b_count > w_count:\n        print(\"B\")\n        return \"B\"\n    for i in range(n):\n        for j in range(m):\n            if board[i][j]!= \".\":\n                board[i][j] = \".\"\n                break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"B\" if i == 0 else \"W\"\n    w_count = 0\n    b_count = 0\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \"B\":\n                b_count += 1\n            if board[row][col] == \"W\":\n                w_count += 1\n    if b_count == 0 or w_count == 0:\n        print(\"A\")\n        return \"A\"\n    if b_count > w_count:\n        print(\"B\")\n        return \"B\"\n    return \"A\" if board[0][0] == \"B\" else \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    rows = 8\n    columns = 8\n    board = [[] for _ in range(rows)]\n    white_pawns = []\n    black_pawns = []\n    for row in range(rows):\n        for column in range(columns):\n            if stdin[row][column] == \"B\":\n                black_pawns.append((row, column))\n            elif stdin[row][column] == \"W\":\n                white_pawns.append((row, column))\n            board[row].append(\".\")\n    \n    move_count = { \"A\": 0, \"B\": 0 }\n    white_step = 0\n    black_step = 0\n    while white_step < len(white_pawns) and black_step < len(black_pawns):\n        white_row, white_column = white_pawns[white_step]\n        black_row, black_column = black_pawns[black_step]\n        board[white_row][white_column] = \".\"\n        board[black_row][black_column] = \".\"\n        white_step += 1\n        black_step += 1\n        white_direction = -1\n        black_direction = 1\n        \n        while True:\n            white_row += white_direction\n            white_column += black_direction\n            if white_row == -1:\n                break\n            if white_row == 8:\n                white_row = 7\n                white_direction *= -1\n            if white_column == -1:\n                break\n            if white_column == 8:\n                white_column = 7\n                white_direction *= -1\n            if board[white_row][white_column] == \"W\":\n                white_step += 1\n                white_direction *= -1\n                break\n            if board[white_row][white_column] == \".\":\n                white_direction *= -1\n                continue\n            board[white_row][white_column] = \"W\"\n            move_count[\"A\"] += 1\n            white_direction *= -1\n            break\n        \n        while True:\n            black_row += black_direction\n            black_column += white_direction\n            if black_row == -1:\n                break\n            if black_row == 8:\n                black_row = 7\n                black_direction *= -1\n            if black_column == -1:\n                break\n            if black_column == 8:\n                black_column = 7\n                black_direction *= -1\n            if board[black_row][black_column] == \"B\":\n                black_step += 1\n                black_direction *= -1\n                break\n            if board[black_row][black_column] == \".\":\n                black_direction *= -1\n                continue\n            board[black_row][black_column] = \"B\"\n            move_count[\"B\"] += 1\n            black_direction *= -1\n            break\n    \n    for row in range(rows):\n        for column in range(columns):\n            if board[row][column] == \"W\":\n                return \"A\"\n    return \"B\"\n\nstdin = \"\"\"\n.B....B.\n....W...\n........\n........\n........\n........\n........\n........\n........\n\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    lines = stdin.split('\\n')\n    lines = list(filter(lambda x: x!= '' and x!= '.', lines))\n\n    n = len(lines)\n    r, c = 0, 0\n    for i in range(n):\n        line = lines[i]\n        r = max(r, len(line) - 1)\n        c += 1\n        if i % 2 == 0:\n            for j in range(len(line)):\n                if line[j] == 'B':\n                    r = max(r, j)\n                if line[j] == 'W':\n                    r = min(r, j)\n        else:\n            for j in range(len(line)):\n                if line[j] == 'W':\n                    r = max(r, j)\n                if line[j] == 'B':\n                    r = min(r, j)\n    # c = max(c, len(lines) - 1)\n    if r == 1:\n        res = 'A'\n    else:\n        res = 'B'\n\n    return res"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get_input\n    input_string = stdin\n    n = int(input_string.split()[0])\n    game_board = []\n    for i in range(n):\n        game_board.append(input_string.split()[i+1])\n    game_board = list(map(list, zip(*game_board)))\n\n    # find_winner\n    def find_winner(game_board, player_turn, player_piece):\n        winner = False\n        for i in range(n):\n            for j in range(n):\n                if game_board[i][j] == player_piece:\n                    x = i\n                    y = j\n                    while x < 8:\n                        if game_board[x][y] == '.':\n                            x += 1\n                            break\n                        else:\n                            if game_board[x][y] == player_turn:\n                                if x == 8:\n                                    winner = True\n                                    break\n                                else:\n                                    winner = False\n                                    break\n                                break\n                            else:\n                                break\n        return winner\n\n    # check_winner\n    def check_winner(game_board):\n        # check row\n        for i in range(n):\n            if find_winner(game_board, 'B', 'B') == True:\n                return 'B'\n        # check column\n        for i in range(n):\n            if find_winner(game_board, 'W', 'W') == True:\n                return 'W'\n        # check diag\n        for i in range(n):\n            if find_winner(game_board, 'B', 'W') == True:\n                return 'W'\n        for i in range(n):\n            if find_winner(game_board, 'W', 'B') == True:\n                return 'B'\n\n        return 'T'\n\n    # check_winner\n    return check_winner(game_board)"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = sorted(map(int, stdin.splitlines()[1]))\n    m = int(stdin.splitlines()[2])\n    b = sorted(map(int, stdin.splitlines()[3]))\n\n    answer = -1\n    for i in range(n):\n        for j in range(n):\n            if a[i] + b[j] == a[j] + b[i]:\n                answer = max(answer, (i + 1) + (j + 1))\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    m = int(stdin)\n    B = list(map(int, stdin.split()))\n    max_length = 0\n    for i in range(len(A)):\n        sum_sub = A[i]\n        sum_other = 0\n        for j in range(i, len(A)):\n            sum_other += A[j]\n            if sum_sub + sum_other > B[i]:\n                break\n            sum_sub += A[j]\n            max_length = max(max_length, j - i + 1)\n    return str(max_length) if max_length > 0 else \"impossible\"\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = {}\n    l1 = len(a)\n    l2 = len(b)\n    i = 0\n    j = 0\n    while (i < l1 and j < l2):\n        a[i] = max(a[i], a[i + 1])\n        a[i + 1] = max(a[i + 1], a[i])\n        b[j] = max(b[j], b[j + 1])\n        b[j + 1] = max(b[j + 1], b[j])\n        if (a[i] + b[j]) == (a[i + 1] + b[j + 1]):\n            if (i, j) not in d:\n                d[(i, j)] = 1\n                i += 1\n            else:\n                return '-1'\n        else:\n            i += 1\n            j += 1\n    return d\n\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    if len(A) == len(B):\n        i = 0\n        while i < len(A):\n            if A[i] == B[i]:\n                A[i] = sum(A[i:i + 2])\n                B[i] = sum(B[i:i + 2])\n            i += 1\n        return''.join(map(str, A)) +'' +''.join(map(str, B))\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split()\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    result = 0\n    while a!= b:\n        min_a = a[0]\n        max_a = a[0]\n        min_b = b[0]\n        max_b = b[0]\n        for i in range(1, len(a)):\n            if min_a > a[i]:\n                min_a = a[i]\n            if max_a < a[i]:\n                max_a = a[i]\n            if min_b > b[i]:\n                min_b = b[i]\n            if max_b < b[i]:\n                max_b = b[i]\n        if min_a == max_a:\n            max_a += max_a\n        if min_b == max_b:\n            max_b += max_b\n        a.remove(min_a)\n        a.remove(max_a)\n        b.remove(min_b)\n        b.remove(max_b)\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m, *b = map(int, stdin.split())\n\n    if m < n:\n        return '-1'\n\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n\n    ans = 0\n    j = 0\n    for i in range(n):\n        if a_sorted[i] < b_sorted[j]:\n            a_sorted.append(b_sorted[j])\n            j += 1\n            ans = max(ans, len(a_sorted) - i)\n        else:\n            break\n    if j < m:\n        return '-1'\n    return str(ans)"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a: List[int] = list(map(int, stdin.strip().split()))\n    b: List[int] = list(map(int, stdin.strip().split()))\n    if len(a) == 0 and len(b) == 0:\n        print(0)\n        return 0\n    elif len(a) == 0:\n        print(len(b))\n        return len(b)\n    elif len(b) == 0:\n        print(len(a))\n        return len(a)\n    dp: List[List[int]] = [[0 for _ in range(len(b) + 1)] for _ in range(len(a) + 1)]\n    # print(dp)\n    for i in range(1, len(a) + 1):\n        dp[i][0] = dp[i - 1][0] + a[i - 1]\n    for i in range(1, len(b) + 1):\n        dp[0][i] = dp[0][i - 1] + b[i - 1]\n    for i in range(1, len(a) + 1):\n        for j in range(1, len(b) + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + a[i - 1], dp[i - 1][j] + b[j - 1])\n    # print(dp)\n    return dp[len(a)][len(b)]\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    while a!= b:\n        for i in range(1, len(a)):\n            if sum(a[:i]) == sum(b[:i]):\n                a[:i] = list(map(lambda x: x + sum(a[i:]), a[i:])\n                b[:i] = list(map(lambda x: x + sum(b[i:]), b[i:]))\n                break\n    if len(a) < len(b):\n        return str(len(b) - len(a))\n    return \"-\"\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    m, b = int(stdin.split()[2]), list(map(int, stdin.split()[3:]))\n    res = '-1'\n    if n > 3:\n        a = sorted(a)\n        b = sorted(b)\n        if a == b:\n            res = ''.join(map(str, a))\n        else:\n            tmp = []\n            while len(tmp) <= len(a) and len(tmp) <= len(b):\n                tmp.append(sum(a[:len(tmp)]))\n                tmp.append(sum(b[:len(tmp)]))\n            res = ''.join(map(str, tmp))\n    return res\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    counter = 0\n    while A!= B:\n        counter += 1\n        A = list(map(sum, zip(A, B)))\n        B = list(map(sum, zip(A, B)))\n        if A == B:\n            break\n    return str(len(A)) +'' + str(counter)\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    names = set()\n    for name in stdin.split():\n        if len(name) > 100:\n            break\n        if name in names:\n            return \"NO\"\n        names.add(name)\n    return \"YES\""
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\"_\", \"\")\n    return \"YES\" if s.find('Danil') >= 0 or s.find('Olya') >= 0 or s.find('Slava') >= 0 or s.find('Ann') >= 0 or s.find('Nikita') >= 0 else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return 'YES' if any(name in stdin for name in ('Alex', 'Nikita', 'Olya', 'Danil', 'Slava')) else 'NO'\n    return 'YES' if '_' not in stdin else 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return 'YES' if set(stdin) <= {'danil', 'olya','slava', 'ann', 'nikita'} else 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split()\n    for name in names:\n        if len(name) > 100 or len(name) < 1:\n            return \"NO\"\n        for i in range(len(name)):\n            if name.count(name[i]) > 1:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answ = \"\"\n    for i in stdin:\n        if i.lower() in \"danil olya slava ann\".split():\n            answ += \"YES\"\n        else:\n            answ += \"NO\"\n    return answ\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for c in stdin:\n        if c.lower() in '_danil_olya_slava_ann':\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin.split():\n        if i.count(\"_\") == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    stdin = stdin.replace(\"_\", \"\")\n    stdin = stdin.replace(\".\", \"\")\n    stdin = stdin.replace(\" \", \"\")\n    for i in range(len(stdin)):\n        if stdin[i] in \"anolius\":\n            if stdin[i - 1] == \"a\":\n                if stdin[i - 2] == \"n\":\n                    if stdin[i - 3] == \"i\":\n                        if stdin[i - 4] == \"l\":\n                            if stdin[i - 5] == \"s\":\n                                if stdin[i - 6] == \"a\":\n                                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    friends = \"Danil\", \"Olya\", \"Slava\", \"Ann\", \"Nikita\"\n    # friend_list = [\"Danil\", \"Olya\", \"Slava\", \"Ann\", \"Nikita\"]\n    # friend_set = set(friend_list)\n    # friend_dict = {friend: friends.index(friend) + 1 for friend in friend_list}\n    # friends = dict(zip(friend_list, friend_set))\n    # friends = {\n    #     \"Danil\": 1,\n    #     \"Olya\": 2,\n    #     \"Slava\": 3,\n    #     \"Ann\": 4,\n    #     \"Nikita\": 5\n    # }\n\n    for friend in friends:\n        if friend in stdin:\n            return \"YES\"\n    return \"NO\"\n"
    }
]